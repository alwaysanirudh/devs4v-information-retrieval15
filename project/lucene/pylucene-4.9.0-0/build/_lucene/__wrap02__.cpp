#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/SimpleHTMLEncoder.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/highlight/Encoder.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *SimpleHTMLEncoder::class$ = NULL;
          jmethodID *SimpleHTMLEncoder::mids$ = NULL;
          bool SimpleHTMLEncoder::live$ = false;

          jclass SimpleHTMLEncoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/SimpleHTMLEncoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_encodeText_97a5258f] = env->getMethodID(cls, "encodeText", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_htmlEncode_97a5258f] = env->getStaticMethodID(cls, "htmlEncode", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleHTMLEncoder::SimpleHTMLEncoder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::java::lang::String SimpleHTMLEncoder::encodeText(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_encodeText_97a5258f], a0.this$));
          }

          ::java::lang::String SimpleHTMLEncoder::htmlEncode(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_htmlEncode_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_SimpleHTMLEncoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleHTMLEncoder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleHTMLEncoder_init_(t_SimpleHTMLEncoder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleHTMLEncoder_encodeText(t_SimpleHTMLEncoder *self, PyObject *arg);
          static PyObject *t_SimpleHTMLEncoder_htmlEncode(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_SimpleHTMLEncoder__methods_[] = {
            DECLARE_METHOD(t_SimpleHTMLEncoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleHTMLEncoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleHTMLEncoder, encodeText, METH_O),
            DECLARE_METHOD(t_SimpleHTMLEncoder, htmlEncode, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SimpleHTMLEncoder, t_SimpleHTMLEncoder, ::java::lang::Object, SimpleHTMLEncoder, t_SimpleHTMLEncoder_init_, 0, 0, 0, 0, 0);

          void t_SimpleHTMLEncoder::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleHTMLEncoder), module, "SimpleHTMLEncoder", 0);
          }

          void t_SimpleHTMLEncoder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SimpleHTMLEncoder).tp_dict, "class_", make_descriptor(SimpleHTMLEncoder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SimpleHTMLEncoder).tp_dict, "wrapfn_", make_descriptor(t_SimpleHTMLEncoder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SimpleHTMLEncoder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimpleHTMLEncoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleHTMLEncoder::initializeClass, 1)))
              return NULL;
            return t_SimpleHTMLEncoder::wrap_Object(SimpleHTMLEncoder(((t_SimpleHTMLEncoder *) arg)->object.this$));
          }
          static PyObject *t_SimpleHTMLEncoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleHTMLEncoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleHTMLEncoder_init_(t_SimpleHTMLEncoder *self, PyObject *args, PyObject *kwds)
          {
            SimpleHTMLEncoder object((jobject) NULL);

            INT_CALL(object = SimpleHTMLEncoder());
            self->object = object;

            return 0;
          }

          static PyObject *t_SimpleHTMLEncoder_encodeText(t_SimpleHTMLEncoder *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.encodeText(a0));
              return j2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "encodeText", arg);
            return NULL;
          }

          static PyObject *t_SimpleHTMLEncoder_htmlEncode(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::highlight::SimpleHTMLEncoder::htmlEncode(a0));
              return j2p(result);
            }

            PyErr_SetArgsError(type, "htmlEncode", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/TermVectorsReader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Cloneable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/Fields.h"
#include "java/io/Closeable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *TermVectorsReader::class$ = NULL;
        jmethodID *TermVectorsReader::mids$ = NULL;
        bool TermVectorsReader::live$ = false;

        jclass TermVectorsReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/TermVectorsReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
            mids$[mid_clone_475a2624] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/codecs/TermVectorsReader;");
            mids$[mid_get_ef1c9c73] = env->getMethodID(cls, "get", "(I)Lorg/apache/lucene/index/Fields;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void TermVectorsReader::checkIntegrity() const
        {
          env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
        }

        TermVectorsReader TermVectorsReader::clone() const
        {
          return TermVectorsReader(env->callObjectMethod(this$, mids$[mid_clone_475a2624]));
        }

        ::org::apache::lucene::index::Fields TermVectorsReader::get(jint a0) const
        {
          return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_get_ef1c9c73], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_TermVectorsReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermVectorsReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermVectorsReader_checkIntegrity(t_TermVectorsReader *self);
        static PyObject *t_TermVectorsReader_clone(t_TermVectorsReader *self);
        static PyObject *t_TermVectorsReader_get(t_TermVectorsReader *self, PyObject *arg);

        static PyMethodDef t_TermVectorsReader__methods_[] = {
          DECLARE_METHOD(t_TermVectorsReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermVectorsReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermVectorsReader, checkIntegrity, METH_NOARGS),
          DECLARE_METHOD(t_TermVectorsReader, clone, METH_NOARGS),
          DECLARE_METHOD(t_TermVectorsReader, get, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermVectorsReader, t_TermVectorsReader, ::java::lang::Object, TermVectorsReader, abstract_init, 0, 0, 0, 0, 0);

        void t_TermVectorsReader::install(PyObject *module)
        {
          installType(&PY_TYPE(TermVectorsReader), module, "TermVectorsReader", 0);
        }

        void t_TermVectorsReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermVectorsReader).tp_dict, "class_", make_descriptor(TermVectorsReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermVectorsReader).tp_dict, "wrapfn_", make_descriptor(t_TermVectorsReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermVectorsReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermVectorsReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermVectorsReader::initializeClass, 1)))
            return NULL;
          return t_TermVectorsReader::wrap_Object(TermVectorsReader(((t_TermVectorsReader *) arg)->object.this$));
        }
        static PyObject *t_TermVectorsReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermVectorsReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TermVectorsReader_checkIntegrity(t_TermVectorsReader *self)
        {
          OBJ_CALL(self->object.checkIntegrity());
          Py_RETURN_NONE;
        }

        static PyObject *t_TermVectorsReader_clone(t_TermVectorsReader *self)
        {
          TermVectorsReader result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_TermVectorsReader::wrap_Object(result);
        }

        static PyObject *t_TermVectorsReader_get(t_TermVectorsReader *self, PyObject *arg)
        {
          jint a0;
          ::org::apache::lucene::index::Fields result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Character.h"
#include "java/lang/Comparable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/io/Serializable.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Character::class$ = NULL;
    jmethodID *Character::mids$ = NULL;
    bool Character::live$ = false;
    jbyte Character::COMBINING_SPACING_MARK = (jbyte) 0;
    jbyte Character::CONNECTOR_PUNCTUATION = (jbyte) 0;
    jbyte Character::CONTROL = (jbyte) 0;
    jbyte Character::CURRENCY_SYMBOL = (jbyte) 0;
    jbyte Character::DASH_PUNCTUATION = (jbyte) 0;
    jbyte Character::DECIMAL_DIGIT_NUMBER = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_ARABIC_NUMBER = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_BOUNDARY_NEUTRAL = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_COMMON_NUMBER_SEPARATOR = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_EUROPEAN_NUMBER = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_LEFT_TO_RIGHT = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_NONSPACING_MARK = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_OTHER_NEUTRALS = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_PARAGRAPH_SEPARATOR = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_POP_DIRECTIONAL_FORMAT = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_RIGHT_TO_LEFT = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_SEGMENT_SEPARATOR = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_UNDEFINED = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_WHITESPACE = (jbyte) 0;
    jbyte Character::ENCLOSING_MARK = (jbyte) 0;
    jbyte Character::END_PUNCTUATION = (jbyte) 0;
    jbyte Character::FINAL_QUOTE_PUNCTUATION = (jbyte) 0;
    jbyte Character::FORMAT = (jbyte) 0;
    jbyte Character::INITIAL_QUOTE_PUNCTUATION = (jbyte) 0;
    jbyte Character::LETTER_NUMBER = (jbyte) 0;
    jbyte Character::LINE_SEPARATOR = (jbyte) 0;
    jbyte Character::LOWERCASE_LETTER = (jbyte) 0;
    jbyte Character::MATH_SYMBOL = (jbyte) 0;
    jint Character::MAX_CODE_POINT = (jint) 0;
    jchar Character::MAX_HIGH_SURROGATE = (jchar) 0;
    jchar Character::MAX_LOW_SURROGATE = (jchar) 0;
    jint Character::MAX_RADIX = (jint) 0;
    jchar Character::MAX_SURROGATE = (jchar) 0;
    jchar Character::MAX_VALUE = (jchar) 0;
    jint Character::MIN_CODE_POINT = (jint) 0;
    jchar Character::MIN_HIGH_SURROGATE = (jchar) 0;
    jchar Character::MIN_LOW_SURROGATE = (jchar) 0;
    jint Character::MIN_RADIX = (jint) 0;
    jint Character::MIN_SUPPLEMENTARY_CODE_POINT = (jint) 0;
    jchar Character::MIN_SURROGATE = (jchar) 0;
    jchar Character::MIN_VALUE = (jchar) 0;
    jbyte Character::MODIFIER_LETTER = (jbyte) 0;
    jbyte Character::MODIFIER_SYMBOL = (jbyte) 0;
    jbyte Character::NON_SPACING_MARK = (jbyte) 0;
    jbyte Character::OTHER_LETTER = (jbyte) 0;
    jbyte Character::OTHER_NUMBER = (jbyte) 0;
    jbyte Character::OTHER_PUNCTUATION = (jbyte) 0;
    jbyte Character::OTHER_SYMBOL = (jbyte) 0;
    jbyte Character::PARAGRAPH_SEPARATOR = (jbyte) 0;
    jbyte Character::PRIVATE_USE = (jbyte) 0;
    jint Character::SIZE = (jint) 0;
    jbyte Character::SPACE_SEPARATOR = (jbyte) 0;
    jbyte Character::START_PUNCTUATION = (jbyte) 0;
    jbyte Character::SURROGATE = (jbyte) 0;
    jbyte Character::TITLECASE_LETTER = (jbyte) 0;
    ::java::lang::Class *Character::TYPE = NULL;
    jbyte Character::UNASSIGNED = (jbyte) 0;
    jbyte Character::UPPERCASE_LETTER = (jbyte) 0;

    jclass Character::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Character");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_87fd545a] = env->getMethodID(cls, "<init>", "(C)V");
        mids$[mid_charCount_39c7bd23] = env->getStaticMethodID(cls, "charCount", "(I)I");
        mids$[mid_charValue_54c6a173] = env->getMethodID(cls, "charValue", "()C");
        mids$[mid_codePointAt_ec6430eb] = env->getStaticMethodID(cls, "codePointAt", "([CI)I");
        mids$[mid_codePointAt_2fbf15bf] = env->getStaticMethodID(cls, "codePointAt", "(Ljava/lang/CharSequence;I)I");
        mids$[mid_codePointAt_6f0bb349] = env->getStaticMethodID(cls, "codePointAt", "([CII)I");
        mids$[mid_codePointBefore_2fbf15bf] = env->getStaticMethodID(cls, "codePointBefore", "(Ljava/lang/CharSequence;I)I");
        mids$[mid_codePointBefore_ec6430eb] = env->getStaticMethodID(cls, "codePointBefore", "([CI)I");
        mids$[mid_codePointBefore_6f0bb349] = env->getStaticMethodID(cls, "codePointBefore", "([CII)I");
        mids$[mid_codePointCount_6cc8d7fd] = env->getStaticMethodID(cls, "codePointCount", "(Ljava/lang/CharSequence;II)I");
        mids$[mid_codePointCount_6f0bb349] = env->getStaticMethodID(cls, "codePointCount", "([CII)I");
        mids$[mid_compare_37c94831] = env->getStaticMethodID(cls, "compare", "(CC)I");
        mids$[mid_compareTo_35927258] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Character;)I");
        mids$[mid_digit_3108448f] = env->getStaticMethodID(cls, "digit", "(CI)I");
        mids$[mid_digit_d8d154b9] = env->getStaticMethodID(cls, "digit", "(II)I");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_forDigit_d8d154b3] = env->getStaticMethodID(cls, "forDigit", "(II)C");
        mids$[mid_getDirectionality_39c7bd28] = env->getStaticMethodID(cls, "getDirectionality", "(I)B");
        mids$[mid_getDirectionality_87fd544e] = env->getStaticMethodID(cls, "getDirectionality", "(C)B");
        mids$[mid_getName_141401b3] = env->getStaticMethodID(cls, "getName", "(I)Ljava/lang/String;");
        mids$[mid_getNumericValue_39c7bd23] = env->getStaticMethodID(cls, "getNumericValue", "(I)I");
        mids$[mid_getNumericValue_87fd5445] = env->getStaticMethodID(cls, "getNumericValue", "(C)I");
        mids$[mid_getType_87fd5445] = env->getStaticMethodID(cls, "getType", "(C)I");
        mids$[mid_getType_39c7bd23] = env->getStaticMethodID(cls, "getType", "(I)I");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_highSurrogate_39c7bd29] = env->getStaticMethodID(cls, "highSurrogate", "(I)C");
        mids$[mid_isAlphabetic_39c7bd30] = env->getStaticMethodID(cls, "isAlphabetic", "(I)Z");
        mids$[mid_isBmpCodePoint_39c7bd30] = env->getStaticMethodID(cls, "isBmpCodePoint", "(I)Z");
        mids$[mid_isDefined_87fd5456] = env->getStaticMethodID(cls, "isDefined", "(C)Z");
        mids$[mid_isDefined_39c7bd30] = env->getStaticMethodID(cls, "isDefined", "(I)Z");
        mids$[mid_isDigit_39c7bd30] = env->getStaticMethodID(cls, "isDigit", "(I)Z");
        mids$[mid_isDigit_87fd5456] = env->getStaticMethodID(cls, "isDigit", "(C)Z");
        mids$[mid_isHighSurrogate_87fd5456] = env->getStaticMethodID(cls, "isHighSurrogate", "(C)Z");
        mids$[mid_isISOControl_39c7bd30] = env->getStaticMethodID(cls, "isISOControl", "(I)Z");
        mids$[mid_isISOControl_87fd5456] = env->getStaticMethodID(cls, "isISOControl", "(C)Z");
        mids$[mid_isIdentifierIgnorable_39c7bd30] = env->getStaticMethodID(cls, "isIdentifierIgnorable", "(I)Z");
        mids$[mid_isIdentifierIgnorable_87fd5456] = env->getStaticMethodID(cls, "isIdentifierIgnorable", "(C)Z");
        mids$[mid_isIdeographic_39c7bd30] = env->getStaticMethodID(cls, "isIdeographic", "(I)Z");
        mids$[mid_isJavaIdentifierPart_39c7bd30] = env->getStaticMethodID(cls, "isJavaIdentifierPart", "(I)Z");
        mids$[mid_isJavaIdentifierPart_87fd5456] = env->getStaticMethodID(cls, "isJavaIdentifierPart", "(C)Z");
        mids$[mid_isJavaIdentifierStart_87fd5456] = env->getStaticMethodID(cls, "isJavaIdentifierStart", "(C)Z");
        mids$[mid_isJavaIdentifierStart_39c7bd30] = env->getStaticMethodID(cls, "isJavaIdentifierStart", "(I)Z");
        mids$[mid_isJavaLetter_87fd5456] = env->getStaticMethodID(cls, "isJavaLetter", "(C)Z");
        mids$[mid_isJavaLetterOrDigit_87fd5456] = env->getStaticMethodID(cls, "isJavaLetterOrDigit", "(C)Z");
        mids$[mid_isLetter_87fd5456] = env->getStaticMethodID(cls, "isLetter", "(C)Z");
        mids$[mid_isLetter_39c7bd30] = env->getStaticMethodID(cls, "isLetter", "(I)Z");
        mids$[mid_isLetterOrDigit_39c7bd30] = env->getStaticMethodID(cls, "isLetterOrDigit", "(I)Z");
        mids$[mid_isLetterOrDigit_87fd5456] = env->getStaticMethodID(cls, "isLetterOrDigit", "(C)Z");
        mids$[mid_isLowSurrogate_87fd5456] = env->getStaticMethodID(cls, "isLowSurrogate", "(C)Z");
        mids$[mid_isLowerCase_39c7bd30] = env->getStaticMethodID(cls, "isLowerCase", "(I)Z");
        mids$[mid_isLowerCase_87fd5456] = env->getStaticMethodID(cls, "isLowerCase", "(C)Z");
        mids$[mid_isMirrored_87fd5456] = env->getStaticMethodID(cls, "isMirrored", "(C)Z");
        mids$[mid_isMirrored_39c7bd30] = env->getStaticMethodID(cls, "isMirrored", "(I)Z");
        mids$[mid_isSpace_87fd5456] = env->getStaticMethodID(cls, "isSpace", "(C)Z");
        mids$[mid_isSpaceChar_87fd5456] = env->getStaticMethodID(cls, "isSpaceChar", "(C)Z");
        mids$[mid_isSpaceChar_39c7bd30] = env->getStaticMethodID(cls, "isSpaceChar", "(I)Z");
        mids$[mid_isSupplementaryCodePoint_39c7bd30] = env->getStaticMethodID(cls, "isSupplementaryCodePoint", "(I)Z");
        mids$[mid_isSurrogate_87fd5456] = env->getStaticMethodID(cls, "isSurrogate", "(C)Z");
        mids$[mid_isSurrogatePair_37c94822] = env->getStaticMethodID(cls, "isSurrogatePair", "(CC)Z");
        mids$[mid_isTitleCase_87fd5456] = env->getStaticMethodID(cls, "isTitleCase", "(C)Z");
        mids$[mid_isTitleCase_39c7bd30] = env->getStaticMethodID(cls, "isTitleCase", "(I)Z");
        mids$[mid_isUnicodeIdentifierPart_87fd5456] = env->getStaticMethodID(cls, "isUnicodeIdentifierPart", "(C)Z");
        mids$[mid_isUnicodeIdentifierPart_39c7bd30] = env->getStaticMethodID(cls, "isUnicodeIdentifierPart", "(I)Z");
        mids$[mid_isUnicodeIdentifierStart_39c7bd30] = env->getStaticMethodID(cls, "isUnicodeIdentifierStart", "(I)Z");
        mids$[mid_isUnicodeIdentifierStart_87fd5456] = env->getStaticMethodID(cls, "isUnicodeIdentifierStart", "(C)Z");
        mids$[mid_isUpperCase_39c7bd30] = env->getStaticMethodID(cls, "isUpperCase", "(I)Z");
        mids$[mid_isUpperCase_87fd5456] = env->getStaticMethodID(cls, "isUpperCase", "(C)Z");
        mids$[mid_isValidCodePoint_39c7bd30] = env->getStaticMethodID(cls, "isValidCodePoint", "(I)Z");
        mids$[mid_isWhitespace_87fd5456] = env->getStaticMethodID(cls, "isWhitespace", "(C)Z");
        mids$[mid_isWhitespace_39c7bd30] = env->getStaticMethodID(cls, "isWhitespace", "(I)Z");
        mids$[mid_lowSurrogate_39c7bd29] = env->getStaticMethodID(cls, "lowSurrogate", "(I)C");
        mids$[mid_offsetByCodePoints_6cc8d7fd] = env->getStaticMethodID(cls, "offsetByCodePoints", "(Ljava/lang/CharSequence;II)I");
        mids$[mid_offsetByCodePoints_f453ace9] = env->getStaticMethodID(cls, "offsetByCodePoints", "([CIIII)I");
        mids$[mid_reverseBytes_87fd544f] = env->getStaticMethodID(cls, "reverseBytes", "(C)C");
        mids$[mid_toChars_b4292e99] = env->getStaticMethodID(cls, "toChars", "(I)[C");
        mids$[mid_toChars_273c5d2d] = env->getStaticMethodID(cls, "toChars", "(I[CI)I");
        mids$[mid_toCodePoint_37c94831] = env->getStaticMethodID(cls, "toCodePoint", "(CC)I");
        mids$[mid_toLowerCase_39c7bd23] = env->getStaticMethodID(cls, "toLowerCase", "(I)I");
        mids$[mid_toLowerCase_87fd544f] = env->getStaticMethodID(cls, "toLowerCase", "(C)C");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_toString_7611a535] = env->getStaticMethodID(cls, "toString", "(C)Ljava/lang/String;");
        mids$[mid_toTitleCase_87fd544f] = env->getStaticMethodID(cls, "toTitleCase", "(C)C");
        mids$[mid_toTitleCase_39c7bd23] = env->getStaticMethodID(cls, "toTitleCase", "(I)I");
        mids$[mid_toUpperCase_39c7bd23] = env->getStaticMethodID(cls, "toUpperCase", "(I)I");
        mids$[mid_toUpperCase_87fd544f] = env->getStaticMethodID(cls, "toUpperCase", "(C)C");
        mids$[mid_valueOf_58724da6] = env->getStaticMethodID(cls, "valueOf", "(C)Ljava/lang/Character;");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        COMBINING_SPACING_MARK = env->getStaticByteField(cls, "COMBINING_SPACING_MARK");
        CONNECTOR_PUNCTUATION = env->getStaticByteField(cls, "CONNECTOR_PUNCTUATION");
        CONTROL = env->getStaticByteField(cls, "CONTROL");
        CURRENCY_SYMBOL = env->getStaticByteField(cls, "CURRENCY_SYMBOL");
        DASH_PUNCTUATION = env->getStaticByteField(cls, "DASH_PUNCTUATION");
        DECIMAL_DIGIT_NUMBER = env->getStaticByteField(cls, "DECIMAL_DIGIT_NUMBER");
        DIRECTIONALITY_ARABIC_NUMBER = env->getStaticByteField(cls, "DIRECTIONALITY_ARABIC_NUMBER");
        DIRECTIONALITY_BOUNDARY_NEUTRAL = env->getStaticByteField(cls, "DIRECTIONALITY_BOUNDARY_NEUTRAL");
        DIRECTIONALITY_COMMON_NUMBER_SEPARATOR = env->getStaticByteField(cls, "DIRECTIONALITY_COMMON_NUMBER_SEPARATOR");
        DIRECTIONALITY_EUROPEAN_NUMBER = env->getStaticByteField(cls, "DIRECTIONALITY_EUROPEAN_NUMBER");
        DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR = env->getStaticByteField(cls, "DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR");
        DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR = env->getStaticByteField(cls, "DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR");
        DIRECTIONALITY_LEFT_TO_RIGHT = env->getStaticByteField(cls, "DIRECTIONALITY_LEFT_TO_RIGHT");
        DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING = env->getStaticByteField(cls, "DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING");
        DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE = env->getStaticByteField(cls, "DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE");
        DIRECTIONALITY_NONSPACING_MARK = env->getStaticByteField(cls, "DIRECTIONALITY_NONSPACING_MARK");
        DIRECTIONALITY_OTHER_NEUTRALS = env->getStaticByteField(cls, "DIRECTIONALITY_OTHER_NEUTRALS");
        DIRECTIONALITY_PARAGRAPH_SEPARATOR = env->getStaticByteField(cls, "DIRECTIONALITY_PARAGRAPH_SEPARATOR");
        DIRECTIONALITY_POP_DIRECTIONAL_FORMAT = env->getStaticByteField(cls, "DIRECTIONALITY_POP_DIRECTIONAL_FORMAT");
        DIRECTIONALITY_RIGHT_TO_LEFT = env->getStaticByteField(cls, "DIRECTIONALITY_RIGHT_TO_LEFT");
        DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC = env->getStaticByteField(cls, "DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC");
        DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING = env->getStaticByteField(cls, "DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING");
        DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE = env->getStaticByteField(cls, "DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE");
        DIRECTIONALITY_SEGMENT_SEPARATOR = env->getStaticByteField(cls, "DIRECTIONALITY_SEGMENT_SEPARATOR");
        DIRECTIONALITY_UNDEFINED = env->getStaticByteField(cls, "DIRECTIONALITY_UNDEFINED");
        DIRECTIONALITY_WHITESPACE = env->getStaticByteField(cls, "DIRECTIONALITY_WHITESPACE");
        ENCLOSING_MARK = env->getStaticByteField(cls, "ENCLOSING_MARK");
        END_PUNCTUATION = env->getStaticByteField(cls, "END_PUNCTUATION");
        FINAL_QUOTE_PUNCTUATION = env->getStaticByteField(cls, "FINAL_QUOTE_PUNCTUATION");
        FORMAT = env->getStaticByteField(cls, "FORMAT");
        INITIAL_QUOTE_PUNCTUATION = env->getStaticByteField(cls, "INITIAL_QUOTE_PUNCTUATION");
        LETTER_NUMBER = env->getStaticByteField(cls, "LETTER_NUMBER");
        LINE_SEPARATOR = env->getStaticByteField(cls, "LINE_SEPARATOR");
        LOWERCASE_LETTER = env->getStaticByteField(cls, "LOWERCASE_LETTER");
        MATH_SYMBOL = env->getStaticByteField(cls, "MATH_SYMBOL");
        MAX_CODE_POINT = env->getStaticIntField(cls, "MAX_CODE_POINT");
        MAX_HIGH_SURROGATE = env->getStaticCharField(cls, "MAX_HIGH_SURROGATE");
        MAX_LOW_SURROGATE = env->getStaticCharField(cls, "MAX_LOW_SURROGATE");
        MAX_RADIX = env->getStaticIntField(cls, "MAX_RADIX");
        MAX_SURROGATE = env->getStaticCharField(cls, "MAX_SURROGATE");
        MAX_VALUE = env->getStaticCharField(cls, "MAX_VALUE");
        MIN_CODE_POINT = env->getStaticIntField(cls, "MIN_CODE_POINT");
        MIN_HIGH_SURROGATE = env->getStaticCharField(cls, "MIN_HIGH_SURROGATE");
        MIN_LOW_SURROGATE = env->getStaticCharField(cls, "MIN_LOW_SURROGATE");
        MIN_RADIX = env->getStaticIntField(cls, "MIN_RADIX");
        MIN_SUPPLEMENTARY_CODE_POINT = env->getStaticIntField(cls, "MIN_SUPPLEMENTARY_CODE_POINT");
        MIN_SURROGATE = env->getStaticCharField(cls, "MIN_SURROGATE");
        MIN_VALUE = env->getStaticCharField(cls, "MIN_VALUE");
        MODIFIER_LETTER = env->getStaticByteField(cls, "MODIFIER_LETTER");
        MODIFIER_SYMBOL = env->getStaticByteField(cls, "MODIFIER_SYMBOL");
        NON_SPACING_MARK = env->getStaticByteField(cls, "NON_SPACING_MARK");
        OTHER_LETTER = env->getStaticByteField(cls, "OTHER_LETTER");
        OTHER_NUMBER = env->getStaticByteField(cls, "OTHER_NUMBER");
        OTHER_PUNCTUATION = env->getStaticByteField(cls, "OTHER_PUNCTUATION");
        OTHER_SYMBOL = env->getStaticByteField(cls, "OTHER_SYMBOL");
        PARAGRAPH_SEPARATOR = env->getStaticByteField(cls, "PARAGRAPH_SEPARATOR");
        PRIVATE_USE = env->getStaticByteField(cls, "PRIVATE_USE");
        SIZE = env->getStaticIntField(cls, "SIZE");
        SPACE_SEPARATOR = env->getStaticByteField(cls, "SPACE_SEPARATOR");
        START_PUNCTUATION = env->getStaticByteField(cls, "START_PUNCTUATION");
        SURROGATE = env->getStaticByteField(cls, "SURROGATE");
        TITLECASE_LETTER = env->getStaticByteField(cls, "TITLECASE_LETTER");
        TYPE = new ::java::lang::Class(env->getStaticObjectField(cls, "TYPE", "Ljava/lang/Class;"));
        UNASSIGNED = env->getStaticByteField(cls, "UNASSIGNED");
        UPPERCASE_LETTER = env->getStaticByteField(cls, "UPPERCASE_LETTER");
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Character::Character(jchar a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_87fd545a, a0)) {}

    jint Character::charCount(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_charCount_39c7bd23], a0);
    }

    jchar Character::charValue() const
    {
      return env->callCharMethod(this$, mids$[mid_charValue_54c6a173]);
    }

    jint Character::codePointAt(const JArray< jchar > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_codePointAt_ec6430eb], a0.this$, a1);
    }

    jint Character::codePointAt(const ::java::lang::CharSequence & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_codePointAt_2fbf15bf], a0.this$, a1);
    }

    jint Character::codePointAt(const JArray< jchar > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_codePointAt_6f0bb349], a0.this$, a1, a2);
    }

    jint Character::codePointBefore(const ::java::lang::CharSequence & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_codePointBefore_2fbf15bf], a0.this$, a1);
    }

    jint Character::codePointBefore(const JArray< jchar > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_codePointBefore_ec6430eb], a0.this$, a1);
    }

    jint Character::codePointBefore(const JArray< jchar > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_codePointBefore_6f0bb349], a0.this$, a1, a2);
    }

    jint Character::codePointCount(const ::java::lang::CharSequence & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_codePointCount_6cc8d7fd], a0.this$, a1, a2);
    }

    jint Character::codePointCount(const JArray< jchar > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_codePointCount_6f0bb349], a0.this$, a1, a2);
    }

    jint Character::compare(jchar a0, jchar a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_compare_37c94831], a0, a1);
    }

    jint Character::compareTo(const Character & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareTo_35927258], a0.this$);
    }

    jint Character::digit(jchar a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_digit_3108448f], a0, a1);
    }

    jint Character::digit(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_digit_d8d154b9], a0, a1);
    }

    jboolean Character::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    jchar Character::forDigit(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticCharMethod(cls, mids$[mid_forDigit_d8d154b3], a0, a1);
    }

    jbyte Character::getDirectionality(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticByteMethod(cls, mids$[mid_getDirectionality_39c7bd28], a0);
    }

    jbyte Character::getDirectionality(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticByteMethod(cls, mids$[mid_getDirectionality_87fd544e], a0);
    }

    ::java::lang::String Character::getName(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getName_141401b3], a0));
    }

    jint Character::getNumericValue(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_getNumericValue_39c7bd23], a0);
    }

    jint Character::getNumericValue(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_getNumericValue_87fd5445], a0);
    }

    jint Character::getType(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_getType_87fd5445], a0);
    }

    jint Character::getType(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_getType_39c7bd23], a0);
    }

    jint Character::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jchar Character::highSurrogate(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticCharMethod(cls, mids$[mid_highSurrogate_39c7bd29], a0);
    }

    jboolean Character::isAlphabetic(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isAlphabetic_39c7bd30], a0);
    }

    jboolean Character::isBmpCodePoint(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isBmpCodePoint_39c7bd30], a0);
    }

    jboolean Character::isDefined(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isDefined_87fd5456], a0);
    }

    jboolean Character::isDefined(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isDefined_39c7bd30], a0);
    }

    jboolean Character::isDigit(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isDigit_39c7bd30], a0);
    }

    jboolean Character::isDigit(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isDigit_87fd5456], a0);
    }

    jboolean Character::isHighSurrogate(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isHighSurrogate_87fd5456], a0);
    }

    jboolean Character::isISOControl(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isISOControl_39c7bd30], a0);
    }

    jboolean Character::isISOControl(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isISOControl_87fd5456], a0);
    }

    jboolean Character::isIdentifierIgnorable(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isIdentifierIgnorable_39c7bd30], a0);
    }

    jboolean Character::isIdentifierIgnorable(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isIdentifierIgnorable_87fd5456], a0);
    }

    jboolean Character::isIdeographic(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isIdeographic_39c7bd30], a0);
    }

    jboolean Character::isJavaIdentifierPart(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isJavaIdentifierPart_39c7bd30], a0);
    }

    jboolean Character::isJavaIdentifierPart(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isJavaIdentifierPart_87fd5456], a0);
    }

    jboolean Character::isJavaIdentifierStart(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isJavaIdentifierStart_87fd5456], a0);
    }

    jboolean Character::isJavaIdentifierStart(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isJavaIdentifierStart_39c7bd30], a0);
    }

    jboolean Character::isJavaLetter(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isJavaLetter_87fd5456], a0);
    }

    jboolean Character::isJavaLetterOrDigit(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isJavaLetterOrDigit_87fd5456], a0);
    }

    jboolean Character::isLetter(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isLetter_87fd5456], a0);
    }

    jboolean Character::isLetter(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isLetter_39c7bd30], a0);
    }

    jboolean Character::isLetterOrDigit(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isLetterOrDigit_39c7bd30], a0);
    }

    jboolean Character::isLetterOrDigit(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isLetterOrDigit_87fd5456], a0);
    }

    jboolean Character::isLowSurrogate(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isLowSurrogate_87fd5456], a0);
    }

    jboolean Character::isLowerCase(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isLowerCase_39c7bd30], a0);
    }

    jboolean Character::isLowerCase(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isLowerCase_87fd5456], a0);
    }

    jboolean Character::isMirrored(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isMirrored_87fd5456], a0);
    }

    jboolean Character::isMirrored(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isMirrored_39c7bd30], a0);
    }

    jboolean Character::isSpace(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isSpace_87fd5456], a0);
    }

    jboolean Character::isSpaceChar(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isSpaceChar_87fd5456], a0);
    }

    jboolean Character::isSpaceChar(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isSpaceChar_39c7bd30], a0);
    }

    jboolean Character::isSupplementaryCodePoint(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isSupplementaryCodePoint_39c7bd30], a0);
    }

    jboolean Character::isSurrogate(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isSurrogate_87fd5456], a0);
    }

    jboolean Character::isSurrogatePair(jchar a0, jchar a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isSurrogatePair_37c94822], a0, a1);
    }

    jboolean Character::isTitleCase(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isTitleCase_87fd5456], a0);
    }

    jboolean Character::isTitleCase(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isTitleCase_39c7bd30], a0);
    }

    jboolean Character::isUnicodeIdentifierPart(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isUnicodeIdentifierPart_87fd5456], a0);
    }

    jboolean Character::isUnicodeIdentifierPart(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isUnicodeIdentifierPart_39c7bd30], a0);
    }

    jboolean Character::isUnicodeIdentifierStart(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isUnicodeIdentifierStart_39c7bd30], a0);
    }

    jboolean Character::isUnicodeIdentifierStart(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isUnicodeIdentifierStart_87fd5456], a0);
    }

    jboolean Character::isUpperCase(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isUpperCase_39c7bd30], a0);
    }

    jboolean Character::isUpperCase(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isUpperCase_87fd5456], a0);
    }

    jboolean Character::isValidCodePoint(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isValidCodePoint_39c7bd30], a0);
    }

    jboolean Character::isWhitespace(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isWhitespace_87fd5456], a0);
    }

    jboolean Character::isWhitespace(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isWhitespace_39c7bd30], a0);
    }

    jchar Character::lowSurrogate(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticCharMethod(cls, mids$[mid_lowSurrogate_39c7bd29], a0);
    }

    jint Character::offsetByCodePoints(const ::java::lang::CharSequence & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_offsetByCodePoints_6cc8d7fd], a0.this$, a1, a2);
    }

    jint Character::offsetByCodePoints(const JArray< jchar > & a0, jint a1, jint a2, jint a3, jint a4)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_offsetByCodePoints_f453ace9], a0.this$, a1, a2, a3, a4);
    }

    jchar Character::reverseBytes(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticCharMethod(cls, mids$[mid_reverseBytes_87fd544f], a0);
    }

    JArray< jchar > Character::toChars(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jchar >(env->callStaticObjectMethod(cls, mids$[mid_toChars_b4292e99], a0));
    }

    jint Character::toChars(jint a0, const JArray< jchar > & a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_toChars_273c5d2d], a0, a1.this$, a2);
    }

    jint Character::toCodePoint(jchar a0, jchar a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_toCodePoint_37c94831], a0, a1);
    }

    jint Character::toLowerCase(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_toLowerCase_39c7bd23], a0);
    }

    jchar Character::toLowerCase(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticCharMethod(cls, mids$[mid_toLowerCase_87fd544f], a0);
    }

    ::java::lang::String Character::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    ::java::lang::String Character::toString(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_7611a535], a0));
    }

    jchar Character::toTitleCase(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticCharMethod(cls, mids$[mid_toTitleCase_87fd544f], a0);
    }

    jint Character::toTitleCase(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_toTitleCase_39c7bd23], a0);
    }

    jint Character::toUpperCase(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_toUpperCase_39c7bd23], a0);
    }

    jchar Character::toUpperCase(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticCharMethod(cls, mids$[mid_toUpperCase_87fd544f], a0);
    }

    Character Character::valueOf(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Character(env->callStaticObjectMethod(cls, mids$[mid_valueOf_58724da6], a0));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Character_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Character_init_(t_Character *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Character_charCount(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_charValue(t_Character *self);
    static PyObject *t_Character_codePointAt(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_codePointBefore(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_codePointCount(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_compare(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_compareTo(t_Character *self, PyObject *arg);
    static PyObject *t_Character_digit(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_equals(t_Character *self, PyObject *args);
    static PyObject *t_Character_forDigit(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_getDirectionality(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_getName(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_getNumericValue(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_getType(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_hashCode(t_Character *self, PyObject *args);
    static PyObject *t_Character_highSurrogate(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isAlphabetic(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isBmpCodePoint(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isDefined(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isDigit(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isHighSurrogate(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isISOControl(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isIdentifierIgnorable(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isIdeographic(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isJavaIdentifierPart(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isJavaIdentifierStart(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isJavaLetter(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isJavaLetterOrDigit(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isLetter(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isLetterOrDigit(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isLowSurrogate(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isLowerCase(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isMirrored(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isSpace(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isSpaceChar(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isSupplementaryCodePoint(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isSurrogate(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isSurrogatePair(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isTitleCase(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isUnicodeIdentifierPart(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isUnicodeIdentifierStart(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isUpperCase(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isValidCodePoint(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isWhitespace(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_lowSurrogate(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_offsetByCodePoints(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_reverseBytes(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_toChars(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_toCodePoint(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_toLowerCase(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_toString(t_Character *self, PyObject *args);
    static PyObject *t_Character_toString_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_toTitleCase(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_toUpperCase(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_valueOf(PyTypeObject *type, PyObject *arg);

    static PyMethodDef t_Character__methods_[] = {
      DECLARE_METHOD(t_Character, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, charCount, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, charValue, METH_NOARGS),
      DECLARE_METHOD(t_Character, codePointAt, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, codePointBefore, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, codePointCount, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, compare, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, compareTo, METH_O),
      DECLARE_METHOD(t_Character, digit, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, equals, METH_VARARGS),
      DECLARE_METHOD(t_Character, forDigit, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, getDirectionality, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, getName, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, getNumericValue, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, getType, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Character, highSurrogate, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isAlphabetic, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isBmpCodePoint, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isDefined, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isDigit, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isHighSurrogate, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isISOControl, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isIdentifierIgnorable, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isIdeographic, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isJavaIdentifierPart, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isJavaIdentifierStart, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isJavaLetter, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isJavaLetterOrDigit, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isLetter, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isLetterOrDigit, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isLowSurrogate, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isLowerCase, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isMirrored, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isSpace, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isSpaceChar, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isSupplementaryCodePoint, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isSurrogate, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isSurrogatePair, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isTitleCase, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isUnicodeIdentifierPart, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isUnicodeIdentifierStart, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isUpperCase, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isValidCodePoint, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isWhitespace, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, lowSurrogate, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, offsetByCodePoints, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, reverseBytes, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, toChars, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, toCodePoint, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, toLowerCase, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, toString, METH_VARARGS),
      DECLARE_METHOD(t_Character, toString_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, toTitleCase, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, toUpperCase, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, valueOf, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Character, t_Character, ::java::lang::Object, Character, t_Character_init_, 0, 0, 0, 0, 0);

    void t_Character::install(PyObject *module)
    {
      installType(&PY_TYPE(Character), module, "Character", 0);
    }

    void t_Character::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "class_", make_descriptor(Character::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "wrapfn_", make_descriptor(unboxCharacter));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "boxfn_", make_descriptor(boxCharacter));
      env->getClass(Character::initializeClass);
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "COMBINING_SPACING_MARK", make_descriptor(Character::COMBINING_SPACING_MARK));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "CONNECTOR_PUNCTUATION", make_descriptor(Character::CONNECTOR_PUNCTUATION));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "CONTROL", make_descriptor(Character::CONTROL));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "CURRENCY_SYMBOL", make_descriptor(Character::CURRENCY_SYMBOL));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DASH_PUNCTUATION", make_descriptor(Character::DASH_PUNCTUATION));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DECIMAL_DIGIT_NUMBER", make_descriptor(Character::DECIMAL_DIGIT_NUMBER));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_ARABIC_NUMBER", make_descriptor(Character::DIRECTIONALITY_ARABIC_NUMBER));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_BOUNDARY_NEUTRAL", make_descriptor(Character::DIRECTIONALITY_BOUNDARY_NEUTRAL));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_COMMON_NUMBER_SEPARATOR", make_descriptor(Character::DIRECTIONALITY_COMMON_NUMBER_SEPARATOR));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_EUROPEAN_NUMBER", make_descriptor(Character::DIRECTIONALITY_EUROPEAN_NUMBER));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR", make_descriptor(Character::DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR", make_descriptor(Character::DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_LEFT_TO_RIGHT", make_descriptor(Character::DIRECTIONALITY_LEFT_TO_RIGHT));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING", make_descriptor(Character::DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE", make_descriptor(Character::DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_NONSPACING_MARK", make_descriptor(Character::DIRECTIONALITY_NONSPACING_MARK));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_OTHER_NEUTRALS", make_descriptor(Character::DIRECTIONALITY_OTHER_NEUTRALS));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_PARAGRAPH_SEPARATOR", make_descriptor(Character::DIRECTIONALITY_PARAGRAPH_SEPARATOR));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_POP_DIRECTIONAL_FORMAT", make_descriptor(Character::DIRECTIONALITY_POP_DIRECTIONAL_FORMAT));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_RIGHT_TO_LEFT", make_descriptor(Character::DIRECTIONALITY_RIGHT_TO_LEFT));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC", make_descriptor(Character::DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING", make_descriptor(Character::DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE", make_descriptor(Character::DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_SEGMENT_SEPARATOR", make_descriptor(Character::DIRECTIONALITY_SEGMENT_SEPARATOR));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_UNDEFINED", make_descriptor(Character::DIRECTIONALITY_UNDEFINED));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_WHITESPACE", make_descriptor(Character::DIRECTIONALITY_WHITESPACE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "ENCLOSING_MARK", make_descriptor(Character::ENCLOSING_MARK));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "END_PUNCTUATION", make_descriptor(Character::END_PUNCTUATION));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "FINAL_QUOTE_PUNCTUATION", make_descriptor(Character::FINAL_QUOTE_PUNCTUATION));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "FORMAT", make_descriptor(Character::FORMAT));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "INITIAL_QUOTE_PUNCTUATION", make_descriptor(Character::INITIAL_QUOTE_PUNCTUATION));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "LETTER_NUMBER", make_descriptor(Character::LETTER_NUMBER));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "LINE_SEPARATOR", make_descriptor(Character::LINE_SEPARATOR));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "LOWERCASE_LETTER", make_descriptor(Character::LOWERCASE_LETTER));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MATH_SYMBOL", make_descriptor(Character::MATH_SYMBOL));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MAX_CODE_POINT", make_descriptor(Character::MAX_CODE_POINT));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MAX_HIGH_SURROGATE", make_descriptor(Character::MAX_HIGH_SURROGATE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MAX_LOW_SURROGATE", make_descriptor(Character::MAX_LOW_SURROGATE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MAX_RADIX", make_descriptor(Character::MAX_RADIX));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MAX_SURROGATE", make_descriptor(Character::MAX_SURROGATE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MAX_VALUE", make_descriptor(Character::MAX_VALUE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MIN_CODE_POINT", make_descriptor(Character::MIN_CODE_POINT));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MIN_HIGH_SURROGATE", make_descriptor(Character::MIN_HIGH_SURROGATE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MIN_LOW_SURROGATE", make_descriptor(Character::MIN_LOW_SURROGATE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MIN_RADIX", make_descriptor(Character::MIN_RADIX));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MIN_SUPPLEMENTARY_CODE_POINT", make_descriptor(Character::MIN_SUPPLEMENTARY_CODE_POINT));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MIN_SURROGATE", make_descriptor(Character::MIN_SURROGATE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MIN_VALUE", make_descriptor(Character::MIN_VALUE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MODIFIER_LETTER", make_descriptor(Character::MODIFIER_LETTER));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MODIFIER_SYMBOL", make_descriptor(Character::MODIFIER_SYMBOL));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "NON_SPACING_MARK", make_descriptor(Character::NON_SPACING_MARK));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "OTHER_LETTER", make_descriptor(Character::OTHER_LETTER));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "OTHER_NUMBER", make_descriptor(Character::OTHER_NUMBER));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "OTHER_PUNCTUATION", make_descriptor(Character::OTHER_PUNCTUATION));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "OTHER_SYMBOL", make_descriptor(Character::OTHER_SYMBOL));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "PARAGRAPH_SEPARATOR", make_descriptor(Character::PARAGRAPH_SEPARATOR));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "PRIVATE_USE", make_descriptor(Character::PRIVATE_USE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "SIZE", make_descriptor(Character::SIZE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "SPACE_SEPARATOR", make_descriptor(Character::SPACE_SEPARATOR));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "START_PUNCTUATION", make_descriptor(Character::START_PUNCTUATION));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "SURROGATE", make_descriptor(Character::SURROGATE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "TITLECASE_LETTER", make_descriptor(Character::TITLECASE_LETTER));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "TYPE", make_descriptor(::java::lang::t_Class::wrap_Object(*Character::TYPE)));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "UNASSIGNED", make_descriptor(Character::UNASSIGNED));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "UPPERCASE_LETTER", make_descriptor(Character::UPPERCASE_LETTER));
    }

    static PyObject *t_Character_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Character::initializeClass, 1)))
        return NULL;
      return t_Character::wrap_Object(Character(((t_Character *) arg)->object.this$));
    }
    static PyObject *t_Character_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Character::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Character_init_(t_Character *self, PyObject *args, PyObject *kwds)
    {
      jchar a0;
      Character object((jobject) NULL);

      if (!parseArgs(args, "C", &a0))
      {
        INT_CALL(object = Character(a0));
        self->object = object;
      }
      else
      {
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_Character_charCount(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::charCount(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "charCount", arg);
      return NULL;
    }

    static PyObject *t_Character_charValue(t_Character *self)
    {
      jchar result;
      OBJ_CALL(result = self->object.charValue());
      return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
    }

    static PyObject *t_Character_codePointAt(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint result;

          if (!parseArgs(args, "[CI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Character::codePointAt(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          jint a1;
          jint result;

          if (!parseArgs(args, "OI", &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Character::codePointAt(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 3:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::Character::codePointAt(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "codePointAt", args);
      return NULL;
    }

    static PyObject *t_Character_codePointBefore(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          jint a1;
          jint result;

          if (!parseArgs(args, "OI", &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Character::codePointBefore(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint result;

          if (!parseArgs(args, "[CI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Character::codePointBefore(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 3:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::Character::codePointBefore(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "codePointBefore", args);
      return NULL;
    }

    static PyObject *t_Character_codePointCount(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 3:
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::Character::codePointCount(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::Character::codePointCount(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "codePointCount", args);
      return NULL;
    }

    static PyObject *t_Character_compare(PyTypeObject *type, PyObject *args)
    {
      jchar a0;
      jchar a1;
      jint result;

      if (!parseArgs(args, "CC", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Character::compare(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "compare", args);
      return NULL;
    }

    static PyObject *t_Character_compareTo(t_Character *self, PyObject *arg)
    {
      Character a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Character), &a0))
      {
        OBJ_CALL(result = self->object.compareTo(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
      return NULL;
    }

    static PyObject *t_Character_digit(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          jchar a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "CI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Character::digit(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Character::digit(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "digit", args);
      return NULL;
    }

    static PyObject *t_Character_equals(t_Character *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(Character), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Character_forDigit(PyTypeObject *type, PyObject *args)
    {
      jint a0;
      jint a1;
      jchar result;

      if (!parseArgs(args, "II", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Character::forDigit(a0, a1));
        return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
      }

      PyErr_SetArgsError(type, "forDigit", args);
      return NULL;
    }

    static PyObject *t_Character_getDirectionality(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jbyte result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::getDirectionality(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          jchar a0;
          jbyte result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::getDirectionality(a0));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "getDirectionality", args);
      return NULL;
    }

    static PyObject *t_Character_getName(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::getName(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "getName", arg);
      return NULL;
    }

    static PyObject *t_Character_getNumericValue(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::getNumericValue(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          jchar a0;
          jint result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::getNumericValue(a0));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "getNumericValue", args);
      return NULL;
    }

    static PyObject *t_Character_getType(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jint result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::getType(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::getType(a0));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "getType", args);
      return NULL;
    }

    static PyObject *t_Character_hashCode(t_Character *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Character), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Character_highSurrogate(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jchar result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::highSurrogate(a0));
        return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
      }

      PyErr_SetArgsError(type, "highSurrogate", arg);
      return NULL;
    }

    static PyObject *t_Character_isAlphabetic(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jboolean result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isAlphabetic(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isAlphabetic", arg);
      return NULL;
    }

    static PyObject *t_Character_isBmpCodePoint(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jboolean result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isBmpCodePoint(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isBmpCodePoint", arg);
      return NULL;
    }

    static PyObject *t_Character_isDefined(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isDefined(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isDefined(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isDefined", args);
      return NULL;
    }

    static PyObject *t_Character_isDigit(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isDigit(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isDigit(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isDigit", args);
      return NULL;
    }

    static PyObject *t_Character_isHighSurrogate(PyTypeObject *type, PyObject *arg)
    {
      jchar a0;
      jboolean result;

      if (!parseArg(arg, "C", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isHighSurrogate(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isHighSurrogate", arg);
      return NULL;
    }

    static PyObject *t_Character_isISOControl(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isISOControl(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isISOControl(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isISOControl", args);
      return NULL;
    }

    static PyObject *t_Character_isIdentifierIgnorable(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isIdentifierIgnorable(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isIdentifierIgnorable(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isIdentifierIgnorable", args);
      return NULL;
    }

    static PyObject *t_Character_isIdeographic(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jboolean result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isIdeographic(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isIdeographic", arg);
      return NULL;
    }

    static PyObject *t_Character_isJavaIdentifierPart(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isJavaIdentifierPart(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isJavaIdentifierPart(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isJavaIdentifierPart", args);
      return NULL;
    }

    static PyObject *t_Character_isJavaIdentifierStart(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isJavaIdentifierStart(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isJavaIdentifierStart(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isJavaIdentifierStart", args);
      return NULL;
    }

    static PyObject *t_Character_isJavaLetter(PyTypeObject *type, PyObject *arg)
    {
      jchar a0;
      jboolean result;

      if (!parseArg(arg, "C", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isJavaLetter(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isJavaLetter", arg);
      return NULL;
    }

    static PyObject *t_Character_isJavaLetterOrDigit(PyTypeObject *type, PyObject *arg)
    {
      jchar a0;
      jboolean result;

      if (!parseArg(arg, "C", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isJavaLetterOrDigit(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isJavaLetterOrDigit", arg);
      return NULL;
    }

    static PyObject *t_Character_isLetter(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isLetter(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isLetter(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isLetter", args);
      return NULL;
    }

    static PyObject *t_Character_isLetterOrDigit(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isLetterOrDigit(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isLetterOrDigit(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isLetterOrDigit", args);
      return NULL;
    }

    static PyObject *t_Character_isLowSurrogate(PyTypeObject *type, PyObject *arg)
    {
      jchar a0;
      jboolean result;

      if (!parseArg(arg, "C", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isLowSurrogate(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isLowSurrogate", arg);
      return NULL;
    }

    static PyObject *t_Character_isLowerCase(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isLowerCase(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isLowerCase(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isLowerCase", args);
      return NULL;
    }

    static PyObject *t_Character_isMirrored(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isMirrored(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isMirrored(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isMirrored", args);
      return NULL;
    }

    static PyObject *t_Character_isSpace(PyTypeObject *type, PyObject *arg)
    {
      jchar a0;
      jboolean result;

      if (!parseArg(arg, "C", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isSpace(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isSpace", arg);
      return NULL;
    }

    static PyObject *t_Character_isSpaceChar(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isSpaceChar(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isSpaceChar(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isSpaceChar", args);
      return NULL;
    }

    static PyObject *t_Character_isSupplementaryCodePoint(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jboolean result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isSupplementaryCodePoint(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isSupplementaryCodePoint", arg);
      return NULL;
    }

    static PyObject *t_Character_isSurrogate(PyTypeObject *type, PyObject *arg)
    {
      jchar a0;
      jboolean result;

      if (!parseArg(arg, "C", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isSurrogate(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isSurrogate", arg);
      return NULL;
    }

    static PyObject *t_Character_isSurrogatePair(PyTypeObject *type, PyObject *args)
    {
      jchar a0;
      jchar a1;
      jboolean result;

      if (!parseArgs(args, "CC", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Character::isSurrogatePair(a0, a1));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isSurrogatePair", args);
      return NULL;
    }

    static PyObject *t_Character_isTitleCase(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isTitleCase(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isTitleCase(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isTitleCase", args);
      return NULL;
    }

    static PyObject *t_Character_isUnicodeIdentifierPart(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isUnicodeIdentifierPart(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isUnicodeIdentifierPart(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isUnicodeIdentifierPart", args);
      return NULL;
    }

    static PyObject *t_Character_isUnicodeIdentifierStart(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isUnicodeIdentifierStart(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isUnicodeIdentifierStart(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isUnicodeIdentifierStart", args);
      return NULL;
    }

    static PyObject *t_Character_isUpperCase(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isUpperCase(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isUpperCase(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isUpperCase", args);
      return NULL;
    }

    static PyObject *t_Character_isValidCodePoint(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jboolean result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isValidCodePoint(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isValidCodePoint", arg);
      return NULL;
    }

    static PyObject *t_Character_isWhitespace(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isWhitespace(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isWhitespace(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isWhitespace", args);
      return NULL;
    }

    static PyObject *t_Character_lowSurrogate(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jchar result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::lowSurrogate(a0));
        return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
      }

      PyErr_SetArgsError(type, "lowSurrogate", arg);
      return NULL;
    }

    static PyObject *t_Character_offsetByCodePoints(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 3:
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::Character::offsetByCodePoints(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 5:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint a3;
          jint a4;
          jint result;

          if (!parseArgs(args, "[CIIII", &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = ::java::lang::Character::offsetByCodePoints(a0, a1, a2, a3, a4));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "offsetByCodePoints", args);
      return NULL;
    }

    static PyObject *t_Character_reverseBytes(PyTypeObject *type, PyObject *arg)
    {
      jchar a0;
      jchar result;

      if (!parseArg(arg, "C", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::reverseBytes(a0));
        return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
      }

      PyErr_SetArgsError(type, "reverseBytes", arg);
      return NULL;
    }

    static PyObject *t_Character_toChars(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          JArray< jchar > result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::toChars(a0));
            return result.wrap();
          }
        }
        break;
       case 3:
        {
          jint a0;
          JArray< jchar > a1((jobject) NULL);
          jint a2;
          jint result;

          if (!parseArgs(args, "I[CI", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::Character::toChars(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "toChars", args);
      return NULL;
    }

    static PyObject *t_Character_toCodePoint(PyTypeObject *type, PyObject *args)
    {
      jchar a0;
      jchar a1;
      jint result;

      if (!parseArgs(args, "CC", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Character::toCodePoint(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "toCodePoint", args);
      return NULL;
    }

    static PyObject *t_Character_toLowerCase(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::toLowerCase(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          jchar a0;
          jchar result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::toLowerCase(a0));
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }
        }
      }

      PyErr_SetArgsError(type, "toLowerCase", args);
      return NULL;
    }

    static PyObject *t_Character_toString(t_Character *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(Character), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Character_toString_(PyTypeObject *type, PyObject *args)
    {
      jchar a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, "C", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::toString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toString_", args);
      return NULL;
    }

    static PyObject *t_Character_toTitleCase(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jchar result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::toTitleCase(a0));
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }
        }
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::toTitleCase(a0));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "toTitleCase", args);
      return NULL;
    }

    static PyObject *t_Character_toUpperCase(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::toUpperCase(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          jchar a0;
          jchar result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::toUpperCase(a0));
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }
        }
      }

      PyErr_SetArgsError(type, "toUpperCase", args);
      return NULL;
    }

    static PyObject *t_Character_valueOf(PyTypeObject *type, PyObject *arg)
    {
      jchar a0;
      Character result((jobject) NULL);

      if (!parseArg(arg, "C", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::valueOf(a0));
        return t_Character::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "valueOf", arg);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanTermQuery.h"
#include "java/util/Set.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "org/apache/lucene/index/TermContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanTermQuery::class$ = NULL;
          jmethodID *SpanTermQuery::mids$ = NULL;
          bool SpanTermQuery::live$ = false;

          jclass SpanTermQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanTermQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7eca6a81] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
              mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getSpans_f003cb44] = env->getMethodID(cls, "getSpans", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;Ljava/util/Map;)Lorg/apache/lucene/search/spans/Spans;");
              mids$[mid_getTerm_0f71f314] = env->getMethodID(cls, "getTerm", "()Lorg/apache/lucene/index/Term;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanTermQuery::SpanTermQuery(const ::org::apache::lucene::index::Term & a0) : ::org::apache::lucene::search::spans::SpanQuery(env->newObject(initializeClass, &mids$, mid_init$_7eca6a81, a0.this$)) {}

          jboolean SpanTermQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          void SpanTermQuery::extractTerms(const ::java::util::Set & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
          }

          ::java::lang::String SpanTermQuery::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
          }

          ::org::apache::lucene::search::spans::Spans SpanTermQuery::getSpans(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::util::Map & a2) const
          {
            return ::org::apache::lucene::search::spans::Spans(env->callObjectMethod(this$, mids$[mid_getSpans_f003cb44], a0.this$, a1.this$, a2.this$));
          }

          ::org::apache::lucene::index::Term SpanTermQuery::getTerm() const
          {
            return ::org::apache::lucene::index::Term(env->callObjectMethod(this$, mids$[mid_getTerm_0f71f314]));
          }

          jint SpanTermQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String SpanTermQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanTermQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanTermQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanTermQuery_init_(t_SpanTermQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanTermQuery_equals(t_SpanTermQuery *self, PyObject *args);
          static PyObject *t_SpanTermQuery_extractTerms(t_SpanTermQuery *self, PyObject *args);
          static PyObject *t_SpanTermQuery_getField(t_SpanTermQuery *self, PyObject *args);
          static PyObject *t_SpanTermQuery_getSpans(t_SpanTermQuery *self, PyObject *args);
          static PyObject *t_SpanTermQuery_getTerm(t_SpanTermQuery *self);
          static PyObject *t_SpanTermQuery_hashCode(t_SpanTermQuery *self, PyObject *args);
          static PyObject *t_SpanTermQuery_toString(t_SpanTermQuery *self, PyObject *args);
          static PyObject *t_SpanTermQuery_get__field(t_SpanTermQuery *self, void *data);
          static PyObject *t_SpanTermQuery_get__term(t_SpanTermQuery *self, void *data);
          static PyGetSetDef t_SpanTermQuery__fields_[] = {
            DECLARE_GET_FIELD(t_SpanTermQuery, field),
            DECLARE_GET_FIELD(t_SpanTermQuery, term),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanTermQuery__methods_[] = {
            DECLARE_METHOD(t_SpanTermQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanTermQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanTermQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_SpanTermQuery, extractTerms, METH_VARARGS),
            DECLARE_METHOD(t_SpanTermQuery, getField, METH_VARARGS),
            DECLARE_METHOD(t_SpanTermQuery, getSpans, METH_VARARGS),
            DECLARE_METHOD(t_SpanTermQuery, getTerm, METH_NOARGS),
            DECLARE_METHOD(t_SpanTermQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SpanTermQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanTermQuery, t_SpanTermQuery, ::org::apache::lucene::search::spans::SpanQuery, SpanTermQuery, t_SpanTermQuery_init_, 0, 0, t_SpanTermQuery__fields_, 0, 0);

          void t_SpanTermQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanTermQuery), module, "SpanTermQuery", 0);
          }

          void t_SpanTermQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanTermQuery).tp_dict, "class_", make_descriptor(SpanTermQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanTermQuery).tp_dict, "wrapfn_", make_descriptor(t_SpanTermQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanTermQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanTermQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanTermQuery::initializeClass, 1)))
              return NULL;
            return t_SpanTermQuery::wrap_Object(SpanTermQuery(((t_SpanTermQuery *) arg)->object.this$));
          }
          static PyObject *t_SpanTermQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanTermQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanTermQuery_init_(t_SpanTermQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::Term a0((jobject) NULL);
            SpanTermQuery object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
            {
              INT_CALL(object = SpanTermQuery(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanTermQuery_equals(t_SpanTermQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SpanTermQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SpanTermQuery_extractTerms(t_SpanTermQuery *self, PyObject *args)
          {
            ::java::util::Set a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(self->object.extractTerms(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SpanTermQuery), (PyObject *) self, "extractTerms", args, 2);
          }

          static PyObject *t_SpanTermQuery_getField(t_SpanTermQuery *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getField());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanTermQuery), (PyObject *) self, "getField", args, 2);
          }

          static PyObject *t_SpanTermQuery_getSpans(t_SpanTermQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::util::Bits a1((jobject) NULL);
            ::java::util::Map a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::search::spans::Spans result((jobject) NULL);

            if (!parseArgs(args, "kkK", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(result = self->object.getSpans(a0, a1, a2));
              return ::org::apache::lucene::search::spans::t_Spans::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanTermQuery), (PyObject *) self, "getSpans", args, 2);
          }

          static PyObject *t_SpanTermQuery_getTerm(t_SpanTermQuery *self)
          {
            ::org::apache::lucene::index::Term result((jobject) NULL);
            OBJ_CALL(result = self->object.getTerm());
            return ::org::apache::lucene::index::t_Term::wrap_Object(result);
          }

          static PyObject *t_SpanTermQuery_hashCode(t_SpanTermQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SpanTermQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SpanTermQuery_toString(t_SpanTermQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanTermQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_SpanTermQuery_get__field(t_SpanTermQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }

          static PyObject *t_SpanTermQuery_get__term(t_SpanTermQuery *self, void *data)
          {
            ::org::apache::lucene::index::Term value((jobject) NULL);
            OBJ_CALL(value = self->object.getTerm());
            return ::org::apache::lucene::index::t_Term::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/FieldsQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/surround/query/BasicQueryFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *FieldsQuery::class$ = NULL;
            jmethodID *FieldsQuery::mids$ = NULL;
            bool FieldsQuery::live$ = false;

            jclass FieldsQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/FieldsQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_2649f1ba] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/surround/query/SrndQuery;Ljava/util/List;C)V");
                mids$[mid_init$_bcbc5f3f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/surround/query/SrndQuery;Ljava/lang/String;C)V");
                mids$[mid_getFieldNames_87851566] = env->getMethodID(cls, "getFieldNames", "()Ljava/util/List;");
                mids$[mid_getFieldOperator_54c6a173] = env->getMethodID(cls, "getFieldOperator", "()C");
                mids$[mid_isFieldsSubQueryAcceptable_54c6a16a] = env->getMethodID(cls, "isFieldsSubQueryAcceptable", "()Z");
                mids$[mid_makeLuceneQueryFieldNoBoost_1aaeee30] = env->getMethodID(cls, "makeLuceneQueryFieldNoBoost", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)Lorg/apache/lucene/search/Query;");
                mids$[mid_makeLuceneQueryNoBoost_3d79835e] = env->getMethodID(cls, "makeLuceneQueryNoBoost", "(Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)Lorg/apache/lucene/search/Query;");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                mids$[mid_fieldNamesToString_9f94ae34] = env->getMethodID(cls, "fieldNamesToString", "(Ljava/lang/StringBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FieldsQuery::FieldsQuery(const ::org::apache::lucene::queryparser::surround::query::SrndQuery & a0, const ::java::util::List & a1, jchar a2) : ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->newObject(initializeClass, &mids$, mid_init$_2649f1ba, a0.this$, a1.this$, a2)) {}

            FieldsQuery::FieldsQuery(const ::org::apache::lucene::queryparser::surround::query::SrndQuery & a0, const ::java::lang::String & a1, jchar a2) : ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->newObject(initializeClass, &mids$, mid_init$_bcbc5f3f, a0.this$, a1.this$, a2)) {}

            ::java::util::List FieldsQuery::getFieldNames() const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getFieldNames_87851566]));
            }

            jchar FieldsQuery::getFieldOperator() const
            {
              return env->callCharMethod(this$, mids$[mid_getFieldOperator_54c6a173]);
            }

            jboolean FieldsQuery::isFieldsSubQueryAcceptable() const
            {
              return env->callBooleanMethod(this$, mids$[mid_isFieldsSubQueryAcceptable_54c6a16a]);
            }

            ::org::apache::lucene::search::Query FieldsQuery::makeLuceneQueryFieldNoBoost(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a1) const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_makeLuceneQueryFieldNoBoost_1aaeee30], a0.this$, a1.this$));
            }

            ::org::apache::lucene::search::Query FieldsQuery::makeLuceneQueryNoBoost(const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a0) const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_makeLuceneQueryNoBoost_3d79835e], a0.this$));
            }

            ::java::lang::String FieldsQuery::toString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_FieldsQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FieldsQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FieldsQuery_init_(t_FieldsQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FieldsQuery_getFieldNames(t_FieldsQuery *self);
            static PyObject *t_FieldsQuery_getFieldOperator(t_FieldsQuery *self);
            static PyObject *t_FieldsQuery_isFieldsSubQueryAcceptable(t_FieldsQuery *self, PyObject *args);
            static PyObject *t_FieldsQuery_makeLuceneQueryFieldNoBoost(t_FieldsQuery *self, PyObject *args);
            static PyObject *t_FieldsQuery_makeLuceneQueryNoBoost(t_FieldsQuery *self, PyObject *arg);
            static PyObject *t_FieldsQuery_toString(t_FieldsQuery *self, PyObject *args);
            static PyObject *t_FieldsQuery_get__fieldNames(t_FieldsQuery *self, void *data);
            static PyObject *t_FieldsQuery_get__fieldOperator(t_FieldsQuery *self, void *data);
            static PyObject *t_FieldsQuery_get__fieldsSubQueryAcceptable(t_FieldsQuery *self, void *data);
            static PyGetSetDef t_FieldsQuery__fields_[] = {
              DECLARE_GET_FIELD(t_FieldsQuery, fieldNames),
              DECLARE_GET_FIELD(t_FieldsQuery, fieldOperator),
              DECLARE_GET_FIELD(t_FieldsQuery, fieldsSubQueryAcceptable),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FieldsQuery__methods_[] = {
              DECLARE_METHOD(t_FieldsQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FieldsQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FieldsQuery, getFieldNames, METH_NOARGS),
              DECLARE_METHOD(t_FieldsQuery, getFieldOperator, METH_NOARGS),
              DECLARE_METHOD(t_FieldsQuery, isFieldsSubQueryAcceptable, METH_VARARGS),
              DECLARE_METHOD(t_FieldsQuery, makeLuceneQueryFieldNoBoost, METH_VARARGS),
              DECLARE_METHOD(t_FieldsQuery, makeLuceneQueryNoBoost, METH_O),
              DECLARE_METHOD(t_FieldsQuery, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FieldsQuery, t_FieldsQuery, ::org::apache::lucene::queryparser::surround::query::SrndQuery, FieldsQuery, t_FieldsQuery_init_, 0, 0, t_FieldsQuery__fields_, 0, 0);

            void t_FieldsQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(FieldsQuery), module, "FieldsQuery", 0);
            }

            void t_FieldsQuery::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FieldsQuery).tp_dict, "class_", make_descriptor(FieldsQuery::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FieldsQuery).tp_dict, "wrapfn_", make_descriptor(t_FieldsQuery::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FieldsQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FieldsQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FieldsQuery::initializeClass, 1)))
                return NULL;
              return t_FieldsQuery::wrap_Object(FieldsQuery(((t_FieldsQuery *) arg)->object.this$));
            }
            static PyObject *t_FieldsQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FieldsQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FieldsQuery_init_(t_FieldsQuery *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 3:
                {
                  ::org::apache::lucene::queryparser::surround::query::SrndQuery a0((jobject) NULL);
                  ::java::util::List a1((jobject) NULL);
                  PyTypeObject **p1;
                  jchar a2;
                  FieldsQuery object((jobject) NULL);

                  if (!parseArgs(args, "kKC", ::org::apache::lucene::queryparser::surround::query::SrndQuery::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_, &a2))
                  {
                    INT_CALL(object = FieldsQuery(a0, a1, a2));
                    self->object = object;
                    break;
                  }
                }
                {
                  ::org::apache::lucene::queryparser::surround::query::SrndQuery a0((jobject) NULL);
                  ::java::lang::String a1((jobject) NULL);
                  jchar a2;
                  FieldsQuery object((jobject) NULL);

                  if (!parseArgs(args, "ksC", ::org::apache::lucene::queryparser::surround::query::SrndQuery::initializeClass, &a0, &a1, &a2))
                  {
                    INT_CALL(object = FieldsQuery(a0, a1, a2));
                    self->object = object;
                    break;
                  }
                }
               default:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FieldsQuery_getFieldNames(t_FieldsQuery *self)
            {
              ::java::util::List result((jobject) NULL);
              OBJ_CALL(result = self->object.getFieldNames());
              return ::java::util::t_List::wrap_Object(result, &::java::lang::PY_TYPE(String));
            }

            static PyObject *t_FieldsQuery_getFieldOperator(t_FieldsQuery *self)
            {
              jchar result;
              OBJ_CALL(result = self->object.getFieldOperator());
              return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            static PyObject *t_FieldsQuery_isFieldsSubQueryAcceptable(t_FieldsQuery *self, PyObject *args)
            {
              jboolean result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.isFieldsSubQueryAcceptable());
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(FieldsQuery), (PyObject *) self, "isFieldsSubQueryAcceptable", args, 2);
            }

            static PyObject *t_FieldsQuery_makeLuceneQueryFieldNoBoost(t_FieldsQuery *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.makeLuceneQueryFieldNoBoost(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(FieldsQuery), (PyObject *) self, "makeLuceneQueryFieldNoBoost", args, 2);
            }

            static PyObject *t_FieldsQuery_makeLuceneQueryNoBoost(t_FieldsQuery *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a0((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.makeLuceneQueryNoBoost(a0));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "makeLuceneQueryNoBoost", arg);
              return NULL;
            }

            static PyObject *t_FieldsQuery_toString(t_FieldsQuery *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(FieldsQuery), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_FieldsQuery_get__fieldNames(t_FieldsQuery *self, void *data)
            {
              ::java::util::List value((jobject) NULL);
              OBJ_CALL(value = self->object.getFieldNames());
              return ::java::util::t_List::wrap_Object(value);
            }

            static PyObject *t_FieldsQuery_get__fieldOperator(t_FieldsQuery *self, void *data)
            {
              jchar value;
              OBJ_CALL(value = self->object.getFieldOperator());
              return PyUnicode_FromUnicode((Py_UNICODE *) &value, 1);
            }

            static PyObject *t_FieldsQuery_get__fieldsSubQueryAcceptable(t_FieldsQuery *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.isFieldsSubQueryAcceptable());
              Py_RETURN_BOOL(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/Fields.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/Terms.h"
#include "java/lang/String.h"
#include "java/util/Iterator.h"
#include "java/lang/Class.h"
#include "java/lang/Iterable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *Fields::class$ = NULL;
        jmethodID *Fields::mids$ = NULL;
        bool Fields::live$ = false;
        JArray< Fields > *Fields::EMPTY_ARRAY = NULL;

        jclass Fields::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/Fields");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getUniqueTermCount_54c6a17a] = env->getMethodID(cls, "getUniqueTermCount", "()J");
            mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
            mids$[mid_terms_ee262ab4] = env->getMethodID(cls, "terms", "(Ljava/lang/String;)Lorg/apache/lucene/index/Terms;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY_ARRAY = new JArray< Fields >(env->getStaticObjectField(cls, "EMPTY_ARRAY", "[Lorg/apache/lucene/index/Fields;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong Fields::getUniqueTermCount() const
        {
          return env->callLongMethod(this$, mids$[mid_getUniqueTermCount_54c6a17a]);
        }

        ::java::util::Iterator Fields::iterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
        }

        jint Fields::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
        }

        ::org::apache::lucene::index::Terms Fields::terms(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::Terms(env->callObjectMethod(this$, mids$[mid_terms_ee262ab4], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_Fields_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Fields_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Fields_getUniqueTermCount(t_Fields *self);
        static PyObject *t_Fields_iterator(t_Fields *self);
        static PyObject *t_Fields_size(t_Fields *self);
        static PyObject *t_Fields_terms(t_Fields *self, PyObject *arg);
        static PyObject *t_Fields_get__uniqueTermCount(t_Fields *self, void *data);
        static PyGetSetDef t_Fields__fields_[] = {
          DECLARE_GET_FIELD(t_Fields, uniqueTermCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Fields__methods_[] = {
          DECLARE_METHOD(t_Fields, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Fields, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Fields, getUniqueTermCount, METH_NOARGS),
          DECLARE_METHOD(t_Fields, iterator, METH_NOARGS),
          DECLARE_METHOD(t_Fields, size, METH_NOARGS),
          DECLARE_METHOD(t_Fields, terms, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Fields, t_Fields, ::java::lang::Object, Fields, abstract_init, ((PyObject *(*)(t_Fields *)) get_iterator< t_Fields >), 0, t_Fields__fields_, 0, 0);

        void t_Fields::install(PyObject *module)
        {
          installType(&PY_TYPE(Fields), module, "Fields", 0);
        }

        void t_Fields::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Fields).tp_dict, "class_", make_descriptor(Fields::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Fields).tp_dict, "wrapfn_", make_descriptor(t_Fields::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Fields).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(Fields::initializeClass);
          PyDict_SetItemString(PY_TYPE(Fields).tp_dict, "EMPTY_ARRAY", make_descriptor(JArray<jobject>(Fields::EMPTY_ARRAY->this$).wrap(t_Fields::wrap_jobject)));
        }

        static PyObject *t_Fields_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Fields::initializeClass, 1)))
            return NULL;
          return t_Fields::wrap_Object(Fields(((t_Fields *) arg)->object.this$));
        }
        static PyObject *t_Fields_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Fields::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Fields_getUniqueTermCount(t_Fields *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getUniqueTermCount());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_Fields_iterator(t_Fields *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.iterator());
          return ::java::util::t_Iterator::wrap_Object(result, &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_Fields_size(t_Fields *self)
        {
          jint result;
          OBJ_CALL(result = self->object.size());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_Fields_terms(t_Fields *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::Terms result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.terms(a0));
            return ::org::apache::lucene::index::t_Terms::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "terms", arg);
          return NULL;
        }

        static PyObject *t_Fields_get__uniqueTermCount(t_Fields *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getUniqueTermCount());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCacheImpl$SortedDocValuesImpl.h"
#include "org/apache/lucene/util/Accountable.h"
#include "org/apache/lucene/util/packed/PackedInts$Reader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/packed/MonotonicAppendingLongBuffer.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "org/apache/lucene/util/PagedBytes$Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCacheImpl$SortedDocValuesImpl::class$ = NULL;
        jmethodID *FieldCacheImpl$SortedDocValuesImpl::mids$ = NULL;
        bool FieldCacheImpl$SortedDocValuesImpl::live$ = false;

        jclass FieldCacheImpl$SortedDocValuesImpl::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCacheImpl$SortedDocValuesImpl");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_0e116268] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/PagedBytes$Reader;Lorg/apache/lucene/util/packed/MonotonicAppendingLongBuffer;Lorg/apache/lucene/util/packed/PackedInts$Reader;I)V");
            mids$[mid_iterator_57832734] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/index/SortedDocValues;");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldCacheImpl$SortedDocValuesImpl::FieldCacheImpl$SortedDocValuesImpl(const ::org::apache::lucene::util::PagedBytes$Reader & a0, const ::org::apache::lucene::util::packed::MonotonicAppendingLongBuffer & a1, const ::org::apache::lucene::util::packed::PackedInts$Reader & a2, jint a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_0e116268, a0.this$, a1.this$, a2.this$, a3)) {}

        ::org::apache::lucene::index::SortedDocValues FieldCacheImpl$SortedDocValuesImpl::iterator() const
        {
          return ::org::apache::lucene::index::SortedDocValues(env->callObjectMethod(this$, mids$[mid_iterator_57832734]));
        }

        jlong FieldCacheImpl$SortedDocValuesImpl::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCacheImpl$SortedDocValuesImpl_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCacheImpl$SortedDocValuesImpl_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldCacheImpl$SortedDocValuesImpl_init_(t_FieldCacheImpl$SortedDocValuesImpl *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldCacheImpl$SortedDocValuesImpl_iterator(t_FieldCacheImpl$SortedDocValuesImpl *self);
        static PyObject *t_FieldCacheImpl$SortedDocValuesImpl_ramBytesUsed(t_FieldCacheImpl$SortedDocValuesImpl *self);

        static PyMethodDef t_FieldCacheImpl$SortedDocValuesImpl__methods_[] = {
          DECLARE_METHOD(t_FieldCacheImpl$SortedDocValuesImpl, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheImpl$SortedDocValuesImpl, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheImpl$SortedDocValuesImpl, iterator, METH_NOARGS),
          DECLARE_METHOD(t_FieldCacheImpl$SortedDocValuesImpl, ramBytesUsed, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCacheImpl$SortedDocValuesImpl, t_FieldCacheImpl$SortedDocValuesImpl, ::java::lang::Object, FieldCacheImpl$SortedDocValuesImpl, t_FieldCacheImpl$SortedDocValuesImpl_init_, 0, 0, 0, 0, 0);

        void t_FieldCacheImpl$SortedDocValuesImpl::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCacheImpl$SortedDocValuesImpl), module, "FieldCacheImpl$SortedDocValuesImpl", 0);
        }

        void t_FieldCacheImpl$SortedDocValuesImpl::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCacheImpl$SortedDocValuesImpl).tp_dict, "class_", make_descriptor(FieldCacheImpl$SortedDocValuesImpl::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCacheImpl$SortedDocValuesImpl).tp_dict, "wrapfn_", make_descriptor(t_FieldCacheImpl$SortedDocValuesImpl::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCacheImpl$SortedDocValuesImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCacheImpl$SortedDocValuesImpl_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCacheImpl$SortedDocValuesImpl::initializeClass, 1)))
            return NULL;
          return t_FieldCacheImpl$SortedDocValuesImpl::wrap_Object(FieldCacheImpl$SortedDocValuesImpl(((t_FieldCacheImpl$SortedDocValuesImpl *) arg)->object.this$));
        }
        static PyObject *t_FieldCacheImpl$SortedDocValuesImpl_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCacheImpl$SortedDocValuesImpl::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldCacheImpl$SortedDocValuesImpl_init_(t_FieldCacheImpl$SortedDocValuesImpl *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::PagedBytes$Reader a0((jobject) NULL);
          ::org::apache::lucene::util::packed::MonotonicAppendingLongBuffer a1((jobject) NULL);
          ::org::apache::lucene::util::packed::PackedInts$Reader a2((jobject) NULL);
          jint a3;
          FieldCacheImpl$SortedDocValuesImpl object((jobject) NULL);

          if (!parseArgs(args, "kkkI", ::org::apache::lucene::util::PagedBytes$Reader::initializeClass, ::org::apache::lucene::util::packed::MonotonicAppendingLongBuffer::initializeClass, ::org::apache::lucene::util::packed::PackedInts$Reader::initializeClass, &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = FieldCacheImpl$SortedDocValuesImpl(a0, a1, a2, a3));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldCacheImpl$SortedDocValuesImpl_iterator(t_FieldCacheImpl$SortedDocValuesImpl *self)
        {
          ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);
          OBJ_CALL(result = self->object.iterator());
          return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
        }

        static PyObject *t_FieldCacheImpl$SortedDocValuesImpl_ramBytesUsed(t_FieldCacheImpl$SortedDocValuesImpl *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/util/automaton/State.h"
#include "java/util/List.h"
#include "java/lang/Cloneable.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/automaton/Transition.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *Automaton::class$ = NULL;
          jmethodID *Automaton::mids$ = NULL;
          bool Automaton::live$ = false;
          jint Automaton::MINIMIZE_HOPCROFT = (jint) 0;

          jclass Automaton::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/Automaton");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_931bc953] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/automaton/State;)V");
              mids$[mid_clearNumberedStates_54c6a166] = env->getMethodID(cls, "clearNumberedStates", "()V");
              mids$[mid_clone_9b0d5999] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_complement_9b0d5999] = env->getMethodID(cls, "complement", "()Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_concatenate_7aca8e1f] = env->getMethodID(cls, "concatenate", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_concatenate_3449867a] = env->getStaticMethodID(cls, "concatenate", "(Ljava/util/List;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_determinize_54c6a166] = env->getMethodID(cls, "determinize", "()V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_expandSingleton_54c6a166] = env->getMethodID(cls, "expandSingleton", "()V");
              mids$[mid_getAcceptStates_03e99967] = env->getMethodID(cls, "getAcceptStates", "()Ljava/util/Set;");
              mids$[mid_getInfo_846352c3] = env->getMethodID(cls, "getInfo", "()Ljava/lang/Object;");
              mids$[mid_getInitialState_0b46b0b2] = env->getMethodID(cls, "getInitialState", "()Lorg/apache/lucene/util/automaton/State;");
              mids$[mid_getNumberOfStates_54c6a179] = env->getMethodID(cls, "getNumberOfStates", "()I");
              mids$[mid_getNumberOfTransitions_54c6a179] = env->getMethodID(cls, "getNumberOfTransitions", "()I");
              mids$[mid_getNumberedStates_b3b8db1a] = env->getMethodID(cls, "getNumberedStates", "()[Lorg/apache/lucene/util/automaton/State;");
              mids$[mid_getSingleton_14c7b5c5] = env->getMethodID(cls, "getSingleton", "()Ljava/lang/String;");
              mids$[mid_getSortedTransitions_14b6b645] = env->getMethodID(cls, "getSortedTransitions", "()[[Lorg/apache/lucene/util/automaton/Transition;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_intersection_7aca8e1f] = env->getMethodID(cls, "intersection", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_isDeterministic_54c6a16a] = env->getMethodID(cls, "isDeterministic", "()Z");
              mids$[mid_isEmptyString_54c6a16a] = env->getMethodID(cls, "isEmptyString", "()Z");
              mids$[mid_minimize_7aca8e1f] = env->getStaticMethodID(cls, "minimize", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_minus_7aca8e1f] = env->getMethodID(cls, "minus", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_optional_9b0d5999] = env->getMethodID(cls, "optional", "()Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_reduce_54c6a166] = env->getMethodID(cls, "reduce", "()V");
              mids$[mid_removeDeadTransitions_54c6a166] = env->getMethodID(cls, "removeDeadTransitions", "()V");
              mids$[mid_repeat_9b0d5999] = env->getMethodID(cls, "repeat", "()Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_repeat_d5b8a843] = env->getMethodID(cls, "repeat", "(I)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_repeat_42dcb2dd] = env->getMethodID(cls, "repeat", "(II)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_restoreInvariant_54c6a166] = env->getMethodID(cls, "restoreInvariant", "()V");
              mids$[mid_setAllowMutate_bb0c7673] = env->getStaticMethodID(cls, "setAllowMutate", "(Z)Z");
              mids$[mid_setDeterministic_bb0c767f] = env->getMethodID(cls, "setDeterministic", "(Z)V");
              mids$[mid_setInfo_290588ee] = env->getMethodID(cls, "setInfo", "(Ljava/lang/Object;)V");
              mids$[mid_setMinimization_39c7bd3c] = env->getStaticMethodID(cls, "setMinimization", "(I)V");
              mids$[mid_setMinimizeAlways_bb0c767f] = env->getStaticMethodID(cls, "setMinimizeAlways", "(Z)V");
              mids$[mid_setNumberedStates_77bb44b7] = env->getMethodID(cls, "setNumberedStates", "([Lorg/apache/lucene/util/automaton/State;)V");
              mids$[mid_setNumberedStates_4364f077] = env->getMethodID(cls, "setNumberedStates", "([Lorg/apache/lucene/util/automaton/State;I)V");
              mids$[mid_subsetOf_fc7cf398] = env->getMethodID(cls, "subsetOf", "(Lorg/apache/lucene/util/automaton/Automaton;)Z");
              mids$[mid_toDot_14c7b5c5] = env->getMethodID(cls, "toDot", "()Ljava/lang/String;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_union_40d33194] = env->getStaticMethodID(cls, "union", "(Ljava/util/Collection;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_union_7aca8e1f] = env->getMethodID(cls, "union", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              MINIMIZE_HOPCROFT = env->getStaticIntField(cls, "MINIMIZE_HOPCROFT");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Automaton::Automaton() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          Automaton::Automaton(const ::org::apache::lucene::util::automaton::State & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_931bc953, a0.this$)) {}

          void Automaton::clearNumberedStates() const
          {
            env->callVoidMethod(this$, mids$[mid_clearNumberedStates_54c6a166]);
          }

          Automaton Automaton::clone() const
          {
            return Automaton(env->callObjectMethod(this$, mids$[mid_clone_9b0d5999]));
          }

          Automaton Automaton::complement() const
          {
            return Automaton(env->callObjectMethod(this$, mids$[mid_complement_9b0d5999]));
          }

          Automaton Automaton::concatenate(const Automaton & a0) const
          {
            return Automaton(env->callObjectMethod(this$, mids$[mid_concatenate_7aca8e1f], a0.this$));
          }

          Automaton Automaton::concatenate(const ::java::util::List & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return Automaton(env->callStaticObjectMethod(cls, mids$[mid_concatenate_3449867a], a0.this$));
          }

          void Automaton::determinize() const
          {
            env->callVoidMethod(this$, mids$[mid_determinize_54c6a166]);
          }

          jboolean Automaton::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          void Automaton::expandSingleton() const
          {
            env->callVoidMethod(this$, mids$[mid_expandSingleton_54c6a166]);
          }

          ::java::util::Set Automaton::getAcceptStates() const
          {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_getAcceptStates_03e99967]));
          }

          ::java::lang::Object Automaton::getInfo() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getInfo_846352c3]));
          }

          ::org::apache::lucene::util::automaton::State Automaton::getInitialState() const
          {
            return ::org::apache::lucene::util::automaton::State(env->callObjectMethod(this$, mids$[mid_getInitialState_0b46b0b2]));
          }

          jint Automaton::getNumberOfStates() const
          {
            return env->callIntMethod(this$, mids$[mid_getNumberOfStates_54c6a179]);
          }

          jint Automaton::getNumberOfTransitions() const
          {
            return env->callIntMethod(this$, mids$[mid_getNumberOfTransitions_54c6a179]);
          }

          JArray< ::org::apache::lucene::util::automaton::State > Automaton::getNumberedStates() const
          {
            return JArray< ::org::apache::lucene::util::automaton::State >(env->callObjectMethod(this$, mids$[mid_getNumberedStates_b3b8db1a]));
          }

          ::java::lang::String Automaton::getSingleton() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getSingleton_14c7b5c5]));
          }

          JArray< JArray< ::org::apache::lucene::util::automaton::Transition > > Automaton::getSortedTransitions() const
          {
            return JArray< JArray< ::org::apache::lucene::util::automaton::Transition > >(env->callObjectMethod(this$, mids$[mid_getSortedTransitions_14b6b645]));
          }

          jint Automaton::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          Automaton Automaton::intersection(const Automaton & a0) const
          {
            return Automaton(env->callObjectMethod(this$, mids$[mid_intersection_7aca8e1f], a0.this$));
          }

          jboolean Automaton::isDeterministic() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isDeterministic_54c6a16a]);
          }

          jboolean Automaton::isEmptyString() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isEmptyString_54c6a16a]);
          }

          Automaton Automaton::minimize(const Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return Automaton(env->callStaticObjectMethod(cls, mids$[mid_minimize_7aca8e1f], a0.this$));
          }

          Automaton Automaton::minus(const Automaton & a0) const
          {
            return Automaton(env->callObjectMethod(this$, mids$[mid_minus_7aca8e1f], a0.this$));
          }

          Automaton Automaton::optional() const
          {
            return Automaton(env->callObjectMethod(this$, mids$[mid_optional_9b0d5999]));
          }

          void Automaton::reduce() const
          {
            env->callVoidMethod(this$, mids$[mid_reduce_54c6a166]);
          }

          void Automaton::removeDeadTransitions() const
          {
            env->callVoidMethod(this$, mids$[mid_removeDeadTransitions_54c6a166]);
          }

          Automaton Automaton::repeat() const
          {
            return Automaton(env->callObjectMethod(this$, mids$[mid_repeat_9b0d5999]));
          }

          Automaton Automaton::repeat(jint a0) const
          {
            return Automaton(env->callObjectMethod(this$, mids$[mid_repeat_d5b8a843], a0));
          }

          Automaton Automaton::repeat(jint a0, jint a1) const
          {
            return Automaton(env->callObjectMethod(this$, mids$[mid_repeat_42dcb2dd], a0, a1));
          }

          void Automaton::restoreInvariant() const
          {
            env->callVoidMethod(this$, mids$[mid_restoreInvariant_54c6a166]);
          }

          jboolean Automaton::setAllowMutate(jboolean a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_setAllowMutate_bb0c7673], a0);
          }

          void Automaton::setDeterministic(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setDeterministic_bb0c767f], a0);
          }

          void Automaton::setInfo(const ::java::lang::Object & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setInfo_290588ee], a0.this$);
          }

          void Automaton::setMinimization(jint a0)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_setMinimization_39c7bd3c], a0);
          }

          void Automaton::setMinimizeAlways(jboolean a0)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_setMinimizeAlways_bb0c767f], a0);
          }

          void Automaton::setNumberedStates(const JArray< ::org::apache::lucene::util::automaton::State > & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setNumberedStates_77bb44b7], a0.this$);
          }

          void Automaton::setNumberedStates(const JArray< ::org::apache::lucene::util::automaton::State > & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_setNumberedStates_4364f077], a0.this$, a1);
          }

          jboolean Automaton::subsetOf(const Automaton & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_subsetOf_fc7cf398], a0.this$);
          }

          ::java::lang::String Automaton::toDot() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toDot_14c7b5c5]));
          }

          ::java::lang::String Automaton::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          Automaton Automaton::union$(const ::java::util::Collection & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return Automaton(env->callStaticObjectMethod(cls, mids$[mid_union_40d33194], a0.this$));
          }

          Automaton Automaton::union$(const Automaton & a0) const
          {
            return Automaton(env->callObjectMethod(this$, mids$[mid_union_7aca8e1f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_Automaton_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Automaton_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Automaton_init_(t_Automaton *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Automaton_clearNumberedStates(t_Automaton *self);
          static PyObject *t_Automaton_clone(t_Automaton *self);
          static PyObject *t_Automaton_complement(t_Automaton *self);
          static PyObject *t_Automaton_concatenate(t_Automaton *self, PyObject *arg);
          static PyObject *t_Automaton_concatenate_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Automaton_determinize(t_Automaton *self);
          static PyObject *t_Automaton_equals(t_Automaton *self, PyObject *args);
          static PyObject *t_Automaton_expandSingleton(t_Automaton *self);
          static PyObject *t_Automaton_getAcceptStates(t_Automaton *self);
          static PyObject *t_Automaton_getInfo(t_Automaton *self);
          static PyObject *t_Automaton_getInitialState(t_Automaton *self);
          static PyObject *t_Automaton_getNumberOfStates(t_Automaton *self);
          static PyObject *t_Automaton_getNumberOfTransitions(t_Automaton *self);
          static PyObject *t_Automaton_getNumberedStates(t_Automaton *self);
          static PyObject *t_Automaton_getSingleton(t_Automaton *self);
          static PyObject *t_Automaton_getSortedTransitions(t_Automaton *self);
          static PyObject *t_Automaton_hashCode(t_Automaton *self, PyObject *args);
          static PyObject *t_Automaton_intersection(t_Automaton *self, PyObject *arg);
          static PyObject *t_Automaton_isDeterministic(t_Automaton *self);
          static PyObject *t_Automaton_isEmptyString(t_Automaton *self);
          static PyObject *t_Automaton_minimize(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Automaton_minus(t_Automaton *self, PyObject *arg);
          static PyObject *t_Automaton_optional(t_Automaton *self);
          static PyObject *t_Automaton_reduce(t_Automaton *self);
          static PyObject *t_Automaton_removeDeadTransitions(t_Automaton *self);
          static PyObject *t_Automaton_repeat(t_Automaton *self, PyObject *args);
          static PyObject *t_Automaton_restoreInvariant(t_Automaton *self);
          static PyObject *t_Automaton_setAllowMutate(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Automaton_setDeterministic(t_Automaton *self, PyObject *arg);
          static PyObject *t_Automaton_setInfo(t_Automaton *self, PyObject *arg);
          static PyObject *t_Automaton_setMinimization(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Automaton_setMinimizeAlways(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Automaton_setNumberedStates(t_Automaton *self, PyObject *args);
          static PyObject *t_Automaton_subsetOf(t_Automaton *self, PyObject *arg);
          static PyObject *t_Automaton_toDot(t_Automaton *self);
          static PyObject *t_Automaton_toString(t_Automaton *self, PyObject *args);
          static PyObject *t_Automaton_union(t_Automaton *self, PyObject *arg);
          static PyObject *t_Automaton_union_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Automaton_get__acceptStates(t_Automaton *self, void *data);
          static int t_Automaton_set__allowMutate(t_Automaton *self, PyObject *arg, void *data);
          static PyObject *t_Automaton_get__deterministic(t_Automaton *self, void *data);
          static int t_Automaton_set__deterministic(t_Automaton *self, PyObject *arg, void *data);
          static PyObject *t_Automaton_get__emptyString(t_Automaton *self, void *data);
          static PyObject *t_Automaton_get__info(t_Automaton *self, void *data);
          static int t_Automaton_set__info(t_Automaton *self, PyObject *arg, void *data);
          static PyObject *t_Automaton_get__initialState(t_Automaton *self, void *data);
          static int t_Automaton_set__minimization(t_Automaton *self, PyObject *arg, void *data);
          static int t_Automaton_set__minimizeAlways(t_Automaton *self, PyObject *arg, void *data);
          static PyObject *t_Automaton_get__numberOfStates(t_Automaton *self, void *data);
          static PyObject *t_Automaton_get__numberOfTransitions(t_Automaton *self, void *data);
          static PyObject *t_Automaton_get__numberedStates(t_Automaton *self, void *data);
          static int t_Automaton_set__numberedStates(t_Automaton *self, PyObject *arg, void *data);
          static PyObject *t_Automaton_get__singleton(t_Automaton *self, void *data);
          static PyObject *t_Automaton_get__sortedTransitions(t_Automaton *self, void *data);
          static PyGetSetDef t_Automaton__fields_[] = {
            DECLARE_GET_FIELD(t_Automaton, acceptStates),
            DECLARE_SET_FIELD(t_Automaton, allowMutate),
            DECLARE_GETSET_FIELD(t_Automaton, deterministic),
            DECLARE_GET_FIELD(t_Automaton, emptyString),
            DECLARE_GETSET_FIELD(t_Automaton, info),
            DECLARE_GET_FIELD(t_Automaton, initialState),
            DECLARE_SET_FIELD(t_Automaton, minimization),
            DECLARE_SET_FIELD(t_Automaton, minimizeAlways),
            DECLARE_GET_FIELD(t_Automaton, numberOfStates),
            DECLARE_GET_FIELD(t_Automaton, numberOfTransitions),
            DECLARE_GETSET_FIELD(t_Automaton, numberedStates),
            DECLARE_GET_FIELD(t_Automaton, singleton),
            DECLARE_GET_FIELD(t_Automaton, sortedTransitions),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Automaton__methods_[] = {
            DECLARE_METHOD(t_Automaton, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Automaton, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Automaton, clearNumberedStates, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, clone, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, complement, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, concatenate, METH_O),
            DECLARE_METHOD(t_Automaton, concatenate_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Automaton, determinize, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, equals, METH_VARARGS),
            DECLARE_METHOD(t_Automaton, expandSingleton, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, getAcceptStates, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, getInfo, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, getInitialState, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, getNumberOfStates, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, getNumberOfTransitions, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, getNumberedStates, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, getSingleton, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, getSortedTransitions, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_Automaton, intersection, METH_O),
            DECLARE_METHOD(t_Automaton, isDeterministic, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, isEmptyString, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, minimize, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Automaton, minus, METH_O),
            DECLARE_METHOD(t_Automaton, optional, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, reduce, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, removeDeadTransitions, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, repeat, METH_VARARGS),
            DECLARE_METHOD(t_Automaton, restoreInvariant, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, setAllowMutate, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Automaton, setDeterministic, METH_O),
            DECLARE_METHOD(t_Automaton, setInfo, METH_O),
            DECLARE_METHOD(t_Automaton, setMinimization, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Automaton, setMinimizeAlways, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Automaton, setNumberedStates, METH_VARARGS),
            DECLARE_METHOD(t_Automaton, subsetOf, METH_O),
            DECLARE_METHOD(t_Automaton, toDot, METH_NOARGS),
            DECLARE_METHOD(t_Automaton, toString, METH_VARARGS),
            DECLARE_METHOD(t_Automaton, union, METH_O),
            DECLARE_METHOD(t_Automaton, union_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Automaton, t_Automaton, ::java::lang::Object, Automaton, t_Automaton_init_, 0, 0, t_Automaton__fields_, 0, 0);

          void t_Automaton::install(PyObject *module)
          {
            installType(&PY_TYPE(Automaton), module, "Automaton", 0);
          }

          void t_Automaton::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Automaton).tp_dict, "class_", make_descriptor(Automaton::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Automaton).tp_dict, "wrapfn_", make_descriptor(t_Automaton::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Automaton).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Automaton::initializeClass);
            PyDict_SetItemString(PY_TYPE(Automaton).tp_dict, "MINIMIZE_HOPCROFT", make_descriptor(Automaton::MINIMIZE_HOPCROFT));
          }

          static PyObject *t_Automaton_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Automaton::initializeClass, 1)))
              return NULL;
            return t_Automaton::wrap_Object(Automaton(((t_Automaton *) arg)->object.this$));
          }
          static PyObject *t_Automaton_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Automaton::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Automaton_init_(t_Automaton *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                Automaton object((jobject) NULL);

                INT_CALL(object = Automaton());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::util::automaton::State a0((jobject) NULL);
                Automaton object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::automaton::State::initializeClass, &a0))
                {
                  INT_CALL(object = Automaton(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Automaton_clearNumberedStates(t_Automaton *self)
          {
            OBJ_CALL(self->object.clearNumberedStates());
            Py_RETURN_NONE;
          }

          static PyObject *t_Automaton_clone(t_Automaton *self)
          {
            Automaton result((jobject) NULL);
            OBJ_CALL(result = self->object.clone());
            return t_Automaton::wrap_Object(result);
          }

          static PyObject *t_Automaton_complement(t_Automaton *self)
          {
            Automaton result((jobject) NULL);
            OBJ_CALL(result = self->object.complement());
            return t_Automaton::wrap_Object(result);
          }

          static PyObject *t_Automaton_concatenate(t_Automaton *self, PyObject *arg)
          {
            Automaton a0((jobject) NULL);
            Automaton result((jobject) NULL);

            if (!parseArg(arg, "k", Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.concatenate(a0));
              return t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "concatenate", arg);
            return NULL;
          }

          static PyObject *t_Automaton_concatenate_(PyTypeObject *type, PyObject *arg)
          {
            ::java::util::List a0((jobject) NULL);
            PyTypeObject **p0;
            Automaton result((jobject) NULL);

            if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Automaton::concatenate(a0));
              return t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "concatenate_", arg);
            return NULL;
          }

          static PyObject *t_Automaton_determinize(t_Automaton *self)
          {
            OBJ_CALL(self->object.determinize());
            Py_RETURN_NONE;
          }

          static PyObject *t_Automaton_equals(t_Automaton *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(Automaton), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_Automaton_expandSingleton(t_Automaton *self)
          {
            OBJ_CALL(self->object.expandSingleton());
            Py_RETURN_NONE;
          }

          static PyObject *t_Automaton_getAcceptStates(t_Automaton *self)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = self->object.getAcceptStates());
            return ::java::util::t_Set::wrap_Object(result, &::org::apache::lucene::util::automaton::PY_TYPE(State));
          }

          static PyObject *t_Automaton_getInfo(t_Automaton *self)
          {
            ::java::lang::Object result((jobject) NULL);
            OBJ_CALL(result = self->object.getInfo());
            return ::java::lang::t_Object::wrap_Object(result);
          }

          static PyObject *t_Automaton_getInitialState(t_Automaton *self)
          {
            ::org::apache::lucene::util::automaton::State result((jobject) NULL);
            OBJ_CALL(result = self->object.getInitialState());
            return ::org::apache::lucene::util::automaton::t_State::wrap_Object(result);
          }

          static PyObject *t_Automaton_getNumberOfStates(t_Automaton *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getNumberOfStates());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_Automaton_getNumberOfTransitions(t_Automaton *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getNumberOfTransitions());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_Automaton_getNumberedStates(t_Automaton *self)
          {
            JArray< ::org::apache::lucene::util::automaton::State > result((jobject) NULL);
            OBJ_CALL(result = self->object.getNumberedStates());
            return JArray<jobject>(result.this$).wrap(::org::apache::lucene::util::automaton::t_State::wrap_jobject);
          }

          static PyObject *t_Automaton_getSingleton(t_Automaton *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getSingleton());
            return j2p(result);
          }

          static PyObject *t_Automaton_getSortedTransitions(t_Automaton *self)
          {
            JArray< JArray< ::org::apache::lucene::util::automaton::Transition > > result((jobject) NULL);
            OBJ_CALL(result = self->object.getSortedTransitions());
            return JArray<jobject>(result.this$).wrap(NULL);
          }

          static PyObject *t_Automaton_hashCode(t_Automaton *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(Automaton), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_Automaton_intersection(t_Automaton *self, PyObject *arg)
          {
            Automaton a0((jobject) NULL);
            Automaton result((jobject) NULL);

            if (!parseArg(arg, "k", Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.intersection(a0));
              return t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "intersection", arg);
            return NULL;
          }

          static PyObject *t_Automaton_isDeterministic(t_Automaton *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isDeterministic());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_Automaton_isEmptyString(t_Automaton *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isEmptyString());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_Automaton_minimize(PyTypeObject *type, PyObject *arg)
          {
            Automaton a0((jobject) NULL);
            Automaton result((jobject) NULL);

            if (!parseArg(arg, "k", Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Automaton::minimize(a0));
              return t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "minimize", arg);
            return NULL;
          }

          static PyObject *t_Automaton_minus(t_Automaton *self, PyObject *arg)
          {
            Automaton a0((jobject) NULL);
            Automaton result((jobject) NULL);

            if (!parseArg(arg, "k", Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.minus(a0));
              return t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "minus", arg);
            return NULL;
          }

          static PyObject *t_Automaton_optional(t_Automaton *self)
          {
            Automaton result((jobject) NULL);
            OBJ_CALL(result = self->object.optional());
            return t_Automaton::wrap_Object(result);
          }

          static PyObject *t_Automaton_reduce(t_Automaton *self)
          {
            OBJ_CALL(self->object.reduce());
            Py_RETURN_NONE;
          }

          static PyObject *t_Automaton_removeDeadTransitions(t_Automaton *self)
          {
            OBJ_CALL(self->object.removeDeadTransitions());
            Py_RETURN_NONE;
          }

          static PyObject *t_Automaton_repeat(t_Automaton *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                Automaton result((jobject) NULL);
                OBJ_CALL(result = self->object.repeat());
                return t_Automaton::wrap_Object(result);
              }
              break;
             case 1:
              {
                jint a0;
                Automaton result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.repeat(a0));
                  return t_Automaton::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                jint a1;
                Automaton result((jobject) NULL);

                if (!parseArgs(args, "II", &a0, &a1))
                {
                  OBJ_CALL(result = self->object.repeat(a0, a1));
                  return t_Automaton::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "repeat", args);
            return NULL;
          }

          static PyObject *t_Automaton_restoreInvariant(t_Automaton *self)
          {
            OBJ_CALL(self->object.restoreInvariant());
            Py_RETURN_NONE;
          }

          static PyObject *t_Automaton_setAllowMutate(PyTypeObject *type, PyObject *arg)
          {
            jboolean a0;
            jboolean result;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Automaton::setAllowMutate(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "setAllowMutate", arg);
            return NULL;
          }

          static PyObject *t_Automaton_setDeterministic(t_Automaton *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setDeterministic(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setDeterministic", arg);
            return NULL;
          }

          static PyObject *t_Automaton_setInfo(t_Automaton *self, PyObject *arg)
          {
            ::java::lang::Object a0((jobject) NULL);

            if (!parseArg(arg, "o", &a0))
            {
              OBJ_CALL(self->object.setInfo(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setInfo", arg);
            return NULL;
          }

          static PyObject *t_Automaton_setMinimization(PyTypeObject *type, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(::org::apache::lucene::util::automaton::Automaton::setMinimization(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "setMinimization", arg);
            return NULL;
          }

          static PyObject *t_Automaton_setMinimizeAlways(PyTypeObject *type, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(::org::apache::lucene::util::automaton::Automaton::setMinimizeAlways(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "setMinimizeAlways", arg);
            return NULL;
          }

          static PyObject *t_Automaton_setNumberedStates(t_Automaton *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                JArray< ::org::apache::lucene::util::automaton::State > a0((jobject) NULL);

                if (!parseArgs(args, "[k", ::org::apache::lucene::util::automaton::State::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.setNumberedStates(a0));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 2:
              {
                JArray< ::org::apache::lucene::util::automaton::State > a0((jobject) NULL);
                jint a1;

                if (!parseArgs(args, "[kI", ::org::apache::lucene::util::automaton::State::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(self->object.setNumberedStates(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "setNumberedStates", args);
            return NULL;
          }

          static PyObject *t_Automaton_subsetOf(t_Automaton *self, PyObject *arg)
          {
            Automaton a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "k", Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.subsetOf(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "subsetOf", arg);
            return NULL;
          }

          static PyObject *t_Automaton_toDot(t_Automaton *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.toDot());
            return j2p(result);
          }

          static PyObject *t_Automaton_toString(t_Automaton *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(Automaton), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_Automaton_union(t_Automaton *self, PyObject *arg)
          {
            Automaton a0((jobject) NULL);
            Automaton result((jobject) NULL);

            if (!parseArg(arg, "k", Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.union$(a0));
              return t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "union", arg);
            return NULL;
          }

          static PyObject *t_Automaton_union_(PyTypeObject *type, PyObject *arg)
          {
            ::java::util::Collection a0((jobject) NULL);
            PyTypeObject **p0;
            Automaton result((jobject) NULL);

            if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::Automaton::union$(a0));
              return t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "union_", arg);
            return NULL;
          }

          static PyObject *t_Automaton_get__acceptStates(t_Automaton *self, void *data)
          {
            ::java::util::Set value((jobject) NULL);
            OBJ_CALL(value = self->object.getAcceptStates());
            return ::java::util::t_Set::wrap_Object(value);
          }

          static int t_Automaton_set__allowMutate(t_Automaton *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setAllowMutate(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "allowMutate", arg);
            return -1;
          }

          static PyObject *t_Automaton_get__deterministic(t_Automaton *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isDeterministic());
            Py_RETURN_BOOL(value);
          }
          static int t_Automaton_set__deterministic(t_Automaton *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setDeterministic(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "deterministic", arg);
            return -1;
          }

          static PyObject *t_Automaton_get__emptyString(t_Automaton *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isEmptyString());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_Automaton_get__info(t_Automaton *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object.getInfo());
            return ::java::lang::t_Object::wrap_Object(value);
          }
          static int t_Automaton_set__info(t_Automaton *self, PyObject *arg, void *data)
          {
            {
              ::java::lang::Object value((jobject) NULL);
              if (!parseArg(arg, "o", &value))
              {
                INT_CALL(self->object.setInfo(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "info", arg);
            return -1;
          }

          static PyObject *t_Automaton_get__initialState(t_Automaton *self, void *data)
          {
            ::org::apache::lucene::util::automaton::State value((jobject) NULL);
            OBJ_CALL(value = self->object.getInitialState());
            return ::org::apache::lucene::util::automaton::t_State::wrap_Object(value);
          }

          static int t_Automaton_set__minimization(t_Automaton *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMinimization(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "minimization", arg);
            return -1;
          }

          static int t_Automaton_set__minimizeAlways(t_Automaton *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setMinimizeAlways(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "minimizeAlways", arg);
            return -1;
          }

          static PyObject *t_Automaton_get__numberOfStates(t_Automaton *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getNumberOfStates());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_Automaton_get__numberOfTransitions(t_Automaton *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getNumberOfTransitions());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_Automaton_get__numberedStates(t_Automaton *self, void *data)
          {
            JArray< ::org::apache::lucene::util::automaton::State > value((jobject) NULL);
            OBJ_CALL(value = self->object.getNumberedStates());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::util::automaton::t_State::wrap_jobject);
          }
          static int t_Automaton_set__numberedStates(t_Automaton *self, PyObject *arg, void *data)
          {
            {
              JArray< ::org::apache::lucene::util::automaton::State > value((jobject) NULL);
              if (!parseArg(arg, "[k", ::org::apache::lucene::util::automaton::State::initializeClass, &value))
              {
                INT_CALL(self->object.setNumberedStates(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "numberedStates", arg);
            return -1;
          }

          static PyObject *t_Automaton_get__singleton(t_Automaton *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getSingleton());
            return j2p(value);
          }

          static PyObject *t_Automaton_get__sortedTransitions(t_Automaton *self, void *data)
          {
            JArray< JArray< ::org::apache::lucene::util::automaton::Transition > > value((jobject) NULL);
            OBJ_CALL(value = self->object.getSortedTransitions());
            return JArray<jobject>(value.this$).wrap(NULL);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/postingshighlight/Passage.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace postingshighlight {

          ::java::lang::Class *Passage::class$ = NULL;
          jmethodID *Passage::mids$ = NULL;
          bool Passage::live$ = false;

          jclass Passage::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/postingshighlight/Passage");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getEndOffset_54c6a179] = env->getMethodID(cls, "getEndOffset", "()I");
              mids$[mid_getMatchEnds_dab10e75] = env->getMethodID(cls, "getMatchEnds", "()[I");
              mids$[mid_getMatchStarts_dab10e75] = env->getMethodID(cls, "getMatchStarts", "()[I");
              mids$[mid_getMatchTerms_19d1f84d] = env->getMethodID(cls, "getMatchTerms", "()[Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_getNumMatches_54c6a179] = env->getMethodID(cls, "getNumMatches", "()I");
              mids$[mid_getScore_54c6a176] = env->getMethodID(cls, "getScore", "()F");
              mids$[mid_getStartOffset_54c6a179] = env->getMethodID(cls, "getStartOffset", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Passage::Passage() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint Passage::getEndOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getEndOffset_54c6a179]);
          }

          JArray< jint > Passage::getMatchEnds() const
          {
            return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getMatchEnds_dab10e75]));
          }

          JArray< jint > Passage::getMatchStarts() const
          {
            return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getMatchStarts_dab10e75]));
          }

          JArray< ::org::apache::lucene::util::BytesRef > Passage::getMatchTerms() const
          {
            return JArray< ::org::apache::lucene::util::BytesRef >(env->callObjectMethod(this$, mids$[mid_getMatchTerms_19d1f84d]));
          }

          jint Passage::getNumMatches() const
          {
            return env->callIntMethod(this$, mids$[mid_getNumMatches_54c6a179]);
          }

          jfloat Passage::getScore() const
          {
            return env->callFloatMethod(this$, mids$[mid_getScore_54c6a176]);
          }

          jint Passage::getStartOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getStartOffset_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace postingshighlight {
          static PyObject *t_Passage_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Passage_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Passage_init_(t_Passage *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Passage_getEndOffset(t_Passage *self);
          static PyObject *t_Passage_getMatchEnds(t_Passage *self);
          static PyObject *t_Passage_getMatchStarts(t_Passage *self);
          static PyObject *t_Passage_getMatchTerms(t_Passage *self);
          static PyObject *t_Passage_getNumMatches(t_Passage *self);
          static PyObject *t_Passage_getScore(t_Passage *self);
          static PyObject *t_Passage_getStartOffset(t_Passage *self);
          static PyObject *t_Passage_get__endOffset(t_Passage *self, void *data);
          static PyObject *t_Passage_get__matchEnds(t_Passage *self, void *data);
          static PyObject *t_Passage_get__matchStarts(t_Passage *self, void *data);
          static PyObject *t_Passage_get__matchTerms(t_Passage *self, void *data);
          static PyObject *t_Passage_get__numMatches(t_Passage *self, void *data);
          static PyObject *t_Passage_get__score(t_Passage *self, void *data);
          static PyObject *t_Passage_get__startOffset(t_Passage *self, void *data);
          static PyGetSetDef t_Passage__fields_[] = {
            DECLARE_GET_FIELD(t_Passage, endOffset),
            DECLARE_GET_FIELD(t_Passage, matchEnds),
            DECLARE_GET_FIELD(t_Passage, matchStarts),
            DECLARE_GET_FIELD(t_Passage, matchTerms),
            DECLARE_GET_FIELD(t_Passage, numMatches),
            DECLARE_GET_FIELD(t_Passage, score),
            DECLARE_GET_FIELD(t_Passage, startOffset),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Passage__methods_[] = {
            DECLARE_METHOD(t_Passage, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Passage, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Passage, getEndOffset, METH_NOARGS),
            DECLARE_METHOD(t_Passage, getMatchEnds, METH_NOARGS),
            DECLARE_METHOD(t_Passage, getMatchStarts, METH_NOARGS),
            DECLARE_METHOD(t_Passage, getMatchTerms, METH_NOARGS),
            DECLARE_METHOD(t_Passage, getNumMatches, METH_NOARGS),
            DECLARE_METHOD(t_Passage, getScore, METH_NOARGS),
            DECLARE_METHOD(t_Passage, getStartOffset, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Passage, t_Passage, ::java::lang::Object, Passage, t_Passage_init_, 0, 0, t_Passage__fields_, 0, 0);

          void t_Passage::install(PyObject *module)
          {
            installType(&PY_TYPE(Passage), module, "Passage", 0);
          }

          void t_Passage::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Passage).tp_dict, "class_", make_descriptor(Passage::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Passage).tp_dict, "wrapfn_", make_descriptor(t_Passage::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Passage).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Passage_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Passage::initializeClass, 1)))
              return NULL;
            return t_Passage::wrap_Object(Passage(((t_Passage *) arg)->object.this$));
          }
          static PyObject *t_Passage_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Passage::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Passage_init_(t_Passage *self, PyObject *args, PyObject *kwds)
          {
            Passage object((jobject) NULL);

            INT_CALL(object = Passage());
            self->object = object;

            return 0;
          }

          static PyObject *t_Passage_getEndOffset(t_Passage *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEndOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_Passage_getMatchEnds(t_Passage *self)
          {
            JArray< jint > result((jobject) NULL);
            OBJ_CALL(result = self->object.getMatchEnds());
            return result.wrap();
          }

          static PyObject *t_Passage_getMatchStarts(t_Passage *self)
          {
            JArray< jint > result((jobject) NULL);
            OBJ_CALL(result = self->object.getMatchStarts());
            return result.wrap();
          }

          static PyObject *t_Passage_getMatchTerms(t_Passage *self)
          {
            JArray< ::org::apache::lucene::util::BytesRef > result((jobject) NULL);
            OBJ_CALL(result = self->object.getMatchTerms());
            return JArray<jobject>(result.this$).wrap(::org::apache::lucene::util::t_BytesRef::wrap_jobject);
          }

          static PyObject *t_Passage_getNumMatches(t_Passage *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getNumMatches());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_Passage_getScore(t_Passage *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getScore());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_Passage_getStartOffset(t_Passage *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getStartOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_Passage_get__endOffset(t_Passage *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEndOffset());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_Passage_get__matchEnds(t_Passage *self, void *data)
          {
            JArray< jint > value((jobject) NULL);
            OBJ_CALL(value = self->object.getMatchEnds());
            return value.wrap();
          }

          static PyObject *t_Passage_get__matchStarts(t_Passage *self, void *data)
          {
            JArray< jint > value((jobject) NULL);
            OBJ_CALL(value = self->object.getMatchStarts());
            return value.wrap();
          }

          static PyObject *t_Passage_get__matchTerms(t_Passage *self, void *data)
          {
            JArray< ::org::apache::lucene::util::BytesRef > value((jobject) NULL);
            OBJ_CALL(value = self->object.getMatchTerms());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::util::t_BytesRef::wrap_jobject);
          }

          static PyObject *t_Passage_get__numMatches(t_Passage *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getNumMatches());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_Passage_get__score(t_Passage *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getScore());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_Passage_get__startOffset(t_Passage *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getStartOffset());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pattern/PatternReplaceCharFilter.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "java/util/regex/Pattern.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {

          ::java::lang::Class *PatternReplaceCharFilter::class$ = NULL;
          jmethodID *PatternReplaceCharFilter::mids$ = NULL;
          bool PatternReplaceCharFilter::live$ = false;
          jint PatternReplaceCharFilter::DEFAULT_MAX_BLOCK_CHARS = (jint) 0;

          jclass PatternReplaceCharFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pattern/PatternReplaceCharFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e0e77162] = env->getMethodID(cls, "<init>", "(Ljava/util/regex/Pattern;Ljava/lang/String;Ljava/io/Reader;)V");
              mids$[mid_init$_ee751df6] = env->getMethodID(cls, "<init>", "(Ljava/util/regex/Pattern;Ljava/lang/String;ILjava/lang/String;Ljava/io/Reader;)V");
              mids$[mid_read_54c6a179] = env->getMethodID(cls, "read", "()I");
              mids$[mid_read_6f0bb349] = env->getMethodID(cls, "read", "([CII)I");
              mids$[mid_correct_39c7bd23] = env->getMethodID(cls, "correct", "(I)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_BLOCK_CHARS = env->getStaticIntField(cls, "DEFAULT_MAX_BLOCK_CHARS");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PatternReplaceCharFilter::PatternReplaceCharFilter(const ::java::util::regex::Pattern & a0, const ::java::lang::String & a1, const ::java::io::Reader & a2) : ::org::apache::lucene::analysis::charfilter::BaseCharFilter(env->newObject(initializeClass, &mids$, mid_init$_e0e77162, a0.this$, a1.this$, a2.this$)) {}

          PatternReplaceCharFilter::PatternReplaceCharFilter(const ::java::util::regex::Pattern & a0, const ::java::lang::String & a1, jint a2, const ::java::lang::String & a3, const ::java::io::Reader & a4) : ::org::apache::lucene::analysis::charfilter::BaseCharFilter(env->newObject(initializeClass, &mids$, mid_init$_ee751df6, a0.this$, a1.this$, a2, a3.this$, a4.this$)) {}

          jint PatternReplaceCharFilter::read() const
          {
            return env->callIntMethod(this$, mids$[mid_read_54c6a179]);
          }

          jint PatternReplaceCharFilter::read(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return env->callIntMethod(this$, mids$[mid_read_6f0bb349], a0.this$, a1, a2);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {
          static PyObject *t_PatternReplaceCharFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PatternReplaceCharFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PatternReplaceCharFilter_init_(t_PatternReplaceCharFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PatternReplaceCharFilter_read(t_PatternReplaceCharFilter *self, PyObject *args);

          static PyMethodDef t_PatternReplaceCharFilter__methods_[] = {
            DECLARE_METHOD(t_PatternReplaceCharFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternReplaceCharFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternReplaceCharFilter, read, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PatternReplaceCharFilter, t_PatternReplaceCharFilter, ::org::apache::lucene::analysis::charfilter::BaseCharFilter, PatternReplaceCharFilter, t_PatternReplaceCharFilter_init_, 0, 0, 0, 0, 0);

          void t_PatternReplaceCharFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PatternReplaceCharFilter), module, "PatternReplaceCharFilter", 0);
          }

          void t_PatternReplaceCharFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PatternReplaceCharFilter).tp_dict, "class_", make_descriptor(PatternReplaceCharFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PatternReplaceCharFilter).tp_dict, "wrapfn_", make_descriptor(t_PatternReplaceCharFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PatternReplaceCharFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(PatternReplaceCharFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(PatternReplaceCharFilter).tp_dict, "DEFAULT_MAX_BLOCK_CHARS", make_descriptor(PatternReplaceCharFilter::DEFAULT_MAX_BLOCK_CHARS));
          }

          static PyObject *t_PatternReplaceCharFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PatternReplaceCharFilter::initializeClass, 1)))
              return NULL;
            return t_PatternReplaceCharFilter::wrap_Object(PatternReplaceCharFilter(((t_PatternReplaceCharFilter *) arg)->object.this$));
          }
          static PyObject *t_PatternReplaceCharFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PatternReplaceCharFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PatternReplaceCharFilter_init_(t_PatternReplaceCharFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::java::util::regex::Pattern a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                PatternReplaceCharFilter object((jobject) NULL);

                if (!parseArgs(args, "ksk", ::java::util::regex::Pattern::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = PatternReplaceCharFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::java::util::regex::Pattern a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                jint a2;
                ::java::lang::String a3((jobject) NULL);
                ::java::io::Reader a4((jobject) NULL);
                PatternReplaceCharFilter object((jobject) NULL);

                if (!parseArgs(args, "ksIsk", ::java::util::regex::Pattern::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = PatternReplaceCharFilter(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PatternReplaceCharFilter_read(t_PatternReplaceCharFilter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jint result;
                OBJ_CALL(result = self->object.read());
                return PyInt_FromLong((long) result);
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;
                jint result;

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.read(a0, a1, a2));
                  return PyInt_FromLong((long) result);
                }
              }
            }

            return callSuper(&PY_TYPE(PatternReplaceCharFilter), (PyObject *) self, "read", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/es/SpanishLightStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace es {

          ::java::lang::Class *SpanishLightStemmer::class$ = NULL;
          jmethodID *SpanishLightStemmer::mids$ = NULL;
          bool SpanishLightStemmer::live$ = false;

          jclass SpanishLightStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/es/SpanishLightStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanishLightStemmer::SpanishLightStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint SpanishLightStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace es {
          static PyObject *t_SpanishLightStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanishLightStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanishLightStemmer_init_(t_SpanishLightStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanishLightStemmer_stem(t_SpanishLightStemmer *self, PyObject *args);

          static PyMethodDef t_SpanishLightStemmer__methods_[] = {
            DECLARE_METHOD(t_SpanishLightStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanishLightStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanishLightStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanishLightStemmer, t_SpanishLightStemmer, ::java::lang::Object, SpanishLightStemmer, t_SpanishLightStemmer_init_, 0, 0, 0, 0, 0);

          void t_SpanishLightStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanishLightStemmer), module, "SpanishLightStemmer", 0);
          }

          void t_SpanishLightStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanishLightStemmer).tp_dict, "class_", make_descriptor(SpanishLightStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanishLightStemmer).tp_dict, "wrapfn_", make_descriptor(t_SpanishLightStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanishLightStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanishLightStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanishLightStemmer::initializeClass, 1)))
              return NULL;
            return t_SpanishLightStemmer::wrap_Object(SpanishLightStemmer(((t_SpanishLightStemmer *) arg)->object.this$));
          }
          static PyObject *t_SpanishLightStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanishLightStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanishLightStemmer_init_(t_SpanishLightStemmer *self, PyObject *args, PyObject *kwds)
          {
            SpanishLightStemmer object((jobject) NULL);

            INT_CALL(object = SpanishLightStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_SpanishLightStemmer_stem(t_SpanishLightStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/compressing/CompressionMode.h"
#include "org/apache/lucene/codecs/compressing/Compressor.h"
#include "org/apache/lucene/codecs/compressing/Decompressor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {

          ::java::lang::Class *CompressionMode::class$ = NULL;
          jmethodID *CompressionMode::mids$ = NULL;
          bool CompressionMode::live$ = false;
          CompressionMode *CompressionMode::FAST = NULL;
          CompressionMode *CompressionMode::FAST_DECOMPRESSION = NULL;
          CompressionMode *CompressionMode::HIGH_COMPRESSION = NULL;

          jclass CompressionMode::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/compressing/CompressionMode");

              mids$ = new jmethodID[max_mid];
              mids$[mid_newCompressor_eb04ef38] = env->getMethodID(cls, "newCompressor", "()Lorg/apache/lucene/codecs/compressing/Compressor;");
              mids$[mid_newDecompressor_7b8f1b1d] = env->getMethodID(cls, "newDecompressor", "()Lorg/apache/lucene/codecs/compressing/Decompressor;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              FAST = new CompressionMode(env->getStaticObjectField(cls, "FAST", "Lorg/apache/lucene/codecs/compressing/CompressionMode;"));
              FAST_DECOMPRESSION = new CompressionMode(env->getStaticObjectField(cls, "FAST_DECOMPRESSION", "Lorg/apache/lucene/codecs/compressing/CompressionMode;"));
              HIGH_COMPRESSION = new CompressionMode(env->getStaticObjectField(cls, "HIGH_COMPRESSION", "Lorg/apache/lucene/codecs/compressing/CompressionMode;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::codecs::compressing::Compressor CompressionMode::newCompressor() const
          {
            return ::org::apache::lucene::codecs::compressing::Compressor(env->callObjectMethod(this$, mids$[mid_newCompressor_eb04ef38]));
          }

          ::org::apache::lucene::codecs::compressing::Decompressor CompressionMode::newDecompressor() const
          {
            return ::org::apache::lucene::codecs::compressing::Decompressor(env->callObjectMethod(this$, mids$[mid_newDecompressor_7b8f1b1d]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {
          static PyObject *t_CompressionMode_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressionMode_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressionMode_newCompressor(t_CompressionMode *self);
          static PyObject *t_CompressionMode_newDecompressor(t_CompressionMode *self);

          static PyMethodDef t_CompressionMode__methods_[] = {
            DECLARE_METHOD(t_CompressionMode, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressionMode, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressionMode, newCompressor, METH_NOARGS),
            DECLARE_METHOD(t_CompressionMode, newDecompressor, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CompressionMode, t_CompressionMode, ::java::lang::Object, CompressionMode, abstract_init, 0, 0, 0, 0, 0);

          void t_CompressionMode::install(PyObject *module)
          {
            installType(&PY_TYPE(CompressionMode), module, "CompressionMode", 0);
          }

          void t_CompressionMode::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CompressionMode).tp_dict, "class_", make_descriptor(CompressionMode::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CompressionMode).tp_dict, "wrapfn_", make_descriptor(t_CompressionMode::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CompressionMode).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CompressionMode::initializeClass);
            PyDict_SetItemString(PY_TYPE(CompressionMode).tp_dict, "FAST", make_descriptor(t_CompressionMode::wrap_Object(*CompressionMode::FAST)));
            PyDict_SetItemString(PY_TYPE(CompressionMode).tp_dict, "FAST_DECOMPRESSION", make_descriptor(t_CompressionMode::wrap_Object(*CompressionMode::FAST_DECOMPRESSION)));
            PyDict_SetItemString(PY_TYPE(CompressionMode).tp_dict, "HIGH_COMPRESSION", make_descriptor(t_CompressionMode::wrap_Object(*CompressionMode::HIGH_COMPRESSION)));
          }

          static PyObject *t_CompressionMode_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompressionMode::initializeClass, 1)))
              return NULL;
            return t_CompressionMode::wrap_Object(CompressionMode(((t_CompressionMode *) arg)->object.this$));
          }
          static PyObject *t_CompressionMode_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompressionMode::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CompressionMode_newCompressor(t_CompressionMode *self)
          {
            ::org::apache::lucene::codecs::compressing::Compressor result((jobject) NULL);
            OBJ_CALL(result = self->object.newCompressor());
            return ::org::apache::lucene::codecs::compressing::t_Compressor::wrap_Object(result);
          }

          static PyObject *t_CompressionMode_newDecompressor(t_CompressionMode *self)
          {
            ::org::apache::lucene::codecs::compressing::Decompressor result((jobject) NULL);
            OBJ_CALL(result = self->object.newDecompressor());
            return ::org::apache::lucene::codecs::compressing::t_Decompressor::wrap_Object(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ru/RussianLightStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ru {

          ::java::lang::Class *RussianLightStemFilter::class$ = NULL;
          jmethodID *RussianLightStemFilter::mids$ = NULL;
          bool RussianLightStemFilter::live$ = false;

          jclass RussianLightStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ru/RussianLightStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RussianLightStemFilter::RussianLightStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean RussianLightStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ru {
          static PyObject *t_RussianLightStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RussianLightStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RussianLightStemFilter_init_(t_RussianLightStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_RussianLightStemFilter_incrementToken(t_RussianLightStemFilter *self, PyObject *args);

          static PyMethodDef t_RussianLightStemFilter__methods_[] = {
            DECLARE_METHOD(t_RussianLightStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RussianLightStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RussianLightStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(RussianLightStemFilter, t_RussianLightStemFilter, ::org::apache::lucene::analysis::TokenFilter, RussianLightStemFilter, t_RussianLightStemFilter_init_, 0, 0, 0, 0, 0);

          void t_RussianLightStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(RussianLightStemFilter), module, "RussianLightStemFilter", 0);
          }

          void t_RussianLightStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(RussianLightStemFilter).tp_dict, "class_", make_descriptor(RussianLightStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RussianLightStemFilter).tp_dict, "wrapfn_", make_descriptor(t_RussianLightStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RussianLightStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_RussianLightStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RussianLightStemFilter::initializeClass, 1)))
              return NULL;
            return t_RussianLightStemFilter::wrap_Object(RussianLightStemFilter(((t_RussianLightStemFilter *) arg)->object.this$));
          }
          static PyObject *t_RussianLightStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RussianLightStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RussianLightStemFilter_init_(t_RussianLightStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            RussianLightStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = RussianLightStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_RussianLightStemFilter_incrementToken(t_RussianLightStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(RussianLightStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$Bytes.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$Bytes::class$ = NULL;
        jmethodID *FieldCache$Bytes::mids$ = NULL;
        bool FieldCache$Bytes::live$ = false;
        FieldCache$Bytes *FieldCache$Bytes::EMPTY = NULL;

        jclass FieldCache$Bytes::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$Bytes");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_get_39c7bd28] = env->getMethodID(cls, "get", "(I)B");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY = new FieldCache$Bytes(env->getStaticObjectField(cls, "EMPTY", "Lorg/apache/lucene/search/FieldCache$Bytes;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldCache$Bytes::FieldCache$Bytes() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jbyte FieldCache$Bytes::get(jint a0) const
        {
          return env->callByteMethod(this$, mids$[mid_get_39c7bd28], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$Bytes_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$Bytes_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldCache$Bytes_init_(t_FieldCache$Bytes *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldCache$Bytes_get(t_FieldCache$Bytes *self, PyObject *arg);

        static PyMethodDef t_FieldCache$Bytes__methods_[] = {
          DECLARE_METHOD(t_FieldCache$Bytes, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$Bytes, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$Bytes, get, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$Bytes, t_FieldCache$Bytes, ::java::lang::Object, FieldCache$Bytes, t_FieldCache$Bytes_init_, 0, 0, 0, 0, 0);

        void t_FieldCache$Bytes::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$Bytes), module, "FieldCache$Bytes", 0);
        }

        void t_FieldCache$Bytes::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$Bytes).tp_dict, "class_", make_descriptor(FieldCache$Bytes::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$Bytes).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$Bytes::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$Bytes).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FieldCache$Bytes::initializeClass);
          PyDict_SetItemString(PY_TYPE(FieldCache$Bytes).tp_dict, "EMPTY", make_descriptor(t_FieldCache$Bytes::wrap_Object(*FieldCache$Bytes::EMPTY)));
        }

        static PyObject *t_FieldCache$Bytes_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$Bytes::initializeClass, 1)))
            return NULL;
          return t_FieldCache$Bytes::wrap_Object(FieldCache$Bytes(((t_FieldCache$Bytes *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$Bytes_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$Bytes::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldCache$Bytes_init_(t_FieldCache$Bytes *self, PyObject *args, PyObject *kwds)
        {
          FieldCache$Bytes object((jobject) NULL);

          INT_CALL(object = FieldCache$Bytes());
          self->object = object;

          return 0;
        }

        static PyObject *t_FieldCache$Bytes_get(t_FieldCache$Bytes *self, PyObject *arg)
        {
          jint a0;
          jbyte result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/ext/Extensions$Pair.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace ext {

          ::java::lang::Class *Extensions$Pair::class$ = NULL;
          jmethodID *Extensions$Pair::mids$ = NULL;
          jfieldID *Extensions$Pair::fids$ = NULL;
          bool Extensions$Pair::live$ = false;

          jclass Extensions$Pair::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/ext/Extensions$Pair");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_466982f2] = env->getMethodID(cls, "<init>", "(Ljava/lang/Object;Ljava/lang/Object;)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_cud] = env->getFieldID(cls, "cud", "Ljava/lang/Object;");
              fids$[fid_cur] = env->getFieldID(cls, "cur", "Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Extensions$Pair::Extensions$Pair(const ::java::lang::Object & a0, const ::java::lang::Object & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_466982f2, a0.this$, a1.this$)) {}

          ::java::lang::Object Extensions$Pair::_get_cud() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_cud]));
          }

          ::java::lang::Object Extensions$Pair::_get_cur() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_cur]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace ext {
          static PyObject *t_Extensions$Pair_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Extensions$Pair_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Extensions$Pair_of_(t_Extensions$Pair *self, PyObject *args);
          static int t_Extensions$Pair_init_(t_Extensions$Pair *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Extensions$Pair_get__cud(t_Extensions$Pair *self, void *data);
          static PyObject *t_Extensions$Pair_get__cur(t_Extensions$Pair *self, void *data);

          static PyObject *t_Extensions$Pair_get__parameters_(t_Extensions$Pair *self, void *data);
          static PyGetSetDef t_Extensions$Pair__fields_[] = {
            DECLARE_GET_FIELD(t_Extensions$Pair, cud),
            DECLARE_GET_FIELD(t_Extensions$Pair, cur),
            DECLARE_GET_FIELD(t_Extensions$Pair, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Extensions$Pair__methods_[] = {
            DECLARE_METHOD(t_Extensions$Pair, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Extensions$Pair, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Extensions$Pair, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Extensions$Pair, t_Extensions$Pair, ::java::lang::Object, Extensions$Pair, t_Extensions$Pair_init_, 0, 0, t_Extensions$Pair__fields_, 0, 0);
          PyObject *t_Extensions$Pair::wrap_Object(const Extensions$Pair& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_Extensions$Pair::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Extensions$Pair *self = (t_Extensions$Pair *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          PyObject *t_Extensions$Pair::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_Extensions$Pair::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Extensions$Pair *self = (t_Extensions$Pair *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          void t_Extensions$Pair::install(PyObject *module)
          {
            installType(&PY_TYPE(Extensions$Pair), module, "Extensions$Pair", 0);
          }

          void t_Extensions$Pair::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Extensions$Pair).tp_dict, "class_", make_descriptor(Extensions$Pair::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Extensions$Pair).tp_dict, "wrapfn_", make_descriptor(t_Extensions$Pair::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Extensions$Pair).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Extensions$Pair_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Extensions$Pair::initializeClass, 1)))
              return NULL;
            return t_Extensions$Pair::wrap_Object(Extensions$Pair(((t_Extensions$Pair *) arg)->object.this$));
          }
          static PyObject *t_Extensions$Pair_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Extensions$Pair::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Extensions$Pair_of_(t_Extensions$Pair *self, PyObject *args)
          {
            if (!parseArg(args, "T", 2, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_Extensions$Pair_init_(t_Extensions$Pair *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            Extensions$Pair object((jobject) NULL);

            if (!parseArgs(args, "oo", &a0, &a1))
            {
              INT_CALL(object = Extensions$Pair(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
          static PyObject *t_Extensions$Pair_get__parameters_(t_Extensions$Pair *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_Extensions$Pair_get__cud(t_Extensions$Pair *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_cud());
            return ::java::lang::t_Object::wrap_Object(value);
          }

          static PyObject *t_Extensions$Pair_get__cur(t_Extensions$Pair *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_cur());
            return ::java::lang::t_Object::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/GradientFormatter.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/highlight/Formatter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/highlight/TokenGroup.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *GradientFormatter::class$ = NULL;
          jmethodID *GradientFormatter::mids$ = NULL;
          bool GradientFormatter::live$ = false;

          jclass GradientFormatter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/GradientFormatter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_ecfb0f33] = env->getMethodID(cls, "<init>", "(FLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_hexToInt_5fdc3f57] = env->getStaticMethodID(cls, "hexToInt", "(Ljava/lang/String;)I");
              mids$[mid_highlightTerm_8838cc58] = env->getMethodID(cls, "highlightTerm", "(Ljava/lang/String;Lorg/apache/lucene/search/highlight/TokenGroup;)Ljava/lang/String;");
              mids$[mid_getForegroundColorString_5ded254a] = env->getMethodID(cls, "getForegroundColorString", "(F)Ljava/lang/String;");
              mids$[mid_getBackgroundColorString_5ded254a] = env->getMethodID(cls, "getBackgroundColorString", "(F)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GradientFormatter::GradientFormatter(jfloat a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::java::lang::String & a3, const ::java::lang::String & a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ecfb0f33, a0, a1.this$, a2.this$, a3.this$, a4.this$)) {}

          jint GradientFormatter::hexToInt(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_hexToInt_5fdc3f57], a0.this$);
          }

          ::java::lang::String GradientFormatter::highlightTerm(const ::java::lang::String & a0, const ::org::apache::lucene::search::highlight::TokenGroup & a1) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_highlightTerm_8838cc58], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_GradientFormatter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GradientFormatter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GradientFormatter_init_(t_GradientFormatter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GradientFormatter_hexToInt(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GradientFormatter_highlightTerm(t_GradientFormatter *self, PyObject *args);

          static PyMethodDef t_GradientFormatter__methods_[] = {
            DECLARE_METHOD(t_GradientFormatter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GradientFormatter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GradientFormatter, hexToInt, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GradientFormatter, highlightTerm, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GradientFormatter, t_GradientFormatter, ::java::lang::Object, GradientFormatter, t_GradientFormatter_init_, 0, 0, 0, 0, 0);

          void t_GradientFormatter::install(PyObject *module)
          {
            installType(&PY_TYPE(GradientFormatter), module, "GradientFormatter", 0);
          }

          void t_GradientFormatter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GradientFormatter).tp_dict, "class_", make_descriptor(GradientFormatter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GradientFormatter).tp_dict, "wrapfn_", make_descriptor(t_GradientFormatter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GradientFormatter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GradientFormatter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GradientFormatter::initializeClass, 1)))
              return NULL;
            return t_GradientFormatter::wrap_Object(GradientFormatter(((t_GradientFormatter *) arg)->object.this$));
          }
          static PyObject *t_GradientFormatter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GradientFormatter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GradientFormatter_init_(t_GradientFormatter *self, PyObject *args, PyObject *kwds)
          {
            jfloat a0;
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            ::java::lang::String a3((jobject) NULL);
            ::java::lang::String a4((jobject) NULL);
            GradientFormatter object((jobject) NULL);

            if (!parseArgs(args, "Fssss", &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = GradientFormatter(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GradientFormatter_hexToInt(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::highlight::GradientFormatter::hexToInt(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "hexToInt", arg);
            return NULL;
          }

          static PyObject *t_GradientFormatter_highlightTerm(t_GradientFormatter *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::highlight::TokenGroup a1((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::search::highlight::TokenGroup::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.highlightTerm(a0, a1));
              return j2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "highlightTerm", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FilterScorer.h"
#include "java/util/Collection.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Scorer$ChildScorer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FilterScorer::class$ = NULL;
        jmethodID *FilterScorer::mids$ = NULL;
        bool FilterScorer::live$ = false;

        jclass FilterScorer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FilterScorer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_8be0880c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Scorer;)V");
            mids$[mid_advance_39c7bd23] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_attributes_f901022b] = env->getMethodID(cls, "attributes", "()Lorg/apache/lucene/util/AttributeSource;");
            mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_54c6a179] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_freq_54c6a179] = env->getMethodID(cls, "freq", "()I");
            mids$[mid_getChildren_2d2d7de4] = env->getMethodID(cls, "getChildren", "()Ljava/util/Collection;");
            mids$[mid_nextDoc_54c6a179] = env->getMethodID(cls, "nextDoc", "()I");
            mids$[mid_score_54c6a176] = env->getMethodID(cls, "score", "()F");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterScorer::FilterScorer(const ::org::apache::lucene::search::Scorer & a0) : ::org::apache::lucene::search::Scorer(env->newObject(initializeClass, &mids$, mid_init$_8be0880c, a0.this$)) {}

        jint FilterScorer::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_39c7bd23], a0);
        }

        ::org::apache::lucene::util::AttributeSource FilterScorer::attributes() const
        {
          return ::org::apache::lucene::util::AttributeSource(env->callObjectMethod(this$, mids$[mid_attributes_f901022b]));
        }

        jlong FilterScorer::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
        }

        jint FilterScorer::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_54c6a179]);
        }

        jint FilterScorer::freq() const
        {
          return env->callIntMethod(this$, mids$[mid_freq_54c6a179]);
        }

        ::java::util::Collection FilterScorer::getChildren() const
        {
          return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getChildren_2d2d7de4]));
        }

        jint FilterScorer::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_54c6a179]);
        }

        jfloat FilterScorer::score() const
        {
          return env->callFloatMethod(this$, mids$[mid_score_54c6a176]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FilterScorer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterScorer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilterScorer_init_(t_FilterScorer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterScorer_advance(t_FilterScorer *self, PyObject *args);
        static PyObject *t_FilterScorer_attributes(t_FilterScorer *self, PyObject *args);
        static PyObject *t_FilterScorer_cost(t_FilterScorer *self, PyObject *args);
        static PyObject *t_FilterScorer_docID(t_FilterScorer *self, PyObject *args);
        static PyObject *t_FilterScorer_freq(t_FilterScorer *self, PyObject *args);
        static PyObject *t_FilterScorer_getChildren(t_FilterScorer *self, PyObject *args);
        static PyObject *t_FilterScorer_nextDoc(t_FilterScorer *self, PyObject *args);
        static PyObject *t_FilterScorer_score(t_FilterScorer *self, PyObject *args);
        static PyObject *t_FilterScorer_get__children(t_FilterScorer *self, void *data);
        static PyGetSetDef t_FilterScorer__fields_[] = {
          DECLARE_GET_FIELD(t_FilterScorer, children),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilterScorer__methods_[] = {
          DECLARE_METHOD(t_FilterScorer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterScorer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterScorer, advance, METH_VARARGS),
          DECLARE_METHOD(t_FilterScorer, attributes, METH_VARARGS),
          DECLARE_METHOD(t_FilterScorer, cost, METH_VARARGS),
          DECLARE_METHOD(t_FilterScorer, docID, METH_VARARGS),
          DECLARE_METHOD(t_FilterScorer, freq, METH_VARARGS),
          DECLARE_METHOD(t_FilterScorer, getChildren, METH_VARARGS),
          DECLARE_METHOD(t_FilterScorer, nextDoc, METH_VARARGS),
          DECLARE_METHOD(t_FilterScorer, score, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilterScorer, t_FilterScorer, ::org::apache::lucene::search::Scorer, FilterScorer, t_FilterScorer_init_, 0, 0, t_FilterScorer__fields_, 0, 0);

        void t_FilterScorer::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterScorer), module, "FilterScorer", 0);
        }

        void t_FilterScorer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilterScorer).tp_dict, "class_", make_descriptor(FilterScorer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilterScorer).tp_dict, "wrapfn_", make_descriptor(t_FilterScorer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilterScorer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterScorer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterScorer::initializeClass, 1)))
            return NULL;
          return t_FilterScorer::wrap_Object(FilterScorer(((t_FilterScorer *) arg)->object.this$));
        }
        static PyObject *t_FilterScorer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterScorer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilterScorer_init_(t_FilterScorer *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Scorer a0((jobject) NULL);
          FilterScorer object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
          {
            INT_CALL(object = FilterScorer(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilterScorer_advance(t_FilterScorer *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterScorer), (PyObject *) self, "advance", args, 2);
        }

        static PyObject *t_FilterScorer_attributes(t_FilterScorer *self, PyObject *args)
        {
          ::org::apache::lucene::util::AttributeSource result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.attributes());
            return ::org::apache::lucene::util::t_AttributeSource::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterScorer), (PyObject *) self, "attributes", args, 2);
        }

        static PyObject *t_FilterScorer_cost(t_FilterScorer *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FilterScorer), (PyObject *) self, "cost", args, 2);
        }

        static PyObject *t_FilterScorer_docID(t_FilterScorer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterScorer), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_FilterScorer_freq(t_FilterScorer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.freq());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterScorer), (PyObject *) self, "freq", args, 2);
        }

        static PyObject *t_FilterScorer_getChildren(t_FilterScorer *self, PyObject *args)
        {
          ::java::util::Collection result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getChildren());
            return ::java::util::t_Collection::wrap_Object(result, &::org::apache::lucene::search::PY_TYPE(Scorer$ChildScorer));
          }

          return callSuper(&PY_TYPE(FilterScorer), (PyObject *) self, "getChildren", args, 2);
        }

        static PyObject *t_FilterScorer_nextDoc(t_FilterScorer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterScorer), (PyObject *) self, "nextDoc", args, 2);
        }

        static PyObject *t_FilterScorer_score(t_FilterScorer *self, PyObject *args)
        {
          jfloat result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.score());
            return PyFloat_FromDouble((double) result);
          }

          return callSuper(&PY_TYPE(FilterScorer), (PyObject *) self, "score", args, 2);
        }

        static PyObject *t_FilterScorer_get__children(t_FilterScorer *self, void *data)
        {
          ::java::util::Collection value((jobject) NULL);
          OBJ_CALL(value = self->object.getChildren());
          return ::java::util::t_Collection::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/SortField.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {

          ::java::lang::Class *ValueSource::class$ = NULL;
          jmethodID *ValueSource::mids$ = NULL;
          bool ValueSource::live$ = false;

          jclass ValueSource::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/ValueSource");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
              mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getSortField_6e3d2211] = env->getMethodID(cls, "getSortField", "(Z)Lorg/apache/lucene/search/SortField;");
              mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_newContext_f71e04af] = env->getStaticMethodID(cls, "newContext", "(Lorg/apache/lucene/search/IndexSearcher;)Ljava/util/Map;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ValueSource::ValueSource() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void ValueSource::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
          }

          ::java::lang::String ValueSource::description() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
          }

          jboolean ValueSource::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          ::org::apache::lucene::search::SortField ValueSource::getSortField(jboolean a0) const
          {
            return ::org::apache::lucene::search::SortField(env->callObjectMethod(this$, mids$[mid_getSortField_6e3d2211], a0));
          }

          ::org::apache::lucene::queries::function::FunctionValues ValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
          {
            return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
          }

          jint ValueSource::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::util::Map ValueSource::newContext(const ::org::apache::lucene::search::IndexSearcher & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::util::Map(env->callStaticObjectMethod(cls, mids$[mid_newContext_f71e04af], a0.this$));
          }

          ::java::lang::String ValueSource::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          static PyObject *t_ValueSource_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ValueSource_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ValueSource_init_(t_ValueSource *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ValueSource_createWeight(t_ValueSource *self, PyObject *args);
          static PyObject *t_ValueSource_description(t_ValueSource *self);
          static PyObject *t_ValueSource_equals(t_ValueSource *self, PyObject *args);
          static PyObject *t_ValueSource_getSortField(t_ValueSource *self, PyObject *arg);
          static PyObject *t_ValueSource_getValues(t_ValueSource *self, PyObject *args);
          static PyObject *t_ValueSource_hashCode(t_ValueSource *self, PyObject *args);
          static PyObject *t_ValueSource_newContext(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ValueSource_toString(t_ValueSource *self, PyObject *args);

          static PyMethodDef t_ValueSource__methods_[] = {
            DECLARE_METHOD(t_ValueSource, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ValueSource, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ValueSource, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_ValueSource, description, METH_NOARGS),
            DECLARE_METHOD(t_ValueSource, equals, METH_VARARGS),
            DECLARE_METHOD(t_ValueSource, getSortField, METH_O),
            DECLARE_METHOD(t_ValueSource, getValues, METH_VARARGS),
            DECLARE_METHOD(t_ValueSource, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_ValueSource, newContext, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ValueSource, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ValueSource, t_ValueSource, ::java::lang::Object, ValueSource, t_ValueSource_init_, 0, 0, 0, 0, 0);

          void t_ValueSource::install(PyObject *module)
          {
            installType(&PY_TYPE(ValueSource), module, "ValueSource", 0);
          }

          void t_ValueSource::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ValueSource).tp_dict, "class_", make_descriptor(ValueSource::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ValueSource).tp_dict, "wrapfn_", make_descriptor(t_ValueSource::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ValueSource_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ValueSource::initializeClass, 1)))
              return NULL;
            return t_ValueSource::wrap_Object(ValueSource(((t_ValueSource *) arg)->object.this$));
          }
          static PyObject *t_ValueSource_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ValueSource::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ValueSource_init_(t_ValueSource *self, PyObject *args, PyObject *kwds)
          {
            ValueSource object((jobject) NULL);

            INT_CALL(object = ValueSource());
            self->object = object;

            return 0;
          }

          static PyObject *t_ValueSource_createWeight(t_ValueSource *self, PyObject *args)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

            if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
            {
              OBJ_CALL(self->object.createWeight(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "createWeight", args);
            return NULL;
          }

          static PyObject *t_ValueSource_description(t_ValueSource *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.description());
            return j2p(result);
          }

          static PyObject *t_ValueSource_equals(t_ValueSource *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ValueSource), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_ValueSource_getSortField(t_ValueSource *self, PyObject *arg)
          {
            jboolean a0;
            ::org::apache::lucene::search::SortField result((jobject) NULL);

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(result = self->object.getSortField(a0));
              return ::org::apache::lucene::search::t_SortField::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getSortField", arg);
            return NULL;
          }

          static PyObject *t_ValueSource_getValues(t_ValueSource *self, PyObject *args)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
            ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

            if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
            {
              OBJ_CALL(result = self->object.getValues(a0, a1));
              return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getValues", args);
            return NULL;
          }

          static PyObject *t_ValueSource_hashCode(t_ValueSource *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(ValueSource), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_ValueSource_newContext(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::java::util::Map result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::queries::function::ValueSource::newContext(a0));
              return ::java::util::t_Map::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "newContext", arg);
            return NULL;
          }

          static PyObject *t_ValueSource_toString(t_ValueSource *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(ValueSource), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/BooleanQueryBuilder.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *BooleanQueryBuilder::class$ = NULL;
            jmethodID *BooleanQueryBuilder::mids$ = NULL;
            bool BooleanQueryBuilder::live$ = false;

            jclass BooleanQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/BooleanQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_6566a539] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/xml/QueryBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            BooleanQueryBuilder::BooleanQueryBuilder(const ::org::apache::lucene::queryparser::xml::QueryBuilder & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6566a539, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_BooleanQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BooleanQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_BooleanQueryBuilder_init_(t_BooleanQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_BooleanQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_BooleanQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BooleanQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(BooleanQueryBuilder, t_BooleanQueryBuilder, ::java::lang::Object, BooleanQueryBuilder, t_BooleanQueryBuilder_init_, 0, 0, 0, 0, 0);

            void t_BooleanQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(BooleanQueryBuilder), module, "BooleanQueryBuilder", 0);
            }

            void t_BooleanQueryBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(BooleanQueryBuilder).tp_dict, "class_", make_descriptor(BooleanQueryBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(BooleanQueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_BooleanQueryBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(BooleanQueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_BooleanQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BooleanQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_BooleanQueryBuilder::wrap_Object(BooleanQueryBuilder(((t_BooleanQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_BooleanQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BooleanQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_BooleanQueryBuilder_init_(t_BooleanQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queryparser::xml::QueryBuilder a0((jobject) NULL);
              BooleanQueryBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::xml::QueryBuilder::initializeClass, &a0))
              {
                INT_CALL(object = BooleanQueryBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/gl/GalicianAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {

          ::java::lang::Class *GalicianAnalyzer::class$ = NULL;
          jmethodID *GalicianAnalyzer::mids$ = NULL;
          bool GalicianAnalyzer::live$ = false;
          ::java::lang::String *GalicianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass GalicianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/gl/GalicianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GalicianAnalyzer::GalicianAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          GalicianAnalyzer::GalicianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          GalicianAnalyzer::GalicianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet GalicianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {
          static PyObject *t_GalicianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GalicianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GalicianAnalyzer_init_(t_GalicianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GalicianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_GalicianAnalyzer_get__defaultStopSet(t_GalicianAnalyzer *self, void *data);
          static PyGetSetDef t_GalicianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_GalicianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GalicianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_GalicianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GalicianAnalyzer, t_GalicianAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, GalicianAnalyzer, t_GalicianAnalyzer_init_, 0, 0, t_GalicianAnalyzer__fields_, 0, 0);

          void t_GalicianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(GalicianAnalyzer), module, "GalicianAnalyzer", 0);
          }

          void t_GalicianAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GalicianAnalyzer).tp_dict, "class_", make_descriptor(GalicianAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GalicianAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_GalicianAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GalicianAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(GalicianAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(GalicianAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*GalicianAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_GalicianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GalicianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_GalicianAnalyzer::wrap_Object(GalicianAnalyzer(((t_GalicianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_GalicianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GalicianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GalicianAnalyzer_init_(t_GalicianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                GalicianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = GalicianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                GalicianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = GalicianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                GalicianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = GalicianAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GalicianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::gl::GalicianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_GalicianAnalyzer_get__defaultStopSet(t_GalicianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/UnicodeUtil.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "org/apache/lucene/util/CharsRef.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *UnicodeUtil::class$ = NULL;
        jmethodID *UnicodeUtil::mids$ = NULL;
        bool UnicodeUtil::live$ = false;
        ::org::apache::lucene::util::BytesRef *UnicodeUtil::BIG_TERM = NULL;
        jint UnicodeUtil::UNI_REPLACEMENT_CHAR = (jint) 0;
        jint UnicodeUtil::UNI_SUR_HIGH_END = (jint) 0;
        jint UnicodeUtil::UNI_SUR_HIGH_START = (jint) 0;
        jint UnicodeUtil::UNI_SUR_LOW_END = (jint) 0;
        jint UnicodeUtil::UNI_SUR_LOW_START = (jint) 0;

        jclass UnicodeUtil::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/UnicodeUtil");

            mids$ = new jmethodID[max_mid];
            mids$[mid_UTF16toUTF8_08c4d28c] = env->getStaticMethodID(cls, "UTF16toUTF8", "(Ljava/lang/CharSequence;IILorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_UTF16toUTF8_edea5d3c] = env->getStaticMethodID(cls, "UTF16toUTF8", "([CIILorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_UTF8toUTF16_5b2f2c58] = env->getStaticMethodID(cls, "UTF8toUTF16", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/CharsRef;)V");
            mids$[mid_UTF8toUTF16_3aa183dd] = env->getStaticMethodID(cls, "UTF8toUTF16", "([BIILorg/apache/lucene/util/CharsRef;)V");
            mids$[mid_UTF8toUTF32_079b7c7a] = env->getStaticMethodID(cls, "UTF8toUTF32", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/IntsRef;)V");
            mids$[mid_codePointCount_7bc03ddb] = env->getStaticMethodID(cls, "codePointCount", "(Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_newString_3ade3c03] = env->getStaticMethodID(cls, "newString", "([III)Ljava/lang/String;");
            mids$[mid_toHexString_97a5258f] = env->getStaticMethodID(cls, "toHexString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_validUTF16String_a8afc646] = env->getStaticMethodID(cls, "validUTF16String", "(Ljava/lang/CharSequence;)Z");
            mids$[mid_validUTF16String_ec6430f8] = env->getStaticMethodID(cls, "validUTF16String", "([CI)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            BIG_TERM = new ::org::apache::lucene::util::BytesRef(env->getStaticObjectField(cls, "BIG_TERM", "Lorg/apache/lucene/util/BytesRef;"));
            UNI_REPLACEMENT_CHAR = env->getStaticIntField(cls, "UNI_REPLACEMENT_CHAR");
            UNI_SUR_HIGH_END = env->getStaticIntField(cls, "UNI_SUR_HIGH_END");
            UNI_SUR_HIGH_START = env->getStaticIntField(cls, "UNI_SUR_HIGH_START");
            UNI_SUR_LOW_END = env->getStaticIntField(cls, "UNI_SUR_LOW_END");
            UNI_SUR_LOW_START = env->getStaticIntField(cls, "UNI_SUR_LOW_START");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void UnicodeUtil::UTF16toUTF8(const ::java::lang::CharSequence & a0, jint a1, jint a2, const ::org::apache::lucene::util::BytesRef & a3)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_UTF16toUTF8_08c4d28c], a0.this$, a1, a2, a3.this$);
        }

        void UnicodeUtil::UTF16toUTF8(const JArray< jchar > & a0, jint a1, jint a2, const ::org::apache::lucene::util::BytesRef & a3)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_UTF16toUTF8_edea5d3c], a0.this$, a1, a2, a3.this$);
        }

        void UnicodeUtil::UTF8toUTF16(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::CharsRef & a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_UTF8toUTF16_5b2f2c58], a0.this$, a1.this$);
        }

        void UnicodeUtil::UTF8toUTF16(const JArray< jbyte > & a0, jint a1, jint a2, const ::org::apache::lucene::util::CharsRef & a3)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_UTF8toUTF16_3aa183dd], a0.this$, a1, a2, a3.this$);
        }

        void UnicodeUtil::UTF8toUTF32(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::IntsRef & a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_UTF8toUTF32_079b7c7a], a0.this$, a1.this$);
        }

        jint UnicodeUtil::codePointCount(const ::org::apache::lucene::util::BytesRef & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_codePointCount_7bc03ddb], a0.this$);
        }

        ::java::lang::String UnicodeUtil::newString(const JArray< jint > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_newString_3ade3c03], a0.this$, a1, a2));
        }

        ::java::lang::String UnicodeUtil::toHexString(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toHexString_97a5258f], a0.this$));
        }

        jboolean UnicodeUtil::validUTF16String(const ::java::lang::CharSequence & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_validUTF16String_a8afc646], a0.this$);
        }

        jboolean UnicodeUtil::validUTF16String(const JArray< jchar > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_validUTF16String_ec6430f8], a0.this$, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_UnicodeUtil_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_UnicodeUtil_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_UnicodeUtil_UTF16toUTF8(PyTypeObject *type, PyObject *args);
        static PyObject *t_UnicodeUtil_UTF8toUTF16(PyTypeObject *type, PyObject *args);
        static PyObject *t_UnicodeUtil_UTF8toUTF32(PyTypeObject *type, PyObject *args);
        static PyObject *t_UnicodeUtil_codePointCount(PyTypeObject *type, PyObject *arg);
        static PyObject *t_UnicodeUtil_newString(PyTypeObject *type, PyObject *args);
        static PyObject *t_UnicodeUtil_toHexString(PyTypeObject *type, PyObject *arg);
        static PyObject *t_UnicodeUtil_validUTF16String(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_UnicodeUtil__methods_[] = {
          DECLARE_METHOD(t_UnicodeUtil, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_UnicodeUtil, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_UnicodeUtil, UTF16toUTF8, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_UnicodeUtil, UTF8toUTF16, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_UnicodeUtil, UTF8toUTF32, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_UnicodeUtil, codePointCount, METH_O | METH_CLASS),
          DECLARE_METHOD(t_UnicodeUtil, newString, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_UnicodeUtil, toHexString, METH_O | METH_CLASS),
          DECLARE_METHOD(t_UnicodeUtil, validUTF16String, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(UnicodeUtil, t_UnicodeUtil, ::java::lang::Object, UnicodeUtil, abstract_init, 0, 0, 0, 0, 0);

        void t_UnicodeUtil::install(PyObject *module)
        {
          installType(&PY_TYPE(UnicodeUtil), module, "UnicodeUtil", 0);
        }

        void t_UnicodeUtil::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(UnicodeUtil).tp_dict, "class_", make_descriptor(UnicodeUtil::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(UnicodeUtil).tp_dict, "wrapfn_", make_descriptor(t_UnicodeUtil::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(UnicodeUtil).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(UnicodeUtil::initializeClass);
          PyDict_SetItemString(PY_TYPE(UnicodeUtil).tp_dict, "BIG_TERM", make_descriptor(::org::apache::lucene::util::t_BytesRef::wrap_Object(*UnicodeUtil::BIG_TERM)));
          PyDict_SetItemString(PY_TYPE(UnicodeUtil).tp_dict, "UNI_REPLACEMENT_CHAR", make_descriptor(UnicodeUtil::UNI_REPLACEMENT_CHAR));
          PyDict_SetItemString(PY_TYPE(UnicodeUtil).tp_dict, "UNI_SUR_HIGH_END", make_descriptor(UnicodeUtil::UNI_SUR_HIGH_END));
          PyDict_SetItemString(PY_TYPE(UnicodeUtil).tp_dict, "UNI_SUR_HIGH_START", make_descriptor(UnicodeUtil::UNI_SUR_HIGH_START));
          PyDict_SetItemString(PY_TYPE(UnicodeUtil).tp_dict, "UNI_SUR_LOW_END", make_descriptor(UnicodeUtil::UNI_SUR_LOW_END));
          PyDict_SetItemString(PY_TYPE(UnicodeUtil).tp_dict, "UNI_SUR_LOW_START", make_descriptor(UnicodeUtil::UNI_SUR_LOW_START));
        }

        static PyObject *t_UnicodeUtil_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, UnicodeUtil::initializeClass, 1)))
            return NULL;
          return t_UnicodeUtil::wrap_Object(UnicodeUtil(((t_UnicodeUtil *) arg)->object.this$));
        }
        static PyObject *t_UnicodeUtil_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, UnicodeUtil::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_UnicodeUtil_UTF16toUTF8(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 4:
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              jint a1;
              jint a2;
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);

              if (!parseArgs(args, "OIIk", &::java::lang::PY_TYPE(CharSequence), ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(::org::apache::lucene::util::UnicodeUtil::UTF16toUTF8(a0, a1, a2, a3));
                Py_RETURN_NONE;
              }
            }
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);

              if (!parseArgs(args, "[CIIk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(::org::apache::lucene::util::UnicodeUtil::UTF16toUTF8(a0, a1, a2, a3));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError(type, "UTF16toUTF8", args);
          return NULL;
        }

        static PyObject *t_UnicodeUtil_UTF8toUTF16(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              ::org::apache::lucene::util::CharsRef a1((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::CharsRef::initializeClass, &a0, &a1))
              {
                OBJ_CALL(::org::apache::lucene::util::UnicodeUtil::UTF8toUTF16(a0, a1));
                Py_RETURN_NONE;
              }
            }
            break;
           case 4:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              ::org::apache::lucene::util::CharsRef a3((jobject) NULL);

              if (!parseArgs(args, "[BIIk", ::org::apache::lucene::util::CharsRef::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(::org::apache::lucene::util::UnicodeUtil::UTF8toUTF16(a0, a1, a2, a3));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError(type, "UTF8toUTF16", args);
          return NULL;
        }

        static PyObject *t_UnicodeUtil_UTF8toUTF32(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::util::IntsRef a1((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(::org::apache::lucene::util::UnicodeUtil::UTF8toUTF32(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "UTF8toUTF32", args);
          return NULL;
        }

        static PyObject *t_UnicodeUtil_codePointCount(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::UnicodeUtil::codePointCount(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "codePointCount", arg);
          return NULL;
        }

        static PyObject *t_UnicodeUtil_newString(PyTypeObject *type, PyObject *args)
        {
          JArray< jint > a0((jobject) NULL);
          jint a1;
          jint a2;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "[III", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::UnicodeUtil::newString(a0, a1, a2));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "newString", args);
          return NULL;
        }

        static PyObject *t_UnicodeUtil_toHexString(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::UnicodeUtil::toHexString(a0));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "toHexString", arg);
          return NULL;
        }

        static PyObject *t_UnicodeUtil_validUTF16String(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::UnicodeUtil::validUTF16String(a0));
                Py_RETURN_BOOL(result);
              }
            }
            break;
           case 2:
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jboolean result;

              if (!parseArgs(args, "[CI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::UnicodeUtil::validUTF16String(a0, a1));
                Py_RETURN_BOOL(result);
              }
            }
          }

          PyErr_SetArgsError(type, "validUTF16String", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/IntBlockPool.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/IntBlockPool$Allocator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *IntBlockPool::class$ = NULL;
        jmethodID *IntBlockPool::mids$ = NULL;
        jfieldID *IntBlockPool::fids$ = NULL;
        bool IntBlockPool::live$ = false;
        jint IntBlockPool::INT_BLOCK_MASK = (jint) 0;
        jint IntBlockPool::INT_BLOCK_SHIFT = (jint) 0;
        jint IntBlockPool::INT_BLOCK_SIZE = (jint) 0;

        jclass IntBlockPool::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/IntBlockPool");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_112445b3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/IntBlockPool$Allocator;)V");
            mids$[mid_nextBuffer_54c6a166] = env->getMethodID(cls, "nextBuffer", "()V");
            mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
            mids$[mid_reset_46f2e2c4] = env->getMethodID(cls, "reset", "(ZZ)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_buffer] = env->getFieldID(cls, "buffer", "[I");
            fids$[fid_buffers] = env->getFieldID(cls, "buffers", "[[I");
            fids$[fid_intOffset] = env->getFieldID(cls, "intOffset", "I");
            fids$[fid_intUpto] = env->getFieldID(cls, "intUpto", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            INT_BLOCK_MASK = env->getStaticIntField(cls, "INT_BLOCK_MASK");
            INT_BLOCK_SHIFT = env->getStaticIntField(cls, "INT_BLOCK_SHIFT");
            INT_BLOCK_SIZE = env->getStaticIntField(cls, "INT_BLOCK_SIZE");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IntBlockPool::IntBlockPool() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        IntBlockPool::IntBlockPool(const ::org::apache::lucene::util::IntBlockPool$Allocator & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_112445b3, a0.this$)) {}

        void IntBlockPool::nextBuffer() const
        {
          env->callVoidMethod(this$, mids$[mid_nextBuffer_54c6a166]);
        }

        void IntBlockPool::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
        }

        void IntBlockPool::reset(jboolean a0, jboolean a1) const
        {
          env->callVoidMethod(this$, mids$[mid_reset_46f2e2c4], a0, a1);
        }

        JArray< jint > IntBlockPool::_get_buffer() const
        {
          return JArray< jint >(env->getObjectField(this$, fids$[fid_buffer]));
        }

        void IntBlockPool::_set_buffer(const JArray< jint > & a0) const
        {
          env->setObjectField(this$, fids$[fid_buffer], a0.this$);
        }

        JArray< JArray< jint > > IntBlockPool::_get_buffers() const
        {
          return JArray< JArray< jint > >(env->getObjectField(this$, fids$[fid_buffers]));
        }

        void IntBlockPool::_set_buffers(const JArray< JArray< jint > > & a0) const
        {
          env->setObjectField(this$, fids$[fid_buffers], a0.this$);
        }

        jint IntBlockPool::_get_intOffset() const
        {
          return env->getIntField(this$, fids$[fid_intOffset]);
        }

        void IntBlockPool::_set_intOffset(jint a0) const
        {
          env->setIntField(this$, fids$[fid_intOffset], a0);
        }

        jint IntBlockPool::_get_intUpto() const
        {
          return env->getIntField(this$, fids$[fid_intUpto]);
        }

        void IntBlockPool::_set_intUpto(jint a0) const
        {
          env->setIntField(this$, fids$[fid_intUpto], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/IntBlockPool$SliceReader.h"
#include "org/apache/lucene/util/IntBlockPool$SliceWriter.h"
#include "org/apache/lucene/util/IntBlockPool$DirectAllocator.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_IntBlockPool_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IntBlockPool_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IntBlockPool_init_(t_IntBlockPool *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IntBlockPool_nextBuffer(t_IntBlockPool *self);
        static PyObject *t_IntBlockPool_reset(t_IntBlockPool *self, PyObject *args);
        static PyObject *t_IntBlockPool_get__buffer(t_IntBlockPool *self, void *data);
        static int t_IntBlockPool_set__buffer(t_IntBlockPool *self, PyObject *arg, void *data);
        static PyObject *t_IntBlockPool_get__buffers(t_IntBlockPool *self, void *data);
        static int t_IntBlockPool_set__buffers(t_IntBlockPool *self, PyObject *arg, void *data);
        static PyObject *t_IntBlockPool_get__intOffset(t_IntBlockPool *self, void *data);
        static int t_IntBlockPool_set__intOffset(t_IntBlockPool *self, PyObject *arg, void *data);
        static PyObject *t_IntBlockPool_get__intUpto(t_IntBlockPool *self, void *data);
        static int t_IntBlockPool_set__intUpto(t_IntBlockPool *self, PyObject *arg, void *data);

        static PyGetSetDef t_IntBlockPool__fields_[] = {
          DECLARE_GETSET_FIELD(t_IntBlockPool, buffer),
          DECLARE_GETSET_FIELD(t_IntBlockPool, buffers),
          DECLARE_GETSET_FIELD(t_IntBlockPool, intOffset),
          DECLARE_GETSET_FIELD(t_IntBlockPool, intUpto),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IntBlockPool__methods_[] = {
          DECLARE_METHOD(t_IntBlockPool, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntBlockPool, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntBlockPool, nextBuffer, METH_NOARGS),
          DECLARE_METHOD(t_IntBlockPool, reset, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IntBlockPool, t_IntBlockPool, ::java::lang::Object, IntBlockPool, t_IntBlockPool_init_, 0, 0, t_IntBlockPool__fields_, 0, 0);

        void t_IntBlockPool::install(PyObject *module)
        {
          installType(&PY_TYPE(IntBlockPool), module, "IntBlockPool", 0);
          PyDict_SetItemString(PY_TYPE(IntBlockPool).tp_dict, "SliceReader", make_descriptor(&PY_TYPE(IntBlockPool$SliceReader)));
          PyDict_SetItemString(PY_TYPE(IntBlockPool).tp_dict, "SliceWriter", make_descriptor(&PY_TYPE(IntBlockPool$SliceWriter)));
          PyDict_SetItemString(PY_TYPE(IntBlockPool).tp_dict, "DirectAllocator", make_descriptor(&PY_TYPE(IntBlockPool$DirectAllocator)));
          PyDict_SetItemString(PY_TYPE(IntBlockPool).tp_dict, "Allocator", make_descriptor(&PY_TYPE(IntBlockPool$Allocator)));
        }

        void t_IntBlockPool::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IntBlockPool).tp_dict, "class_", make_descriptor(IntBlockPool::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IntBlockPool).tp_dict, "wrapfn_", make_descriptor(t_IntBlockPool::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IntBlockPool).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(IntBlockPool::initializeClass);
          PyDict_SetItemString(PY_TYPE(IntBlockPool).tp_dict, "INT_BLOCK_MASK", make_descriptor(IntBlockPool::INT_BLOCK_MASK));
          PyDict_SetItemString(PY_TYPE(IntBlockPool).tp_dict, "INT_BLOCK_SHIFT", make_descriptor(IntBlockPool::INT_BLOCK_SHIFT));
          PyDict_SetItemString(PY_TYPE(IntBlockPool).tp_dict, "INT_BLOCK_SIZE", make_descriptor(IntBlockPool::INT_BLOCK_SIZE));
        }

        static PyObject *t_IntBlockPool_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IntBlockPool::initializeClass, 1)))
            return NULL;
          return t_IntBlockPool::wrap_Object(IntBlockPool(((t_IntBlockPool *) arg)->object.this$));
        }
        static PyObject *t_IntBlockPool_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IntBlockPool::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IntBlockPool_init_(t_IntBlockPool *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              IntBlockPool object((jobject) NULL);

              INT_CALL(object = IntBlockPool());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              ::org::apache::lucene::util::IntBlockPool$Allocator a0((jobject) NULL);
              IntBlockPool object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::IntBlockPool$Allocator::initializeClass, &a0))
              {
                INT_CALL(object = IntBlockPool(a0));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IntBlockPool_nextBuffer(t_IntBlockPool *self)
        {
          OBJ_CALL(self->object.nextBuffer());
          Py_RETURN_NONE;
        }

        static PyObject *t_IntBlockPool_reset(t_IntBlockPool *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }
            break;
           case 2:
            {
              jboolean a0;
              jboolean a1;

              if (!parseArgs(args, "ZZ", &a0, &a1))
              {
                OBJ_CALL(self->object.reset(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "reset", args);
          return NULL;
        }

        static PyObject *t_IntBlockPool_get__buffer(t_IntBlockPool *self, void *data)
        {
          JArray< jint > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_buffer());
          return value.wrap();
        }
        static int t_IntBlockPool_set__buffer(t_IntBlockPool *self, PyObject *arg, void *data)
        {
          JArray< jint > value((jobject) NULL);
          if (!parseArg(arg, "[I", &value))
          {
            INT_CALL(self->object._set_buffer(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "buffer", arg);
          return -1;
        }

        static PyObject *t_IntBlockPool_get__buffers(t_IntBlockPool *self, void *data)
        {
          JArray< JArray< jint > > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_buffers());
          return JArray<jobject>(value.this$).wrap(NULL);
        }
        static int t_IntBlockPool_set__buffers(t_IntBlockPool *self, PyObject *arg, void *data)
        {
          JArray< JArray< jint > > value((jobject) NULL);
          if (!parseArg(arg, "[[I", &value))
          {
            INT_CALL(self->object._set_buffers(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "buffers", arg);
          return -1;
        }

        static PyObject *t_IntBlockPool_get__intOffset(t_IntBlockPool *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_intOffset());
          return PyInt_FromLong((long) value);
        }
        static int t_IntBlockPool_set__intOffset(t_IntBlockPool *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_intOffset(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "intOffset", arg);
          return -1;
        }

        static PyObject *t_IntBlockPool_get__intUpto(t_IntBlockPool *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_intUpto());
          return PyInt_FromLong((long) value);
        }
        static int t_IntBlockPool_set__intUpto(t_IntBlockPool *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_intUpto(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "intUpto", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnum.h"
#include "java/util/Comparator.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/TermsEnum$SeekStatus.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/TermState.h"
#include "org/apache/lucene/index/DocsEnum.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace idversion {

          ::java::lang::Class *IDVersionSegmentTermsEnum::class$ = NULL;
          jmethodID *IDVersionSegmentTermsEnum::mids$ = NULL;
          bool IDVersionSegmentTermsEnum::live$ = false;

          jclass IDVersionSegmentTermsEnum::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnum");

              mids$ = new jmethodID[max_mid];
              mids$[mid_docFreq_54c6a179] = env->getMethodID(cls, "docFreq", "()I");
              mids$[mid_docs_e6d4c3ef] = env->getMethodID(cls, "docs", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsEnum;I)Lorg/apache/lucene/index/DocsEnum;");
              mids$[mid_docsAndPositions_b5d9c11b] = env->getMethodID(cls, "docsAndPositions", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsAndPositionsEnum;I)Lorg/apache/lucene/index/DocsAndPositionsEnum;");
              mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
              mids$[mid_getVersion_54c6a17a] = env->getMethodID(cls, "getVersion", "()J");
              mids$[mid_next_4ae19461] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_ord_54c6a17a] = env->getMethodID(cls, "ord", "()J");
              mids$[mid_seekCeil_fa9d72c4] = env->getMethodID(cls, "seekCeil", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum$SeekStatus;");
              mids$[mid_seekExact_7bc03dc8] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;)Z");
              mids$[mid_seekExact_0ee6df2f] = env->getMethodID(cls, "seekExact", "(J)V");
              mids$[mid_seekExact_fe46da51] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/index/TermState;)V");
              mids$[mid_seekExact_9e70a0d1] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;J)Z");
              mids$[mid_term_4ae19461] = env->getMethodID(cls, "term", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_termState_3e41fede] = env->getMethodID(cls, "termState", "()Lorg/apache/lucene/index/TermState;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_totalTermFreq_54c6a17a] = env->getMethodID(cls, "totalTermFreq", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint IDVersionSegmentTermsEnum::docFreq() const
          {
            return env->callIntMethod(this$, mids$[mid_docFreq_54c6a179]);
          }

          ::org::apache::lucene::index::DocsEnum IDVersionSegmentTermsEnum::docs(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::index::DocsEnum & a1, jint a2) const
          {
            return ::org::apache::lucene::index::DocsEnum(env->callObjectMethod(this$, mids$[mid_docs_e6d4c3ef], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::index::DocsAndPositionsEnum IDVersionSegmentTermsEnum::docsAndPositions(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::index::DocsAndPositionsEnum & a1, jint a2) const
          {
            return ::org::apache::lucene::index::DocsAndPositionsEnum(env->callObjectMethod(this$, mids$[mid_docsAndPositions_b5d9c11b], a0.this$, a1.this$, a2));
          }

          ::java::util::Comparator IDVersionSegmentTermsEnum::getComparator() const
          {
            return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
          }

          jlong IDVersionSegmentTermsEnum::getVersion() const
          {
            return env->callLongMethod(this$, mids$[mid_getVersion_54c6a17a]);
          }

          ::org::apache::lucene::util::BytesRef IDVersionSegmentTermsEnum::next() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_4ae19461]));
          }

          jlong IDVersionSegmentTermsEnum::ord() const
          {
            return env->callLongMethod(this$, mids$[mid_ord_54c6a17a]);
          }

          ::org::apache::lucene::index::TermsEnum$SeekStatus IDVersionSegmentTermsEnum::seekCeil(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            return ::org::apache::lucene::index::TermsEnum$SeekStatus(env->callObjectMethod(this$, mids$[mid_seekCeil_fa9d72c4], a0.this$));
          }

          jboolean IDVersionSegmentTermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_seekExact_7bc03dc8], a0.this$);
          }

          void IDVersionSegmentTermsEnum::seekExact(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_seekExact_0ee6df2f], a0);
          }

          void IDVersionSegmentTermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::index::TermState & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_seekExact_fe46da51], a0.this$, a1.this$);
          }

          jboolean IDVersionSegmentTermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0, jlong a1) const
          {
            return env->callBooleanMethod(this$, mids$[mid_seekExact_9e70a0d1], a0.this$, a1);
          }

          ::org::apache::lucene::util::BytesRef IDVersionSegmentTermsEnum::term() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_term_4ae19461]));
          }

          ::org::apache::lucene::index::TermState IDVersionSegmentTermsEnum::termState() const
          {
            return ::org::apache::lucene::index::TermState(env->callObjectMethod(this$, mids$[mid_termState_3e41fede]));
          }

          ::java::lang::String IDVersionSegmentTermsEnum::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          jlong IDVersionSegmentTermsEnum::totalTermFreq() const
          {
            return env->callLongMethod(this$, mids$[mid_totalTermFreq_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace idversion {
          static PyObject *t_IDVersionSegmentTermsEnum_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IDVersionSegmentTermsEnum_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IDVersionSegmentTermsEnum_docFreq(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_docs(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_docsAndPositions(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_getComparator(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_getVersion(t_IDVersionSegmentTermsEnum *self);
          static PyObject *t_IDVersionSegmentTermsEnum_next(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_ord(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_seekCeil(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_seekExact(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_term(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_termState(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_toString(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_totalTermFreq(t_IDVersionSegmentTermsEnum *self, PyObject *args);
          static PyObject *t_IDVersionSegmentTermsEnum_get__comparator(t_IDVersionSegmentTermsEnum *self, void *data);
          static PyObject *t_IDVersionSegmentTermsEnum_get__version(t_IDVersionSegmentTermsEnum *self, void *data);
          static PyGetSetDef t_IDVersionSegmentTermsEnum__fields_[] = {
            DECLARE_GET_FIELD(t_IDVersionSegmentTermsEnum, comparator),
            DECLARE_GET_FIELD(t_IDVersionSegmentTermsEnum, version),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_IDVersionSegmentTermsEnum__methods_[] = {
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, docFreq, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, docs, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, docsAndPositions, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, getComparator, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, getVersion, METH_NOARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, next, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, ord, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, seekCeil, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, seekExact, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, term, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, termState, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, toString, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionSegmentTermsEnum, totalTermFreq, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IDVersionSegmentTermsEnum, t_IDVersionSegmentTermsEnum, ::org::apache::lucene::index::TermsEnum, IDVersionSegmentTermsEnum, abstract_init, PyObject_SelfIter, ((PyObject *(*)(t_IDVersionSegmentTermsEnum *)) get_next< t_IDVersionSegmentTermsEnum,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >), t_IDVersionSegmentTermsEnum__fields_, 0, 0);

          void t_IDVersionSegmentTermsEnum::install(PyObject *module)
          {
            installType(&PY_TYPE(IDVersionSegmentTermsEnum), module, "IDVersionSegmentTermsEnum", 0);
          }

          void t_IDVersionSegmentTermsEnum::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IDVersionSegmentTermsEnum).tp_dict, "class_", make_descriptor(IDVersionSegmentTermsEnum::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IDVersionSegmentTermsEnum).tp_dict, "wrapfn_", make_descriptor(t_IDVersionSegmentTermsEnum::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IDVersionSegmentTermsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IDVersionSegmentTermsEnum_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IDVersionSegmentTermsEnum::initializeClass, 1)))
              return NULL;
            return t_IDVersionSegmentTermsEnum::wrap_Object(IDVersionSegmentTermsEnum(((t_IDVersionSegmentTermsEnum *) arg)->object.this$));
          }
          static PyObject *t_IDVersionSegmentTermsEnum_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IDVersionSegmentTermsEnum::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_IDVersionSegmentTermsEnum_docFreq(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.docFreq());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "docFreq", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_docs(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            ::org::apache::lucene::util::Bits a0((jobject) NULL);
            ::org::apache::lucene::index::DocsEnum a1((jobject) NULL);
            jint a2;
            ::org::apache::lucene::index::DocsEnum result((jobject) NULL);

            if (!parseArgs(args, "kkI", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsEnum::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.docs(a0, a1, a2));
              return ::org::apache::lucene::index::t_DocsEnum::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "docs", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_docsAndPositions(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            ::org::apache::lucene::util::Bits a0((jobject) NULL);
            ::org::apache::lucene::index::DocsAndPositionsEnum a1((jobject) NULL);
            jint a2;
            ::org::apache::lucene::index::DocsAndPositionsEnum result((jobject) NULL);

            if (!parseArgs(args, "kkI", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsAndPositionsEnum::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.docsAndPositions(a0, a1, a2));
              return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "docsAndPositions", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_getComparator(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            ::java::util::Comparator result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getComparator());
              return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
            }

            return callSuper(&PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "getComparator", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_getVersion(t_IDVersionSegmentTermsEnum *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getVersion());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_next(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.next());
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "next", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_ord(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ord());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "ord", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_seekCeil(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::index::TermsEnum$SeekStatus result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.seekCeil(a0));
              return ::org::apache::lucene::index::t_TermsEnum$SeekStatus::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "seekCeil", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_seekExact(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.seekExact(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              {
                jlong a0;

                if (!parseArgs(args, "J", &a0))
                {
                  OBJ_CALL(self->object.seekExact(a0));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
                ::org::apache::lucene::index::TermState a1((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::index::TermState::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(self->object.seekExact(a0, a1));
                  Py_RETURN_NONE;
                }
              }
              {
                ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
                jlong a1;
                jboolean result;

                if (!parseArgs(args, "kJ", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.seekExact(a0, a1));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            return callSuper(&PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "seekExact", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_term(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.term());
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "term", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_termState(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            ::org::apache::lucene::index::TermState result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.termState());
              return ::org::apache::lucene::index::t_TermState::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "termState", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_toString(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_totalTermFreq(t_IDVersionSegmentTermsEnum *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.totalTermFreq());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(IDVersionSegmentTermsEnum), (PyObject *) self, "totalTermFreq", args, 2);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_get__comparator(t_IDVersionSegmentTermsEnum *self, void *data)
          {
            ::java::util::Comparator value((jobject) NULL);
            OBJ_CALL(value = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(value);
          }

          static PyObject *t_IDVersionSegmentTermsEnum_get__version(t_IDVersionSegmentTermsEnum *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getVersion());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/CommonQueryParserConfiguration.h"
#include "java/util/TimeZone.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/MultiTermQuery$RewriteMethod.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/document/DateTools$Resolution.h"
#include "java/util/Locale.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {

            ::java::lang::Class *CommonQueryParserConfiguration::class$ = NULL;
            jmethodID *CommonQueryParserConfiguration::mids$ = NULL;
            bool CommonQueryParserConfiguration::live$ = false;

            jclass CommonQueryParserConfiguration::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/CommonQueryParserConfiguration");

                mids$ = new jmethodID[max_mid];
                mids$[mid_getAllowLeadingWildcard_54c6a16a] = env->getMethodID(cls, "getAllowLeadingWildcard", "()Z");
                mids$[mid_getAnalyzer_347f60a9] = env->getMethodID(cls, "getAnalyzer", "()Lorg/apache/lucene/analysis/Analyzer;");
                mids$[mid_getEnablePositionIncrements_54c6a16a] = env->getMethodID(cls, "getEnablePositionIncrements", "()Z");
                mids$[mid_getFuzzyMinSim_54c6a176] = env->getMethodID(cls, "getFuzzyMinSim", "()F");
                mids$[mid_getFuzzyPrefixLength_54c6a179] = env->getMethodID(cls, "getFuzzyPrefixLength", "()I");
                mids$[mid_getLocale_8bb22876] = env->getMethodID(cls, "getLocale", "()Ljava/util/Locale;");
                mids$[mid_getLowercaseExpandedTerms_54c6a16a] = env->getMethodID(cls, "getLowercaseExpandedTerms", "()Z");
                mids$[mid_getMultiTermRewriteMethod_8919154b] = env->getMethodID(cls, "getMultiTermRewriteMethod", "()Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;");
                mids$[mid_getPhraseSlop_54c6a179] = env->getMethodID(cls, "getPhraseSlop", "()I");
                mids$[mid_getTimeZone_6cce40e5] = env->getMethodID(cls, "getTimeZone", "()Ljava/util/TimeZone;");
                mids$[mid_setAllowLeadingWildcard_bb0c767f] = env->getMethodID(cls, "setAllowLeadingWildcard", "(Z)V");
                mids$[mid_setDateResolution_285c1498] = env->getMethodID(cls, "setDateResolution", "(Lorg/apache/lucene/document/DateTools$Resolution;)V");
                mids$[mid_setEnablePositionIncrements_bb0c767f] = env->getMethodID(cls, "setEnablePositionIncrements", "(Z)V");
                mids$[mid_setFuzzyMinSim_06298cab] = env->getMethodID(cls, "setFuzzyMinSim", "(F)V");
                mids$[mid_setFuzzyPrefixLength_39c7bd3c] = env->getMethodID(cls, "setFuzzyPrefixLength", "(I)V");
                mids$[mid_setLocale_56b0e4b3] = env->getMethodID(cls, "setLocale", "(Ljava/util/Locale;)V");
                mids$[mid_setLowercaseExpandedTerms_bb0c767f] = env->getMethodID(cls, "setLowercaseExpandedTerms", "(Z)V");
                mids$[mid_setMultiTermRewriteMethod_c3c3909e] = env->getMethodID(cls, "setMultiTermRewriteMethod", "(Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;)V");
                mids$[mid_setPhraseSlop_39c7bd3c] = env->getMethodID(cls, "setPhraseSlop", "(I)V");
                mids$[mid_setTimeZone_f7b32d20] = env->getMethodID(cls, "setTimeZone", "(Ljava/util/TimeZone;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            jboolean CommonQueryParserConfiguration::getAllowLeadingWildcard() const
            {
              return env->callBooleanMethod(this$, mids$[mid_getAllowLeadingWildcard_54c6a16a]);
            }

            ::org::apache::lucene::analysis::Analyzer CommonQueryParserConfiguration::getAnalyzer() const
            {
              return ::org::apache::lucene::analysis::Analyzer(env->callObjectMethod(this$, mids$[mid_getAnalyzer_347f60a9]));
            }

            jboolean CommonQueryParserConfiguration::getEnablePositionIncrements() const
            {
              return env->callBooleanMethod(this$, mids$[mid_getEnablePositionIncrements_54c6a16a]);
            }

            jfloat CommonQueryParserConfiguration::getFuzzyMinSim() const
            {
              return env->callFloatMethod(this$, mids$[mid_getFuzzyMinSim_54c6a176]);
            }

            jint CommonQueryParserConfiguration::getFuzzyPrefixLength() const
            {
              return env->callIntMethod(this$, mids$[mid_getFuzzyPrefixLength_54c6a179]);
            }

            ::java::util::Locale CommonQueryParserConfiguration::getLocale() const
            {
              return ::java::util::Locale(env->callObjectMethod(this$, mids$[mid_getLocale_8bb22876]));
            }

            jboolean CommonQueryParserConfiguration::getLowercaseExpandedTerms() const
            {
              return env->callBooleanMethod(this$, mids$[mid_getLowercaseExpandedTerms_54c6a16a]);
            }

            ::org::apache::lucene::search::MultiTermQuery$RewriteMethod CommonQueryParserConfiguration::getMultiTermRewriteMethod() const
            {
              return ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->callObjectMethod(this$, mids$[mid_getMultiTermRewriteMethod_8919154b]));
            }

            jint CommonQueryParserConfiguration::getPhraseSlop() const
            {
              return env->callIntMethod(this$, mids$[mid_getPhraseSlop_54c6a179]);
            }

            ::java::util::TimeZone CommonQueryParserConfiguration::getTimeZone() const
            {
              return ::java::util::TimeZone(env->callObjectMethod(this$, mids$[mid_getTimeZone_6cce40e5]));
            }

            void CommonQueryParserConfiguration::setAllowLeadingWildcard(jboolean a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setAllowLeadingWildcard_bb0c767f], a0);
            }

            void CommonQueryParserConfiguration::setDateResolution(const ::org::apache::lucene::document::DateTools$Resolution & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setDateResolution_285c1498], a0.this$);
            }

            void CommonQueryParserConfiguration::setEnablePositionIncrements(jboolean a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setEnablePositionIncrements_bb0c767f], a0);
            }

            void CommonQueryParserConfiguration::setFuzzyMinSim(jfloat a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setFuzzyMinSim_06298cab], a0);
            }

            void CommonQueryParserConfiguration::setFuzzyPrefixLength(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setFuzzyPrefixLength_39c7bd3c], a0);
            }

            void CommonQueryParserConfiguration::setLocale(const ::java::util::Locale & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setLocale_56b0e4b3], a0.this$);
            }

            void CommonQueryParserConfiguration::setLowercaseExpandedTerms(jboolean a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setLowercaseExpandedTerms_bb0c767f], a0);
            }

            void CommonQueryParserConfiguration::setMultiTermRewriteMethod(const ::org::apache::lucene::search::MultiTermQuery$RewriteMethod & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setMultiTermRewriteMethod_c3c3909e], a0.this$);
            }

            void CommonQueryParserConfiguration::setPhraseSlop(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setPhraseSlop_39c7bd3c], a0);
            }

            void CommonQueryParserConfiguration::setTimeZone(const ::java::util::TimeZone & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setTimeZone_f7b32d20], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            static PyObject *t_CommonQueryParserConfiguration_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_getAllowLeadingWildcard(t_CommonQueryParserConfiguration *self);
            static PyObject *t_CommonQueryParserConfiguration_getAnalyzer(t_CommonQueryParserConfiguration *self);
            static PyObject *t_CommonQueryParserConfiguration_getEnablePositionIncrements(t_CommonQueryParserConfiguration *self);
            static PyObject *t_CommonQueryParserConfiguration_getFuzzyMinSim(t_CommonQueryParserConfiguration *self);
            static PyObject *t_CommonQueryParserConfiguration_getFuzzyPrefixLength(t_CommonQueryParserConfiguration *self);
            static PyObject *t_CommonQueryParserConfiguration_getLocale(t_CommonQueryParserConfiguration *self);
            static PyObject *t_CommonQueryParserConfiguration_getLowercaseExpandedTerms(t_CommonQueryParserConfiguration *self);
            static PyObject *t_CommonQueryParserConfiguration_getMultiTermRewriteMethod(t_CommonQueryParserConfiguration *self);
            static PyObject *t_CommonQueryParserConfiguration_getPhraseSlop(t_CommonQueryParserConfiguration *self);
            static PyObject *t_CommonQueryParserConfiguration_getTimeZone(t_CommonQueryParserConfiguration *self);
            static PyObject *t_CommonQueryParserConfiguration_setAllowLeadingWildcard(t_CommonQueryParserConfiguration *self, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_setDateResolution(t_CommonQueryParserConfiguration *self, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_setEnablePositionIncrements(t_CommonQueryParserConfiguration *self, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_setFuzzyMinSim(t_CommonQueryParserConfiguration *self, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_setFuzzyPrefixLength(t_CommonQueryParserConfiguration *self, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_setLocale(t_CommonQueryParserConfiguration *self, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_setLowercaseExpandedTerms(t_CommonQueryParserConfiguration *self, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_setMultiTermRewriteMethod(t_CommonQueryParserConfiguration *self, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_setPhraseSlop(t_CommonQueryParserConfiguration *self, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_setTimeZone(t_CommonQueryParserConfiguration *self, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_get__allowLeadingWildcard(t_CommonQueryParserConfiguration *self, void *data);
            static int t_CommonQueryParserConfiguration_set__allowLeadingWildcard(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data);
            static PyObject *t_CommonQueryParserConfiguration_get__analyzer(t_CommonQueryParserConfiguration *self, void *data);
            static int t_CommonQueryParserConfiguration_set__dateResolution(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data);
            static PyObject *t_CommonQueryParserConfiguration_get__enablePositionIncrements(t_CommonQueryParserConfiguration *self, void *data);
            static int t_CommonQueryParserConfiguration_set__enablePositionIncrements(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data);
            static PyObject *t_CommonQueryParserConfiguration_get__fuzzyMinSim(t_CommonQueryParserConfiguration *self, void *data);
            static int t_CommonQueryParserConfiguration_set__fuzzyMinSim(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data);
            static PyObject *t_CommonQueryParserConfiguration_get__fuzzyPrefixLength(t_CommonQueryParserConfiguration *self, void *data);
            static int t_CommonQueryParserConfiguration_set__fuzzyPrefixLength(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data);
            static PyObject *t_CommonQueryParserConfiguration_get__locale(t_CommonQueryParserConfiguration *self, void *data);
            static int t_CommonQueryParserConfiguration_set__locale(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data);
            static PyObject *t_CommonQueryParserConfiguration_get__lowercaseExpandedTerms(t_CommonQueryParserConfiguration *self, void *data);
            static int t_CommonQueryParserConfiguration_set__lowercaseExpandedTerms(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data);
            static PyObject *t_CommonQueryParserConfiguration_get__multiTermRewriteMethod(t_CommonQueryParserConfiguration *self, void *data);
            static int t_CommonQueryParserConfiguration_set__multiTermRewriteMethod(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data);
            static PyObject *t_CommonQueryParserConfiguration_get__phraseSlop(t_CommonQueryParserConfiguration *self, void *data);
            static int t_CommonQueryParserConfiguration_set__phraseSlop(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data);
            static PyObject *t_CommonQueryParserConfiguration_get__timeZone(t_CommonQueryParserConfiguration *self, void *data);
            static int t_CommonQueryParserConfiguration_set__timeZone(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data);
            static PyGetSetDef t_CommonQueryParserConfiguration__fields_[] = {
              DECLARE_GETSET_FIELD(t_CommonQueryParserConfiguration, allowLeadingWildcard),
              DECLARE_GET_FIELD(t_CommonQueryParserConfiguration, analyzer),
              DECLARE_SET_FIELD(t_CommonQueryParserConfiguration, dateResolution),
              DECLARE_GETSET_FIELD(t_CommonQueryParserConfiguration, enablePositionIncrements),
              DECLARE_GETSET_FIELD(t_CommonQueryParserConfiguration, fuzzyMinSim),
              DECLARE_GETSET_FIELD(t_CommonQueryParserConfiguration, fuzzyPrefixLength),
              DECLARE_GETSET_FIELD(t_CommonQueryParserConfiguration, locale),
              DECLARE_GETSET_FIELD(t_CommonQueryParserConfiguration, lowercaseExpandedTerms),
              DECLARE_GETSET_FIELD(t_CommonQueryParserConfiguration, multiTermRewriteMethod),
              DECLARE_GETSET_FIELD(t_CommonQueryParserConfiguration, phraseSlop),
              DECLARE_GETSET_FIELD(t_CommonQueryParserConfiguration, timeZone),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_CommonQueryParserConfiguration__methods_[] = {
              DECLARE_METHOD(t_CommonQueryParserConfiguration, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, getAllowLeadingWildcard, METH_NOARGS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, getAnalyzer, METH_NOARGS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, getEnablePositionIncrements, METH_NOARGS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, getFuzzyMinSim, METH_NOARGS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, getFuzzyPrefixLength, METH_NOARGS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, getLocale, METH_NOARGS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, getLowercaseExpandedTerms, METH_NOARGS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, getMultiTermRewriteMethod, METH_NOARGS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, getPhraseSlop, METH_NOARGS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, getTimeZone, METH_NOARGS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, setAllowLeadingWildcard, METH_O),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, setDateResolution, METH_O),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, setEnablePositionIncrements, METH_O),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, setFuzzyMinSim, METH_O),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, setFuzzyPrefixLength, METH_O),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, setLocale, METH_O),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, setLowercaseExpandedTerms, METH_O),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, setMultiTermRewriteMethod, METH_O),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, setPhraseSlop, METH_O),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, setTimeZone, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(CommonQueryParserConfiguration, t_CommonQueryParserConfiguration, ::java::lang::Object, CommonQueryParserConfiguration, abstract_init, 0, 0, t_CommonQueryParserConfiguration__fields_, 0, 0);

            void t_CommonQueryParserConfiguration::install(PyObject *module)
            {
              installType(&PY_TYPE(CommonQueryParserConfiguration), module, "CommonQueryParserConfiguration", 0);
            }

            void t_CommonQueryParserConfiguration::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(CommonQueryParserConfiguration).tp_dict, "class_", make_descriptor(CommonQueryParserConfiguration::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(CommonQueryParserConfiguration).tp_dict, "wrapfn_", make_descriptor(t_CommonQueryParserConfiguration::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(CommonQueryParserConfiguration).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_CommonQueryParserConfiguration_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, CommonQueryParserConfiguration::initializeClass, 1)))
                return NULL;
              return t_CommonQueryParserConfiguration::wrap_Object(CommonQueryParserConfiguration(((t_CommonQueryParserConfiguration *) arg)->object.this$));
            }
            static PyObject *t_CommonQueryParserConfiguration_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, CommonQueryParserConfiguration::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_CommonQueryParserConfiguration_getAllowLeadingWildcard(t_CommonQueryParserConfiguration *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.getAllowLeadingWildcard());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_CommonQueryParserConfiguration_getAnalyzer(t_CommonQueryParserConfiguration *self)
            {
              ::org::apache::lucene::analysis::Analyzer result((jobject) NULL);
              OBJ_CALL(result = self->object.getAnalyzer());
              return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(result);
            }

            static PyObject *t_CommonQueryParserConfiguration_getEnablePositionIncrements(t_CommonQueryParserConfiguration *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.getEnablePositionIncrements());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_CommonQueryParserConfiguration_getFuzzyMinSim(t_CommonQueryParserConfiguration *self)
            {
              jfloat result;
              OBJ_CALL(result = self->object.getFuzzyMinSim());
              return PyFloat_FromDouble((double) result);
            }

            static PyObject *t_CommonQueryParserConfiguration_getFuzzyPrefixLength(t_CommonQueryParserConfiguration *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getFuzzyPrefixLength());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_CommonQueryParserConfiguration_getLocale(t_CommonQueryParserConfiguration *self)
            {
              ::java::util::Locale result((jobject) NULL);
              OBJ_CALL(result = self->object.getLocale());
              return ::java::util::t_Locale::wrap_Object(result);
            }

            static PyObject *t_CommonQueryParserConfiguration_getLowercaseExpandedTerms(t_CommonQueryParserConfiguration *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.getLowercaseExpandedTerms());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_CommonQueryParserConfiguration_getMultiTermRewriteMethod(t_CommonQueryParserConfiguration *self)
            {
              ::org::apache::lucene::search::MultiTermQuery$RewriteMethod result((jobject) NULL);
              OBJ_CALL(result = self->object.getMultiTermRewriteMethod());
              return ::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(result);
            }

            static PyObject *t_CommonQueryParserConfiguration_getPhraseSlop(t_CommonQueryParserConfiguration *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getPhraseSlop());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_CommonQueryParserConfiguration_getTimeZone(t_CommonQueryParserConfiguration *self)
            {
              ::java::util::TimeZone result((jobject) NULL);
              OBJ_CALL(result = self->object.getTimeZone());
              return ::java::util::t_TimeZone::wrap_Object(result);
            }

            static PyObject *t_CommonQueryParserConfiguration_setAllowLeadingWildcard(t_CommonQueryParserConfiguration *self, PyObject *arg)
            {
              jboolean a0;

              if (!parseArg(arg, "Z", &a0))
              {
                OBJ_CALL(self->object.setAllowLeadingWildcard(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setAllowLeadingWildcard", arg);
              return NULL;
            }

            static PyObject *t_CommonQueryParserConfiguration_setDateResolution(t_CommonQueryParserConfiguration *self, PyObject *arg)
            {
              ::org::apache::lucene::document::DateTools$Resolution a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArg(arg, "K", ::org::apache::lucene::document::DateTools$Resolution::initializeClass, &a0, &p0, ::org::apache::lucene::document::t_DateTools$Resolution::parameters_))
              {
                OBJ_CALL(self->object.setDateResolution(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setDateResolution", arg);
              return NULL;
            }

            static PyObject *t_CommonQueryParserConfiguration_setEnablePositionIncrements(t_CommonQueryParserConfiguration *self, PyObject *arg)
            {
              jboolean a0;

              if (!parseArg(arg, "Z", &a0))
              {
                OBJ_CALL(self->object.setEnablePositionIncrements(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setEnablePositionIncrements", arg);
              return NULL;
            }

            static PyObject *t_CommonQueryParserConfiguration_setFuzzyMinSim(t_CommonQueryParserConfiguration *self, PyObject *arg)
            {
              jfloat a0;

              if (!parseArg(arg, "F", &a0))
              {
                OBJ_CALL(self->object.setFuzzyMinSim(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setFuzzyMinSim", arg);
              return NULL;
            }

            static PyObject *t_CommonQueryParserConfiguration_setFuzzyPrefixLength(t_CommonQueryParserConfiguration *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setFuzzyPrefixLength(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setFuzzyPrefixLength", arg);
              return NULL;
            }

            static PyObject *t_CommonQueryParserConfiguration_setLocale(t_CommonQueryParserConfiguration *self, PyObject *arg)
            {
              ::java::util::Locale a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::util::Locale::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setLocale(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setLocale", arg);
              return NULL;
            }

            static PyObject *t_CommonQueryParserConfiguration_setLowercaseExpandedTerms(t_CommonQueryParserConfiguration *self, PyObject *arg)
            {
              jboolean a0;

              if (!parseArg(arg, "Z", &a0))
              {
                OBJ_CALL(self->object.setLowercaseExpandedTerms(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setLowercaseExpandedTerms", arg);
              return NULL;
            }

            static PyObject *t_CommonQueryParserConfiguration_setMultiTermRewriteMethod(t_CommonQueryParserConfiguration *self, PyObject *arg)
            {
              ::org::apache::lucene::search::MultiTermQuery$RewriteMethod a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::search::MultiTermQuery$RewriteMethod::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setMultiTermRewriteMethod(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setMultiTermRewriteMethod", arg);
              return NULL;
            }

            static PyObject *t_CommonQueryParserConfiguration_setPhraseSlop(t_CommonQueryParserConfiguration *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setPhraseSlop(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setPhraseSlop", arg);
              return NULL;
            }

            static PyObject *t_CommonQueryParserConfiguration_setTimeZone(t_CommonQueryParserConfiguration *self, PyObject *arg)
            {
              ::java::util::TimeZone a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::util::TimeZone::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setTimeZone(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setTimeZone", arg);
              return NULL;
            }

            static PyObject *t_CommonQueryParserConfiguration_get__allowLeadingWildcard(t_CommonQueryParserConfiguration *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.getAllowLeadingWildcard());
              Py_RETURN_BOOL(value);
            }
            static int t_CommonQueryParserConfiguration_set__allowLeadingWildcard(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data)
            {
              {
                jboolean value;
                if (!parseArg(arg, "Z", &value))
                {
                  INT_CALL(self->object.setAllowLeadingWildcard(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "allowLeadingWildcard", arg);
              return -1;
            }

            static PyObject *t_CommonQueryParserConfiguration_get__analyzer(t_CommonQueryParserConfiguration *self, void *data)
            {
              ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
              OBJ_CALL(value = self->object.getAnalyzer());
              return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(value);
            }

            static int t_CommonQueryParserConfiguration_set__dateResolution(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::document::DateTools$Resolution value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::document::DateTools$Resolution::initializeClass, &value))
                {
                  INT_CALL(self->object.setDateResolution(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "dateResolution", arg);
              return -1;
            }

            static PyObject *t_CommonQueryParserConfiguration_get__enablePositionIncrements(t_CommonQueryParserConfiguration *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.getEnablePositionIncrements());
              Py_RETURN_BOOL(value);
            }
            static int t_CommonQueryParserConfiguration_set__enablePositionIncrements(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data)
            {
              {
                jboolean value;
                if (!parseArg(arg, "Z", &value))
                {
                  INT_CALL(self->object.setEnablePositionIncrements(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "enablePositionIncrements", arg);
              return -1;
            }

            static PyObject *t_CommonQueryParserConfiguration_get__fuzzyMinSim(t_CommonQueryParserConfiguration *self, void *data)
            {
              jfloat value;
              OBJ_CALL(value = self->object.getFuzzyMinSim());
              return PyFloat_FromDouble((double) value);
            }
            static int t_CommonQueryParserConfiguration_set__fuzzyMinSim(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data)
            {
              {
                jfloat value;
                if (!parseArg(arg, "F", &value))
                {
                  INT_CALL(self->object.setFuzzyMinSim(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "fuzzyMinSim", arg);
              return -1;
            }

            static PyObject *t_CommonQueryParserConfiguration_get__fuzzyPrefixLength(t_CommonQueryParserConfiguration *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getFuzzyPrefixLength());
              return PyInt_FromLong((long) value);
            }
            static int t_CommonQueryParserConfiguration_set__fuzzyPrefixLength(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setFuzzyPrefixLength(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "fuzzyPrefixLength", arg);
              return -1;
            }

            static PyObject *t_CommonQueryParserConfiguration_get__locale(t_CommonQueryParserConfiguration *self, void *data)
            {
              ::java::util::Locale value((jobject) NULL);
              OBJ_CALL(value = self->object.getLocale());
              return ::java::util::t_Locale::wrap_Object(value);
            }
            static int t_CommonQueryParserConfiguration_set__locale(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data)
            {
              {
                ::java::util::Locale value((jobject) NULL);
                if (!parseArg(arg, "k", ::java::util::Locale::initializeClass, &value))
                {
                  INT_CALL(self->object.setLocale(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "locale", arg);
              return -1;
            }

            static PyObject *t_CommonQueryParserConfiguration_get__lowercaseExpandedTerms(t_CommonQueryParserConfiguration *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.getLowercaseExpandedTerms());
              Py_RETURN_BOOL(value);
            }
            static int t_CommonQueryParserConfiguration_set__lowercaseExpandedTerms(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data)
            {
              {
                jboolean value;
                if (!parseArg(arg, "Z", &value))
                {
                  INT_CALL(self->object.setLowercaseExpandedTerms(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "lowercaseExpandedTerms", arg);
              return -1;
            }

            static PyObject *t_CommonQueryParserConfiguration_get__multiTermRewriteMethod(t_CommonQueryParserConfiguration *self, void *data)
            {
              ::org::apache::lucene::search::MultiTermQuery$RewriteMethod value((jobject) NULL);
              OBJ_CALL(value = self->object.getMultiTermRewriteMethod());
              return ::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(value);
            }
            static int t_CommonQueryParserConfiguration_set__multiTermRewriteMethod(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::search::MultiTermQuery$RewriteMethod value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::search::MultiTermQuery$RewriteMethod::initializeClass, &value))
                {
                  INT_CALL(self->object.setMultiTermRewriteMethod(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "multiTermRewriteMethod", arg);
              return -1;
            }

            static PyObject *t_CommonQueryParserConfiguration_get__phraseSlop(t_CommonQueryParserConfiguration *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getPhraseSlop());
              return PyInt_FromLong((long) value);
            }
            static int t_CommonQueryParserConfiguration_set__phraseSlop(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setPhraseSlop(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "phraseSlop", arg);
              return -1;
            }

            static PyObject *t_CommonQueryParserConfiguration_get__timeZone(t_CommonQueryParserConfiguration *self, void *data)
            {
              ::java::util::TimeZone value((jobject) NULL);
              OBJ_CALL(value = self->object.getTimeZone());
              return ::java::util::t_TimeZone::wrap_Object(value);
            }
            static int t_CommonQueryParserConfiguration_set__timeZone(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data)
            {
              {
                ::java::util::TimeZone value((jobject) NULL);
                if (!parseArg(arg, "k", ::java::util::TimeZone::initializeClass, &value))
                {
                  INT_CALL(self->object.setTimeZone(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "timeZone", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FilterAtomicReader$FilterTermsEnum.h"
#include "java/util/Comparator.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/DocsEnum.h"
#include "org/apache/lucene/index/TermsEnum$SeekStatus.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FilterAtomicReader$FilterTermsEnum::class$ = NULL;
        jmethodID *FilterAtomicReader$FilterTermsEnum::mids$ = NULL;
        bool FilterAtomicReader$FilterTermsEnum::live$ = false;

        jclass FilterAtomicReader$FilterTermsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FilterAtomicReader$FilterTermsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_0f660bfe] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/TermsEnum;)V");
            mids$[mid_attributes_f901022b] = env->getMethodID(cls, "attributes", "()Lorg/apache/lucene/util/AttributeSource;");
            mids$[mid_docFreq_54c6a179] = env->getMethodID(cls, "docFreq", "()I");
            mids$[mid_docs_e6d4c3ef] = env->getMethodID(cls, "docs", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsEnum;I)Lorg/apache/lucene/index/DocsEnum;");
            mids$[mid_docsAndPositions_b5d9c11b] = env->getMethodID(cls, "docsAndPositions", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsAndPositionsEnum;I)Lorg/apache/lucene/index/DocsAndPositionsEnum;");
            mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
            mids$[mid_next_4ae19461] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_ord_54c6a17a] = env->getMethodID(cls, "ord", "()J");
            mids$[mid_seekCeil_fa9d72c4] = env->getMethodID(cls, "seekCeil", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum$SeekStatus;");
            mids$[mid_seekExact_0ee6df2f] = env->getMethodID(cls, "seekExact", "(J)V");
            mids$[mid_term_4ae19461] = env->getMethodID(cls, "term", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_totalTermFreq_54c6a17a] = env->getMethodID(cls, "totalTermFreq", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterAtomicReader$FilterTermsEnum::FilterAtomicReader$FilterTermsEnum(const ::org::apache::lucene::index::TermsEnum & a0) : ::org::apache::lucene::index::TermsEnum(env->newObject(initializeClass, &mids$, mid_init$_0f660bfe, a0.this$)) {}

        ::org::apache::lucene::util::AttributeSource FilterAtomicReader$FilterTermsEnum::attributes() const
        {
          return ::org::apache::lucene::util::AttributeSource(env->callObjectMethod(this$, mids$[mid_attributes_f901022b]));
        }

        jint FilterAtomicReader$FilterTermsEnum::docFreq() const
        {
          return env->callIntMethod(this$, mids$[mid_docFreq_54c6a179]);
        }

        ::org::apache::lucene::index::DocsEnum FilterAtomicReader$FilterTermsEnum::docs(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::index::DocsEnum & a1, jint a2) const
        {
          return ::org::apache::lucene::index::DocsEnum(env->callObjectMethod(this$, mids$[mid_docs_e6d4c3ef], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::index::DocsAndPositionsEnum FilterAtomicReader$FilterTermsEnum::docsAndPositions(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::index::DocsAndPositionsEnum & a1, jint a2) const
        {
          return ::org::apache::lucene::index::DocsAndPositionsEnum(env->callObjectMethod(this$, mids$[mid_docsAndPositions_b5d9c11b], a0.this$, a1.this$, a2));
        }

        ::java::util::Comparator FilterAtomicReader$FilterTermsEnum::getComparator() const
        {
          return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
        }

        ::org::apache::lucene::util::BytesRef FilterAtomicReader$FilterTermsEnum::next() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_4ae19461]));
        }

        jlong FilterAtomicReader$FilterTermsEnum::ord() const
        {
          return env->callLongMethod(this$, mids$[mid_ord_54c6a17a]);
        }

        ::org::apache::lucene::index::TermsEnum$SeekStatus FilterAtomicReader$FilterTermsEnum::seekCeil(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return ::org::apache::lucene::index::TermsEnum$SeekStatus(env->callObjectMethod(this$, mids$[mid_seekCeil_fa9d72c4], a0.this$));
        }

        void FilterAtomicReader$FilterTermsEnum::seekExact(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_seekExact_0ee6df2f], a0);
        }

        ::org::apache::lucene::util::BytesRef FilterAtomicReader$FilterTermsEnum::term() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_term_4ae19461]));
        }

        jlong FilterAtomicReader$FilterTermsEnum::totalTermFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_totalTermFreq_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilterAtomicReader$FilterTermsEnum_init_(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_attributes(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_docFreq(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_docs(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_docsAndPositions(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_getComparator(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_next(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_ord(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_seekCeil(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_seekExact(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_term(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_totalTermFreq(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_get__comparator(t_FilterAtomicReader$FilterTermsEnum *self, void *data);
        static PyGetSetDef t_FilterAtomicReader$FilterTermsEnum__fields_[] = {
          DECLARE_GET_FIELD(t_FilterAtomicReader$FilterTermsEnum, comparator),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilterAtomicReader$FilterTermsEnum__methods_[] = {
          DECLARE_METHOD(t_FilterAtomicReader$FilterTermsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTermsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTermsEnum, attributes, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTermsEnum, docFreq, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTermsEnum, docs, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTermsEnum, docsAndPositions, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTermsEnum, getComparator, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTermsEnum, next, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTermsEnum, ord, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTermsEnum, seekCeil, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTermsEnum, seekExact, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTermsEnum, term, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTermsEnum, totalTermFreq, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilterAtomicReader$FilterTermsEnum, t_FilterAtomicReader$FilterTermsEnum, ::org::apache::lucene::index::TermsEnum, FilterAtomicReader$FilterTermsEnum, t_FilterAtomicReader$FilterTermsEnum_init_, PyObject_SelfIter, ((PyObject *(*)(t_FilterAtomicReader$FilterTermsEnum *)) get_next< t_FilterAtomicReader$FilterTermsEnum,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >), t_FilterAtomicReader$FilterTermsEnum__fields_, 0, 0);

        void t_FilterAtomicReader$FilterTermsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterAtomicReader$FilterTermsEnum), module, "FilterAtomicReader$FilterTermsEnum", 0);
        }

        void t_FilterAtomicReader$FilterTermsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterTermsEnum).tp_dict, "class_", make_descriptor(FilterAtomicReader$FilterTermsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterTermsEnum).tp_dict, "wrapfn_", make_descriptor(t_FilterAtomicReader$FilterTermsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterTermsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterAtomicReader$FilterTermsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterAtomicReader$FilterTermsEnum::initializeClass, 1)))
            return NULL;
          return t_FilterAtomicReader$FilterTermsEnum::wrap_Object(FilterAtomicReader$FilterTermsEnum(((t_FilterAtomicReader$FilterTermsEnum *) arg)->object.this$));
        }
        static PyObject *t_FilterAtomicReader$FilterTermsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterAtomicReader$FilterTermsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilterAtomicReader$FilterTermsEnum_init_(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
          FilterAtomicReader$FilterTermsEnum object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &a0))
          {
            INT_CALL(object = FilterAtomicReader$FilterTermsEnum(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilterAtomicReader$FilterTermsEnum_attributes(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::AttributeSource result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.attributes());
            return ::org::apache::lucene::util::t_AttributeSource::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTermsEnum), (PyObject *) self, "attributes", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTermsEnum_docFreq(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docFreq());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTermsEnum), (PyObject *) self, "docFreq", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTermsEnum_docs(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits a0((jobject) NULL);
          ::org::apache::lucene::index::DocsEnum a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::index::DocsEnum result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsEnum::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.docs(a0, a1, a2));
            return ::org::apache::lucene::index::t_DocsEnum::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTermsEnum), (PyObject *) self, "docs", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTermsEnum_docsAndPositions(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits a0((jobject) NULL);
          ::org::apache::lucene::index::DocsAndPositionsEnum a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::index::DocsAndPositionsEnum result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsAndPositionsEnum::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.docsAndPositions(a0, a1, a2));
            return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTermsEnum), (PyObject *) self, "docsAndPositions", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTermsEnum_getComparator(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args)
        {
          ::java::util::Comparator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTermsEnum), (PyObject *) self, "getComparator", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTermsEnum_next(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTermsEnum), (PyObject *) self, "next", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTermsEnum_ord(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.ord());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTermsEnum), (PyObject *) self, "ord", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTermsEnum_seekCeil(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum$SeekStatus result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.seekCeil(a0));
            return ::org::apache::lucene::index::t_TermsEnum$SeekStatus::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTermsEnum), (PyObject *) self, "seekCeil", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTermsEnum_seekExact(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args)
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.seekExact(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTermsEnum), (PyObject *) self, "seekExact", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTermsEnum_term(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.term());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTermsEnum), (PyObject *) self, "term", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTermsEnum_totalTermFreq(t_FilterAtomicReader$FilterTermsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.totalTermFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTermsEnum), (PyObject *) self, "totalTermFreq", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTermsEnum_get__comparator(t_FilterAtomicReader$FilterTermsEnum *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/KpStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *KpStemmer::class$ = NULL;
        jmethodID *KpStemmer::mids$ = NULL;
        bool KpStemmer::live$ = false;

        jclass KpStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/KpStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        KpStemmer::KpStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean KpStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint KpStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean KpStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_KpStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_KpStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_KpStemmer_init_(t_KpStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_KpStemmer_equals(t_KpStemmer *self, PyObject *args);
        static PyObject *t_KpStemmer_hashCode(t_KpStemmer *self, PyObject *args);
        static PyObject *t_KpStemmer_stem(t_KpStemmer *self, PyObject *args);

        static PyMethodDef t_KpStemmer__methods_[] = {
          DECLARE_METHOD(t_KpStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_KpStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_KpStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_KpStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_KpStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(KpStemmer, t_KpStemmer, ::org::tartarus::snowball::SnowballProgram, KpStemmer, t_KpStemmer_init_, 0, 0, 0, 0, 0);

        void t_KpStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(KpStemmer), module, "KpStemmer", 0);
        }

        void t_KpStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(KpStemmer).tp_dict, "class_", make_descriptor(KpStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(KpStemmer).tp_dict, "wrapfn_", make_descriptor(t_KpStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(KpStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_KpStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, KpStemmer::initializeClass, 1)))
            return NULL;
          return t_KpStemmer::wrap_Object(KpStemmer(((t_KpStemmer *) arg)->object.this$));
        }
        static PyObject *t_KpStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, KpStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_KpStemmer_init_(t_KpStemmer *self, PyObject *args, PyObject *kwds)
        {
          KpStemmer object((jobject) NULL);

          INT_CALL(object = KpStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_KpStemmer_equals(t_KpStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(KpStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_KpStemmer_hashCode(t_KpStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(KpStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_KpStemmer_stem(t_KpStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(KpStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/ParseException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/classic/Token.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *ParseException::class$ = NULL;
          jmethodID *ParseException::mids$ = NULL;
          jfieldID *ParseException::fids$ = NULL;
          bool ParseException::live$ = false;

          jclass ParseException::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/ParseException");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
              mids$[mid_init$_8f0beb0f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/classic/Token;[[I[Ljava/lang/String;)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_currentToken] = env->getFieldID(cls, "currentToken", "Lorg/apache/lucene/queryparser/classic/Token;");
              fids$[fid_expectedTokenSequences] = env->getFieldID(cls, "expectedTokenSequences", "[[I");
              fids$[fid_tokenImage] = env->getFieldID(cls, "tokenImage", "[Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ParseException::ParseException() : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ParseException::ParseException(const ::java::lang::String & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

          ParseException::ParseException(const ::org::apache::lucene::queryparser::classic::Token & a0, const JArray< JArray< jint > > & a1, const JArray< ::java::lang::String > & a2) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_8f0beb0f, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::queryparser::classic::Token ParseException::_get_currentToken() const
          {
            return ::org::apache::lucene::queryparser::classic::Token(env->getObjectField(this$, fids$[fid_currentToken]));
          }

          void ParseException::_set_currentToken(const ::org::apache::lucene::queryparser::classic::Token & a0) const
          {
            env->setObjectField(this$, fids$[fid_currentToken], a0.this$);
          }

          JArray< JArray< jint > > ParseException::_get_expectedTokenSequences() const
          {
            return JArray< JArray< jint > >(env->getObjectField(this$, fids$[fid_expectedTokenSequences]));
          }

          void ParseException::_set_expectedTokenSequences(const JArray< JArray< jint > > & a0) const
          {
            env->setObjectField(this$, fids$[fid_expectedTokenSequences], a0.this$);
          }

          JArray< ::java::lang::String > ParseException::_get_tokenImage() const
          {
            return JArray< ::java::lang::String >(env->getObjectField(this$, fids$[fid_tokenImage]));
          }

          void ParseException::_set_tokenImage(const JArray< ::java::lang::String > & a0) const
          {
            env->setObjectField(this$, fids$[fid_tokenImage], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_ParseException_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ParseException_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ParseException_init_(t_ParseException *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ParseException_get__currentToken(t_ParseException *self, void *data);
          static int t_ParseException_set__currentToken(t_ParseException *self, PyObject *arg, void *data);
          static PyObject *t_ParseException_get__expectedTokenSequences(t_ParseException *self, void *data);
          static int t_ParseException_set__expectedTokenSequences(t_ParseException *self, PyObject *arg, void *data);
          static PyObject *t_ParseException_get__tokenImage(t_ParseException *self, void *data);
          static int t_ParseException_set__tokenImage(t_ParseException *self, PyObject *arg, void *data);

          static PyGetSetDef t_ParseException__fields_[] = {
            DECLARE_GETSET_FIELD(t_ParseException, currentToken),
            DECLARE_GETSET_FIELD(t_ParseException, expectedTokenSequences),
            DECLARE_GETSET_FIELD(t_ParseException, tokenImage),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ParseException__methods_[] = {
            DECLARE_METHOD(t_ParseException, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ParseException, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ParseException, t_ParseException, ::java::lang::Exception, ParseException, t_ParseException_init_, 0, 0, t_ParseException__fields_, 0, 0);

          void t_ParseException::install(PyObject *module)
          {
            installType(&PY_TYPE(ParseException), module, "ParseException", 0);
          }

          void t_ParseException::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ParseException).tp_dict, "class_", make_descriptor(ParseException::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ParseException).tp_dict, "wrapfn_", make_descriptor(t_ParseException::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ParseException).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ParseException_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ParseException::initializeClass, 1)))
              return NULL;
            return t_ParseException::wrap_Object(ParseException(((t_ParseException *) arg)->object.this$));
          }
          static PyObject *t_ParseException_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ParseException::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ParseException_init_(t_ParseException *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ParseException object((jobject) NULL);

                INT_CALL(object = ParseException());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                ParseException object((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  INT_CALL(object = ParseException(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::queryparser::classic::Token a0((jobject) NULL);
                JArray< JArray< jint > > a1((jobject) NULL);
                JArray< ::java::lang::String > a2((jobject) NULL);
                ParseException object((jobject) NULL);

                if (!parseArgs(args, "k[[I[s", ::org::apache::lucene::queryparser::classic::Token::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = ParseException(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ParseException_get__currentToken(t_ParseException *self, void *data)
          {
            ::org::apache::lucene::queryparser::classic::Token value((jobject) NULL);
            OBJ_CALL(value = self->object._get_currentToken());
            return ::org::apache::lucene::queryparser::classic::t_Token::wrap_Object(value);
          }
          static int t_ParseException_set__currentToken(t_ParseException *self, PyObject *arg, void *data)
          {
            ::org::apache::lucene::queryparser::classic::Token value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::classic::Token::initializeClass, &value))
            {
              INT_CALL(self->object._set_currentToken(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "currentToken", arg);
            return -1;
          }

          static PyObject *t_ParseException_get__expectedTokenSequences(t_ParseException *self, void *data)
          {
            JArray< JArray< jint > > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_expectedTokenSequences());
            return JArray<jobject>(value.this$).wrap(NULL);
          }
          static int t_ParseException_set__expectedTokenSequences(t_ParseException *self, PyObject *arg, void *data)
          {
            JArray< JArray< jint > > value((jobject) NULL);
            if (!parseArg(arg, "[[I", &value))
            {
              INT_CALL(self->object._set_expectedTokenSequences(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "expectedTokenSequences", arg);
            return -1;
          }

          static PyObject *t_ParseException_get__tokenImage(t_ParseException *self, void *data)
          {
            JArray< ::java::lang::String > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_tokenImage());
            return JArray<jstring>(value.this$).wrap();
          }
          static int t_ParseException_set__tokenImage(t_ParseException *self, PyObject *arg, void *data)
          {
            JArray< ::java::lang::String > value((jobject) NULL);
            if (!parseArg(arg, "[s", &value))
            {
              INT_CALL(self->object._set_tokenImage(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "tokenImage", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/AbstractDistinctValuesCollector.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Scorer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *AbstractDistinctValuesCollector::class$ = NULL;
          jmethodID *AbstractDistinctValuesCollector::mids$ = NULL;
          bool AbstractDistinctValuesCollector::live$ = false;

          jclass AbstractDistinctValuesCollector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/AbstractDistinctValuesCollector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
              mids$[mid_getGroups_87851566] = env->getMethodID(cls, "getGroups", "()Ljava/util/List;");
              mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AbstractDistinctValuesCollector::AbstractDistinctValuesCollector() : ::org::apache::lucene::search::Collector(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jboolean AbstractDistinctValuesCollector::acceptsDocsOutOfOrder() const
          {
            return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
          }

          ::java::util::List AbstractDistinctValuesCollector::getGroups() const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getGroups_87851566]));
          }

          void AbstractDistinctValuesCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/grouping/AbstractDistinctValuesCollector$GroupCount.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_AbstractDistinctValuesCollector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractDistinctValuesCollector_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractDistinctValuesCollector_of_(t_AbstractDistinctValuesCollector *self, PyObject *args);
          static int t_AbstractDistinctValuesCollector_init_(t_AbstractDistinctValuesCollector *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AbstractDistinctValuesCollector_acceptsDocsOutOfOrder(t_AbstractDistinctValuesCollector *self, PyObject *args);
          static PyObject *t_AbstractDistinctValuesCollector_getGroups(t_AbstractDistinctValuesCollector *self);
          static PyObject *t_AbstractDistinctValuesCollector_setScorer(t_AbstractDistinctValuesCollector *self, PyObject *args);
          static PyObject *t_AbstractDistinctValuesCollector_get__groups(t_AbstractDistinctValuesCollector *self, void *data);
          static int t_AbstractDistinctValuesCollector_set__scorer(t_AbstractDistinctValuesCollector *self, PyObject *arg, void *data);
          static PyObject *t_AbstractDistinctValuesCollector_get__parameters_(t_AbstractDistinctValuesCollector *self, void *data);
          static PyGetSetDef t_AbstractDistinctValuesCollector__fields_[] = {
            DECLARE_GET_FIELD(t_AbstractDistinctValuesCollector, groups),
            DECLARE_SET_FIELD(t_AbstractDistinctValuesCollector, scorer),
            DECLARE_GET_FIELD(t_AbstractDistinctValuesCollector, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AbstractDistinctValuesCollector__methods_[] = {
            DECLARE_METHOD(t_AbstractDistinctValuesCollector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractDistinctValuesCollector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractDistinctValuesCollector, of_, METH_VARARGS),
            DECLARE_METHOD(t_AbstractDistinctValuesCollector, acceptsDocsOutOfOrder, METH_VARARGS),
            DECLARE_METHOD(t_AbstractDistinctValuesCollector, getGroups, METH_NOARGS),
            DECLARE_METHOD(t_AbstractDistinctValuesCollector, setScorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractDistinctValuesCollector, t_AbstractDistinctValuesCollector, ::org::apache::lucene::search::Collector, AbstractDistinctValuesCollector, t_AbstractDistinctValuesCollector_init_, 0, 0, t_AbstractDistinctValuesCollector__fields_, 0, 0);
          PyObject *t_AbstractDistinctValuesCollector::wrap_Object(const AbstractDistinctValuesCollector& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractDistinctValuesCollector::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractDistinctValuesCollector *self = (t_AbstractDistinctValuesCollector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_AbstractDistinctValuesCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractDistinctValuesCollector::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractDistinctValuesCollector *self = (t_AbstractDistinctValuesCollector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_AbstractDistinctValuesCollector::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractDistinctValuesCollector), module, "AbstractDistinctValuesCollector", 0);
            PyDict_SetItemString(PY_TYPE(AbstractDistinctValuesCollector).tp_dict, "GroupCount", make_descriptor(&PY_TYPE(AbstractDistinctValuesCollector$GroupCount)));
          }

          void t_AbstractDistinctValuesCollector::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractDistinctValuesCollector).tp_dict, "class_", make_descriptor(AbstractDistinctValuesCollector::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractDistinctValuesCollector).tp_dict, "wrapfn_", make_descriptor(t_AbstractDistinctValuesCollector::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractDistinctValuesCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractDistinctValuesCollector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractDistinctValuesCollector::initializeClass, 1)))
              return NULL;
            return t_AbstractDistinctValuesCollector::wrap_Object(AbstractDistinctValuesCollector(((t_AbstractDistinctValuesCollector *) arg)->object.this$));
          }
          static PyObject *t_AbstractDistinctValuesCollector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractDistinctValuesCollector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AbstractDistinctValuesCollector_of_(t_AbstractDistinctValuesCollector *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_AbstractDistinctValuesCollector_init_(t_AbstractDistinctValuesCollector *self, PyObject *args, PyObject *kwds)
          {
            AbstractDistinctValuesCollector object((jobject) NULL);

            INT_CALL(object = AbstractDistinctValuesCollector());
            self->object = object;

            return 0;
          }

          static PyObject *t_AbstractDistinctValuesCollector_acceptsDocsOutOfOrder(t_AbstractDistinctValuesCollector *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(AbstractDistinctValuesCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
          }

          static PyObject *t_AbstractDistinctValuesCollector_getGroups(t_AbstractDistinctValuesCollector *self)
          {
            ::java::util::List result((jobject) NULL);
            OBJ_CALL(result = self->object.getGroups());
            return ::java::util::t_List::wrap_Object(result, self->parameters[0]);
          }

          static PyObject *t_AbstractDistinctValuesCollector_setScorer(t_AbstractDistinctValuesCollector *self, PyObject *args)
          {
            ::org::apache::lucene::search::Scorer a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setScorer(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(AbstractDistinctValuesCollector), (PyObject *) self, "setScorer", args, 2);
          }
          static PyObject *t_AbstractDistinctValuesCollector_get__parameters_(t_AbstractDistinctValuesCollector *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_AbstractDistinctValuesCollector_get__groups(t_AbstractDistinctValuesCollector *self, void *data)
          {
            ::java::util::List value((jobject) NULL);
            OBJ_CALL(value = self->object.getGroups());
            return ::java::util::t_List::wrap_Object(value);
          }

          static int t_AbstractDistinctValuesCollector_set__scorer(t_AbstractDistinctValuesCollector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::Scorer value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
              {
                INT_CALL(self->object.setScorer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "scorer", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/LikeThisQueryBuilder.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *LikeThisQueryBuilder::class$ = NULL;
            jmethodID *LikeThisQueryBuilder::mids$ = NULL;
            bool LikeThisQueryBuilder::live$ = false;

            jclass LikeThisQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/LikeThisQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_b896d246] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;[Ljava/lang/String;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            LikeThisQueryBuilder::LikeThisQueryBuilder(const ::org::apache::lucene::analysis::Analyzer & a0, const JArray< ::java::lang::String > & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b896d246, a0.this$, a1.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_LikeThisQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_LikeThisQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_LikeThisQueryBuilder_init_(t_LikeThisQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_LikeThisQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_LikeThisQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LikeThisQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(LikeThisQueryBuilder, t_LikeThisQueryBuilder, ::java::lang::Object, LikeThisQueryBuilder, t_LikeThisQueryBuilder_init_, 0, 0, 0, 0, 0);

            void t_LikeThisQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(LikeThisQueryBuilder), module, "LikeThisQueryBuilder", 0);
            }

            void t_LikeThisQueryBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(LikeThisQueryBuilder).tp_dict, "class_", make_descriptor(LikeThisQueryBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(LikeThisQueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_LikeThisQueryBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(LikeThisQueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_LikeThisQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, LikeThisQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_LikeThisQueryBuilder::wrap_Object(LikeThisQueryBuilder(((t_LikeThisQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_LikeThisQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, LikeThisQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_LikeThisQueryBuilder_init_(t_LikeThisQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
              JArray< ::java::lang::String > a1((jobject) NULL);
              LikeThisQueryBuilder object((jobject) NULL);

              if (!parseArgs(args, "k[s", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
              {
                INT_CALL(object = LikeThisQueryBuilder(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/LMJelinekMercerSimilarity.h"
#include "org/apache/lucene/search/similarities/LMSimilarity$CollectionModel.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *LMJelinekMercerSimilarity::class$ = NULL;
          jmethodID *LMJelinekMercerSimilarity::mids$ = NULL;
          bool LMJelinekMercerSimilarity::live$ = false;

          jclass LMJelinekMercerSimilarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/LMJelinekMercerSimilarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_06298cab] = env->getMethodID(cls, "<init>", "(F)V");
              mids$[mid_init$_75020b37] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/similarities/LMSimilarity$CollectionModel;F)V");
              mids$[mid_getLambda_54c6a176] = env->getMethodID(cls, "getLambda", "()F");
              mids$[mid_getName_14c7b5c5] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");
              mids$[mid_score_63482206] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)F");
              mids$[mid_explain_347d95f8] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/Explanation;Lorg/apache/lucene/search/similarities/BasicStats;IFF)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LMJelinekMercerSimilarity::LMJelinekMercerSimilarity(jfloat a0) : ::org::apache::lucene::search::similarities::LMSimilarity(env->newObject(initializeClass, &mids$, mid_init$_06298cab, a0)) {}

          LMJelinekMercerSimilarity::LMJelinekMercerSimilarity(const ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel & a0, jfloat a1) : ::org::apache::lucene::search::similarities::LMSimilarity(env->newObject(initializeClass, &mids$, mid_init$_75020b37, a0.this$, a1)) {}

          jfloat LMJelinekMercerSimilarity::getLambda() const
          {
            return env->callFloatMethod(this$, mids$[mid_getLambda_54c6a176]);
          }

          ::java::lang::String LMJelinekMercerSimilarity::getName() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_LMJelinekMercerSimilarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LMJelinekMercerSimilarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LMJelinekMercerSimilarity_init_(t_LMJelinekMercerSimilarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LMJelinekMercerSimilarity_getLambda(t_LMJelinekMercerSimilarity *self);
          static PyObject *t_LMJelinekMercerSimilarity_getName(t_LMJelinekMercerSimilarity *self, PyObject *args);
          static PyObject *t_LMJelinekMercerSimilarity_get__lambda(t_LMJelinekMercerSimilarity *self, void *data);
          static PyObject *t_LMJelinekMercerSimilarity_get__name(t_LMJelinekMercerSimilarity *self, void *data);
          static PyGetSetDef t_LMJelinekMercerSimilarity__fields_[] = {
            DECLARE_GET_FIELD(t_LMJelinekMercerSimilarity, lambda),
            DECLARE_GET_FIELD(t_LMJelinekMercerSimilarity, name),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LMJelinekMercerSimilarity__methods_[] = {
            DECLARE_METHOD(t_LMJelinekMercerSimilarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMJelinekMercerSimilarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMJelinekMercerSimilarity, getLambda, METH_NOARGS),
            DECLARE_METHOD(t_LMJelinekMercerSimilarity, getName, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LMJelinekMercerSimilarity, t_LMJelinekMercerSimilarity, ::org::apache::lucene::search::similarities::LMSimilarity, LMJelinekMercerSimilarity, t_LMJelinekMercerSimilarity_init_, 0, 0, t_LMJelinekMercerSimilarity__fields_, 0, 0);

          void t_LMJelinekMercerSimilarity::install(PyObject *module)
          {
            installType(&PY_TYPE(LMJelinekMercerSimilarity), module, "LMJelinekMercerSimilarity", 0);
          }

          void t_LMJelinekMercerSimilarity::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LMJelinekMercerSimilarity).tp_dict, "class_", make_descriptor(LMJelinekMercerSimilarity::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LMJelinekMercerSimilarity).tp_dict, "wrapfn_", make_descriptor(t_LMJelinekMercerSimilarity::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LMJelinekMercerSimilarity).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LMJelinekMercerSimilarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LMJelinekMercerSimilarity::initializeClass, 1)))
              return NULL;
            return t_LMJelinekMercerSimilarity::wrap_Object(LMJelinekMercerSimilarity(((t_LMJelinekMercerSimilarity *) arg)->object.this$));
          }
          static PyObject *t_LMJelinekMercerSimilarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LMJelinekMercerSimilarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LMJelinekMercerSimilarity_init_(t_LMJelinekMercerSimilarity *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jfloat a0;
                LMJelinekMercerSimilarity object((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  INT_CALL(object = LMJelinekMercerSimilarity(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel a0((jobject) NULL);
                jfloat a1;
                LMJelinekMercerSimilarity object((jobject) NULL);

                if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = LMJelinekMercerSimilarity(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LMJelinekMercerSimilarity_getLambda(t_LMJelinekMercerSimilarity *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getLambda());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_LMJelinekMercerSimilarity_getName(t_LMJelinekMercerSimilarity *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getName());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(LMJelinekMercerSimilarity), (PyObject *) self, "getName", args, 2);
          }

          static PyObject *t_LMJelinekMercerSimilarity_get__lambda(t_LMJelinekMercerSimilarity *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getLambda());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_LMJelinekMercerSimilarity_get__name(t_LMJelinekMercerSimilarity *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getName());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiTerms.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/ReaderSlice.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiTerms::class$ = NULL;
        jmethodID *MultiTerms::mids$ = NULL;
        bool MultiTerms::live$ = false;

        jclass MultiTerms::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiTerms");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_cc1bf630] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/index/Terms;[Lorg/apache/lucene/index/ReaderSlice;)V");
            mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
            mids$[mid_getDocCount_54c6a179] = env->getMethodID(cls, "getDocCount", "()I");
            mids$[mid_getMax_4ae19461] = env->getMethodID(cls, "getMax", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getMin_4ae19461] = env->getMethodID(cls, "getMin", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getSubSlices_df2851e8] = env->getMethodID(cls, "getSubSlices", "()[Lorg/apache/lucene/index/ReaderSlice;");
            mids$[mid_getSubTerms_a3c12bfa] = env->getMethodID(cls, "getSubTerms", "()[Lorg/apache/lucene/index/Terms;");
            mids$[mid_getSumDocFreq_54c6a17a] = env->getMethodID(cls, "getSumDocFreq", "()J");
            mids$[mid_getSumTotalTermFreq_54c6a17a] = env->getMethodID(cls, "getSumTotalTermFreq", "()J");
            mids$[mid_hasFreqs_54c6a16a] = env->getMethodID(cls, "hasFreqs", "()Z");
            mids$[mid_hasOffsets_54c6a16a] = env->getMethodID(cls, "hasOffsets", "()Z");
            mids$[mid_hasPayloads_54c6a16a] = env->getMethodID(cls, "hasPayloads", "()Z");
            mids$[mid_hasPositions_54c6a16a] = env->getMethodID(cls, "hasPositions", "()Z");
            mids$[mid_intersect_b8f2b1bc] = env->getMethodID(cls, "intersect", "(Lorg/apache/lucene/util/automaton/CompiledAutomaton;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum;");
            mids$[mid_iterator_d737078b] = env->getMethodID(cls, "iterator", "(Lorg/apache/lucene/index/TermsEnum;)Lorg/apache/lucene/index/TermsEnum;");
            mids$[mid_size_54c6a17a] = env->getMethodID(cls, "size", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiTerms::MultiTerms(const JArray< ::org::apache::lucene::index::Terms > & a0, const JArray< ::org::apache::lucene::index::ReaderSlice > & a1) : ::org::apache::lucene::index::Terms(env->newObject(initializeClass, &mids$, mid_init$_cc1bf630, a0.this$, a1.this$)) {}

        ::java::util::Comparator MultiTerms::getComparator() const
        {
          return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
        }

        jint MultiTerms::getDocCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getDocCount_54c6a179]);
        }

        ::org::apache::lucene::util::BytesRef MultiTerms::getMax() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getMax_4ae19461]));
        }

        ::org::apache::lucene::util::BytesRef MultiTerms::getMin() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getMin_4ae19461]));
        }

        JArray< ::org::apache::lucene::index::ReaderSlice > MultiTerms::getSubSlices() const
        {
          return JArray< ::org::apache::lucene::index::ReaderSlice >(env->callObjectMethod(this$, mids$[mid_getSubSlices_df2851e8]));
        }

        JArray< ::org::apache::lucene::index::Terms > MultiTerms::getSubTerms() const
        {
          return JArray< ::org::apache::lucene::index::Terms >(env->callObjectMethod(this$, mids$[mid_getSubTerms_a3c12bfa]));
        }

        jlong MultiTerms::getSumDocFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_getSumDocFreq_54c6a17a]);
        }

        jlong MultiTerms::getSumTotalTermFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_getSumTotalTermFreq_54c6a17a]);
        }

        jboolean MultiTerms::hasFreqs() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasFreqs_54c6a16a]);
        }

        jboolean MultiTerms::hasOffsets() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasOffsets_54c6a16a]);
        }

        jboolean MultiTerms::hasPayloads() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasPayloads_54c6a16a]);
        }

        jboolean MultiTerms::hasPositions() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasPositions_54c6a16a]);
        }

        ::org::apache::lucene::index::TermsEnum MultiTerms::intersect(const ::org::apache::lucene::util::automaton::CompiledAutomaton & a0, const ::org::apache::lucene::util::BytesRef & a1) const
        {
          return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_intersect_b8f2b1bc], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::TermsEnum MultiTerms::iterator(const ::org::apache::lucene::index::TermsEnum & a0) const
        {
          return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_iterator_d737078b], a0.this$));
        }

        jlong MultiTerms::size() const
        {
          return env->callLongMethod(this$, mids$[mid_size_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiTerms_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTerms_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiTerms_init_(t_MultiTerms *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiTerms_getComparator(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_getDocCount(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_getMax(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_getMin(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_getSubSlices(t_MultiTerms *self);
        static PyObject *t_MultiTerms_getSubTerms(t_MultiTerms *self);
        static PyObject *t_MultiTerms_getSumDocFreq(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_getSumTotalTermFreq(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_hasFreqs(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_hasOffsets(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_hasPayloads(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_hasPositions(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_intersect(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_iterator(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_size(t_MultiTerms *self, PyObject *args);
        static PyObject *t_MultiTerms_get__comparator(t_MultiTerms *self, void *data);
        static PyObject *t_MultiTerms_get__docCount(t_MultiTerms *self, void *data);
        static PyObject *t_MultiTerms_get__max(t_MultiTerms *self, void *data);
        static PyObject *t_MultiTerms_get__min(t_MultiTerms *self, void *data);
        static PyObject *t_MultiTerms_get__subSlices(t_MultiTerms *self, void *data);
        static PyObject *t_MultiTerms_get__subTerms(t_MultiTerms *self, void *data);
        static PyObject *t_MultiTerms_get__sumDocFreq(t_MultiTerms *self, void *data);
        static PyObject *t_MultiTerms_get__sumTotalTermFreq(t_MultiTerms *self, void *data);
        static PyGetSetDef t_MultiTerms__fields_[] = {
          DECLARE_GET_FIELD(t_MultiTerms, comparator),
          DECLARE_GET_FIELD(t_MultiTerms, docCount),
          DECLARE_GET_FIELD(t_MultiTerms, max),
          DECLARE_GET_FIELD(t_MultiTerms, min),
          DECLARE_GET_FIELD(t_MultiTerms, subSlices),
          DECLARE_GET_FIELD(t_MultiTerms, subTerms),
          DECLARE_GET_FIELD(t_MultiTerms, sumDocFreq),
          DECLARE_GET_FIELD(t_MultiTerms, sumTotalTermFreq),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiTerms__methods_[] = {
          DECLARE_METHOD(t_MultiTerms, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTerms, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTerms, getComparator, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, getDocCount, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, getMax, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, getMin, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, getSubSlices, METH_NOARGS),
          DECLARE_METHOD(t_MultiTerms, getSubTerms, METH_NOARGS),
          DECLARE_METHOD(t_MultiTerms, getSumDocFreq, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, getSumTotalTermFreq, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, hasFreqs, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, hasOffsets, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, hasPayloads, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, hasPositions, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, intersect, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, iterator, METH_VARARGS),
          DECLARE_METHOD(t_MultiTerms, size, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiTerms, t_MultiTerms, ::org::apache::lucene::index::Terms, MultiTerms, t_MultiTerms_init_, 0, 0, t_MultiTerms__fields_, 0, 0);

        void t_MultiTerms::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiTerms), module, "MultiTerms", 0);
        }

        void t_MultiTerms::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiTerms).tp_dict, "class_", make_descriptor(MultiTerms::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiTerms).tp_dict, "wrapfn_", make_descriptor(t_MultiTerms::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiTerms).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiTerms_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiTerms::initializeClass, 1)))
            return NULL;
          return t_MultiTerms::wrap_Object(MultiTerms(((t_MultiTerms *) arg)->object.this$));
        }
        static PyObject *t_MultiTerms_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiTerms::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiTerms_init_(t_MultiTerms *self, PyObject *args, PyObject *kwds)
        {
          JArray< ::org::apache::lucene::index::Terms > a0((jobject) NULL);
          JArray< ::org::apache::lucene::index::ReaderSlice > a1((jobject) NULL);
          MultiTerms object((jobject) NULL);

          if (!parseArgs(args, "[k[k", ::org::apache::lucene::index::Terms::initializeClass, ::org::apache::lucene::index::ReaderSlice::initializeClass, &a0, &a1))
          {
            INT_CALL(object = MultiTerms(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MultiTerms_getComparator(t_MultiTerms *self, PyObject *args)
        {
          ::java::util::Comparator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          return callSuper(&PY_TYPE(MultiTerms), (PyObject *) self, "getComparator", args, 2);
        }

        static PyObject *t_MultiTerms_getDocCount(t_MultiTerms *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getDocCount());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiTerms), (PyObject *) self, "getDocCount", args, 2);
        }

        static PyObject *t_MultiTerms_getMax(t_MultiTerms *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMax());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiTerms), (PyObject *) self, "getMax", args, 2);
        }

        static PyObject *t_MultiTerms_getMin(t_MultiTerms *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMin());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiTerms), (PyObject *) self, "getMin", args, 2);
        }

        static PyObject *t_MultiTerms_getSubSlices(t_MultiTerms *self)
        {
          JArray< ::org::apache::lucene::index::ReaderSlice > result((jobject) NULL);
          OBJ_CALL(result = self->object.getSubSlices());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::index::t_ReaderSlice::wrap_jobject);
        }

        static PyObject *t_MultiTerms_getSubTerms(t_MultiTerms *self)
        {
          JArray< ::org::apache::lucene::index::Terms > result((jobject) NULL);
          OBJ_CALL(result = self->object.getSubTerms());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::index::t_Terms::wrap_jobject);
        }

        static PyObject *t_MultiTerms_getSumDocFreq(t_MultiTerms *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getSumDocFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(MultiTerms), (PyObject *) self, "getSumDocFreq", args, 2);
        }

        static PyObject *t_MultiTerms_getSumTotalTermFreq(t_MultiTerms *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getSumTotalTermFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(MultiTerms), (PyObject *) self, "getSumTotalTermFreq", args, 2);
        }

        static PyObject *t_MultiTerms_hasFreqs(t_MultiTerms *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hasFreqs());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(MultiTerms), (PyObject *) self, "hasFreqs", args, 2);
        }

        static PyObject *t_MultiTerms_hasOffsets(t_MultiTerms *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hasOffsets());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(MultiTerms), (PyObject *) self, "hasOffsets", args, 2);
        }

        static PyObject *t_MultiTerms_hasPayloads(t_MultiTerms *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hasPayloads());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(MultiTerms), (PyObject *) self, "hasPayloads", args, 2);
        }

        static PyObject *t_MultiTerms_hasPositions(t_MultiTerms *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hasPositions());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(MultiTerms), (PyObject *) self, "hasPositions", args, 2);
        }

        static PyObject *t_MultiTerms_intersect(t_MultiTerms *self, PyObject *args)
        {
          ::org::apache::lucene::util::automaton::CompiledAutomaton a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::util::automaton::CompiledAutomaton::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.intersect(a0, a1));
            return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiTerms), (PyObject *) self, "intersect", args, 2);
        }

        static PyObject *t_MultiTerms_iterator(t_MultiTerms *self, PyObject *args)
        {
          ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.iterator(a0));
            return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiTerms), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_MultiTerms_size(t_MultiTerms *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.size());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(MultiTerms), (PyObject *) self, "size", args, 2);
        }

        static PyObject *t_MultiTerms_get__comparator(t_MultiTerms *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }

        static PyObject *t_MultiTerms_get__docCount(t_MultiTerms *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getDocCount());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_MultiTerms_get__max(t_MultiTerms *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getMax());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }

        static PyObject *t_MultiTerms_get__min(t_MultiTerms *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getMin());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }

        static PyObject *t_MultiTerms_get__subSlices(t_MultiTerms *self, void *data)
        {
          JArray< ::org::apache::lucene::index::ReaderSlice > value((jobject) NULL);
          OBJ_CALL(value = self->object.getSubSlices());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_ReaderSlice::wrap_jobject);
        }

        static PyObject *t_MultiTerms_get__subTerms(t_MultiTerms *self, void *data)
        {
          JArray< ::org::apache::lucene::index::Terms > value((jobject) NULL);
          OBJ_CALL(value = self->object.getSubTerms());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_Terms::wrap_jobject);
        }

        static PyObject *t_MultiTerms_get__sumDocFreq(t_MultiTerms *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getSumDocFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_MultiTerms_get__sumTotalTermFreq(t_MultiTerms *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getSumTotalTermFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/TurkishStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *TurkishStemmer::class$ = NULL;
        jmethodID *TurkishStemmer::mids$ = NULL;
        bool TurkishStemmer::live$ = false;

        jclass TurkishStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/TurkishStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TurkishStemmer::TurkishStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean TurkishStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint TurkishStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean TurkishStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_TurkishStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TurkishStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TurkishStemmer_init_(t_TurkishStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TurkishStemmer_equals(t_TurkishStemmer *self, PyObject *args);
        static PyObject *t_TurkishStemmer_hashCode(t_TurkishStemmer *self, PyObject *args);
        static PyObject *t_TurkishStemmer_stem(t_TurkishStemmer *self, PyObject *args);

        static PyMethodDef t_TurkishStemmer__methods_[] = {
          DECLARE_METHOD(t_TurkishStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TurkishStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TurkishStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_TurkishStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_TurkishStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TurkishStemmer, t_TurkishStemmer, ::org::tartarus::snowball::SnowballProgram, TurkishStemmer, t_TurkishStemmer_init_, 0, 0, 0, 0, 0);

        void t_TurkishStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(TurkishStemmer), module, "TurkishStemmer", 0);
        }

        void t_TurkishStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TurkishStemmer).tp_dict, "class_", make_descriptor(TurkishStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TurkishStemmer).tp_dict, "wrapfn_", make_descriptor(t_TurkishStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TurkishStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TurkishStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TurkishStemmer::initializeClass, 1)))
            return NULL;
          return t_TurkishStemmer::wrap_Object(TurkishStemmer(((t_TurkishStemmer *) arg)->object.this$));
        }
        static PyObject *t_TurkishStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TurkishStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TurkishStemmer_init_(t_TurkishStemmer *self, PyObject *args, PyObject *kwds)
        {
          TurkishStemmer object((jobject) NULL);

          INT_CALL(object = TurkishStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_TurkishStemmer_equals(t_TurkishStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(TurkishStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_TurkishStemmer_hashCode(t_TurkishStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(TurkishStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_TurkishStemmer_stem(t_TurkishStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(TurkishStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene42/Lucene42TermVectorsFormat.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene42 {

          ::java::lang::Class *Lucene42TermVectorsFormat::class$ = NULL;
          jmethodID *Lucene42TermVectorsFormat::mids$ = NULL;
          bool Lucene42TermVectorsFormat::live$ = false;

          jclass Lucene42TermVectorsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene42/Lucene42TermVectorsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene42TermVectorsFormat::Lucene42TermVectorsFormat() : ::org::apache::lucene::codecs::compressing::CompressingTermVectorsFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene42 {
          static PyObject *t_Lucene42TermVectorsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene42TermVectorsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene42TermVectorsFormat_init_(t_Lucene42TermVectorsFormat *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_Lucene42TermVectorsFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene42TermVectorsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene42TermVectorsFormat, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene42TermVectorsFormat, t_Lucene42TermVectorsFormat, ::org::apache::lucene::codecs::compressing::CompressingTermVectorsFormat, Lucene42TermVectorsFormat, t_Lucene42TermVectorsFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene42TermVectorsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene42TermVectorsFormat), module, "Lucene42TermVectorsFormat", 0);
          }

          void t_Lucene42TermVectorsFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene42TermVectorsFormat).tp_dict, "class_", make_descriptor(Lucene42TermVectorsFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene42TermVectorsFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene42TermVectorsFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene42TermVectorsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene42TermVectorsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene42TermVectorsFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene42TermVectorsFormat::wrap_Object(Lucene42TermVectorsFormat(((t_Lucene42TermVectorsFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene42TermVectorsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene42TermVectorsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene42TermVectorsFormat_init_(t_Lucene42TermVectorsFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene42TermVectorsFormat object((jobject) NULL);

            INT_CALL(object = Lucene42TermVectorsFormat());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/WeightedSpanTerm.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/highlight/PositionSpan.h"
#include "java/lang/Class.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *WeightedSpanTerm::class$ = NULL;
          jmethodID *WeightedSpanTerm::mids$ = NULL;
          bool WeightedSpanTerm::live$ = false;

          jclass WeightedSpanTerm::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/WeightedSpanTerm");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f3ab5075] = env->getMethodID(cls, "<init>", "(FLjava/lang/String;)V");
              mids$[mid_init$_126740fe] = env->getMethodID(cls, "<init>", "(FLjava/lang/String;Z)V");
              mids$[mid_addPositionSpans_1fde8fc3] = env->getMethodID(cls, "addPositionSpans", "(Ljava/util/List;)V");
              mids$[mid_checkPosition_39c7bd30] = env->getMethodID(cls, "checkPosition", "(I)Z");
              mids$[mid_getPositionSpans_87851566] = env->getMethodID(cls, "getPositionSpans", "()Ljava/util/List;");
              mids$[mid_isPositionSensitive_54c6a16a] = env->getMethodID(cls, "isPositionSensitive", "()Z");
              mids$[mid_setPositionSensitive_bb0c767f] = env->getMethodID(cls, "setPositionSensitive", "(Z)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WeightedSpanTerm::WeightedSpanTerm(jfloat a0, const ::java::lang::String & a1) : ::org::apache::lucene::search::highlight::WeightedTerm(env->newObject(initializeClass, &mids$, mid_init$_f3ab5075, a0, a1.this$)) {}

          WeightedSpanTerm::WeightedSpanTerm(jfloat a0, const ::java::lang::String & a1, jboolean a2) : ::org::apache::lucene::search::highlight::WeightedTerm(env->newObject(initializeClass, &mids$, mid_init$_126740fe, a0, a1.this$, a2)) {}

          void WeightedSpanTerm::addPositionSpans(const ::java::util::List & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_addPositionSpans_1fde8fc3], a0.this$);
          }

          jboolean WeightedSpanTerm::checkPosition(jint a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_checkPosition_39c7bd30], a0);
          }

          ::java::util::List WeightedSpanTerm::getPositionSpans() const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getPositionSpans_87851566]));
          }

          jboolean WeightedSpanTerm::isPositionSensitive() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isPositionSensitive_54c6a16a]);
          }

          void WeightedSpanTerm::setPositionSensitive(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPositionSensitive_bb0c767f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_WeightedSpanTerm_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WeightedSpanTerm_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WeightedSpanTerm_init_(t_WeightedSpanTerm *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WeightedSpanTerm_addPositionSpans(t_WeightedSpanTerm *self, PyObject *arg);
          static PyObject *t_WeightedSpanTerm_checkPosition(t_WeightedSpanTerm *self, PyObject *arg);
          static PyObject *t_WeightedSpanTerm_getPositionSpans(t_WeightedSpanTerm *self);
          static PyObject *t_WeightedSpanTerm_isPositionSensitive(t_WeightedSpanTerm *self);
          static PyObject *t_WeightedSpanTerm_setPositionSensitive(t_WeightedSpanTerm *self, PyObject *arg);
          static PyObject *t_WeightedSpanTerm_get__positionSensitive(t_WeightedSpanTerm *self, void *data);
          static int t_WeightedSpanTerm_set__positionSensitive(t_WeightedSpanTerm *self, PyObject *arg, void *data);
          static PyObject *t_WeightedSpanTerm_get__positionSpans(t_WeightedSpanTerm *self, void *data);
          static PyGetSetDef t_WeightedSpanTerm__fields_[] = {
            DECLARE_GETSET_FIELD(t_WeightedSpanTerm, positionSensitive),
            DECLARE_GET_FIELD(t_WeightedSpanTerm, positionSpans),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_WeightedSpanTerm__methods_[] = {
            DECLARE_METHOD(t_WeightedSpanTerm, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WeightedSpanTerm, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WeightedSpanTerm, addPositionSpans, METH_O),
            DECLARE_METHOD(t_WeightedSpanTerm, checkPosition, METH_O),
            DECLARE_METHOD(t_WeightedSpanTerm, getPositionSpans, METH_NOARGS),
            DECLARE_METHOD(t_WeightedSpanTerm, isPositionSensitive, METH_NOARGS),
            DECLARE_METHOD(t_WeightedSpanTerm, setPositionSensitive, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WeightedSpanTerm, t_WeightedSpanTerm, ::org::apache::lucene::search::highlight::WeightedTerm, WeightedSpanTerm, t_WeightedSpanTerm_init_, 0, 0, t_WeightedSpanTerm__fields_, 0, 0);

          void t_WeightedSpanTerm::install(PyObject *module)
          {
            installType(&PY_TYPE(WeightedSpanTerm), module, "WeightedSpanTerm", 0);
          }

          void t_WeightedSpanTerm::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WeightedSpanTerm).tp_dict, "class_", make_descriptor(WeightedSpanTerm::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WeightedSpanTerm).tp_dict, "wrapfn_", make_descriptor(t_WeightedSpanTerm::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WeightedSpanTerm).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_WeightedSpanTerm_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WeightedSpanTerm::initializeClass, 1)))
              return NULL;
            return t_WeightedSpanTerm::wrap_Object(WeightedSpanTerm(((t_WeightedSpanTerm *) arg)->object.this$));
          }
          static PyObject *t_WeightedSpanTerm_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WeightedSpanTerm::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WeightedSpanTerm_init_(t_WeightedSpanTerm *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                jfloat a0;
                ::java::lang::String a1((jobject) NULL);
                WeightedSpanTerm object((jobject) NULL);

                if (!parseArgs(args, "Fs", &a0, &a1))
                {
                  INT_CALL(object = WeightedSpanTerm(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                jfloat a0;
                ::java::lang::String a1((jobject) NULL);
                jboolean a2;
                WeightedSpanTerm object((jobject) NULL);

                if (!parseArgs(args, "FsZ", &a0, &a1, &a2))
                {
                  INT_CALL(object = WeightedSpanTerm(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_WeightedSpanTerm_addPositionSpans(t_WeightedSpanTerm *self, PyObject *arg)
          {
            ::java::util::List a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(self->object.addPositionSpans(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addPositionSpans", arg);
            return NULL;
          }

          static PyObject *t_WeightedSpanTerm_checkPosition(t_WeightedSpanTerm *self, PyObject *arg)
          {
            jint a0;
            jboolean result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.checkPosition(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "checkPosition", arg);
            return NULL;
          }

          static PyObject *t_WeightedSpanTerm_getPositionSpans(t_WeightedSpanTerm *self)
          {
            ::java::util::List result((jobject) NULL);
            OBJ_CALL(result = self->object.getPositionSpans());
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::highlight::PY_TYPE(PositionSpan));
          }

          static PyObject *t_WeightedSpanTerm_isPositionSensitive(t_WeightedSpanTerm *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isPositionSensitive());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_WeightedSpanTerm_setPositionSensitive(t_WeightedSpanTerm *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setPositionSensitive(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPositionSensitive", arg);
            return NULL;
          }

          static PyObject *t_WeightedSpanTerm_get__positionSensitive(t_WeightedSpanTerm *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isPositionSensitive());
            Py_RETURN_BOOL(value);
          }
          static int t_WeightedSpanTerm_set__positionSensitive(t_WeightedSpanTerm *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setPositionSensitive(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "positionSensitive", arg);
            return -1;
          }

          static PyObject *t_WeightedSpanTerm_get__positionSpans(t_WeightedSpanTerm *self, void *data)
          {
            ::java::util::List value((jobject) NULL);
            OBJ_CALL(value = self->object.getPositionSpans());
            return ::java::util::t_List::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/CharArrayMap$EntrySet.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/analysis/util/CharArrayMap$EntryIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *CharArrayMap$EntrySet::class$ = NULL;
          jmethodID *CharArrayMap$EntrySet::mids$ = NULL;
          bool CharArrayMap$EntrySet::live$ = false;

          jclass CharArrayMap$EntrySet::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/CharArrayMap$EntrySet");

              mids$ = new jmethodID[max_mid];
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_contains_290588e2] = env->getMethodID(cls, "contains", "(Ljava/lang/Object;)Z");
              mids$[mid_iterator_6e80333a] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/analysis/util/CharArrayMap$EntryIterator;");
              mids$[mid_remove_290588e2] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Z");
              mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void CharArrayMap$EntrySet::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          jboolean CharArrayMap$EntrySet::contains(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_contains_290588e2], a0.this$);
          }

          ::org::apache::lucene::analysis::util::CharArrayMap$EntryIterator CharArrayMap$EntrySet::iterator() const
          {
            return ::org::apache::lucene::analysis::util::CharArrayMap$EntryIterator(env->callObjectMethod(this$, mids$[mid_iterator_6e80333a]));
          }

          jboolean CharArrayMap$EntrySet::remove(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_remove_290588e2], a0.this$);
          }

          jint CharArrayMap$EntrySet::size() const
          {
            return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_CharArrayMap$EntrySet_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharArrayMap$EntrySet_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharArrayMap$EntrySet_of_(t_CharArrayMap$EntrySet *self, PyObject *args);
          static PyObject *t_CharArrayMap$EntrySet_clear(t_CharArrayMap$EntrySet *self, PyObject *args);
          static PyObject *t_CharArrayMap$EntrySet_contains(t_CharArrayMap$EntrySet *self, PyObject *args);
          static PyObject *t_CharArrayMap$EntrySet_iterator(t_CharArrayMap$EntrySet *self, PyObject *args);
          static PyObject *t_CharArrayMap$EntrySet_remove(t_CharArrayMap$EntrySet *self, PyObject *args);
          static PyObject *t_CharArrayMap$EntrySet_size(t_CharArrayMap$EntrySet *self, PyObject *args);
          static PyObject *t_CharArrayMap$EntrySet_get__parameters_(t_CharArrayMap$EntrySet *self, void *data);
          static PyGetSetDef t_CharArrayMap$EntrySet__fields_[] = {
            DECLARE_GET_FIELD(t_CharArrayMap$EntrySet, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CharArrayMap$EntrySet__methods_[] = {
            DECLARE_METHOD(t_CharArrayMap$EntrySet, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharArrayMap$EntrySet, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharArrayMap$EntrySet, of_, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap$EntrySet, clear, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap$EntrySet, contains, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap$EntrySet, iterator, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap$EntrySet, remove, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap$EntrySet, size, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CharArrayMap$EntrySet, t_CharArrayMap$EntrySet, ::java::util::AbstractSet, CharArrayMap$EntrySet, abstract_init, ((PyObject *(*)(t_CharArrayMap$EntrySet *)) get_generic_iterator< t_CharArrayMap$EntrySet >), 0, t_CharArrayMap$EntrySet__fields_, 0, 0);
          PyObject *t_CharArrayMap$EntrySet::wrap_Object(const CharArrayMap$EntrySet& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CharArrayMap$EntrySet::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CharArrayMap$EntrySet *self = (t_CharArrayMap$EntrySet *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_CharArrayMap$EntrySet::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CharArrayMap$EntrySet::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CharArrayMap$EntrySet *self = (t_CharArrayMap$EntrySet *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_CharArrayMap$EntrySet::install(PyObject *module)
          {
            installType(&PY_TYPE(CharArrayMap$EntrySet), module, "CharArrayMap$EntrySet", 0);
          }

          void t_CharArrayMap$EntrySet::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CharArrayMap$EntrySet).tp_dict, "class_", make_descriptor(CharArrayMap$EntrySet::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CharArrayMap$EntrySet).tp_dict, "wrapfn_", make_descriptor(t_CharArrayMap$EntrySet::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CharArrayMap$EntrySet).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CharArrayMap$EntrySet_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharArrayMap$EntrySet::initializeClass, 1)))
              return NULL;
            return t_CharArrayMap$EntrySet::wrap_Object(CharArrayMap$EntrySet(((t_CharArrayMap$EntrySet *) arg)->object.this$));
          }
          static PyObject *t_CharArrayMap$EntrySet_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharArrayMap$EntrySet::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CharArrayMap$EntrySet_of_(t_CharArrayMap$EntrySet *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_CharArrayMap$EntrySet_clear(t_CharArrayMap$EntrySet *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CharArrayMap$EntrySet), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_CharArrayMap$EntrySet_contains(t_CharArrayMap$EntrySet *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.contains(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(CharArrayMap$EntrySet), (PyObject *) self, "contains", args, 2);
          }

          static PyObject *t_CharArrayMap$EntrySet_iterator(t_CharArrayMap$EntrySet *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::util::CharArrayMap$EntryIterator result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.iterator());
              return ::org::apache::lucene::analysis::util::t_CharArrayMap$EntryIterator::wrap_Object(result, self->parameters[0]);
            }

            return callSuper(&PY_TYPE(CharArrayMap$EntrySet), (PyObject *) self, "iterator", args, 2);
          }

          static PyObject *t_CharArrayMap$EntrySet_remove(t_CharArrayMap$EntrySet *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.remove(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(CharArrayMap$EntrySet), (PyObject *) self, "remove", args, 2);
          }

          static PyObject *t_CharArrayMap$EntrySet_size(t_CharArrayMap$EntrySet *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.size());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(CharArrayMap$EntrySet), (PyObject *) self, "size", args, 2);
          }
          static PyObject *t_CharArrayMap$EntrySet_get__parameters_(t_CharArrayMap$EntrySet *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/TermRangeQueryNodeBuilder.h"
#include "org/apache/lucene/search/TermRangeQuery.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *TermRangeQueryNodeBuilder::class$ = NULL;
              jmethodID *TermRangeQueryNodeBuilder::mids$ = NULL;
              bool TermRangeQueryNodeBuilder::live$ = false;

              jclass TermRangeQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/TermRangeQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_fc6e9165] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/TermRangeQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              TermRangeQueryNodeBuilder::TermRangeQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::TermRangeQuery TermRangeQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::TermRangeQuery(env->callObjectMethod(this$, mids$[mid_build_fc6e9165], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_TermRangeQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_TermRangeQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_TermRangeQueryNodeBuilder_init_(t_TermRangeQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_TermRangeQueryNodeBuilder_build(t_TermRangeQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_TermRangeQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_TermRangeQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_TermRangeQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_TermRangeQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(TermRangeQueryNodeBuilder, t_TermRangeQueryNodeBuilder, ::java::lang::Object, TermRangeQueryNodeBuilder, t_TermRangeQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_TermRangeQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(TermRangeQueryNodeBuilder), module, "TermRangeQueryNodeBuilder", 0);
              }

              void t_TermRangeQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(TermRangeQueryNodeBuilder).tp_dict, "class_", make_descriptor(TermRangeQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(TermRangeQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_TermRangeQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(TermRangeQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_TermRangeQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, TermRangeQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_TermRangeQueryNodeBuilder::wrap_Object(TermRangeQueryNodeBuilder(((t_TermRangeQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_TermRangeQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, TermRangeQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_TermRangeQueryNodeBuilder_init_(t_TermRangeQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                TermRangeQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = TermRangeQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_TermRangeQueryNodeBuilder_build(t_TermRangeQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::TermRangeQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_TermRangeQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/QueryParser$Operator.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *QueryParser$Operator::class$ = NULL;
          jmethodID *QueryParser$Operator::mids$ = NULL;
          bool QueryParser$Operator::live$ = false;
          QueryParser$Operator *QueryParser$Operator::AND = NULL;
          QueryParser$Operator *QueryParser$Operator::OR = NULL;

          jclass QueryParser$Operator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/QueryParser$Operator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_7436fa4b] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/classic/QueryParser$Operator;");
              mids$[mid_values_6ed7a6cd] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/queryparser/classic/QueryParser$Operator;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              AND = new QueryParser$Operator(env->getStaticObjectField(cls, "AND", "Lorg/apache/lucene/queryparser/classic/QueryParser$Operator;"));
              OR = new QueryParser$Operator(env->getStaticObjectField(cls, "OR", "Lorg/apache/lucene/queryparser/classic/QueryParser$Operator;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          QueryParser$Operator QueryParser$Operator::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return QueryParser$Operator(env->callStaticObjectMethod(cls, mids$[mid_valueOf_7436fa4b], a0.this$));
          }

          JArray< QueryParser$Operator > QueryParser$Operator::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< QueryParser$Operator >(env->callStaticObjectMethod(cls, mids$[mid_values_6ed7a6cd]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_QueryParser$Operator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryParser$Operator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryParser$Operator_of_(t_QueryParser$Operator *self, PyObject *args);
          static PyObject *t_QueryParser$Operator_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_QueryParser$Operator_values(PyTypeObject *type);
          static PyObject *t_QueryParser$Operator_get__parameters_(t_QueryParser$Operator *self, void *data);
          static PyGetSetDef t_QueryParser$Operator__fields_[] = {
            DECLARE_GET_FIELD(t_QueryParser$Operator, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_QueryParser$Operator__methods_[] = {
            DECLARE_METHOD(t_QueryParser$Operator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryParser$Operator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryParser$Operator, of_, METH_VARARGS),
            DECLARE_METHOD(t_QueryParser$Operator, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_QueryParser$Operator, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(QueryParser$Operator, t_QueryParser$Operator, ::java::lang::Enum, QueryParser$Operator, abstract_init, 0, 0, t_QueryParser$Operator__fields_, 0, 0);
          PyObject *t_QueryParser$Operator::wrap_Object(const QueryParser$Operator& object, PyTypeObject *p0)
          {
            PyObject *obj = t_QueryParser$Operator::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_QueryParser$Operator *self = (t_QueryParser$Operator *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_QueryParser$Operator::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_QueryParser$Operator::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_QueryParser$Operator *self = (t_QueryParser$Operator *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_QueryParser$Operator::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryParser$Operator), module, "QueryParser$Operator", 0);
          }

          void t_QueryParser$Operator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(QueryParser$Operator).tp_dict, "class_", make_descriptor(QueryParser$Operator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(QueryParser$Operator).tp_dict, "wrapfn_", make_descriptor(t_QueryParser$Operator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(QueryParser$Operator).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(QueryParser$Operator::initializeClass);
            PyDict_SetItemString(PY_TYPE(QueryParser$Operator).tp_dict, "AND", make_descriptor(t_QueryParser$Operator::wrap_Object(*QueryParser$Operator::AND)));
            PyDict_SetItemString(PY_TYPE(QueryParser$Operator).tp_dict, "OR", make_descriptor(t_QueryParser$Operator::wrap_Object(*QueryParser$Operator::OR)));
          }

          static PyObject *t_QueryParser$Operator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryParser$Operator::initializeClass, 1)))
              return NULL;
            return t_QueryParser$Operator::wrap_Object(QueryParser$Operator(((t_QueryParser$Operator *) arg)->object.this$));
          }
          static PyObject *t_QueryParser$Operator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryParser$Operator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_QueryParser$Operator_of_(t_QueryParser$Operator *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_QueryParser$Operator_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            QueryParser$Operator result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::queryparser::classic::QueryParser$Operator::valueOf(a0));
              return t_QueryParser$Operator::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_QueryParser$Operator_values(PyTypeObject *type)
          {
            JArray< QueryParser$Operator > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::queryparser::classic::QueryParser$Operator::values());
            return JArray<jobject>(result.this$).wrap(t_QueryParser$Operator::wrap_jobject);
          }
          static PyObject *t_QueryParser$Operator_get__parameters_(t_QueryParser$Operator *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/StringDistance.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *StringDistance::class$ = NULL;
          jmethodID *StringDistance::mids$ = NULL;
          bool StringDistance::live$ = false;

          jclass StringDistance::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/StringDistance");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getDistance_4a264752] = env->getMethodID(cls, "getDistance", "(Ljava/lang/String;Ljava/lang/String;)F");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jfloat StringDistance::getDistance(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_getDistance_4a264752], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_StringDistance_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StringDistance_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StringDistance_getDistance(t_StringDistance *self, PyObject *args);

          static PyMethodDef t_StringDistance__methods_[] = {
            DECLARE_METHOD(t_StringDistance, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StringDistance, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StringDistance, getDistance, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StringDistance, t_StringDistance, ::java::lang::Object, StringDistance, abstract_init, 0, 0, 0, 0, 0);

          void t_StringDistance::install(PyObject *module)
          {
            installType(&PY_TYPE(StringDistance), module, "StringDistance", 0);
          }

          void t_StringDistance::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StringDistance).tp_dict, "class_", make_descriptor(StringDistance::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StringDistance).tp_dict, "wrapfn_", make_descriptor(t_StringDistance::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StringDistance).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StringDistance_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StringDistance::initializeClass, 1)))
              return NULL;
            return t_StringDistance::wrap_Object(StringDistance(((t_StringDistance *) arg)->object.this$));
          }
          static PyObject *t_StringDistance_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StringDistance::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_StringDistance_getDistance(t_StringDistance *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jfloat result;

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getDistance(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "getDistance", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/commongrams/CommonGramsQueryFilter.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/commongrams/CommonGramsFilter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace commongrams {

          ::java::lang::Class *CommonGramsQueryFilter::class$ = NULL;
          jmethodID *CommonGramsQueryFilter::mids$ = NULL;
          bool CommonGramsQueryFilter::live$ = false;

          jclass CommonGramsQueryFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/commongrams/CommonGramsQueryFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_625c9356] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/commongrams/CommonGramsFilter;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_isGramType_54c6a16a] = env->getMethodID(cls, "isGramType", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CommonGramsQueryFilter::CommonGramsQueryFilter(const ::org::apache::lucene::analysis::commongrams::CommonGramsFilter & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_625c9356, a0.this$)) {}

          jboolean CommonGramsQueryFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          jboolean CommonGramsQueryFilter::isGramType() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isGramType_54c6a16a]);
          }

          void CommonGramsQueryFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace commongrams {
          static PyObject *t_CommonGramsQueryFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CommonGramsQueryFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CommonGramsQueryFilter_init_(t_CommonGramsQueryFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CommonGramsQueryFilter_incrementToken(t_CommonGramsQueryFilter *self, PyObject *args);
          static PyObject *t_CommonGramsQueryFilter_isGramType(t_CommonGramsQueryFilter *self);
          static PyObject *t_CommonGramsQueryFilter_reset(t_CommonGramsQueryFilter *self, PyObject *args);
          static PyObject *t_CommonGramsQueryFilter_get__gramType(t_CommonGramsQueryFilter *self, void *data);
          static PyGetSetDef t_CommonGramsQueryFilter__fields_[] = {
            DECLARE_GET_FIELD(t_CommonGramsQueryFilter, gramType),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CommonGramsQueryFilter__methods_[] = {
            DECLARE_METHOD(t_CommonGramsQueryFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CommonGramsQueryFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CommonGramsQueryFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_CommonGramsQueryFilter, isGramType, METH_NOARGS),
            DECLARE_METHOD(t_CommonGramsQueryFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CommonGramsQueryFilter, t_CommonGramsQueryFilter, ::org::apache::lucene::analysis::TokenFilter, CommonGramsQueryFilter, t_CommonGramsQueryFilter_init_, 0, 0, t_CommonGramsQueryFilter__fields_, 0, 0);

          void t_CommonGramsQueryFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(CommonGramsQueryFilter), module, "CommonGramsQueryFilter", 0);
          }

          void t_CommonGramsQueryFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CommonGramsQueryFilter).tp_dict, "class_", make_descriptor(CommonGramsQueryFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CommonGramsQueryFilter).tp_dict, "wrapfn_", make_descriptor(t_CommonGramsQueryFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CommonGramsQueryFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CommonGramsQueryFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CommonGramsQueryFilter::initializeClass, 1)))
              return NULL;
            return t_CommonGramsQueryFilter::wrap_Object(CommonGramsQueryFilter(((t_CommonGramsQueryFilter *) arg)->object.this$));
          }
          static PyObject *t_CommonGramsQueryFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CommonGramsQueryFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CommonGramsQueryFilter_init_(t_CommonGramsQueryFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::commongrams::CommonGramsFilter a0((jobject) NULL);
            CommonGramsQueryFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::commongrams::CommonGramsFilter::initializeClass, &a0))
            {
              INT_CALL(object = CommonGramsQueryFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CommonGramsQueryFilter_incrementToken(t_CommonGramsQueryFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(CommonGramsQueryFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_CommonGramsQueryFilter_isGramType(t_CommonGramsQueryFilter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isGramType());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_CommonGramsQueryFilter_reset(t_CommonGramsQueryFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CommonGramsQueryFilter), (PyObject *) self, "reset", args, 2);
          }

          static PyObject *t_CommonGramsQueryFilter_get__gramType(t_CommonGramsQueryFilter *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isGramType());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/SetKeywordMarkerFilter.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *SetKeywordMarkerFilter::class$ = NULL;
          jmethodID *SetKeywordMarkerFilter::mids$ = NULL;
          bool SetKeywordMarkerFilter::live$ = false;

          jclass SetKeywordMarkerFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/SetKeywordMarkerFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_64fb9de3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_isKeyword_54c6a16a] = env->getMethodID(cls, "isKeyword", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SetKeywordMarkerFilter::SetKeywordMarkerFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::miscellaneous::KeywordMarkerFilter(env->newObject(initializeClass, &mids$, mid_init$_64fb9de3, a0.this$, a1.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_SetKeywordMarkerFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SetKeywordMarkerFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SetKeywordMarkerFilter_init_(t_SetKeywordMarkerFilter *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_SetKeywordMarkerFilter__methods_[] = {
            DECLARE_METHOD(t_SetKeywordMarkerFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SetKeywordMarkerFilter, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SetKeywordMarkerFilter, t_SetKeywordMarkerFilter, ::org::apache::lucene::analysis::miscellaneous::KeywordMarkerFilter, SetKeywordMarkerFilter, t_SetKeywordMarkerFilter_init_, 0, 0, 0, 0, 0);

          void t_SetKeywordMarkerFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(SetKeywordMarkerFilter), module, "SetKeywordMarkerFilter", 0);
          }

          void t_SetKeywordMarkerFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SetKeywordMarkerFilter).tp_dict, "class_", make_descriptor(SetKeywordMarkerFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SetKeywordMarkerFilter).tp_dict, "wrapfn_", make_descriptor(t_SetKeywordMarkerFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SetKeywordMarkerFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SetKeywordMarkerFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SetKeywordMarkerFilter::initializeClass, 1)))
              return NULL;
            return t_SetKeywordMarkerFilter::wrap_Object(SetKeywordMarkerFilter(((t_SetKeywordMarkerFilter *) arg)->object.this$));
          }
          static PyObject *t_SetKeywordMarkerFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SetKeywordMarkerFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SetKeywordMarkerFilter_init_(t_SetKeywordMarkerFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
            PyTypeObject **p1;
            SetKeywordMarkerFilter object((jobject) NULL);

            if (!parseArgs(args, "kK", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
            {
              INT_CALL(object = SetKeywordMarkerFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/ext/ExtensionQuery.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/classic/QueryParser.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace ext {

          ::java::lang::Class *ExtensionQuery::class$ = NULL;
          jmethodID *ExtensionQuery::mids$ = NULL;
          bool ExtensionQuery::live$ = false;

          jclass ExtensionQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/ext/ExtensionQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_a24cebd3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/classic/QueryParser;Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getRawQueryString_14c7b5c5] = env->getMethodID(cls, "getRawQueryString", "()Ljava/lang/String;");
              mids$[mid_getTopLevelParser_f96fcc72] = env->getMethodID(cls, "getTopLevelParser", "()Lorg/apache/lucene/queryparser/classic/QueryParser;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ExtensionQuery::ExtensionQuery(const ::org::apache::lucene::queryparser::classic::QueryParser & a0, const ::java::lang::String & a1, const ::java::lang::String & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a24cebd3, a0.this$, a1.this$, a2.this$)) {}

          ::java::lang::String ExtensionQuery::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
          }

          ::java::lang::String ExtensionQuery::getRawQueryString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getRawQueryString_14c7b5c5]));
          }

          ::org::apache::lucene::queryparser::classic::QueryParser ExtensionQuery::getTopLevelParser() const
          {
            return ::org::apache::lucene::queryparser::classic::QueryParser(env->callObjectMethod(this$, mids$[mid_getTopLevelParser_f96fcc72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace ext {
          static PyObject *t_ExtensionQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ExtensionQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ExtensionQuery_init_(t_ExtensionQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ExtensionQuery_getField(t_ExtensionQuery *self);
          static PyObject *t_ExtensionQuery_getRawQueryString(t_ExtensionQuery *self);
          static PyObject *t_ExtensionQuery_getTopLevelParser(t_ExtensionQuery *self);
          static PyObject *t_ExtensionQuery_get__field(t_ExtensionQuery *self, void *data);
          static PyObject *t_ExtensionQuery_get__rawQueryString(t_ExtensionQuery *self, void *data);
          static PyObject *t_ExtensionQuery_get__topLevelParser(t_ExtensionQuery *self, void *data);
          static PyGetSetDef t_ExtensionQuery__fields_[] = {
            DECLARE_GET_FIELD(t_ExtensionQuery, field),
            DECLARE_GET_FIELD(t_ExtensionQuery, rawQueryString),
            DECLARE_GET_FIELD(t_ExtensionQuery, topLevelParser),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ExtensionQuery__methods_[] = {
            DECLARE_METHOD(t_ExtensionQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ExtensionQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ExtensionQuery, getField, METH_NOARGS),
            DECLARE_METHOD(t_ExtensionQuery, getRawQueryString, METH_NOARGS),
            DECLARE_METHOD(t_ExtensionQuery, getTopLevelParser, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ExtensionQuery, t_ExtensionQuery, ::java::lang::Object, ExtensionQuery, t_ExtensionQuery_init_, 0, 0, t_ExtensionQuery__fields_, 0, 0);

          void t_ExtensionQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(ExtensionQuery), module, "ExtensionQuery", 0);
          }

          void t_ExtensionQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ExtensionQuery).tp_dict, "class_", make_descriptor(ExtensionQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ExtensionQuery).tp_dict, "wrapfn_", make_descriptor(t_ExtensionQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ExtensionQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ExtensionQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ExtensionQuery::initializeClass, 1)))
              return NULL;
            return t_ExtensionQuery::wrap_Object(ExtensionQuery(((t_ExtensionQuery *) arg)->object.this$));
          }
          static PyObject *t_ExtensionQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ExtensionQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ExtensionQuery_init_(t_ExtensionQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::queryparser::classic::QueryParser a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            ExtensionQuery object((jobject) NULL);

            if (!parseArgs(args, "kss", ::org::apache::lucene::queryparser::classic::QueryParser::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = ExtensionQuery(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ExtensionQuery_getField(t_ExtensionQuery *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getField());
            return j2p(result);
          }

          static PyObject *t_ExtensionQuery_getRawQueryString(t_ExtensionQuery *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getRawQueryString());
            return j2p(result);
          }

          static PyObject *t_ExtensionQuery_getTopLevelParser(t_ExtensionQuery *self)
          {
            ::org::apache::lucene::queryparser::classic::QueryParser result((jobject) NULL);
            OBJ_CALL(result = self->object.getTopLevelParser());
            return ::org::apache::lucene::queryparser::classic::t_QueryParser::wrap_Object(result);
          }

          static PyObject *t_ExtensionQuery_get__field(t_ExtensionQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }

          static PyObject *t_ExtensionQuery_get__rawQueryString(t_ExtensionQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getRawQueryString());
            return j2p(value);
          }

          static PyObject *t_ExtensionQuery_get__topLevelParser(t_ExtensionQuery *self, void *data)
          {
            ::org::apache::lucene::queryparser::classic::QueryParser value((jobject) NULL);
            OBJ_CALL(value = self->object.getTopLevelParser());
            return ::org::apache::lucene::queryparser::classic::t_QueryParser::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/CachingTokenFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *CachingTokenFilter::class$ = NULL;
        jmethodID *CachingTokenFilter::mids$ = NULL;
        bool CachingTokenFilter::live$ = false;

        jclass CachingTokenFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/CachingTokenFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
            mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
            mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
            mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CachingTokenFilter::CachingTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

        void CachingTokenFilter::end() const
        {
          env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
        }

        jboolean CachingTokenFilter::incrementToken() const
        {
          return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
        }

        void CachingTokenFilter::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_CachingTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CachingTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CachingTokenFilter_init_(t_CachingTokenFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CachingTokenFilter_end(t_CachingTokenFilter *self, PyObject *args);
        static PyObject *t_CachingTokenFilter_incrementToken(t_CachingTokenFilter *self, PyObject *args);
        static PyObject *t_CachingTokenFilter_reset(t_CachingTokenFilter *self, PyObject *args);

        static PyMethodDef t_CachingTokenFilter__methods_[] = {
          DECLARE_METHOD(t_CachingTokenFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CachingTokenFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CachingTokenFilter, end, METH_VARARGS),
          DECLARE_METHOD(t_CachingTokenFilter, incrementToken, METH_VARARGS),
          DECLARE_METHOD(t_CachingTokenFilter, reset, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CachingTokenFilter, t_CachingTokenFilter, ::org::apache::lucene::analysis::TokenFilter, CachingTokenFilter, t_CachingTokenFilter_init_, 0, 0, 0, 0, 0);

        void t_CachingTokenFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(CachingTokenFilter), module, "CachingTokenFilter", 0);
        }

        void t_CachingTokenFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CachingTokenFilter).tp_dict, "class_", make_descriptor(CachingTokenFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CachingTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_CachingTokenFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CachingTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CachingTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CachingTokenFilter::initializeClass, 1)))
            return NULL;
          return t_CachingTokenFilter::wrap_Object(CachingTokenFilter(((t_CachingTokenFilter *) arg)->object.this$));
        }
        static PyObject *t_CachingTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CachingTokenFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CachingTokenFilter_init_(t_CachingTokenFilter *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
          CachingTokenFilter object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
          {
            INT_CALL(object = CachingTokenFilter(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CachingTokenFilter_end(t_CachingTokenFilter *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.end());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(CachingTokenFilter), (PyObject *) self, "end", args, 2);
        }

        static PyObject *t_CachingTokenFilter_incrementToken(t_CachingTokenFilter *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.incrementToken());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(CachingTokenFilter), (PyObject *) self, "incrementToken", args, 2);
        }

        static PyObject *t_CachingTokenFilter_reset(t_CachingTokenFilter *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.reset());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(CachingTokenFilter), (PyObject *) self, "reset", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/index/MergePolicy$OneMerge.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/util/Accountable.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/Iterable.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Query.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/index/DirectoryReader.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/IndexWriterConfig.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/TwoPhaseCommit.h"
#include "org/apache/lucene/index/IndexableField.h"
#include "org/apache/lucene/index/LiveIndexWriterConfig.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/document/Field.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexWriter::class$ = NULL;
        jmethodID *IndexWriter::mids$ = NULL;
        bool IndexWriter::live$ = false;
        jint IndexWriter::MAX_TERM_LENGTH = (jint) 0;
        ::java::lang::String *IndexWriter::SOURCE = NULL;
        ::java::lang::String *IndexWriter::SOURCE_ADDINDEXES_READERS = NULL;
        ::java::lang::String *IndexWriter::SOURCE_FLUSH = NULL;
        ::java::lang::String *IndexWriter::SOURCE_MERGE = NULL;
        ::java::lang::String *IndexWriter::WRITE_LOCK_NAME = NULL;

        jclass IndexWriter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexWriter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_02525b2d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/IndexWriterConfig;)V");
            mids$[mid_addDocument_d1cac205] = env->getMethodID(cls, "addDocument", "(Ljava/lang/Iterable;)V");
            mids$[mid_addDocument_f74a1d55] = env->getMethodID(cls, "addDocument", "(Ljava/lang/Iterable;Lorg/apache/lucene/analysis/Analyzer;)V");
            mids$[mid_addDocuments_d1cac205] = env->getMethodID(cls, "addDocuments", "(Ljava/lang/Iterable;)V");
            mids$[mid_addDocuments_f74a1d55] = env->getMethodID(cls, "addDocuments", "(Ljava/lang/Iterable;Lorg/apache/lucene/analysis/Analyzer;)V");
            mids$[mid_addIndexes_a20f8ee9] = env->getMethodID(cls, "addIndexes", "([Lorg/apache/lucene/index/IndexReader;)V");
            mids$[mid_addIndexes_160e6086] = env->getMethodID(cls, "addIndexes", "([Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_close_bb0c767f] = env->getMethodID(cls, "close", "(Z)V");
            mids$[mid_commit_54c6a166] = env->getMethodID(cls, "commit", "()V");
            mids$[mid_deleteAll_54c6a166] = env->getMethodID(cls, "deleteAll", "()V");
            mids$[mid_deleteDocuments_c9f85e01] = env->getMethodID(cls, "deleteDocuments", "([Lorg/apache/lucene/index/Term;)V");
            mids$[mid_deleteDocuments_937b34d3] = env->getMethodID(cls, "deleteDocuments", "([Lorg/apache/lucene/search/Query;)V");
            mids$[mid_deleteUnusedFiles_54c6a166] = env->getMethodID(cls, "deleteUnusedFiles", "()V");
            mids$[mid_forceMerge_39c7bd3c] = env->getMethodID(cls, "forceMerge", "(I)V");
            mids$[mid_forceMerge_b3a85a05] = env->getMethodID(cls, "forceMerge", "(IZ)V");
            mids$[mid_forceMergeDeletes_54c6a166] = env->getMethodID(cls, "forceMergeDeletes", "()V");
            mids$[mid_forceMergeDeletes_bb0c767f] = env->getMethodID(cls, "forceMergeDeletes", "(Z)V");
            mids$[mid_getAnalyzer_347f60a9] = env->getMethodID(cls, "getAnalyzer", "()Lorg/apache/lucene/analysis/Analyzer;");
            mids$[mid_getCommitData_db60befd] = env->getMethodID(cls, "getCommitData", "()Ljava/util/Map;");
            mids$[mid_getConfig_d6b985f6] = env->getMethodID(cls, "getConfig", "()Lorg/apache/lucene/index/LiveIndexWriterConfig;");
            mids$[mid_getDirectory_1f3934bb] = env->getMethodID(cls, "getDirectory", "()Lorg/apache/lucene/store/Directory;");
            mids$[mid_getMergingSegments_2d2d7de4] = env->getMethodID(cls, "getMergingSegments", "()Ljava/util/Collection;");
            mids$[mid_getNextMerge_2a262a14] = env->getMethodID(cls, "getNextMerge", "()Lorg/apache/lucene/index/MergePolicy$OneMerge;");
            mids$[mid_getReader_1de06693] = env->getMethodID(cls, "getReader", "()Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_getReader_cfe2828e] = env->getMethodID(cls, "getReader", "(Z)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_hasDeletions_54c6a16a] = env->getMethodID(cls, "hasDeletions", "()Z");
            mids$[mid_hasPendingMerges_54c6a16a] = env->getMethodID(cls, "hasPendingMerges", "()Z");
            mids$[mid_hasUncommittedChanges_54c6a16a] = env->getMethodID(cls, "hasUncommittedChanges", "()Z");
            mids$[mid_isLocked_2e261efe] = env->getStaticMethodID(cls, "isLocked", "(Lorg/apache/lucene/store/Directory;)Z");
            mids$[mid_maxDoc_54c6a179] = env->getMethodID(cls, "maxDoc", "()I");
            mids$[mid_maybeMerge_54c6a166] = env->getMethodID(cls, "maybeMerge", "()V");
            mids$[mid_merge_54badd95] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/MergePolicy$OneMerge;)V");
            mids$[mid_numDeletedDocs_6649cdeb] = env->getMethodID(cls, "numDeletedDocs", "(Lorg/apache/lucene/index/SegmentCommitInfo;)I");
            mids$[mid_numDocs_54c6a179] = env->getMethodID(cls, "numDocs", "()I");
            mids$[mid_numRamDocs_54c6a179] = env->getMethodID(cls, "numRamDocs", "()I");
            mids$[mid_prepareCommit_54c6a166] = env->getMethodID(cls, "prepareCommit", "()V");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_ramSizeInBytes_54c6a17a] = env->getMethodID(cls, "ramSizeInBytes", "()J");
            mids$[mid_rollback_54c6a166] = env->getMethodID(cls, "rollback", "()V");
            mids$[mid_segString_14c7b5c5] = env->getMethodID(cls, "segString", "()Ljava/lang/String;");
            mids$[mid_segString_e5fcb63c] = env->getMethodID(cls, "segString", "(Ljava/lang/Iterable;)Ljava/lang/String;");
            mids$[mid_segString_edb3a3c3] = env->getMethodID(cls, "segString", "(Lorg/apache/lucene/index/SegmentCommitInfo;)Ljava/lang/String;");
            mids$[mid_setCommitData_4c9e2b1c] = env->getMethodID(cls, "setCommitData", "(Ljava/util/Map;)V");
            mids$[mid_tryDeleteDocument_1e4306e9] = env->getMethodID(cls, "tryDeleteDocument", "(Lorg/apache/lucene/index/IndexReader;I)Z");
            mids$[mid_unlock_2e261ef2] = env->getStaticMethodID(cls, "unlock", "(Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_updateBinaryDocValue_1aaa0ac7] = env->getMethodID(cls, "updateBinaryDocValue", "(Lorg/apache/lucene/index/Term;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_updateDocValues_48345845] = env->getMethodID(cls, "updateDocValues", "(Lorg/apache/lucene/index/Term;[Lorg/apache/lucene/document/Field;)V");
            mids$[mid_updateDocument_b5aef5e2] = env->getMethodID(cls, "updateDocument", "(Lorg/apache/lucene/index/Term;Ljava/lang/Iterable;)V");
            mids$[mid_updateDocument_4d995db8] = env->getMethodID(cls, "updateDocument", "(Lorg/apache/lucene/index/Term;Ljava/lang/Iterable;Lorg/apache/lucene/analysis/Analyzer;)V");
            mids$[mid_updateDocuments_b5aef5e2] = env->getMethodID(cls, "updateDocuments", "(Lorg/apache/lucene/index/Term;Ljava/lang/Iterable;)V");
            mids$[mid_updateDocuments_4d995db8] = env->getMethodID(cls, "updateDocuments", "(Lorg/apache/lucene/index/Term;Ljava/lang/Iterable;Lorg/apache/lucene/analysis/Analyzer;)V");
            mids$[mid_updateNumericDocValue_3866ef1c] = env->getMethodID(cls, "updateNumericDocValue", "(Lorg/apache/lucene/index/Term;Ljava/lang/String;J)V");
            mids$[mid_waitForMerges_54c6a166] = env->getMethodID(cls, "waitForMerges", "()V");
            mids$[mid_flush_46f2e2c4] = env->getMethodID(cls, "flush", "(ZZ)V");
            mids$[mid_ensureOpen_54c6a166] = env->getMethodID(cls, "ensureOpen", "()V");
            mids$[mid_ensureOpen_bb0c767f] = env->getMethodID(cls, "ensureOpen", "(Z)V");
            mids$[mid_doAfterFlush_54c6a166] = env->getMethodID(cls, "doAfterFlush", "()V");
            mids$[mid_doBeforeFlush_54c6a166] = env->getMethodID(cls, "doBeforeFlush", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            MAX_TERM_LENGTH = env->getStaticIntField(cls, "MAX_TERM_LENGTH");
            SOURCE = new ::java::lang::String(env->getStaticObjectField(cls, "SOURCE", "Ljava/lang/String;"));
            SOURCE_ADDINDEXES_READERS = new ::java::lang::String(env->getStaticObjectField(cls, "SOURCE_ADDINDEXES_READERS", "Ljava/lang/String;"));
            SOURCE_FLUSH = new ::java::lang::String(env->getStaticObjectField(cls, "SOURCE_FLUSH", "Ljava/lang/String;"));
            SOURCE_MERGE = new ::java::lang::String(env->getStaticObjectField(cls, "SOURCE_MERGE", "Ljava/lang/String;"));
            WRITE_LOCK_NAME = new ::java::lang::String(env->getStaticObjectField(cls, "WRITE_LOCK_NAME", "Ljava/lang/String;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexWriter::IndexWriter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::IndexWriterConfig & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_02525b2d, a0.this$, a1.this$)) {}

        void IndexWriter::addDocument(const ::java::lang::Iterable & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addDocument_d1cac205], a0.this$);
        }

        void IndexWriter::addDocument(const ::java::lang::Iterable & a0, const ::org::apache::lucene::analysis::Analyzer & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_addDocument_f74a1d55], a0.this$, a1.this$);
        }

        void IndexWriter::addDocuments(const ::java::lang::Iterable & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addDocuments_d1cac205], a0.this$);
        }

        void IndexWriter::addDocuments(const ::java::lang::Iterable & a0, const ::org::apache::lucene::analysis::Analyzer & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_addDocuments_f74a1d55], a0.this$, a1.this$);
        }

        void IndexWriter::addIndexes(const JArray< ::org::apache::lucene::index::IndexReader > & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addIndexes_a20f8ee9], a0.this$);
        }

        void IndexWriter::addIndexes(const JArray< ::org::apache::lucene::store::Directory > & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addIndexes_160e6086], a0.this$);
        }

        void IndexWriter::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void IndexWriter::close(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_close_bb0c767f], a0);
        }

        void IndexWriter::commit() const
        {
          env->callVoidMethod(this$, mids$[mid_commit_54c6a166]);
        }

        void IndexWriter::deleteAll() const
        {
          env->callVoidMethod(this$, mids$[mid_deleteAll_54c6a166]);
        }

        void IndexWriter::deleteDocuments(const JArray< ::org::apache::lucene::index::Term > & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_deleteDocuments_c9f85e01], a0.this$);
        }

        void IndexWriter::deleteDocuments(const JArray< ::org::apache::lucene::search::Query > & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_deleteDocuments_937b34d3], a0.this$);
        }

        void IndexWriter::deleteUnusedFiles() const
        {
          env->callVoidMethod(this$, mids$[mid_deleteUnusedFiles_54c6a166]);
        }

        void IndexWriter::forceMerge(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_forceMerge_39c7bd3c], a0);
        }

        void IndexWriter::forceMerge(jint a0, jboolean a1) const
        {
          env->callVoidMethod(this$, mids$[mid_forceMerge_b3a85a05], a0, a1);
        }

        void IndexWriter::forceMergeDeletes() const
        {
          env->callVoidMethod(this$, mids$[mid_forceMergeDeletes_54c6a166]);
        }

        void IndexWriter::forceMergeDeletes(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_forceMergeDeletes_bb0c767f], a0);
        }

        ::org::apache::lucene::analysis::Analyzer IndexWriter::getAnalyzer() const
        {
          return ::org::apache::lucene::analysis::Analyzer(env->callObjectMethod(this$, mids$[mid_getAnalyzer_347f60a9]));
        }

        ::java::util::Map IndexWriter::getCommitData() const
        {
          return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getCommitData_db60befd]));
        }

        ::org::apache::lucene::index::LiveIndexWriterConfig IndexWriter::getConfig() const
        {
          return ::org::apache::lucene::index::LiveIndexWriterConfig(env->callObjectMethod(this$, mids$[mid_getConfig_d6b985f6]));
        }

        ::org::apache::lucene::store::Directory IndexWriter::getDirectory() const
        {
          return ::org::apache::lucene::store::Directory(env->callObjectMethod(this$, mids$[mid_getDirectory_1f3934bb]));
        }

        ::java::util::Collection IndexWriter::getMergingSegments() const
        {
          return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getMergingSegments_2d2d7de4]));
        }

        ::org::apache::lucene::index::MergePolicy$OneMerge IndexWriter::getNextMerge() const
        {
          return ::org::apache::lucene::index::MergePolicy$OneMerge(env->callObjectMethod(this$, mids$[mid_getNextMerge_2a262a14]));
        }

        ::org::apache::lucene::index::DirectoryReader IndexWriter::getReader() const
        {
          return ::org::apache::lucene::index::DirectoryReader(env->callObjectMethod(this$, mids$[mid_getReader_1de06693]));
        }

        ::org::apache::lucene::index::DirectoryReader IndexWriter::getReader(jboolean a0) const
        {
          return ::org::apache::lucene::index::DirectoryReader(env->callObjectMethod(this$, mids$[mid_getReader_cfe2828e], a0));
        }

        jboolean IndexWriter::hasDeletions() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasDeletions_54c6a16a]);
        }

        jboolean IndexWriter::hasPendingMerges() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasPendingMerges_54c6a16a]);
        }

        jboolean IndexWriter::hasUncommittedChanges() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasUncommittedChanges_54c6a16a]);
        }

        jboolean IndexWriter::isLocked(const ::org::apache::lucene::store::Directory & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_isLocked_2e261efe], a0.this$);
        }

        jint IndexWriter::maxDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_maxDoc_54c6a179]);
        }

        void IndexWriter::maybeMerge() const
        {
          env->callVoidMethod(this$, mids$[mid_maybeMerge_54c6a166]);
        }

        void IndexWriter::merge(const ::org::apache::lucene::index::MergePolicy$OneMerge & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_merge_54badd95], a0.this$);
        }

        jint IndexWriter::numDeletedDocs(const ::org::apache::lucene::index::SegmentCommitInfo & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_numDeletedDocs_6649cdeb], a0.this$);
        }

        jint IndexWriter::numDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_numDocs_54c6a179]);
        }

        jint IndexWriter::numRamDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_numRamDocs_54c6a179]);
        }

        void IndexWriter::prepareCommit() const
        {
          env->callVoidMethod(this$, mids$[mid_prepareCommit_54c6a166]);
        }

        jlong IndexWriter::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }

        jlong IndexWriter::ramSizeInBytes() const
        {
          return env->callLongMethod(this$, mids$[mid_ramSizeInBytes_54c6a17a]);
        }

        void IndexWriter::rollback() const
        {
          env->callVoidMethod(this$, mids$[mid_rollback_54c6a166]);
        }

        ::java::lang::String IndexWriter::segString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_segString_14c7b5c5]));
        }

        ::java::lang::String IndexWriter::segString(const ::java::lang::Iterable & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_segString_e5fcb63c], a0.this$));
        }

        ::java::lang::String IndexWriter::segString(const ::org::apache::lucene::index::SegmentCommitInfo & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_segString_edb3a3c3], a0.this$));
        }

        void IndexWriter::setCommitData(const ::java::util::Map & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setCommitData_4c9e2b1c], a0.this$);
        }

        jboolean IndexWriter::tryDeleteDocument(const ::org::apache::lucene::index::IndexReader & a0, jint a1) const
        {
          return env->callBooleanMethod(this$, mids$[mid_tryDeleteDocument_1e4306e9], a0.this$, a1);
        }

        void IndexWriter::unlock(const ::org::apache::lucene::store::Directory & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_unlock_2e261ef2], a0.this$);
        }

        void IndexWriter::updateBinaryDocValue(const ::org::apache::lucene::index::Term & a0, const ::java::lang::String & a1, const ::org::apache::lucene::util::BytesRef & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_updateBinaryDocValue_1aaa0ac7], a0.this$, a1.this$, a2.this$);
        }

        void IndexWriter::updateDocValues(const ::org::apache::lucene::index::Term & a0, const JArray< ::org::apache::lucene::document::Field > & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_updateDocValues_48345845], a0.this$, a1.this$);
        }

        void IndexWriter::updateDocument(const ::org::apache::lucene::index::Term & a0, const ::java::lang::Iterable & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_updateDocument_b5aef5e2], a0.this$, a1.this$);
        }

        void IndexWriter::updateDocument(const ::org::apache::lucene::index::Term & a0, const ::java::lang::Iterable & a1, const ::org::apache::lucene::analysis::Analyzer & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_updateDocument_4d995db8], a0.this$, a1.this$, a2.this$);
        }

        void IndexWriter::updateDocuments(const ::org::apache::lucene::index::Term & a0, const ::java::lang::Iterable & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_updateDocuments_b5aef5e2], a0.this$, a1.this$);
        }

        void IndexWriter::updateDocuments(const ::org::apache::lucene::index::Term & a0, const ::java::lang::Iterable & a1, const ::org::apache::lucene::analysis::Analyzer & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_updateDocuments_4d995db8], a0.this$, a1.this$, a2.this$);
        }

        void IndexWriter::updateNumericDocValue(const ::org::apache::lucene::index::Term & a0, const ::java::lang::String & a1, jlong a2) const
        {
          env->callVoidMethod(this$, mids$[mid_updateNumericDocValue_3866ef1c], a0.this$, a1.this$, a2);
        }

        void IndexWriter::waitForMerges() const
        {
          env->callVoidMethod(this$, mids$[mid_waitForMerges_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/index/IndexWriter$IndexReaderWarmer.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexWriter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexWriter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IndexWriter_init_(t_IndexWriter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IndexWriter_addDocument(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_addDocuments(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_addIndexes(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_close(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_commit(t_IndexWriter *self);
        static PyObject *t_IndexWriter_deleteAll(t_IndexWriter *self);
        static PyObject *t_IndexWriter_deleteDocuments(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_deleteUnusedFiles(t_IndexWriter *self);
        static PyObject *t_IndexWriter_forceMerge(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_forceMergeDeletes(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_getAnalyzer(t_IndexWriter *self);
        static PyObject *t_IndexWriter_getCommitData(t_IndexWriter *self);
        static PyObject *t_IndexWriter_getConfig(t_IndexWriter *self);
        static PyObject *t_IndexWriter_getDirectory(t_IndexWriter *self);
        static PyObject *t_IndexWriter_getMergingSegments(t_IndexWriter *self);
        static PyObject *t_IndexWriter_getNextMerge(t_IndexWriter *self);
        static PyObject *t_IndexWriter_getReader(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_hasDeletions(t_IndexWriter *self);
        static PyObject *t_IndexWriter_hasPendingMerges(t_IndexWriter *self);
        static PyObject *t_IndexWriter_hasUncommittedChanges(t_IndexWriter *self);
        static PyObject *t_IndexWriter_isLocked(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexWriter_maxDoc(t_IndexWriter *self);
        static PyObject *t_IndexWriter_maybeMerge(t_IndexWriter *self);
        static PyObject *t_IndexWriter_merge(t_IndexWriter *self, PyObject *arg);
        static PyObject *t_IndexWriter_numDeletedDocs(t_IndexWriter *self, PyObject *arg);
        static PyObject *t_IndexWriter_numDocs(t_IndexWriter *self);
        static PyObject *t_IndexWriter_numRamDocs(t_IndexWriter *self);
        static PyObject *t_IndexWriter_prepareCommit(t_IndexWriter *self);
        static PyObject *t_IndexWriter_ramBytesUsed(t_IndexWriter *self);
        static PyObject *t_IndexWriter_ramSizeInBytes(t_IndexWriter *self);
        static PyObject *t_IndexWriter_rollback(t_IndexWriter *self);
        static PyObject *t_IndexWriter_segString(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_setCommitData(t_IndexWriter *self, PyObject *arg);
        static PyObject *t_IndexWriter_tryDeleteDocument(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_unlock(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexWriter_updateBinaryDocValue(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_updateDocValues(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_updateDocument(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_updateDocuments(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_updateNumericDocValue(t_IndexWriter *self, PyObject *args);
        static PyObject *t_IndexWriter_waitForMerges(t_IndexWriter *self);
        static PyObject *t_IndexWriter_get__analyzer(t_IndexWriter *self, void *data);
        static PyObject *t_IndexWriter_get__commitData(t_IndexWriter *self, void *data);
        static int t_IndexWriter_set__commitData(t_IndexWriter *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriter_get__config(t_IndexWriter *self, void *data);
        static PyObject *t_IndexWriter_get__directory(t_IndexWriter *self, void *data);
        static PyObject *t_IndexWriter_get__mergingSegments(t_IndexWriter *self, void *data);
        static PyObject *t_IndexWriter_get__nextMerge(t_IndexWriter *self, void *data);
        static PyObject *t_IndexWriter_get__reader(t_IndexWriter *self, void *data);
        static PyGetSetDef t_IndexWriter__fields_[] = {
          DECLARE_GET_FIELD(t_IndexWriter, analyzer),
          DECLARE_GETSET_FIELD(t_IndexWriter, commitData),
          DECLARE_GET_FIELD(t_IndexWriter, config),
          DECLARE_GET_FIELD(t_IndexWriter, directory),
          DECLARE_GET_FIELD(t_IndexWriter, mergingSegments),
          DECLARE_GET_FIELD(t_IndexWriter, nextMerge),
          DECLARE_GET_FIELD(t_IndexWriter, reader),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexWriter__methods_[] = {
          DECLARE_METHOD(t_IndexWriter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexWriter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexWriter, addDocument, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, addDocuments, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, addIndexes, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, close, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, commit, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, deleteAll, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, deleteDocuments, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, deleteUnusedFiles, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, forceMerge, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, forceMergeDeletes, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, getAnalyzer, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, getCommitData, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, getConfig, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, getDirectory, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, getMergingSegments, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, getNextMerge, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, getReader, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, hasDeletions, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, hasPendingMerges, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, hasUncommittedChanges, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, isLocked, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexWriter, maxDoc, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, maybeMerge, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, merge, METH_O),
          DECLARE_METHOD(t_IndexWriter, numDeletedDocs, METH_O),
          DECLARE_METHOD(t_IndexWriter, numDocs, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, numRamDocs, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, prepareCommit, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, ramBytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, ramSizeInBytes, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, rollback, METH_NOARGS),
          DECLARE_METHOD(t_IndexWriter, segString, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, setCommitData, METH_O),
          DECLARE_METHOD(t_IndexWriter, tryDeleteDocument, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, unlock, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexWriter, updateBinaryDocValue, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, updateDocValues, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, updateDocument, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, updateDocuments, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, updateNumericDocValue, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriter, waitForMerges, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexWriter, t_IndexWriter, ::java::lang::Object, IndexWriter, t_IndexWriter_init_, 0, 0, t_IndexWriter__fields_, 0, 0);

        void t_IndexWriter::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexWriter), module, "IndexWriter", 0);
          PyDict_SetItemString(PY_TYPE(IndexWriter).tp_dict, "IndexReaderWarmer", make_descriptor(&PY_TYPE(IndexWriter$IndexReaderWarmer)));
        }

        void t_IndexWriter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexWriter).tp_dict, "class_", make_descriptor(IndexWriter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexWriter).tp_dict, "wrapfn_", make_descriptor(t_IndexWriter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(IndexWriter::initializeClass);
          PyDict_SetItemString(PY_TYPE(IndexWriter).tp_dict, "MAX_TERM_LENGTH", make_descriptor(IndexWriter::MAX_TERM_LENGTH));
          PyDict_SetItemString(PY_TYPE(IndexWriter).tp_dict, "SOURCE", make_descriptor(j2p(*IndexWriter::SOURCE)));
          PyDict_SetItemString(PY_TYPE(IndexWriter).tp_dict, "SOURCE_ADDINDEXES_READERS", make_descriptor(j2p(*IndexWriter::SOURCE_ADDINDEXES_READERS)));
          PyDict_SetItemString(PY_TYPE(IndexWriter).tp_dict, "SOURCE_FLUSH", make_descriptor(j2p(*IndexWriter::SOURCE_FLUSH)));
          PyDict_SetItemString(PY_TYPE(IndexWriter).tp_dict, "SOURCE_MERGE", make_descriptor(j2p(*IndexWriter::SOURCE_MERGE)));
          PyDict_SetItemString(PY_TYPE(IndexWriter).tp_dict, "WRITE_LOCK_NAME", make_descriptor(j2p(*IndexWriter::WRITE_LOCK_NAME)));
        }

        static PyObject *t_IndexWriter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexWriter::initializeClass, 1)))
            return NULL;
          return t_IndexWriter::wrap_Object(IndexWriter(((t_IndexWriter *) arg)->object.this$));
        }
        static PyObject *t_IndexWriter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexWriter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IndexWriter_init_(t_IndexWriter *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::org::apache::lucene::index::IndexWriterConfig a1((jobject) NULL);
          IndexWriter object((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::IndexWriterConfig::initializeClass, &a0, &a1))
          {
            INT_CALL(object = IndexWriter(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IndexWriter_addDocument(t_IndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::Iterable a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArgs(args, "K", ::java::lang::Iterable::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_))
              {
                OBJ_CALL(self->object.addDocument(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::java::lang::Iterable a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::lang::Iterable::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_, &a1))
              {
                OBJ_CALL(self->object.addDocument(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "addDocument", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_addDocuments(t_IndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::Iterable a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArgs(args, "K", ::java::lang::Iterable::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_))
              {
                OBJ_CALL(self->object.addDocuments(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::java::lang::Iterable a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::lang::Iterable::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_, &a1))
              {
                OBJ_CALL(self->object.addDocuments(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "addDocuments", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_addIndexes(t_IndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::org::apache::lucene::index::IndexReader > a0((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
              {
                OBJ_CALL(self->object.addIndexes(a0));
                Py_RETURN_NONE;
              }
            }
            {
              JArray< ::org::apache::lucene::store::Directory > a0((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
              {
                OBJ_CALL(self->object.addIndexes(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "addIndexes", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_close(t_IndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }
            break;
           case 1:
            {
              jboolean a0;

              if (!parseArgs(args, "Z", &a0))
              {
                OBJ_CALL(self->object.close(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "close", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_commit(t_IndexWriter *self)
        {
          OBJ_CALL(self->object.commit());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexWriter_deleteAll(t_IndexWriter *self)
        {
          OBJ_CALL(self->object.deleteAll());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexWriter_deleteDocuments(t_IndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::org::apache::lucene::index::Term > a0((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                OBJ_CALL(self->object.deleteDocuments(a0));
                Py_RETURN_NONE;
              }
            }
            {
              JArray< ::org::apache::lucene::search::Query > a0((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::search::Query::initializeClass, &a0))
              {
                OBJ_CALL(self->object.deleteDocuments(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "deleteDocuments", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_deleteUnusedFiles(t_IndexWriter *self)
        {
          OBJ_CALL(self->object.deleteUnusedFiles());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexWriter_forceMerge(t_IndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(self->object.forceMerge(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              jint a0;
              jboolean a1;

              if (!parseArgs(args, "IZ", &a0, &a1))
              {
                OBJ_CALL(self->object.forceMerge(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "forceMerge", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_forceMergeDeletes(t_IndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              OBJ_CALL(self->object.forceMergeDeletes());
              Py_RETURN_NONE;
            }
            break;
           case 1:
            {
              jboolean a0;

              if (!parseArgs(args, "Z", &a0))
              {
                OBJ_CALL(self->object.forceMergeDeletes(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "forceMergeDeletes", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_getAnalyzer(t_IndexWriter *self)
        {
          ::org::apache::lucene::analysis::Analyzer result((jobject) NULL);
          OBJ_CALL(result = self->object.getAnalyzer());
          return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(result);
        }

        static PyObject *t_IndexWriter_getCommitData(t_IndexWriter *self)
        {
          ::java::util::Map result((jobject) NULL);
          OBJ_CALL(result = self->object.getCommitData());
          return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_IndexWriter_getConfig(t_IndexWriter *self)
        {
          ::org::apache::lucene::index::LiveIndexWriterConfig result((jobject) NULL);
          OBJ_CALL(result = self->object.getConfig());
          return ::org::apache::lucene::index::t_LiveIndexWriterConfig::wrap_Object(result);
        }

        static PyObject *t_IndexWriter_getDirectory(t_IndexWriter *self)
        {
          ::org::apache::lucene::store::Directory result((jobject) NULL);
          OBJ_CALL(result = self->object.getDirectory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(result);
        }

        static PyObject *t_IndexWriter_getMergingSegments(t_IndexWriter *self)
        {
          ::java::util::Collection result((jobject) NULL);
          OBJ_CALL(result = self->object.getMergingSegments());
          return ::java::util::t_Collection::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(SegmentCommitInfo));
        }

        static PyObject *t_IndexWriter_getNextMerge(t_IndexWriter *self)
        {
          ::org::apache::lucene::index::MergePolicy$OneMerge result((jobject) NULL);
          OBJ_CALL(result = self->object.getNextMerge());
          return ::org::apache::lucene::index::t_MergePolicy$OneMerge::wrap_Object(result);
        }

        static PyObject *t_IndexWriter_getReader(t_IndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ::org::apache::lucene::index::DirectoryReader result((jobject) NULL);
              OBJ_CALL(result = self->object.getReader());
              return ::org::apache::lucene::index::t_DirectoryReader::wrap_Object(result);
            }
            break;
           case 1:
            {
              jboolean a0;
              ::org::apache::lucene::index::DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "Z", &a0))
              {
                OBJ_CALL(result = self->object.getReader(a0));
                return ::org::apache::lucene::index::t_DirectoryReader::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "getReader", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_hasDeletions(t_IndexWriter *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasDeletions());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexWriter_hasPendingMerges(t_IndexWriter *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasPendingMerges());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexWriter_hasUncommittedChanges(t_IndexWriter *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasUncommittedChanges());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexWriter_isLocked(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::IndexWriter::isLocked(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError(type, "isLocked", arg);
          return NULL;
        }

        static PyObject *t_IndexWriter_maxDoc(t_IndexWriter *self)
        {
          jint result;
          OBJ_CALL(result = self->object.maxDoc());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_IndexWriter_maybeMerge(t_IndexWriter *self)
        {
          OBJ_CALL(self->object.maybeMerge());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexWriter_merge(t_IndexWriter *self, PyObject *arg)
        {
          ::org::apache::lucene::index::MergePolicy$OneMerge a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::MergePolicy$OneMerge::initializeClass, &a0))
          {
            OBJ_CALL(self->object.merge(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "merge", arg);
          return NULL;
        }

        static PyObject *t_IndexWriter_numDeletedDocs(t_IndexWriter *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentCommitInfo a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.numDeletedDocs(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "numDeletedDocs", arg);
          return NULL;
        }

        static PyObject *t_IndexWriter_numDocs(t_IndexWriter *self)
        {
          jint result;
          OBJ_CALL(result = self->object.numDocs());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_IndexWriter_numRamDocs(t_IndexWriter *self)
        {
          jint result;
          OBJ_CALL(result = self->object.numRamDocs());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_IndexWriter_prepareCommit(t_IndexWriter *self)
        {
          OBJ_CALL(self->object.prepareCommit());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexWriter_ramBytesUsed(t_IndexWriter *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_IndexWriter_ramSizeInBytes(t_IndexWriter *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramSizeInBytes());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_IndexWriter_rollback(t_IndexWriter *self)
        {
          OBJ_CALL(self->object.rollback());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexWriter_segString(t_IndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.segString());
              return j2p(result);
            }
            break;
           case 1:
            {
              ::java::lang::Iterable a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "K", ::java::lang::Iterable::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_))
              {
                OBJ_CALL(result = self->object.segString(a0));
                return j2p(result);
              }
            }
            {
              ::org::apache::lucene::index::SegmentCommitInfo a0((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.segString(a0));
                return j2p(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "segString", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_setCommitData(t_IndexWriter *self, PyObject *arg)
        {
          ::java::util::Map a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
          {
            OBJ_CALL(self->object.setCommitData(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setCommitData", arg);
          return NULL;
        }

        static PyObject *t_IndexWriter_tryDeleteDocument(t_IndexWriter *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          jint a1;
          jboolean result;

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.tryDeleteDocument(a0, a1));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "tryDeleteDocument", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_unlock(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::index::IndexWriter::unlock(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "unlock", arg);
          return NULL;
        }

        static PyObject *t_IndexWriter_updateBinaryDocValue(t_IndexWriter *self, PyObject *args)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a2((jobject) NULL);

          if (!parseArgs(args, "ksk", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.updateBinaryDocValue(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "updateBinaryDocValue", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_updateDocValues(t_IndexWriter *self, PyObject *args)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          JArray< ::org::apache::lucene::document::Field > a1((jobject) NULL);

          if (!parseArgs(args, "k[k", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::document::Field::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.updateDocValues(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "updateDocValues", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_updateDocument(t_IndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              ::java::lang::Iterable a1((jobject) NULL);
              PyTypeObject **p1;

              if (!parseArgs(args, "kK", ::org::apache::lucene::index::Term::initializeClass, ::java::lang::Iterable::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_))
              {
                OBJ_CALL(self->object.updateDocument(a0, a1));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              ::java::lang::Iterable a1((jobject) NULL);
              PyTypeObject **p1;
              ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);

              if (!parseArgs(args, "kKk", ::org::apache::lucene::index::Term::initializeClass, ::java::lang::Iterable::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_, &a2))
              {
                OBJ_CALL(self->object.updateDocument(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "updateDocument", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_updateDocuments(t_IndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              ::java::lang::Iterable a1((jobject) NULL);
              PyTypeObject **p1;

              if (!parseArgs(args, "kK", ::org::apache::lucene::index::Term::initializeClass, ::java::lang::Iterable::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_))
              {
                OBJ_CALL(self->object.updateDocuments(a0, a1));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              ::java::lang::Iterable a1((jobject) NULL);
              PyTypeObject **p1;
              ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);

              if (!parseArgs(args, "kKk", ::org::apache::lucene::index::Term::initializeClass, ::java::lang::Iterable::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_, &a2))
              {
                OBJ_CALL(self->object.updateDocuments(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "updateDocuments", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_updateNumericDocValue(t_IndexWriter *self, PyObject *args)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jlong a2;

          if (!parseArgs(args, "ksJ", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.updateNumericDocValue(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "updateNumericDocValue", args);
          return NULL;
        }

        static PyObject *t_IndexWriter_waitForMerges(t_IndexWriter *self)
        {
          OBJ_CALL(self->object.waitForMerges());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexWriter_get__analyzer(t_IndexWriter *self, void *data)
        {
          ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
          OBJ_CALL(value = self->object.getAnalyzer());
          return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(value);
        }

        static PyObject *t_IndexWriter_get__commitData(t_IndexWriter *self, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          OBJ_CALL(value = self->object.getCommitData());
          return ::java::util::t_Map::wrap_Object(value);
        }
        static int t_IndexWriter_set__commitData(t_IndexWriter *self, PyObject *arg, void *data)
        {
          {
            ::java::util::Map value((jobject) NULL);
            if (!parseArg(arg, "k", ::java::util::Map::initializeClass, &value))
            {
              INT_CALL(self->object.setCommitData(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "commitData", arg);
          return -1;
        }

        static PyObject *t_IndexWriter_get__config(t_IndexWriter *self, void *data)
        {
          ::org::apache::lucene::index::LiveIndexWriterConfig value((jobject) NULL);
          OBJ_CALL(value = self->object.getConfig());
          return ::org::apache::lucene::index::t_LiveIndexWriterConfig::wrap_Object(value);
        }

        static PyObject *t_IndexWriter_get__directory(t_IndexWriter *self, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          OBJ_CALL(value = self->object.getDirectory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
        }

        static PyObject *t_IndexWriter_get__mergingSegments(t_IndexWriter *self, void *data)
        {
          ::java::util::Collection value((jobject) NULL);
          OBJ_CALL(value = self->object.getMergingSegments());
          return ::java::util::t_Collection::wrap_Object(value);
        }

        static PyObject *t_IndexWriter_get__nextMerge(t_IndexWriter *self, void *data)
        {
          ::org::apache::lucene::index::MergePolicy$OneMerge value((jobject) NULL);
          OBJ_CALL(value = self->object.getNextMerge());
          return ::org::apache::lucene::index::t_MergePolicy$OneMerge::wrap_Object(value);
        }

        static PyObject *t_IndexWriter_get__reader(t_IndexWriter *self, void *data)
        {
          ::org::apache::lucene::index::DirectoryReader value((jobject) NULL);
          OBJ_CALL(value = self->object.getReader());
          return ::org::apache::lucene::index::t_DirectoryReader::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/LinkedHashMap.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *LinkedHashMap::class$ = NULL;
    jmethodID *LinkedHashMap::mids$ = NULL;
    bool LinkedHashMap::live$ = false;

    jclass LinkedHashMap::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/LinkedHashMap");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
        mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
        mids$[mid_init$_abdf2c51] = env->getMethodID(cls, "<init>", "(IF)V");
        mids$[mid_init$_514f44c2] = env->getMethodID(cls, "<init>", "(IFZ)V");
        mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
        mids$[mid_containsValue_290588e2] = env->getMethodID(cls, "containsValue", "(Ljava/lang/Object;)Z");
        mids$[mid_get_a932a95f] = env->getMethodID(cls, "get", "(Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_removeEldestEntry_8e61453a] = env->getMethodID(cls, "removeEldestEntry", "(Ljava/util/Map$Entry;)Z");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    LinkedHashMap::LinkedHashMap() : ::java::util::HashMap(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    LinkedHashMap::LinkedHashMap(const ::java::util::Map & a0) : ::java::util::HashMap(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

    LinkedHashMap::LinkedHashMap(jint a0) : ::java::util::HashMap(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

    LinkedHashMap::LinkedHashMap(jint a0, jfloat a1) : ::java::util::HashMap(env->newObject(initializeClass, &mids$, mid_init$_abdf2c51, a0, a1)) {}

    LinkedHashMap::LinkedHashMap(jint a0, jfloat a1, jboolean a2) : ::java::util::HashMap(env->newObject(initializeClass, &mids$, mid_init$_514f44c2, a0, a1, a2)) {}

    void LinkedHashMap::clear() const
    {
      env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
    }

    jboolean LinkedHashMap::containsValue(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_containsValue_290588e2], a0.this$);
    }

    ::java::lang::Object LinkedHashMap::get(const ::java::lang::Object & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_a932a95f], a0.this$));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_LinkedHashMap_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_LinkedHashMap_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_LinkedHashMap_of_(t_LinkedHashMap *self, PyObject *args);
    static int t_LinkedHashMap_init_(t_LinkedHashMap *self, PyObject *args, PyObject *kwds);
    static PyObject *t_LinkedHashMap_clear(t_LinkedHashMap *self, PyObject *args);
    static PyObject *t_LinkedHashMap_containsValue(t_LinkedHashMap *self, PyObject *args);
    static PyObject *t_LinkedHashMap_get(t_LinkedHashMap *self, PyObject *args);
    static PyObject *t_LinkedHashMap_get__parameters_(t_LinkedHashMap *self, void *data);
    static PyGetSetDef t_LinkedHashMap__fields_[] = {
      DECLARE_GET_FIELD(t_LinkedHashMap, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_LinkedHashMap__methods_[] = {
      DECLARE_METHOD(t_LinkedHashMap, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_LinkedHashMap, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_LinkedHashMap, of_, METH_VARARGS),
      DECLARE_METHOD(t_LinkedHashMap, clear, METH_VARARGS),
      DECLARE_METHOD(t_LinkedHashMap, containsValue, METH_VARARGS),
      DECLARE_METHOD(t_LinkedHashMap, get, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(LinkedHashMap, t_LinkedHashMap, ::java::util::HashMap, LinkedHashMap, t_LinkedHashMap_init_, 0, 0, t_LinkedHashMap__fields_, 0, 0);
    PyObject *t_LinkedHashMap::wrap_Object(const LinkedHashMap& object, PyTypeObject *p0, PyTypeObject *p1)
    {
      PyObject *obj = t_LinkedHashMap::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_LinkedHashMap *self = (t_LinkedHashMap *) obj;
        self->parameters[0] = p0;
        self->parameters[1] = p1;
      }
      return obj;
    }

    PyObject *t_LinkedHashMap::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
    {
      PyObject *obj = t_LinkedHashMap::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_LinkedHashMap *self = (t_LinkedHashMap *) obj;
        self->parameters[0] = p0;
        self->parameters[1] = p1;
      }
      return obj;
    }

    void t_LinkedHashMap::install(PyObject *module)
    {
      installType(&PY_TYPE(LinkedHashMap), module, "LinkedHashMap", 0);
    }

    void t_LinkedHashMap::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(LinkedHashMap).tp_dict, "class_", make_descriptor(LinkedHashMap::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(LinkedHashMap).tp_dict, "wrapfn_", make_descriptor(t_LinkedHashMap::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(LinkedHashMap).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_LinkedHashMap_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, LinkedHashMap::initializeClass, 1)))
        return NULL;
      return t_LinkedHashMap::wrap_Object(LinkedHashMap(((t_LinkedHashMap *) arg)->object.this$));
    }
    static PyObject *t_LinkedHashMap_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, LinkedHashMap::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_LinkedHashMap_of_(t_LinkedHashMap *self, PyObject *args)
    {
      if (!parseArg(args, "T", 2, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static int t_LinkedHashMap_init_(t_LinkedHashMap *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          LinkedHashMap object((jobject) NULL);

          INT_CALL(object = LinkedHashMap());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::util::Map a0((jobject) NULL);
          PyTypeObject **p0;
          LinkedHashMap object((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
          {
            INT_CALL(object = LinkedHashMap(a0));
            self->object = object;
            break;
          }
        }
        {
          jint a0;
          LinkedHashMap object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = LinkedHashMap(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          jint a0;
          jfloat a1;
          LinkedHashMap object((jobject) NULL);

          if (!parseArgs(args, "IF", &a0, &a1))
          {
            INT_CALL(object = LinkedHashMap(a0, a1));
            self->object = object;
            break;
          }
        }
        goto err;
       case 3:
        {
          jint a0;
          jfloat a1;
          jboolean a2;
          LinkedHashMap object((jobject) NULL);

          if (!parseArgs(args, "IFZ", &a0, &a1, &a2))
          {
            INT_CALL(object = LinkedHashMap(a0, a1, a2));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_LinkedHashMap_clear(t_LinkedHashMap *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.clear());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(LinkedHashMap), (PyObject *) self, "clear", args, 2);
    }

    static PyObject *t_LinkedHashMap_containsValue(t_LinkedHashMap *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.containsValue(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(LinkedHashMap), (PyObject *) self, "containsValue", args, 2);
    }

    static PyObject *t_LinkedHashMap_get(t_LinkedHashMap *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.get(a0));
        return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      return callSuper(&PY_TYPE(LinkedHashMap), (PyObject *) self, "get", args, 2);
    }
    static PyObject *t_LinkedHashMap_get__parameters_(t_LinkedHashMap *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QuotedFieldQueryNode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/CloneNotSupportedException.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *QuotedFieldQueryNode::class$ = NULL;
              jmethodID *QuotedFieldQueryNode::mids$ = NULL;
              bool QuotedFieldQueryNode::live$ = false;

              jclass QuotedFieldQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/QuotedFieldQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_ddd81d4e] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;II)V");
                  mids$[mid_cloneTree_e948922b] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QuotedFieldQueryNode;");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              QuotedFieldQueryNode::QuotedFieldQueryNode(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1, jint a2, jint a3) : ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode(env->newObject(initializeClass, &mids$, mid_init$_ddd81d4e, a0.this$, a1.this$, a2, a3)) {}

              QuotedFieldQueryNode QuotedFieldQueryNode::cloneTree() const
              {
                return QuotedFieldQueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_e948922b]));
              }

              ::java::lang::CharSequence QuotedFieldQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String QuotedFieldQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_QuotedFieldQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QuotedFieldQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_QuotedFieldQueryNode_init_(t_QuotedFieldQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_QuotedFieldQueryNode_cloneTree(t_QuotedFieldQueryNode *self, PyObject *args);
              static PyObject *t_QuotedFieldQueryNode_toQueryString(t_QuotedFieldQueryNode *self, PyObject *args);
              static PyObject *t_QuotedFieldQueryNode_toString(t_QuotedFieldQueryNode *self, PyObject *args);

              static PyMethodDef t_QuotedFieldQueryNode__methods_[] = {
                DECLARE_METHOD(t_QuotedFieldQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QuotedFieldQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QuotedFieldQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_QuotedFieldQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_QuotedFieldQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(QuotedFieldQueryNode, t_QuotedFieldQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode, QuotedFieldQueryNode, t_QuotedFieldQueryNode_init_, 0, 0, 0, 0, 0);

              void t_QuotedFieldQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(QuotedFieldQueryNode), module, "QuotedFieldQueryNode", 0);
              }

              void t_QuotedFieldQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(QuotedFieldQueryNode).tp_dict, "class_", make_descriptor(QuotedFieldQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(QuotedFieldQueryNode).tp_dict, "wrapfn_", make_descriptor(t_QuotedFieldQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(QuotedFieldQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_QuotedFieldQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, QuotedFieldQueryNode::initializeClass, 1)))
                  return NULL;
                return t_QuotedFieldQueryNode::wrap_Object(QuotedFieldQueryNode(((t_QuotedFieldQueryNode *) arg)->object.this$));
              }
              static PyObject *t_QuotedFieldQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, QuotedFieldQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_QuotedFieldQueryNode_init_(t_QuotedFieldQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::CharSequence a1((jobject) NULL);
                jint a2;
                jint a3;
                QuotedFieldQueryNode object((jobject) NULL);

                if (!parseArgs(args, "OOII", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = QuotedFieldQueryNode(a0, a1, a2, a3));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_QuotedFieldQueryNode_cloneTree(t_QuotedFieldQueryNode *self, PyObject *args)
              {
                QuotedFieldQueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return t_QuotedFieldQueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(QuotedFieldQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_QuotedFieldQueryNode_toQueryString(t_QuotedFieldQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(QuotedFieldQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_QuotedFieldQueryNode_toString(t_QuotedFieldQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(QuotedFieldQueryNode), (PyObject *) self, "toString", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/join/ToParentBlockJoinCollector.h"
#include "java/io/IOException.h"
#include "java/lang/Integer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/join/ToParentBlockJoinQuery.h"
#include "org/apache/lucene/search/Sort.h"
#include "org/apache/lucene/search/grouping/TopGroups.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {

          ::java::lang::Class *ToParentBlockJoinCollector::class$ = NULL;
          jmethodID *ToParentBlockJoinCollector::mids$ = NULL;
          bool ToParentBlockJoinCollector::live$ = false;

          jclass ToParentBlockJoinCollector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/join/ToParentBlockJoinCollector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e3369b2e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Sort;IZZ)V");
              mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
              mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
              mids$[mid_getMaxScore_54c6a176] = env->getMethodID(cls, "getMaxScore", "()F");
              mids$[mid_getTopGroups_aade7c1f] = env->getMethodID(cls, "getTopGroups", "(Lorg/apache/lucene/search/join/ToParentBlockJoinQuery;Lorg/apache/lucene/search/Sort;IIIZ)Lorg/apache/lucene/search/grouping/TopGroups;");
              mids$[mid_getTopGroupsWithAllChildDocs_2bbd93ad] = env->getMethodID(cls, "getTopGroupsWithAllChildDocs", "(Lorg/apache/lucene/search/join/ToParentBlockJoinQuery;Lorg/apache/lucene/search/Sort;IIZ)Lorg/apache/lucene/search/grouping/TopGroups;");
              mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
              mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ToParentBlockJoinCollector::ToParentBlockJoinCollector(const ::org::apache::lucene::search::Sort & a0, jint a1, jboolean a2, jboolean a3) : ::org::apache::lucene::search::Collector(env->newObject(initializeClass, &mids$, mid_init$_e3369b2e, a0.this$, a1, a2, a3)) {}

          jboolean ToParentBlockJoinCollector::acceptsDocsOutOfOrder() const
          {
            return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
          }

          void ToParentBlockJoinCollector::collect(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
          }

          jfloat ToParentBlockJoinCollector::getMaxScore() const
          {
            return env->callFloatMethod(this$, mids$[mid_getMaxScore_54c6a176]);
          }

          ::org::apache::lucene::search::grouping::TopGroups ToParentBlockJoinCollector::getTopGroups(const ::org::apache::lucene::search::join::ToParentBlockJoinQuery & a0, const ::org::apache::lucene::search::Sort & a1, jint a2, jint a3, jint a4, jboolean a5) const
          {
            return ::org::apache::lucene::search::grouping::TopGroups(env->callObjectMethod(this$, mids$[mid_getTopGroups_aade7c1f], a0.this$, a1.this$, a2, a3, a4, a5));
          }

          ::org::apache::lucene::search::grouping::TopGroups ToParentBlockJoinCollector::getTopGroupsWithAllChildDocs(const ::org::apache::lucene::search::join::ToParentBlockJoinQuery & a0, const ::org::apache::lucene::search::Sort & a1, jint a2, jint a3, jboolean a4) const
          {
            return ::org::apache::lucene::search::grouping::TopGroups(env->callObjectMethod(this$, mids$[mid_getTopGroupsWithAllChildDocs_2bbd93ad], a0.this$, a1.this$, a2, a3, a4));
          }

          void ToParentBlockJoinCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
          }

          void ToParentBlockJoinCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {
          static PyObject *t_ToParentBlockJoinCollector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ToParentBlockJoinCollector_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ToParentBlockJoinCollector_init_(t_ToParentBlockJoinCollector *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ToParentBlockJoinCollector_acceptsDocsOutOfOrder(t_ToParentBlockJoinCollector *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinCollector_collect(t_ToParentBlockJoinCollector *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinCollector_getMaxScore(t_ToParentBlockJoinCollector *self);
          static PyObject *t_ToParentBlockJoinCollector_getTopGroups(t_ToParentBlockJoinCollector *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinCollector_getTopGroupsWithAllChildDocs(t_ToParentBlockJoinCollector *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinCollector_setNextReader(t_ToParentBlockJoinCollector *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinCollector_setScorer(t_ToParentBlockJoinCollector *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinCollector_get__maxScore(t_ToParentBlockJoinCollector *self, void *data);
          static int t_ToParentBlockJoinCollector_set__nextReader(t_ToParentBlockJoinCollector *self, PyObject *arg, void *data);
          static int t_ToParentBlockJoinCollector_set__scorer(t_ToParentBlockJoinCollector *self, PyObject *arg, void *data);
          static PyGetSetDef t_ToParentBlockJoinCollector__fields_[] = {
            DECLARE_GET_FIELD(t_ToParentBlockJoinCollector, maxScore),
            DECLARE_SET_FIELD(t_ToParentBlockJoinCollector, nextReader),
            DECLARE_SET_FIELD(t_ToParentBlockJoinCollector, scorer),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ToParentBlockJoinCollector__methods_[] = {
            DECLARE_METHOD(t_ToParentBlockJoinCollector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToParentBlockJoinCollector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToParentBlockJoinCollector, acceptsDocsOutOfOrder, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinCollector, collect, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinCollector, getMaxScore, METH_NOARGS),
            DECLARE_METHOD(t_ToParentBlockJoinCollector, getTopGroups, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinCollector, getTopGroupsWithAllChildDocs, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinCollector, setNextReader, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinCollector, setScorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ToParentBlockJoinCollector, t_ToParentBlockJoinCollector, ::org::apache::lucene::search::Collector, ToParentBlockJoinCollector, t_ToParentBlockJoinCollector_init_, 0, 0, t_ToParentBlockJoinCollector__fields_, 0, 0);

          void t_ToParentBlockJoinCollector::install(PyObject *module)
          {
            installType(&PY_TYPE(ToParentBlockJoinCollector), module, "ToParentBlockJoinCollector", 0);
          }

          void t_ToParentBlockJoinCollector::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinCollector).tp_dict, "class_", make_descriptor(ToParentBlockJoinCollector::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinCollector).tp_dict, "wrapfn_", make_descriptor(t_ToParentBlockJoinCollector::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ToParentBlockJoinCollector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ToParentBlockJoinCollector::initializeClass, 1)))
              return NULL;
            return t_ToParentBlockJoinCollector::wrap_Object(ToParentBlockJoinCollector(((t_ToParentBlockJoinCollector *) arg)->object.this$));
          }
          static PyObject *t_ToParentBlockJoinCollector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ToParentBlockJoinCollector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ToParentBlockJoinCollector_init_(t_ToParentBlockJoinCollector *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::Sort a0((jobject) NULL);
            jint a1;
            jboolean a2;
            jboolean a3;
            ToParentBlockJoinCollector object((jobject) NULL);

            if (!parseArgs(args, "kIZZ", ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = ToParentBlockJoinCollector(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ToParentBlockJoinCollector_acceptsDocsOutOfOrder(t_ToParentBlockJoinCollector *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
          }

          static PyObject *t_ToParentBlockJoinCollector_collect(t_ToParentBlockJoinCollector *self, PyObject *args)
          {
            jint a0;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(self->object.collect(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinCollector), (PyObject *) self, "collect", args, 2);
          }

          static PyObject *t_ToParentBlockJoinCollector_getMaxScore(t_ToParentBlockJoinCollector *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getMaxScore());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_ToParentBlockJoinCollector_getTopGroups(t_ToParentBlockJoinCollector *self, PyObject *args)
          {
            ::org::apache::lucene::search::join::ToParentBlockJoinQuery a0((jobject) NULL);
            ::org::apache::lucene::search::Sort a1((jobject) NULL);
            jint a2;
            jint a3;
            jint a4;
            jboolean a5;
            ::org::apache::lucene::search::grouping::TopGroups result((jobject) NULL);

            if (!parseArgs(args, "kkIIIZ", ::org::apache::lucene::search::join::ToParentBlockJoinQuery::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
            {
              OBJ_CALL(result = self->object.getTopGroups(a0, a1, a2, a3, a4, a5));
              return ::org::apache::lucene::search::grouping::t_TopGroups::wrap_Object(result, &::java::lang::PY_TYPE(Integer));
            }

            PyErr_SetArgsError((PyObject *) self, "getTopGroups", args);
            return NULL;
          }

          static PyObject *t_ToParentBlockJoinCollector_getTopGroupsWithAllChildDocs(t_ToParentBlockJoinCollector *self, PyObject *args)
          {
            ::org::apache::lucene::search::join::ToParentBlockJoinQuery a0((jobject) NULL);
            ::org::apache::lucene::search::Sort a1((jobject) NULL);
            jint a2;
            jint a3;
            jboolean a4;
            ::org::apache::lucene::search::grouping::TopGroups result((jobject) NULL);

            if (!parseArgs(args, "kkIIZ", ::org::apache::lucene::search::join::ToParentBlockJoinQuery::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.getTopGroupsWithAllChildDocs(a0, a1, a2, a3, a4));
              return ::org::apache::lucene::search::grouping::t_TopGroups::wrap_Object(result, &::java::lang::PY_TYPE(Integer));
            }

            PyErr_SetArgsError((PyObject *) self, "getTopGroupsWithAllChildDocs", args);
            return NULL;
          }

          static PyObject *t_ToParentBlockJoinCollector_setNextReader(t_ToParentBlockJoinCollector *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setNextReader(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinCollector), (PyObject *) self, "setNextReader", args, 2);
          }

          static PyObject *t_ToParentBlockJoinCollector_setScorer(t_ToParentBlockJoinCollector *self, PyObject *args)
          {
            ::org::apache::lucene::search::Scorer a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setScorer(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinCollector), (PyObject *) self, "setScorer", args, 2);
          }

          static PyObject *t_ToParentBlockJoinCollector_get__maxScore(t_ToParentBlockJoinCollector *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getMaxScore());
            return PyFloat_FromDouble((double) value);
          }

          static int t_ToParentBlockJoinCollector_set__nextReader(t_ToParentBlockJoinCollector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
              {
                INT_CALL(self->object.setNextReader(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
            return -1;
          }

          static int t_ToParentBlockJoinCollector_set__scorer(t_ToParentBlockJoinCollector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::Scorer value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
              {
                INT_CALL(self->object.setScorer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "scorer", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/FieldInfosFormat.h"
#include "org/apache/lucene/codecs/FieldInfosReader.h"
#include "org/apache/lucene/codecs/FieldInfosWriter.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *FieldInfosFormat::class$ = NULL;
        jmethodID *FieldInfosFormat::mids$ = NULL;
        bool FieldInfosFormat::live$ = false;

        jclass FieldInfosFormat::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/FieldInfosFormat");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getFieldInfosReader_6ecd5494] = env->getMethodID(cls, "getFieldInfosReader", "()Lorg/apache/lucene/codecs/FieldInfosReader;");
            mids$[mid_getFieldInfosWriter_211ffa60] = env->getMethodID(cls, "getFieldInfosWriter", "()Lorg/apache/lucene/codecs/FieldInfosWriter;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::codecs::FieldInfosReader FieldInfosFormat::getFieldInfosReader() const
        {
          return ::org::apache::lucene::codecs::FieldInfosReader(env->callObjectMethod(this$, mids$[mid_getFieldInfosReader_6ecd5494]));
        }

        ::org::apache::lucene::codecs::FieldInfosWriter FieldInfosFormat::getFieldInfosWriter() const
        {
          return ::org::apache::lucene::codecs::FieldInfosWriter(env->callObjectMethod(this$, mids$[mid_getFieldInfosWriter_211ffa60]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_FieldInfosFormat_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInfosFormat_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInfosFormat_getFieldInfosReader(t_FieldInfosFormat *self);
        static PyObject *t_FieldInfosFormat_getFieldInfosWriter(t_FieldInfosFormat *self);
        static PyObject *t_FieldInfosFormat_get__fieldInfosReader(t_FieldInfosFormat *self, void *data);
        static PyObject *t_FieldInfosFormat_get__fieldInfosWriter(t_FieldInfosFormat *self, void *data);
        static PyGetSetDef t_FieldInfosFormat__fields_[] = {
          DECLARE_GET_FIELD(t_FieldInfosFormat, fieldInfosReader),
          DECLARE_GET_FIELD(t_FieldInfosFormat, fieldInfosWriter),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldInfosFormat__methods_[] = {
          DECLARE_METHOD(t_FieldInfosFormat, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfosFormat, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfosFormat, getFieldInfosReader, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfosFormat, getFieldInfosWriter, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldInfosFormat, t_FieldInfosFormat, ::java::lang::Object, FieldInfosFormat, abstract_init, 0, 0, t_FieldInfosFormat__fields_, 0, 0);

        void t_FieldInfosFormat::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldInfosFormat), module, "FieldInfosFormat", 0);
        }

        void t_FieldInfosFormat::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldInfosFormat).tp_dict, "class_", make_descriptor(FieldInfosFormat::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldInfosFormat).tp_dict, "wrapfn_", make_descriptor(t_FieldInfosFormat::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldInfosFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldInfosFormat_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldInfosFormat::initializeClass, 1)))
            return NULL;
          return t_FieldInfosFormat::wrap_Object(FieldInfosFormat(((t_FieldInfosFormat *) arg)->object.this$));
        }
        static PyObject *t_FieldInfosFormat_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldInfosFormat::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldInfosFormat_getFieldInfosReader(t_FieldInfosFormat *self)
        {
          ::org::apache::lucene::codecs::FieldInfosReader result((jobject) NULL);
          OBJ_CALL(result = self->object.getFieldInfosReader());
          return ::org::apache::lucene::codecs::t_FieldInfosReader::wrap_Object(result);
        }

        static PyObject *t_FieldInfosFormat_getFieldInfosWriter(t_FieldInfosFormat *self)
        {
          ::org::apache::lucene::codecs::FieldInfosWriter result((jobject) NULL);
          OBJ_CALL(result = self->object.getFieldInfosWriter());
          return ::org::apache::lucene::codecs::t_FieldInfosWriter::wrap_Object(result);
        }

        static PyObject *t_FieldInfosFormat_get__fieldInfosReader(t_FieldInfosFormat *self, void *data)
        {
          ::org::apache::lucene::codecs::FieldInfosReader value((jobject) NULL);
          OBJ_CALL(value = self->object.getFieldInfosReader());
          return ::org::apache::lucene::codecs::t_FieldInfosReader::wrap_Object(value);
        }

        static PyObject *t_FieldInfosFormat_get__fieldInfosWriter(t_FieldInfosFormat *self, void *data)
        {
          ::org::apache::lucene::codecs::FieldInfosWriter value((jobject) NULL);
          OBJ_CALL(value = self->object.getFieldInfosWriter());
          return ::org::apache::lucene::codecs::t_FieldInfosWriter::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/SortedNumericDocValuesField.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *SortedNumericDocValuesField::class$ = NULL;
        jmethodID *SortedNumericDocValuesField::mids$ = NULL;
        bool SortedNumericDocValuesField::live$ = false;
        ::org::apache::lucene::document::FieldType *SortedNumericDocValuesField::TYPE = NULL;

        jclass SortedNumericDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/SortedNumericDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4372eed5] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SortedNumericDocValuesField::SortedNumericDocValuesField(const ::java::lang::String & a0, jlong a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_4372eed5, a0.this$, a1)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_SortedNumericDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedNumericDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SortedNumericDocValuesField_init_(t_SortedNumericDocValuesField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_SortedNumericDocValuesField__methods_[] = {
          DECLARE_METHOD(t_SortedNumericDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedNumericDocValuesField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SortedNumericDocValuesField, t_SortedNumericDocValuesField, ::org::apache::lucene::document::Field, SortedNumericDocValuesField, t_SortedNumericDocValuesField_init_, 0, 0, 0, 0, 0);

        void t_SortedNumericDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(SortedNumericDocValuesField), module, "SortedNumericDocValuesField", 0);
        }

        void t_SortedNumericDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SortedNumericDocValuesField).tp_dict, "class_", make_descriptor(SortedNumericDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SortedNumericDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_SortedNumericDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SortedNumericDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(SortedNumericDocValuesField::initializeClass);
          PyDict_SetItemString(PY_TYPE(SortedNumericDocValuesField).tp_dict, "TYPE", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*SortedNumericDocValuesField::TYPE)));
        }

        static PyObject *t_SortedNumericDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortedNumericDocValuesField::initializeClass, 1)))
            return NULL;
          return t_SortedNumericDocValuesField::wrap_Object(SortedNumericDocValuesField(((t_SortedNumericDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_SortedNumericDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortedNumericDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SortedNumericDocValuesField_init_(t_SortedNumericDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong a1;
          SortedNumericDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "sJ", &a0, &a1))
          {
            INT_CALL(object = SortedNumericDocValuesField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/LimitTokenPositionFilterFactory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *LimitTokenPositionFilterFactory::class$ = NULL;
          jmethodID *LimitTokenPositionFilterFactory::mids$ = NULL;
          bool LimitTokenPositionFilterFactory::live$ = false;
          ::java::lang::String *LimitTokenPositionFilterFactory::CONSUME_ALL_TOKENS_KEY = NULL;
          ::java::lang::String *LimitTokenPositionFilterFactory::MAX_TOKEN_POSITION_KEY = NULL;

          jclass LimitTokenPositionFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/LimitTokenPositionFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              CONSUME_ALL_TOKENS_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "CONSUME_ALL_TOKENS_KEY", "Ljava/lang/String;"));
              MAX_TOKEN_POSITION_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "MAX_TOKEN_POSITION_KEY", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LimitTokenPositionFilterFactory::LimitTokenPositionFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream LimitTokenPositionFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_LimitTokenPositionFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LimitTokenPositionFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LimitTokenPositionFilterFactory_init_(t_LimitTokenPositionFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LimitTokenPositionFilterFactory_create(t_LimitTokenPositionFilterFactory *self, PyObject *args);

          static PyMethodDef t_LimitTokenPositionFilterFactory__methods_[] = {
            DECLARE_METHOD(t_LimitTokenPositionFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LimitTokenPositionFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LimitTokenPositionFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LimitTokenPositionFilterFactory, t_LimitTokenPositionFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, LimitTokenPositionFilterFactory, t_LimitTokenPositionFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_LimitTokenPositionFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(LimitTokenPositionFilterFactory), module, "LimitTokenPositionFilterFactory", 0);
          }

          void t_LimitTokenPositionFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LimitTokenPositionFilterFactory).tp_dict, "class_", make_descriptor(LimitTokenPositionFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LimitTokenPositionFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_LimitTokenPositionFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LimitTokenPositionFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(LimitTokenPositionFilterFactory::initializeClass);
            PyDict_SetItemString(PY_TYPE(LimitTokenPositionFilterFactory).tp_dict, "CONSUME_ALL_TOKENS_KEY", make_descriptor(j2p(*LimitTokenPositionFilterFactory::CONSUME_ALL_TOKENS_KEY)));
            PyDict_SetItemString(PY_TYPE(LimitTokenPositionFilterFactory).tp_dict, "MAX_TOKEN_POSITION_KEY", make_descriptor(j2p(*LimitTokenPositionFilterFactory::MAX_TOKEN_POSITION_KEY)));
          }

          static PyObject *t_LimitTokenPositionFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LimitTokenPositionFilterFactory::initializeClass, 1)))
              return NULL;
            return t_LimitTokenPositionFilterFactory::wrap_Object(LimitTokenPositionFilterFactory(((t_LimitTokenPositionFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_LimitTokenPositionFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LimitTokenPositionFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LimitTokenPositionFilterFactory_init_(t_LimitTokenPositionFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            LimitTokenPositionFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = LimitTokenPositionFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LimitTokenPositionFilterFactory_create(t_LimitTokenPositionFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(LimitTokenPositionFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/range/LongRangeFacetCounts.h"
#include "org/apache/lucene/facet/range/LongRange.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Filter.h"
#include "org/apache/lucene/facet/FacetsCollector.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {

          ::java::lang::Class *LongRangeFacetCounts::class$ = NULL;
          jmethodID *LongRangeFacetCounts::mids$ = NULL;
          bool LongRangeFacetCounts::live$ = false;

          jclass LongRangeFacetCounts::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/range/LongRangeFacetCounts");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d97a5aae] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/facet/FacetsCollector;[Lorg/apache/lucene/facet/range/LongRange;)V");
              mids$[mid_init$_f040242a] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/queries/function/ValueSource;Lorg/apache/lucene/facet/FacetsCollector;[Lorg/apache/lucene/facet/range/LongRange;)V");
              mids$[mid_init$_9056893a] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/queries/function/ValueSource;Lorg/apache/lucene/facet/FacetsCollector;Lorg/apache/lucene/search/Filter;[Lorg/apache/lucene/facet/range/LongRange;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LongRangeFacetCounts::LongRangeFacetCounts(const ::java::lang::String & a0, const ::org::apache::lucene::facet::FacetsCollector & a1, const JArray< ::org::apache::lucene::facet::range::LongRange > & a2) : ::org::apache::lucene::facet::range::RangeFacetCounts(env->newObject(initializeClass, &mids$, mid_init$_d97a5aae, a0.this$, a1.this$, a2.this$)) {}

          LongRangeFacetCounts::LongRangeFacetCounts(const ::java::lang::String & a0, const ::org::apache::lucene::queries::function::ValueSource & a1, const ::org::apache::lucene::facet::FacetsCollector & a2, const JArray< ::org::apache::lucene::facet::range::LongRange > & a3) : ::org::apache::lucene::facet::range::RangeFacetCounts(env->newObject(initializeClass, &mids$, mid_init$_f040242a, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          LongRangeFacetCounts::LongRangeFacetCounts(const ::java::lang::String & a0, const ::org::apache::lucene::queries::function::ValueSource & a1, const ::org::apache::lucene::facet::FacetsCollector & a2, const ::org::apache::lucene::search::Filter & a3, const JArray< ::org::apache::lucene::facet::range::LongRange > & a4) : ::org::apache::lucene::facet::range::RangeFacetCounts(env->newObject(initializeClass, &mids$, mid_init$_9056893a, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {
          static PyObject *t_LongRangeFacetCounts_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LongRangeFacetCounts_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LongRangeFacetCounts_init_(t_LongRangeFacetCounts *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_LongRangeFacetCounts__methods_[] = {
            DECLARE_METHOD(t_LongRangeFacetCounts, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LongRangeFacetCounts, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LongRangeFacetCounts, t_LongRangeFacetCounts, ::org::apache::lucene::facet::range::RangeFacetCounts, LongRangeFacetCounts, t_LongRangeFacetCounts_init_, 0, 0, 0, 0, 0);

          void t_LongRangeFacetCounts::install(PyObject *module)
          {
            installType(&PY_TYPE(LongRangeFacetCounts), module, "LongRangeFacetCounts", 0);
          }

          void t_LongRangeFacetCounts::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LongRangeFacetCounts).tp_dict, "class_", make_descriptor(LongRangeFacetCounts::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LongRangeFacetCounts).tp_dict, "wrapfn_", make_descriptor(t_LongRangeFacetCounts::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LongRangeFacetCounts).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LongRangeFacetCounts_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LongRangeFacetCounts::initializeClass, 1)))
              return NULL;
            return t_LongRangeFacetCounts::wrap_Object(LongRangeFacetCounts(((t_LongRangeFacetCounts *) arg)->object.this$));
          }
          static PyObject *t_LongRangeFacetCounts_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LongRangeFacetCounts::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LongRangeFacetCounts_init_(t_LongRangeFacetCounts *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a1((jobject) NULL);
                JArray< ::org::apache::lucene::facet::range::LongRange > a2((jobject) NULL);
                LongRangeFacetCounts object((jobject) NULL);

                if (!parseArgs(args, "sk[k", ::org::apache::lucene::facet::FacetsCollector::initializeClass, ::org::apache::lucene::facet::range::LongRange::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = LongRangeFacetCounts(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a2((jobject) NULL);
                JArray< ::org::apache::lucene::facet::range::LongRange > a3((jobject) NULL);
                LongRangeFacetCounts object((jobject) NULL);

                if (!parseArgs(args, "skk[k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, ::org::apache::lucene::facet::range::LongRange::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = LongRangeFacetCounts(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a2((jobject) NULL);
                ::org::apache::lucene::search::Filter a3((jobject) NULL);
                JArray< ::org::apache::lucene::facet::range::LongRange > a4((jobject) NULL);
                LongRangeFacetCounts object((jobject) NULL);

                if (!parseArgs(args, "skkk[k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::facet::range::LongRange::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = LongRangeFacetCounts(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/UserInputQueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/classic/QueryParser.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *UserInputQueryBuilder::class$ = NULL;
            jmethodID *UserInputQueryBuilder::mids$ = NULL;
            bool UserInputQueryBuilder::live$ = false;

            jclass UserInputQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/UserInputQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_3b88137f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/classic/QueryParser;)V");
                mids$[mid_init$_d77cc89a] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
                mids$[mid_createQueryParser_0804498e] = env->getMethodID(cls, "createQueryParser", "(Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/queryparser/classic/QueryParser;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            UserInputQueryBuilder::UserInputQueryBuilder(const ::org::apache::lucene::queryparser::classic::QueryParser & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_3b88137f, a0.this$)) {}

            UserInputQueryBuilder::UserInputQueryBuilder(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d77cc89a, a0.this$, a1.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_UserInputQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_UserInputQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_UserInputQueryBuilder_init_(t_UserInputQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_UserInputQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_UserInputQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_UserInputQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(UserInputQueryBuilder, t_UserInputQueryBuilder, ::java::lang::Object, UserInputQueryBuilder, t_UserInputQueryBuilder_init_, 0, 0, 0, 0, 0);

            void t_UserInputQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(UserInputQueryBuilder), module, "UserInputQueryBuilder", 0);
            }

            void t_UserInputQueryBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(UserInputQueryBuilder).tp_dict, "class_", make_descriptor(UserInputQueryBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(UserInputQueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_UserInputQueryBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(UserInputQueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_UserInputQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, UserInputQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_UserInputQueryBuilder::wrap_Object(UserInputQueryBuilder(((t_UserInputQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_UserInputQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, UserInputQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_UserInputQueryBuilder_init_(t_UserInputQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::queryparser::classic::QueryParser a0((jobject) NULL);
                  UserInputQueryBuilder object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::classic::QueryParser::initializeClass, &a0))
                  {
                    INT_CALL(object = UserInputQueryBuilder(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                  UserInputQueryBuilder object((jobject) NULL);

                  if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = UserInputQueryBuilder(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/SegmentingTokenizerBase.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/io/IOException.h"
#include "java/text/BreakIterator.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *SegmentingTokenizerBase::class$ = NULL;
          jmethodID *SegmentingTokenizerBase::mids$ = NULL;
          bool SegmentingTokenizerBase::live$ = false;

          jclass SegmentingTokenizerBase::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/SegmentingTokenizerBase");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_42e90ef8] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;Ljava/text/BreakIterator;)V");
              mids$[mid_init$_441b2340] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;Ljava/text/BreakIterator;)V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_setNextSentence_d8d154a6] = env->getMethodID(cls, "setNextSentence", "(II)V");
              mids$[mid_incrementWord_54c6a16a] = env->getMethodID(cls, "incrementWord", "()Z");
              mids$[mid_isSafeEnd_87fd5456] = env->getMethodID(cls, "isSafeEnd", "(C)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SegmentingTokenizerBase::SegmentingTokenizerBase(const ::java::io::Reader & a0, const ::java::text::BreakIterator & a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_42e90ef8, a0.this$, a1.this$)) {}

          SegmentingTokenizerBase::SegmentingTokenizerBase(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1, const ::java::text::BreakIterator & a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_441b2340, a0.this$, a1.this$, a2.this$)) {}

          void SegmentingTokenizerBase::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean SegmentingTokenizerBase::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void SegmentingTokenizerBase::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_SegmentingTokenizerBase_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SegmentingTokenizerBase_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SegmentingTokenizerBase_init_(t_SegmentingTokenizerBase *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SegmentingTokenizerBase_end(t_SegmentingTokenizerBase *self, PyObject *args);
          static PyObject *t_SegmentingTokenizerBase_incrementToken(t_SegmentingTokenizerBase *self, PyObject *args);
          static PyObject *t_SegmentingTokenizerBase_reset(t_SegmentingTokenizerBase *self, PyObject *args);

          static PyMethodDef t_SegmentingTokenizerBase__methods_[] = {
            DECLARE_METHOD(t_SegmentingTokenizerBase, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SegmentingTokenizerBase, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SegmentingTokenizerBase, end, METH_VARARGS),
            DECLARE_METHOD(t_SegmentingTokenizerBase, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_SegmentingTokenizerBase, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SegmentingTokenizerBase, t_SegmentingTokenizerBase, ::org::apache::lucene::analysis::Tokenizer, SegmentingTokenizerBase, t_SegmentingTokenizerBase_init_, 0, 0, 0, 0, 0);

          void t_SegmentingTokenizerBase::install(PyObject *module)
          {
            installType(&PY_TYPE(SegmentingTokenizerBase), module, "SegmentingTokenizerBase", 0);
          }

          void t_SegmentingTokenizerBase::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SegmentingTokenizerBase).tp_dict, "class_", make_descriptor(SegmentingTokenizerBase::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SegmentingTokenizerBase).tp_dict, "wrapfn_", make_descriptor(t_SegmentingTokenizerBase::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SegmentingTokenizerBase).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SegmentingTokenizerBase_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SegmentingTokenizerBase::initializeClass, 1)))
              return NULL;
            return t_SegmentingTokenizerBase::wrap_Object(SegmentingTokenizerBase(((t_SegmentingTokenizerBase *) arg)->object.this$));
          }
          static PyObject *t_SegmentingTokenizerBase_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SegmentingTokenizerBase::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SegmentingTokenizerBase_init_(t_SegmentingTokenizerBase *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::io::Reader a0((jobject) NULL);
                ::java::text::BreakIterator a1((jobject) NULL);
                SegmentingTokenizerBase object((jobject) NULL);

                if (!parseArgs(args, "kk", ::java::io::Reader::initializeClass, ::java::text::BreakIterator::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = SegmentingTokenizerBase(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                ::java::text::BreakIterator a2((jobject) NULL);
                SegmentingTokenizerBase object((jobject) NULL);

                if (!parseArgs(args, "kkk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, ::java::text::BreakIterator::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = SegmentingTokenizerBase(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SegmentingTokenizerBase_end(t_SegmentingTokenizerBase *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SegmentingTokenizerBase), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_SegmentingTokenizerBase_incrementToken(t_SegmentingTokenizerBase *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SegmentingTokenizerBase), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_SegmentingTokenizerBase_reset(t_SegmentingTokenizerBase *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SegmentingTokenizerBase), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/LowerCaseTokenizer.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *LowerCaseTokenizer::class$ = NULL;
          jmethodID *LowerCaseTokenizer::mids$ = NULL;
          bool LowerCaseTokenizer::live$ = false;

          jclass LowerCaseTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/LowerCaseTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_be7a3ecf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_normalize_39c7bd23] = env->getMethodID(cls, "normalize", "(I)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LowerCaseTokenizer::LowerCaseTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::core::LetterTokenizer(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          LowerCaseTokenizer::LowerCaseTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2) : ::org::apache::lucene::analysis::core::LetterTokenizer(env->newObject(initializeClass, &mids$, mid_init$_be7a3ecf, a0.this$, a1.this$, a2.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_LowerCaseTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LowerCaseTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LowerCaseTokenizer_init_(t_LowerCaseTokenizer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_LowerCaseTokenizer__methods_[] = {
            DECLARE_METHOD(t_LowerCaseTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LowerCaseTokenizer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LowerCaseTokenizer, t_LowerCaseTokenizer, ::org::apache::lucene::analysis::core::LetterTokenizer, LowerCaseTokenizer, t_LowerCaseTokenizer_init_, 0, 0, 0, 0, 0);

          void t_LowerCaseTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(LowerCaseTokenizer), module, "LowerCaseTokenizer", 0);
          }

          void t_LowerCaseTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LowerCaseTokenizer).tp_dict, "class_", make_descriptor(LowerCaseTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LowerCaseTokenizer).tp_dict, "wrapfn_", make_descriptor(t_LowerCaseTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LowerCaseTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LowerCaseTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LowerCaseTokenizer::initializeClass, 1)))
              return NULL;
            return t_LowerCaseTokenizer::wrap_Object(LowerCaseTokenizer(((t_LowerCaseTokenizer *) arg)->object.this$));
          }
          static PyObject *t_LowerCaseTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LowerCaseTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LowerCaseTokenizer_init_(t_LowerCaseTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                LowerCaseTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = LowerCaseTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                LowerCaseTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kkk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = LowerCaseTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanOrTermsBuilder.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *SpanOrTermsBuilder::class$ = NULL;
            jmethodID *SpanOrTermsBuilder::mids$ = NULL;
            bool SpanOrTermsBuilder::live$ = false;

            jclass SpanOrTermsBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/SpanOrTermsBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_31619410] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SpanOrTermsBuilder::SpanOrTermsBuilder(const ::org::apache::lucene::analysis::Analyzer & a0) : ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase(env->newObject(initializeClass, &mids$, mid_init$_31619410, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_SpanOrTermsBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SpanOrTermsBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SpanOrTermsBuilder_init_(t_SpanOrTermsBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_SpanOrTermsBuilder__methods_[] = {
              DECLARE_METHOD(t_SpanOrTermsBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanOrTermsBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SpanOrTermsBuilder, t_SpanOrTermsBuilder, ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase, SpanOrTermsBuilder, t_SpanOrTermsBuilder_init_, 0, 0, 0, 0, 0);

            void t_SpanOrTermsBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(SpanOrTermsBuilder), module, "SpanOrTermsBuilder", 0);
            }

            void t_SpanOrTermsBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SpanOrTermsBuilder).tp_dict, "class_", make_descriptor(SpanOrTermsBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SpanOrTermsBuilder).tp_dict, "wrapfn_", make_descriptor(t_SpanOrTermsBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SpanOrTermsBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SpanOrTermsBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SpanOrTermsBuilder::initializeClass, 1)))
                return NULL;
              return t_SpanOrTermsBuilder::wrap_Object(SpanOrTermsBuilder(((t_SpanOrTermsBuilder *) arg)->object.this$));
            }
            static PyObject *t_SpanOrTermsBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SpanOrTermsBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SpanOrTermsBuilder_init_(t_SpanOrTermsBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
              SpanOrTermsBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
              {
                INT_CALL(object = SpanOrTermsBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/DuplicateFilter.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/sandbox/queries/DuplicateFilter$KeepMode.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "org/apache/lucene/sandbox/queries/DuplicateFilter$ProcessingMode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {

          ::java::lang::Class *DuplicateFilter::class$ = NULL;
          jmethodID *DuplicateFilter::mids$ = NULL;
          bool DuplicateFilter::live$ = false;

          jclass DuplicateFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/DuplicateFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
              mids$[mid_init$_0a23a3cc] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/sandbox/queries/DuplicateFilter$KeepMode;Lorg/apache/lucene/sandbox/queries/DuplicateFilter$ProcessingMode;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getDocIdSet_ccce0897] = env->getMethodID(cls, "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");
              mids$[mid_getFieldName_14c7b5c5] = env->getMethodID(cls, "getFieldName", "()Ljava/lang/String;");
              mids$[mid_getKeepMode_c01b4463] = env->getMethodID(cls, "getKeepMode", "()Lorg/apache/lucene/sandbox/queries/DuplicateFilter$KeepMode;");
              mids$[mid_getProcessingMode_815046ab] = env->getMethodID(cls, "getProcessingMode", "()Lorg/apache/lucene/sandbox/queries/DuplicateFilter$ProcessingMode;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_setFieldName_5fdc3f48] = env->getMethodID(cls, "setFieldName", "(Ljava/lang/String;)V");
              mids$[mid_setKeepMode_9304b146] = env->getMethodID(cls, "setKeepMode", "(Lorg/apache/lucene/sandbox/queries/DuplicateFilter$KeepMode;)V");
              mids$[mid_setProcessingMode_a2322426] = env->getMethodID(cls, "setProcessingMode", "(Lorg/apache/lucene/sandbox/queries/DuplicateFilter$ProcessingMode;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DuplicateFilter::DuplicateFilter(const ::java::lang::String & a0) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

          DuplicateFilter::DuplicateFilter(const ::java::lang::String & a0, const ::org::apache::lucene::sandbox::queries::DuplicateFilter$KeepMode & a1, const ::org::apache::lucene::sandbox::queries::DuplicateFilter$ProcessingMode & a2) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_0a23a3cc, a0.this$, a1.this$, a2.this$)) {}

          jboolean DuplicateFilter::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          ::org::apache::lucene::search::DocIdSet DuplicateFilter::getDocIdSet(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
          {
            return ::org::apache::lucene::search::DocIdSet(env->callObjectMethod(this$, mids$[mid_getDocIdSet_ccce0897], a0.this$, a1.this$));
          }

          ::java::lang::String DuplicateFilter::getFieldName() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getFieldName_14c7b5c5]));
          }

          ::org::apache::lucene::sandbox::queries::DuplicateFilter$KeepMode DuplicateFilter::getKeepMode() const
          {
            return ::org::apache::lucene::sandbox::queries::DuplicateFilter$KeepMode(env->callObjectMethod(this$, mids$[mid_getKeepMode_c01b4463]));
          }

          ::org::apache::lucene::sandbox::queries::DuplicateFilter$ProcessingMode DuplicateFilter::getProcessingMode() const
          {
            return ::org::apache::lucene::sandbox::queries::DuplicateFilter$ProcessingMode(env->callObjectMethod(this$, mids$[mid_getProcessingMode_815046ab]));
          }

          jint DuplicateFilter::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          void DuplicateFilter::setFieldName(const ::java::lang::String & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setFieldName_5fdc3f48], a0.this$);
          }

          void DuplicateFilter::setKeepMode(const ::org::apache::lucene::sandbox::queries::DuplicateFilter$KeepMode & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setKeepMode_9304b146], a0.this$);
          }

          void DuplicateFilter::setProcessingMode(const ::org::apache::lucene::sandbox::queries::DuplicateFilter$ProcessingMode & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setProcessingMode_a2322426], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          static PyObject *t_DuplicateFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DuplicateFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DuplicateFilter_init_(t_DuplicateFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DuplicateFilter_equals(t_DuplicateFilter *self, PyObject *args);
          static PyObject *t_DuplicateFilter_getDocIdSet(t_DuplicateFilter *self, PyObject *args);
          static PyObject *t_DuplicateFilter_getFieldName(t_DuplicateFilter *self);
          static PyObject *t_DuplicateFilter_getKeepMode(t_DuplicateFilter *self);
          static PyObject *t_DuplicateFilter_getProcessingMode(t_DuplicateFilter *self);
          static PyObject *t_DuplicateFilter_hashCode(t_DuplicateFilter *self, PyObject *args);
          static PyObject *t_DuplicateFilter_setFieldName(t_DuplicateFilter *self, PyObject *arg);
          static PyObject *t_DuplicateFilter_setKeepMode(t_DuplicateFilter *self, PyObject *arg);
          static PyObject *t_DuplicateFilter_setProcessingMode(t_DuplicateFilter *self, PyObject *arg);
          static PyObject *t_DuplicateFilter_get__fieldName(t_DuplicateFilter *self, void *data);
          static int t_DuplicateFilter_set__fieldName(t_DuplicateFilter *self, PyObject *arg, void *data);
          static PyObject *t_DuplicateFilter_get__keepMode(t_DuplicateFilter *self, void *data);
          static int t_DuplicateFilter_set__keepMode(t_DuplicateFilter *self, PyObject *arg, void *data);
          static PyObject *t_DuplicateFilter_get__processingMode(t_DuplicateFilter *self, void *data);
          static int t_DuplicateFilter_set__processingMode(t_DuplicateFilter *self, PyObject *arg, void *data);
          static PyGetSetDef t_DuplicateFilter__fields_[] = {
            DECLARE_GETSET_FIELD(t_DuplicateFilter, fieldName),
            DECLARE_GETSET_FIELD(t_DuplicateFilter, keepMode),
            DECLARE_GETSET_FIELD(t_DuplicateFilter, processingMode),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DuplicateFilter__methods_[] = {
            DECLARE_METHOD(t_DuplicateFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DuplicateFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DuplicateFilter, equals, METH_VARARGS),
            DECLARE_METHOD(t_DuplicateFilter, getDocIdSet, METH_VARARGS),
            DECLARE_METHOD(t_DuplicateFilter, getFieldName, METH_NOARGS),
            DECLARE_METHOD(t_DuplicateFilter, getKeepMode, METH_NOARGS),
            DECLARE_METHOD(t_DuplicateFilter, getProcessingMode, METH_NOARGS),
            DECLARE_METHOD(t_DuplicateFilter, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_DuplicateFilter, setFieldName, METH_O),
            DECLARE_METHOD(t_DuplicateFilter, setKeepMode, METH_O),
            DECLARE_METHOD(t_DuplicateFilter, setProcessingMode, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DuplicateFilter, t_DuplicateFilter, ::org::apache::lucene::search::Filter, DuplicateFilter, t_DuplicateFilter_init_, 0, 0, t_DuplicateFilter__fields_, 0, 0);

          void t_DuplicateFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(DuplicateFilter), module, "DuplicateFilter", 0);
            PyDict_SetItemString(PY_TYPE(DuplicateFilter).tp_dict, "ProcessingMode", make_descriptor(&PY_TYPE(DuplicateFilter$ProcessingMode)));
            PyDict_SetItemString(PY_TYPE(DuplicateFilter).tp_dict, "KeepMode", make_descriptor(&PY_TYPE(DuplicateFilter$KeepMode)));
          }

          void t_DuplicateFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DuplicateFilter).tp_dict, "class_", make_descriptor(DuplicateFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DuplicateFilter).tp_dict, "wrapfn_", make_descriptor(t_DuplicateFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DuplicateFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DuplicateFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DuplicateFilter::initializeClass, 1)))
              return NULL;
            return t_DuplicateFilter::wrap_Object(DuplicateFilter(((t_DuplicateFilter *) arg)->object.this$));
          }
          static PyObject *t_DuplicateFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DuplicateFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DuplicateFilter_init_(t_DuplicateFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                DuplicateFilter object((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  INT_CALL(object = DuplicateFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::sandbox::queries::DuplicateFilter$KeepMode a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::sandbox::queries::DuplicateFilter$ProcessingMode a2((jobject) NULL);
                PyTypeObject **p2;
                DuplicateFilter object((jobject) NULL);

                if (!parseArgs(args, "sKK", ::org::apache::lucene::sandbox::queries::DuplicateFilter$KeepMode::initializeClass, ::org::apache::lucene::sandbox::queries::DuplicateFilter$ProcessingMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::sandbox::queries::t_DuplicateFilter$KeepMode::parameters_, &a2, &p2, ::org::apache::lucene::sandbox::queries::t_DuplicateFilter$ProcessingMode::parameters_))
                {
                  INT_CALL(object = DuplicateFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DuplicateFilter_equals(t_DuplicateFilter *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(DuplicateFilter), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_DuplicateFilter_getDocIdSet(t_DuplicateFilter *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::util::Bits a1((jobject) NULL);
            ::org::apache::lucene::search::DocIdSet result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.getDocIdSet(a0, a1));
              return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(DuplicateFilter), (PyObject *) self, "getDocIdSet", args, 2);
          }

          static PyObject *t_DuplicateFilter_getFieldName(t_DuplicateFilter *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getFieldName());
            return j2p(result);
          }

          static PyObject *t_DuplicateFilter_getKeepMode(t_DuplicateFilter *self)
          {
            ::org::apache::lucene::sandbox::queries::DuplicateFilter$KeepMode result((jobject) NULL);
            OBJ_CALL(result = self->object.getKeepMode());
            return ::org::apache::lucene::sandbox::queries::t_DuplicateFilter$KeepMode::wrap_Object(result);
          }

          static PyObject *t_DuplicateFilter_getProcessingMode(t_DuplicateFilter *self)
          {
            ::org::apache::lucene::sandbox::queries::DuplicateFilter$ProcessingMode result((jobject) NULL);
            OBJ_CALL(result = self->object.getProcessingMode());
            return ::org::apache::lucene::sandbox::queries::t_DuplicateFilter$ProcessingMode::wrap_Object(result);
          }

          static PyObject *t_DuplicateFilter_hashCode(t_DuplicateFilter *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(DuplicateFilter), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_DuplicateFilter_setFieldName(t_DuplicateFilter *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(self->object.setFieldName(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setFieldName", arg);
            return NULL;
          }

          static PyObject *t_DuplicateFilter_setKeepMode(t_DuplicateFilter *self, PyObject *arg)
          {
            ::org::apache::lucene::sandbox::queries::DuplicateFilter$KeepMode a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::org::apache::lucene::sandbox::queries::DuplicateFilter$KeepMode::initializeClass, &a0, &p0, ::org::apache::lucene::sandbox::queries::t_DuplicateFilter$KeepMode::parameters_))
            {
              OBJ_CALL(self->object.setKeepMode(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setKeepMode", arg);
            return NULL;
          }

          static PyObject *t_DuplicateFilter_setProcessingMode(t_DuplicateFilter *self, PyObject *arg)
          {
            ::org::apache::lucene::sandbox::queries::DuplicateFilter$ProcessingMode a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::org::apache::lucene::sandbox::queries::DuplicateFilter$ProcessingMode::initializeClass, &a0, &p0, ::org::apache::lucene::sandbox::queries::t_DuplicateFilter$ProcessingMode::parameters_))
            {
              OBJ_CALL(self->object.setProcessingMode(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setProcessingMode", arg);
            return NULL;
          }

          static PyObject *t_DuplicateFilter_get__fieldName(t_DuplicateFilter *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getFieldName());
            return j2p(value);
          }
          static int t_DuplicateFilter_set__fieldName(t_DuplicateFilter *self, PyObject *arg, void *data)
          {
            {
              ::java::lang::String value((jobject) NULL);
              if (!parseArg(arg, "s", &value))
              {
                INT_CALL(self->object.setFieldName(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "fieldName", arg);
            return -1;
          }

          static PyObject *t_DuplicateFilter_get__keepMode(t_DuplicateFilter *self, void *data)
          {
            ::org::apache::lucene::sandbox::queries::DuplicateFilter$KeepMode value((jobject) NULL);
            OBJ_CALL(value = self->object.getKeepMode());
            return ::org::apache::lucene::sandbox::queries::t_DuplicateFilter$KeepMode::wrap_Object(value);
          }
          static int t_DuplicateFilter_set__keepMode(t_DuplicateFilter *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::sandbox::queries::DuplicateFilter$KeepMode value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::sandbox::queries::DuplicateFilter$KeepMode::initializeClass, &value))
              {
                INT_CALL(self->object.setKeepMode(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "keepMode", arg);
            return -1;
          }

          static PyObject *t_DuplicateFilter_get__processingMode(t_DuplicateFilter *self, void *data)
          {
            ::org::apache::lucene::sandbox::queries::DuplicateFilter$ProcessingMode value((jobject) NULL);
            OBJ_CALL(value = self->object.getProcessingMode());
            return ::org::apache::lucene::sandbox::queries::t_DuplicateFilter$ProcessingMode::wrap_Object(value);
          }
          static int t_DuplicateFilter_set__processingMode(t_DuplicateFilter *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::sandbox::queries::DuplicateFilter$ProcessingMode value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::sandbox::queries::DuplicateFilter$ProcessingMode::initializeClass, &value))
              {
                INT_CALL(self->object.setProcessingMode(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "processingMode", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/sortedset/DefaultSortedSetDocValuesReaderState.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "org/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState$OrdRange.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace sortedset {

          ::java::lang::Class *DefaultSortedSetDocValuesReaderState::class$ = NULL;
          jmethodID *DefaultSortedSetDocValuesReaderState::mids$ = NULL;
          jfieldID *DefaultSortedSetDocValuesReaderState::fids$ = NULL;
          bool DefaultSortedSetDocValuesReaderState::live$ = false;

          jclass DefaultSortedSetDocValuesReaderState::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/sortedset/DefaultSortedSetDocValuesReaderState");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7d7eaea9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;)V");
              mids$[mid_init$_215fea03] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)V");
              mids$[mid_getDocValues_4bead171] = env->getMethodID(cls, "getDocValues", "()Lorg/apache/lucene/index/SortedSetDocValues;");
              mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getOrdRange_73e2ee38] = env->getMethodID(cls, "getOrdRange", "(Ljava/lang/String;)Lorg/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState$OrdRange;");
              mids$[mid_getOrigReader_94bbd010] = env->getMethodID(cls, "getOrigReader", "()Lorg/apache/lucene/index/IndexReader;");
              mids$[mid_getPrefixToOrdRange_db60befd] = env->getMethodID(cls, "getPrefixToOrdRange", "()Ljava/util/Map;");
              mids$[mid_getSize_54c6a179] = env->getMethodID(cls, "getSize", "()I");

              fids$ = new jfieldID[max_fid];
              fids$[fid_origReader] = env->getFieldID(cls, "origReader", "Lorg/apache/lucene/index/IndexReader;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DefaultSortedSetDocValuesReaderState::DefaultSortedSetDocValuesReaderState(const ::org::apache::lucene::index::IndexReader & a0) : ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState(env->newObject(initializeClass, &mids$, mid_init$_7d7eaea9, a0.this$)) {}

          DefaultSortedSetDocValuesReaderState::DefaultSortedSetDocValuesReaderState(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1) : ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState(env->newObject(initializeClass, &mids$, mid_init$_215fea03, a0.this$, a1.this$)) {}

          ::org::apache::lucene::index::SortedSetDocValues DefaultSortedSetDocValuesReaderState::getDocValues() const
          {
            return ::org::apache::lucene::index::SortedSetDocValues(env->callObjectMethod(this$, mids$[mid_getDocValues_4bead171]));
          }

          ::java::lang::String DefaultSortedSetDocValuesReaderState::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
          }

          ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState$OrdRange DefaultSortedSetDocValuesReaderState::getOrdRange(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState$OrdRange(env->callObjectMethod(this$, mids$[mid_getOrdRange_73e2ee38], a0.this$));
          }

          ::org::apache::lucene::index::IndexReader DefaultSortedSetDocValuesReaderState::getOrigReader() const
          {
            return ::org::apache::lucene::index::IndexReader(env->callObjectMethod(this$, mids$[mid_getOrigReader_94bbd010]));
          }

          ::java::util::Map DefaultSortedSetDocValuesReaderState::getPrefixToOrdRange() const
          {
            return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getPrefixToOrdRange_db60befd]));
          }

          jint DefaultSortedSetDocValuesReaderState::getSize() const
          {
            return env->callIntMethod(this$, mids$[mid_getSize_54c6a179]);
          }

          ::org::apache::lucene::index::IndexReader DefaultSortedSetDocValuesReaderState::_get_origReader() const
          {
            return ::org::apache::lucene::index::IndexReader(env->getObjectField(this$, fids$[fid_origReader]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace sortedset {
          static PyObject *t_DefaultSortedSetDocValuesReaderState_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DefaultSortedSetDocValuesReaderState_init_(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_getDocValues(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_getField(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_getOrdRange(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_getOrigReader(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_getPrefixToOrdRange(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_getSize(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args);

          static PyObject *t_DefaultSortedSetDocValuesReaderState_get__docValues(t_DefaultSortedSetDocValuesReaderState *self, void *data);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_get__field(t_DefaultSortedSetDocValuesReaderState *self, void *data);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_get__origReader(t_DefaultSortedSetDocValuesReaderState *self, void *data);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_get__prefixToOrdRange(t_DefaultSortedSetDocValuesReaderState *self, void *data);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_get__size(t_DefaultSortedSetDocValuesReaderState *self, void *data);
          static PyGetSetDef t_DefaultSortedSetDocValuesReaderState__fields_[] = {
            DECLARE_GET_FIELD(t_DefaultSortedSetDocValuesReaderState, docValues),
            DECLARE_GET_FIELD(t_DefaultSortedSetDocValuesReaderState, field),
            DECLARE_GET_FIELD(t_DefaultSortedSetDocValuesReaderState, origReader),
            DECLARE_GET_FIELD(t_DefaultSortedSetDocValuesReaderState, prefixToOrdRange),
            DECLARE_GET_FIELD(t_DefaultSortedSetDocValuesReaderState, size),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DefaultSortedSetDocValuesReaderState__methods_[] = {
            DECLARE_METHOD(t_DefaultSortedSetDocValuesReaderState, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DefaultSortedSetDocValuesReaderState, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DefaultSortedSetDocValuesReaderState, getDocValues, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSortedSetDocValuesReaderState, getField, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSortedSetDocValuesReaderState, getOrdRange, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSortedSetDocValuesReaderState, getOrigReader, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSortedSetDocValuesReaderState, getPrefixToOrdRange, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSortedSetDocValuesReaderState, getSize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DefaultSortedSetDocValuesReaderState, t_DefaultSortedSetDocValuesReaderState, ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState, DefaultSortedSetDocValuesReaderState, t_DefaultSortedSetDocValuesReaderState_init_, 0, 0, t_DefaultSortedSetDocValuesReaderState__fields_, 0, 0);

          void t_DefaultSortedSetDocValuesReaderState::install(PyObject *module)
          {
            installType(&PY_TYPE(DefaultSortedSetDocValuesReaderState), module, "DefaultSortedSetDocValuesReaderState", 0);
          }

          void t_DefaultSortedSetDocValuesReaderState::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DefaultSortedSetDocValuesReaderState).tp_dict, "class_", make_descriptor(DefaultSortedSetDocValuesReaderState::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DefaultSortedSetDocValuesReaderState).tp_dict, "wrapfn_", make_descriptor(t_DefaultSortedSetDocValuesReaderState::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DefaultSortedSetDocValuesReaderState).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DefaultSortedSetDocValuesReaderState::initializeClass, 1)))
              return NULL;
            return t_DefaultSortedSetDocValuesReaderState::wrap_Object(DefaultSortedSetDocValuesReaderState(((t_DefaultSortedSetDocValuesReaderState *) arg)->object.this$));
          }
          static PyObject *t_DefaultSortedSetDocValuesReaderState_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DefaultSortedSetDocValuesReaderState::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DefaultSortedSetDocValuesReaderState_init_(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                DefaultSortedSetDocValuesReaderState object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
                {
                  INT_CALL(object = DefaultSortedSetDocValuesReaderState(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                DefaultSortedSetDocValuesReaderState object((jobject) NULL);

                if (!parseArgs(args, "ks", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = DefaultSortedSetDocValuesReaderState(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_getDocValues(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args)
          {
            ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getDocValues());
              return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(DefaultSortedSetDocValuesReaderState), (PyObject *) self, "getDocValues", args, 2);
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_getField(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getField());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(DefaultSortedSetDocValuesReaderState), (PyObject *) self, "getField", args, 2);
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_getOrdRange(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState$OrdRange result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.getOrdRange(a0));
              return ::org::apache::lucene::facet::sortedset::t_SortedSetDocValuesReaderState$OrdRange::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(DefaultSortedSetDocValuesReaderState), (PyObject *) self, "getOrdRange", args, 2);
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_getOrigReader(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getOrigReader());
              return ::org::apache::lucene::index::t_IndexReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(DefaultSortedSetDocValuesReaderState), (PyObject *) self, "getOrigReader", args, 2);
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_getPrefixToOrdRange(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args)
          {
            ::java::util::Map result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getPrefixToOrdRange());
              return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::org::apache::lucene::facet::sortedset::PY_TYPE(SortedSetDocValuesReaderState$OrdRange));
            }

            return callSuper(&PY_TYPE(DefaultSortedSetDocValuesReaderState), (PyObject *) self, "getPrefixToOrdRange", args, 2);
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_getSize(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getSize());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(DefaultSortedSetDocValuesReaderState), (PyObject *) self, "getSize", args, 2);
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_get__docValues(t_DefaultSortedSetDocValuesReaderState *self, void *data)
          {
            ::org::apache::lucene::index::SortedSetDocValues value((jobject) NULL);
            OBJ_CALL(value = self->object.getDocValues());
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(value);
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_get__field(t_DefaultSortedSetDocValuesReaderState *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_get__origReader(t_DefaultSortedSetDocValuesReaderState *self, void *data)
          {
            ::org::apache::lucene::index::IndexReader value((jobject) NULL);
            OBJ_CALL(value = self->object.getOrigReader());
            return ::org::apache::lucene::index::t_IndexReader::wrap_Object(value);
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_get__prefixToOrdRange(t_DefaultSortedSetDocValuesReaderState *self, void *data)
          {
            ::java::util::Map value((jobject) NULL);
            OBJ_CALL(value = self->object.getPrefixToOrdRange());
            return ::java::util::t_Map::wrap_Object(value);
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_get__size(t_DefaultSortedSetDocValuesReaderState *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getSize());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiDocsAndPositionsEnum$EnumWithSlice.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/ReaderSlice.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiDocsAndPositionsEnum$EnumWithSlice::class$ = NULL;
        jmethodID *MultiDocsAndPositionsEnum$EnumWithSlice::mids$ = NULL;
        jfieldID *MultiDocsAndPositionsEnum$EnumWithSlice::fids$ = NULL;
        bool MultiDocsAndPositionsEnum$EnumWithSlice::live$ = false;

        jclass MultiDocsAndPositionsEnum$EnumWithSlice::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiDocsAndPositionsEnum$EnumWithSlice");

            mids$ = new jmethodID[max_mid];
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_docsAndPositionsEnum] = env->getFieldID(cls, "docsAndPositionsEnum", "Lorg/apache/lucene/index/DocsAndPositionsEnum;");
            fids$[fid_slice] = env->getFieldID(cls, "slice", "Lorg/apache/lucene/index/ReaderSlice;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::String MultiDocsAndPositionsEnum$EnumWithSlice::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::org::apache::lucene::index::DocsAndPositionsEnum MultiDocsAndPositionsEnum$EnumWithSlice::_get_docsAndPositionsEnum() const
        {
          return ::org::apache::lucene::index::DocsAndPositionsEnum(env->getObjectField(this$, fids$[fid_docsAndPositionsEnum]));
        }

        void MultiDocsAndPositionsEnum$EnumWithSlice::_set_docsAndPositionsEnum(const ::org::apache::lucene::index::DocsAndPositionsEnum & a0) const
        {
          env->setObjectField(this$, fids$[fid_docsAndPositionsEnum], a0.this$);
        }

        ::org::apache::lucene::index::ReaderSlice MultiDocsAndPositionsEnum$EnumWithSlice::_get_slice() const
        {
          return ::org::apache::lucene::index::ReaderSlice(env->getObjectField(this$, fids$[fid_slice]));
        }

        void MultiDocsAndPositionsEnum$EnumWithSlice::_set_slice(const ::org::apache::lucene::index::ReaderSlice & a0) const
        {
          env->setObjectField(this$, fids$[fid_slice], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiDocsAndPositionsEnum$EnumWithSlice_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiDocsAndPositionsEnum$EnumWithSlice_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiDocsAndPositionsEnum$EnumWithSlice_toString(t_MultiDocsAndPositionsEnum$EnumWithSlice *self, PyObject *args);
        static PyObject *t_MultiDocsAndPositionsEnum$EnumWithSlice_get__docsAndPositionsEnum(t_MultiDocsAndPositionsEnum$EnumWithSlice *self, void *data);
        static int t_MultiDocsAndPositionsEnum$EnumWithSlice_set__docsAndPositionsEnum(t_MultiDocsAndPositionsEnum$EnumWithSlice *self, PyObject *arg, void *data);
        static PyObject *t_MultiDocsAndPositionsEnum$EnumWithSlice_get__slice(t_MultiDocsAndPositionsEnum$EnumWithSlice *self, void *data);
        static int t_MultiDocsAndPositionsEnum$EnumWithSlice_set__slice(t_MultiDocsAndPositionsEnum$EnumWithSlice *self, PyObject *arg, void *data);

        static PyGetSetDef t_MultiDocsAndPositionsEnum$EnumWithSlice__fields_[] = {
          DECLARE_GETSET_FIELD(t_MultiDocsAndPositionsEnum$EnumWithSlice, docsAndPositionsEnum),
          DECLARE_GETSET_FIELD(t_MultiDocsAndPositionsEnum$EnumWithSlice, slice),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiDocsAndPositionsEnum$EnumWithSlice__methods_[] = {
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum$EnumWithSlice, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum$EnumWithSlice, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum$EnumWithSlice, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiDocsAndPositionsEnum$EnumWithSlice, t_MultiDocsAndPositionsEnum$EnumWithSlice, ::java::lang::Object, MultiDocsAndPositionsEnum$EnumWithSlice, abstract_init, 0, 0, t_MultiDocsAndPositionsEnum$EnumWithSlice__fields_, 0, 0);

        void t_MultiDocsAndPositionsEnum$EnumWithSlice::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiDocsAndPositionsEnum$EnumWithSlice), module, "MultiDocsAndPositionsEnum$EnumWithSlice", 0);
        }

        void t_MultiDocsAndPositionsEnum$EnumWithSlice::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiDocsAndPositionsEnum$EnumWithSlice).tp_dict, "class_", make_descriptor(MultiDocsAndPositionsEnum$EnumWithSlice::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiDocsAndPositionsEnum$EnumWithSlice).tp_dict, "wrapfn_", make_descriptor(t_MultiDocsAndPositionsEnum$EnumWithSlice::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiDocsAndPositionsEnum$EnumWithSlice).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiDocsAndPositionsEnum$EnumWithSlice_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiDocsAndPositionsEnum$EnumWithSlice::initializeClass, 1)))
            return NULL;
          return t_MultiDocsAndPositionsEnum$EnumWithSlice::wrap_Object(MultiDocsAndPositionsEnum$EnumWithSlice(((t_MultiDocsAndPositionsEnum$EnumWithSlice *) arg)->object.this$));
        }
        static PyObject *t_MultiDocsAndPositionsEnum$EnumWithSlice_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiDocsAndPositionsEnum$EnumWithSlice::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiDocsAndPositionsEnum$EnumWithSlice_toString(t_MultiDocsAndPositionsEnum$EnumWithSlice *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(MultiDocsAndPositionsEnum$EnumWithSlice), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_MultiDocsAndPositionsEnum$EnumWithSlice_get__docsAndPositionsEnum(t_MultiDocsAndPositionsEnum$EnumWithSlice *self, void *data)
        {
          ::org::apache::lucene::index::DocsAndPositionsEnum value((jobject) NULL);
          OBJ_CALL(value = self->object._get_docsAndPositionsEnum());
          return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(value);
        }
        static int t_MultiDocsAndPositionsEnum$EnumWithSlice_set__docsAndPositionsEnum(t_MultiDocsAndPositionsEnum$EnumWithSlice *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::index::DocsAndPositionsEnum value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::index::DocsAndPositionsEnum::initializeClass, &value))
          {
            INT_CALL(self->object._set_docsAndPositionsEnum(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "docsAndPositionsEnum", arg);
          return -1;
        }

        static PyObject *t_MultiDocsAndPositionsEnum$EnumWithSlice_get__slice(t_MultiDocsAndPositionsEnum$EnumWithSlice *self, void *data)
        {
          ::org::apache::lucene::index::ReaderSlice value((jobject) NULL);
          OBJ_CALL(value = self->object._get_slice());
          return ::org::apache::lucene::index::t_ReaderSlice::wrap_Object(value);
        }
        static int t_MultiDocsAndPositionsEnum$EnumWithSlice_set__slice(t_MultiDocsAndPositionsEnum$EnumWithSlice *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::index::ReaderSlice value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::index::ReaderSlice::initializeClass, &value))
          {
            INT_CALL(self->object._set_slice(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "slice", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/TermContext.h"
#include "org/apache/lucene/index/IndexReaderContext.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/TermState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *TermContext::class$ = NULL;
        jmethodID *TermContext::mids$ = NULL;
        jfieldID *TermContext::fids$ = NULL;
        bool TermContext::live$ = false;

        jclass TermContext::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/TermContext");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4df5686b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReaderContext;)V");
            mids$[mid_init$_5a9a23d9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReaderContext;Lorg/apache/lucene/index/TermState;IIJ)V");
            mids$[mid_build_9d3a5124] = env->getStaticMethodID(cls, "build", "(Lorg/apache/lucene/index/IndexReaderContext;Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/index/TermContext;");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_docFreq_54c6a179] = env->getMethodID(cls, "docFreq", "()I");
            mids$[mid_get_17d8f64c] = env->getMethodID(cls, "get", "(I)Lorg/apache/lucene/index/TermState;");
            mids$[mid_register_edacd7f4] = env->getMethodID(cls, "register", "(Lorg/apache/lucene/index/TermState;IIJ)V");
            mids$[mid_setDocFreq_39c7bd3c] = env->getMethodID(cls, "setDocFreq", "(I)V");
            mids$[mid_totalTermFreq_54c6a17a] = env->getMethodID(cls, "totalTermFreq", "()J");

            fids$ = new jfieldID[max_fid];
            fids$[fid_topReaderContext] = env->getFieldID(cls, "topReaderContext", "Lorg/apache/lucene/index/IndexReaderContext;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TermContext::TermContext(const ::org::apache::lucene::index::IndexReaderContext & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4df5686b, a0.this$)) {}

        TermContext::TermContext(const ::org::apache::lucene::index::IndexReaderContext & a0, const ::org::apache::lucene::index::TermState & a1, jint a2, jint a3, jlong a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5a9a23d9, a0.this$, a1.this$, a2, a3, a4)) {}

        TermContext TermContext::build(const ::org::apache::lucene::index::IndexReaderContext & a0, const ::org::apache::lucene::index::Term & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return TermContext(env->callStaticObjectMethod(cls, mids$[mid_build_9d3a5124], a0.this$, a1.this$));
        }

        void TermContext::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        jint TermContext::docFreq() const
        {
          return env->callIntMethod(this$, mids$[mid_docFreq_54c6a179]);
        }

        ::org::apache::lucene::index::TermState TermContext::get(jint a0) const
        {
          return ::org::apache::lucene::index::TermState(env->callObjectMethod(this$, mids$[mid_get_17d8f64c], a0));
        }

        void TermContext::register$(const ::org::apache::lucene::index::TermState & a0, jint a1, jint a2, jlong a3) const
        {
          env->callVoidMethod(this$, mids$[mid_register_edacd7f4], a0.this$, a1, a2, a3);
        }

        void TermContext::setDocFreq(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setDocFreq_39c7bd3c], a0);
        }

        jlong TermContext::totalTermFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_totalTermFreq_54c6a17a]);
        }

        ::org::apache::lucene::index::IndexReaderContext TermContext::_get_topReaderContext() const
        {
          return ::org::apache::lucene::index::IndexReaderContext(env->getObjectField(this$, fids$[fid_topReaderContext]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_TermContext_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermContext_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TermContext_init_(t_TermContext *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TermContext_build(PyTypeObject *type, PyObject *args);
        static PyObject *t_TermContext_clear(t_TermContext *self);
        static PyObject *t_TermContext_docFreq(t_TermContext *self);
        static PyObject *t_TermContext_get(t_TermContext *self, PyObject *arg);
        static PyObject *t_TermContext_register(t_TermContext *self, PyObject *args);
        static PyObject *t_TermContext_setDocFreq(t_TermContext *self, PyObject *arg);
        static PyObject *t_TermContext_totalTermFreq(t_TermContext *self);
        static PyObject *t_TermContext_get__topReaderContext(t_TermContext *self, void *data);

        static PyGetSetDef t_TermContext__fields_[] = {
          DECLARE_GET_FIELD(t_TermContext, topReaderContext),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TermContext__methods_[] = {
          DECLARE_METHOD(t_TermContext, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermContext, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermContext, build, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_TermContext, clear, METH_NOARGS),
          DECLARE_METHOD(t_TermContext, docFreq, METH_NOARGS),
          DECLARE_METHOD(t_TermContext, get, METH_O),
          DECLARE_METHOD(t_TermContext, register, METH_VARARGS),
          DECLARE_METHOD(t_TermContext, setDocFreq, METH_O),
          DECLARE_METHOD(t_TermContext, totalTermFreq, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermContext, t_TermContext, ::java::lang::Object, TermContext, t_TermContext_init_, 0, 0, t_TermContext__fields_, 0, 0);

        void t_TermContext::install(PyObject *module)
        {
          installType(&PY_TYPE(TermContext), module, "TermContext", 0);
        }

        void t_TermContext::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermContext).tp_dict, "class_", make_descriptor(TermContext::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermContext).tp_dict, "wrapfn_", make_descriptor(t_TermContext::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermContext).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermContext_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermContext::initializeClass, 1)))
            return NULL;
          return t_TermContext::wrap_Object(TermContext(((t_TermContext *) arg)->object.this$));
        }
        static PyObject *t_TermContext_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermContext::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TermContext_init_(t_TermContext *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::IndexReaderContext a0((jobject) NULL);
              TermContext object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReaderContext::initializeClass, &a0))
              {
                INT_CALL(object = TermContext(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 5:
            {
              ::org::apache::lucene::index::IndexReaderContext a0((jobject) NULL);
              ::org::apache::lucene::index::TermState a1((jobject) NULL);
              jint a2;
              jint a3;
              jlong a4;
              TermContext object((jobject) NULL);

              if (!parseArgs(args, "kkIIJ", ::org::apache::lucene::index::IndexReaderContext::initializeClass, ::org::apache::lucene::index::TermState::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                INT_CALL(object = TermContext(a0, a1, a2, a3, a4));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TermContext_build(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReaderContext a0((jobject) NULL);
          ::org::apache::lucene::index::Term a1((jobject) NULL);
          TermContext result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReaderContext::initializeClass, ::org::apache::lucene::index::Term::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::TermContext::build(a0, a1));
            return t_TermContext::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "build", args);
          return NULL;
        }

        static PyObject *t_TermContext_clear(t_TermContext *self)
        {
          OBJ_CALL(self->object.clear());
          Py_RETURN_NONE;
        }

        static PyObject *t_TermContext_docFreq(t_TermContext *self)
        {
          jint result;
          OBJ_CALL(result = self->object.docFreq());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_TermContext_get(t_TermContext *self, PyObject *arg)
        {
          jint a0;
          ::org::apache::lucene::index::TermState result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return ::org::apache::lucene::index::t_TermState::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_TermContext_register(t_TermContext *self, PyObject *args)
        {
          ::org::apache::lucene::index::TermState a0((jobject) NULL);
          jint a1;
          jint a2;
          jlong a3;

          if (!parseArgs(args, "kIIJ", ::org::apache::lucene::index::TermState::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.register$(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "register", args);
          return NULL;
        }

        static PyObject *t_TermContext_setDocFreq(t_TermContext *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setDocFreq(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setDocFreq", arg);
          return NULL;
        }

        static PyObject *t_TermContext_totalTermFreq(t_TermContext *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.totalTermFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_TermContext_get__topReaderContext(t_TermContext *self, void *data)
        {
          ::org::apache::lucene::index::IndexReaderContext value((jobject) NULL);
          OBJ_CALL(value = self->object._get_topReaderContext());
          return ::org::apache::lucene::index::t_IndexReaderContext::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/UAX29URLEmailAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *UAX29URLEmailAnalyzer::class$ = NULL;
          jmethodID *UAX29URLEmailAnalyzer::mids$ = NULL;
          bool UAX29URLEmailAnalyzer::live$ = false;
          jint UAX29URLEmailAnalyzer::DEFAULT_MAX_TOKEN_LENGTH = (jint) 0;
          ::org::apache::lucene::analysis::util::CharArraySet *UAX29URLEmailAnalyzer::STOP_WORDS_SET = NULL;

          jclass UAX29URLEmailAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/UAX29URLEmailAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getMaxTokenLength_54c6a179] = env->getMethodID(cls, "getMaxTokenLength", "()I");
              mids$[mid_setMaxTokenLength_39c7bd3c] = env->getMethodID(cls, "setMaxTokenLength", "(I)V");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_TOKEN_LENGTH = env->getStaticIntField(cls, "DEFAULT_MAX_TOKEN_LENGTH");
              STOP_WORDS_SET = new ::org::apache::lucene::analysis::util::CharArraySet(env->getStaticObjectField(cls, "STOP_WORDS_SET", "Lorg/apache/lucene/analysis/util/CharArraySet;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          UAX29URLEmailAnalyzer::UAX29URLEmailAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          UAX29URLEmailAnalyzer::UAX29URLEmailAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          UAX29URLEmailAnalyzer::UAX29URLEmailAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          jint UAX29URLEmailAnalyzer::getMaxTokenLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxTokenLength_54c6a179]);
          }

          void UAX29URLEmailAnalyzer::setMaxTokenLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxTokenLength_39c7bd3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_UAX29URLEmailAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UAX29URLEmailAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_UAX29URLEmailAnalyzer_init_(t_UAX29URLEmailAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_UAX29URLEmailAnalyzer_getMaxTokenLength(t_UAX29URLEmailAnalyzer *self);
          static PyObject *t_UAX29URLEmailAnalyzer_setMaxTokenLength(t_UAX29URLEmailAnalyzer *self, PyObject *arg);
          static PyObject *t_UAX29URLEmailAnalyzer_get__maxTokenLength(t_UAX29URLEmailAnalyzer *self, void *data);
          static int t_UAX29URLEmailAnalyzer_set__maxTokenLength(t_UAX29URLEmailAnalyzer *self, PyObject *arg, void *data);
          static PyGetSetDef t_UAX29URLEmailAnalyzer__fields_[] = {
            DECLARE_GETSET_FIELD(t_UAX29URLEmailAnalyzer, maxTokenLength),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_UAX29URLEmailAnalyzer__methods_[] = {
            DECLARE_METHOD(t_UAX29URLEmailAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UAX29URLEmailAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UAX29URLEmailAnalyzer, getMaxTokenLength, METH_NOARGS),
            DECLARE_METHOD(t_UAX29URLEmailAnalyzer, setMaxTokenLength, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(UAX29URLEmailAnalyzer, t_UAX29URLEmailAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, UAX29URLEmailAnalyzer, t_UAX29URLEmailAnalyzer_init_, 0, 0, t_UAX29URLEmailAnalyzer__fields_, 0, 0);

          void t_UAX29URLEmailAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(UAX29URLEmailAnalyzer), module, "UAX29URLEmailAnalyzer", 0);
          }

          void t_UAX29URLEmailAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailAnalyzer).tp_dict, "class_", make_descriptor(UAX29URLEmailAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_UAX29URLEmailAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(UAX29URLEmailAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailAnalyzer).tp_dict, "DEFAULT_MAX_TOKEN_LENGTH", make_descriptor(UAX29URLEmailAnalyzer::DEFAULT_MAX_TOKEN_LENGTH));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailAnalyzer).tp_dict, "STOP_WORDS_SET", make_descriptor(::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(*UAX29URLEmailAnalyzer::STOP_WORDS_SET)));
          }

          static PyObject *t_UAX29URLEmailAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, UAX29URLEmailAnalyzer::initializeClass, 1)))
              return NULL;
            return t_UAX29URLEmailAnalyzer::wrap_Object(UAX29URLEmailAnalyzer(((t_UAX29URLEmailAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_UAX29URLEmailAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, UAX29URLEmailAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_UAX29URLEmailAnalyzer_init_(t_UAX29URLEmailAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                UAX29URLEmailAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = UAX29URLEmailAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                UAX29URLEmailAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = UAX29URLEmailAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                UAX29URLEmailAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = UAX29URLEmailAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_UAX29URLEmailAnalyzer_getMaxTokenLength(t_UAX29URLEmailAnalyzer *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxTokenLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_UAX29URLEmailAnalyzer_setMaxTokenLength(t_UAX29URLEmailAnalyzer *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxTokenLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxTokenLength", arg);
            return NULL;
          }

          static PyObject *t_UAX29URLEmailAnalyzer_get__maxTokenLength(t_UAX29URLEmailAnalyzer *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxTokenLength());
            return PyInt_FromLong((long) value);
          }
          static int t_UAX29URLEmailAnalyzer_set__maxTokenLength(t_UAX29URLEmailAnalyzer *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxTokenLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxTokenLength", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/synonym/WordnetSynonymParser.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {

          ::java::lang::Class *WordnetSynonymParser::class$ = NULL;
          jmethodID *WordnetSynonymParser::mids$ = NULL;
          bool WordnetSynonymParser::live$ = false;

          jclass WordnetSynonymParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/synonym/WordnetSynonymParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_702f1f56] = env->getMethodID(cls, "<init>", "(ZZLorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_parse_cf2e3c10] = env->getMethodID(cls, "parse", "(Ljava/io/Reader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WordnetSynonymParser::WordnetSynonymParser(jboolean a0, jboolean a1, const ::org::apache::lucene::analysis::Analyzer & a2) : ::org::apache::lucene::analysis::synonym::SynonymMap$Parser(env->newObject(initializeClass, &mids$, mid_init$_702f1f56, a0, a1, a2.this$)) {}

          void WordnetSynonymParser::parse(const ::java::io::Reader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_parse_cf2e3c10], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {
          static PyObject *t_WordnetSynonymParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WordnetSynonymParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WordnetSynonymParser_init_(t_WordnetSynonymParser *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WordnetSynonymParser_parse(t_WordnetSynonymParser *self, PyObject *args);

          static PyMethodDef t_WordnetSynonymParser__methods_[] = {
            DECLARE_METHOD(t_WordnetSynonymParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordnetSynonymParser, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordnetSynonymParser, parse, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WordnetSynonymParser, t_WordnetSynonymParser, ::org::apache::lucene::analysis::synonym::SynonymMap$Parser, WordnetSynonymParser, t_WordnetSynonymParser_init_, 0, 0, 0, 0, 0);

          void t_WordnetSynonymParser::install(PyObject *module)
          {
            installType(&PY_TYPE(WordnetSynonymParser), module, "WordnetSynonymParser", 0);
          }

          void t_WordnetSynonymParser::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WordnetSynonymParser).tp_dict, "class_", make_descriptor(WordnetSynonymParser::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WordnetSynonymParser).tp_dict, "wrapfn_", make_descriptor(t_WordnetSynonymParser::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WordnetSynonymParser).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_WordnetSynonymParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WordnetSynonymParser::initializeClass, 1)))
              return NULL;
            return t_WordnetSynonymParser::wrap_Object(WordnetSynonymParser(((t_WordnetSynonymParser *) arg)->object.this$));
          }
          static PyObject *t_WordnetSynonymParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WordnetSynonymParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WordnetSynonymParser_init_(t_WordnetSynonymParser *self, PyObject *args, PyObject *kwds)
          {
            jboolean a0;
            jboolean a1;
            ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
            WordnetSynonymParser object((jobject) NULL);

            if (!parseArgs(args, "ZZk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = WordnetSynonymParser(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_WordnetSynonymParser_parse(t_WordnetSynonymParser *self, PyObject *args)
          {
            ::java::io::Reader a0((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.parse(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(WordnetSynonymParser), (PyObject *) self, "parse", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/payloads/PayloadEncoder.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *DelimitedPayloadTokenFilter::class$ = NULL;
          jmethodID *DelimitedPayloadTokenFilter::mids$ = NULL;
          bool DelimitedPayloadTokenFilter::live$ = false;
          jchar DelimitedPayloadTokenFilter::DEFAULT_DELIMITER = (jchar) 0;

          jclass DelimitedPayloadTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_037fe9e9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;CLorg/apache/lucene/analysis/payloads/PayloadEncoder;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_DELIMITER = env->getStaticCharField(cls, "DEFAULT_DELIMITER");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DelimitedPayloadTokenFilter::DelimitedPayloadTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jchar a1, const ::org::apache::lucene::analysis::payloads::PayloadEncoder & a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_037fe9e9, a0.this$, a1, a2.this$)) {}

          jboolean DelimitedPayloadTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_DelimitedPayloadTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DelimitedPayloadTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DelimitedPayloadTokenFilter_init_(t_DelimitedPayloadTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DelimitedPayloadTokenFilter_incrementToken(t_DelimitedPayloadTokenFilter *self, PyObject *args);

          static PyMethodDef t_DelimitedPayloadTokenFilter__methods_[] = {
            DECLARE_METHOD(t_DelimitedPayloadTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DelimitedPayloadTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DelimitedPayloadTokenFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DelimitedPayloadTokenFilter, t_DelimitedPayloadTokenFilter, ::org::apache::lucene::analysis::TokenFilter, DelimitedPayloadTokenFilter, t_DelimitedPayloadTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_DelimitedPayloadTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(DelimitedPayloadTokenFilter), module, "DelimitedPayloadTokenFilter", 0);
          }

          void t_DelimitedPayloadTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DelimitedPayloadTokenFilter).tp_dict, "class_", make_descriptor(DelimitedPayloadTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DelimitedPayloadTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_DelimitedPayloadTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DelimitedPayloadTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(DelimitedPayloadTokenFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(DelimitedPayloadTokenFilter).tp_dict, "DEFAULT_DELIMITER", make_descriptor(DelimitedPayloadTokenFilter::DEFAULT_DELIMITER));
          }

          static PyObject *t_DelimitedPayloadTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DelimitedPayloadTokenFilter::initializeClass, 1)))
              return NULL;
            return t_DelimitedPayloadTokenFilter::wrap_Object(DelimitedPayloadTokenFilter(((t_DelimitedPayloadTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_DelimitedPayloadTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DelimitedPayloadTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DelimitedPayloadTokenFilter_init_(t_DelimitedPayloadTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            jchar a1;
            ::org::apache::lucene::analysis::payloads::PayloadEncoder a2((jobject) NULL);
            DelimitedPayloadTokenFilter object((jobject) NULL);

            if (!parseArgs(args, "kCk", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::payloads::PayloadEncoder::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = DelimitedPayloadTokenFilter(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DelimitedPayloadTokenFilter_incrementToken(t_DelimitedPayloadTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(DelimitedPayloadTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/IntBlockPool$Allocator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *IntBlockPool$Allocator::class$ = NULL;
        jmethodID *IntBlockPool$Allocator::mids$ = NULL;
        bool IntBlockPool$Allocator::live$ = false;

        jclass IntBlockPool$Allocator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/IntBlockPool$Allocator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_getIntBlock_dab10e75] = env->getMethodID(cls, "getIntBlock", "()[I");
            mids$[mid_recycleIntBlocks_9f62f13c] = env->getMethodID(cls, "recycleIntBlocks", "([[III)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IntBlockPool$Allocator::IntBlockPool$Allocator(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        JArray< jint > IntBlockPool$Allocator::getIntBlock() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getIntBlock_dab10e75]));
        }

        void IntBlockPool$Allocator::recycleIntBlocks(const JArray< JArray< jint > > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_recycleIntBlocks_9f62f13c], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_IntBlockPool$Allocator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IntBlockPool$Allocator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IntBlockPool$Allocator_init_(t_IntBlockPool$Allocator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IntBlockPool$Allocator_getIntBlock(t_IntBlockPool$Allocator *self);
        static PyObject *t_IntBlockPool$Allocator_recycleIntBlocks(t_IntBlockPool$Allocator *self, PyObject *args);
        static PyObject *t_IntBlockPool$Allocator_get__intBlock(t_IntBlockPool$Allocator *self, void *data);
        static PyGetSetDef t_IntBlockPool$Allocator__fields_[] = {
          DECLARE_GET_FIELD(t_IntBlockPool$Allocator, intBlock),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IntBlockPool$Allocator__methods_[] = {
          DECLARE_METHOD(t_IntBlockPool$Allocator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntBlockPool$Allocator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntBlockPool$Allocator, getIntBlock, METH_NOARGS),
          DECLARE_METHOD(t_IntBlockPool$Allocator, recycleIntBlocks, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IntBlockPool$Allocator, t_IntBlockPool$Allocator, ::java::lang::Object, IntBlockPool$Allocator, t_IntBlockPool$Allocator_init_, 0, 0, t_IntBlockPool$Allocator__fields_, 0, 0);

        void t_IntBlockPool$Allocator::install(PyObject *module)
        {
          installType(&PY_TYPE(IntBlockPool$Allocator), module, "IntBlockPool$Allocator", 0);
        }

        void t_IntBlockPool$Allocator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IntBlockPool$Allocator).tp_dict, "class_", make_descriptor(IntBlockPool$Allocator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IntBlockPool$Allocator).tp_dict, "wrapfn_", make_descriptor(t_IntBlockPool$Allocator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IntBlockPool$Allocator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IntBlockPool$Allocator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IntBlockPool$Allocator::initializeClass, 1)))
            return NULL;
          return t_IntBlockPool$Allocator::wrap_Object(IntBlockPool$Allocator(((t_IntBlockPool$Allocator *) arg)->object.this$));
        }
        static PyObject *t_IntBlockPool$Allocator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IntBlockPool$Allocator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IntBlockPool$Allocator_init_(t_IntBlockPool$Allocator *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          IntBlockPool$Allocator object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = IntBlockPool$Allocator(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IntBlockPool$Allocator_getIntBlock(t_IntBlockPool$Allocator *self)
        {
          JArray< jint > result((jobject) NULL);
          OBJ_CALL(result = self->object.getIntBlock());
          return result.wrap();
        }

        static PyObject *t_IntBlockPool$Allocator_recycleIntBlocks(t_IntBlockPool$Allocator *self, PyObject *args)
        {
          JArray< JArray< jint > > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[[III", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.recycleIntBlocks(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "recycleIntBlocks", args);
          return NULL;
        }

        static PyObject *t_IntBlockPool$Allocator_get__intBlock(t_IntBlockPool$Allocator *self, void *data)
        {
          JArray< jint > value((jobject) NULL);
          OBJ_CALL(value = self->object.getIntBlock());
          return value.wrap();
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedInts$Reader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Accountable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedInts$Reader::class$ = NULL;
          jmethodID *PackedInts$Reader::mids$ = NULL;
          bool PackedInts$Reader::live$ = false;

          jclass PackedInts$Reader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedInts$Reader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_get_d80d4c9e] = env->getMethodID(cls, "get", "(I[JII)I");
              mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PackedInts$Reader::PackedInts$Reader() : ::org::apache::lucene::index::NumericDocValues(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint PackedInts$Reader::get(jint a0, const JArray< jlong > & a1, jint a2, jint a3) const
          {
            return env->callIntMethod(this$, mids$[mid_get_d80d4c9e], a0, a1.this$, a2, a3);
          }

          jint PackedInts$Reader::size() const
          {
            return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedInts$Reader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Reader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PackedInts$Reader_init_(t_PackedInts$Reader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PackedInts$Reader_get(t_PackedInts$Reader *self, PyObject *args);
          static PyObject *t_PackedInts$Reader_size(t_PackedInts$Reader *self);

          static PyMethodDef t_PackedInts$Reader__methods_[] = {
            DECLARE_METHOD(t_PackedInts$Reader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Reader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Reader, get, METH_VARARGS),
            DECLARE_METHOD(t_PackedInts$Reader, size, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedInts$Reader, t_PackedInts$Reader, ::org::apache::lucene::index::NumericDocValues, PackedInts$Reader, t_PackedInts$Reader_init_, 0, 0, 0, 0, 0);

          void t_PackedInts$Reader::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedInts$Reader), module, "PackedInts$Reader", 0);
          }

          void t_PackedInts$Reader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedInts$Reader).tp_dict, "class_", make_descriptor(PackedInts$Reader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedInts$Reader).tp_dict, "wrapfn_", make_descriptor(t_PackedInts$Reader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedInts$Reader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedInts$Reader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedInts$Reader::initializeClass, 1)))
              return NULL;
            return t_PackedInts$Reader::wrap_Object(PackedInts$Reader(((t_PackedInts$Reader *) arg)->object.this$));
          }
          static PyObject *t_PackedInts$Reader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedInts$Reader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PackedInts$Reader_init_(t_PackedInts$Reader *self, PyObject *args, PyObject *kwds)
          {
            PackedInts$Reader object((jobject) NULL);

            INT_CALL(object = PackedInts$Reader());
            self->object = object;

            return 0;
          }

          static PyObject *t_PackedInts$Reader_get(t_PackedInts$Reader *self, PyObject *args)
          {
            jint a0;
            JArray< jlong > a1((jobject) NULL);
            jint a2;
            jint a3;
            jint result;

            if (!parseArgs(args, "I[JII", &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.get(a0, a1, a2, a3));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(PackedInts$Reader), (PyObject *) self, "get", args, 2);
          }

          static PyObject *t_PackedInts$Reader_size(t_PackedInts$Reader *self)
          {
            jint result;
            OBJ_CALL(result = self->object.size());
            return PyInt_FromLong((long) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/ChainedFilter.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {

        ::java::lang::Class *ChainedFilter::class$ = NULL;
        jmethodID *ChainedFilter::mids$ = NULL;
        bool ChainedFilter::live$ = false;
        jint ChainedFilter::AND = (jint) 0;
        jint ChainedFilter::ANDNOT = (jint) 0;
        jint ChainedFilter::DEFAULT = (jint) 0;
        jint ChainedFilter::OR = (jint) 0;
        jint ChainedFilter::XOR = (jint) 0;

        jclass ChainedFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/queries/ChainedFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_cbb0d6f6] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/Filter;)V");
            mids$[mid_init$_571f09d4] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/Filter;I)V");
            mids$[mid_init$_fa4768a0] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/Filter;[I)V");
            mids$[mid_getDocIdSet_ccce0897] = env->getMethodID(cls, "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            AND = env->getStaticIntField(cls, "AND");
            ANDNOT = env->getStaticIntField(cls, "ANDNOT");
            DEFAULT = env->getStaticIntField(cls, "DEFAULT");
            OR = env->getStaticIntField(cls, "OR");
            XOR = env->getStaticIntField(cls, "XOR");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ChainedFilter::ChainedFilter(const JArray< ::org::apache::lucene::search::Filter > & a0) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_cbb0d6f6, a0.this$)) {}

        ChainedFilter::ChainedFilter(const JArray< ::org::apache::lucene::search::Filter > & a0, jint a1) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_571f09d4, a0.this$, a1)) {}

        ChainedFilter::ChainedFilter(const JArray< ::org::apache::lucene::search::Filter > & a0, const JArray< jint > & a1) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_fa4768a0, a0.this$, a1.this$)) {}

        ::org::apache::lucene::search::DocIdSet ChainedFilter::getDocIdSet(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
        {
          return ::org::apache::lucene::search::DocIdSet(env->callObjectMethod(this$, mids$[mid_getDocIdSet_ccce0897], a0.this$, a1.this$));
        }

        ::java::lang::String ChainedFilter::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        static PyObject *t_ChainedFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ChainedFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ChainedFilter_init_(t_ChainedFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ChainedFilter_getDocIdSet(t_ChainedFilter *self, PyObject *args);
        static PyObject *t_ChainedFilter_toString(t_ChainedFilter *self, PyObject *args);

        static PyMethodDef t_ChainedFilter__methods_[] = {
          DECLARE_METHOD(t_ChainedFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ChainedFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ChainedFilter, getDocIdSet, METH_VARARGS),
          DECLARE_METHOD(t_ChainedFilter, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ChainedFilter, t_ChainedFilter, ::org::apache::lucene::search::Filter, ChainedFilter, t_ChainedFilter_init_, 0, 0, 0, 0, 0);

        void t_ChainedFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(ChainedFilter), module, "ChainedFilter", 0);
        }

        void t_ChainedFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ChainedFilter).tp_dict, "class_", make_descriptor(ChainedFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ChainedFilter).tp_dict, "wrapfn_", make_descriptor(t_ChainedFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ChainedFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(ChainedFilter::initializeClass);
          PyDict_SetItemString(PY_TYPE(ChainedFilter).tp_dict, "AND", make_descriptor(ChainedFilter::AND));
          PyDict_SetItemString(PY_TYPE(ChainedFilter).tp_dict, "ANDNOT", make_descriptor(ChainedFilter::ANDNOT));
          PyDict_SetItemString(PY_TYPE(ChainedFilter).tp_dict, "DEFAULT", make_descriptor(ChainedFilter::DEFAULT));
          PyDict_SetItemString(PY_TYPE(ChainedFilter).tp_dict, "OR", make_descriptor(ChainedFilter::OR));
          PyDict_SetItemString(PY_TYPE(ChainedFilter).tp_dict, "XOR", make_descriptor(ChainedFilter::XOR));
        }

        static PyObject *t_ChainedFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ChainedFilter::initializeClass, 1)))
            return NULL;
          return t_ChainedFilter::wrap_Object(ChainedFilter(((t_ChainedFilter *) arg)->object.this$));
        }
        static PyObject *t_ChainedFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ChainedFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ChainedFilter_init_(t_ChainedFilter *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::org::apache::lucene::search::Filter > a0((jobject) NULL);
              ChainedFilter object((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::search::Filter::initializeClass, &a0))
              {
                INT_CALL(object = ChainedFilter(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              JArray< ::org::apache::lucene::search::Filter > a0((jobject) NULL);
              jint a1;
              ChainedFilter object((jobject) NULL);

              if (!parseArgs(args, "[kI", ::org::apache::lucene::search::Filter::initializeClass, &a0, &a1))
              {
                INT_CALL(object = ChainedFilter(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              JArray< ::org::apache::lucene::search::Filter > a0((jobject) NULL);
              JArray< jint > a1((jobject) NULL);
              ChainedFilter object((jobject) NULL);

              if (!parseArgs(args, "[k[I", ::org::apache::lucene::search::Filter::initializeClass, &a0, &a1))
              {
                INT_CALL(object = ChainedFilter(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ChainedFilter_getDocIdSet(t_ChainedFilter *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocIdSet(a0, a1));
            return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ChainedFilter), (PyObject *) self, "getDocIdSet", args, 2);
        }

        static PyObject *t_ChainedFilter_toString(t_ChainedFilter *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(ChainedFilter), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FilterDirectoryReader.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/FilterDirectoryReader$SubReaderWrapper.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FilterDirectoryReader::class$ = NULL;
        jmethodID *FilterDirectoryReader::mids$ = NULL;
        bool FilterDirectoryReader::live$ = false;

        jclass FilterDirectoryReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FilterDirectoryReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_1e43081e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/DirectoryReader;)V");
            mids$[mid_init$_c3fa2163] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/DirectoryReader;Lorg/apache/lucene/index/FilterDirectoryReader$SubReaderWrapper;)V");
            mids$[mid_getIndexCommit_09307276] = env->getMethodID(cls, "getIndexCommit", "()Lorg/apache/lucene/index/IndexCommit;");
            mids$[mid_getVersion_54c6a17a] = env->getMethodID(cls, "getVersion", "()J");
            mids$[mid_isCurrent_54c6a16a] = env->getMethodID(cls, "isCurrent", "()Z");
            mids$[mid_doClose_54c6a166] = env->getMethodID(cls, "doClose", "()V");
            mids$[mid_doOpenIfChanged_26fd6272] = env->getMethodID(cls, "doOpenIfChanged", "(Lorg/apache/lucene/index/IndexCommit;)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_doOpenIfChanged_e4ee522b] = env->getMethodID(cls, "doOpenIfChanged", "(Lorg/apache/lucene/index/IndexWriter;Z)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_doOpenIfChanged_1de06693] = env->getMethodID(cls, "doOpenIfChanged", "()Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_doWrapDirectoryReader_5bb3c60f] = env->getMethodID(cls, "doWrapDirectoryReader", "(Lorg/apache/lucene/index/DirectoryReader;)Lorg/apache/lucene/index/DirectoryReader;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterDirectoryReader::FilterDirectoryReader(const ::org::apache::lucene::index::DirectoryReader & a0) : ::org::apache::lucene::index::DirectoryReader(env->newObject(initializeClass, &mids$, mid_init$_1e43081e, a0.this$)) {}

        FilterDirectoryReader::FilterDirectoryReader(const ::org::apache::lucene::index::DirectoryReader & a0, const ::org::apache::lucene::index::FilterDirectoryReader$SubReaderWrapper & a1) : ::org::apache::lucene::index::DirectoryReader(env->newObject(initializeClass, &mids$, mid_init$_c3fa2163, a0.this$, a1.this$)) {}

        ::org::apache::lucene::index::IndexCommit FilterDirectoryReader::getIndexCommit() const
        {
          return ::org::apache::lucene::index::IndexCommit(env->callObjectMethod(this$, mids$[mid_getIndexCommit_09307276]));
        }

        jlong FilterDirectoryReader::getVersion() const
        {
          return env->callLongMethod(this$, mids$[mid_getVersion_54c6a17a]);
        }

        jboolean FilterDirectoryReader::isCurrent() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCurrent_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/index/FilterDirectoryReader$StandardReaderWrapper.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FilterDirectoryReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterDirectoryReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterDirectoryReader_of_(t_FilterDirectoryReader *self, PyObject *args);
        static int t_FilterDirectoryReader_init_(t_FilterDirectoryReader *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterDirectoryReader_getIndexCommit(t_FilterDirectoryReader *self, PyObject *args);
        static PyObject *t_FilterDirectoryReader_getVersion(t_FilterDirectoryReader *self, PyObject *args);
        static PyObject *t_FilterDirectoryReader_isCurrent(t_FilterDirectoryReader *self, PyObject *args);
        static PyObject *t_FilterDirectoryReader_get__current(t_FilterDirectoryReader *self, void *data);
        static PyObject *t_FilterDirectoryReader_get__indexCommit(t_FilterDirectoryReader *self, void *data);
        static PyObject *t_FilterDirectoryReader_get__version(t_FilterDirectoryReader *self, void *data);
        static PyObject *t_FilterDirectoryReader_get__parameters_(t_FilterDirectoryReader *self, void *data);
        static PyGetSetDef t_FilterDirectoryReader__fields_[] = {
          DECLARE_GET_FIELD(t_FilterDirectoryReader, current),
          DECLARE_GET_FIELD(t_FilterDirectoryReader, indexCommit),
          DECLARE_GET_FIELD(t_FilterDirectoryReader, version),
          DECLARE_GET_FIELD(t_FilterDirectoryReader, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilterDirectoryReader__methods_[] = {
          DECLARE_METHOD(t_FilterDirectoryReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterDirectoryReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterDirectoryReader, of_, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectoryReader, getIndexCommit, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectoryReader, getVersion, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectoryReader, isCurrent, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilterDirectoryReader, t_FilterDirectoryReader, ::org::apache::lucene::index::DirectoryReader, FilterDirectoryReader, t_FilterDirectoryReader_init_, 0, 0, t_FilterDirectoryReader__fields_, 0, 0);
        PyObject *t_FilterDirectoryReader::wrap_Object(const FilterDirectoryReader& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FilterDirectoryReader::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FilterDirectoryReader *self = (t_FilterDirectoryReader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FilterDirectoryReader::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FilterDirectoryReader::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FilterDirectoryReader *self = (t_FilterDirectoryReader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FilterDirectoryReader::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterDirectoryReader), module, "FilterDirectoryReader", 0);
          PyDict_SetItemString(PY_TYPE(FilterDirectoryReader).tp_dict, "StandardReaderWrapper", make_descriptor(&PY_TYPE(FilterDirectoryReader$StandardReaderWrapper)));
          PyDict_SetItemString(PY_TYPE(FilterDirectoryReader).tp_dict, "SubReaderWrapper", make_descriptor(&PY_TYPE(FilterDirectoryReader$SubReaderWrapper)));
        }

        void t_FilterDirectoryReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilterDirectoryReader).tp_dict, "class_", make_descriptor(FilterDirectoryReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilterDirectoryReader).tp_dict, "wrapfn_", make_descriptor(t_FilterDirectoryReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilterDirectoryReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterDirectoryReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterDirectoryReader::initializeClass, 1)))
            return NULL;
          return t_FilterDirectoryReader::wrap_Object(FilterDirectoryReader(((t_FilterDirectoryReader *) arg)->object.this$));
        }
        static PyObject *t_FilterDirectoryReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterDirectoryReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FilterDirectoryReader_of_(t_FilterDirectoryReader *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_FilterDirectoryReader_init_(t_FilterDirectoryReader *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::DirectoryReader a0((jobject) NULL);
              PyTypeObject **p0;
              FilterDirectoryReader object((jobject) NULL);

              if (!parseArgs(args, "K", ::org::apache::lucene::index::DirectoryReader::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_DirectoryReader::parameters_))
              {
                INT_CALL(object = FilterDirectoryReader(a0));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::index::PY_TYPE(AtomicReader);
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::index::DirectoryReader a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::FilterDirectoryReader$SubReaderWrapper a1((jobject) NULL);
              PyTypeObject **p1;
              FilterDirectoryReader object((jobject) NULL);

              if (!parseArgs(args, "KK", ::org::apache::lucene::index::DirectoryReader::initializeClass, ::org::apache::lucene::index::FilterDirectoryReader$SubReaderWrapper::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_DirectoryReader::parameters_, &a1, &p1, ::org::apache::lucene::index::t_FilterDirectoryReader$SubReaderWrapper::parameters_))
              {
                INT_CALL(object = FilterDirectoryReader(a0, a1));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::index::PY_TYPE(AtomicReader);
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilterDirectoryReader_getIndexCommit(t_FilterDirectoryReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexCommit result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getIndexCommit());
            return ::org::apache::lucene::index::t_IndexCommit::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterDirectoryReader), (PyObject *) self, "getIndexCommit", args, 2);
        }

        static PyObject *t_FilterDirectoryReader_getVersion(t_FilterDirectoryReader *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getVersion());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FilterDirectoryReader), (PyObject *) self, "getVersion", args, 2);
        }

        static PyObject *t_FilterDirectoryReader_isCurrent(t_FilterDirectoryReader *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.isCurrent());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FilterDirectoryReader), (PyObject *) self, "isCurrent", args, 2);
        }
        static PyObject *t_FilterDirectoryReader_get__parameters_(t_FilterDirectoryReader *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_FilterDirectoryReader_get__current(t_FilterDirectoryReader *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isCurrent());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_FilterDirectoryReader_get__indexCommit(t_FilterDirectoryReader *self, void *data)
        {
          ::org::apache::lucene::index::IndexCommit value((jobject) NULL);
          OBJ_CALL(value = self->object.getIndexCommit());
          return ::org::apache::lucene::index::t_IndexCommit::wrap_Object(value);
        }

        static PyObject *t_FilterDirectoryReader_get__version(t_FilterDirectoryReader *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getVersion());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pattern/PatternReplaceFilter.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/util/regex/Pattern.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {

          ::java::lang::Class *PatternReplaceFilter::class$ = NULL;
          jmethodID *PatternReplaceFilter::mids$ = NULL;
          bool PatternReplaceFilter::live$ = false;

          jclass PatternReplaceFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pattern/PatternReplaceFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_afb3adc3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/util/regex/Pattern;Ljava/lang/String;Z)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PatternReplaceFilter::PatternReplaceFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::util::regex::Pattern & a1, const ::java::lang::String & a2, jboolean a3) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_afb3adc3, a0.this$, a1.this$, a2.this$, a3)) {}

          jboolean PatternReplaceFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {
          static PyObject *t_PatternReplaceFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PatternReplaceFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PatternReplaceFilter_init_(t_PatternReplaceFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PatternReplaceFilter_incrementToken(t_PatternReplaceFilter *self, PyObject *args);

          static PyMethodDef t_PatternReplaceFilter__methods_[] = {
            DECLARE_METHOD(t_PatternReplaceFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternReplaceFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternReplaceFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PatternReplaceFilter, t_PatternReplaceFilter, ::org::apache::lucene::analysis::TokenFilter, PatternReplaceFilter, t_PatternReplaceFilter_init_, 0, 0, 0, 0, 0);

          void t_PatternReplaceFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PatternReplaceFilter), module, "PatternReplaceFilter", 0);
          }

          void t_PatternReplaceFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PatternReplaceFilter).tp_dict, "class_", make_descriptor(PatternReplaceFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PatternReplaceFilter).tp_dict, "wrapfn_", make_descriptor(t_PatternReplaceFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PatternReplaceFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PatternReplaceFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PatternReplaceFilter::initializeClass, 1)))
              return NULL;
            return t_PatternReplaceFilter::wrap_Object(PatternReplaceFilter(((t_PatternReplaceFilter *) arg)->object.this$));
          }
          static PyObject *t_PatternReplaceFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PatternReplaceFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PatternReplaceFilter_init_(t_PatternReplaceFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::java::util::regex::Pattern a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            jboolean a3;
            PatternReplaceFilter object((jobject) NULL);

            if (!parseArgs(args, "kksZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::java::util::regex::Pattern::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = PatternReplaceFilter(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PatternReplaceFilter_incrementToken(t_PatternReplaceFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PatternReplaceFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/Writer.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Appendable.h"
#include "java/lang/Class.h"
#include "java/io/Flushable.h"
#include "java/io/Closeable.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace java {
  namespace io {

    ::java::lang::Class *Writer::class$ = NULL;
    jmethodID *Writer::mids$ = NULL;
    bool Writer::live$ = false;

    jclass Writer::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/io/Writer");

        mids$ = new jmethodID[max_mid];
        mids$[mid_append_368f1679] = env->getMethodID(cls, "append", "(C)Ljava/io/Writer;");
        mids$[mid_append_31d2f801] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;)Ljava/io/Writer;");
        mids$[mid_append_b3d4aa31] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;II)Ljava/io/Writer;");
        mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
        mids$[mid_flush_54c6a166] = env->getMethodID(cls, "flush", "()V");
        mids$[mid_write_5fdc3f48] = env->getMethodID(cls, "write", "(Ljava/lang/String;)V");
        mids$[mid_write_39c7bd3c] = env->getMethodID(cls, "write", "(I)V");
        mids$[mid_write_700e23d6] = env->getMethodID(cls, "write", "([C)V");
        mids$[mid_write_6f0bb356] = env->getMethodID(cls, "write", "([CII)V");
        mids$[mid_write_555f322c] = env->getMethodID(cls, "write", "(Ljava/lang/String;II)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Writer Writer::append(jchar a0) const
    {
      return Writer(env->callObjectMethod(this$, mids$[mid_append_368f1679], a0));
    }

    Writer Writer::append(const ::java::lang::CharSequence & a0) const
    {
      return Writer(env->callObjectMethod(this$, mids$[mid_append_31d2f801], a0.this$));
    }

    Writer Writer::append(const ::java::lang::CharSequence & a0, jint a1, jint a2) const
    {
      return Writer(env->callObjectMethod(this$, mids$[mid_append_b3d4aa31], a0.this$, a1, a2));
    }

    void Writer::close() const
    {
      env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
    }

    void Writer::flush() const
    {
      env->callVoidMethod(this$, mids$[mid_flush_54c6a166]);
    }

    void Writer::write(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_write_5fdc3f48], a0.this$);
    }

    void Writer::write(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_write_39c7bd3c], a0);
    }

    void Writer::write(const JArray< jchar > & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_write_700e23d6], a0.this$);
    }

    void Writer::write(const JArray< jchar > & a0, jint a1, jint a2) const
    {
      env->callVoidMethod(this$, mids$[mid_write_6f0bb356], a0.this$, a1, a2);
    }

    void Writer::write(const ::java::lang::String & a0, jint a1, jint a2) const
    {
      env->callVoidMethod(this$, mids$[mid_write_555f322c], a0.this$, a1, a2);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace io {
    static PyObject *t_Writer_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Writer_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Writer_append(t_Writer *self, PyObject *args);
    static PyObject *t_Writer_close(t_Writer *self);
    static PyObject *t_Writer_flush(t_Writer *self);
    static PyObject *t_Writer_write(t_Writer *self, PyObject *args);

    static PyMethodDef t_Writer__methods_[] = {
      DECLARE_METHOD(t_Writer, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Writer, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Writer, append, METH_VARARGS),
      DECLARE_METHOD(t_Writer, close, METH_NOARGS),
      DECLARE_METHOD(t_Writer, flush, METH_NOARGS),
      DECLARE_METHOD(t_Writer, write, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Writer, t_Writer, ::java::lang::Object, Writer, abstract_init, 0, 0, 0, 0, 0);

    void t_Writer::install(PyObject *module)
    {
      installType(&PY_TYPE(Writer), module, "Writer", 0);
    }

    void t_Writer::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Writer).tp_dict, "class_", make_descriptor(Writer::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Writer).tp_dict, "wrapfn_", make_descriptor(t_Writer::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Writer).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Writer_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Writer::initializeClass, 1)))
        return NULL;
      return t_Writer::wrap_Object(Writer(((t_Writer *) arg)->object.this$));
    }
    static PyObject *t_Writer_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Writer::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Writer_append(t_Writer *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          Writer result((jobject) NULL);

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = self->object.append(a0));
            return t_Writer::wrap_Object(result);
          }
        }
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          Writer result((jobject) NULL);

          if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
          {
            OBJ_CALL(result = self->object.append(a0));
            return t_Writer::wrap_Object(result);
          }
        }
        break;
       case 3:
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          jint a1;
          jint a2;
          Writer result((jobject) NULL);

          if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.append(a0, a1, a2));
            return t_Writer::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "append", args);
      return NULL;
    }

    static PyObject *t_Writer_close(t_Writer *self)
    {
      OBJ_CALL(self->object.close());
      Py_RETURN_NONE;
    }

    static PyObject *t_Writer_flush(t_Writer *self)
    {
      OBJ_CALL(self->object.flush());
      Py_RETURN_NONE;
    }

    static PyObject *t_Writer_write(t_Writer *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.write(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.write(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(self->object.write(a0));
            Py_RETURN_NONE;
          }
        }
        break;
       case 3:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.write(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "sII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.write(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "write", args);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilter.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {

          ::java::lang::Class *DictionaryCompoundWordTokenFilter::class$ = NULL;
          jmethodID *DictionaryCompoundWordTokenFilter::mids$ = NULL;
          bool DictionaryCompoundWordTokenFilter::live$ = false;

          jclass DictionaryCompoundWordTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e67dd59e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_42fe450d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/util/CharArraySet;IIIZ)V");
              mids$[mid_decompose_54c6a166] = env->getMethodID(cls, "decompose", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DictionaryCompoundWordTokenFilter::DictionaryCompoundWordTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::compound::CompoundWordTokenFilterBase(env->newObject(initializeClass, &mids$, mid_init$_e67dd59e, a0.this$, a1.this$, a2.this$)) {}

          DictionaryCompoundWordTokenFilter::DictionaryCompoundWordTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2, jint a3, jint a4, jint a5, jboolean a6) : ::org::apache::lucene::analysis::compound::CompoundWordTokenFilterBase(env->newObject(initializeClass, &mids$, mid_init$_42fe450d, a0.this$, a1.this$, a2.this$, a3, a4, a5, a6)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          static PyObject *t_DictionaryCompoundWordTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DictionaryCompoundWordTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DictionaryCompoundWordTokenFilter_init_(t_DictionaryCompoundWordTokenFilter *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_DictionaryCompoundWordTokenFilter__methods_[] = {
            DECLARE_METHOD(t_DictionaryCompoundWordTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DictionaryCompoundWordTokenFilter, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DictionaryCompoundWordTokenFilter, t_DictionaryCompoundWordTokenFilter, ::org::apache::lucene::analysis::compound::CompoundWordTokenFilterBase, DictionaryCompoundWordTokenFilter, t_DictionaryCompoundWordTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_DictionaryCompoundWordTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(DictionaryCompoundWordTokenFilter), module, "DictionaryCompoundWordTokenFilter", 0);
          }

          void t_DictionaryCompoundWordTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DictionaryCompoundWordTokenFilter).tp_dict, "class_", make_descriptor(DictionaryCompoundWordTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DictionaryCompoundWordTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_DictionaryCompoundWordTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DictionaryCompoundWordTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DictionaryCompoundWordTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DictionaryCompoundWordTokenFilter::initializeClass, 1)))
              return NULL;
            return t_DictionaryCompoundWordTokenFilter::wrap_Object(DictionaryCompoundWordTokenFilter(((t_DictionaryCompoundWordTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_DictionaryCompoundWordTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DictionaryCompoundWordTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DictionaryCompoundWordTokenFilter_init_(t_DictionaryCompoundWordTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                DictionaryCompoundWordTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "KkK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = DictionaryCompoundWordTokenFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 7:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                jint a3;
                jint a4;
                jint a5;
                jboolean a6;
                DictionaryCompoundWordTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "KkKIIIZ", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a3, &a4, &a5, &a6))
                {
                  INT_CALL(object = DictionaryCompoundWordTokenFilter(a0, a1, a2, a3, a4, a5, a6));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/writercache/CompactLabelToOrdinal.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/taxonomy/FacetLabel.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {

            ::java::lang::Class *CompactLabelToOrdinal::class$ = NULL;
            jmethodID *CompactLabelToOrdinal::mids$ = NULL;
            bool CompactLabelToOrdinal::live$ = false;
            jfloat CompactLabelToOrdinal::DefaultLoadFactor = (jfloat) 0;

            jclass CompactLabelToOrdinal::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/writercache/CompactLabelToOrdinal");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_776c6331] = env->getMethodID(cls, "<init>", "(IFI)V");
                mids$[mid_addLabel_7ba580a8] = env->getMethodID(cls, "addLabel", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;I)V");
                mids$[mid_getOrdinal_283f83f5] = env->getMethodID(cls, "getOrdinal", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;)I");
                mids$[mid_sizeOfMap_54c6a179] = env->getMethodID(cls, "sizeOfMap", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                DefaultLoadFactor = env->getStaticFloatField(cls, "DefaultLoadFactor");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            CompactLabelToOrdinal::CompactLabelToOrdinal(jint a0, jfloat a1, jint a2) : ::org::apache::lucene::facet::taxonomy::writercache::LabelToOrdinal(env->newObject(initializeClass, &mids$, mid_init$_776c6331, a0, a1, a2)) {}

            void CompactLabelToOrdinal::addLabel(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0, jint a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addLabel_7ba580a8], a0.this$, a1);
            }

            jint CompactLabelToOrdinal::getOrdinal(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0) const
            {
              return env->callIntMethod(this$, mids$[mid_getOrdinal_283f83f5], a0.this$);
            }

            jint CompactLabelToOrdinal::sizeOfMap() const
            {
              return env->callIntMethod(this$, mids$[mid_sizeOfMap_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {
            static PyObject *t_CompactLabelToOrdinal_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CompactLabelToOrdinal_instance_(PyTypeObject *type, PyObject *arg);
            static int t_CompactLabelToOrdinal_init_(t_CompactLabelToOrdinal *self, PyObject *args, PyObject *kwds);
            static PyObject *t_CompactLabelToOrdinal_addLabel(t_CompactLabelToOrdinal *self, PyObject *args);
            static PyObject *t_CompactLabelToOrdinal_getOrdinal(t_CompactLabelToOrdinal *self, PyObject *args);
            static PyObject *t_CompactLabelToOrdinal_sizeOfMap(t_CompactLabelToOrdinal *self);

            static PyMethodDef t_CompactLabelToOrdinal__methods_[] = {
              DECLARE_METHOD(t_CompactLabelToOrdinal, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CompactLabelToOrdinal, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CompactLabelToOrdinal, addLabel, METH_VARARGS),
              DECLARE_METHOD(t_CompactLabelToOrdinal, getOrdinal, METH_VARARGS),
              DECLARE_METHOD(t_CompactLabelToOrdinal, sizeOfMap, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(CompactLabelToOrdinal, t_CompactLabelToOrdinal, ::org::apache::lucene::facet::taxonomy::writercache::LabelToOrdinal, CompactLabelToOrdinal, t_CompactLabelToOrdinal_init_, 0, 0, 0, 0, 0);

            void t_CompactLabelToOrdinal::install(PyObject *module)
            {
              installType(&PY_TYPE(CompactLabelToOrdinal), module, "CompactLabelToOrdinal", 0);
            }

            void t_CompactLabelToOrdinal::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(CompactLabelToOrdinal).tp_dict, "class_", make_descriptor(CompactLabelToOrdinal::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(CompactLabelToOrdinal).tp_dict, "wrapfn_", make_descriptor(t_CompactLabelToOrdinal::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(CompactLabelToOrdinal).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(CompactLabelToOrdinal::initializeClass);
              PyDict_SetItemString(PY_TYPE(CompactLabelToOrdinal).tp_dict, "DefaultLoadFactor", make_descriptor(CompactLabelToOrdinal::DefaultLoadFactor));
            }

            static PyObject *t_CompactLabelToOrdinal_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, CompactLabelToOrdinal::initializeClass, 1)))
                return NULL;
              return t_CompactLabelToOrdinal::wrap_Object(CompactLabelToOrdinal(((t_CompactLabelToOrdinal *) arg)->object.this$));
            }
            static PyObject *t_CompactLabelToOrdinal_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, CompactLabelToOrdinal::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_CompactLabelToOrdinal_init_(t_CompactLabelToOrdinal *self, PyObject *args, PyObject *kwds)
            {
              jint a0;
              jfloat a1;
              jint a2;
              CompactLabelToOrdinal object((jobject) NULL);

              if (!parseArgs(args, "IFI", &a0, &a1, &a2))
              {
                INT_CALL(object = CompactLabelToOrdinal(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_CompactLabelToOrdinal_addLabel(t_CompactLabelToOrdinal *self, PyObject *args)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint a1;

              if (!parseArgs(args, "kI", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.addLabel(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(CompactLabelToOrdinal), (PyObject *) self, "addLabel", args, 2);
            }

            static PyObject *t_CompactLabelToOrdinal_getOrdinal(t_CompactLabelToOrdinal *self, PyObject *args)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint result;

              if (!parseArgs(args, "k", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.getOrdinal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(CompactLabelToOrdinal), (PyObject *) self, "getOrdinal", args, 2);
            }

            static PyObject *t_CompactLabelToOrdinal_sizeOfMap(t_CompactLabelToOrdinal *self)
            {
              jint result;
              OBJ_CALL(result = self->object.sizeOfMap());
              return PyInt_FromLong((long) result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/BasicModelBE.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *BasicModelBE::class$ = NULL;
          jmethodID *BasicModelBE::mids$ = NULL;
          bool BasicModelBE::live$ = false;

          jclass BasicModelBE::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/BasicModelBE");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_score_076760a9] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;F)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BasicModelBE::BasicModelBE() : ::org::apache::lucene::search::similarities::BasicModel(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat BasicModelBE::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_076760a9], a0.this$, a1);
          }

          ::java::lang::String BasicModelBE::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_BasicModelBE_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicModelBE_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BasicModelBE_init_(t_BasicModelBE *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BasicModelBE_score(t_BasicModelBE *self, PyObject *args);
          static PyObject *t_BasicModelBE_toString(t_BasicModelBE *self, PyObject *args);

          static PyMethodDef t_BasicModelBE__methods_[] = {
            DECLARE_METHOD(t_BasicModelBE, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelBE, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelBE, score, METH_VARARGS),
            DECLARE_METHOD(t_BasicModelBE, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BasicModelBE, t_BasicModelBE, ::org::apache::lucene::search::similarities::BasicModel, BasicModelBE, t_BasicModelBE_init_, 0, 0, 0, 0, 0);

          void t_BasicModelBE::install(PyObject *module)
          {
            installType(&PY_TYPE(BasicModelBE), module, "BasicModelBE", 0);
          }

          void t_BasicModelBE::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BasicModelBE).tp_dict, "class_", make_descriptor(BasicModelBE::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BasicModelBE).tp_dict, "wrapfn_", make_descriptor(t_BasicModelBE::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BasicModelBE).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BasicModelBE_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BasicModelBE::initializeClass, 1)))
              return NULL;
            return t_BasicModelBE::wrap_Object(BasicModelBE(((t_BasicModelBE *) arg)->object.this$));
          }
          static PyObject *t_BasicModelBE_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BasicModelBE::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BasicModelBE_init_(t_BasicModelBE *self, PyObject *args, PyObject *kwds)
          {
            BasicModelBE object((jobject) NULL);

            INT_CALL(object = BasicModelBE());
            self->object = object;

            return 0;
          }

          static PyObject *t_BasicModelBE_score(t_BasicModelBE *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat result;

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(BasicModelBE), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_BasicModelBE_toString(t_BasicModelBE *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(BasicModelBE), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/StoredFieldVisitor.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IOContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40StoredFieldsReader::class$ = NULL;
          jmethodID *Lucene40StoredFieldsReader::mids$ = NULL;
          bool Lucene40StoredFieldsReader::live$ = false;

          jclass Lucene40StoredFieldsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_3589180f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)V");
              mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
              mids$[mid_clone_2f3580b7] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader;");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_rawDocs_1a4b1309] = env->getMethodID(cls, "rawDocs", "([III)Lorg/apache/lucene/store/IndexInput;");
              mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
              mids$[mid_visitDocument_a2ea3ebe] = env->getMethodID(cls, "visitDocument", "(ILorg/apache/lucene/index/StoredFieldVisitor;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40StoredFieldsReader::Lucene40StoredFieldsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3) : ::org::apache::lucene::codecs::StoredFieldsReader(env->newObject(initializeClass, &mids$, mid_init$_3589180f, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          void Lucene40StoredFieldsReader::checkIntegrity() const
          {
            env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
          }

          Lucene40StoredFieldsReader Lucene40StoredFieldsReader::clone() const
          {
            return Lucene40StoredFieldsReader(env->callObjectMethod(this$, mids$[mid_clone_2f3580b7]));
          }

          void Lucene40StoredFieldsReader::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          jlong Lucene40StoredFieldsReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }

          ::org::apache::lucene::store::IndexInput Lucene40StoredFieldsReader::rawDocs(const JArray< jint > & a0, jint a1, jint a2) const
          {
            return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_rawDocs_1a4b1309], a0.this$, a1, a2));
          }

          jint Lucene40StoredFieldsReader::size() const
          {
            return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
          }

          void Lucene40StoredFieldsReader::visitDocument(jint a0, const ::org::apache::lucene::index::StoredFieldVisitor & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_visitDocument_a2ea3ebe], a0, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40StoredFieldsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40StoredFieldsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40StoredFieldsReader_init_(t_Lucene40StoredFieldsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40StoredFieldsReader_checkIntegrity(t_Lucene40StoredFieldsReader *self, PyObject *args);
          static PyObject *t_Lucene40StoredFieldsReader_clone(t_Lucene40StoredFieldsReader *self, PyObject *args);
          static PyObject *t_Lucene40StoredFieldsReader_close(t_Lucene40StoredFieldsReader *self, PyObject *args);
          static PyObject *t_Lucene40StoredFieldsReader_ramBytesUsed(t_Lucene40StoredFieldsReader *self, PyObject *args);
          static PyObject *t_Lucene40StoredFieldsReader_rawDocs(t_Lucene40StoredFieldsReader *self, PyObject *args);
          static PyObject *t_Lucene40StoredFieldsReader_size(t_Lucene40StoredFieldsReader *self);
          static PyObject *t_Lucene40StoredFieldsReader_visitDocument(t_Lucene40StoredFieldsReader *self, PyObject *args);

          static PyMethodDef t_Lucene40StoredFieldsReader__methods_[] = {
            DECLARE_METHOD(t_Lucene40StoredFieldsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40StoredFieldsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40StoredFieldsReader, checkIntegrity, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40StoredFieldsReader, clone, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40StoredFieldsReader, close, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40StoredFieldsReader, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40StoredFieldsReader, rawDocs, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40StoredFieldsReader, size, METH_NOARGS),
            DECLARE_METHOD(t_Lucene40StoredFieldsReader, visitDocument, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40StoredFieldsReader, t_Lucene40StoredFieldsReader, ::org::apache::lucene::codecs::StoredFieldsReader, Lucene40StoredFieldsReader, t_Lucene40StoredFieldsReader_init_, 0, 0, 0, 0, 0);

          void t_Lucene40StoredFieldsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40StoredFieldsReader), module, "Lucene40StoredFieldsReader", 0);
          }

          void t_Lucene40StoredFieldsReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40StoredFieldsReader).tp_dict, "class_", make_descriptor(Lucene40StoredFieldsReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40StoredFieldsReader).tp_dict, "wrapfn_", make_descriptor(t_Lucene40StoredFieldsReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40StoredFieldsReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40StoredFieldsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40StoredFieldsReader::initializeClass, 1)))
              return NULL;
            return t_Lucene40StoredFieldsReader::wrap_Object(Lucene40StoredFieldsReader(((t_Lucene40StoredFieldsReader *) arg)->object.this$));
          }
          static PyObject *t_Lucene40StoredFieldsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40StoredFieldsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40StoredFieldsReader_init_(t_Lucene40StoredFieldsReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);
            Lucene40StoredFieldsReader object((jobject) NULL);

            if (!parseArgs(args, "kkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = Lucene40StoredFieldsReader(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene40StoredFieldsReader_checkIntegrity(t_Lucene40StoredFieldsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.checkIntegrity());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40StoredFieldsReader), (PyObject *) self, "checkIntegrity", args, 2);
          }

          static PyObject *t_Lucene40StoredFieldsReader_clone(t_Lucene40StoredFieldsReader *self, PyObject *args)
          {
            Lucene40StoredFieldsReader result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_Lucene40StoredFieldsReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40StoredFieldsReader), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_Lucene40StoredFieldsReader_close(t_Lucene40StoredFieldsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40StoredFieldsReader), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_Lucene40StoredFieldsReader_ramBytesUsed(t_Lucene40StoredFieldsReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(Lucene40StoredFieldsReader), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_Lucene40StoredFieldsReader_rawDocs(t_Lucene40StoredFieldsReader *self, PyObject *args)
          {
            JArray< jint > a0((jobject) NULL);
            jint a1;
            jint a2;
            ::org::apache::lucene::store::IndexInput result((jobject) NULL);

            if (!parseArgs(args, "[III", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.rawDocs(a0, a1, a2));
              return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "rawDocs", args);
            return NULL;
          }

          static PyObject *t_Lucene40StoredFieldsReader_size(t_Lucene40StoredFieldsReader *self)
          {
            jint result;
            OBJ_CALL(result = self->object.size());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_Lucene40StoredFieldsReader_visitDocument(t_Lucene40StoredFieldsReader *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::index::StoredFieldVisitor a1((jobject) NULL);

            if (!parseArgs(args, "Ik", ::org::apache::lucene::index::StoredFieldVisitor::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.visitDocument(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40StoredFieldsReader), (PyObject *) self, "visitDocument", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/lv/LatvianAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace lv {

          ::java::lang::Class *LatvianAnalyzer::class$ = NULL;
          jmethodID *LatvianAnalyzer::mids$ = NULL;
          bool LatvianAnalyzer::live$ = false;
          ::java::lang::String *LatvianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass LatvianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/lv/LatvianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LatvianAnalyzer::LatvianAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          LatvianAnalyzer::LatvianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          LatvianAnalyzer::LatvianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet LatvianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace lv {
          static PyObject *t_LatvianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LatvianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LatvianAnalyzer_init_(t_LatvianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LatvianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_LatvianAnalyzer_get__defaultStopSet(t_LatvianAnalyzer *self, void *data);
          static PyGetSetDef t_LatvianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_LatvianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LatvianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_LatvianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LatvianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LatvianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LatvianAnalyzer, t_LatvianAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, LatvianAnalyzer, t_LatvianAnalyzer_init_, 0, 0, t_LatvianAnalyzer__fields_, 0, 0);

          void t_LatvianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(LatvianAnalyzer), module, "LatvianAnalyzer", 0);
          }

          void t_LatvianAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LatvianAnalyzer).tp_dict, "class_", make_descriptor(LatvianAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LatvianAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_LatvianAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LatvianAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(LatvianAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(LatvianAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*LatvianAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_LatvianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LatvianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_LatvianAnalyzer::wrap_Object(LatvianAnalyzer(((t_LatvianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_LatvianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LatvianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LatvianAnalyzer_init_(t_LatvianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                LatvianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = LatvianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                LatvianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = LatvianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                LatvianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = LatvianAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LatvianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::lv::LatvianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_LatvianAnalyzer_get__defaultStopSet(t_LatvianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/idversion/IDVersionPostingsFormat.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/FieldsConsumer.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/codecs/FieldsProducer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace idversion {

          ::java::lang::Class *IDVersionPostingsFormat::class$ = NULL;
          jmethodID *IDVersionPostingsFormat::mids$ = NULL;
          bool IDVersionPostingsFormat::live$ = false;
          jlong IDVersionPostingsFormat::MAX_VERSION = (jlong) 0;
          jlong IDVersionPostingsFormat::MIN_VERSION = (jlong) 0;

          jclass IDVersionPostingsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/idversion/IDVersionPostingsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_d8d154a6] = env->getMethodID(cls, "<init>", "(II)V");
              mids$[mid_bytesToLong_7bc03dd8] = env->getStaticMethodID(cls, "bytesToLong", "(Lorg/apache/lucene/util/BytesRef;)J");
              mids$[mid_fieldsConsumer_a15793c6] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/FieldsConsumer;");
              mids$[mid_fieldsProducer_c86c62bc] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/FieldsProducer;");
              mids$[mid_longToBytes_57875143] = env->getStaticMethodID(cls, "longToBytes", "(JLorg/apache/lucene/util/BytesRef;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              MAX_VERSION = env->getStaticLongField(cls, "MAX_VERSION");
              MIN_VERSION = env->getStaticLongField(cls, "MIN_VERSION");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IDVersionPostingsFormat::IDVersionPostingsFormat() : ::org::apache::lucene::codecs::PostingsFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          IDVersionPostingsFormat::IDVersionPostingsFormat(jint a0, jint a1) : ::org::apache::lucene::codecs::PostingsFormat(env->newObject(initializeClass, &mids$, mid_init$_d8d154a6, a0, a1)) {}

          jlong IDVersionPostingsFormat::bytesToLong(const ::org::apache::lucene::util::BytesRef & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticLongMethod(cls, mids$[mid_bytesToLong_7bc03dd8], a0.this$);
          }

          ::org::apache::lucene::codecs::FieldsConsumer IDVersionPostingsFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::FieldsConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_a15793c6], a0.this$));
          }

          ::org::apache::lucene::codecs::FieldsProducer IDVersionPostingsFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::FieldsProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_c86c62bc], a0.this$));
          }

          void IDVersionPostingsFormat::longToBytes(jlong a0, const ::org::apache::lucene::util::BytesRef & a1)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_longToBytes_57875143], a0, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace idversion {
          static PyObject *t_IDVersionPostingsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IDVersionPostingsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IDVersionPostingsFormat_init_(t_IDVersionPostingsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IDVersionPostingsFormat_bytesToLong(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IDVersionPostingsFormat_fieldsConsumer(t_IDVersionPostingsFormat *self, PyObject *args);
          static PyObject *t_IDVersionPostingsFormat_fieldsProducer(t_IDVersionPostingsFormat *self, PyObject *args);
          static PyObject *t_IDVersionPostingsFormat_longToBytes(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_IDVersionPostingsFormat__methods_[] = {
            DECLARE_METHOD(t_IDVersionPostingsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IDVersionPostingsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IDVersionPostingsFormat, bytesToLong, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IDVersionPostingsFormat, fieldsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionPostingsFormat, fieldsProducer, METH_VARARGS),
            DECLARE_METHOD(t_IDVersionPostingsFormat, longToBytes, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IDVersionPostingsFormat, t_IDVersionPostingsFormat, ::org::apache::lucene::codecs::PostingsFormat, IDVersionPostingsFormat, t_IDVersionPostingsFormat_init_, 0, 0, 0, 0, 0);

          void t_IDVersionPostingsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(IDVersionPostingsFormat), module, "IDVersionPostingsFormat", 0);
          }

          void t_IDVersionPostingsFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IDVersionPostingsFormat).tp_dict, "class_", make_descriptor(IDVersionPostingsFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IDVersionPostingsFormat).tp_dict, "wrapfn_", make_descriptor(t_IDVersionPostingsFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IDVersionPostingsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(IDVersionPostingsFormat::initializeClass);
            PyDict_SetItemString(PY_TYPE(IDVersionPostingsFormat).tp_dict, "MAX_VERSION", make_descriptor(IDVersionPostingsFormat::MAX_VERSION));
            PyDict_SetItemString(PY_TYPE(IDVersionPostingsFormat).tp_dict, "MIN_VERSION", make_descriptor(IDVersionPostingsFormat::MIN_VERSION));
          }

          static PyObject *t_IDVersionPostingsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IDVersionPostingsFormat::initializeClass, 1)))
              return NULL;
            return t_IDVersionPostingsFormat::wrap_Object(IDVersionPostingsFormat(((t_IDVersionPostingsFormat *) arg)->object.this$));
          }
          static PyObject *t_IDVersionPostingsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IDVersionPostingsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IDVersionPostingsFormat_init_(t_IDVersionPostingsFormat *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                IDVersionPostingsFormat object((jobject) NULL);

                INT_CALL(object = IDVersionPostingsFormat());
                self->object = object;
                break;
              }
              goto err;
             case 2:
              {
                jint a0;
                jint a1;
                IDVersionPostingsFormat object((jobject) NULL);

                if (!parseArgs(args, "II", &a0, &a1))
                {
                  INT_CALL(object = IDVersionPostingsFormat(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IDVersionPostingsFormat_bytesToLong(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            jlong result;

            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::codecs::idversion::IDVersionPostingsFormat::bytesToLong(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError(type, "bytesToLong", arg);
            return NULL;
          }

          static PyObject *t_IDVersionPostingsFormat_fieldsConsumer(t_IDVersionPostingsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::FieldsConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsConsumer(a0));
              return ::org::apache::lucene::codecs::t_FieldsConsumer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IDVersionPostingsFormat), (PyObject *) self, "fieldsConsumer", args, 2);
          }

          static PyObject *t_IDVersionPostingsFormat_fieldsProducer(t_IDVersionPostingsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::FieldsProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsProducer(a0));
              return ::org::apache::lucene::codecs::t_FieldsProducer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IDVersionPostingsFormat), (PyObject *) self, "fieldsProducer", args, 2);
          }

          static PyObject *t_IDVersionPostingsFormat_longToBytes(PyTypeObject *type, PyObject *args)
          {
            jlong a0;
            ::org::apache::lucene::util::BytesRef a1((jobject) NULL);

            if (!parseArgs(args, "Jk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(::org::apache::lucene::codecs::idversion::IDVersionPostingsFormat::longToBytes(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "longToBytes", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/gl/GalicianStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {

          ::java::lang::Class *GalicianStemmer::class$ = NULL;
          jmethodID *GalicianStemmer::mids$ = NULL;
          bool GalicianStemmer::live$ = false;

          jclass GalicianStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/gl/GalicianStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GalicianStemmer::GalicianStemmer() : ::org::apache::lucene::analysis::pt::RSLPStemmerBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint GalicianStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {
          static PyObject *t_GalicianStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GalicianStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GalicianStemmer_init_(t_GalicianStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GalicianStemmer_stem(t_GalicianStemmer *self, PyObject *args);

          static PyMethodDef t_GalicianStemmer__methods_[] = {
            DECLARE_METHOD(t_GalicianStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GalicianStemmer, t_GalicianStemmer, ::org::apache::lucene::analysis::pt::RSLPStemmerBase, GalicianStemmer, t_GalicianStemmer_init_, 0, 0, 0, 0, 0);

          void t_GalicianStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(GalicianStemmer), module, "GalicianStemmer", 0);
          }

          void t_GalicianStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GalicianStemmer).tp_dict, "class_", make_descriptor(GalicianStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GalicianStemmer).tp_dict, "wrapfn_", make_descriptor(t_GalicianStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GalicianStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GalicianStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GalicianStemmer::initializeClass, 1)))
              return NULL;
            return t_GalicianStemmer::wrap_Object(GalicianStemmer(((t_GalicianStemmer *) arg)->object.this$));
          }
          static PyObject *t_GalicianStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GalicianStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GalicianStemmer_init_(t_GalicianStemmer *self, PyObject *args, PyObject *kwds)
          {
            GalicianStemmer object((jobject) NULL);

            INT_CALL(object = GalicianStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_GalicianStemmer_stem(t_GalicianStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/SrndPrefixQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/surround/query/SimpleTerm$MatchingTermVisitor.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *SrndPrefixQuery::class$ = NULL;
            jmethodID *SrndPrefixQuery::mids$ = NULL;
            bool SrndPrefixQuery::live$ = false;

            jclass SrndPrefixQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/SrndPrefixQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f33a591b] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;ZC)V");
                mids$[mid_getLucenePrefixTerm_2864f4ee] = env->getMethodID(cls, "getLucenePrefixTerm", "(Ljava/lang/String;)Lorg/apache/lucene/index/Term;");
                mids$[mid_getPrefix_14c7b5c5] = env->getMethodID(cls, "getPrefix", "()Ljava/lang/String;");
                mids$[mid_getSuffixOperator_54c6a173] = env->getMethodID(cls, "getSuffixOperator", "()C");
                mids$[mid_toStringUnquoted_14c7b5c5] = env->getMethodID(cls, "toStringUnquoted", "()Ljava/lang/String;");
                mids$[mid_visitMatchingTerms_330199a1] = env->getMethodID(cls, "visitMatchingTerms", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/SimpleTerm$MatchingTermVisitor;)V");
                mids$[mid_suffixToString_9f94ae34] = env->getMethodID(cls, "suffixToString", "(Ljava/lang/StringBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SrndPrefixQuery::SrndPrefixQuery(const ::java::lang::String & a0, jboolean a1, jchar a2) : ::org::apache::lucene::queryparser::surround::query::SimpleTerm(env->newObject(initializeClass, &mids$, mid_init$_f33a591b, a0.this$, a1, a2)) {}

            ::org::apache::lucene::index::Term SrndPrefixQuery::getLucenePrefixTerm(const ::java::lang::String & a0) const
            {
              return ::org::apache::lucene::index::Term(env->callObjectMethod(this$, mids$[mid_getLucenePrefixTerm_2864f4ee], a0.this$));
            }

            ::java::lang::String SrndPrefixQuery::getPrefix() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getPrefix_14c7b5c5]));
            }

            jchar SrndPrefixQuery::getSuffixOperator() const
            {
              return env->callCharMethod(this$, mids$[mid_getSuffixOperator_54c6a173]);
            }

            ::java::lang::String SrndPrefixQuery::toStringUnquoted() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toStringUnquoted_14c7b5c5]));
            }

            void SrndPrefixQuery::visitMatchingTerms(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor & a2) const
            {
              env->callVoidMethod(this$, mids$[mid_visitMatchingTerms_330199a1], a0.this$, a1.this$, a2.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_SrndPrefixQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SrndPrefixQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SrndPrefixQuery_init_(t_SrndPrefixQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SrndPrefixQuery_getLucenePrefixTerm(t_SrndPrefixQuery *self, PyObject *arg);
            static PyObject *t_SrndPrefixQuery_getPrefix(t_SrndPrefixQuery *self);
            static PyObject *t_SrndPrefixQuery_getSuffixOperator(t_SrndPrefixQuery *self);
            static PyObject *t_SrndPrefixQuery_toStringUnquoted(t_SrndPrefixQuery *self, PyObject *args);
            static PyObject *t_SrndPrefixQuery_visitMatchingTerms(t_SrndPrefixQuery *self, PyObject *args);
            static PyObject *t_SrndPrefixQuery_get__prefix(t_SrndPrefixQuery *self, void *data);
            static PyObject *t_SrndPrefixQuery_get__suffixOperator(t_SrndPrefixQuery *self, void *data);
            static PyGetSetDef t_SrndPrefixQuery__fields_[] = {
              DECLARE_GET_FIELD(t_SrndPrefixQuery, prefix),
              DECLARE_GET_FIELD(t_SrndPrefixQuery, suffixOperator),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_SrndPrefixQuery__methods_[] = {
              DECLARE_METHOD(t_SrndPrefixQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SrndPrefixQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SrndPrefixQuery, getLucenePrefixTerm, METH_O),
              DECLARE_METHOD(t_SrndPrefixQuery, getPrefix, METH_NOARGS),
              DECLARE_METHOD(t_SrndPrefixQuery, getSuffixOperator, METH_NOARGS),
              DECLARE_METHOD(t_SrndPrefixQuery, toStringUnquoted, METH_VARARGS),
              DECLARE_METHOD(t_SrndPrefixQuery, visitMatchingTerms, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SrndPrefixQuery, t_SrndPrefixQuery, ::org::apache::lucene::queryparser::surround::query::SimpleTerm, SrndPrefixQuery, t_SrndPrefixQuery_init_, 0, 0, t_SrndPrefixQuery__fields_, 0, 0);

            void t_SrndPrefixQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(SrndPrefixQuery), module, "SrndPrefixQuery", 0);
            }

            void t_SrndPrefixQuery::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SrndPrefixQuery).tp_dict, "class_", make_descriptor(SrndPrefixQuery::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SrndPrefixQuery).tp_dict, "wrapfn_", make_descriptor(t_SrndPrefixQuery::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SrndPrefixQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SrndPrefixQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SrndPrefixQuery::initializeClass, 1)))
                return NULL;
              return t_SrndPrefixQuery::wrap_Object(SrndPrefixQuery(((t_SrndPrefixQuery *) arg)->object.this$));
            }
            static PyObject *t_SrndPrefixQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SrndPrefixQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SrndPrefixQuery_init_(t_SrndPrefixQuery *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              jboolean a1;
              jchar a2;
              SrndPrefixQuery object((jobject) NULL);

              if (!parseArgs(args, "sZC", &a0, &a1, &a2))
              {
                INT_CALL(object = SrndPrefixQuery(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_SrndPrefixQuery_getLucenePrefixTerm(t_SrndPrefixQuery *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::index::Term result((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = self->object.getLucenePrefixTerm(a0));
                return ::org::apache::lucene::index::t_Term::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getLucenePrefixTerm", arg);
              return NULL;
            }

            static PyObject *t_SrndPrefixQuery_getPrefix(t_SrndPrefixQuery *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getPrefix());
              return j2p(result);
            }

            static PyObject *t_SrndPrefixQuery_getSuffixOperator(t_SrndPrefixQuery *self)
            {
              jchar result;
              OBJ_CALL(result = self->object.getSuffixOperator());
              return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            static PyObject *t_SrndPrefixQuery_toStringUnquoted(t_SrndPrefixQuery *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toStringUnquoted());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(SrndPrefixQuery), (PyObject *) self, "toStringUnquoted", args, 2);
            }

            static PyObject *t_SrndPrefixQuery_visitMatchingTerms(t_SrndPrefixQuery *self, PyObject *args)
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor a2((jobject) NULL);

              if (!parseArgs(args, "ksk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.visitMatchingTerms(a0, a1, a2));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(SrndPrefixQuery), (PyObject *) self, "visitMatchingTerms", args, 2);
            }

            static PyObject *t_SrndPrefixQuery_get__prefix(t_SrndPrefixQuery *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getPrefix());
              return j2p(value);
            }

            static PyObject *t_SrndPrefixQuery_get__suffixOperator(t_SrndPrefixQuery *self, void *data)
            {
              jchar value;
              OBJ_CALL(value = self->object.getSuffixOperator());
              return PyUnicode_FromUnicode((Py_UNICODE *) &value, 1);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldValueHitQueue$Entry.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldValueHitQueue$Entry::class$ = NULL;
        jmethodID *FieldValueHitQueue$Entry::mids$ = NULL;
        jfieldID *FieldValueHitQueue$Entry::fids$ = NULL;
        bool FieldValueHitQueue$Entry::live$ = false;

        jclass FieldValueHitQueue$Entry::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldValueHitQueue$Entry");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a74e6883] = env->getMethodID(cls, "<init>", "(IIF)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_slot] = env->getFieldID(cls, "slot", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldValueHitQueue$Entry::FieldValueHitQueue$Entry(jint a0, jint a1, jfloat a2) : ::org::apache::lucene::search::ScoreDoc(env->newObject(initializeClass, &mids$, mid_init$_a74e6883, a0, a1, a2)) {}

        ::java::lang::String FieldValueHitQueue$Entry::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        jint FieldValueHitQueue$Entry::_get_slot() const
        {
          return env->getIntField(this$, fids$[fid_slot]);
        }

        void FieldValueHitQueue$Entry::_set_slot(jint a0) const
        {
          env->setIntField(this$, fids$[fid_slot], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldValueHitQueue$Entry_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldValueHitQueue$Entry_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldValueHitQueue$Entry_of_(t_FieldValueHitQueue$Entry *self, PyObject *args);
        static int t_FieldValueHitQueue$Entry_init_(t_FieldValueHitQueue$Entry *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldValueHitQueue$Entry_toString(t_FieldValueHitQueue$Entry *self, PyObject *args);
        static PyObject *t_FieldValueHitQueue$Entry_get__slot(t_FieldValueHitQueue$Entry *self, void *data);
        static int t_FieldValueHitQueue$Entry_set__slot(t_FieldValueHitQueue$Entry *self, PyObject *arg, void *data);

        static PyObject *t_FieldValueHitQueue$Entry_get__parameters_(t_FieldValueHitQueue$Entry *self, void *data);
        static PyGetSetDef t_FieldValueHitQueue$Entry__fields_[] = {
          DECLARE_GETSET_FIELD(t_FieldValueHitQueue$Entry, slot),
          DECLARE_GET_FIELD(t_FieldValueHitQueue$Entry, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldValueHitQueue$Entry__methods_[] = {
          DECLARE_METHOD(t_FieldValueHitQueue$Entry, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldValueHitQueue$Entry, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldValueHitQueue$Entry, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldValueHitQueue$Entry, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldValueHitQueue$Entry, t_FieldValueHitQueue$Entry, ::org::apache::lucene::search::ScoreDoc, FieldValueHitQueue$Entry, t_FieldValueHitQueue$Entry_init_, 0, 0, t_FieldValueHitQueue$Entry__fields_, 0, 0);
        PyObject *t_FieldValueHitQueue$Entry::wrap_Object(const FieldValueHitQueue$Entry& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldValueHitQueue$Entry::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldValueHitQueue$Entry *self = (t_FieldValueHitQueue$Entry *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldValueHitQueue$Entry::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldValueHitQueue$Entry::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldValueHitQueue$Entry *self = (t_FieldValueHitQueue$Entry *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldValueHitQueue$Entry::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldValueHitQueue$Entry), module, "FieldValueHitQueue$Entry", 0);
        }

        void t_FieldValueHitQueue$Entry::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldValueHitQueue$Entry).tp_dict, "class_", make_descriptor(FieldValueHitQueue$Entry::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldValueHitQueue$Entry).tp_dict, "wrapfn_", make_descriptor(t_FieldValueHitQueue$Entry::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldValueHitQueue$Entry).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldValueHitQueue$Entry_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldValueHitQueue$Entry::initializeClass, 1)))
            return NULL;
          return t_FieldValueHitQueue$Entry::wrap_Object(FieldValueHitQueue$Entry(((t_FieldValueHitQueue$Entry *) arg)->object.this$));
        }
        static PyObject *t_FieldValueHitQueue$Entry_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldValueHitQueue$Entry::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldValueHitQueue$Entry_of_(t_FieldValueHitQueue$Entry *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_FieldValueHitQueue$Entry_init_(t_FieldValueHitQueue$Entry *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          jint a1;
          jfloat a2;
          FieldValueHitQueue$Entry object((jobject) NULL);

          if (!parseArgs(args, "IIF", &a0, &a1, &a2))
          {
            INT_CALL(object = FieldValueHitQueue$Entry(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldValueHitQueue$Entry_toString(t_FieldValueHitQueue$Entry *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FieldValueHitQueue$Entry), (PyObject *) self, "toString", args, 2);
        }
        static PyObject *t_FieldValueHitQueue$Entry_get__parameters_(t_FieldValueHitQueue$Entry *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_FieldValueHitQueue$Entry_get__slot(t_FieldValueHitQueue$Entry *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_slot());
          return PyInt_FromLong((long) value);
        }
        static int t_FieldValueHitQueue$Entry_set__slot(t_FieldValueHitQueue$Entry *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_slot(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "slot", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/join/ToChildBlockJoinQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/Filter.h"
#include "org/apache/lucene/search/Weight.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {

          ::java::lang::Class *ToChildBlockJoinQuery::class$ = NULL;
          jmethodID *ToChildBlockJoinQuery::mids$ = NULL;
          bool ToChildBlockJoinQuery::live$ = false;

          jclass ToChildBlockJoinQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/join/ToChildBlockJoinQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4a597592] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;Z)V");
              mids$[mid_clone_c3569be0] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/search/join/ToChildBlockJoinQuery;");
              mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ToChildBlockJoinQuery::ToChildBlockJoinQuery(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::Filter & a1, jboolean a2) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_4a597592, a0.this$, a1.this$, a2)) {}

          ToChildBlockJoinQuery ToChildBlockJoinQuery::clone() const
          {
            return ToChildBlockJoinQuery(env->callObjectMethod(this$, mids$[mid_clone_c3569be0]));
          }

          ::org::apache::lucene::search::Weight ToChildBlockJoinQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
          {
            return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
          }

          jboolean ToChildBlockJoinQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          void ToChildBlockJoinQuery::extractTerms(const ::java::util::Set & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
          }

          jint ToChildBlockJoinQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::org::apache::lucene::search::Query ToChildBlockJoinQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
          }

          ::java::lang::String ToChildBlockJoinQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {
          static PyObject *t_ToChildBlockJoinQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ToChildBlockJoinQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ToChildBlockJoinQuery_init_(t_ToChildBlockJoinQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ToChildBlockJoinQuery_clone(t_ToChildBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ToChildBlockJoinQuery_createWeight(t_ToChildBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ToChildBlockJoinQuery_equals(t_ToChildBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ToChildBlockJoinQuery_extractTerms(t_ToChildBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ToChildBlockJoinQuery_hashCode(t_ToChildBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ToChildBlockJoinQuery_rewrite(t_ToChildBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ToChildBlockJoinQuery_toString(t_ToChildBlockJoinQuery *self, PyObject *args);

          static PyMethodDef t_ToChildBlockJoinQuery__methods_[] = {
            DECLARE_METHOD(t_ToChildBlockJoinQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToChildBlockJoinQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToChildBlockJoinQuery, clone, METH_VARARGS),
            DECLARE_METHOD(t_ToChildBlockJoinQuery, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_ToChildBlockJoinQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_ToChildBlockJoinQuery, extractTerms, METH_VARARGS),
            DECLARE_METHOD(t_ToChildBlockJoinQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_ToChildBlockJoinQuery, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_ToChildBlockJoinQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ToChildBlockJoinQuery, t_ToChildBlockJoinQuery, ::org::apache::lucene::search::Query, ToChildBlockJoinQuery, t_ToChildBlockJoinQuery_init_, 0, 0, 0, 0, 0);

          void t_ToChildBlockJoinQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(ToChildBlockJoinQuery), module, "ToChildBlockJoinQuery", 0);
          }

          void t_ToChildBlockJoinQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ToChildBlockJoinQuery).tp_dict, "class_", make_descriptor(ToChildBlockJoinQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ToChildBlockJoinQuery).tp_dict, "wrapfn_", make_descriptor(t_ToChildBlockJoinQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ToChildBlockJoinQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ToChildBlockJoinQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ToChildBlockJoinQuery::initializeClass, 1)))
              return NULL;
            return t_ToChildBlockJoinQuery::wrap_Object(ToChildBlockJoinQuery(((t_ToChildBlockJoinQuery *) arg)->object.this$));
          }
          static PyObject *t_ToChildBlockJoinQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ToChildBlockJoinQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ToChildBlockJoinQuery_init_(t_ToChildBlockJoinQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::Query a0((jobject) NULL);
            ::org::apache::lucene::search::Filter a1((jobject) NULL);
            jboolean a2;
            ToChildBlockJoinQuery object((jobject) NULL);

            if (!parseArgs(args, "kkZ", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = ToChildBlockJoinQuery(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ToChildBlockJoinQuery_clone(t_ToChildBlockJoinQuery *self, PyObject *args)
          {
            ToChildBlockJoinQuery result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_ToChildBlockJoinQuery::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ToChildBlockJoinQuery), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_ToChildBlockJoinQuery_createWeight(t_ToChildBlockJoinQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::search::Weight result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.createWeight(a0));
              return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ToChildBlockJoinQuery), (PyObject *) self, "createWeight", args, 2);
          }

          static PyObject *t_ToChildBlockJoinQuery_equals(t_ToChildBlockJoinQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ToChildBlockJoinQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_ToChildBlockJoinQuery_extractTerms(t_ToChildBlockJoinQuery *self, PyObject *args)
          {
            ::java::util::Set a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(self->object.extractTerms(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ToChildBlockJoinQuery), (PyObject *) self, "extractTerms", args, 2);
          }

          static PyObject *t_ToChildBlockJoinQuery_hashCode(t_ToChildBlockJoinQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(ToChildBlockJoinQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_ToChildBlockJoinQuery_rewrite(t_ToChildBlockJoinQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ToChildBlockJoinQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_ToChildBlockJoinQuery_toString(t_ToChildBlockJoinQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(ToChildBlockJoinQuery), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/CharacterUtils$CharacterBuffer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *CharacterUtils$CharacterBuffer::class$ = NULL;
          jmethodID *CharacterUtils$CharacterBuffer::mids$ = NULL;
          bool CharacterUtils$CharacterBuffer::live$ = false;

          jclass CharacterUtils$CharacterBuffer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/CharacterUtils$CharacterBuffer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getBuffer_dab10e7f] = env->getMethodID(cls, "getBuffer", "()[C");
              mids$[mid_getLength_54c6a179] = env->getMethodID(cls, "getLength", "()I");
              mids$[mid_getOffset_54c6a179] = env->getMethodID(cls, "getOffset", "()I");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JArray< jchar > CharacterUtils$CharacterBuffer::getBuffer() const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_getBuffer_dab10e7f]));
          }

          jint CharacterUtils$CharacterBuffer::getLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getLength_54c6a179]);
          }

          jint CharacterUtils$CharacterBuffer::getOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getOffset_54c6a179]);
          }

          void CharacterUtils$CharacterBuffer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_CharacterUtils$CharacterBuffer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharacterUtils$CharacterBuffer_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharacterUtils$CharacterBuffer_getBuffer(t_CharacterUtils$CharacterBuffer *self);
          static PyObject *t_CharacterUtils$CharacterBuffer_getLength(t_CharacterUtils$CharacterBuffer *self);
          static PyObject *t_CharacterUtils$CharacterBuffer_getOffset(t_CharacterUtils$CharacterBuffer *self);
          static PyObject *t_CharacterUtils$CharacterBuffer_reset(t_CharacterUtils$CharacterBuffer *self);
          static PyObject *t_CharacterUtils$CharacterBuffer_get__buffer(t_CharacterUtils$CharacterBuffer *self, void *data);
          static PyObject *t_CharacterUtils$CharacterBuffer_get__length(t_CharacterUtils$CharacterBuffer *self, void *data);
          static PyObject *t_CharacterUtils$CharacterBuffer_get__offset(t_CharacterUtils$CharacterBuffer *self, void *data);
          static PyGetSetDef t_CharacterUtils$CharacterBuffer__fields_[] = {
            DECLARE_GET_FIELD(t_CharacterUtils$CharacterBuffer, buffer),
            DECLARE_GET_FIELD(t_CharacterUtils$CharacterBuffer, length),
            DECLARE_GET_FIELD(t_CharacterUtils$CharacterBuffer, offset),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CharacterUtils$CharacterBuffer__methods_[] = {
            DECLARE_METHOD(t_CharacterUtils$CharacterBuffer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharacterUtils$CharacterBuffer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharacterUtils$CharacterBuffer, getBuffer, METH_NOARGS),
            DECLARE_METHOD(t_CharacterUtils$CharacterBuffer, getLength, METH_NOARGS),
            DECLARE_METHOD(t_CharacterUtils$CharacterBuffer, getOffset, METH_NOARGS),
            DECLARE_METHOD(t_CharacterUtils$CharacterBuffer, reset, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CharacterUtils$CharacterBuffer, t_CharacterUtils$CharacterBuffer, ::java::lang::Object, CharacterUtils$CharacterBuffer, abstract_init, 0, 0, t_CharacterUtils$CharacterBuffer__fields_, 0, 0);

          void t_CharacterUtils$CharacterBuffer::install(PyObject *module)
          {
            installType(&PY_TYPE(CharacterUtils$CharacterBuffer), module, "CharacterUtils$CharacterBuffer", 0);
          }

          void t_CharacterUtils$CharacterBuffer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CharacterUtils$CharacterBuffer).tp_dict, "class_", make_descriptor(CharacterUtils$CharacterBuffer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CharacterUtils$CharacterBuffer).tp_dict, "wrapfn_", make_descriptor(t_CharacterUtils$CharacterBuffer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CharacterUtils$CharacterBuffer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CharacterUtils$CharacterBuffer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharacterUtils$CharacterBuffer::initializeClass, 1)))
              return NULL;
            return t_CharacterUtils$CharacterBuffer::wrap_Object(CharacterUtils$CharacterBuffer(((t_CharacterUtils$CharacterBuffer *) arg)->object.this$));
          }
          static PyObject *t_CharacterUtils$CharacterBuffer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharacterUtils$CharacterBuffer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CharacterUtils$CharacterBuffer_getBuffer(t_CharacterUtils$CharacterBuffer *self)
          {
            JArray< jchar > result((jobject) NULL);
            OBJ_CALL(result = self->object.getBuffer());
            return result.wrap();
          }

          static PyObject *t_CharacterUtils$CharacterBuffer_getLength(t_CharacterUtils$CharacterBuffer *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CharacterUtils$CharacterBuffer_getOffset(t_CharacterUtils$CharacterBuffer *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CharacterUtils$CharacterBuffer_reset(t_CharacterUtils$CharacterBuffer *self)
          {
            OBJ_CALL(self->object.reset());
            Py_RETURN_NONE;
          }

          static PyObject *t_CharacterUtils$CharacterBuffer_get__buffer(t_CharacterUtils$CharacterBuffer *self, void *data)
          {
            JArray< jchar > value((jobject) NULL);
            OBJ_CALL(value = self->object.getBuffer());
            return value.wrap();
          }

          static PyObject *t_CharacterUtils$CharacterBuffer_get__length(t_CharacterUtils$CharacterBuffer *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getLength());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_CharacterUtils$CharacterBuffer_get__offset(t_CharacterUtils$CharacterBuffer *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getOffset());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/collation/tokenattributes/CollatedTermAttributeImpl.h"
#include "java/text/Collator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace collation {
        namespace tokenattributes {

          ::java::lang::Class *CollatedTermAttributeImpl::class$ = NULL;
          jmethodID *CollatedTermAttributeImpl::mids$ = NULL;
          bool CollatedTermAttributeImpl::live$ = false;

          jclass CollatedTermAttributeImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/collation/tokenattributes/CollatedTermAttributeImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c5e10a9c] = env->getMethodID(cls, "<init>", "(Ljava/text/Collator;)V");
              mids$[mid_fillBytesRef_54c6a166] = env->getMethodID(cls, "fillBytesRef", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CollatedTermAttributeImpl::CollatedTermAttributeImpl(const ::java::text::Collator & a0) : ::org::apache::lucene::analysis::tokenattributes::CharTermAttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_c5e10a9c, a0.this$)) {}

          void CollatedTermAttributeImpl::fillBytesRef() const
          {
            env->callVoidMethod(this$, mids$[mid_fillBytesRef_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace collation {
        namespace tokenattributes {
          static PyObject *t_CollatedTermAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CollatedTermAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CollatedTermAttributeImpl_init_(t_CollatedTermAttributeImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CollatedTermAttributeImpl_fillBytesRef(t_CollatedTermAttributeImpl *self, PyObject *args);

          static PyMethodDef t_CollatedTermAttributeImpl__methods_[] = {
            DECLARE_METHOD(t_CollatedTermAttributeImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CollatedTermAttributeImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CollatedTermAttributeImpl, fillBytesRef, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CollatedTermAttributeImpl, t_CollatedTermAttributeImpl, ::org::apache::lucene::analysis::tokenattributes::CharTermAttributeImpl, CollatedTermAttributeImpl, t_CollatedTermAttributeImpl_init_, 0, 0, 0, 0, 0);

          void t_CollatedTermAttributeImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(CollatedTermAttributeImpl), module, "CollatedTermAttributeImpl", 0);
          }

          void t_CollatedTermAttributeImpl::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CollatedTermAttributeImpl).tp_dict, "class_", make_descriptor(CollatedTermAttributeImpl::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CollatedTermAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_CollatedTermAttributeImpl::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CollatedTermAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CollatedTermAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CollatedTermAttributeImpl::initializeClass, 1)))
              return NULL;
            return t_CollatedTermAttributeImpl::wrap_Object(CollatedTermAttributeImpl(((t_CollatedTermAttributeImpl *) arg)->object.this$));
          }
          static PyObject *t_CollatedTermAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CollatedTermAttributeImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CollatedTermAttributeImpl_init_(t_CollatedTermAttributeImpl *self, PyObject *args, PyObject *kwds)
          {
            ::java::text::Collator a0((jobject) NULL);
            CollatedTermAttributeImpl object((jobject) NULL);

            if (!parseArgs(args, "k", ::java::text::Collator::initializeClass, &a0))
            {
              INT_CALL(object = CollatedTermAttributeImpl(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CollatedTermAttributeImpl_fillBytesRef(t_CollatedTermAttributeImpl *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.fillBytesRef());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CollatedTermAttributeImpl), (PyObject *) self, "fillBytesRef", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/gl/GalicianStemFilterFactory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {

          ::java::lang::Class *GalicianStemFilterFactory::class$ = NULL;
          jmethodID *GalicianStemFilterFactory::mids$ = NULL;
          bool GalicianStemFilterFactory::live$ = false;

          jclass GalicianStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/gl/GalicianStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GalicianStemFilterFactory::GalicianStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream GalicianStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {
          static PyObject *t_GalicianStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GalicianStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GalicianStemFilterFactory_init_(t_GalicianStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GalicianStemFilterFactory_create(t_GalicianStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_GalicianStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_GalicianStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GalicianStemFilterFactory, t_GalicianStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, GalicianStemFilterFactory, t_GalicianStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_GalicianStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(GalicianStemFilterFactory), module, "GalicianStemFilterFactory", 0);
          }

          void t_GalicianStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GalicianStemFilterFactory).tp_dict, "class_", make_descriptor(GalicianStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GalicianStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_GalicianStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GalicianStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GalicianStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GalicianStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_GalicianStemFilterFactory::wrap_Object(GalicianStemFilterFactory(((t_GalicianStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_GalicianStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GalicianStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GalicianStemFilterFactory_init_(t_GalicianStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            GalicianStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = GalicianStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GalicianStemFilterFactory_create(t_GalicianStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(GalicianStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupResult.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {

            ::java::lang::Class *AnalyzingSuggester::class$ = NULL;
            jmethodID *AnalyzingSuggester::mids$ = NULL;
            bool AnalyzingSuggester::live$ = false;
            jint AnalyzingSuggester::EXACT_FIRST = (jint) 0;
            jint AnalyzingSuggester::PRESERVE_SEP = (jint) 0;

            jclass AnalyzingSuggester::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_31619410] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");
                mids$[mid_init$_6a3c5772] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/Analyzer;)V");
                mids$[mid_init$_9a7c82f9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/Analyzer;IIIZ)V");
                mids$[mid_build_1754a234] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/search/suggest/InputIterator;)V");
                mids$[mid_get_a739ccff] = env->getMethodID(cls, "get", "(Ljava/lang/CharSequence;)Ljava/lang/Object;");
                mids$[mid_getCount_54c6a17a] = env->getMethodID(cls, "getCount", "()J");
                mids$[mid_load_f5d6a55d] = env->getMethodID(cls, "load", "(Lorg/apache/lucene/store/DataInput;)Z");
                mids$[mid_lookup_dd3e9f51] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;ZI)Ljava/util/List;");
                mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
                mids$[mid_store_27875f5b] = env->getMethodID(cls, "store", "(Lorg/apache/lucene/store/DataOutput;)Z");
                mids$[mid_convertAutomaton_7aca8e1f] = env->getMethodID(cls, "convertAutomaton", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");
                mids$[mid_getFullPrefixPaths_a9ea3855] = env->getMethodID(cls, "getFullPrefixPaths", "(Ljava/util/List;Lorg/apache/lucene/util/automaton/Automaton;Lorg/apache/lucene/util/fst/FST;)Ljava/util/List;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                EXACT_FIRST = env->getStaticIntField(cls, "EXACT_FIRST");
                PRESERVE_SEP = env->getStaticIntField(cls, "PRESERVE_SEP");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            AnalyzingSuggester::AnalyzingSuggester(const ::org::apache::lucene::analysis::Analyzer & a0) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_31619410, a0.this$)) {}

            AnalyzingSuggester::AnalyzingSuggester(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_6a3c5772, a0.this$, a1.this$)) {}

            AnalyzingSuggester::AnalyzingSuggester(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::analysis::Analyzer & a1, jint a2, jint a3, jint a4, jboolean a5) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_9a7c82f9, a0.this$, a1.this$, a2, a3, a4, a5)) {}

            void AnalyzingSuggester::build(const ::org::apache::lucene::search::suggest::InputIterator & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_build_1754a234], a0.this$);
            }

            ::java::lang::Object AnalyzingSuggester::get(const ::java::lang::CharSequence & a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_a739ccff], a0.this$));
            }

            jlong AnalyzingSuggester::getCount() const
            {
              return env->callLongMethod(this$, mids$[mid_getCount_54c6a17a]);
            }

            jboolean AnalyzingSuggester::load(const ::org::apache::lucene::store::DataInput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_load_f5d6a55d], a0.this$);
            }

            ::java::util::List AnalyzingSuggester::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jboolean a2, jint a3) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_dd3e9f51], a0.this$, a1.this$, a2, a3));
            }

            jlong AnalyzingSuggester::ramBytesUsed() const
            {
              return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
            }

            jboolean AnalyzingSuggester::store(const ::org::apache::lucene::store::DataOutput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_store_27875f5b], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {
            static PyObject *t_AnalyzingSuggester_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_AnalyzingSuggester_instance_(PyTypeObject *type, PyObject *arg);
            static int t_AnalyzingSuggester_init_(t_AnalyzingSuggester *self, PyObject *args, PyObject *kwds);
            static PyObject *t_AnalyzingSuggester_build(t_AnalyzingSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingSuggester_get(t_AnalyzingSuggester *self, PyObject *arg);
            static PyObject *t_AnalyzingSuggester_getCount(t_AnalyzingSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingSuggester_load(t_AnalyzingSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingSuggester_lookup(t_AnalyzingSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingSuggester_ramBytesUsed(t_AnalyzingSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingSuggester_store(t_AnalyzingSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingSuggester_get__count(t_AnalyzingSuggester *self, void *data);
            static PyGetSetDef t_AnalyzingSuggester__fields_[] = {
              DECLARE_GET_FIELD(t_AnalyzingSuggester, count),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_AnalyzingSuggester__methods_[] = {
              DECLARE_METHOD(t_AnalyzingSuggester, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_AnalyzingSuggester, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_AnalyzingSuggester, build, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingSuggester, get, METH_O),
              DECLARE_METHOD(t_AnalyzingSuggester, getCount, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingSuggester, load, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingSuggester, lookup, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingSuggester, ramBytesUsed, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingSuggester, store, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(AnalyzingSuggester, t_AnalyzingSuggester, ::org::apache::lucene::search::suggest::Lookup, AnalyzingSuggester, t_AnalyzingSuggester_init_, 0, 0, t_AnalyzingSuggester__fields_, 0, 0);

            void t_AnalyzingSuggester::install(PyObject *module)
            {
              installType(&PY_TYPE(AnalyzingSuggester), module, "AnalyzingSuggester", 0);
            }

            void t_AnalyzingSuggester::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(AnalyzingSuggester).tp_dict, "class_", make_descriptor(AnalyzingSuggester::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(AnalyzingSuggester).tp_dict, "wrapfn_", make_descriptor(t_AnalyzingSuggester::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(AnalyzingSuggester).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(AnalyzingSuggester::initializeClass);
              PyDict_SetItemString(PY_TYPE(AnalyzingSuggester).tp_dict, "EXACT_FIRST", make_descriptor(AnalyzingSuggester::EXACT_FIRST));
              PyDict_SetItemString(PY_TYPE(AnalyzingSuggester).tp_dict, "PRESERVE_SEP", make_descriptor(AnalyzingSuggester::PRESERVE_SEP));
            }

            static PyObject *t_AnalyzingSuggester_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, AnalyzingSuggester::initializeClass, 1)))
                return NULL;
              return t_AnalyzingSuggester::wrap_Object(AnalyzingSuggester(((t_AnalyzingSuggester *) arg)->object.this$));
            }
            static PyObject *t_AnalyzingSuggester_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, AnalyzingSuggester::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_AnalyzingSuggester_init_(t_AnalyzingSuggester *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  AnalyzingSuggester object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
                  {
                    INT_CALL(object = AnalyzingSuggester(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                  AnalyzingSuggester object((jobject) NULL);

                  if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = AnalyzingSuggester(a0, a1));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 6:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                  jint a2;
                  jint a3;
                  jint a4;
                  jboolean a5;
                  AnalyzingSuggester object((jobject) NULL);

                  if (!parseArgs(args, "kkIIIZ", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
                  {
                    INT_CALL(object = AnalyzingSuggester(a0, a1, a2, a3, a4, a5));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_AnalyzingSuggester_build(t_AnalyzingSuggester *self, PyObject *args)
            {
              ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0))
              {
                OBJ_CALL(self->object.build(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(AnalyzingSuggester), (PyObject *) self, "build", args, 2);
            }

            static PyObject *t_AnalyzingSuggester_get(t_AnalyzingSuggester *self, PyObject *arg)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::lang::Object result((jobject) NULL);

              if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_AnalyzingSuggester_getCount(t_AnalyzingSuggester *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getCount());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(AnalyzingSuggester), (PyObject *) self, "getCount", args, 2);
            }

            static PyObject *t_AnalyzingSuggester_load(t_AnalyzingSuggester *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataInput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.load(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(AnalyzingSuggester), (PyObject *) self, "load", args, 2);
            }

            static PyObject *t_AnalyzingSuggester_lookup(t_AnalyzingSuggester *self, PyObject *args)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::util::Set a1((jobject) NULL);
              PyTypeObject **p1;
              jboolean a2;
              jint a3;
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, "OKZI", &::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3))
              {
                OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3));
                return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
              }

              return callSuper(&PY_TYPE(AnalyzingSuggester), (PyObject *) self, "lookup", args, 2);
            }

            static PyObject *t_AnalyzingSuggester_ramBytesUsed(t_AnalyzingSuggester *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.ramBytesUsed());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(AnalyzingSuggester), (PyObject *) self, "ramBytesUsed", args, 2);
            }

            static PyObject *t_AnalyzingSuggester_store(t_AnalyzingSuggester *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.store(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(AnalyzingSuggester), (PyObject *) self, "store", args, 2);
            }

            static PyObject *t_AnalyzingSuggester_get__count(t_AnalyzingSuggester *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object.getCount());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/WeakIdentityMap.h"
#include "java/util/Iterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *WeakIdentityMap::class$ = NULL;
        jmethodID *WeakIdentityMap::mids$ = NULL;
        bool WeakIdentityMap::live$ = false;

        jclass WeakIdentityMap::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/WeakIdentityMap");

            mids$ = new jmethodID[max_mid];
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_containsKey_290588e2] = env->getMethodID(cls, "containsKey", "(Ljava/lang/Object;)Z");
            mids$[mid_get_a932a95f] = env->getMethodID(cls, "get", "(Ljava/lang/Object;)Ljava/lang/Object;");
            mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
            mids$[mid_keyIterator_40858c90] = env->getMethodID(cls, "keyIterator", "()Ljava/util/Iterator;");
            mids$[mid_newConcurrentHashMap_0c924cc6] = env->getStaticMethodID(cls, "newConcurrentHashMap", "()Lorg/apache/lucene/util/WeakIdentityMap;");
            mids$[mid_newConcurrentHashMap_8f638b79] = env->getStaticMethodID(cls, "newConcurrentHashMap", "(Z)Lorg/apache/lucene/util/WeakIdentityMap;");
            mids$[mid_newHashMap_0c924cc6] = env->getStaticMethodID(cls, "newHashMap", "()Lorg/apache/lucene/util/WeakIdentityMap;");
            mids$[mid_newHashMap_8f638b79] = env->getStaticMethodID(cls, "newHashMap", "(Z)Lorg/apache/lucene/util/WeakIdentityMap;");
            mids$[mid_put_537d5bdf] = env->getMethodID(cls, "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
            mids$[mid_reap_54c6a166] = env->getMethodID(cls, "reap", "()V");
            mids$[mid_remove_a932a95f] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Ljava/lang/Object;");
            mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
            mids$[mid_valueIterator_40858c90] = env->getMethodID(cls, "valueIterator", "()Ljava/util/Iterator;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void WeakIdentityMap::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        jboolean WeakIdentityMap::containsKey(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_containsKey_290588e2], a0.this$);
        }

        ::java::lang::Object WeakIdentityMap::get(const ::java::lang::Object & a0) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_a932a95f], a0.this$));
        }

        jboolean WeakIdentityMap::isEmpty() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isEmpty_54c6a16a]);
        }

        ::java::util::Iterator WeakIdentityMap::keyIterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_keyIterator_40858c90]));
        }

        WeakIdentityMap WeakIdentityMap::newConcurrentHashMap()
        {
          jclass cls = env->getClass(initializeClass);
          return WeakIdentityMap(env->callStaticObjectMethod(cls, mids$[mid_newConcurrentHashMap_0c924cc6]));
        }

        WeakIdentityMap WeakIdentityMap::newConcurrentHashMap(jboolean a0)
        {
          jclass cls = env->getClass(initializeClass);
          return WeakIdentityMap(env->callStaticObjectMethod(cls, mids$[mid_newConcurrentHashMap_8f638b79], a0));
        }

        WeakIdentityMap WeakIdentityMap::newHashMap()
        {
          jclass cls = env->getClass(initializeClass);
          return WeakIdentityMap(env->callStaticObjectMethod(cls, mids$[mid_newHashMap_0c924cc6]));
        }

        WeakIdentityMap WeakIdentityMap::newHashMap(jboolean a0)
        {
          jclass cls = env->getClass(initializeClass);
          return WeakIdentityMap(env->callStaticObjectMethod(cls, mids$[mid_newHashMap_8f638b79], a0));
        }

        ::java::lang::Object WeakIdentityMap::put(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_put_537d5bdf], a0.this$, a1.this$));
        }

        void WeakIdentityMap::reap() const
        {
          env->callVoidMethod(this$, mids$[mid_reap_54c6a166]);
        }

        ::java::lang::Object WeakIdentityMap::remove(const ::java::lang::Object & a0) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_remove_a932a95f], a0.this$));
        }

        jint WeakIdentityMap::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
        }

        ::java::util::Iterator WeakIdentityMap::valueIterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_valueIterator_40858c90]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_WeakIdentityMap_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_WeakIdentityMap_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_WeakIdentityMap_of_(t_WeakIdentityMap *self, PyObject *args);
        static PyObject *t_WeakIdentityMap_clear(t_WeakIdentityMap *self);
        static PyObject *t_WeakIdentityMap_containsKey(t_WeakIdentityMap *self, PyObject *arg);
        static PyObject *t_WeakIdentityMap_get(t_WeakIdentityMap *self, PyObject *arg);
        static PyObject *t_WeakIdentityMap_isEmpty(t_WeakIdentityMap *self);
        static PyObject *t_WeakIdentityMap_keyIterator(t_WeakIdentityMap *self);
        static PyObject *t_WeakIdentityMap_newConcurrentHashMap(PyTypeObject *type, PyObject *args);
        static PyObject *t_WeakIdentityMap_newHashMap(PyTypeObject *type, PyObject *args);
        static PyObject *t_WeakIdentityMap_put(t_WeakIdentityMap *self, PyObject *args);
        static PyObject *t_WeakIdentityMap_reap(t_WeakIdentityMap *self);
        static PyObject *t_WeakIdentityMap_remove(t_WeakIdentityMap *self, PyObject *arg);
        static PyObject *t_WeakIdentityMap_size(t_WeakIdentityMap *self);
        static PyObject *t_WeakIdentityMap_valueIterator(t_WeakIdentityMap *self);
        static PyObject *t_WeakIdentityMap_get__empty(t_WeakIdentityMap *self, void *data);
        static PyObject *t_WeakIdentityMap_get__parameters_(t_WeakIdentityMap *self, void *data);
        static PyGetSetDef t_WeakIdentityMap__fields_[] = {
          DECLARE_GET_FIELD(t_WeakIdentityMap, empty),
          DECLARE_GET_FIELD(t_WeakIdentityMap, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_WeakIdentityMap__methods_[] = {
          DECLARE_METHOD(t_WeakIdentityMap, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_WeakIdentityMap, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_WeakIdentityMap, of_, METH_VARARGS),
          DECLARE_METHOD(t_WeakIdentityMap, clear, METH_NOARGS),
          DECLARE_METHOD(t_WeakIdentityMap, containsKey, METH_O),
          DECLARE_METHOD(t_WeakIdentityMap, get, METH_O),
          DECLARE_METHOD(t_WeakIdentityMap, isEmpty, METH_NOARGS),
          DECLARE_METHOD(t_WeakIdentityMap, keyIterator, METH_NOARGS),
          DECLARE_METHOD(t_WeakIdentityMap, newConcurrentHashMap, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_WeakIdentityMap, newHashMap, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_WeakIdentityMap, put, METH_VARARGS),
          DECLARE_METHOD(t_WeakIdentityMap, reap, METH_NOARGS),
          DECLARE_METHOD(t_WeakIdentityMap, remove, METH_O),
          DECLARE_METHOD(t_WeakIdentityMap, size, METH_NOARGS),
          DECLARE_METHOD(t_WeakIdentityMap, valueIterator, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(WeakIdentityMap, t_WeakIdentityMap, ::java::lang::Object, WeakIdentityMap, abstract_init, 0, 0, t_WeakIdentityMap__fields_, 0, 0);
        PyObject *t_WeakIdentityMap::wrap_Object(const WeakIdentityMap& object, PyTypeObject *p0, PyTypeObject *p1)
        {
          PyObject *obj = t_WeakIdentityMap::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_WeakIdentityMap *self = (t_WeakIdentityMap *) obj;
            self->parameters[0] = p0;
            self->parameters[1] = p1;
          }
          return obj;
        }

        PyObject *t_WeakIdentityMap::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
        {
          PyObject *obj = t_WeakIdentityMap::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_WeakIdentityMap *self = (t_WeakIdentityMap *) obj;
            self->parameters[0] = p0;
            self->parameters[1] = p1;
          }
          return obj;
        }

        void t_WeakIdentityMap::install(PyObject *module)
        {
          installType(&PY_TYPE(WeakIdentityMap), module, "WeakIdentityMap", 0);
        }

        void t_WeakIdentityMap::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(WeakIdentityMap).tp_dict, "class_", make_descriptor(WeakIdentityMap::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(WeakIdentityMap).tp_dict, "wrapfn_", make_descriptor(t_WeakIdentityMap::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(WeakIdentityMap).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_WeakIdentityMap_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, WeakIdentityMap::initializeClass, 1)))
            return NULL;
          return t_WeakIdentityMap::wrap_Object(WeakIdentityMap(((t_WeakIdentityMap *) arg)->object.this$));
        }
        static PyObject *t_WeakIdentityMap_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, WeakIdentityMap::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_WeakIdentityMap_of_(t_WeakIdentityMap *self, PyObject *args)
        {
          if (!parseArg(args, "T", 2, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_WeakIdentityMap_clear(t_WeakIdentityMap *self)
        {
          OBJ_CALL(self->object.clear());
          Py_RETURN_NONE;
        }

        static PyObject *t_WeakIdentityMap_containsKey(t_WeakIdentityMap *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "o", &a0))
          {
            OBJ_CALL(result = self->object.containsKey(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "containsKey", arg);
          return NULL;
        }

        static PyObject *t_WeakIdentityMap_get(t_WeakIdentityMap *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::Object result((jobject) NULL);

          if (!parseArg(arg, "o", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_WeakIdentityMap_isEmpty(t_WeakIdentityMap *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isEmpty());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_WeakIdentityMap_keyIterator(t_WeakIdentityMap *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.keyIterator());
          return ::java::util::t_Iterator::wrap_Object(result, self->parameters[0]);
        }

        static PyObject *t_WeakIdentityMap_newConcurrentHashMap(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              WeakIdentityMap result((jobject) NULL);
              OBJ_CALL(result = ::org::apache::lucene::util::WeakIdentityMap::newConcurrentHashMap());
              return t_WeakIdentityMap::wrap_Object(result);
            }
            break;
           case 1:
            {
              jboolean a0;
              WeakIdentityMap result((jobject) NULL);

              if (!parseArgs(args, "Z", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::WeakIdentityMap::newConcurrentHashMap(a0));
                return t_WeakIdentityMap::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "newConcurrentHashMap", args);
          return NULL;
        }

        static PyObject *t_WeakIdentityMap_newHashMap(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              WeakIdentityMap result((jobject) NULL);
              OBJ_CALL(result = ::org::apache::lucene::util::WeakIdentityMap::newHashMap());
              return t_WeakIdentityMap::wrap_Object(result);
            }
            break;
           case 1:
            {
              jboolean a0;
              WeakIdentityMap result((jobject) NULL);

              if (!parseArgs(args, "Z", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::WeakIdentityMap::newHashMap(a0));
                return t_WeakIdentityMap::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "newHashMap", args);
          return NULL;
        }

        static PyObject *t_WeakIdentityMap_put(t_WeakIdentityMap *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::Object a1((jobject) NULL);
          ::java::lang::Object result((jobject) NULL);

          if (!parseArgs(args, "OO", self->parameters[0], self->parameters[1], &a0, &a1))
          {
            OBJ_CALL(result = self->object.put(a0, a1));
            return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "put", args);
          return NULL;
        }

        static PyObject *t_WeakIdentityMap_reap(t_WeakIdentityMap *self)
        {
          OBJ_CALL(self->object.reap());
          Py_RETURN_NONE;
        }

        static PyObject *t_WeakIdentityMap_remove(t_WeakIdentityMap *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::Object result((jobject) NULL);

          if (!parseArg(arg, "o", &a0))
          {
            OBJ_CALL(result = self->object.remove(a0));
            return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "remove", arg);
          return NULL;
        }

        static PyObject *t_WeakIdentityMap_size(t_WeakIdentityMap *self)
        {
          jint result;
          OBJ_CALL(result = self->object.size());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_WeakIdentityMap_valueIterator(t_WeakIdentityMap *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.valueIterator());
          return ::java::util::t_Iterator::wrap_Object(result, self->parameters[1]);
        }
        static PyObject *t_WeakIdentityMap_get__parameters_(t_WeakIdentityMap *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_WeakIdentityMap_get__empty(t_WeakIdentityMap *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isEmpty());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldComparator$ShortComparator.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "java/lang/Short.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldComparator$ShortComparator::class$ = NULL;
        jmethodID *FieldComparator$ShortComparator::mids$ = NULL;
        bool FieldComparator$ShortComparator::live$ = false;

        jclass FieldComparator$ShortComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldComparator$ShortComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
            mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
            mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
            mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");
            mids$[mid_setBottom_39c7bd3c] = env->getMethodID(cls, "setBottom", "(I)V");
            mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_setTopValue_6b8573ce] = env->getMethodID(cls, "setTopValue", "(Ljava/lang/Short;)V");
            mids$[mid_value_5bcaf269] = env->getMethodID(cls, "value", "(I)Ljava/lang/Short;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint FieldComparator$ShortComparator::compare(jint a0, jint a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compare_d8d154b9], a0, a1);
        }

        jint FieldComparator$ShortComparator::compareBottom(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareBottom_39c7bd23], a0);
        }

        jint FieldComparator$ShortComparator::compareTop(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTop_39c7bd23], a0);
        }

        void FieldComparator$ShortComparator::copy(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_d8d154a6], a0, a1);
        }

        void FieldComparator$ShortComparator::setBottom(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBottom_39c7bd3c], a0);
        }

        ::org::apache::lucene::search::FieldComparator FieldComparator$ShortComparator::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_setNextReader_6329aed7], a0.this$));
        }

        void FieldComparator$ShortComparator::setTopValue(const ::java::lang::Short & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTopValue_6b8573ce], a0.this$);
        }

        ::java::lang::Short FieldComparator$ShortComparator::value(jint a0) const
        {
          return ::java::lang::Short(env->callObjectMethod(this$, mids$[mid_value_5bcaf269], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldComparator$ShortComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$ShortComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$ShortComparator_of_(t_FieldComparator$ShortComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ShortComparator_compare(t_FieldComparator$ShortComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ShortComparator_compareBottom(t_FieldComparator$ShortComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ShortComparator_compareTop(t_FieldComparator$ShortComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ShortComparator_copy(t_FieldComparator$ShortComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ShortComparator_setBottom(t_FieldComparator$ShortComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ShortComparator_setNextReader(t_FieldComparator$ShortComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ShortComparator_setTopValue(t_FieldComparator$ShortComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ShortComparator_value(t_FieldComparator$ShortComparator *self, PyObject *args);
        static int t_FieldComparator$ShortComparator_set__bottom(t_FieldComparator$ShortComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$ShortComparator_set__nextReader(t_FieldComparator$ShortComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$ShortComparator_set__topValue(t_FieldComparator$ShortComparator *self, PyObject *arg, void *data);
        static PyObject *t_FieldComparator$ShortComparator_get__parameters_(t_FieldComparator$ShortComparator *self, void *data);
        static PyGetSetDef t_FieldComparator$ShortComparator__fields_[] = {
          DECLARE_SET_FIELD(t_FieldComparator$ShortComparator, bottom),
          DECLARE_SET_FIELD(t_FieldComparator$ShortComparator, nextReader),
          DECLARE_SET_FIELD(t_FieldComparator$ShortComparator, topValue),
          DECLARE_GET_FIELD(t_FieldComparator$ShortComparator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldComparator$ShortComparator__methods_[] = {
          DECLARE_METHOD(t_FieldComparator$ShortComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$ShortComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$ShortComparator, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ShortComparator, compare, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ShortComparator, compareBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ShortComparator, compareTop, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ShortComparator, copy, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ShortComparator, setBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ShortComparator, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ShortComparator, setTopValue, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ShortComparator, value, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldComparator$ShortComparator, t_FieldComparator$ShortComparator, ::org::apache::lucene::search::FieldComparator$NumericComparator, FieldComparator$ShortComparator, abstract_init, 0, 0, t_FieldComparator$ShortComparator__fields_, 0, 0);
        PyObject *t_FieldComparator$ShortComparator::wrap_Object(const FieldComparator$ShortComparator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$ShortComparator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$ShortComparator *self = (t_FieldComparator$ShortComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldComparator$ShortComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$ShortComparator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$ShortComparator *self = (t_FieldComparator$ShortComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldComparator$ShortComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldComparator$ShortComparator), module, "FieldComparator$ShortComparator", 0);
        }

        void t_FieldComparator$ShortComparator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldComparator$ShortComparator).tp_dict, "class_", make_descriptor(FieldComparator$ShortComparator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldComparator$ShortComparator).tp_dict, "wrapfn_", make_descriptor(t_FieldComparator$ShortComparator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldComparator$ShortComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldComparator$ShortComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldComparator$ShortComparator::initializeClass, 1)))
            return NULL;
          return t_FieldComparator$ShortComparator::wrap_Object(FieldComparator$ShortComparator(((t_FieldComparator$ShortComparator *) arg)->object.this$));
        }
        static PyObject *t_FieldComparator$ShortComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldComparator$ShortComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldComparator$ShortComparator_of_(t_FieldComparator$ShortComparator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_FieldComparator$ShortComparator_compare(t_FieldComparator$ShortComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$ShortComparator), (PyObject *) self, "compare", args, 2);
        }

        static PyObject *t_FieldComparator$ShortComparator_compareBottom(t_FieldComparator$ShortComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareBottom(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$ShortComparator), (PyObject *) self, "compareBottom", args, 2);
        }

        static PyObject *t_FieldComparator$ShortComparator_compareTop(t_FieldComparator$ShortComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareTop(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$ShortComparator), (PyObject *) self, "compareTop", args, 2);
        }

        static PyObject *t_FieldComparator$ShortComparator_copy(t_FieldComparator$ShortComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.copy(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$ShortComparator), (PyObject *) self, "copy", args, 2);
        }

        static PyObject *t_FieldComparator$ShortComparator_setBottom(t_FieldComparator$ShortComparator *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.setBottom(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$ShortComparator), (PyObject *) self, "setBottom", args, 2);
        }

        static PyObject *t_FieldComparator$ShortComparator_setNextReader(t_FieldComparator$ShortComparator *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setNextReader(a0));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result, &::java::lang::PY_TYPE(Short));
          }

          return callSuper(&PY_TYPE(FieldComparator$ShortComparator), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_FieldComparator$ShortComparator_setTopValue(t_FieldComparator$ShortComparator *self, PyObject *args)
        {
          ::java::lang::Short a0((jobject) NULL);

          if (!parseArgs(args, "O", &::java::lang::PY_TYPE(Short), &a0))
          {
            OBJ_CALL(self->object.setTopValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$ShortComparator), (PyObject *) self, "setTopValue", args, 2);
        }

        static PyObject *t_FieldComparator$ShortComparator_value(t_FieldComparator$ShortComparator *self, PyObject *args)
        {
          jint a0;
          ::java::lang::Short result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.value(a0));
            return ::java::lang::t_Short::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldComparator$ShortComparator), (PyObject *) self, "value", args, 2);
        }
        static PyObject *t_FieldComparator$ShortComparator_get__parameters_(t_FieldComparator$ShortComparator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static int t_FieldComparator$ShortComparator_set__bottom(t_FieldComparator$ShortComparator *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setBottom(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bottom", arg);
          return -1;
        }

        static int t_FieldComparator$ShortComparator_set__nextReader(t_FieldComparator$ShortComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_FieldComparator$ShortComparator_set__topValue(t_FieldComparator$ShortComparator *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::Short value((jobject) NULL);
            if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Short), &value))
            {
              INT_CALL(self->object.setTopValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "topValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/en/PorterStemFilterFactory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/en/PorterStemFilter.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {

          ::java::lang::Class *PorterStemFilterFactory::class$ = NULL;
          jmethodID *PorterStemFilterFactory::mids$ = NULL;
          bool PorterStemFilterFactory::live$ = false;

          jclass PorterStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/en/PorterStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_520ef479] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/en/PorterStemFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PorterStemFilterFactory::PorterStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::en::PorterStemFilter PorterStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::en::PorterStemFilter(env->callObjectMethod(this$, mids$[mid_create_520ef479], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {
          static PyObject *t_PorterStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PorterStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PorterStemFilterFactory_init_(t_PorterStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PorterStemFilterFactory_create(t_PorterStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_PorterStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_PorterStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PorterStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PorterStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PorterStemFilterFactory, t_PorterStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, PorterStemFilterFactory, t_PorterStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_PorterStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PorterStemFilterFactory), module, "PorterStemFilterFactory", 0);
          }

          void t_PorterStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PorterStemFilterFactory).tp_dict, "class_", make_descriptor(PorterStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PorterStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_PorterStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PorterStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PorterStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PorterStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_PorterStemFilterFactory::wrap_Object(PorterStemFilterFactory(((t_PorterStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_PorterStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PorterStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PorterStemFilterFactory_init_(t_PorterStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PorterStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PorterStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PorterStemFilterFactory_create(t_PorterStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::en::PorterStemFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::en::t_PorterStemFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PorterStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/Fragmenter.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *Fragmenter::class$ = NULL;
          jmethodID *Fragmenter::mids$ = NULL;
          bool Fragmenter::live$ = false;

          jclass Fragmenter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/Fragmenter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_isNewFragment_54c6a16a] = env->getMethodID(cls, "isNewFragment", "()Z");
              mids$[mid_start_7d0c5392] = env->getMethodID(cls, "start", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jboolean Fragmenter::isNewFragment() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isNewFragment_54c6a16a]);
          }

          void Fragmenter::start(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_start_7d0c5392], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_Fragmenter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Fragmenter_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Fragmenter_isNewFragment(t_Fragmenter *self);
          static PyObject *t_Fragmenter_start(t_Fragmenter *self, PyObject *args);
          static PyObject *t_Fragmenter_get__newFragment(t_Fragmenter *self, void *data);
          static PyGetSetDef t_Fragmenter__fields_[] = {
            DECLARE_GET_FIELD(t_Fragmenter, newFragment),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Fragmenter__methods_[] = {
            DECLARE_METHOD(t_Fragmenter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Fragmenter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Fragmenter, isNewFragment, METH_NOARGS),
            DECLARE_METHOD(t_Fragmenter, start, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Fragmenter, t_Fragmenter, ::java::lang::Object, Fragmenter, abstract_init, 0, 0, t_Fragmenter__fields_, 0, 0);

          void t_Fragmenter::install(PyObject *module)
          {
            installType(&PY_TYPE(Fragmenter), module, "Fragmenter", 0);
          }

          void t_Fragmenter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Fragmenter).tp_dict, "class_", make_descriptor(Fragmenter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Fragmenter).tp_dict, "wrapfn_", make_descriptor(t_Fragmenter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Fragmenter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Fragmenter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Fragmenter::initializeClass, 1)))
              return NULL;
            return t_Fragmenter::wrap_Object(Fragmenter(((t_Fragmenter *) arg)->object.this$));
          }
          static PyObject *t_Fragmenter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Fragmenter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Fragmenter_isNewFragment(t_Fragmenter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isNewFragment());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_Fragmenter_start(t_Fragmenter *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.start(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "start", args);
            return NULL;
          }

          static PyObject *t_Fragmenter_get__newFragment(t_Fragmenter *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isNewFragment());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/codecs/BlockTermState.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/index/DocsEnum.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene41 {

          ::java::lang::Class *Lucene41PostingsReader::class$ = NULL;
          jmethodID *Lucene41PostingsReader::mids$ = NULL;
          bool Lucene41PostingsReader::live$ = false;

          jclass Lucene41PostingsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene41/Lucene41PostingsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_b18a8355] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/store/IOContext;Ljava/lang/String;)V");
              mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_decodeTerm_0d1f34e8] = env->getMethodID(cls, "decodeTerm", "([JLorg/apache/lucene/store/DataInput;Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/BlockTermState;Z)V");
              mids$[mid_docs_4cca8a9c] = env->getMethodID(cls, "docs", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/BlockTermState;Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsEnum;I)Lorg/apache/lucene/index/DocsEnum;");
              mids$[mid_docsAndPositions_3ae1ca58] = env->getMethodID(cls, "docsAndPositions", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/BlockTermState;Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsAndPositionsEnum;I)Lorg/apache/lucene/index/DocsAndPositionsEnum;");
              mids$[mid_init_0441f0b2] = env->getMethodID(cls, "init", "(Lorg/apache/lucene/store/IndexInput;)V");
              mids$[mid_newTermState_9f93879c] = env->getMethodID(cls, "newTermState", "()Lorg/apache/lucene/codecs/BlockTermState;");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene41PostingsReader::Lucene41PostingsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::FieldInfos & a1, const ::org::apache::lucene::index::SegmentInfo & a2, const ::org::apache::lucene::store::IOContext & a3, const ::java::lang::String & a4) : ::org::apache::lucene::codecs::PostingsReaderBase(env->newObject(initializeClass, &mids$, mid_init$_b18a8355, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$)) {}

          void Lucene41PostingsReader::checkIntegrity() const
          {
            env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
          }

          void Lucene41PostingsReader::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          void Lucene41PostingsReader::decodeTerm(const JArray< jlong > & a0, const ::org::apache::lucene::store::DataInput & a1, const ::org::apache::lucene::index::FieldInfo & a2, const ::org::apache::lucene::codecs::BlockTermState & a3, jboolean a4) const
          {
            env->callVoidMethod(this$, mids$[mid_decodeTerm_0d1f34e8], a0.this$, a1.this$, a2.this$, a3.this$, a4);
          }

          ::org::apache::lucene::index::DocsEnum Lucene41PostingsReader::docs(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::codecs::BlockTermState & a1, const ::org::apache::lucene::util::Bits & a2, const ::org::apache::lucene::index::DocsEnum & a3, jint a4) const
          {
            return ::org::apache::lucene::index::DocsEnum(env->callObjectMethod(this$, mids$[mid_docs_4cca8a9c], a0.this$, a1.this$, a2.this$, a3.this$, a4));
          }

          ::org::apache::lucene::index::DocsAndPositionsEnum Lucene41PostingsReader::docsAndPositions(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::codecs::BlockTermState & a1, const ::org::apache::lucene::util::Bits & a2, const ::org::apache::lucene::index::DocsAndPositionsEnum & a3, jint a4) const
          {
            return ::org::apache::lucene::index::DocsAndPositionsEnum(env->callObjectMethod(this$, mids$[mid_docsAndPositions_3ae1ca58], a0.this$, a1.this$, a2.this$, a3.this$, a4));
          }

          void Lucene41PostingsReader::init(const ::org::apache::lucene::store::IndexInput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_init_0441f0b2], a0.this$);
          }

          ::org::apache::lucene::codecs::BlockTermState Lucene41PostingsReader::newTermState() const
          {
            return ::org::apache::lucene::codecs::BlockTermState(env->callObjectMethod(this$, mids$[mid_newTermState_9f93879c]));
          }

          jlong Lucene41PostingsReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene41 {
          static PyObject *t_Lucene41PostingsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene41PostingsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene41PostingsReader_init_(t_Lucene41PostingsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene41PostingsReader_checkIntegrity(t_Lucene41PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene41PostingsReader_close(t_Lucene41PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene41PostingsReader_decodeTerm(t_Lucene41PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene41PostingsReader_docs(t_Lucene41PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene41PostingsReader_docsAndPositions(t_Lucene41PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene41PostingsReader_init(t_Lucene41PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene41PostingsReader_newTermState(t_Lucene41PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene41PostingsReader_ramBytesUsed(t_Lucene41PostingsReader *self, PyObject *args);

          static PyMethodDef t_Lucene41PostingsReader__methods_[] = {
            DECLARE_METHOD(t_Lucene41PostingsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene41PostingsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene41PostingsReader, checkIntegrity, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsReader, close, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsReader, decodeTerm, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsReader, docs, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsReader, docsAndPositions, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsReader, init, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsReader, newTermState, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsReader, ramBytesUsed, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene41PostingsReader, t_Lucene41PostingsReader, ::org::apache::lucene::codecs::PostingsReaderBase, Lucene41PostingsReader, t_Lucene41PostingsReader_init_, 0, 0, 0, 0, 0);

          void t_Lucene41PostingsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene41PostingsReader), module, "Lucene41PostingsReader", 0);
          }

          void t_Lucene41PostingsReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsReader).tp_dict, "class_", make_descriptor(Lucene41PostingsReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsReader).tp_dict, "wrapfn_", make_descriptor(t_Lucene41PostingsReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene41PostingsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene41PostingsReader::initializeClass, 1)))
              return NULL;
            return t_Lucene41PostingsReader::wrap_Object(Lucene41PostingsReader(((t_Lucene41PostingsReader *) arg)->object.this$));
          }
          static PyObject *t_Lucene41PostingsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene41PostingsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene41PostingsReader_init_(t_Lucene41PostingsReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a1((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);
            ::java::lang::String a4((jobject) NULL);
            Lucene41PostingsReader object((jobject) NULL);

            if (!parseArgs(args, "kkkks", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = Lucene41PostingsReader(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene41PostingsReader_checkIntegrity(t_Lucene41PostingsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.checkIntegrity());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene41PostingsReader), (PyObject *) self, "checkIntegrity", args, 2);
          }

          static PyObject *t_Lucene41PostingsReader_close(t_Lucene41PostingsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene41PostingsReader), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_Lucene41PostingsReader_decodeTerm(t_Lucene41PostingsReader *self, PyObject *args)
          {
            JArray< jlong > a0((jobject) NULL);
            ::org::apache::lucene::store::DataInput a1((jobject) NULL);
            ::org::apache::lucene::index::FieldInfo a2((jobject) NULL);
            ::org::apache::lucene::codecs::BlockTermState a3((jobject) NULL);
            jboolean a4;

            if (!parseArgs(args, "[JkkkZ", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(self->object.decodeTerm(a0, a1, a2, a3, a4));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene41PostingsReader), (PyObject *) self, "decodeTerm", args, 2);
          }

          static PyObject *t_Lucene41PostingsReader_docs(t_Lucene41PostingsReader *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            ::org::apache::lucene::codecs::BlockTermState a1((jobject) NULL);
            ::org::apache::lucene::util::Bits a2((jobject) NULL);
            ::org::apache::lucene::index::DocsEnum a3((jobject) NULL);
            jint a4;
            ::org::apache::lucene::index::DocsEnum result((jobject) NULL);

            if (!parseArgs(args, "kkkkI", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsEnum::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.docs(a0, a1, a2, a3, a4));
              return ::org::apache::lucene::index::t_DocsEnum::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41PostingsReader), (PyObject *) self, "docs", args, 2);
          }

          static PyObject *t_Lucene41PostingsReader_docsAndPositions(t_Lucene41PostingsReader *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            ::org::apache::lucene::codecs::BlockTermState a1((jobject) NULL);
            ::org::apache::lucene::util::Bits a2((jobject) NULL);
            ::org::apache::lucene::index::DocsAndPositionsEnum a3((jobject) NULL);
            jint a4;
            ::org::apache::lucene::index::DocsAndPositionsEnum result((jobject) NULL);

            if (!parseArgs(args, "kkkkI", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsAndPositionsEnum::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.docsAndPositions(a0, a1, a2, a3, a4));
              return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41PostingsReader), (PyObject *) self, "docsAndPositions", args, 2);
          }

          static PyObject *t_Lucene41PostingsReader_init(t_Lucene41PostingsReader *self, PyObject *args)
          {
            ::org::apache::lucene::store::IndexInput a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::IndexInput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.init(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene41PostingsReader), (PyObject *) self, "init", args, 2);
          }

          static PyObject *t_Lucene41PostingsReader_newTermState(t_Lucene41PostingsReader *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::BlockTermState result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.newTermState());
              return ::org::apache::lucene::codecs::t_BlockTermState::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41PostingsReader), (PyObject *) self, "newTermState", args, 2);
          }

          static PyObject *t_Lucene41PostingsReader_ramBytesUsed(t_Lucene41PostingsReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(Lucene41PostingsReader), (PyObject *) self, "ramBytesUsed", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter$StemmerOverrideMap.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/fst/FST$BytesReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/fst/FST$Arc.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *StemmerOverrideFilter$StemmerOverrideMap::class$ = NULL;
          jmethodID *StemmerOverrideFilter$StemmerOverrideMap::mids$ = NULL;
          bool StemmerOverrideFilter$StemmerOverrideMap::live$ = false;

          jclass StemmerOverrideFilter$StemmerOverrideMap::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter$StemmerOverrideMap");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_6d8e5bb9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/FST;Z)V");
              mids$[mid_get_b662c4bb] = env->getMethodID(cls, "get", "([CILorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$BytesReader;)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_getBytesReader_92a3fc65] = env->getMethodID(cls, "getBytesReader", "()Lorg/apache/lucene/util/fst/FST$BytesReader;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StemmerOverrideFilter$StemmerOverrideMap::StemmerOverrideFilter$StemmerOverrideMap(const ::org::apache::lucene::util::fst::FST & a0, jboolean a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6d8e5bb9, a0.this$, a1)) {}

          ::org::apache::lucene::util::BytesRef StemmerOverrideFilter$StemmerOverrideMap::get(const JArray< jchar > & a0, jint a1, const ::org::apache::lucene::util::fst::FST$Arc & a2, const ::org::apache::lucene::util::fst::FST$BytesReader & a3) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_get_b662c4bb], a0.this$, a1, a2.this$, a3.this$));
          }

          ::org::apache::lucene::util::fst::FST$BytesReader StemmerOverrideFilter$StemmerOverrideMap::getBytesReader() const
          {
            return ::org::apache::lucene::util::fst::FST$BytesReader(env->callObjectMethod(this$, mids$[mid_getBytesReader_92a3fc65]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_StemmerOverrideFilter$StemmerOverrideMap_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StemmerOverrideFilter$StemmerOverrideMap_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StemmerOverrideFilter$StemmerOverrideMap_init_(t_StemmerOverrideFilter$StemmerOverrideMap *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StemmerOverrideFilter$StemmerOverrideMap_get(t_StemmerOverrideFilter$StemmerOverrideMap *self, PyObject *args);
          static PyObject *t_StemmerOverrideFilter$StemmerOverrideMap_getBytesReader(t_StemmerOverrideFilter$StemmerOverrideMap *self);
          static PyObject *t_StemmerOverrideFilter$StemmerOverrideMap_get__bytesReader(t_StemmerOverrideFilter$StemmerOverrideMap *self, void *data);
          static PyGetSetDef t_StemmerOverrideFilter$StemmerOverrideMap__fields_[] = {
            DECLARE_GET_FIELD(t_StemmerOverrideFilter$StemmerOverrideMap, bytesReader),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_StemmerOverrideFilter$StemmerOverrideMap__methods_[] = {
            DECLARE_METHOD(t_StemmerOverrideFilter$StemmerOverrideMap, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StemmerOverrideFilter$StemmerOverrideMap, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StemmerOverrideFilter$StemmerOverrideMap, get, METH_VARARGS),
            DECLARE_METHOD(t_StemmerOverrideFilter$StemmerOverrideMap, getBytesReader, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StemmerOverrideFilter$StemmerOverrideMap, t_StemmerOverrideFilter$StemmerOverrideMap, ::java::lang::Object, StemmerOverrideFilter$StemmerOverrideMap, t_StemmerOverrideFilter$StemmerOverrideMap_init_, 0, 0, t_StemmerOverrideFilter$StemmerOverrideMap__fields_, 0, 0);

          void t_StemmerOverrideFilter$StemmerOverrideMap::install(PyObject *module)
          {
            installType(&PY_TYPE(StemmerOverrideFilter$StemmerOverrideMap), module, "StemmerOverrideFilter$StemmerOverrideMap", 0);
          }

          void t_StemmerOverrideFilter$StemmerOverrideMap::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StemmerOverrideFilter$StemmerOverrideMap).tp_dict, "class_", make_descriptor(StemmerOverrideFilter$StemmerOverrideMap::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StemmerOverrideFilter$StemmerOverrideMap).tp_dict, "wrapfn_", make_descriptor(t_StemmerOverrideFilter$StemmerOverrideMap::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StemmerOverrideFilter$StemmerOverrideMap).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StemmerOverrideFilter$StemmerOverrideMap_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StemmerOverrideFilter$StemmerOverrideMap::initializeClass, 1)))
              return NULL;
            return t_StemmerOverrideFilter$StemmerOverrideMap::wrap_Object(StemmerOverrideFilter$StemmerOverrideMap(((t_StemmerOverrideFilter$StemmerOverrideMap *) arg)->object.this$));
          }
          static PyObject *t_StemmerOverrideFilter$StemmerOverrideMap_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StemmerOverrideFilter$StemmerOverrideMap::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StemmerOverrideFilter$StemmerOverrideMap_init_(t_StemmerOverrideFilter$StemmerOverrideMap *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
            PyTypeObject **p0;
            jboolean a1;
            StemmerOverrideFilter$StemmerOverrideMap object((jobject) NULL);

            if (!parseArgs(args, "KZ", ::org::apache::lucene::util::fst::FST::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_, &a1))
            {
              INT_CALL(object = StemmerOverrideFilter$StemmerOverrideMap(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StemmerOverrideFilter$StemmerOverrideMap_get(t_StemmerOverrideFilter$StemmerOverrideMap *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::util::fst::FST$Arc a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::util::fst::FST$BytesReader a3((jobject) NULL);
            PyTypeObject **p3;
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, "[CIKK", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$BytesReader::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a3, &p3, ::org::apache::lucene::util::fst::t_FST$BytesReader::parameters_))
            {
              OBJ_CALL(result = self->object.get(a0, a1, a2, a3));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "get", args);
            return NULL;
          }

          static PyObject *t_StemmerOverrideFilter$StemmerOverrideMap_getBytesReader(t_StemmerOverrideFilter$StemmerOverrideMap *self)
          {
            ::org::apache::lucene::util::fst::FST$BytesReader result((jobject) NULL);
            OBJ_CALL(result = self->object.getBytesReader());
            return ::org::apache::lucene::util::fst::t_FST$BytesReader::wrap_Object(result);
          }

          static PyObject *t_StemmerOverrideFilter$StemmerOverrideMap_get__bytesReader(t_StemmerOverrideFilter$StemmerOverrideMap *self, void *data)
          {
            ::org::apache::lucene::util::fst::FST$BytesReader value((jobject) NULL);
            OBJ_CALL(value = self->object.getBytesReader());
            return ::org::apache::lucene::util::fst::t_FST$BytesReader::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/BreakIteratorBoundaryScanner.h"
#include "org/apache/lucene/search/vectorhighlight/BoundaryScanner.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Class.h"
#include "java/text/BreakIterator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *BreakIteratorBoundaryScanner::class$ = NULL;
          jmethodID *BreakIteratorBoundaryScanner::mids$ = NULL;
          bool BreakIteratorBoundaryScanner::live$ = false;

          jclass BreakIteratorBoundaryScanner::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/BreakIteratorBoundaryScanner");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_918887c2] = env->getMethodID(cls, "<init>", "(Ljava/text/BreakIterator;)V");
              mids$[mid_findEndOffset_f3d950f1] = env->getMethodID(cls, "findEndOffset", "(Ljava/lang/StringBuilder;I)I");
              mids$[mid_findStartOffset_f3d950f1] = env->getMethodID(cls, "findStartOffset", "(Ljava/lang/StringBuilder;I)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BreakIteratorBoundaryScanner::BreakIteratorBoundaryScanner(const ::java::text::BreakIterator & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_918887c2, a0.this$)) {}

          jint BreakIteratorBoundaryScanner::findEndOffset(const ::java::lang::StringBuilder & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_findEndOffset_f3d950f1], a0.this$, a1);
          }

          jint BreakIteratorBoundaryScanner::findStartOffset(const ::java::lang::StringBuilder & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_findStartOffset_f3d950f1], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_BreakIteratorBoundaryScanner_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BreakIteratorBoundaryScanner_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BreakIteratorBoundaryScanner_init_(t_BreakIteratorBoundaryScanner *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BreakIteratorBoundaryScanner_findEndOffset(t_BreakIteratorBoundaryScanner *self, PyObject *args);
          static PyObject *t_BreakIteratorBoundaryScanner_findStartOffset(t_BreakIteratorBoundaryScanner *self, PyObject *args);

          static PyMethodDef t_BreakIteratorBoundaryScanner__methods_[] = {
            DECLARE_METHOD(t_BreakIteratorBoundaryScanner, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BreakIteratorBoundaryScanner, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BreakIteratorBoundaryScanner, findEndOffset, METH_VARARGS),
            DECLARE_METHOD(t_BreakIteratorBoundaryScanner, findStartOffset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BreakIteratorBoundaryScanner, t_BreakIteratorBoundaryScanner, ::java::lang::Object, BreakIteratorBoundaryScanner, t_BreakIteratorBoundaryScanner_init_, 0, 0, 0, 0, 0);

          void t_BreakIteratorBoundaryScanner::install(PyObject *module)
          {
            installType(&PY_TYPE(BreakIteratorBoundaryScanner), module, "BreakIteratorBoundaryScanner", 0);
          }

          void t_BreakIteratorBoundaryScanner::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BreakIteratorBoundaryScanner).tp_dict, "class_", make_descriptor(BreakIteratorBoundaryScanner::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BreakIteratorBoundaryScanner).tp_dict, "wrapfn_", make_descriptor(t_BreakIteratorBoundaryScanner::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BreakIteratorBoundaryScanner).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BreakIteratorBoundaryScanner_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BreakIteratorBoundaryScanner::initializeClass, 1)))
              return NULL;
            return t_BreakIteratorBoundaryScanner::wrap_Object(BreakIteratorBoundaryScanner(((t_BreakIteratorBoundaryScanner *) arg)->object.this$));
          }
          static PyObject *t_BreakIteratorBoundaryScanner_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BreakIteratorBoundaryScanner::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BreakIteratorBoundaryScanner_init_(t_BreakIteratorBoundaryScanner *self, PyObject *args, PyObject *kwds)
          {
            ::java::text::BreakIterator a0((jobject) NULL);
            BreakIteratorBoundaryScanner object((jobject) NULL);

            if (!parseArgs(args, "k", ::java::text::BreakIterator::initializeClass, &a0))
            {
              INT_CALL(object = BreakIteratorBoundaryScanner(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BreakIteratorBoundaryScanner_findEndOffset(t_BreakIteratorBoundaryScanner *self, PyObject *args)
          {
            ::java::lang::StringBuilder a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "kI", ::java::lang::StringBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.findEndOffset(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "findEndOffset", args);
            return NULL;
          }

          static PyObject *t_BreakIteratorBoundaryScanner_findStartOffset(t_BreakIteratorBoundaryScanner *self, PyObject *args)
          {
            ::java::lang::StringBuilder a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "kI", ::java::lang::StringBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.findStartOffset(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "findStartOffset", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/OrdTermState.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *OrdTermState::class$ = NULL;
        jmethodID *OrdTermState::mids$ = NULL;
        jfieldID *OrdTermState::fids$ = NULL;
        bool OrdTermState::live$ = false;

        jclass OrdTermState::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/OrdTermState");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_copyFrom_d506ca07] = env->getMethodID(cls, "copyFrom", "(Lorg/apache/lucene/index/TermState;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_ord] = env->getFieldID(cls, "ord", "J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        OrdTermState::OrdTermState() : ::org::apache::lucene::index::TermState(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void OrdTermState::copyFrom(const ::org::apache::lucene::index::TermState & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyFrom_d506ca07], a0.this$);
        }

        ::java::lang::String OrdTermState::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        jlong OrdTermState::_get_ord() const
        {
          return env->getLongField(this$, fids$[fid_ord]);
        }

        void OrdTermState::_set_ord(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_ord], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_OrdTermState_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OrdTermState_instance_(PyTypeObject *type, PyObject *arg);
        static int t_OrdTermState_init_(t_OrdTermState *self, PyObject *args, PyObject *kwds);
        static PyObject *t_OrdTermState_copyFrom(t_OrdTermState *self, PyObject *args);
        static PyObject *t_OrdTermState_toString(t_OrdTermState *self, PyObject *args);
        static PyObject *t_OrdTermState_get__ord(t_OrdTermState *self, void *data);
        static int t_OrdTermState_set__ord(t_OrdTermState *self, PyObject *arg, void *data);

        static PyGetSetDef t_OrdTermState__fields_[] = {
          DECLARE_GETSET_FIELD(t_OrdTermState, ord),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_OrdTermState__methods_[] = {
          DECLARE_METHOD(t_OrdTermState, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OrdTermState, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OrdTermState, copyFrom, METH_VARARGS),
          DECLARE_METHOD(t_OrdTermState, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(OrdTermState, t_OrdTermState, ::org::apache::lucene::index::TermState, OrdTermState, t_OrdTermState_init_, 0, 0, t_OrdTermState__fields_, 0, 0);

        void t_OrdTermState::install(PyObject *module)
        {
          installType(&PY_TYPE(OrdTermState), module, "OrdTermState", 0);
        }

        void t_OrdTermState::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(OrdTermState).tp_dict, "class_", make_descriptor(OrdTermState::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(OrdTermState).tp_dict, "wrapfn_", make_descriptor(t_OrdTermState::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(OrdTermState).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_OrdTermState_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, OrdTermState::initializeClass, 1)))
            return NULL;
          return t_OrdTermState::wrap_Object(OrdTermState(((t_OrdTermState *) arg)->object.this$));
        }
        static PyObject *t_OrdTermState_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, OrdTermState::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_OrdTermState_init_(t_OrdTermState *self, PyObject *args, PyObject *kwds)
        {
          OrdTermState object((jobject) NULL);

          INT_CALL(object = OrdTermState());
          self->object = object;

          return 0;
        }

        static PyObject *t_OrdTermState_copyFrom(t_OrdTermState *self, PyObject *args)
        {
          ::org::apache::lucene::index::TermState a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::TermState::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyFrom(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(OrdTermState), (PyObject *) self, "copyFrom", args, 2);
        }

        static PyObject *t_OrdTermState_toString(t_OrdTermState *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(OrdTermState), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_OrdTermState_get__ord(t_OrdTermState *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_ord());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_OrdTermState_set__ord(t_OrdTermState *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_ord(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "ord", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/StraightBytesDocValuesField.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *StraightBytesDocValuesField::class$ = NULL;
        jmethodID *StraightBytesDocValuesField::mids$ = NULL;
        bool StraightBytesDocValuesField::live$ = false;
        ::org::apache::lucene::document::FieldType *StraightBytesDocValuesField::TYPE_FIXED_LEN = NULL;
        ::org::apache::lucene::document::FieldType *StraightBytesDocValuesField::TYPE_VAR_LEN = NULL;

        jclass StraightBytesDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/StraightBytesDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_43cce44e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_init$_6c8dc377] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;Z)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE_FIXED_LEN = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_FIXED_LEN", "Lorg/apache/lucene/document/FieldType;"));
            TYPE_VAR_LEN = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_VAR_LEN", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        StraightBytesDocValuesField::StraightBytesDocValuesField(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1) : ::org::apache::lucene::document::BinaryDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_43cce44e, a0.this$, a1.this$)) {}

        StraightBytesDocValuesField::StraightBytesDocValuesField(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1, jboolean a2) : ::org::apache::lucene::document::BinaryDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_6c8dc377, a0.this$, a1.this$, a2)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_StraightBytesDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StraightBytesDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_StraightBytesDocValuesField_init_(t_StraightBytesDocValuesField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_StraightBytesDocValuesField__methods_[] = {
          DECLARE_METHOD(t_StraightBytesDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StraightBytesDocValuesField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(StraightBytesDocValuesField, t_StraightBytesDocValuesField, ::org::apache::lucene::document::BinaryDocValuesField, StraightBytesDocValuesField, t_StraightBytesDocValuesField_init_, 0, 0, 0, 0, 0);

        void t_StraightBytesDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(StraightBytesDocValuesField), module, "StraightBytesDocValuesField", 0);
        }

        void t_StraightBytesDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(StraightBytesDocValuesField).tp_dict, "class_", make_descriptor(StraightBytesDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(StraightBytesDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_StraightBytesDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(StraightBytesDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(StraightBytesDocValuesField::initializeClass);
          PyDict_SetItemString(PY_TYPE(StraightBytesDocValuesField).tp_dict, "TYPE_FIXED_LEN", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*StraightBytesDocValuesField::TYPE_FIXED_LEN)));
          PyDict_SetItemString(PY_TYPE(StraightBytesDocValuesField).tp_dict, "TYPE_VAR_LEN", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*StraightBytesDocValuesField::TYPE_VAR_LEN)));
        }

        static PyObject *t_StraightBytesDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, StraightBytesDocValuesField::initializeClass, 1)))
            return NULL;
          return t_StraightBytesDocValuesField::wrap_Object(StraightBytesDocValuesField(((t_StraightBytesDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_StraightBytesDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, StraightBytesDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_StraightBytesDocValuesField_init_(t_StraightBytesDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
              StraightBytesDocValuesField object((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                INT_CALL(object = StraightBytesDocValuesField(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
              jboolean a2;
              StraightBytesDocValuesField object((jobject) NULL);

              if (!parseArgs(args, "skZ", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = StraightBytesDocValuesField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/BM25Similarity.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/similarities/Similarity$SimScorer.h"
#include "org/apache/lucene/search/CollectionStatistics.h"
#include "org/apache/lucene/search/TermStatistics.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/FieldInvertState.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/similarities/Similarity$SimWeight.h"
#include "org/apache/lucene/search/Explanation.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *BM25Similarity::class$ = NULL;
          jmethodID *BM25Similarity::mids$ = NULL;
          bool BM25Similarity::live$ = false;

          jclass BM25Similarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/BM25Similarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_f1b0c004] = env->getMethodID(cls, "<init>", "(FF)V");
              mids$[mid_computeNorm_6ff84e0e] = env->getMethodID(cls, "computeNorm", "(Lorg/apache/lucene/index/FieldInvertState;)J");
              mids$[mid_computeWeight_8bb6ee0b] = env->getMethodID(cls, "computeWeight", "(FLorg/apache/lucene/search/CollectionStatistics;[Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/similarities/Similarity$SimWeight;");
              mids$[mid_getB_54c6a176] = env->getMethodID(cls, "getB", "()F");
              mids$[mid_getDiscountOverlaps_54c6a16a] = env->getMethodID(cls, "getDiscountOverlaps", "()Z");
              mids$[mid_getK1_54c6a176] = env->getMethodID(cls, "getK1", "()F");
              mids$[mid_idfExplain_9dde2121] = env->getMethodID(cls, "idfExplain", "(Lorg/apache/lucene/search/CollectionStatistics;Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_idfExplain_be4c9f2b] = env->getMethodID(cls, "idfExplain", "(Lorg/apache/lucene/search/CollectionStatistics;[Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_setDiscountOverlaps_bb0c767f] = env->getMethodID(cls, "setDiscountOverlaps", "(Z)V");
              mids$[mid_simScorer_9a2cfed8] = env->getMethodID(cls, "simScorer", "(Lorg/apache/lucene/search/similarities/Similarity$SimWeight;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/similarities/Similarity$SimScorer;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_decodeNormValue_b2271697] = env->getMethodID(cls, "decodeNormValue", "(B)F");
              mids$[mid_sloppyFreq_39c7bd2c] = env->getMethodID(cls, "sloppyFreq", "(I)F");
              mids$[mid_scorePayload_ffd34a82] = env->getMethodID(cls, "scorePayload", "(IIILorg/apache/lucene/util/BytesRef;)F");
              mids$[mid_avgFieldLength_48af4d71] = env->getMethodID(cls, "avgFieldLength", "(Lorg/apache/lucene/search/CollectionStatistics;)F");
              mids$[mid_encodeNormValue_77691ed7] = env->getMethodID(cls, "encodeNormValue", "(FI)B");
              mids$[mid_idf_a7e12cb4] = env->getMethodID(cls, "idf", "(JJ)F");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BM25Similarity::BM25Similarity() : ::org::apache::lucene::search::similarities::Similarity(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          BM25Similarity::BM25Similarity(jfloat a0, jfloat a1) : ::org::apache::lucene::search::similarities::Similarity(env->newObject(initializeClass, &mids$, mid_init$_f1b0c004, a0, a1)) {}

          jlong BM25Similarity::computeNorm(const ::org::apache::lucene::index::FieldInvertState & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_computeNorm_6ff84e0e], a0.this$);
          }

          ::org::apache::lucene::search::similarities::Similarity$SimWeight BM25Similarity::computeWeight(jfloat a0, const ::org::apache::lucene::search::CollectionStatistics & a1, const JArray< ::org::apache::lucene::search::TermStatistics > & a2) const
          {
            return ::org::apache::lucene::search::similarities::Similarity$SimWeight(env->callObjectMethod(this$, mids$[mid_computeWeight_8bb6ee0b], a0, a1.this$, a2.this$));
          }

          jfloat BM25Similarity::getB() const
          {
            return env->callFloatMethod(this$, mids$[mid_getB_54c6a176]);
          }

          jboolean BM25Similarity::getDiscountOverlaps() const
          {
            return env->callBooleanMethod(this$, mids$[mid_getDiscountOverlaps_54c6a16a]);
          }

          jfloat BM25Similarity::getK1() const
          {
            return env->callFloatMethod(this$, mids$[mid_getK1_54c6a176]);
          }

          ::org::apache::lucene::search::Explanation BM25Similarity::idfExplain(const ::org::apache::lucene::search::CollectionStatistics & a0, const ::org::apache::lucene::search::TermStatistics & a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_idfExplain_9dde2121], a0.this$, a1.this$));
          }

          ::org::apache::lucene::search::Explanation BM25Similarity::idfExplain(const ::org::apache::lucene::search::CollectionStatistics & a0, const JArray< ::org::apache::lucene::search::TermStatistics > & a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_idfExplain_be4c9f2b], a0.this$, a1.this$));
          }

          void BM25Similarity::setDiscountOverlaps(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setDiscountOverlaps_bb0c767f], a0);
          }

          ::org::apache::lucene::search::similarities::Similarity$SimScorer BM25Similarity::simScorer(const ::org::apache::lucene::search::similarities::Similarity$SimWeight & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
          {
            return ::org::apache::lucene::search::similarities::Similarity$SimScorer(env->callObjectMethod(this$, mids$[mid_simScorer_9a2cfed8], a0.this$, a1.this$));
          }

          ::java::lang::String BM25Similarity::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_BM25Similarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BM25Similarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BM25Similarity_init_(t_BM25Similarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BM25Similarity_computeNorm(t_BM25Similarity *self, PyObject *args);
          static PyObject *t_BM25Similarity_computeWeight(t_BM25Similarity *self, PyObject *args);
          static PyObject *t_BM25Similarity_getB(t_BM25Similarity *self);
          static PyObject *t_BM25Similarity_getDiscountOverlaps(t_BM25Similarity *self);
          static PyObject *t_BM25Similarity_getK1(t_BM25Similarity *self);
          static PyObject *t_BM25Similarity_idfExplain(t_BM25Similarity *self, PyObject *args);
          static PyObject *t_BM25Similarity_setDiscountOverlaps(t_BM25Similarity *self, PyObject *arg);
          static PyObject *t_BM25Similarity_simScorer(t_BM25Similarity *self, PyObject *args);
          static PyObject *t_BM25Similarity_toString(t_BM25Similarity *self, PyObject *args);
          static PyObject *t_BM25Similarity_get__b(t_BM25Similarity *self, void *data);
          static PyObject *t_BM25Similarity_get__discountOverlaps(t_BM25Similarity *self, void *data);
          static int t_BM25Similarity_set__discountOverlaps(t_BM25Similarity *self, PyObject *arg, void *data);
          static PyObject *t_BM25Similarity_get__k1(t_BM25Similarity *self, void *data);
          static PyGetSetDef t_BM25Similarity__fields_[] = {
            DECLARE_GET_FIELD(t_BM25Similarity, b),
            DECLARE_GETSET_FIELD(t_BM25Similarity, discountOverlaps),
            DECLARE_GET_FIELD(t_BM25Similarity, k1),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BM25Similarity__methods_[] = {
            DECLARE_METHOD(t_BM25Similarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BM25Similarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BM25Similarity, computeNorm, METH_VARARGS),
            DECLARE_METHOD(t_BM25Similarity, computeWeight, METH_VARARGS),
            DECLARE_METHOD(t_BM25Similarity, getB, METH_NOARGS),
            DECLARE_METHOD(t_BM25Similarity, getDiscountOverlaps, METH_NOARGS),
            DECLARE_METHOD(t_BM25Similarity, getK1, METH_NOARGS),
            DECLARE_METHOD(t_BM25Similarity, idfExplain, METH_VARARGS),
            DECLARE_METHOD(t_BM25Similarity, setDiscountOverlaps, METH_O),
            DECLARE_METHOD(t_BM25Similarity, simScorer, METH_VARARGS),
            DECLARE_METHOD(t_BM25Similarity, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BM25Similarity, t_BM25Similarity, ::org::apache::lucene::search::similarities::Similarity, BM25Similarity, t_BM25Similarity_init_, 0, 0, t_BM25Similarity__fields_, 0, 0);

          void t_BM25Similarity::install(PyObject *module)
          {
            installType(&PY_TYPE(BM25Similarity), module, "BM25Similarity", 0);
          }

          void t_BM25Similarity::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BM25Similarity).tp_dict, "class_", make_descriptor(BM25Similarity::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BM25Similarity).tp_dict, "wrapfn_", make_descriptor(t_BM25Similarity::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BM25Similarity).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BM25Similarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BM25Similarity::initializeClass, 1)))
              return NULL;
            return t_BM25Similarity::wrap_Object(BM25Similarity(((t_BM25Similarity *) arg)->object.this$));
          }
          static PyObject *t_BM25Similarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BM25Similarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BM25Similarity_init_(t_BM25Similarity *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                BM25Similarity object((jobject) NULL);

                INT_CALL(object = BM25Similarity());
                self->object = object;
                break;
              }
              goto err;
             case 2:
              {
                jfloat a0;
                jfloat a1;
                BM25Similarity object((jobject) NULL);

                if (!parseArgs(args, "FF", &a0, &a1))
                {
                  INT_CALL(object = BM25Similarity(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BM25Similarity_computeNorm(t_BM25Similarity *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInvertState a0((jobject) NULL);
            jlong result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInvertState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.computeNorm(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(BM25Similarity), (PyObject *) self, "computeNorm", args, 2);
          }

          static PyObject *t_BM25Similarity_computeWeight(t_BM25Similarity *self, PyObject *args)
          {
            jfloat a0;
            ::org::apache::lucene::search::CollectionStatistics a1((jobject) NULL);
            JArray< ::org::apache::lucene::search::TermStatistics > a2((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity$SimWeight result((jobject) NULL);

            if (!parseArgs(args, "Fk[k", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.computeWeight(a0, a1, a2));
              return ::org::apache::lucene::search::similarities::t_Similarity$SimWeight::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(BM25Similarity), (PyObject *) self, "computeWeight", args, 2);
          }

          static PyObject *t_BM25Similarity_getB(t_BM25Similarity *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getB());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_BM25Similarity_getDiscountOverlaps(t_BM25Similarity *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.getDiscountOverlaps());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_BM25Similarity_getK1(t_BM25Similarity *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getK1());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_BM25Similarity_idfExplain(t_BM25Similarity *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::search::CollectionStatistics a0((jobject) NULL);
                ::org::apache::lucene::search::TermStatistics a1((jobject) NULL);
                ::org::apache::lucene::search::Explanation result((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.idfExplain(a0, a1));
                  return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
                }
              }
              {
                ::org::apache::lucene::search::CollectionStatistics a0((jobject) NULL);
                JArray< ::org::apache::lucene::search::TermStatistics > a1((jobject) NULL);
                ::org::apache::lucene::search::Explanation result((jobject) NULL);

                if (!parseArgs(args, "k[k", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.idfExplain(a0, a1));
                  return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "idfExplain", args);
            return NULL;
          }

          static PyObject *t_BM25Similarity_setDiscountOverlaps(t_BM25Similarity *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setDiscountOverlaps(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setDiscountOverlaps", arg);
            return NULL;
          }

          static PyObject *t_BM25Similarity_simScorer(t_BM25Similarity *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::Similarity$SimWeight a0((jobject) NULL);
            ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity$SimScorer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::similarities::Similarity$SimWeight::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.simScorer(a0, a1));
              return ::org::apache::lucene::search::similarities::t_Similarity$SimScorer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(BM25Similarity), (PyObject *) self, "simScorer", args, 2);
          }

          static PyObject *t_BM25Similarity_toString(t_BM25Similarity *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(BM25Similarity), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_BM25Similarity_get__b(t_BM25Similarity *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getB());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_BM25Similarity_get__discountOverlaps(t_BM25Similarity *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.getDiscountOverlaps());
            Py_RETURN_BOOL(value);
          }
          static int t_BM25Similarity_set__discountOverlaps(t_BM25Similarity *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setDiscountOverlaps(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "discountOverlaps", arg);
            return -1;
          }

          static PyObject *t_BM25Similarity_get__k1(t_BM25Similarity *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getK1());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pt/PortugueseStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {

          ::java::lang::Class *PortugueseStemFilter::class$ = NULL;
          jmethodID *PortugueseStemFilter::mids$ = NULL;
          bool PortugueseStemFilter::live$ = false;

          jclass PortugueseStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pt/PortugueseStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PortugueseStemFilter::PortugueseStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean PortugueseStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {
          static PyObject *t_PortugueseStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PortugueseStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PortugueseStemFilter_init_(t_PortugueseStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PortugueseStemFilter_incrementToken(t_PortugueseStemFilter *self, PyObject *args);

          static PyMethodDef t_PortugueseStemFilter__methods_[] = {
            DECLARE_METHOD(t_PortugueseStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PortugueseStemFilter, t_PortugueseStemFilter, ::org::apache::lucene::analysis::TokenFilter, PortugueseStemFilter, t_PortugueseStemFilter_init_, 0, 0, 0, 0, 0);

          void t_PortugueseStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PortugueseStemFilter), module, "PortugueseStemFilter", 0);
          }

          void t_PortugueseStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PortugueseStemFilter).tp_dict, "class_", make_descriptor(PortugueseStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PortugueseStemFilter).tp_dict, "wrapfn_", make_descriptor(t_PortugueseStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PortugueseStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PortugueseStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PortugueseStemFilter::initializeClass, 1)))
              return NULL;
            return t_PortugueseStemFilter::wrap_Object(PortugueseStemFilter(((t_PortugueseStemFilter *) arg)->object.this$));
          }
          static PyObject *t_PortugueseStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PortugueseStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PortugueseStemFilter_init_(t_PortugueseStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            PortugueseStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = PortugueseStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PortugueseStemFilter_incrementToken(t_PortugueseStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PortugueseStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/SmallFloat.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *SmallFloat::class$ = NULL;
        jmethodID *SmallFloat::mids$ = NULL;
        bool SmallFloat::live$ = false;

        jclass SmallFloat::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/SmallFloat");

            mids$ = new jmethodID[max_mid];
            mids$[mid_byte315ToFloat_b2271697] = env->getStaticMethodID(cls, "byte315ToFloat", "(B)F");
            mids$[mid_byte52ToFloat_b2271697] = env->getStaticMethodID(cls, "byte52ToFloat", "(B)F");
            mids$[mid_byteToFloat_277ea3d7] = env->getStaticMethodID(cls, "byteToFloat", "(BII)F");
            mids$[mid_floatToByte_c388dc8f] = env->getStaticMethodID(cls, "floatToByte", "(FII)B");
            mids$[mid_floatToByte315_06298cbf] = env->getStaticMethodID(cls, "floatToByte315", "(F)B");
            mids$[mid_floatToByte52_06298cbf] = env->getStaticMethodID(cls, "floatToByte52", "(F)B");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jfloat SmallFloat::byte315ToFloat(jbyte a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticFloatMethod(cls, mids$[mid_byte315ToFloat_b2271697], a0);
        }

        jfloat SmallFloat::byte52ToFloat(jbyte a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticFloatMethod(cls, mids$[mid_byte52ToFloat_b2271697], a0);
        }

        jfloat SmallFloat::byteToFloat(jbyte a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticFloatMethod(cls, mids$[mid_byteToFloat_277ea3d7], a0, a1, a2);
        }

        jbyte SmallFloat::floatToByte(jfloat a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticByteMethod(cls, mids$[mid_floatToByte_c388dc8f], a0, a1, a2);
        }

        jbyte SmallFloat::floatToByte315(jfloat a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticByteMethod(cls, mids$[mid_floatToByte315_06298cbf], a0);
        }

        jbyte SmallFloat::floatToByte52(jfloat a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticByteMethod(cls, mids$[mid_floatToByte52_06298cbf], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_SmallFloat_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SmallFloat_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SmallFloat_byte315ToFloat(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SmallFloat_byte52ToFloat(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SmallFloat_byteToFloat(PyTypeObject *type, PyObject *args);
        static PyObject *t_SmallFloat_floatToByte(PyTypeObject *type, PyObject *args);
        static PyObject *t_SmallFloat_floatToByte315(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SmallFloat_floatToByte52(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_SmallFloat__methods_[] = {
          DECLARE_METHOD(t_SmallFloat, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SmallFloat, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SmallFloat, byte315ToFloat, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SmallFloat, byte52ToFloat, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SmallFloat, byteToFloat, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SmallFloat, floatToByte, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SmallFloat, floatToByte315, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SmallFloat, floatToByte52, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SmallFloat, t_SmallFloat, ::java::lang::Object, SmallFloat, abstract_init, 0, 0, 0, 0, 0);

        void t_SmallFloat::install(PyObject *module)
        {
          installType(&PY_TYPE(SmallFloat), module, "SmallFloat", 0);
        }

        void t_SmallFloat::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SmallFloat).tp_dict, "class_", make_descriptor(SmallFloat::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SmallFloat).tp_dict, "wrapfn_", make_descriptor(t_SmallFloat::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SmallFloat).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SmallFloat_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SmallFloat::initializeClass, 1)))
            return NULL;
          return t_SmallFloat::wrap_Object(SmallFloat(((t_SmallFloat *) arg)->object.this$));
        }
        static PyObject *t_SmallFloat_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SmallFloat::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SmallFloat_byte315ToFloat(PyTypeObject *type, PyObject *arg)
        {
          jbyte a0;
          jfloat result;

          if (!parseArg(arg, "B", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SmallFloat::byte315ToFloat(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "byte315ToFloat", arg);
          return NULL;
        }

        static PyObject *t_SmallFloat_byte52ToFloat(PyTypeObject *type, PyObject *arg)
        {
          jbyte a0;
          jfloat result;

          if (!parseArg(arg, "B", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SmallFloat::byte52ToFloat(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "byte52ToFloat", arg);
          return NULL;
        }

        static PyObject *t_SmallFloat_byteToFloat(PyTypeObject *type, PyObject *args)
        {
          jbyte a0;
          jint a1;
          jint a2;
          jfloat result;

          if (!parseArgs(args, "BII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SmallFloat::byteToFloat(a0, a1, a2));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "byteToFloat", args);
          return NULL;
        }

        static PyObject *t_SmallFloat_floatToByte(PyTypeObject *type, PyObject *args)
        {
          jfloat a0;
          jint a1;
          jint a2;
          jbyte result;

          if (!parseArgs(args, "FII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SmallFloat::floatToByte(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "floatToByte", args);
          return NULL;
        }

        static PyObject *t_SmallFloat_floatToByte315(PyTypeObject *type, PyObject *arg)
        {
          jfloat a0;
          jbyte result;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SmallFloat::floatToByte315(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "floatToByte315", arg);
          return NULL;
        }

        static PyObject *t_SmallFloat_floatToByte52(PyTypeObject *type, PyObject *arg)
        {
          jfloat a0;
          jbyte result;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SmallFloat::floatToByte52(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "floatToByte52", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hi/HindiNormalizationFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {

          ::java::lang::Class *HindiNormalizationFilterFactory::class$ = NULL;
          jmethodID *HindiNormalizationFilterFactory::mids$ = NULL;
          bool HindiNormalizationFilterFactory::live$ = false;

          jclass HindiNormalizationFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hi/HindiNormalizationFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HindiNormalizationFilterFactory::HindiNormalizationFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream HindiNormalizationFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory HindiNormalizationFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {
          static PyObject *t_HindiNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HindiNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HindiNormalizationFilterFactory_init_(t_HindiNormalizationFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HindiNormalizationFilterFactory_create(t_HindiNormalizationFilterFactory *self, PyObject *args);
          static PyObject *t_HindiNormalizationFilterFactory_getMultiTermComponent(t_HindiNormalizationFilterFactory *self);
          static PyObject *t_HindiNormalizationFilterFactory_get__multiTermComponent(t_HindiNormalizationFilterFactory *self, void *data);
          static PyGetSetDef t_HindiNormalizationFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_HindiNormalizationFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_HindiNormalizationFilterFactory__methods_[] = {
            DECLARE_METHOD(t_HindiNormalizationFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiNormalizationFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiNormalizationFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_HindiNormalizationFilterFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HindiNormalizationFilterFactory, t_HindiNormalizationFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, HindiNormalizationFilterFactory, t_HindiNormalizationFilterFactory_init_, 0, 0, t_HindiNormalizationFilterFactory__fields_, 0, 0);

          void t_HindiNormalizationFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(HindiNormalizationFilterFactory), module, "HindiNormalizationFilterFactory", 0);
          }

          void t_HindiNormalizationFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HindiNormalizationFilterFactory).tp_dict, "class_", make_descriptor(HindiNormalizationFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HindiNormalizationFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_HindiNormalizationFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HindiNormalizationFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HindiNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HindiNormalizationFilterFactory::initializeClass, 1)))
              return NULL;
            return t_HindiNormalizationFilterFactory::wrap_Object(HindiNormalizationFilterFactory(((t_HindiNormalizationFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_HindiNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HindiNormalizationFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HindiNormalizationFilterFactory_init_(t_HindiNormalizationFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            HindiNormalizationFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = HindiNormalizationFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HindiNormalizationFilterFactory_create(t_HindiNormalizationFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(HindiNormalizationFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_HindiNormalizationFilterFactory_getMultiTermComponent(t_HindiNormalizationFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_HindiNormalizationFilterFactory_get__multiTermComponent(t_HindiNormalizationFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/TermsFilter.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {

        ::java::lang::Class *TermsFilter::class$ = NULL;
        jmethodID *TermsFilter::mids$ = NULL;
        bool TermsFilter::live$ = false;

        jclass TermsFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/queries/TermsFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c9f85e01] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/index/Term;)V");
            mids$[mid_init$_1fde8fc3] = env->getMethodID(cls, "<init>", "(Ljava/util/List;)V");
            mids$[mid_init$_8fbc1a2e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_init$_04719c9d] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/util/List;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getDocIdSet_ccce0897] = env->getMethodID(cls, "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TermsFilter::TermsFilter(const JArray< ::org::apache::lucene::index::Term > & a0) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_c9f85e01, a0.this$)) {}

        TermsFilter::TermsFilter(const ::java::util::List & a0) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_1fde8fc3, a0.this$)) {}

        TermsFilter::TermsFilter(const ::java::lang::String & a0, const JArray< ::org::apache::lucene::util::BytesRef > & a1) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_8fbc1a2e, a0.this$, a1.this$)) {}

        TermsFilter::TermsFilter(const ::java::lang::String & a0, const ::java::util::List & a1) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_04719c9d, a0.this$, a1.this$)) {}

        jboolean TermsFilter::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::search::DocIdSet TermsFilter::getDocIdSet(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
        {
          return ::org::apache::lucene::search::DocIdSet(env->callObjectMethod(this$, mids$[mid_getDocIdSet_ccce0897], a0.this$, a1.this$));
        }

        jint TermsFilter::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String TermsFilter::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        static PyObject *t_TermsFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermsFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TermsFilter_init_(t_TermsFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TermsFilter_equals(t_TermsFilter *self, PyObject *args);
        static PyObject *t_TermsFilter_getDocIdSet(t_TermsFilter *self, PyObject *args);
        static PyObject *t_TermsFilter_hashCode(t_TermsFilter *self, PyObject *args);
        static PyObject *t_TermsFilter_toString(t_TermsFilter *self, PyObject *args);

        static PyMethodDef t_TermsFilter__methods_[] = {
          DECLARE_METHOD(t_TermsFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermsFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermsFilter, equals, METH_VARARGS),
          DECLARE_METHOD(t_TermsFilter, getDocIdSet, METH_VARARGS),
          DECLARE_METHOD(t_TermsFilter, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_TermsFilter, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermsFilter, t_TermsFilter, ::org::apache::lucene::search::Filter, TermsFilter, t_TermsFilter_init_, 0, 0, 0, 0, 0);

        void t_TermsFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(TermsFilter), module, "TermsFilter", 0);
        }

        void t_TermsFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermsFilter).tp_dict, "class_", make_descriptor(TermsFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermsFilter).tp_dict, "wrapfn_", make_descriptor(t_TermsFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermsFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermsFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermsFilter::initializeClass, 1)))
            return NULL;
          return t_TermsFilter::wrap_Object(TermsFilter(((t_TermsFilter *) arg)->object.this$));
        }
        static PyObject *t_TermsFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermsFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TermsFilter_init_(t_TermsFilter *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::org::apache::lucene::index::Term > a0((jobject) NULL);
              TermsFilter object((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                INT_CALL(object = TermsFilter(a0));
                self->object = object;
                break;
              }
            }
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              TermsFilter object((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
              {
                INT_CALL(object = TermsFilter(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< ::org::apache::lucene::util::BytesRef > a1((jobject) NULL);
              TermsFilter object((jobject) NULL);

              if (!parseArgs(args, "s[k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                INT_CALL(object = TermsFilter(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::util::List a1((jobject) NULL);
              PyTypeObject **p1;
              TermsFilter object((jobject) NULL);

              if (!parseArgs(args, "sK", ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_))
              {
                INT_CALL(object = TermsFilter(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TermsFilter_equals(t_TermsFilter *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(TermsFilter), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_TermsFilter_getDocIdSet(t_TermsFilter *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocIdSet(a0, a1));
            return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(TermsFilter), (PyObject *) self, "getDocIdSet", args, 2);
        }

        static PyObject *t_TermsFilter_hashCode(t_TermsFilter *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(TermsFilter), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_TermsFilter_toString(t_TermsFilter *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(TermsFilter), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/DirectoryReader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *DirectoryReader::class$ = NULL;
        jmethodID *DirectoryReader::mids$ = NULL;
        bool DirectoryReader::live$ = false;
        jint DirectoryReader::DEFAULT_TERMS_INDEX_DIVISOR = (jint) 0;

        jclass DirectoryReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/DirectoryReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_directory_1f3934bb] = env->getMethodID(cls, "directory", "()Lorg/apache/lucene/store/Directory;");
            mids$[mid_getIndexCommit_09307276] = env->getMethodID(cls, "getIndexCommit", "()Lorg/apache/lucene/index/IndexCommit;");
            mids$[mid_getVersion_54c6a17a] = env->getMethodID(cls, "getVersion", "()J");
            mids$[mid_indexExists_2e261efe] = env->getStaticMethodID(cls, "indexExists", "(Lorg/apache/lucene/store/Directory;)Z");
            mids$[mid_isCurrent_54c6a16a] = env->getMethodID(cls, "isCurrent", "()Z");
            mids$[mid_listCommits_a0981b9a] = env->getStaticMethodID(cls, "listCommits", "(Lorg/apache/lucene/store/Directory;)Ljava/util/List;");
            mids$[mid_open_109b8ac7] = env->getStaticMethodID(cls, "open", "(Lorg/apache/lucene/store/Directory;)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_open_26fd6272] = env->getStaticMethodID(cls, "open", "(Lorg/apache/lucene/index/IndexCommit;)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_open_e4ee522b] = env->getStaticMethodID(cls, "open", "(Lorg/apache/lucene/index/IndexWriter;Z)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_open_d7b74111] = env->getStaticMethodID(cls, "open", "(Lorg/apache/lucene/store/Directory;I)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_open_13bade12] = env->getStaticMethodID(cls, "open", "(Lorg/apache/lucene/index/IndexCommit;I)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_openIfChanged_5bb3c60f] = env->getStaticMethodID(cls, "openIfChanged", "(Lorg/apache/lucene/index/DirectoryReader;)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_openIfChanged_bf41593a] = env->getStaticMethodID(cls, "openIfChanged", "(Lorg/apache/lucene/index/DirectoryReader;Lorg/apache/lucene/index/IndexCommit;)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_openIfChanged_dbc531b7] = env->getStaticMethodID(cls, "openIfChanged", "(Lorg/apache/lucene/index/DirectoryReader;Lorg/apache/lucene/index/IndexWriter;Z)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_doOpenIfChanged_1de06693] = env->getMethodID(cls, "doOpenIfChanged", "()Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_doOpenIfChanged_e4ee522b] = env->getMethodID(cls, "doOpenIfChanged", "(Lorg/apache/lucene/index/IndexWriter;Z)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_doOpenIfChanged_26fd6272] = env->getMethodID(cls, "doOpenIfChanged", "(Lorg/apache/lucene/index/IndexCommit;)Lorg/apache/lucene/index/DirectoryReader;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_TERMS_INDEX_DIVISOR = env->getStaticIntField(cls, "DEFAULT_TERMS_INDEX_DIVISOR");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::store::Directory DirectoryReader::directory() const
        {
          return ::org::apache::lucene::store::Directory(env->callObjectMethod(this$, mids$[mid_directory_1f3934bb]));
        }

        ::org::apache::lucene::index::IndexCommit DirectoryReader::getIndexCommit() const
        {
          return ::org::apache::lucene::index::IndexCommit(env->callObjectMethod(this$, mids$[mid_getIndexCommit_09307276]));
        }

        jlong DirectoryReader::getVersion() const
        {
          return env->callLongMethod(this$, mids$[mid_getVersion_54c6a17a]);
        }

        jboolean DirectoryReader::indexExists(const ::org::apache::lucene::store::Directory & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_indexExists_2e261efe], a0.this$);
        }

        jboolean DirectoryReader::isCurrent() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCurrent_54c6a16a]);
        }

        ::java::util::List DirectoryReader::listCommits(const ::org::apache::lucene::store::Directory & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::List(env->callStaticObjectMethod(cls, mids$[mid_listCommits_a0981b9a], a0.this$));
        }

        DirectoryReader DirectoryReader::open(const ::org::apache::lucene::store::Directory & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_open_109b8ac7], a0.this$));
        }

        DirectoryReader DirectoryReader::open(const ::org::apache::lucene::index::IndexCommit & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_open_26fd6272], a0.this$));
        }

        DirectoryReader DirectoryReader::open(const ::org::apache::lucene::index::IndexWriter & a0, jboolean a1)
        {
          jclass cls = env->getClass(initializeClass);
          return DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_open_e4ee522b], a0.this$, a1));
        }

        DirectoryReader DirectoryReader::open(const ::org::apache::lucene::store::Directory & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_open_d7b74111], a0.this$, a1));
        }

        DirectoryReader DirectoryReader::open(const ::org::apache::lucene::index::IndexCommit & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_open_13bade12], a0.this$, a1));
        }

        DirectoryReader DirectoryReader::openIfChanged(const DirectoryReader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_openIfChanged_5bb3c60f], a0.this$));
        }

        DirectoryReader DirectoryReader::openIfChanged(const DirectoryReader & a0, const ::org::apache::lucene::index::IndexCommit & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_openIfChanged_bf41593a], a0.this$, a1.this$));
        }

        DirectoryReader DirectoryReader::openIfChanged(const DirectoryReader & a0, const ::org::apache::lucene::index::IndexWriter & a1, jboolean a2)
        {
          jclass cls = env->getClass(initializeClass);
          return DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_openIfChanged_dbc531b7], a0.this$, a1.this$, a2));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_DirectoryReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DirectoryReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DirectoryReader_of_(t_DirectoryReader *self, PyObject *args);
        static PyObject *t_DirectoryReader_directory(t_DirectoryReader *self);
        static PyObject *t_DirectoryReader_getIndexCommit(t_DirectoryReader *self);
        static PyObject *t_DirectoryReader_getVersion(t_DirectoryReader *self);
        static PyObject *t_DirectoryReader_indexExists(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DirectoryReader_isCurrent(t_DirectoryReader *self);
        static PyObject *t_DirectoryReader_listCommits(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DirectoryReader_open(PyTypeObject *type, PyObject *args);
        static PyObject *t_DirectoryReader_openIfChanged(PyTypeObject *type, PyObject *args);
        static PyObject *t_DirectoryReader_get__current(t_DirectoryReader *self, void *data);
        static PyObject *t_DirectoryReader_get__indexCommit(t_DirectoryReader *self, void *data);
        static PyObject *t_DirectoryReader_get__version(t_DirectoryReader *self, void *data);
        static PyObject *t_DirectoryReader_get__parameters_(t_DirectoryReader *self, void *data);
        static PyGetSetDef t_DirectoryReader__fields_[] = {
          DECLARE_GET_FIELD(t_DirectoryReader, current),
          DECLARE_GET_FIELD(t_DirectoryReader, indexCommit),
          DECLARE_GET_FIELD(t_DirectoryReader, version),
          DECLARE_GET_FIELD(t_DirectoryReader, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DirectoryReader__methods_[] = {
          DECLARE_METHOD(t_DirectoryReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DirectoryReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DirectoryReader, of_, METH_VARARGS),
          DECLARE_METHOD(t_DirectoryReader, directory, METH_NOARGS),
          DECLARE_METHOD(t_DirectoryReader, getIndexCommit, METH_NOARGS),
          DECLARE_METHOD(t_DirectoryReader, getVersion, METH_NOARGS),
          DECLARE_METHOD(t_DirectoryReader, indexExists, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DirectoryReader, isCurrent, METH_NOARGS),
          DECLARE_METHOD(t_DirectoryReader, listCommits, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DirectoryReader, open, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DirectoryReader, openIfChanged, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DirectoryReader, t_DirectoryReader, ::org::apache::lucene::index::BaseCompositeReader, DirectoryReader, abstract_init, 0, 0, t_DirectoryReader__fields_, 0, 0);
        PyObject *t_DirectoryReader::wrap_Object(const DirectoryReader& object, PyTypeObject *p0)
        {
          PyObject *obj = t_DirectoryReader::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DirectoryReader *self = (t_DirectoryReader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_DirectoryReader::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_DirectoryReader::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DirectoryReader *self = (t_DirectoryReader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_DirectoryReader::install(PyObject *module)
        {
          installType(&PY_TYPE(DirectoryReader), module, "DirectoryReader", 0);
        }

        void t_DirectoryReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DirectoryReader).tp_dict, "class_", make_descriptor(DirectoryReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DirectoryReader).tp_dict, "wrapfn_", make_descriptor(t_DirectoryReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DirectoryReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(DirectoryReader::initializeClass);
          PyDict_SetItemString(PY_TYPE(DirectoryReader).tp_dict, "DEFAULT_TERMS_INDEX_DIVISOR", make_descriptor(DirectoryReader::DEFAULT_TERMS_INDEX_DIVISOR));
        }

        static PyObject *t_DirectoryReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DirectoryReader::initializeClass, 1)))
            return NULL;
          return t_DirectoryReader::wrap_Object(DirectoryReader(((t_DirectoryReader *) arg)->object.this$));
        }
        static PyObject *t_DirectoryReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DirectoryReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DirectoryReader_of_(t_DirectoryReader *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_DirectoryReader_directory(t_DirectoryReader *self)
        {
          ::org::apache::lucene::store::Directory result((jobject) NULL);
          OBJ_CALL(result = self->object.directory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(result);
        }

        static PyObject *t_DirectoryReader_getIndexCommit(t_DirectoryReader *self)
        {
          ::org::apache::lucene::index::IndexCommit result((jobject) NULL);
          OBJ_CALL(result = self->object.getIndexCommit());
          return ::org::apache::lucene::index::t_IndexCommit::wrap_Object(result);
        }

        static PyObject *t_DirectoryReader_getVersion(t_DirectoryReader *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getVersion());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_DirectoryReader_indexExists(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::DirectoryReader::indexExists(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError(type, "indexExists", arg);
          return NULL;
        }

        static PyObject *t_DirectoryReader_isCurrent(t_DirectoryReader *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isCurrent());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_DirectoryReader_listCommits(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::java::util::List result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::DirectoryReader::listCommits(a0));
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(IndexCommit));
          }

          PyErr_SetArgsError(type, "listCommits", arg);
          return NULL;
        }

        static PyObject *t_DirectoryReader_open(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DirectoryReader::open(a0));
                return t_DirectoryReader::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::index::IndexCommit a0((jobject) NULL);
              DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexCommit::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DirectoryReader::open(a0));
                return t_DirectoryReader::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::index::IndexWriter a0((jobject) NULL);
              jboolean a1;
              DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "kZ", ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DirectoryReader::open(a0, a1));
                return t_DirectoryReader::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              jint a1;
              DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DirectoryReader::open(a0, a1));
                return t_DirectoryReader::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::index::IndexCommit a0((jobject) NULL);
              jint a1;
              DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::index::IndexCommit::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DirectoryReader::open(a0, a1));
                return t_DirectoryReader::wrap_Object(result);
              }
            }
          }

          return callSuper(type, "open", args, 2);
        }

        static PyObject *t_DirectoryReader_openIfChanged(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              DirectoryReader a0((jobject) NULL);
              PyTypeObject **p0;
              DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "K", DirectoryReader::initializeClass, &a0, &p0, t_DirectoryReader::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DirectoryReader::openIfChanged(a0));
                return t_DirectoryReader::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              DirectoryReader a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::IndexCommit a1((jobject) NULL);
              DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "Kk", DirectoryReader::initializeClass, ::org::apache::lucene::index::IndexCommit::initializeClass, &a0, &p0, t_DirectoryReader::parameters_, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DirectoryReader::openIfChanged(a0, a1));
                return t_DirectoryReader::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              DirectoryReader a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::IndexWriter a1((jobject) NULL);
              jboolean a2;
              DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "KkZ", DirectoryReader::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &p0, t_DirectoryReader::parameters_, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DirectoryReader::openIfChanged(a0, a1, a2));
                return t_DirectoryReader::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "openIfChanged", args);
          return NULL;
        }
        static PyObject *t_DirectoryReader_get__parameters_(t_DirectoryReader *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_DirectoryReader_get__current(t_DirectoryReader *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isCurrent());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_DirectoryReader_get__indexCommit(t_DirectoryReader *self, void *data)
        {
          ::org::apache::lucene::index::IndexCommit value((jobject) NULL);
          OBJ_CALL(value = self->object.getIndexCommit());
          return ::org::apache::lucene::index::t_IndexCommit::wrap_Object(value);
        }

        static PyObject *t_DirectoryReader_get__version(t_DirectoryReader *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getVersion());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fr/FrenchAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {

          ::java::lang::Class *FrenchAnalyzer::class$ = NULL;
          jmethodID *FrenchAnalyzer::mids$ = NULL;
          bool FrenchAnalyzer::live$ = false;
          ::org::apache::lucene::analysis::util::CharArraySet *FrenchAnalyzer::DEFAULT_ARTICLES = NULL;
          ::java::lang::String *FrenchAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass FrenchAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fr/FrenchAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_ARTICLES = new ::org::apache::lucene::analysis::util::CharArraySet(env->getStaticObjectField(cls, "DEFAULT_ARTICLES", "Lorg/apache/lucene/analysis/util/CharArraySet;"));
              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FrenchAnalyzer::FrenchAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          FrenchAnalyzer::FrenchAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          FrenchAnalyzer::FrenchAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet FrenchAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {
          static PyObject *t_FrenchAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FrenchAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FrenchAnalyzer_init_(t_FrenchAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FrenchAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_FrenchAnalyzer_get__defaultStopSet(t_FrenchAnalyzer *self, void *data);
          static PyGetSetDef t_FrenchAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_FrenchAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FrenchAnalyzer__methods_[] = {
            DECLARE_METHOD(t_FrenchAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FrenchAnalyzer, t_FrenchAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, FrenchAnalyzer, t_FrenchAnalyzer_init_, 0, 0, t_FrenchAnalyzer__fields_, 0, 0);

          void t_FrenchAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(FrenchAnalyzer), module, "FrenchAnalyzer", 0);
          }

          void t_FrenchAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FrenchAnalyzer).tp_dict, "class_", make_descriptor(FrenchAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FrenchAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_FrenchAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FrenchAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(FrenchAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(FrenchAnalyzer).tp_dict, "DEFAULT_ARTICLES", make_descriptor(::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(*FrenchAnalyzer::DEFAULT_ARTICLES)));
            PyDict_SetItemString(PY_TYPE(FrenchAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*FrenchAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_FrenchAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FrenchAnalyzer::initializeClass, 1)))
              return NULL;
            return t_FrenchAnalyzer::wrap_Object(FrenchAnalyzer(((t_FrenchAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_FrenchAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FrenchAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FrenchAnalyzer_init_(t_FrenchAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                FrenchAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = FrenchAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                FrenchAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = FrenchAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                FrenchAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = FrenchAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FrenchAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::fr::FrenchAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_FrenchAnalyzer_get__defaultStopSet(t_FrenchAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/TermVectorsWriter.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "java/util/Comparator.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/index/MergeState.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/Closeable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *TermVectorsWriter::class$ = NULL;
        jmethodID *TermVectorsWriter::mids$ = NULL;
        bool TermVectorsWriter::live$ = false;

        jclass TermVectorsWriter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/TermVectorsWriter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_abort_54c6a166] = env->getMethodID(cls, "abort", "()V");
            mids$[mid_addPosition_ffd34a92] = env->getMethodID(cls, "addPosition", "(IIILorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_addProx_395d0aa2] = env->getMethodID(cls, "addProx", "(ILorg/apache/lucene/store/DataInput;Lorg/apache/lucene/store/DataInput;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_finish_48f050c2] = env->getMethodID(cls, "finish", "(Lorg/apache/lucene/index/FieldInfos;I)V");
            mids$[mid_finishDocument_54c6a166] = env->getMethodID(cls, "finishDocument", "()V");
            mids$[mid_finishField_54c6a166] = env->getMethodID(cls, "finishField", "()V");
            mids$[mid_finishTerm_54c6a166] = env->getMethodID(cls, "finishTerm", "()V");
            mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
            mids$[mid_merge_fd0cfdeb] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/MergeState;)I");
            mids$[mid_startDocument_39c7bd3c] = env->getMethodID(cls, "startDocument", "(I)V");
            mids$[mid_startField_07c4def5] = env->getMethodID(cls, "startField", "(Lorg/apache/lucene/index/FieldInfo;IZZZ)V");
            mids$[mid_startTerm_738fc2ce] = env->getMethodID(cls, "startTerm", "(Lorg/apache/lucene/util/BytesRef;I)V");
            mids$[mid_addAllDocVectors_7f6315b6] = env->getMethodID(cls, "addAllDocVectors", "(Lorg/apache/lucene/index/Fields;Lorg/apache/lucene/index/MergeState;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void TermVectorsWriter::abort() const
        {
          env->callVoidMethod(this$, mids$[mid_abort_54c6a166]);
        }

        void TermVectorsWriter::addPosition(jint a0, jint a1, jint a2, const ::org::apache::lucene::util::BytesRef & a3) const
        {
          env->callVoidMethod(this$, mids$[mid_addPosition_ffd34a92], a0, a1, a2, a3.this$);
        }

        void TermVectorsWriter::addProx(jint a0, const ::org::apache::lucene::store::DataInput & a1, const ::org::apache::lucene::store::DataInput & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_addProx_395d0aa2], a0, a1.this$, a2.this$);
        }

        void TermVectorsWriter::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void TermVectorsWriter::finish(const ::org::apache::lucene::index::FieldInfos & a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_finish_48f050c2], a0.this$, a1);
        }

        void TermVectorsWriter::finishDocument() const
        {
          env->callVoidMethod(this$, mids$[mid_finishDocument_54c6a166]);
        }

        void TermVectorsWriter::finishField() const
        {
          env->callVoidMethod(this$, mids$[mid_finishField_54c6a166]);
        }

        void TermVectorsWriter::finishTerm() const
        {
          env->callVoidMethod(this$, mids$[mid_finishTerm_54c6a166]);
        }

        ::java::util::Comparator TermVectorsWriter::getComparator() const
        {
          return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
        }

        jint TermVectorsWriter::merge(const ::org::apache::lucene::index::MergeState & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_merge_fd0cfdeb], a0.this$);
        }

        void TermVectorsWriter::startDocument(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_startDocument_39c7bd3c], a0);
        }

        void TermVectorsWriter::startField(const ::org::apache::lucene::index::FieldInfo & a0, jint a1, jboolean a2, jboolean a3, jboolean a4) const
        {
          env->callVoidMethod(this$, mids$[mid_startField_07c4def5], a0.this$, a1, a2, a3, a4);
        }

        void TermVectorsWriter::startTerm(const ::org::apache::lucene::util::BytesRef & a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_startTerm_738fc2ce], a0.this$, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_TermVectorsWriter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermVectorsWriter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermVectorsWriter_abort(t_TermVectorsWriter *self);
        static PyObject *t_TermVectorsWriter_addPosition(t_TermVectorsWriter *self, PyObject *args);
        static PyObject *t_TermVectorsWriter_addProx(t_TermVectorsWriter *self, PyObject *args);
        static PyObject *t_TermVectorsWriter_close(t_TermVectorsWriter *self);
        static PyObject *t_TermVectorsWriter_finish(t_TermVectorsWriter *self, PyObject *args);
        static PyObject *t_TermVectorsWriter_finishDocument(t_TermVectorsWriter *self);
        static PyObject *t_TermVectorsWriter_finishField(t_TermVectorsWriter *self);
        static PyObject *t_TermVectorsWriter_finishTerm(t_TermVectorsWriter *self);
        static PyObject *t_TermVectorsWriter_getComparator(t_TermVectorsWriter *self);
        static PyObject *t_TermVectorsWriter_merge(t_TermVectorsWriter *self, PyObject *arg);
        static PyObject *t_TermVectorsWriter_startDocument(t_TermVectorsWriter *self, PyObject *arg);
        static PyObject *t_TermVectorsWriter_startField(t_TermVectorsWriter *self, PyObject *args);
        static PyObject *t_TermVectorsWriter_startTerm(t_TermVectorsWriter *self, PyObject *args);
        static PyObject *t_TermVectorsWriter_get__comparator(t_TermVectorsWriter *self, void *data);
        static PyGetSetDef t_TermVectorsWriter__fields_[] = {
          DECLARE_GET_FIELD(t_TermVectorsWriter, comparator),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TermVectorsWriter__methods_[] = {
          DECLARE_METHOD(t_TermVectorsWriter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermVectorsWriter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermVectorsWriter, abort, METH_NOARGS),
          DECLARE_METHOD(t_TermVectorsWriter, addPosition, METH_VARARGS),
          DECLARE_METHOD(t_TermVectorsWriter, addProx, METH_VARARGS),
          DECLARE_METHOD(t_TermVectorsWriter, close, METH_NOARGS),
          DECLARE_METHOD(t_TermVectorsWriter, finish, METH_VARARGS),
          DECLARE_METHOD(t_TermVectorsWriter, finishDocument, METH_NOARGS),
          DECLARE_METHOD(t_TermVectorsWriter, finishField, METH_NOARGS),
          DECLARE_METHOD(t_TermVectorsWriter, finishTerm, METH_NOARGS),
          DECLARE_METHOD(t_TermVectorsWriter, getComparator, METH_NOARGS),
          DECLARE_METHOD(t_TermVectorsWriter, merge, METH_O),
          DECLARE_METHOD(t_TermVectorsWriter, startDocument, METH_O),
          DECLARE_METHOD(t_TermVectorsWriter, startField, METH_VARARGS),
          DECLARE_METHOD(t_TermVectorsWriter, startTerm, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermVectorsWriter, t_TermVectorsWriter, ::java::lang::Object, TermVectorsWriter, abstract_init, 0, 0, t_TermVectorsWriter__fields_, 0, 0);

        void t_TermVectorsWriter::install(PyObject *module)
        {
          installType(&PY_TYPE(TermVectorsWriter), module, "TermVectorsWriter", 0);
        }

        void t_TermVectorsWriter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermVectorsWriter).tp_dict, "class_", make_descriptor(TermVectorsWriter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermVectorsWriter).tp_dict, "wrapfn_", make_descriptor(t_TermVectorsWriter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermVectorsWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermVectorsWriter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermVectorsWriter::initializeClass, 1)))
            return NULL;
          return t_TermVectorsWriter::wrap_Object(TermVectorsWriter(((t_TermVectorsWriter *) arg)->object.this$));
        }
        static PyObject *t_TermVectorsWriter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermVectorsWriter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TermVectorsWriter_abort(t_TermVectorsWriter *self)
        {
          OBJ_CALL(self->object.abort());
          Py_RETURN_NONE;
        }

        static PyObject *t_TermVectorsWriter_addPosition(t_TermVectorsWriter *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jint a2;
          ::org::apache::lucene::util::BytesRef a3((jobject) NULL);

          if (!parseArgs(args, "IIIk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.addPosition(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addPosition", args);
          return NULL;
        }

        static PyObject *t_TermVectorsWriter_addProx(t_TermVectorsWriter *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::store::DataInput a1((jobject) NULL);
          ::org::apache::lucene::store::DataInput a2((jobject) NULL);

          if (!parseArgs(args, "Ikk", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.addProx(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addProx", args);
          return NULL;
        }

        static PyObject *t_TermVectorsWriter_close(t_TermVectorsWriter *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_TermVectorsWriter_finish(t_TermVectorsWriter *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfos a0((jobject) NULL);
          jint a1;

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::FieldInfos::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.finish(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "finish", args);
          return NULL;
        }

        static PyObject *t_TermVectorsWriter_finishDocument(t_TermVectorsWriter *self)
        {
          OBJ_CALL(self->object.finishDocument());
          Py_RETURN_NONE;
        }

        static PyObject *t_TermVectorsWriter_finishField(t_TermVectorsWriter *self)
        {
          OBJ_CALL(self->object.finishField());
          Py_RETURN_NONE;
        }

        static PyObject *t_TermVectorsWriter_finishTerm(t_TermVectorsWriter *self)
        {
          OBJ_CALL(self->object.finishTerm());
          Py_RETURN_NONE;
        }

        static PyObject *t_TermVectorsWriter_getComparator(t_TermVectorsWriter *self)
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
        }

        static PyObject *t_TermVectorsWriter_merge(t_TermVectorsWriter *self, PyObject *arg)
        {
          ::org::apache::lucene::index::MergeState a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::MergeState::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.merge(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "merge", arg);
          return NULL;
        }

        static PyObject *t_TermVectorsWriter_startDocument(t_TermVectorsWriter *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.startDocument(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "startDocument", arg);
          return NULL;
        }

        static PyObject *t_TermVectorsWriter_startField(t_TermVectorsWriter *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          jint a1;
          jboolean a2;
          jboolean a3;
          jboolean a4;

          if (!parseArgs(args, "kIZZZ", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(self->object.startField(a0, a1, a2, a3, a4));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "startField", args);
          return NULL;
        }

        static PyObject *t_TermVectorsWriter_startTerm(t_TermVectorsWriter *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jint a1;

          if (!parseArgs(args, "kI", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.startTerm(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "startTerm", args);
          return NULL;
        }

        static PyObject *t_TermVectorsWriter_get__comparator(t_TermVectorsWriter *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/LMSimilarity$DefaultCollectionModel.h"
#include "org/apache/lucene/search/similarities/LMSimilarity$CollectionModel.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *LMSimilarity$DefaultCollectionModel::class$ = NULL;
          jmethodID *LMSimilarity$DefaultCollectionModel::mids$ = NULL;
          bool LMSimilarity$DefaultCollectionModel::live$ = false;

          jclass LMSimilarity$DefaultCollectionModel::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/LMSimilarity$DefaultCollectionModel");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_computeProbability_cb225ea0] = env->getMethodID(cls, "computeProbability", "(Lorg/apache/lucene/search/similarities/BasicStats;)F");
              mids$[mid_getName_14c7b5c5] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LMSimilarity$DefaultCollectionModel::LMSimilarity$DefaultCollectionModel() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat LMSimilarity$DefaultCollectionModel::computeProbability(const ::org::apache::lucene::search::similarities::BasicStats & a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_computeProbability_cb225ea0], a0.this$);
          }

          ::java::lang::String LMSimilarity$DefaultCollectionModel::getName() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_LMSimilarity$DefaultCollectionModel_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LMSimilarity$DefaultCollectionModel_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LMSimilarity$DefaultCollectionModel_init_(t_LMSimilarity$DefaultCollectionModel *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LMSimilarity$DefaultCollectionModel_computeProbability(t_LMSimilarity$DefaultCollectionModel *self, PyObject *arg);
          static PyObject *t_LMSimilarity$DefaultCollectionModel_getName(t_LMSimilarity$DefaultCollectionModel *self);
          static PyObject *t_LMSimilarity$DefaultCollectionModel_get__name(t_LMSimilarity$DefaultCollectionModel *self, void *data);
          static PyGetSetDef t_LMSimilarity$DefaultCollectionModel__fields_[] = {
            DECLARE_GET_FIELD(t_LMSimilarity$DefaultCollectionModel, name),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LMSimilarity$DefaultCollectionModel__methods_[] = {
            DECLARE_METHOD(t_LMSimilarity$DefaultCollectionModel, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMSimilarity$DefaultCollectionModel, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMSimilarity$DefaultCollectionModel, computeProbability, METH_O),
            DECLARE_METHOD(t_LMSimilarity$DefaultCollectionModel, getName, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LMSimilarity$DefaultCollectionModel, t_LMSimilarity$DefaultCollectionModel, ::java::lang::Object, LMSimilarity$DefaultCollectionModel, t_LMSimilarity$DefaultCollectionModel_init_, 0, 0, t_LMSimilarity$DefaultCollectionModel__fields_, 0, 0);

          void t_LMSimilarity$DefaultCollectionModel::install(PyObject *module)
          {
            installType(&PY_TYPE(LMSimilarity$DefaultCollectionModel), module, "LMSimilarity$DefaultCollectionModel", 0);
          }

          void t_LMSimilarity$DefaultCollectionModel::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LMSimilarity$DefaultCollectionModel).tp_dict, "class_", make_descriptor(LMSimilarity$DefaultCollectionModel::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LMSimilarity$DefaultCollectionModel).tp_dict, "wrapfn_", make_descriptor(t_LMSimilarity$DefaultCollectionModel::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LMSimilarity$DefaultCollectionModel).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LMSimilarity$DefaultCollectionModel_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LMSimilarity$DefaultCollectionModel::initializeClass, 1)))
              return NULL;
            return t_LMSimilarity$DefaultCollectionModel::wrap_Object(LMSimilarity$DefaultCollectionModel(((t_LMSimilarity$DefaultCollectionModel *) arg)->object.this$));
          }
          static PyObject *t_LMSimilarity$DefaultCollectionModel_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LMSimilarity$DefaultCollectionModel::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LMSimilarity$DefaultCollectionModel_init_(t_LMSimilarity$DefaultCollectionModel *self, PyObject *args, PyObject *kwds)
          {
            LMSimilarity$DefaultCollectionModel object((jobject) NULL);

            INT_CALL(object = LMSimilarity$DefaultCollectionModel());
            self->object = object;

            return 0;
          }

          static PyObject *t_LMSimilarity$DefaultCollectionModel_computeProbability(t_LMSimilarity$DefaultCollectionModel *self, PyObject *arg)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat result;

            if (!parseArg(arg, "k", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.computeProbability(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "computeProbability", arg);
            return NULL;
          }

          static PyObject *t_LMSimilarity$DefaultCollectionModel_getName(t_LMSimilarity$DefaultCollectionModel *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getName());
            return j2p(result);
          }

          static PyObject *t_LMSimilarity$DefaultCollectionModel_get__name(t_LMSimilarity$DefaultCollectionModel *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getName());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/compressing/Decompressor.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/io/IOException.h"
#include "java/lang/Cloneable.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {

          ::java::lang::Class *Decompressor::class$ = NULL;
          jmethodID *Decompressor::mids$ = NULL;
          bool Decompressor::live$ = false;

          jclass Decompressor::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/compressing/Decompressor");

              mids$ = new jmethodID[max_mid];
              mids$[mid_clone_7b8f1b1d] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/codecs/compressing/Decompressor;");
              mids$[mid_decompress_3188de91] = env->getMethodID(cls, "decompress", "(Lorg/apache/lucene/store/DataInput;IIILorg/apache/lucene/util/BytesRef;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Decompressor Decompressor::clone() const
          {
            return Decompressor(env->callObjectMethod(this$, mids$[mid_clone_7b8f1b1d]));
          }

          void Decompressor::decompress(const ::org::apache::lucene::store::DataInput & a0, jint a1, jint a2, jint a3, const ::org::apache::lucene::util::BytesRef & a4) const
          {
            env->callVoidMethod(this$, mids$[mid_decompress_3188de91], a0.this$, a1, a2, a3, a4.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {
          static PyObject *t_Decompressor_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Decompressor_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Decompressor_clone(t_Decompressor *self);
          static PyObject *t_Decompressor_decompress(t_Decompressor *self, PyObject *args);

          static PyMethodDef t_Decompressor__methods_[] = {
            DECLARE_METHOD(t_Decompressor, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Decompressor, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Decompressor, clone, METH_NOARGS),
            DECLARE_METHOD(t_Decompressor, decompress, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Decompressor, t_Decompressor, ::java::lang::Object, Decompressor, abstract_init, 0, 0, 0, 0, 0);

          void t_Decompressor::install(PyObject *module)
          {
            installType(&PY_TYPE(Decompressor), module, "Decompressor", 0);
          }

          void t_Decompressor::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Decompressor).tp_dict, "class_", make_descriptor(Decompressor::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Decompressor).tp_dict, "wrapfn_", make_descriptor(t_Decompressor::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Decompressor).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Decompressor_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Decompressor::initializeClass, 1)))
              return NULL;
            return t_Decompressor::wrap_Object(Decompressor(((t_Decompressor *) arg)->object.this$));
          }
          static PyObject *t_Decompressor_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Decompressor::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Decompressor_clone(t_Decompressor *self)
          {
            Decompressor result((jobject) NULL);
            OBJ_CALL(result = self->object.clone());
            return t_Decompressor::wrap_Object(result);
          }

          static PyObject *t_Decompressor_decompress(t_Decompressor *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            jint a1;
            jint a2;
            jint a3;
            ::org::apache::lucene::util::BytesRef a4((jobject) NULL);

            if (!parseArgs(args, "kIIIk", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(self->object.decompress(a0, a1, a2, a3, a4));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "decompress", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/Util$TopNSearcher.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "org/apache/lucene/util/fst/FST$Arc.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/fst/Util$TopResults.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *Util$TopNSearcher::class$ = NULL;
          jmethodID *Util$TopNSearcher::mids$ = NULL;
          bool Util$TopNSearcher::live$ = false;

          jclass Util$TopNSearcher::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/Util$TopNSearcher");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_95a8ae3f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/FST;IILjava/util/Comparator;)V");
              mids$[mid_addStartPaths_9e8aa683] = env->getMethodID(cls, "addStartPaths", "(Lorg/apache/lucene/util/fst/FST$Arc;Ljava/lang/Object;ZLorg/apache/lucene/util/IntsRef;)V");
              mids$[mid_search_c06b4353] = env->getMethodID(cls, "search", "()Lorg/apache/lucene/util/fst/Util$TopResults;");
              mids$[mid_acceptResult_5219743c] = env->getMethodID(cls, "acceptResult", "(Lorg/apache/lucene/util/IntsRef;Ljava/lang/Object;)Z");
              mids$[mid_addIfCompetitive_175f8fc8] = env->getMethodID(cls, "addIfCompetitive", "(Lorg/apache/lucene/util/fst/Util$FSTPath;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Util$TopNSearcher::Util$TopNSearcher(const ::org::apache::lucene::util::fst::FST & a0, jint a1, jint a2, const ::java::util::Comparator & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_95a8ae3f, a0.this$, a1, a2, a3.this$)) {}

          void Util$TopNSearcher::addStartPaths(const ::org::apache::lucene::util::fst::FST$Arc & a0, const ::java::lang::Object & a1, jboolean a2, const ::org::apache::lucene::util::IntsRef & a3) const
          {
            env->callVoidMethod(this$, mids$[mid_addStartPaths_9e8aa683], a0.this$, a1.this$, a2, a3.this$);
          }

          ::org::apache::lucene::util::fst::Util$TopResults Util$TopNSearcher::search() const
          {
            return ::org::apache::lucene::util::fst::Util$TopResults(env->callObjectMethod(this$, mids$[mid_search_c06b4353]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_Util$TopNSearcher_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Util$TopNSearcher_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Util$TopNSearcher_of_(t_Util$TopNSearcher *self, PyObject *args);
          static int t_Util$TopNSearcher_init_(t_Util$TopNSearcher *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Util$TopNSearcher_addStartPaths(t_Util$TopNSearcher *self, PyObject *args);
          static PyObject *t_Util$TopNSearcher_search(t_Util$TopNSearcher *self);
          static PyObject *t_Util$TopNSearcher_get__parameters_(t_Util$TopNSearcher *self, void *data);
          static PyGetSetDef t_Util$TopNSearcher__fields_[] = {
            DECLARE_GET_FIELD(t_Util$TopNSearcher, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Util$TopNSearcher__methods_[] = {
            DECLARE_METHOD(t_Util$TopNSearcher, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Util$TopNSearcher, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Util$TopNSearcher, of_, METH_VARARGS),
            DECLARE_METHOD(t_Util$TopNSearcher, addStartPaths, METH_VARARGS),
            DECLARE_METHOD(t_Util$TopNSearcher, search, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Util$TopNSearcher, t_Util$TopNSearcher, ::java::lang::Object, Util$TopNSearcher, t_Util$TopNSearcher_init_, 0, 0, t_Util$TopNSearcher__fields_, 0, 0);
          PyObject *t_Util$TopNSearcher::wrap_Object(const Util$TopNSearcher& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Util$TopNSearcher::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Util$TopNSearcher *self = (t_Util$TopNSearcher *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_Util$TopNSearcher::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Util$TopNSearcher::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Util$TopNSearcher *self = (t_Util$TopNSearcher *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_Util$TopNSearcher::install(PyObject *module)
          {
            installType(&PY_TYPE(Util$TopNSearcher), module, "Util$TopNSearcher", 0);
          }

          void t_Util$TopNSearcher::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Util$TopNSearcher).tp_dict, "class_", make_descriptor(Util$TopNSearcher::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Util$TopNSearcher).tp_dict, "wrapfn_", make_descriptor(t_Util$TopNSearcher::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Util$TopNSearcher).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Util$TopNSearcher_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Util$TopNSearcher::initializeClass, 1)))
              return NULL;
            return t_Util$TopNSearcher::wrap_Object(Util$TopNSearcher(((t_Util$TopNSearcher *) arg)->object.this$));
          }
          static PyObject *t_Util$TopNSearcher_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Util$TopNSearcher::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Util$TopNSearcher_of_(t_Util$TopNSearcher *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_Util$TopNSearcher_init_(t_Util$TopNSearcher *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
            PyTypeObject **p0;
            jint a1;
            jint a2;
            ::java::util::Comparator a3((jobject) NULL);
            PyTypeObject **p3;
            Util$TopNSearcher object((jobject) NULL);

            if (!parseArgs(args, "KIIK", ::org::apache::lucene::util::fst::FST::initializeClass, ::java::util::Comparator::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_, &a1, &a2, &a3, &p3, ::java::util::t_Comparator::parameters_))
            {
              INT_CALL(object = Util$TopNSearcher(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Util$TopNSearcher_addStartPaths(t_Util$TopNSearcher *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::FST$Arc a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::lang::Object a1((jobject) NULL);
            jboolean a2;
            ::org::apache::lucene::util::IntsRef a3((jobject) NULL);

            if (!parseArgs(args, "KOZk", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, self->parameters[0], ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a1, &a2, &a3))
            {
              OBJ_CALL(self->object.addStartPaths(a0, a1, a2, a3));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addStartPaths", args);
            return NULL;
          }

          static PyObject *t_Util$TopNSearcher_search(t_Util$TopNSearcher *self)
          {
            ::org::apache::lucene::util::fst::Util$TopResults result((jobject) NULL);
            OBJ_CALL(result = self->object.search());
            return ::org::apache::lucene::util::fst::t_Util$TopResults::wrap_Object(result, self->parameters[0]);
          }
          static PyObject *t_Util$TopNSearcher_get__parameters_(t_Util$TopNSearcher *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/SwedishStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *SwedishStemmer::class$ = NULL;
        jmethodID *SwedishStemmer::mids$ = NULL;
        bool SwedishStemmer::live$ = false;

        jclass SwedishStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/SwedishStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SwedishStemmer::SwedishStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean SwedishStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint SwedishStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean SwedishStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_SwedishStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SwedishStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SwedishStemmer_init_(t_SwedishStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SwedishStemmer_equals(t_SwedishStemmer *self, PyObject *args);
        static PyObject *t_SwedishStemmer_hashCode(t_SwedishStemmer *self, PyObject *args);
        static PyObject *t_SwedishStemmer_stem(t_SwedishStemmer *self, PyObject *args);

        static PyMethodDef t_SwedishStemmer__methods_[] = {
          DECLARE_METHOD(t_SwedishStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SwedishStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SwedishStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_SwedishStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_SwedishStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SwedishStemmer, t_SwedishStemmer, ::org::tartarus::snowball::SnowballProgram, SwedishStemmer, t_SwedishStemmer_init_, 0, 0, 0, 0, 0);

        void t_SwedishStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(SwedishStemmer), module, "SwedishStemmer", 0);
        }

        void t_SwedishStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SwedishStemmer).tp_dict, "class_", make_descriptor(SwedishStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SwedishStemmer).tp_dict, "wrapfn_", make_descriptor(t_SwedishStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SwedishStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SwedishStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SwedishStemmer::initializeClass, 1)))
            return NULL;
          return t_SwedishStemmer::wrap_Object(SwedishStemmer(((t_SwedishStemmer *) arg)->object.this$));
        }
        static PyObject *t_SwedishStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SwedishStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SwedishStemmer_init_(t_SwedishStemmer *self, PyObject *args, PyObject *kwds)
        {
          SwedishStemmer object((jobject) NULL);

          INT_CALL(object = SwedishStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_SwedishStemmer_equals(t_SwedishStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(SwedishStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_SwedishStemmer_hashCode(t_SwedishStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(SwedishStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_SwedishStemmer_stem(t_SwedishStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(SwedishStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40PostingsBaseFormat.h"
#include "org/apache/lucene/codecs/PostingsWriterBase.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/codecs/PostingsReaderBase.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40PostingsBaseFormat::class$ = NULL;
          jmethodID *Lucene40PostingsBaseFormat::mids$ = NULL;
          bool Lucene40PostingsBaseFormat::live$ = false;

          jclass Lucene40PostingsBaseFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40PostingsBaseFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_postingsReaderBase_927fb3f2] = env->getMethodID(cls, "postingsReaderBase", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/PostingsReaderBase;");
              mids$[mid_postingsWriterBase_c1fe85c2] = env->getMethodID(cls, "postingsWriterBase", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/PostingsWriterBase;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40PostingsBaseFormat::Lucene40PostingsBaseFormat() : ::org::apache::lucene::codecs::PostingsBaseFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::PostingsReaderBase Lucene40PostingsBaseFormat::postingsReaderBase(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::PostingsReaderBase(env->callObjectMethod(this$, mids$[mid_postingsReaderBase_927fb3f2], a0.this$));
          }

          ::org::apache::lucene::codecs::PostingsWriterBase Lucene40PostingsBaseFormat::postingsWriterBase(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::PostingsWriterBase(env->callObjectMethod(this$, mids$[mid_postingsWriterBase_c1fe85c2], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40PostingsBaseFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40PostingsBaseFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40PostingsBaseFormat_init_(t_Lucene40PostingsBaseFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40PostingsBaseFormat_postingsReaderBase(t_Lucene40PostingsBaseFormat *self, PyObject *args);
          static PyObject *t_Lucene40PostingsBaseFormat_postingsWriterBase(t_Lucene40PostingsBaseFormat *self, PyObject *args);

          static PyMethodDef t_Lucene40PostingsBaseFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene40PostingsBaseFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40PostingsBaseFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40PostingsBaseFormat, postingsReaderBase, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40PostingsBaseFormat, postingsWriterBase, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40PostingsBaseFormat, t_Lucene40PostingsBaseFormat, ::org::apache::lucene::codecs::PostingsBaseFormat, Lucene40PostingsBaseFormat, t_Lucene40PostingsBaseFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene40PostingsBaseFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40PostingsBaseFormat), module, "Lucene40PostingsBaseFormat", 0);
          }

          void t_Lucene40PostingsBaseFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40PostingsBaseFormat).tp_dict, "class_", make_descriptor(Lucene40PostingsBaseFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40PostingsBaseFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene40PostingsBaseFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40PostingsBaseFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40PostingsBaseFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40PostingsBaseFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene40PostingsBaseFormat::wrap_Object(Lucene40PostingsBaseFormat(((t_Lucene40PostingsBaseFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene40PostingsBaseFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40PostingsBaseFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40PostingsBaseFormat_init_(t_Lucene40PostingsBaseFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene40PostingsBaseFormat object((jobject) NULL);

            INT_CALL(object = Lucene40PostingsBaseFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene40PostingsBaseFormat_postingsReaderBase(t_Lucene40PostingsBaseFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsReaderBase result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.postingsReaderBase(a0));
              return ::org::apache::lucene::codecs::t_PostingsReaderBase::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40PostingsBaseFormat), (PyObject *) self, "postingsReaderBase", args, 2);
          }

          static PyObject *t_Lucene40PostingsBaseFormat_postingsWriterBase(t_Lucene40PostingsBaseFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsWriterBase result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.postingsWriterBase(a0));
              return ::org::apache::lucene::codecs::t_PostingsWriterBase::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40PostingsBaseFormat), (PyObject *) self, "postingsWriterBase", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pattern/PatternReplaceFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/pattern/PatternReplaceFilter.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {

          ::java::lang::Class *PatternReplaceFilterFactory::class$ = NULL;
          jmethodID *PatternReplaceFilterFactory::mids$ = NULL;
          bool PatternReplaceFilterFactory::live$ = false;

          jclass PatternReplaceFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pattern/PatternReplaceFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_d0c93252] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/pattern/PatternReplaceFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PatternReplaceFilterFactory::PatternReplaceFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::pattern::PatternReplaceFilter PatternReplaceFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::pattern::PatternReplaceFilter(env->callObjectMethod(this$, mids$[mid_create_d0c93252], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {
          static PyObject *t_PatternReplaceFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PatternReplaceFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PatternReplaceFilterFactory_init_(t_PatternReplaceFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PatternReplaceFilterFactory_create(t_PatternReplaceFilterFactory *self, PyObject *args);

          static PyMethodDef t_PatternReplaceFilterFactory__methods_[] = {
            DECLARE_METHOD(t_PatternReplaceFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternReplaceFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternReplaceFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PatternReplaceFilterFactory, t_PatternReplaceFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, PatternReplaceFilterFactory, t_PatternReplaceFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_PatternReplaceFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PatternReplaceFilterFactory), module, "PatternReplaceFilterFactory", 0);
          }

          void t_PatternReplaceFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PatternReplaceFilterFactory).tp_dict, "class_", make_descriptor(PatternReplaceFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PatternReplaceFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_PatternReplaceFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PatternReplaceFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PatternReplaceFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PatternReplaceFilterFactory::initializeClass, 1)))
              return NULL;
            return t_PatternReplaceFilterFactory::wrap_Object(PatternReplaceFilterFactory(((t_PatternReplaceFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_PatternReplaceFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PatternReplaceFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PatternReplaceFilterFactory_init_(t_PatternReplaceFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PatternReplaceFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PatternReplaceFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PatternReplaceFilterFactory_create(t_PatternReplaceFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::pattern::PatternReplaceFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::pattern::t_PatternReplaceFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PatternReplaceFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/antlr/runtime/RuleReturnScope.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace antlr {
    namespace runtime {

      ::java::lang::Class *RuleReturnScope::class$ = NULL;
      jmethodID *RuleReturnScope::mids$ = NULL;
      bool RuleReturnScope::live$ = false;

      jclass RuleReturnScope::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/antlr/runtime/RuleReturnScope");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
          mids$[mid_getStart_846352c3] = env->getMethodID(cls, "getStart", "()Ljava/lang/Object;");
          mids$[mid_getStop_846352c3] = env->getMethodID(cls, "getStop", "()Ljava/lang/Object;");
          mids$[mid_getTemplate_846352c3] = env->getMethodID(cls, "getTemplate", "()Ljava/lang/Object;");
          mids$[mid_getTree_846352c3] = env->getMethodID(cls, "getTree", "()Ljava/lang/Object;");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      RuleReturnScope::RuleReturnScope() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

      ::java::lang::Object RuleReturnScope::getStart() const
      {
        return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getStart_846352c3]));
      }

      ::java::lang::Object RuleReturnScope::getStop() const
      {
        return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getStop_846352c3]));
      }

      ::java::lang::Object RuleReturnScope::getTemplate() const
      {
        return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getTemplate_846352c3]));
      }

      ::java::lang::Object RuleReturnScope::getTree() const
      {
        return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getTree_846352c3]));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace antlr {
    namespace runtime {
      static PyObject *t_RuleReturnScope_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_RuleReturnScope_instance_(PyTypeObject *type, PyObject *arg);
      static int t_RuleReturnScope_init_(t_RuleReturnScope *self, PyObject *args, PyObject *kwds);
      static PyObject *t_RuleReturnScope_getStart(t_RuleReturnScope *self);
      static PyObject *t_RuleReturnScope_getStop(t_RuleReturnScope *self);
      static PyObject *t_RuleReturnScope_getTemplate(t_RuleReturnScope *self);
      static PyObject *t_RuleReturnScope_getTree(t_RuleReturnScope *self);
      static PyObject *t_RuleReturnScope_get__start(t_RuleReturnScope *self, void *data);
      static PyObject *t_RuleReturnScope_get__stop(t_RuleReturnScope *self, void *data);
      static PyObject *t_RuleReturnScope_get__template(t_RuleReturnScope *self, void *data);
      static PyObject *t_RuleReturnScope_get__tree(t_RuleReturnScope *self, void *data);
      static PyGetSetDef t_RuleReturnScope__fields_[] = {
        DECLARE_GET_FIELD(t_RuleReturnScope, start),
        DECLARE_GET_FIELD(t_RuleReturnScope, stop),
        DECLARE_GET_FIELD(t_RuleReturnScope, template),
        DECLARE_GET_FIELD(t_RuleReturnScope, tree),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_RuleReturnScope__methods_[] = {
        DECLARE_METHOD(t_RuleReturnScope, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_RuleReturnScope, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_RuleReturnScope, getStart, METH_NOARGS),
        DECLARE_METHOD(t_RuleReturnScope, getStop, METH_NOARGS),
        DECLARE_METHOD(t_RuleReturnScope, getTemplate, METH_NOARGS),
        DECLARE_METHOD(t_RuleReturnScope, getTree, METH_NOARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(RuleReturnScope, t_RuleReturnScope, ::java::lang::Object, RuleReturnScope, t_RuleReturnScope_init_, 0, 0, t_RuleReturnScope__fields_, 0, 0);

      void t_RuleReturnScope::install(PyObject *module)
      {
        installType(&PY_TYPE(RuleReturnScope), module, "RuleReturnScope", 0);
      }

      void t_RuleReturnScope::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(RuleReturnScope).tp_dict, "class_", make_descriptor(RuleReturnScope::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(RuleReturnScope).tp_dict, "wrapfn_", make_descriptor(t_RuleReturnScope::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(RuleReturnScope).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_RuleReturnScope_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, RuleReturnScope::initializeClass, 1)))
          return NULL;
        return t_RuleReturnScope::wrap_Object(RuleReturnScope(((t_RuleReturnScope *) arg)->object.this$));
      }
      static PyObject *t_RuleReturnScope_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, RuleReturnScope::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_RuleReturnScope_init_(t_RuleReturnScope *self, PyObject *args, PyObject *kwds)
      {
        RuleReturnScope object((jobject) NULL);

        INT_CALL(object = RuleReturnScope());
        self->object = object;

        return 0;
      }

      static PyObject *t_RuleReturnScope_getStart(t_RuleReturnScope *self)
      {
        ::java::lang::Object result((jobject) NULL);
        OBJ_CALL(result = self->object.getStart());
        return ::java::lang::t_Object::wrap_Object(result);
      }

      static PyObject *t_RuleReturnScope_getStop(t_RuleReturnScope *self)
      {
        ::java::lang::Object result((jobject) NULL);
        OBJ_CALL(result = self->object.getStop());
        return ::java::lang::t_Object::wrap_Object(result);
      }

      static PyObject *t_RuleReturnScope_getTemplate(t_RuleReturnScope *self)
      {
        ::java::lang::Object result((jobject) NULL);
        OBJ_CALL(result = self->object.getTemplate());
        return ::java::lang::t_Object::wrap_Object(result);
      }

      static PyObject *t_RuleReturnScope_getTree(t_RuleReturnScope *self)
      {
        ::java::lang::Object result((jobject) NULL);
        OBJ_CALL(result = self->object.getTree());
        return ::java::lang::t_Object::wrap_Object(result);
      }

      static PyObject *t_RuleReturnScope_get__start(t_RuleReturnScope *self, void *data)
      {
        ::java::lang::Object value((jobject) NULL);
        OBJ_CALL(value = self->object.getStart());
        return ::java::lang::t_Object::wrap_Object(value);
      }

      static PyObject *t_RuleReturnScope_get__stop(t_RuleReturnScope *self, void *data)
      {
        ::java::lang::Object value((jobject) NULL);
        OBJ_CALL(value = self->object.getStop());
        return ::java::lang::t_Object::wrap_Object(value);
      }

      static PyObject *t_RuleReturnScope_get__template(t_RuleReturnScope *self, void *data)
      {
        ::java::lang::Object value((jobject) NULL);
        OBJ_CALL(value = self->object.getTemplate());
        return ::java::lang::t_Object::wrap_Object(value);
      }

      static PyObject *t_RuleReturnScope_get__tree(t_RuleReturnScope *self, void *data)
      {
        ::java::lang::Object value((jobject) NULL);
        OBJ_CALL(value = self->object.getTree());
        return ::java::lang::t_Object::wrap_Object(value);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/ParseException.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/SyntaxParser.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeParseException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParserTokenManager.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParserConstants.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/CharStream.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/Token.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {

              ::java::lang::Class *StandardSyntaxParser::class$ = NULL;
              jmethodID *StandardSyntaxParser::mids$ = NULL;
              jfieldID *StandardSyntaxParser::fids$ = NULL;
              bool StandardSyntaxParser::live$ = false;

              jclass StandardSyntaxParser::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_init$_8af5fa89] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/standard/parser/CharStream;)V");
                  mids$[mid_init$_491f91b2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParserTokenManager;)V");
                  mids$[mid_Clause_9709215a] = env->getMethodID(cls, "Clause", "(Ljava/lang/CharSequence;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_ConjQuery_9709215a] = env->getMethodID(cls, "ConjQuery", "(Ljava/lang/CharSequence;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_Conjunction_54c6a179] = env->getMethodID(cls, "Conjunction", "()I");
                  mids$[mid_DisjQuery_9709215a] = env->getMethodID(cls, "DisjQuery", "(Ljava/lang/CharSequence;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_ModClause_9709215a] = env->getMethodID(cls, "ModClause", "(Ljava/lang/CharSequence;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_Modifiers_511690a9] = env->getMethodID(cls, "Modifiers", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier;");
                  mids$[mid_Query_9709215a] = env->getMethodID(cls, "Query", "(Ljava/lang/CharSequence;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_ReInit_491f91b2] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParserTokenManager;)V");
                  mids$[mid_ReInit_8af5fa89] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/flexible/standard/parser/CharStream;)V");
                  mids$[mid_Term_9709215a] = env->getMethodID(cls, "Term", "(Ljava/lang/CharSequence;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_TopLevelQuery_9709215a] = env->getMethodID(cls, "TopLevelQuery", "(Ljava/lang/CharSequence;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_disable_tracing_54c6a166] = env->getMethodID(cls, "disable_tracing", "()V");
                  mids$[mid_enable_tracing_54c6a166] = env->getMethodID(cls, "enable_tracing", "()V");
                  mids$[mid_generateParseException_4481d278] = env->getMethodID(cls, "generateParseException", "()Lorg/apache/lucene/queryparser/flexible/standard/parser/ParseException;");
                  mids$[mid_getNextToken_5eb4cff8] = env->getMethodID(cls, "getNextToken", "()Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;");
                  mids$[mid_getToken_24cc8f6e] = env->getMethodID(cls, "getToken", "(I)Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;");
                  mids$[mid_parse_051054be] = env->getMethodID(cls, "parse", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");

                  fids$ = new jfieldID[max_fid];
                  fids$[fid_jj_nt] = env->getFieldID(cls, "jj_nt", "Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;");
                  fids$[fid_token] = env->getFieldID(cls, "token", "Lorg/apache/lucene/queryparser/flexible/standard/parser/Token;");
                  fids$[fid_token_source] = env->getFieldID(cls, "token_source", "Lorg/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParserTokenManager;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              StandardSyntaxParser::StandardSyntaxParser() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              StandardSyntaxParser::StandardSyntaxParser(const ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_8af5fa89, a0.this$)) {}

              StandardSyntaxParser::StandardSyntaxParser(const ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_491f91b2, a0.this$)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode StandardSyntaxParser::Clause(const ::java::lang::CharSequence & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_Clause_9709215a], a0.this$));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode StandardSyntaxParser::ConjQuery(const ::java::lang::CharSequence & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_ConjQuery_9709215a], a0.this$));
              }

              jint StandardSyntaxParser::Conjunction() const
              {
                return env->callIntMethod(this$, mids$[mid_Conjunction_54c6a179]);
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode StandardSyntaxParser::DisjQuery(const ::java::lang::CharSequence & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_DisjQuery_9709215a], a0.this$));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode StandardSyntaxParser::ModClause(const ::java::lang::CharSequence & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_ModClause_9709215a], a0.this$));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier StandardSyntaxParser::Modifiers() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier(env->callObjectMethod(this$, mids$[mid_Modifiers_511690a9]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode StandardSyntaxParser::Query(const ::java::lang::CharSequence & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_Query_9709215a], a0.this$));
              }

              void StandardSyntaxParser::ReInit(const ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_ReInit_491f91b2], a0.this$);
              }

              void StandardSyntaxParser::ReInit(const ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_ReInit_8af5fa89], a0.this$);
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode StandardSyntaxParser::Term(const ::java::lang::CharSequence & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_Term_9709215a], a0.this$));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode StandardSyntaxParser::TopLevelQuery(const ::java::lang::CharSequence & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_TopLevelQuery_9709215a], a0.this$));
              }

              void StandardSyntaxParser::disable_tracing() const
              {
                env->callVoidMethod(this$, mids$[mid_disable_tracing_54c6a166]);
              }

              void StandardSyntaxParser::enable_tracing() const
              {
                env->callVoidMethod(this$, mids$[mid_enable_tracing_54c6a166]);
              }

              ::org::apache::lucene::queryparser::flexible::standard::parser::ParseException StandardSyntaxParser::generateParseException() const
              {
                return ::org::apache::lucene::queryparser::flexible::standard::parser::ParseException(env->callObjectMethod(this$, mids$[mid_generateParseException_4481d278]));
              }

              ::org::apache::lucene::queryparser::flexible::standard::parser::Token StandardSyntaxParser::getNextToken() const
              {
                return ::org::apache::lucene::queryparser::flexible::standard::parser::Token(env->callObjectMethod(this$, mids$[mid_getNextToken_5eb4cff8]));
              }

              ::org::apache::lucene::queryparser::flexible::standard::parser::Token StandardSyntaxParser::getToken(jint a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::standard::parser::Token(env->callObjectMethod(this$, mids$[mid_getToken_24cc8f6e], a0));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode StandardSyntaxParser::parse(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_parse_051054be], a0.this$, a1.this$));
              }

              ::org::apache::lucene::queryparser::flexible::standard::parser::Token StandardSyntaxParser::_get_jj_nt() const
              {
                return ::org::apache::lucene::queryparser::flexible::standard::parser::Token(env->getObjectField(this$, fids$[fid_jj_nt]));
              }

              void StandardSyntaxParser::_set_jj_nt(const ::org::apache::lucene::queryparser::flexible::standard::parser::Token & a0) const
              {
                env->setObjectField(this$, fids$[fid_jj_nt], a0.this$);
              }

              ::org::apache::lucene::queryparser::flexible::standard::parser::Token StandardSyntaxParser::_get_token() const
              {
                return ::org::apache::lucene::queryparser::flexible::standard::parser::Token(env->getObjectField(this$, fids$[fid_token]));
              }

              void StandardSyntaxParser::_set_token(const ::org::apache::lucene::queryparser::flexible::standard::parser::Token & a0) const
              {
                env->setObjectField(this$, fids$[fid_token], a0.this$);
              }

              ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager StandardSyntaxParser::_get_token_source() const
              {
                return ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager(env->getObjectField(this$, fids$[fid_token_source]));
              }

              void StandardSyntaxParser::_set_token_source(const ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager & a0) const
              {
                env->setObjectField(this$, fids$[fid_token_source], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {
              static PyObject *t_StandardSyntaxParser_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardSyntaxParser_instance_(PyTypeObject *type, PyObject *arg);
              static int t_StandardSyntaxParser_init_(t_StandardSyntaxParser *self, PyObject *args, PyObject *kwds);
              static PyObject *t_StandardSyntaxParser_Clause(t_StandardSyntaxParser *self, PyObject *arg);
              static PyObject *t_StandardSyntaxParser_ConjQuery(t_StandardSyntaxParser *self, PyObject *arg);
              static PyObject *t_StandardSyntaxParser_Conjunction(t_StandardSyntaxParser *self);
              static PyObject *t_StandardSyntaxParser_DisjQuery(t_StandardSyntaxParser *self, PyObject *arg);
              static PyObject *t_StandardSyntaxParser_ModClause(t_StandardSyntaxParser *self, PyObject *arg);
              static PyObject *t_StandardSyntaxParser_Modifiers(t_StandardSyntaxParser *self);
              static PyObject *t_StandardSyntaxParser_Query(t_StandardSyntaxParser *self, PyObject *arg);
              static PyObject *t_StandardSyntaxParser_ReInit(t_StandardSyntaxParser *self, PyObject *args);
              static PyObject *t_StandardSyntaxParser_Term(t_StandardSyntaxParser *self, PyObject *arg);
              static PyObject *t_StandardSyntaxParser_TopLevelQuery(t_StandardSyntaxParser *self, PyObject *arg);
              static PyObject *t_StandardSyntaxParser_disable_tracing(t_StandardSyntaxParser *self);
              static PyObject *t_StandardSyntaxParser_enable_tracing(t_StandardSyntaxParser *self);
              static PyObject *t_StandardSyntaxParser_generateParseException(t_StandardSyntaxParser *self);
              static PyObject *t_StandardSyntaxParser_getNextToken(t_StandardSyntaxParser *self);
              static PyObject *t_StandardSyntaxParser_getToken(t_StandardSyntaxParser *self, PyObject *arg);
              static PyObject *t_StandardSyntaxParser_parse(t_StandardSyntaxParser *self, PyObject *args);
              static PyObject *t_StandardSyntaxParser_get__jj_nt(t_StandardSyntaxParser *self, void *data);
              static int t_StandardSyntaxParser_set__jj_nt(t_StandardSyntaxParser *self, PyObject *arg, void *data);
              static PyObject *t_StandardSyntaxParser_get__token(t_StandardSyntaxParser *self, void *data);
              static int t_StandardSyntaxParser_set__token(t_StandardSyntaxParser *self, PyObject *arg, void *data);
              static PyObject *t_StandardSyntaxParser_get__token_source(t_StandardSyntaxParser *self, void *data);
              static int t_StandardSyntaxParser_set__token_source(t_StandardSyntaxParser *self, PyObject *arg, void *data);

              static PyObject *t_StandardSyntaxParser_get__nextToken(t_StandardSyntaxParser *self, void *data);
              static PyGetSetDef t_StandardSyntaxParser__fields_[] = {
                DECLARE_GETSET_FIELD(t_StandardSyntaxParser, jj_nt),
                DECLARE_GETSET_FIELD(t_StandardSyntaxParser, token),
                DECLARE_GETSET_FIELD(t_StandardSyntaxParser, token_source),
                DECLARE_GET_FIELD(t_StandardSyntaxParser, nextToken),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_StandardSyntaxParser__methods_[] = {
                DECLARE_METHOD(t_StandardSyntaxParser, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardSyntaxParser, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardSyntaxParser, Clause, METH_O),
                DECLARE_METHOD(t_StandardSyntaxParser, ConjQuery, METH_O),
                DECLARE_METHOD(t_StandardSyntaxParser, Conjunction, METH_NOARGS),
                DECLARE_METHOD(t_StandardSyntaxParser, DisjQuery, METH_O),
                DECLARE_METHOD(t_StandardSyntaxParser, ModClause, METH_O),
                DECLARE_METHOD(t_StandardSyntaxParser, Modifiers, METH_NOARGS),
                DECLARE_METHOD(t_StandardSyntaxParser, Query, METH_O),
                DECLARE_METHOD(t_StandardSyntaxParser, ReInit, METH_VARARGS),
                DECLARE_METHOD(t_StandardSyntaxParser, Term, METH_O),
                DECLARE_METHOD(t_StandardSyntaxParser, TopLevelQuery, METH_O),
                DECLARE_METHOD(t_StandardSyntaxParser, disable_tracing, METH_NOARGS),
                DECLARE_METHOD(t_StandardSyntaxParser, enable_tracing, METH_NOARGS),
                DECLARE_METHOD(t_StandardSyntaxParser, generateParseException, METH_NOARGS),
                DECLARE_METHOD(t_StandardSyntaxParser, getNextToken, METH_NOARGS),
                DECLARE_METHOD(t_StandardSyntaxParser, getToken, METH_O),
                DECLARE_METHOD(t_StandardSyntaxParser, parse, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(StandardSyntaxParser, t_StandardSyntaxParser, ::java::lang::Object, StandardSyntaxParser, t_StandardSyntaxParser_init_, 0, 0, t_StandardSyntaxParser__fields_, 0, 0);

              void t_StandardSyntaxParser::install(PyObject *module)
              {
                installType(&PY_TYPE(StandardSyntaxParser), module, "StandardSyntaxParser", 0);
              }

              void t_StandardSyntaxParser::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParser).tp_dict, "class_", make_descriptor(StandardSyntaxParser::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParser).tp_dict, "wrapfn_", make_descriptor(t_StandardSyntaxParser::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParser).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_StandardSyntaxParser_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StandardSyntaxParser::initializeClass, 1)))
                  return NULL;
                return t_StandardSyntaxParser::wrap_Object(StandardSyntaxParser(((t_StandardSyntaxParser *) arg)->object.this$));
              }
              static PyObject *t_StandardSyntaxParser_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StandardSyntaxParser::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_StandardSyntaxParser_init_(t_StandardSyntaxParser *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 0:
                  {
                    StandardSyntaxParser object((jobject) NULL);

                    INT_CALL(object = StandardSyntaxParser());
                    self->object = object;
                    break;
                  }
                  goto err;
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream a0((jobject) NULL);
                    StandardSyntaxParser object((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream::initializeClass, &a0))
                    {
                      INT_CALL(object = StandardSyntaxParser(a0));
                      self->object = object;
                      break;
                    }
                  }
                  {
                    ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager a0((jobject) NULL);
                    StandardSyntaxParser object((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager::initializeClass, &a0))
                    {
                      INT_CALL(object = StandardSyntaxParser(a0));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                 err:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_StandardSyntaxParser_Clause(t_StandardSyntaxParser *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.Clause(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "Clause", arg);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParser_ConjQuery(t_StandardSyntaxParser *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.ConjQuery(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "ConjQuery", arg);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParser_Conjunction(t_StandardSyntaxParser *self)
              {
                jint result;
                OBJ_CALL(result = self->object.Conjunction());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_StandardSyntaxParser_DisjQuery(t_StandardSyntaxParser *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.DisjQuery(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "DisjQuery", arg);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParser_ModClause(t_StandardSyntaxParser *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.ModClause(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "ModClause", arg);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParser_Modifiers(t_StandardSyntaxParser *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier result((jobject) NULL);
                OBJ_CALL(result = self->object.Modifiers());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_ModifierQueryNode$Modifier::wrap_Object(result);
              }

              static PyObject *t_StandardSyntaxParser_Query(t_StandardSyntaxParser *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.Query(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "Query", arg);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParser_ReInit(t_StandardSyntaxParser *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager a0((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager::initializeClass, &a0))
                    {
                      OBJ_CALL(self->object.ReInit(a0));
                      Py_RETURN_NONE;
                    }
                  }
                  {
                    ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream a0((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::standard::parser::CharStream::initializeClass, &a0))
                    {
                      OBJ_CALL(self->object.ReInit(a0));
                      Py_RETURN_NONE;
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "ReInit", args);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParser_Term(t_StandardSyntaxParser *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.Term(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "Term", arg);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParser_TopLevelQuery(t_StandardSyntaxParser *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.TopLevelQuery(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "TopLevelQuery", arg);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParser_disable_tracing(t_StandardSyntaxParser *self)
              {
                OBJ_CALL(self->object.disable_tracing());
                Py_RETURN_NONE;
              }

              static PyObject *t_StandardSyntaxParser_enable_tracing(t_StandardSyntaxParser *self)
              {
                OBJ_CALL(self->object.enable_tracing());
                Py_RETURN_NONE;
              }

              static PyObject *t_StandardSyntaxParser_generateParseException(t_StandardSyntaxParser *self)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::ParseException result((jobject) NULL);
                OBJ_CALL(result = self->object.generateParseException());
                return ::org::apache::lucene::queryparser::flexible::standard::parser::t_ParseException::wrap_Object(result);
              }

              static PyObject *t_StandardSyntaxParser_getNextToken(t_StandardSyntaxParser *self)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::Token result((jobject) NULL);
                OBJ_CALL(result = self->object.getNextToken());
                return ::org::apache::lucene::queryparser::flexible::standard::parser::t_Token::wrap_Object(result);
              }

              static PyObject *t_StandardSyntaxParser_getToken(t_StandardSyntaxParser *self, PyObject *arg)
              {
                jint a0;
                ::org::apache::lucene::queryparser::flexible::standard::parser::Token result((jobject) NULL);

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(result = self->object.getToken(a0));
                  return ::org::apache::lucene::queryparser::flexible::standard::parser::t_Token::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "getToken", arg);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParser_parse(t_StandardSyntaxParser *self, PyObject *args)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::CharSequence a1((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, "OO", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
                {
                  OBJ_CALL(result = self->object.parse(a0, a1));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "parse", args);
                return NULL;
              }

              static PyObject *t_StandardSyntaxParser_get__jj_nt(t_StandardSyntaxParser *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::Token value((jobject) NULL);
                OBJ_CALL(value = self->object._get_jj_nt());
                return ::org::apache::lucene::queryparser::flexible::standard::parser::t_Token::wrap_Object(value);
              }
              static int t_StandardSyntaxParser_set__jj_nt(t_StandardSyntaxParser *self, PyObject *arg, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::Token value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::standard::parser::Token::initializeClass, &value))
                {
                  INT_CALL(self->object._set_jj_nt(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "jj_nt", arg);
                return -1;
              }

              static PyObject *t_StandardSyntaxParser_get__token(t_StandardSyntaxParser *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::Token value((jobject) NULL);
                OBJ_CALL(value = self->object._get_token());
                return ::org::apache::lucene::queryparser::flexible::standard::parser::t_Token::wrap_Object(value);
              }
              static int t_StandardSyntaxParser_set__token(t_StandardSyntaxParser *self, PyObject *arg, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::Token value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::standard::parser::Token::initializeClass, &value))
                {
                  INT_CALL(self->object._set_token(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "token", arg);
                return -1;
              }

              static PyObject *t_StandardSyntaxParser_get__token_source(t_StandardSyntaxParser *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager value((jobject) NULL);
                OBJ_CALL(value = self->object._get_token_source());
                return ::org::apache::lucene::queryparser::flexible::standard::parser::t_StandardSyntaxParserTokenManager::wrap_Object(value);
              }
              static int t_StandardSyntaxParser_set__token_source(t_StandardSyntaxParser *self, PyObject *arg, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::standard::parser::StandardSyntaxParserTokenManager::initializeClass, &value))
                {
                  INT_CALL(self->object._set_token_source(value));
                  return 0;
                }
                PyErr_SetArgsError((PyObject *) self, "token_source", arg);
                return -1;
              }

              static PyObject *t_StandardSyntaxParser_get__nextToken(t_StandardSyntaxParser *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::standard::parser::Token value((jobject) NULL);
                OBJ_CALL(value = self->object.getNextToken());
                return ::org::apache::lucene::queryparser::flexible::standard::parser::t_Token::wrap_Object(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ckb/SoraniAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {

          ::java::lang::Class *SoraniAnalyzer::class$ = NULL;
          jmethodID *SoraniAnalyzer::mids$ = NULL;
          bool SoraniAnalyzer::live$ = false;
          ::java::lang::String *SoraniAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass SoraniAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ckb/SoraniAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SoraniAnalyzer::SoraniAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          SoraniAnalyzer::SoraniAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          SoraniAnalyzer::SoraniAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet SoraniAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {
          static PyObject *t_SoraniAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SoraniAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SoraniAnalyzer_init_(t_SoraniAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SoraniAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_SoraniAnalyzer_get__defaultStopSet(t_SoraniAnalyzer *self, void *data);
          static PyGetSetDef t_SoraniAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_SoraniAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SoraniAnalyzer__methods_[] = {
            DECLARE_METHOD(t_SoraniAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SoraniAnalyzer, t_SoraniAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, SoraniAnalyzer, t_SoraniAnalyzer_init_, 0, 0, t_SoraniAnalyzer__fields_, 0, 0);

          void t_SoraniAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(SoraniAnalyzer), module, "SoraniAnalyzer", 0);
          }

          void t_SoraniAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SoraniAnalyzer).tp_dict, "class_", make_descriptor(SoraniAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SoraniAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_SoraniAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SoraniAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SoraniAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(SoraniAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*SoraniAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_SoraniAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SoraniAnalyzer::initializeClass, 1)))
              return NULL;
            return t_SoraniAnalyzer::wrap_Object(SoraniAnalyzer(((t_SoraniAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_SoraniAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SoraniAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SoraniAnalyzer_init_(t_SoraniAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                SoraniAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = SoraniAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                SoraniAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = SoraniAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                SoraniAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = SoraniAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SoraniAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::ckb::SoraniAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_SoraniAnalyzer_get__defaultStopSet(t_SoraniAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/PayloadHelper.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *PayloadHelper::class$ = NULL;
          jmethodID *PayloadHelper::mids$ = NULL;
          bool PayloadHelper::live$ = false;

          jclass PayloadHelper::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/PayloadHelper");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_decodeFloat_49b4f13b] = env->getStaticMethodID(cls, "decodeFloat", "([B)F");
              mids$[mid_decodeFloat_b8354c53] = env->getStaticMethodID(cls, "decodeFloat", "([BI)F");
              mids$[mid_decodeInt_b8354c5c] = env->getStaticMethodID(cls, "decodeInt", "([BI)I");
              mids$[mid_encodeFloat_909f9221] = env->getStaticMethodID(cls, "encodeFloat", "(F)[B");
              mids$[mid_encodeFloat_a555a4d0] = env->getStaticMethodID(cls, "encodeFloat", "(F[BI)[B");
              mids$[mid_encodeInt_b4292e98] = env->getStaticMethodID(cls, "encodeInt", "(I)[B");
              mids$[mid_encodeInt_1bd14047] = env->getStaticMethodID(cls, "encodeInt", "(I[BI)[B");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PayloadHelper::PayloadHelper() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat PayloadHelper::decodeFloat(const JArray< jbyte > & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticFloatMethod(cls, mids$[mid_decodeFloat_49b4f13b], a0.this$);
          }

          jfloat PayloadHelper::decodeFloat(const JArray< jbyte > & a0, jint a1)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticFloatMethod(cls, mids$[mid_decodeFloat_b8354c53], a0.this$, a1);
          }

          jint PayloadHelper::decodeInt(const JArray< jbyte > & a0, jint a1)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_decodeInt_b8354c5c], a0.this$, a1);
          }

          JArray< jbyte > PayloadHelper::encodeFloat(jfloat a0)
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_encodeFloat_909f9221], a0));
          }

          JArray< jbyte > PayloadHelper::encodeFloat(jfloat a0, const JArray< jbyte > & a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_encodeFloat_a555a4d0], a0, a1.this$, a2));
          }

          JArray< jbyte > PayloadHelper::encodeInt(jint a0)
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_encodeInt_b4292e98], a0));
          }

          JArray< jbyte > PayloadHelper::encodeInt(jint a0, const JArray< jbyte > & a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_encodeInt_1bd14047], a0, a1.this$, a2));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_PayloadHelper_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadHelper_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PayloadHelper_init_(t_PayloadHelper *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PayloadHelper_decodeFloat(PyTypeObject *type, PyObject *args);
          static PyObject *t_PayloadHelper_decodeInt(PyTypeObject *type, PyObject *args);
          static PyObject *t_PayloadHelper_encodeFloat(PyTypeObject *type, PyObject *args);
          static PyObject *t_PayloadHelper_encodeInt(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_PayloadHelper__methods_[] = {
            DECLARE_METHOD(t_PayloadHelper, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadHelper, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadHelper, decodeFloat, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PayloadHelper, decodeInt, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PayloadHelper, encodeFloat, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PayloadHelper, encodeInt, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PayloadHelper, t_PayloadHelper, ::java::lang::Object, PayloadHelper, t_PayloadHelper_init_, 0, 0, 0, 0, 0);

          void t_PayloadHelper::install(PyObject *module)
          {
            installType(&PY_TYPE(PayloadHelper), module, "PayloadHelper", 0);
          }

          void t_PayloadHelper::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PayloadHelper).tp_dict, "class_", make_descriptor(PayloadHelper::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PayloadHelper).tp_dict, "wrapfn_", make_descriptor(t_PayloadHelper::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PayloadHelper).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PayloadHelper_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PayloadHelper::initializeClass, 1)))
              return NULL;
            return t_PayloadHelper::wrap_Object(PayloadHelper(((t_PayloadHelper *) arg)->object.this$));
          }
          static PyObject *t_PayloadHelper_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PayloadHelper::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PayloadHelper_init_(t_PayloadHelper *self, PyObject *args, PyObject *kwds)
          {
            PayloadHelper object((jobject) NULL);

            INT_CALL(object = PayloadHelper());
            self->object = object;

            return 0;
          }

          static PyObject *t_PayloadHelper_decodeFloat(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                JArray< jbyte > a0((jobject) NULL);
                jfloat result;

                if (!parseArgs(args, "[B", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::payloads::PayloadHelper::decodeFloat(a0));
                  return PyFloat_FromDouble((double) result);
                }
              }
              break;
             case 2:
              {
                JArray< jbyte > a0((jobject) NULL);
                jint a1;
                jfloat result;

                if (!parseArgs(args, "[BI", &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::payloads::PayloadHelper::decodeFloat(a0, a1));
                  return PyFloat_FromDouble((double) result);
                }
              }
            }

            PyErr_SetArgsError(type, "decodeFloat", args);
            return NULL;
          }

          static PyObject *t_PayloadHelper_decodeInt(PyTypeObject *type, PyObject *args)
          {
            JArray< jbyte > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[BI", &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::payloads::PayloadHelper::decodeInt(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "decodeInt", args);
            return NULL;
          }

          static PyObject *t_PayloadHelper_encodeFloat(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jfloat a0;
                JArray< jbyte > result((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::payloads::PayloadHelper::encodeFloat(a0));
                  return result.wrap();
                }
              }
              break;
             case 3:
              {
                jfloat a0;
                JArray< jbyte > a1((jobject) NULL);
                jint a2;
                JArray< jbyte > result((jobject) NULL);

                if (!parseArgs(args, "F[BI", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::payloads::PayloadHelper::encodeFloat(a0, a1, a2));
                  return result.wrap();
                }
              }
            }

            PyErr_SetArgsError(type, "encodeFloat", args);
            return NULL;
          }

          static PyObject *t_PayloadHelper_encodeInt(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                JArray< jbyte > result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::payloads::PayloadHelper::encodeInt(a0));
                  return result.wrap();
                }
              }
              break;
             case 3:
              {
                jint a0;
                JArray< jbyte > a1((jobject) NULL);
                jint a2;
                JArray< jbyte > result((jobject) NULL);

                if (!parseArgs(args, "I[BI", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::payloads::PayloadHelper::encodeInt(a0, a1, a2));
                  return result.wrap();
                }
              }
            }

            PyErr_SetArgsError(type, "encodeInt", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/BytesRefHash$MaxBytesLengthExceededException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *BytesRefHash$MaxBytesLengthExceededException::class$ = NULL;
        jmethodID *BytesRefHash$MaxBytesLengthExceededException::mids$ = NULL;
        bool BytesRefHash$MaxBytesLengthExceededException::live$ = false;

        jclass BytesRefHash$MaxBytesLengthExceededException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/BytesRefHash$MaxBytesLengthExceededException");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_BytesRefHash$MaxBytesLengthExceededException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BytesRefHash$MaxBytesLengthExceededException_instance_(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_BytesRefHash$MaxBytesLengthExceededException__methods_[] = {
          DECLARE_METHOD(t_BytesRefHash$MaxBytesLengthExceededException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefHash$MaxBytesLengthExceededException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BytesRefHash$MaxBytesLengthExceededException, t_BytesRefHash$MaxBytesLengthExceededException, ::java::lang::RuntimeException, BytesRefHash$MaxBytesLengthExceededException, abstract_init, 0, 0, 0, 0, 0);

        void t_BytesRefHash$MaxBytesLengthExceededException::install(PyObject *module)
        {
          installType(&PY_TYPE(BytesRefHash$MaxBytesLengthExceededException), module, "BytesRefHash$MaxBytesLengthExceededException", 0);
        }

        void t_BytesRefHash$MaxBytesLengthExceededException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BytesRefHash$MaxBytesLengthExceededException).tp_dict, "class_", make_descriptor(BytesRefHash$MaxBytesLengthExceededException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BytesRefHash$MaxBytesLengthExceededException).tp_dict, "wrapfn_", make_descriptor(t_BytesRefHash$MaxBytesLengthExceededException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BytesRefHash$MaxBytesLengthExceededException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BytesRefHash$MaxBytesLengthExceededException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BytesRefHash$MaxBytesLengthExceededException::initializeClass, 1)))
            return NULL;
          return t_BytesRefHash$MaxBytesLengthExceededException::wrap_Object(BytesRefHash$MaxBytesLengthExceededException(((t_BytesRefHash$MaxBytesLengthExceededException *) arg)->object.this$));
        }
        static PyObject *t_BytesRefHash$MaxBytesLengthExceededException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BytesRefHash$MaxBytesLengthExceededException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/TermQueryBuilder.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *TermQueryBuilder::class$ = NULL;
            jmethodID *TermQueryBuilder::mids$ = NULL;
            bool TermQueryBuilder::live$ = false;

            jclass TermQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/TermQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TermQueryBuilder::TermQueryBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_TermQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TermQueryBuilder_init_(t_TermQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_TermQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_TermQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TermQueryBuilder, t_TermQueryBuilder, ::java::lang::Object, TermQueryBuilder, t_TermQueryBuilder_init_, 0, 0, 0, 0, 0);

            void t_TermQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(TermQueryBuilder), module, "TermQueryBuilder", 0);
            }

            void t_TermQueryBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TermQueryBuilder).tp_dict, "class_", make_descriptor(TermQueryBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TermQueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_TermQueryBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TermQueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TermQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TermQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_TermQueryBuilder::wrap_Object(TermQueryBuilder(((t_TermQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_TermQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TermQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TermQueryBuilder_init_(t_TermQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              TermQueryBuilder object((jobject) NULL);

              INT_CALL(object = TermQueryBuilder());
              self->object = object;

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/payloads/PayloadSpanUtil.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/index/IndexReaderContext.h"
#include "java/util/Collection.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {

          ::java::lang::Class *PayloadSpanUtil::class$ = NULL;
          jmethodID *PayloadSpanUtil::mids$ = NULL;
          bool PayloadSpanUtil::live$ = false;

          jclass PayloadSpanUtil::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/payloads/PayloadSpanUtil");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4df5686b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReaderContext;)V");
              mids$[mid_getPayloadsForQuery_3971ce9f] = env->getMethodID(cls, "getPayloadsForQuery", "(Lorg/apache/lucene/search/Query;)Ljava/util/Collection;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PayloadSpanUtil::PayloadSpanUtil(const ::org::apache::lucene::index::IndexReaderContext & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4df5686b, a0.this$)) {}

          ::java::util::Collection PayloadSpanUtil::getPayloadsForQuery(const ::org::apache::lucene::search::Query & a0) const
          {
            return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getPayloadsForQuery_3971ce9f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {
          static PyObject *t_PayloadSpanUtil_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadSpanUtil_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PayloadSpanUtil_init_(t_PayloadSpanUtil *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PayloadSpanUtil_getPayloadsForQuery(t_PayloadSpanUtil *self, PyObject *arg);

          static PyMethodDef t_PayloadSpanUtil__methods_[] = {
            DECLARE_METHOD(t_PayloadSpanUtil, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadSpanUtil, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadSpanUtil, getPayloadsForQuery, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PayloadSpanUtil, t_PayloadSpanUtil, ::java::lang::Object, PayloadSpanUtil, t_PayloadSpanUtil_init_, 0, 0, 0, 0, 0);

          void t_PayloadSpanUtil::install(PyObject *module)
          {
            installType(&PY_TYPE(PayloadSpanUtil), module, "PayloadSpanUtil", 0);
          }

          void t_PayloadSpanUtil::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PayloadSpanUtil).tp_dict, "class_", make_descriptor(PayloadSpanUtil::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PayloadSpanUtil).tp_dict, "wrapfn_", make_descriptor(t_PayloadSpanUtil::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PayloadSpanUtil).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PayloadSpanUtil_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PayloadSpanUtil::initializeClass, 1)))
              return NULL;
            return t_PayloadSpanUtil::wrap_Object(PayloadSpanUtil(((t_PayloadSpanUtil *) arg)->object.this$));
          }
          static PyObject *t_PayloadSpanUtil_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PayloadSpanUtil::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PayloadSpanUtil_init_(t_PayloadSpanUtil *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::IndexReaderContext a0((jobject) NULL);
            PayloadSpanUtil object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReaderContext::initializeClass, &a0))
            {
              INT_CALL(object = PayloadSpanUtil(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PayloadSpanUtil_getPayloadsForQuery(t_PayloadSpanUtil *self, PyObject *arg)
          {
            ::org::apache::lucene::search::Query a0((jobject) NULL);
            ::java::util::Collection result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.getPayloadsForQuery(a0));
              return ::java::util::t_Collection::wrap_Object(result, &::java::lang::PY_TYPE(Object));
            }

            PyErr_SetArgsError((PyObject *) self, "getPayloadsForQuery", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MultiTermQuery$TopTermsScoringBooleanQueryRewrite.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MultiTermQuery$TopTermsScoringBooleanQueryRewrite::class$ = NULL;
        jmethodID *MultiTermQuery$TopTermsScoringBooleanQueryRewrite::mids$ = NULL;
        bool MultiTermQuery$TopTermsScoringBooleanQueryRewrite::live$ = false;

        jclass MultiTermQuery$TopTermsScoringBooleanQueryRewrite::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MultiTermQuery$TopTermsScoringBooleanQueryRewrite");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_getMaxSize_54c6a179] = env->getMethodID(cls, "getMaxSize", "()I");
            mids$[mid_addClause_82a56efb] = env->getMethodID(cls, "addClause", "(Lorg/apache/lucene/search/BooleanQuery;Lorg/apache/lucene/index/Term;IFLorg/apache/lucene/index/TermContext;)V");
            mids$[mid_getTopLevelQuery_6f9339e7] = env->getMethodID(cls, "getTopLevelQuery", "()Lorg/apache/lucene/search/BooleanQuery;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiTermQuery$TopTermsScoringBooleanQueryRewrite::MultiTermQuery$TopTermsScoringBooleanQueryRewrite(jint a0) : ::org::apache::lucene::search::TopTermsRewrite(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite_of_(t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite *self, PyObject *args);
        static int t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite_init_(t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite_get__parameters_(t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite *self, void *data);
        static PyGetSetDef t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite__fields_[] = {
          DECLARE_GET_FIELD(t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite__methods_[] = {
          DECLARE_METHOD(t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiTermQuery$TopTermsScoringBooleanQueryRewrite, t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite, ::org::apache::lucene::search::TopTermsRewrite, MultiTermQuery$TopTermsScoringBooleanQueryRewrite, t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite_init_, 0, 0, t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite__fields_, 0, 0);
        PyObject *t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite::wrap_Object(const MultiTermQuery$TopTermsScoringBooleanQueryRewrite& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite *self = (t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite *self = (t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiTermQuery$TopTermsScoringBooleanQueryRewrite), module, "MultiTermQuery$TopTermsScoringBooleanQueryRewrite", 0);
        }

        void t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiTermQuery$TopTermsScoringBooleanQueryRewrite).tp_dict, "class_", make_descriptor(MultiTermQuery$TopTermsScoringBooleanQueryRewrite::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery$TopTermsScoringBooleanQueryRewrite).tp_dict, "wrapfn_", make_descriptor(t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery$TopTermsScoringBooleanQueryRewrite).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiTermQuery$TopTermsScoringBooleanQueryRewrite::initializeClass, 1)))
            return NULL;
          return t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite::wrap_Object(MultiTermQuery$TopTermsScoringBooleanQueryRewrite(((t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite *) arg)->object.this$));
        }
        static PyObject *t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiTermQuery$TopTermsScoringBooleanQueryRewrite::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite_of_(t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite_init_(t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          MultiTermQuery$TopTermsScoringBooleanQueryRewrite object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = MultiTermQuery$TopTermsScoringBooleanQueryRewrite(a0));
            self->object = object;
            self->parameters[0] = &::org::apache::lucene::search::PY_TYPE(BooleanQuery);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
        static PyObject *t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite_get__parameters_(t_MultiTermQuery$TopTermsScoringBooleanQueryRewrite *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/collation/CollationAttributeFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/text/Collator.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/collation/tokenattributes/CollatedTermAttributeImpl.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace collation {

        ::java::lang::Class *CollationAttributeFactory::class$ = NULL;
        jmethodID *CollationAttributeFactory::mids$ = NULL;
        bool CollationAttributeFactory::live$ = false;

        jclass CollationAttributeFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/collation/CollationAttributeFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c5e10a9c] = env->getMethodID(cls, "<init>", "(Ljava/text/Collator;)V");
            mids$[mid_init$_f8cad218] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/text/Collator;)V");
            mids$[mid_createInstance_4f834723] = env->getMethodID(cls, "createInstance", "()Lorg/apache/lucene/collation/tokenattributes/CollatedTermAttributeImpl;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CollationAttributeFactory::CollationAttributeFactory(const ::java::text::Collator & a0) : ::org::apache::lucene::util::AttributeFactory$StaticImplementationAttributeFactory(env->newObject(initializeClass, &mids$, mid_init$_c5e10a9c, a0.this$)) {}

        CollationAttributeFactory::CollationAttributeFactory(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::text::Collator & a1) : ::org::apache::lucene::util::AttributeFactory$StaticImplementationAttributeFactory(env->newObject(initializeClass, &mids$, mid_init$_f8cad218, a0.this$, a1.this$)) {}

        ::org::apache::lucene::collation::tokenattributes::CollatedTermAttributeImpl CollationAttributeFactory::createInstance() const
        {
          return ::org::apache::lucene::collation::tokenattributes::CollatedTermAttributeImpl(env->callObjectMethod(this$, mids$[mid_createInstance_4f834723]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace collation {
        static PyObject *t_CollationAttributeFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CollationAttributeFactory_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CollationAttributeFactory_of_(t_CollationAttributeFactory *self, PyObject *args);
        static int t_CollationAttributeFactory_init_(t_CollationAttributeFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CollationAttributeFactory_createInstance(t_CollationAttributeFactory *self);
        static PyObject *t_CollationAttributeFactory_get__parameters_(t_CollationAttributeFactory *self, void *data);
        static PyGetSetDef t_CollationAttributeFactory__fields_[] = {
          DECLARE_GET_FIELD(t_CollationAttributeFactory, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CollationAttributeFactory__methods_[] = {
          DECLARE_METHOD(t_CollationAttributeFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollationAttributeFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollationAttributeFactory, of_, METH_VARARGS),
          DECLARE_METHOD(t_CollationAttributeFactory, createInstance, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CollationAttributeFactory, t_CollationAttributeFactory, ::org::apache::lucene::util::AttributeFactory$StaticImplementationAttributeFactory, CollationAttributeFactory, t_CollationAttributeFactory_init_, 0, 0, t_CollationAttributeFactory__fields_, 0, 0);
        PyObject *t_CollationAttributeFactory::wrap_Object(const CollationAttributeFactory& object, PyTypeObject *p0)
        {
          PyObject *obj = t_CollationAttributeFactory::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_CollationAttributeFactory *self = (t_CollationAttributeFactory *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_CollationAttributeFactory::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_CollationAttributeFactory::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_CollationAttributeFactory *self = (t_CollationAttributeFactory *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_CollationAttributeFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(CollationAttributeFactory), module, "CollationAttributeFactory", 0);
        }

        void t_CollationAttributeFactory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CollationAttributeFactory).tp_dict, "class_", make_descriptor(CollationAttributeFactory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CollationAttributeFactory).tp_dict, "wrapfn_", make_descriptor(t_CollationAttributeFactory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CollationAttributeFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CollationAttributeFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CollationAttributeFactory::initializeClass, 1)))
            return NULL;
          return t_CollationAttributeFactory::wrap_Object(CollationAttributeFactory(((t_CollationAttributeFactory *) arg)->object.this$));
        }
        static PyObject *t_CollationAttributeFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CollationAttributeFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CollationAttributeFactory_of_(t_CollationAttributeFactory *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_CollationAttributeFactory_init_(t_CollationAttributeFactory *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::text::Collator a0((jobject) NULL);
              CollationAttributeFactory object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::text::Collator::initializeClass, &a0))
              {
                INT_CALL(object = CollationAttributeFactory(a0));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::collation::tokenattributes::PY_TYPE(CollatedTermAttributeImpl);
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
              ::java::text::Collator a1((jobject) NULL);
              CollationAttributeFactory object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::text::Collator::initializeClass, &a0, &a1))
              {
                INT_CALL(object = CollationAttributeFactory(a0, a1));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::collation::tokenattributes::PY_TYPE(CollatedTermAttributeImpl);
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CollationAttributeFactory_createInstance(t_CollationAttributeFactory *self)
        {
          ::org::apache::lucene::collation::tokenattributes::CollatedTermAttributeImpl result((jobject) NULL);
          OBJ_CALL(result = self->object.createInstance());
          return ::org::apache::lucene::collation::tokenattributes::t_CollatedTermAttributeImpl::wrap_Object(result);
        }
        static PyObject *t_CollationAttributeFactory_get__parameters_(t_CollationAttributeFactory *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/GrowableByteArrayDataOutput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *GrowableByteArrayDataOutput::class$ = NULL;
        jmethodID *GrowableByteArrayDataOutput::mids$ = NULL;
        jfieldID *GrowableByteArrayDataOutput::fids$ = NULL;
        bool GrowableByteArrayDataOutput::live$ = false;

        jclass GrowableByteArrayDataOutput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/GrowableByteArrayDataOutput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_writeByte_b2271687] = env->getMethodID(cls, "writeByte", "(B)V");
            mids$[mid_writeBytes_86f4435f] = env->getMethodID(cls, "writeBytes", "([BII)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_bytes] = env->getFieldID(cls, "bytes", "[B");
            fids$[fid_length] = env->getFieldID(cls, "length", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        GrowableByteArrayDataOutput::GrowableByteArrayDataOutput(jint a0) : ::org::apache::lucene::store::DataOutput(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        void GrowableByteArrayDataOutput::writeByte(jbyte a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeByte_b2271687], a0);
        }

        void GrowableByteArrayDataOutput::writeBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_writeBytes_86f4435f], a0.this$, a1, a2);
        }

        JArray< jbyte > GrowableByteArrayDataOutput::_get_bytes() const
        {
          return JArray< jbyte >(env->getObjectField(this$, fids$[fid_bytes]));
        }

        void GrowableByteArrayDataOutput::_set_bytes(const JArray< jbyte > & a0) const
        {
          env->setObjectField(this$, fids$[fid_bytes], a0.this$);
        }

        jint GrowableByteArrayDataOutput::_get_length() const
        {
          return env->getIntField(this$, fids$[fid_length]);
        }

        void GrowableByteArrayDataOutput::_set_length(jint a0) const
        {
          env->setIntField(this$, fids$[fid_length], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_GrowableByteArrayDataOutput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_GrowableByteArrayDataOutput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_GrowableByteArrayDataOutput_init_(t_GrowableByteArrayDataOutput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_GrowableByteArrayDataOutput_writeByte(t_GrowableByteArrayDataOutput *self, PyObject *args);
        static PyObject *t_GrowableByteArrayDataOutput_writeBytes(t_GrowableByteArrayDataOutput *self, PyObject *args);
        static PyObject *t_GrowableByteArrayDataOutput_get__bytes(t_GrowableByteArrayDataOutput *self, void *data);
        static int t_GrowableByteArrayDataOutput_set__bytes(t_GrowableByteArrayDataOutput *self, PyObject *arg, void *data);
        static PyObject *t_GrowableByteArrayDataOutput_get__length(t_GrowableByteArrayDataOutput *self, void *data);
        static int t_GrowableByteArrayDataOutput_set__length(t_GrowableByteArrayDataOutput *self, PyObject *arg, void *data);

        static PyGetSetDef t_GrowableByteArrayDataOutput__fields_[] = {
          DECLARE_GETSET_FIELD(t_GrowableByteArrayDataOutput, bytes),
          DECLARE_GETSET_FIELD(t_GrowableByteArrayDataOutput, length),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_GrowableByteArrayDataOutput__methods_[] = {
          DECLARE_METHOD(t_GrowableByteArrayDataOutput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_GrowableByteArrayDataOutput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_GrowableByteArrayDataOutput, writeByte, METH_VARARGS),
          DECLARE_METHOD(t_GrowableByteArrayDataOutput, writeBytes, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(GrowableByteArrayDataOutput, t_GrowableByteArrayDataOutput, ::org::apache::lucene::store::DataOutput, GrowableByteArrayDataOutput, t_GrowableByteArrayDataOutput_init_, 0, 0, t_GrowableByteArrayDataOutput__fields_, 0, 0);

        void t_GrowableByteArrayDataOutput::install(PyObject *module)
        {
          installType(&PY_TYPE(GrowableByteArrayDataOutput), module, "GrowableByteArrayDataOutput", 0);
        }

        void t_GrowableByteArrayDataOutput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(GrowableByteArrayDataOutput).tp_dict, "class_", make_descriptor(GrowableByteArrayDataOutput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(GrowableByteArrayDataOutput).tp_dict, "wrapfn_", make_descriptor(t_GrowableByteArrayDataOutput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(GrowableByteArrayDataOutput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_GrowableByteArrayDataOutput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, GrowableByteArrayDataOutput::initializeClass, 1)))
            return NULL;
          return t_GrowableByteArrayDataOutput::wrap_Object(GrowableByteArrayDataOutput(((t_GrowableByteArrayDataOutput *) arg)->object.this$));
        }
        static PyObject *t_GrowableByteArrayDataOutput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, GrowableByteArrayDataOutput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_GrowableByteArrayDataOutput_init_(t_GrowableByteArrayDataOutput *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          GrowableByteArrayDataOutput object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = GrowableByteArrayDataOutput(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_GrowableByteArrayDataOutput_writeByte(t_GrowableByteArrayDataOutput *self, PyObject *args)
        {
          jbyte a0;

          if (!parseArgs(args, "B", &a0))
          {
            OBJ_CALL(self->object.writeByte(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(GrowableByteArrayDataOutput), (PyObject *) self, "writeByte", args, 2);
        }

        static PyObject *t_GrowableByteArrayDataOutput_writeBytes(t_GrowableByteArrayDataOutput *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.writeBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(GrowableByteArrayDataOutput), (PyObject *) self, "writeBytes", args, 2);
        }

        static PyObject *t_GrowableByteArrayDataOutput_get__bytes(t_GrowableByteArrayDataOutput *self, void *data)
        {
          JArray< jbyte > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_bytes());
          return value.wrap();
        }
        static int t_GrowableByteArrayDataOutput_set__bytes(t_GrowableByteArrayDataOutput *self, PyObject *arg, void *data)
        {
          JArray< jbyte > value((jobject) NULL);
          if (!parseArg(arg, "[B", &value))
          {
            INT_CALL(self->object._set_bytes(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "bytes", arg);
          return -1;
        }

        static PyObject *t_GrowableByteArrayDataOutput_get__length(t_GrowableByteArrayDataOutput *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_length());
          return PyInt_FromLong((long) value);
        }
        static int t_GrowableByteArrayDataOutput_set__length(t_GrowableByteArrayDataOutput *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_length(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "length", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/SingleFragListBuilder.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList.h"
#include "org/apache/lucene/search/vectorhighlight/FragListBuilder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *SingleFragListBuilder::class$ = NULL;
          jmethodID *SingleFragListBuilder::mids$ = NULL;
          bool SingleFragListBuilder::live$ = false;

          jclass SingleFragListBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/SingleFragListBuilder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_createFieldFragList_f54fd6ce] = env->getMethodID(cls, "createFieldFragList", "(Lorg/apache/lucene/search/vectorhighlight/FieldPhraseList;I)Lorg/apache/lucene/search/vectorhighlight/FieldFragList;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SingleFragListBuilder::SingleFragListBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::vectorhighlight::FieldFragList SingleFragListBuilder::createFieldFragList(const ::org::apache::lucene::search::vectorhighlight::FieldPhraseList & a0, jint a1) const
          {
            return ::org::apache::lucene::search::vectorhighlight::FieldFragList(env->callObjectMethod(this$, mids$[mid_createFieldFragList_f54fd6ce], a0.this$, a1));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_SingleFragListBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SingleFragListBuilder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SingleFragListBuilder_init_(t_SingleFragListBuilder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SingleFragListBuilder_createFieldFragList(t_SingleFragListBuilder *self, PyObject *args);

          static PyMethodDef t_SingleFragListBuilder__methods_[] = {
            DECLARE_METHOD(t_SingleFragListBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SingleFragListBuilder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SingleFragListBuilder, createFieldFragList, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SingleFragListBuilder, t_SingleFragListBuilder, ::java::lang::Object, SingleFragListBuilder, t_SingleFragListBuilder_init_, 0, 0, 0, 0, 0);

          void t_SingleFragListBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(SingleFragListBuilder), module, "SingleFragListBuilder", 0);
          }

          void t_SingleFragListBuilder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SingleFragListBuilder).tp_dict, "class_", make_descriptor(SingleFragListBuilder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SingleFragListBuilder).tp_dict, "wrapfn_", make_descriptor(t_SingleFragListBuilder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SingleFragListBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SingleFragListBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SingleFragListBuilder::initializeClass, 1)))
              return NULL;
            return t_SingleFragListBuilder::wrap_Object(SingleFragListBuilder(((t_SingleFragListBuilder *) arg)->object.this$));
          }
          static PyObject *t_SingleFragListBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SingleFragListBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SingleFragListBuilder_init_(t_SingleFragListBuilder *self, PyObject *args, PyObject *kwds)
          {
            SingleFragListBuilder object((jobject) NULL);

            INT_CALL(object = SingleFragListBuilder());
            self->object = object;

            return 0;
          }

          static PyObject *t_SingleFragListBuilder_createFieldFragList(t_SingleFragListBuilder *self, PyObject *args)
          {
            ::org::apache::lucene::search::vectorhighlight::FieldPhraseList a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::search::vectorhighlight::FieldFragList result((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::search::vectorhighlight::FieldPhraseList::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.createFieldFragList(a0, a1));
              return ::org::apache::lucene::search::vectorhighlight::t_FieldFragList::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "createFieldFragList", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cz/CzechAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cz {

          ::java::lang::Class *CzechAnalyzer::class$ = NULL;
          jmethodID *CzechAnalyzer::mids$ = NULL;
          bool CzechAnalyzer::live$ = false;
          ::java::lang::String *CzechAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass CzechAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cz/CzechAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CzechAnalyzer::CzechAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          CzechAnalyzer::CzechAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          CzechAnalyzer::CzechAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet CzechAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cz {
          static PyObject *t_CzechAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CzechAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CzechAnalyzer_init_(t_CzechAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CzechAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_CzechAnalyzer_get__defaultStopSet(t_CzechAnalyzer *self, void *data);
          static PyGetSetDef t_CzechAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_CzechAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CzechAnalyzer__methods_[] = {
            DECLARE_METHOD(t_CzechAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CzechAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CzechAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CzechAnalyzer, t_CzechAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, CzechAnalyzer, t_CzechAnalyzer_init_, 0, 0, t_CzechAnalyzer__fields_, 0, 0);

          void t_CzechAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(CzechAnalyzer), module, "CzechAnalyzer", 0);
          }

          void t_CzechAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CzechAnalyzer).tp_dict, "class_", make_descriptor(CzechAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CzechAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_CzechAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CzechAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CzechAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(CzechAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*CzechAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_CzechAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CzechAnalyzer::initializeClass, 1)))
              return NULL;
            return t_CzechAnalyzer::wrap_Object(CzechAnalyzer(((t_CzechAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_CzechAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CzechAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CzechAnalyzer_init_(t_CzechAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                CzechAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = CzechAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                CzechAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = CzechAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                CzechAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = CzechAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CzechAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::cz::CzechAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_CzechAnalyzer_get__defaultStopSet(t_CzechAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/analyzing/AnalyzingQueryParser.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace analyzing {

          ::java::lang::Class *AnalyzingQueryParser::class$ = NULL;
          jmethodID *AnalyzingQueryParser::mids$ = NULL;
          bool AnalyzingQueryParser::live$ = false;

          jclass AnalyzingQueryParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/analyzing/AnalyzingQueryParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_504c192d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_getFuzzyQuery_45995161] = env->getMethodID(cls, "getFuzzyQuery", "(Ljava/lang/String;Ljava/lang/String;F)Lorg/apache/lucene/search/Query;");
              mids$[mid_getWildcardQuery_38d6e77e] = env->getMethodID(cls, "getWildcardQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_getPrefixQuery_38d6e77e] = env->getMethodID(cls, "getPrefixQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_analyzeSingleChunk_af6d27e3] = env->getMethodID(cls, "analyzeSingleChunk", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AnalyzingQueryParser::AnalyzingQueryParser(const ::org::apache::lucene::util::Version & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer & a2) : ::org::apache::lucene::queryparser::classic::QueryParser(env->newObject(initializeClass, &mids$, mid_init$_504c192d, a0.this$, a1.this$, a2.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace analyzing {
          static PyObject *t_AnalyzingQueryParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AnalyzingQueryParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AnalyzingQueryParser_init_(t_AnalyzingQueryParser *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_AnalyzingQueryParser__methods_[] = {
            DECLARE_METHOD(t_AnalyzingQueryParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AnalyzingQueryParser, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AnalyzingQueryParser, t_AnalyzingQueryParser, ::org::apache::lucene::queryparser::classic::QueryParser, AnalyzingQueryParser, t_AnalyzingQueryParser_init_, 0, 0, 0, 0, 0);

          void t_AnalyzingQueryParser::install(PyObject *module)
          {
            installType(&PY_TYPE(AnalyzingQueryParser), module, "AnalyzingQueryParser", 0);
          }

          void t_AnalyzingQueryParser::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AnalyzingQueryParser).tp_dict, "class_", make_descriptor(AnalyzingQueryParser::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AnalyzingQueryParser).tp_dict, "wrapfn_", make_descriptor(t_AnalyzingQueryParser::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AnalyzingQueryParser).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AnalyzingQueryParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AnalyzingQueryParser::initializeClass, 1)))
              return NULL;
            return t_AnalyzingQueryParser::wrap_Object(AnalyzingQueryParser(((t_AnalyzingQueryParser *) arg)->object.this$));
          }
          static PyObject *t_AnalyzingQueryParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AnalyzingQueryParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AnalyzingQueryParser_init_(t_AnalyzingQueryParser *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
            AnalyzingQueryParser object((jobject) NULL);

            if (!parseArgs(args, "Ksk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
            {
              INT_CALL(object = AnalyzingQueryParser(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldComparator$DocComparator.h"
#include "java/lang/Integer.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldComparator$DocComparator::class$ = NULL;
        jmethodID *FieldComparator$DocComparator::mids$ = NULL;
        bool FieldComparator$DocComparator::live$ = false;

        jclass FieldComparator$DocComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldComparator$DocComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
            mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
            mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
            mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");
            mids$[mid_setBottom_39c7bd3c] = env->getMethodID(cls, "setBottom", "(I)V");
            mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_setTopValue_af7b73a4] = env->getMethodID(cls, "setTopValue", "(Ljava/lang/Integer;)V");
            mids$[mid_value_7266dabb] = env->getMethodID(cls, "value", "(I)Ljava/lang/Integer;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint FieldComparator$DocComparator::compare(jint a0, jint a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compare_d8d154b9], a0, a1);
        }

        jint FieldComparator$DocComparator::compareBottom(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareBottom_39c7bd23], a0);
        }

        jint FieldComparator$DocComparator::compareTop(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTop_39c7bd23], a0);
        }

        void FieldComparator$DocComparator::copy(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_d8d154a6], a0, a1);
        }

        void FieldComparator$DocComparator::setBottom(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBottom_39c7bd3c], a0);
        }

        ::org::apache::lucene::search::FieldComparator FieldComparator$DocComparator::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_setNextReader_6329aed7], a0.this$));
        }

        void FieldComparator$DocComparator::setTopValue(const ::java::lang::Integer & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTopValue_af7b73a4], a0.this$);
        }

        ::java::lang::Integer FieldComparator$DocComparator::value(jint a0) const
        {
          return ::java::lang::Integer(env->callObjectMethod(this$, mids$[mid_value_7266dabb], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldComparator$DocComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$DocComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$DocComparator_of_(t_FieldComparator$DocComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DocComparator_compare(t_FieldComparator$DocComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DocComparator_compareBottom(t_FieldComparator$DocComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DocComparator_compareTop(t_FieldComparator$DocComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DocComparator_copy(t_FieldComparator$DocComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DocComparator_setBottom(t_FieldComparator$DocComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DocComparator_setNextReader(t_FieldComparator$DocComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DocComparator_setTopValue(t_FieldComparator$DocComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DocComparator_value(t_FieldComparator$DocComparator *self, PyObject *args);
        static int t_FieldComparator$DocComparator_set__bottom(t_FieldComparator$DocComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$DocComparator_set__nextReader(t_FieldComparator$DocComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$DocComparator_set__topValue(t_FieldComparator$DocComparator *self, PyObject *arg, void *data);
        static PyObject *t_FieldComparator$DocComparator_get__parameters_(t_FieldComparator$DocComparator *self, void *data);
        static PyGetSetDef t_FieldComparator$DocComparator__fields_[] = {
          DECLARE_SET_FIELD(t_FieldComparator$DocComparator, bottom),
          DECLARE_SET_FIELD(t_FieldComparator$DocComparator, nextReader),
          DECLARE_SET_FIELD(t_FieldComparator$DocComparator, topValue),
          DECLARE_GET_FIELD(t_FieldComparator$DocComparator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldComparator$DocComparator__methods_[] = {
          DECLARE_METHOD(t_FieldComparator$DocComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$DocComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$DocComparator, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DocComparator, compare, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DocComparator, compareBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DocComparator, compareTop, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DocComparator, copy, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DocComparator, setBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DocComparator, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DocComparator, setTopValue, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DocComparator, value, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldComparator$DocComparator, t_FieldComparator$DocComparator, ::org::apache::lucene::search::FieldComparator, FieldComparator$DocComparator, abstract_init, 0, 0, t_FieldComparator$DocComparator__fields_, 0, 0);
        PyObject *t_FieldComparator$DocComparator::wrap_Object(const FieldComparator$DocComparator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$DocComparator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$DocComparator *self = (t_FieldComparator$DocComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldComparator$DocComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$DocComparator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$DocComparator *self = (t_FieldComparator$DocComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldComparator$DocComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldComparator$DocComparator), module, "FieldComparator$DocComparator", 0);
        }

        void t_FieldComparator$DocComparator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldComparator$DocComparator).tp_dict, "class_", make_descriptor(FieldComparator$DocComparator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldComparator$DocComparator).tp_dict, "wrapfn_", make_descriptor(t_FieldComparator$DocComparator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldComparator$DocComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldComparator$DocComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldComparator$DocComparator::initializeClass, 1)))
            return NULL;
          return t_FieldComparator$DocComparator::wrap_Object(FieldComparator$DocComparator(((t_FieldComparator$DocComparator *) arg)->object.this$));
        }
        static PyObject *t_FieldComparator$DocComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldComparator$DocComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldComparator$DocComparator_of_(t_FieldComparator$DocComparator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_FieldComparator$DocComparator_compare(t_FieldComparator$DocComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$DocComparator), (PyObject *) self, "compare", args, 2);
        }

        static PyObject *t_FieldComparator$DocComparator_compareBottom(t_FieldComparator$DocComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareBottom(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$DocComparator), (PyObject *) self, "compareBottom", args, 2);
        }

        static PyObject *t_FieldComparator$DocComparator_compareTop(t_FieldComparator$DocComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareTop(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$DocComparator), (PyObject *) self, "compareTop", args, 2);
        }

        static PyObject *t_FieldComparator$DocComparator_copy(t_FieldComparator$DocComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.copy(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$DocComparator), (PyObject *) self, "copy", args, 2);
        }

        static PyObject *t_FieldComparator$DocComparator_setBottom(t_FieldComparator$DocComparator *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.setBottom(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$DocComparator), (PyObject *) self, "setBottom", args, 2);
        }

        static PyObject *t_FieldComparator$DocComparator_setNextReader(t_FieldComparator$DocComparator *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setNextReader(a0));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result, &::java::lang::PY_TYPE(Integer));
          }

          return callSuper(&PY_TYPE(FieldComparator$DocComparator), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_FieldComparator$DocComparator_setTopValue(t_FieldComparator$DocComparator *self, PyObject *args)
        {
          ::java::lang::Integer a0((jobject) NULL);

          if (!parseArgs(args, "O", &::java::lang::PY_TYPE(Integer), &a0))
          {
            OBJ_CALL(self->object.setTopValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$DocComparator), (PyObject *) self, "setTopValue", args, 2);
        }

        static PyObject *t_FieldComparator$DocComparator_value(t_FieldComparator$DocComparator *self, PyObject *args)
        {
          jint a0;
          ::java::lang::Integer result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.value(a0));
            return ::java::lang::t_Integer::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldComparator$DocComparator), (PyObject *) self, "value", args, 2);
        }
        static PyObject *t_FieldComparator$DocComparator_get__parameters_(t_FieldComparator$DocComparator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static int t_FieldComparator$DocComparator_set__bottom(t_FieldComparator$DocComparator *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setBottom(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bottom", arg);
          return -1;
        }

        static int t_FieldComparator$DocComparator_set__nextReader(t_FieldComparator$DocComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_FieldComparator$DocComparator_set__topValue(t_FieldComparator$DocComparator *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::Integer value((jobject) NULL);
            if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Integer), &value))
            {
              INT_CALL(self->object.setTopValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "topValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/BooleanSingleChildOptimizationQueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *BooleanSingleChildOptimizationQueryNodeProcessor::class$ = NULL;
              jmethodID *BooleanSingleChildOptimizationQueryNodeProcessor::mids$ = NULL;
              bool BooleanSingleChildOptimizationQueryNodeProcessor::live$ = false;

              jclass BooleanSingleChildOptimizationQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/BooleanSingleChildOptimizationQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              BooleanSingleChildOptimizationQueryNodeProcessor::BooleanSingleChildOptimizationQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_BooleanSingleChildOptimizationQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_BooleanSingleChildOptimizationQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_BooleanSingleChildOptimizationQueryNodeProcessor_init_(t_BooleanSingleChildOptimizationQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_BooleanSingleChildOptimizationQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_BooleanSingleChildOptimizationQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BooleanSingleChildOptimizationQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(BooleanSingleChildOptimizationQueryNodeProcessor, t_BooleanSingleChildOptimizationQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, BooleanSingleChildOptimizationQueryNodeProcessor, t_BooleanSingleChildOptimizationQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_BooleanSingleChildOptimizationQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(BooleanSingleChildOptimizationQueryNodeProcessor), module, "BooleanSingleChildOptimizationQueryNodeProcessor", 0);
              }

              void t_BooleanSingleChildOptimizationQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(BooleanSingleChildOptimizationQueryNodeProcessor).tp_dict, "class_", make_descriptor(BooleanSingleChildOptimizationQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(BooleanSingleChildOptimizationQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_BooleanSingleChildOptimizationQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(BooleanSingleChildOptimizationQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_BooleanSingleChildOptimizationQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, BooleanSingleChildOptimizationQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_BooleanSingleChildOptimizationQueryNodeProcessor::wrap_Object(BooleanSingleChildOptimizationQueryNodeProcessor(((t_BooleanSingleChildOptimizationQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_BooleanSingleChildOptimizationQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, BooleanSingleChildOptimizationQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_BooleanSingleChildOptimizationQueryNodeProcessor_init_(t_BooleanSingleChildOptimizationQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                BooleanSingleChildOptimizationQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = BooleanSingleChildOptimizationQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/PythonByteParser.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/Terms.h"
#include "java/lang/Throwable.h"
#include "org/apache/lucene/search/FieldCache$ByteParser.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {

        ::java::lang::Class *PythonByteParser::class$ = NULL;
        jmethodID *PythonByteParser::mids$ = NULL;
        bool PythonByteParser::live$ = false;

        jclass PythonByteParser::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/search/PythonByteParser");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_parseByte_7bc03dd0] = env->getMethodID(cls, "parseByte", "(Lorg/apache/lucene/util/BytesRef;)B");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_termsEnum_fb3ac14e] = env->getMethodID(cls, "termsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonByteParser::PythonByteParser() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonByteParser::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonByteParser::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonByteParser::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        static PyObject *t_PythonByteParser_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonByteParser_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonByteParser_init_(t_PythonByteParser *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonByteParser_finalize(t_PythonByteParser *self);
        static PyObject *t_PythonByteParser_pythonExtension(t_PythonByteParser *self, PyObject *args);
        static jbyte JNICALL t_PythonByteParser_parseByte0(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonByteParser_pythonDecRef1(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonByteParser_termsEnum2(JNIEnv *jenv, jobject jobj, jobject a0);
        static PyObject *t_PythonByteParser_get__self(t_PythonByteParser *self, void *data);
        static PyGetSetDef t_PythonByteParser__fields_[] = {
          DECLARE_GET_FIELD(t_PythonByteParser, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonByteParser__methods_[] = {
          DECLARE_METHOD(t_PythonByteParser, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonByteParser, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonByteParser, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonByteParser, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonByteParser, t_PythonByteParser, ::java::lang::Object, PythonByteParser, t_PythonByteParser_init_, 0, 0, t_PythonByteParser__fields_, 0, 0);

        void t_PythonByteParser::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonByteParser), module, "PythonByteParser", 1);
        }

        void t_PythonByteParser::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonByteParser).tp_dict, "class_", make_descriptor(PythonByteParser::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonByteParser).tp_dict, "wrapfn_", make_descriptor(t_PythonByteParser::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonByteParser).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonByteParser::initializeClass);
          JNINativeMethod methods[] = {
            { "parseByte", "(Lorg/apache/lucene/util/BytesRef;)B", (void *) t_PythonByteParser_parseByte0 },
            { "pythonDecRef", "()V", (void *) t_PythonByteParser_pythonDecRef1 },
            { "termsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;", (void *) t_PythonByteParser_termsEnum2 },
          };
          env->registerNatives(cls, methods, 3);
        }

        static PyObject *t_PythonByteParser_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonByteParser::initializeClass, 1)))
            return NULL;
          return t_PythonByteParser::wrap_Object(PythonByteParser(((t_PythonByteParser *) arg)->object.this$));
        }
        static PyObject *t_PythonByteParser_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonByteParser::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonByteParser_init_(t_PythonByteParser *self, PyObject *args, PyObject *kwds)
        {
          PythonByteParser object((jobject) NULL);

          INT_CALL(object = PythonByteParser());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonByteParser_finalize(t_PythonByteParser *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonByteParser_pythonExtension(t_PythonByteParser *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jbyte JNICALL t_PythonByteParser_parseByte0(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonByteParser::mids$[PythonByteParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jbyte value;
          PyObject *o0 = ::org::apache::lucene::util::t_BytesRef::wrap_Object(::org::apache::lucene::util::BytesRef(a0));
          PyObject *result = PyObject_CallMethod(obj, "parseByte", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "B", &value))
          {
            throwTypeError("parseByte", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jbyte) 0;
        }

        static void JNICALL t_PythonByteParser_pythonDecRef1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonByteParser::mids$[PythonByteParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonByteParser::mids$[PythonByteParser::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static jobject JNICALL t_PythonByteParser_termsEnum2(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonByteParser::mids$[PythonByteParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::index::TermsEnum value((jobject) NULL);
          PyObject *o0 = ::org::apache::lucene::index::t_Terms::wrap_Object(::org::apache::lucene::index::Terms(a0));
          PyObject *result = PyObject_CallMethod(obj, "termsEnum", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &value))
          {
            throwTypeError("termsEnum", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static PyObject *t_PythonByteParser_get__self(t_PythonByteParser *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pt/PortugueseAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {

          ::java::lang::Class *PortugueseAnalyzer::class$ = NULL;
          jmethodID *PortugueseAnalyzer::mids$ = NULL;
          bool PortugueseAnalyzer::live$ = false;
          ::java::lang::String *PortugueseAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass PortugueseAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pt/PortugueseAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PortugueseAnalyzer::PortugueseAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          PortugueseAnalyzer::PortugueseAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          PortugueseAnalyzer::PortugueseAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet PortugueseAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {
          static PyObject *t_PortugueseAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PortugueseAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PortugueseAnalyzer_init_(t_PortugueseAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PortugueseAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_PortugueseAnalyzer_get__defaultStopSet(t_PortugueseAnalyzer *self, void *data);
          static PyGetSetDef t_PortugueseAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_PortugueseAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PortugueseAnalyzer__methods_[] = {
            DECLARE_METHOD(t_PortugueseAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PortugueseAnalyzer, t_PortugueseAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, PortugueseAnalyzer, t_PortugueseAnalyzer_init_, 0, 0, t_PortugueseAnalyzer__fields_, 0, 0);

          void t_PortugueseAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(PortugueseAnalyzer), module, "PortugueseAnalyzer", 0);
          }

          void t_PortugueseAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PortugueseAnalyzer).tp_dict, "class_", make_descriptor(PortugueseAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PortugueseAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_PortugueseAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PortugueseAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(PortugueseAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(PortugueseAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*PortugueseAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_PortugueseAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PortugueseAnalyzer::initializeClass, 1)))
              return NULL;
            return t_PortugueseAnalyzer::wrap_Object(PortugueseAnalyzer(((t_PortugueseAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_PortugueseAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PortugueseAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PortugueseAnalyzer_init_(t_PortugueseAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                PortugueseAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = PortugueseAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                PortugueseAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = PortugueseAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                PortugueseAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = PortugueseAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PortugueseAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::pt::PortugueseAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_PortugueseAnalyzer_get__defaultStopSet(t_PortugueseAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/CharsRef.h"
#include "java/util/Comparator.h"
#include "java/lang/Comparable.h"
#include "java/lang/Cloneable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *CharsRef::class$ = NULL;
        jmethodID *CharsRef::mids$ = NULL;
        jfieldID *CharsRef::fids$ = NULL;
        bool CharsRef::live$ = false;
        JArray< jchar > *CharsRef::EMPTY_CHARS = NULL;

        jclass CharsRef::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/CharsRef");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_init$_6f0bb356] = env->getMethodID(cls, "<init>", "([CII)V");
            mids$[mid_append_6f0bb356] = env->getMethodID(cls, "append", "([CII)V");
            mids$[mid_charAt_39c7bd29] = env->getMethodID(cls, "charAt", "(I)C");
            mids$[mid_charsEquals_ee7999ca] = env->getMethodID(cls, "charsEquals", "(Lorg/apache/lucene/util/CharsRef;)Z");
            mids$[mid_clone_399267bb] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/CharsRef;");
            mids$[mid_compareTo_ee7999d9] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/util/CharsRef;)I");
            mids$[mid_copyChars_ee7999c6] = env->getMethodID(cls, "copyChars", "(Lorg/apache/lucene/util/CharsRef;)V");
            mids$[mid_copyChars_6f0bb356] = env->getMethodID(cls, "copyChars", "([CII)V");
            mids$[mid_deepCopyOf_abd75df7] = env->getStaticMethodID(cls, "deepCopyOf", "(Lorg/apache/lucene/util/CharsRef;)Lorg/apache/lucene/util/CharsRef;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getUTF16SortedAsUTF8Comparator_5a7ff2fc] = env->getStaticMethodID(cls, "getUTF16SortedAsUTF8Comparator", "()Ljava/util/Comparator;");
            mids$[mid_grow_39c7bd3c] = env->getMethodID(cls, "grow", "(I)V");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_isValid_54c6a16a] = env->getMethodID(cls, "isValid", "()Z");
            mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");
            mids$[mid_subSequence_f88dfd57] = env->getMethodID(cls, "subSequence", "(II)Ljava/lang/CharSequence;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_chars] = env->getFieldID(cls, "chars", "[C");
            fids$[fid_length] = env->getFieldID(cls, "length", "I");
            fids$[fid_offset] = env->getFieldID(cls, "offset", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY_CHARS = new JArray< jchar >(env->getStaticObjectField(cls, "EMPTY_CHARS", "[C"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CharsRef::CharsRef() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        CharsRef::CharsRef(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        CharsRef::CharsRef(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        CharsRef::CharsRef(const JArray< jchar > & a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6f0bb356, a0.this$, a1, a2)) {}

        void CharsRef::append(const JArray< jchar > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_append_6f0bb356], a0.this$, a1, a2);
        }

        jchar CharsRef::charAt(jint a0) const
        {
          return env->callCharMethod(this$, mids$[mid_charAt_39c7bd29], a0);
        }

        jboolean CharsRef::charsEquals(const CharsRef & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_charsEquals_ee7999ca], a0.this$);
        }

        CharsRef CharsRef::clone() const
        {
          return CharsRef(env->callObjectMethod(this$, mids$[mid_clone_399267bb]));
        }

        jint CharsRef::compareTo(const CharsRef & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTo_ee7999d9], a0.this$);
        }

        void CharsRef::copyChars(const CharsRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyChars_ee7999c6], a0.this$);
        }

        void CharsRef::copyChars(const JArray< jchar > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_copyChars_6f0bb356], a0.this$, a1, a2);
        }

        CharsRef CharsRef::deepCopyOf(const CharsRef & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return CharsRef(env->callStaticObjectMethod(cls, mids$[mid_deepCopyOf_abd75df7], a0.this$));
        }

        jboolean CharsRef::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::java::util::Comparator CharsRef::getUTF16SortedAsUTF8Comparator()
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::Comparator(env->callStaticObjectMethod(cls, mids$[mid_getUTF16SortedAsUTF8Comparator_5a7ff2fc]));
        }

        void CharsRef::grow(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_grow_39c7bd3c], a0);
        }

        jint CharsRef::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean CharsRef::isValid() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isValid_54c6a16a]);
        }

        jint CharsRef::length() const
        {
          return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
        }

        ::java::lang::CharSequence CharsRef::subSequence(jint a0, jint a1) const
        {
          return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_subSequence_f88dfd57], a0, a1));
        }

        ::java::lang::String CharsRef::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        JArray< jchar > CharsRef::_get_chars() const
        {
          return JArray< jchar >(env->getObjectField(this$, fids$[fid_chars]));
        }

        void CharsRef::_set_chars(const JArray< jchar > & a0) const
        {
          env->setObjectField(this$, fids$[fid_chars], a0.this$);
        }

        jint CharsRef::_get_length() const
        {
          return env->getIntField(this$, fids$[fid_length]);
        }

        void CharsRef::_set_length(jint a0) const
        {
          env->setIntField(this$, fids$[fid_length], a0);
        }

        jint CharsRef::_get_offset() const
        {
          return env->getIntField(this$, fids$[fid_offset]);
        }

        void CharsRef::_set_offset(jint a0) const
        {
          env->setIntField(this$, fids$[fid_offset], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_CharsRef_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CharsRef_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CharsRef_init_(t_CharsRef *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CharsRef_append(t_CharsRef *self, PyObject *args);
        static PyObject *t_CharsRef_charAt(t_CharsRef *self, PyObject *arg);
        static PyObject *t_CharsRef_charsEquals(t_CharsRef *self, PyObject *arg);
        static PyObject *t_CharsRef_clone(t_CharsRef *self);
        static PyObject *t_CharsRef_compareTo(t_CharsRef *self, PyObject *arg);
        static PyObject *t_CharsRef_copyChars(t_CharsRef *self, PyObject *args);
        static PyObject *t_CharsRef_deepCopyOf(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CharsRef_equals(t_CharsRef *self, PyObject *args);
        static PyObject *t_CharsRef_getUTF16SortedAsUTF8Comparator(PyTypeObject *type);
        static PyObject *t_CharsRef_grow(t_CharsRef *self, PyObject *arg);
        static PyObject *t_CharsRef_hashCode(t_CharsRef *self, PyObject *args);
        static PyObject *t_CharsRef_isValid(t_CharsRef *self);
        static PyObject *t_CharsRef_length(t_CharsRef *self);
        static PyObject *t_CharsRef_subSequence(t_CharsRef *self, PyObject *args);
        static PyObject *t_CharsRef_toString(t_CharsRef *self, PyObject *args);
        static PyObject *t_CharsRef_get__chars(t_CharsRef *self, void *data);
        static int t_CharsRef_set__chars(t_CharsRef *self, PyObject *arg, void *data);
        static PyObject *t_CharsRef_get__length(t_CharsRef *self, void *data);
        static int t_CharsRef_set__length(t_CharsRef *self, PyObject *arg, void *data);
        static PyObject *t_CharsRef_get__offset(t_CharsRef *self, void *data);
        static int t_CharsRef_set__offset(t_CharsRef *self, PyObject *arg, void *data);

        static PyObject *t_CharsRef_get__uTF16SortedAsUTF8Comparator(t_CharsRef *self, void *data);
        static PyObject *t_CharsRef_get__valid(t_CharsRef *self, void *data);
        static PyGetSetDef t_CharsRef__fields_[] = {
          DECLARE_GETSET_FIELD(t_CharsRef, chars),
          DECLARE_GETSET_FIELD(t_CharsRef, length),
          DECLARE_GETSET_FIELD(t_CharsRef, offset),
          DECLARE_GET_FIELD(t_CharsRef, uTF16SortedAsUTF8Comparator),
          DECLARE_GET_FIELD(t_CharsRef, valid),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CharsRef__methods_[] = {
          DECLARE_METHOD(t_CharsRef, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CharsRef, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CharsRef, append, METH_VARARGS),
          DECLARE_METHOD(t_CharsRef, charAt, METH_O),
          DECLARE_METHOD(t_CharsRef, charsEquals, METH_O),
          DECLARE_METHOD(t_CharsRef, clone, METH_NOARGS),
          DECLARE_METHOD(t_CharsRef, compareTo, METH_O),
          DECLARE_METHOD(t_CharsRef, copyChars, METH_VARARGS),
          DECLARE_METHOD(t_CharsRef, deepCopyOf, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CharsRef, equals, METH_VARARGS),
          DECLARE_METHOD(t_CharsRef, getUTF16SortedAsUTF8Comparator, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_CharsRef, grow, METH_O),
          DECLARE_METHOD(t_CharsRef, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_CharsRef, isValid, METH_NOARGS),
          DECLARE_METHOD(t_CharsRef, length, METH_NOARGS),
          DECLARE_METHOD(t_CharsRef, subSequence, METH_VARARGS),
          DECLARE_METHOD(t_CharsRef, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CharsRef, t_CharsRef, ::java::lang::Object, CharsRef, t_CharsRef_init_, 0, 0, t_CharsRef__fields_, 0, 0);

        void t_CharsRef::install(PyObject *module)
        {
          installType(&PY_TYPE(CharsRef), module, "CharsRef", 0);
        }

        void t_CharsRef::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CharsRef).tp_dict, "class_", make_descriptor(CharsRef::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CharsRef).tp_dict, "wrapfn_", make_descriptor(t_CharsRef::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CharsRef).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(CharsRef::initializeClass);
          PyDict_SetItemString(PY_TYPE(CharsRef).tp_dict, "EMPTY_CHARS", make_descriptor(CharsRef::EMPTY_CHARS->wrap()));
        }

        static PyObject *t_CharsRef_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CharsRef::initializeClass, 1)))
            return NULL;
          return t_CharsRef::wrap_Object(CharsRef(((t_CharsRef *) arg)->object.this$));
        }
        static PyObject *t_CharsRef_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CharsRef::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CharsRef_init_(t_CharsRef *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              CharsRef object((jobject) NULL);

              INT_CALL(object = CharsRef());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              CharsRef object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = CharsRef(a0));
                self->object = object;
                break;
              }
            }
            {
              jint a0;
              CharsRef object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = CharsRef(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;
              CharsRef object((jobject) NULL);

              if (!parseArgs(args, "[CII", &a0, &a1, &a2))
              {
                INT_CALL(object = CharsRef(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CharsRef_append(t_CharsRef *self, PyObject *args)
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.append(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "append", args);
          return NULL;
        }

        static PyObject *t_CharsRef_charAt(t_CharsRef *self, PyObject *arg)
        {
          jint a0;
          jchar result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.charAt(a0));
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }

          PyErr_SetArgsError((PyObject *) self, "charAt", arg);
          return NULL;
        }

        static PyObject *t_CharsRef_charsEquals(t_CharsRef *self, PyObject *arg)
        {
          CharsRef a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", CharsRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.charsEquals(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "charsEquals", arg);
          return NULL;
        }

        static PyObject *t_CharsRef_clone(t_CharsRef *self)
        {
          CharsRef result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_CharsRef::wrap_Object(result);
        }

        static PyObject *t_CharsRef_compareTo(t_CharsRef *self, PyObject *arg)
        {
          CharsRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", CharsRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.compareTo(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
          return NULL;
        }

        static PyObject *t_CharsRef_copyChars(t_CharsRef *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              CharsRef a0((jobject) NULL);

              if (!parseArgs(args, "k", CharsRef::initializeClass, &a0))
              {
                OBJ_CALL(self->object.copyChars(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[CII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.copyChars(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "copyChars", args);
          return NULL;
        }

        static PyObject *t_CharsRef_deepCopyOf(PyTypeObject *type, PyObject *arg)
        {
          CharsRef a0((jobject) NULL);
          CharsRef result((jobject) NULL);

          if (!parseArg(arg, "k", CharsRef::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::CharsRef::deepCopyOf(a0));
            return t_CharsRef::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "deepCopyOf", arg);
          return NULL;
        }

        static PyObject *t_CharsRef_equals(t_CharsRef *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(CharsRef), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_CharsRef_getUTF16SortedAsUTF8Comparator(PyTypeObject *type)
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::util::CharsRef::getUTF16SortedAsUTF8Comparator());
          return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(CharsRef));
        }

        static PyObject *t_CharsRef_grow(t_CharsRef *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.grow(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "grow", arg);
          return NULL;
        }

        static PyObject *t_CharsRef_hashCode(t_CharsRef *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(CharsRef), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_CharsRef_isValid(t_CharsRef *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isValid());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_CharsRef_length(t_CharsRef *self)
        {
          jint result;
          OBJ_CALL(result = self->object.length());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_CharsRef_subSequence(t_CharsRef *self, PyObject *args)
        {
          jint a0;
          jint a1;
          ::java::lang::CharSequence result((jobject) NULL);

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.subSequence(a0, a1));
            return ::java::lang::t_CharSequence::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "subSequence", args);
          return NULL;
        }

        static PyObject *t_CharsRef_toString(t_CharsRef *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(CharsRef), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_CharsRef_get__chars(t_CharsRef *self, void *data)
        {
          JArray< jchar > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_chars());
          return value.wrap();
        }
        static int t_CharsRef_set__chars(t_CharsRef *self, PyObject *arg, void *data)
        {
          JArray< jchar > value((jobject) NULL);
          if (!parseArg(arg, "[C", &value))
          {
            INT_CALL(self->object._set_chars(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "chars", arg);
          return -1;
        }

        static PyObject *t_CharsRef_get__length(t_CharsRef *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_length());
          return PyInt_FromLong((long) value);
        }
        static int t_CharsRef_set__length(t_CharsRef *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_length(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "length", arg);
          return -1;
        }

        static PyObject *t_CharsRef_get__offset(t_CharsRef *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_offset());
          return PyInt_FromLong((long) value);
        }
        static int t_CharsRef_set__offset(t_CharsRef *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_offset(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "offset", arg);
          return -1;
        }

        static PyObject *t_CharsRef_get__uTF16SortedAsUTF8Comparator(t_CharsRef *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getUTF16SortedAsUTF8Comparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }

        static PyObject *t_CharsRef_get__valid(t_CharsRef *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isValid());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/th/ThaiTokenizer.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace th {

          ::java::lang::Class *ThaiTokenizer::class$ = NULL;
          jmethodID *ThaiTokenizer::mids$ = NULL;
          bool ThaiTokenizer::live$ = false;
          jboolean ThaiTokenizer::DBBI_AVAILABLE = (jboolean) 0;

          jclass ThaiTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/th/ThaiTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_5877b8f0] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_setNextSentence_d8d154a6] = env->getMethodID(cls, "setNextSentence", "(II)V");
              mids$[mid_incrementWord_54c6a16a] = env->getMethodID(cls, "incrementWord", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DBBI_AVAILABLE = env->getStaticBooleanField(cls, "DBBI_AVAILABLE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ThaiTokenizer::ThaiTokenizer(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::util::SegmentingTokenizerBase(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          ThaiTokenizer::ThaiTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::util::SegmentingTokenizerBase(env->newObject(initializeClass, &mids$, mid_init$_5877b8f0, a0.this$, a1.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace th {
          static PyObject *t_ThaiTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ThaiTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ThaiTokenizer_init_(t_ThaiTokenizer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_ThaiTokenizer__methods_[] = {
            DECLARE_METHOD(t_ThaiTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ThaiTokenizer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ThaiTokenizer, t_ThaiTokenizer, ::org::apache::lucene::analysis::util::SegmentingTokenizerBase, ThaiTokenizer, t_ThaiTokenizer_init_, 0, 0, 0, 0, 0);

          void t_ThaiTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(ThaiTokenizer), module, "ThaiTokenizer", 0);
          }

          void t_ThaiTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ThaiTokenizer).tp_dict, "class_", make_descriptor(ThaiTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ThaiTokenizer).tp_dict, "wrapfn_", make_descriptor(t_ThaiTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ThaiTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ThaiTokenizer::initializeClass);
            PyDict_SetItemString(PY_TYPE(ThaiTokenizer).tp_dict, "DBBI_AVAILABLE", make_descriptor(ThaiTokenizer::DBBI_AVAILABLE));
          }

          static PyObject *t_ThaiTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ThaiTokenizer::initializeClass, 1)))
              return NULL;
            return t_ThaiTokenizer::wrap_Object(ThaiTokenizer(((t_ThaiTokenizer *) arg)->object.this$));
          }
          static PyObject *t_ThaiTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ThaiTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ThaiTokenizer_init_(t_ThaiTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                ThaiTokenizer object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = ThaiTokenizer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                ThaiTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = ThaiTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/ConstantScoreAutoRewrite.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *ConstantScoreAutoRewrite::class$ = NULL;
        jmethodID *ConstantScoreAutoRewrite::mids$ = NULL;
        bool ConstantScoreAutoRewrite::live$ = false;
        jdouble ConstantScoreAutoRewrite::DEFAULT_DOC_COUNT_PERCENT = (jdouble) 0;
        jint ConstantScoreAutoRewrite::DEFAULT_TERM_COUNT_CUTOFF = (jint) 0;

        jclass ConstantScoreAutoRewrite::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/ConstantScoreAutoRewrite");

            mids$ = new jmethodID[max_mid];
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getDocCountPercent_54c6a174] = env->getMethodID(cls, "getDocCountPercent", "()D");
            mids$[mid_getTermCountCutoff_54c6a179] = env->getMethodID(cls, "getTermCountCutoff", "()I");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_925c5bbc] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/MultiTermQuery;)Lorg/apache/lucene/search/Query;");
            mids$[mid_setDocCountPercent_5d1c7645] = env->getMethodID(cls, "setDocCountPercent", "(D)V");
            mids$[mid_setTermCountCutoff_39c7bd3c] = env->getMethodID(cls, "setTermCountCutoff", "(I)V");
            mids$[mid_addClause_82a56efb] = env->getMethodID(cls, "addClause", "(Lorg/apache/lucene/search/BooleanQuery;Lorg/apache/lucene/index/Term;IFLorg/apache/lucene/index/TermContext;)V");
            mids$[mid_getTopLevelQuery_6f9339e7] = env->getMethodID(cls, "getTopLevelQuery", "()Lorg/apache/lucene/search/BooleanQuery;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_DOC_COUNT_PERCENT = env->getStaticDoubleField(cls, "DEFAULT_DOC_COUNT_PERCENT");
            DEFAULT_TERM_COUNT_CUTOFF = env->getStaticIntField(cls, "DEFAULT_TERM_COUNT_CUTOFF");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean ConstantScoreAutoRewrite::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jdouble ConstantScoreAutoRewrite::getDocCountPercent() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getDocCountPercent_54c6a174]);
        }

        jint ConstantScoreAutoRewrite::getTermCountCutoff() const
        {
          return env->callIntMethod(this$, mids$[mid_getTermCountCutoff_54c6a179]);
        }

        jint ConstantScoreAutoRewrite::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::org::apache::lucene::search::Query ConstantScoreAutoRewrite::rewrite(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::search::MultiTermQuery & a1) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_925c5bbc], a0.this$, a1.this$));
        }

        void ConstantScoreAutoRewrite::setDocCountPercent(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setDocCountPercent_5d1c7645], a0);
        }

        void ConstantScoreAutoRewrite::setTermCountCutoff(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTermCountCutoff_39c7bd3c], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_ConstantScoreAutoRewrite_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ConstantScoreAutoRewrite_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ConstantScoreAutoRewrite_of_(t_ConstantScoreAutoRewrite *self, PyObject *args);
        static PyObject *t_ConstantScoreAutoRewrite_equals(t_ConstantScoreAutoRewrite *self, PyObject *args);
        static PyObject *t_ConstantScoreAutoRewrite_getDocCountPercent(t_ConstantScoreAutoRewrite *self);
        static PyObject *t_ConstantScoreAutoRewrite_getTermCountCutoff(t_ConstantScoreAutoRewrite *self);
        static PyObject *t_ConstantScoreAutoRewrite_hashCode(t_ConstantScoreAutoRewrite *self, PyObject *args);
        static PyObject *t_ConstantScoreAutoRewrite_rewrite(t_ConstantScoreAutoRewrite *self, PyObject *args);
        static PyObject *t_ConstantScoreAutoRewrite_setDocCountPercent(t_ConstantScoreAutoRewrite *self, PyObject *arg);
        static PyObject *t_ConstantScoreAutoRewrite_setTermCountCutoff(t_ConstantScoreAutoRewrite *self, PyObject *arg);
        static PyObject *t_ConstantScoreAutoRewrite_get__docCountPercent(t_ConstantScoreAutoRewrite *self, void *data);
        static int t_ConstantScoreAutoRewrite_set__docCountPercent(t_ConstantScoreAutoRewrite *self, PyObject *arg, void *data);
        static PyObject *t_ConstantScoreAutoRewrite_get__termCountCutoff(t_ConstantScoreAutoRewrite *self, void *data);
        static int t_ConstantScoreAutoRewrite_set__termCountCutoff(t_ConstantScoreAutoRewrite *self, PyObject *arg, void *data);
        static PyObject *t_ConstantScoreAutoRewrite_get__parameters_(t_ConstantScoreAutoRewrite *self, void *data);
        static PyGetSetDef t_ConstantScoreAutoRewrite__fields_[] = {
          DECLARE_GETSET_FIELD(t_ConstantScoreAutoRewrite, docCountPercent),
          DECLARE_GETSET_FIELD(t_ConstantScoreAutoRewrite, termCountCutoff),
          DECLARE_GET_FIELD(t_ConstantScoreAutoRewrite, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ConstantScoreAutoRewrite__methods_[] = {
          DECLARE_METHOD(t_ConstantScoreAutoRewrite, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ConstantScoreAutoRewrite, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ConstantScoreAutoRewrite, of_, METH_VARARGS),
          DECLARE_METHOD(t_ConstantScoreAutoRewrite, equals, METH_VARARGS),
          DECLARE_METHOD(t_ConstantScoreAutoRewrite, getDocCountPercent, METH_NOARGS),
          DECLARE_METHOD(t_ConstantScoreAutoRewrite, getTermCountCutoff, METH_NOARGS),
          DECLARE_METHOD(t_ConstantScoreAutoRewrite, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_ConstantScoreAutoRewrite, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_ConstantScoreAutoRewrite, setDocCountPercent, METH_O),
          DECLARE_METHOD(t_ConstantScoreAutoRewrite, setTermCountCutoff, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ConstantScoreAutoRewrite, t_ConstantScoreAutoRewrite, ::org::apache::lucene::search::TermCollectingRewrite, ConstantScoreAutoRewrite, abstract_init, 0, 0, t_ConstantScoreAutoRewrite__fields_, 0, 0);
        PyObject *t_ConstantScoreAutoRewrite::wrap_Object(const ConstantScoreAutoRewrite& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ConstantScoreAutoRewrite::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ConstantScoreAutoRewrite *self = (t_ConstantScoreAutoRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_ConstantScoreAutoRewrite::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ConstantScoreAutoRewrite::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ConstantScoreAutoRewrite *self = (t_ConstantScoreAutoRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_ConstantScoreAutoRewrite::install(PyObject *module)
        {
          installType(&PY_TYPE(ConstantScoreAutoRewrite), module, "ConstantScoreAutoRewrite", 0);
        }

        void t_ConstantScoreAutoRewrite::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ConstantScoreAutoRewrite).tp_dict, "class_", make_descriptor(ConstantScoreAutoRewrite::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ConstantScoreAutoRewrite).tp_dict, "wrapfn_", make_descriptor(t_ConstantScoreAutoRewrite::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ConstantScoreAutoRewrite).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(ConstantScoreAutoRewrite::initializeClass);
          PyDict_SetItemString(PY_TYPE(ConstantScoreAutoRewrite).tp_dict, "DEFAULT_DOC_COUNT_PERCENT", make_descriptor(ConstantScoreAutoRewrite::DEFAULT_DOC_COUNT_PERCENT));
          PyDict_SetItemString(PY_TYPE(ConstantScoreAutoRewrite).tp_dict, "DEFAULT_TERM_COUNT_CUTOFF", make_descriptor(ConstantScoreAutoRewrite::DEFAULT_TERM_COUNT_CUTOFF));
        }

        static PyObject *t_ConstantScoreAutoRewrite_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ConstantScoreAutoRewrite::initializeClass, 1)))
            return NULL;
          return t_ConstantScoreAutoRewrite::wrap_Object(ConstantScoreAutoRewrite(((t_ConstantScoreAutoRewrite *) arg)->object.this$));
        }
        static PyObject *t_ConstantScoreAutoRewrite_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ConstantScoreAutoRewrite::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ConstantScoreAutoRewrite_of_(t_ConstantScoreAutoRewrite *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_ConstantScoreAutoRewrite_equals(t_ConstantScoreAutoRewrite *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(ConstantScoreAutoRewrite), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_ConstantScoreAutoRewrite_getDocCountPercent(t_ConstantScoreAutoRewrite *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getDocCountPercent());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_ConstantScoreAutoRewrite_getTermCountCutoff(t_ConstantScoreAutoRewrite *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getTermCountCutoff());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_ConstantScoreAutoRewrite_hashCode(t_ConstantScoreAutoRewrite *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(ConstantScoreAutoRewrite), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_ConstantScoreAutoRewrite_rewrite(t_ConstantScoreAutoRewrite *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::MultiTermQuery a1((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::MultiTermQuery::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.rewrite(a0, a1));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ConstantScoreAutoRewrite), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_ConstantScoreAutoRewrite_setDocCountPercent(t_ConstantScoreAutoRewrite *self, PyObject *arg)
        {
          jdouble a0;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(self->object.setDocCountPercent(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setDocCountPercent", arg);
          return NULL;
        }

        static PyObject *t_ConstantScoreAutoRewrite_setTermCountCutoff(t_ConstantScoreAutoRewrite *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setTermCountCutoff(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setTermCountCutoff", arg);
          return NULL;
        }
        static PyObject *t_ConstantScoreAutoRewrite_get__parameters_(t_ConstantScoreAutoRewrite *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_ConstantScoreAutoRewrite_get__docCountPercent(t_ConstantScoreAutoRewrite *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getDocCountPercent());
          return PyFloat_FromDouble((double) value);
        }
        static int t_ConstantScoreAutoRewrite_set__docCountPercent(t_ConstantScoreAutoRewrite *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setDocCountPercent(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "docCountPercent", arg);
          return -1;
        }

        static PyObject *t_ConstantScoreAutoRewrite_get__termCountCutoff(t_ConstantScoreAutoRewrite *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getTermCountCutoff());
          return PyInt_FromLong((long) value);
        }
        static int t_ConstantScoreAutoRewrite_set__termCountCutoff(t_ConstantScoreAutoRewrite *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setTermCountCutoff(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "termCountCutoff", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/MultiBoolFunction.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/queries/function/docvalues/BoolDocValues.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *MultiBoolFunction::class$ = NULL;
            jmethodID *MultiBoolFunction::mids$ = NULL;
            bool MultiBoolFunction::live$ = false;

            jclass MultiBoolFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/MultiBoolFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_1fde8fc3] = env->getMethodID(cls, "<init>", "(Ljava/util/List;)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_ea0ab6f1] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/docvalues/BoolDocValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
                mids$[mid_func_d2e34ba5] = env->getMethodID(cls, "func", "(I[Lorg/apache/lucene/queries/function/FunctionValues;)Z");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            MultiBoolFunction::MultiBoolFunction(const ::java::util::List & a0) : ::org::apache::lucene::queries::function::valuesource::BoolFunction(env->newObject(initializeClass, &mids$, mid_init$_1fde8fc3, a0.this$)) {}

            void MultiBoolFunction::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String MultiBoolFunction::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean MultiBoolFunction::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::docvalues::BoolDocValues MultiBoolFunction::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::docvalues::BoolDocValues(env->callObjectMethod(this$, mids$[mid_getValues_ea0ab6f1], a0.this$, a1.this$));
            }

            jint MultiBoolFunction::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_MultiBoolFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_MultiBoolFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_MultiBoolFunction_init_(t_MultiBoolFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_MultiBoolFunction_createWeight(t_MultiBoolFunction *self, PyObject *args);
            static PyObject *t_MultiBoolFunction_description(t_MultiBoolFunction *self, PyObject *args);
            static PyObject *t_MultiBoolFunction_equals(t_MultiBoolFunction *self, PyObject *args);
            static PyObject *t_MultiBoolFunction_getValues(t_MultiBoolFunction *self, PyObject *args);
            static PyObject *t_MultiBoolFunction_hashCode(t_MultiBoolFunction *self, PyObject *args);

            static PyMethodDef t_MultiBoolFunction__methods_[] = {
              DECLARE_METHOD(t_MultiBoolFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiBoolFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiBoolFunction, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_MultiBoolFunction, description, METH_VARARGS),
              DECLARE_METHOD(t_MultiBoolFunction, equals, METH_VARARGS),
              DECLARE_METHOD(t_MultiBoolFunction, getValues, METH_VARARGS),
              DECLARE_METHOD(t_MultiBoolFunction, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(MultiBoolFunction, t_MultiBoolFunction, ::org::apache::lucene::queries::function::valuesource::BoolFunction, MultiBoolFunction, t_MultiBoolFunction_init_, 0, 0, 0, 0, 0);

            void t_MultiBoolFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(MultiBoolFunction), module, "MultiBoolFunction", 0);
            }

            void t_MultiBoolFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(MultiBoolFunction).tp_dict, "class_", make_descriptor(MultiBoolFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(MultiBoolFunction).tp_dict, "wrapfn_", make_descriptor(t_MultiBoolFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(MultiBoolFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_MultiBoolFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, MultiBoolFunction::initializeClass, 1)))
                return NULL;
              return t_MultiBoolFunction::wrap_Object(MultiBoolFunction(((t_MultiBoolFunction *) arg)->object.this$));
            }
            static PyObject *t_MultiBoolFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, MultiBoolFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_MultiBoolFunction_init_(t_MultiBoolFunction *self, PyObject *args, PyObject *kwds)
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              MultiBoolFunction object((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
              {
                INT_CALL(object = MultiBoolFunction(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_MultiBoolFunction_createWeight(t_MultiBoolFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(MultiBoolFunction), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_MultiBoolFunction_description(t_MultiBoolFunction *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(MultiBoolFunction), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_MultiBoolFunction_equals(t_MultiBoolFunction *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(MultiBoolFunction), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_MultiBoolFunction_getValues(t_MultiBoolFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::docvalues::BoolDocValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::docvalues::t_BoolDocValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(MultiBoolFunction), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_MultiBoolFunction_hashCode(t_MultiBoolFunction *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(MultiBoolFunction), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/LMSimilarity.h"
#include "org/apache/lucene/search/similarities/LMSimilarity$CollectionModel.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *LMSimilarity::class$ = NULL;
          jmethodID *LMSimilarity::mids$ = NULL;
          bool LMSimilarity::live$ = false;

          jclass LMSimilarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/LMSimilarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_fb5c3f12] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/similarities/LMSimilarity$CollectionModel;)V");
              mids$[mid_getName_14c7b5c5] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_explain_347d95f8] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/Explanation;Lorg/apache/lucene/search/similarities/BasicStats;IFF)V");
              mids$[mid_fillBasicStats_c856a532] = env->getMethodID(cls, "fillBasicStats", "(Lorg/apache/lucene/search/similarities/BasicStats;Lorg/apache/lucene/search/CollectionStatistics;Lorg/apache/lucene/search/TermStatistics;)V");
              mids$[mid_newStats_5129800c] = env->getMethodID(cls, "newStats", "(Ljava/lang/String;F)Lorg/apache/lucene/search/similarities/BasicStats;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LMSimilarity::LMSimilarity() : ::org::apache::lucene::search::similarities::SimilarityBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          LMSimilarity::LMSimilarity(const ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel & a0) : ::org::apache::lucene::search::similarities::SimilarityBase(env->newObject(initializeClass, &mids$, mid_init$_fb5c3f12, a0.this$)) {}

          ::java::lang::String LMSimilarity::getName() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_14c7b5c5]));
          }

          ::java::lang::String LMSimilarity::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/similarities/LMSimilarity$DefaultCollectionModel.h"
#include "org/apache/lucene/search/similarities/LMSimilarity$LMStats.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_LMSimilarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LMSimilarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LMSimilarity_init_(t_LMSimilarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LMSimilarity_getName(t_LMSimilarity *self);
          static PyObject *t_LMSimilarity_toString(t_LMSimilarity *self, PyObject *args);
          static PyObject *t_LMSimilarity_get__name(t_LMSimilarity *self, void *data);
          static PyGetSetDef t_LMSimilarity__fields_[] = {
            DECLARE_GET_FIELD(t_LMSimilarity, name),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LMSimilarity__methods_[] = {
            DECLARE_METHOD(t_LMSimilarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMSimilarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMSimilarity, getName, METH_NOARGS),
            DECLARE_METHOD(t_LMSimilarity, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LMSimilarity, t_LMSimilarity, ::org::apache::lucene::search::similarities::SimilarityBase, LMSimilarity, t_LMSimilarity_init_, 0, 0, t_LMSimilarity__fields_, 0, 0);

          void t_LMSimilarity::install(PyObject *module)
          {
            installType(&PY_TYPE(LMSimilarity), module, "LMSimilarity", 0);
            PyDict_SetItemString(PY_TYPE(LMSimilarity).tp_dict, "DefaultCollectionModel", make_descriptor(&PY_TYPE(LMSimilarity$DefaultCollectionModel)));
            PyDict_SetItemString(PY_TYPE(LMSimilarity).tp_dict, "CollectionModel", make_descriptor(&PY_TYPE(LMSimilarity$CollectionModel)));
            PyDict_SetItemString(PY_TYPE(LMSimilarity).tp_dict, "LMStats", make_descriptor(&PY_TYPE(LMSimilarity$LMStats)));
          }

          void t_LMSimilarity::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LMSimilarity).tp_dict, "class_", make_descriptor(LMSimilarity::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LMSimilarity).tp_dict, "wrapfn_", make_descriptor(t_LMSimilarity::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LMSimilarity).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LMSimilarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LMSimilarity::initializeClass, 1)))
              return NULL;
            return t_LMSimilarity::wrap_Object(LMSimilarity(((t_LMSimilarity *) arg)->object.this$));
          }
          static PyObject *t_LMSimilarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LMSimilarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LMSimilarity_init_(t_LMSimilarity *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                LMSimilarity object((jobject) NULL);

                INT_CALL(object = LMSimilarity());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel a0((jobject) NULL);
                LMSimilarity object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel::initializeClass, &a0))
                {
                  INT_CALL(object = LMSimilarity(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LMSimilarity_getName(t_LMSimilarity *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getName());
            return j2p(result);
          }

          static PyObject *t_LMSimilarity_toString(t_LMSimilarity *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(LMSimilarity), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_LMSimilarity_get__name(t_LMSimilarity *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getName());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexWriterConfig.h"
#include "java/io/PrintStream.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "org/apache/lucene/index/IndexWriterConfig$OpenMode.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/Codec.h"
#include "org/apache/lucene/index/IndexWriter$IndexReaderWarmer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/MergePolicy.h"
#include "org/apache/lucene/search/similarities/Similarity.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/util/InfoStream.h"
#include "org/apache/lucene/index/MergeScheduler.h"
#include "org/apache/lucene/index/IndexDeletionPolicy.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexWriterConfig::class$ = NULL;
        jmethodID *IndexWriterConfig::mids$ = NULL;
        bool IndexWriterConfig::live$ = false;
        jboolean IndexWriterConfig::DEFAULT_CHECK_INTEGRITY_AT_MERGE = (jboolean) 0;
        jint IndexWriterConfig::DEFAULT_MAX_BUFFERED_DELETE_TERMS = (jint) 0;
        jint IndexWriterConfig::DEFAULT_MAX_BUFFERED_DOCS = (jint) 0;
        jint IndexWriterConfig::DEFAULT_MAX_THREAD_STATES = (jint) 0;
        jdouble IndexWriterConfig::DEFAULT_RAM_BUFFER_SIZE_MB = (jdouble) 0;
        jint IndexWriterConfig::DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB = (jint) 0;
        jboolean IndexWriterConfig::DEFAULT_READER_POOLING = (jboolean) 0;
        jint IndexWriterConfig::DEFAULT_READER_TERMS_INDEX_DIVISOR = (jint) 0;
        jint IndexWriterConfig::DEFAULT_TERM_INDEX_INTERVAL = (jint) 0;
        jboolean IndexWriterConfig::DEFAULT_USE_COMPOUND_FILE_SYSTEM = (jboolean) 0;
        jint IndexWriterConfig::DISABLE_AUTO_FLUSH = (jint) 0;
        jlong IndexWriterConfig::WRITE_LOCK_TIMEOUT = (jlong) 0;

        jclass IndexWriterConfig::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexWriterConfig");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_b2a1ba2f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/Analyzer;)V");
            mids$[mid_getAnalyzer_347f60a9] = env->getMethodID(cls, "getAnalyzer", "()Lorg/apache/lucene/analysis/Analyzer;");
            mids$[mid_getCodec_27f0a02b] = env->getMethodID(cls, "getCodec", "()Lorg/apache/lucene/codecs/Codec;");
            mids$[mid_getDefaultWriteLockTimeout_54c6a17a] = env->getStaticMethodID(cls, "getDefaultWriteLockTimeout", "()J");
            mids$[mid_getIndexCommit_09307276] = env->getMethodID(cls, "getIndexCommit", "()Lorg/apache/lucene/index/IndexCommit;");
            mids$[mid_getIndexDeletionPolicy_a18376c3] = env->getMethodID(cls, "getIndexDeletionPolicy", "()Lorg/apache/lucene/index/IndexDeletionPolicy;");
            mids$[mid_getInfoStream_1923150b] = env->getMethodID(cls, "getInfoStream", "()Lorg/apache/lucene/util/InfoStream;");
            mids$[mid_getMaxBufferedDeleteTerms_54c6a179] = env->getMethodID(cls, "getMaxBufferedDeleteTerms", "()I");
            mids$[mid_getMaxBufferedDocs_54c6a179] = env->getMethodID(cls, "getMaxBufferedDocs", "()I");
            mids$[mid_getMaxThreadStates_54c6a179] = env->getMethodID(cls, "getMaxThreadStates", "()I");
            mids$[mid_getMergePolicy_753f8dfd] = env->getMethodID(cls, "getMergePolicy", "()Lorg/apache/lucene/index/MergePolicy;");
            mids$[mid_getMergeScheduler_ff96d655] = env->getMethodID(cls, "getMergeScheduler", "()Lorg/apache/lucene/index/MergeScheduler;");
            mids$[mid_getMergedSegmentWarmer_b145c9d7] = env->getMethodID(cls, "getMergedSegmentWarmer", "()Lorg/apache/lucene/index/IndexWriter$IndexReaderWarmer;");
            mids$[mid_getOpenMode_4134b214] = env->getMethodID(cls, "getOpenMode", "()Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;");
            mids$[mid_getRAMBufferSizeMB_54c6a174] = env->getMethodID(cls, "getRAMBufferSizeMB", "()D");
            mids$[mid_getRAMPerThreadHardLimitMB_54c6a179] = env->getMethodID(cls, "getRAMPerThreadHardLimitMB", "()I");
            mids$[mid_getReaderPooling_54c6a16a] = env->getMethodID(cls, "getReaderPooling", "()Z");
            mids$[mid_getReaderTermsIndexDivisor_54c6a179] = env->getMethodID(cls, "getReaderTermsIndexDivisor", "()I");
            mids$[mid_getSimilarity_efcb1233] = env->getMethodID(cls, "getSimilarity", "()Lorg/apache/lucene/search/similarities/Similarity;");
            mids$[mid_getTermIndexInterval_54c6a179] = env->getMethodID(cls, "getTermIndexInterval", "()I");
            mids$[mid_getWriteLockTimeout_54c6a17a] = env->getMethodID(cls, "getWriteLockTimeout", "()J");
            mids$[mid_setCodec_c6322414] = env->getMethodID(cls, "setCodec", "(Lorg/apache/lucene/codecs/Codec;)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setDefaultWriteLockTimeout_0ee6df2f] = env->getStaticMethodID(cls, "setDefaultWriteLockTimeout", "(J)V");
            mids$[mid_setIndexCommit_ec04569d] = env->getMethodID(cls, "setIndexCommit", "(Lorg/apache/lucene/index/IndexCommit;)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setIndexDeletionPolicy_e3778c88] = env->getMethodID(cls, "setIndexDeletionPolicy", "(Lorg/apache/lucene/index/IndexDeletionPolicy;)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setInfoStream_46a28868] = env->getMethodID(cls, "setInfoStream", "(Lorg/apache/lucene/util/InfoStream;)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setInfoStream_915f97a5] = env->getMethodID(cls, "setInfoStream", "(Ljava/io/PrintStream;)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setMaxBufferedDeleteTerms_0a512c4a] = env->getMethodID(cls, "setMaxBufferedDeleteTerms", "(I)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setMaxBufferedDocs_0a512c4a] = env->getMethodID(cls, "setMaxBufferedDocs", "(I)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setMaxThreadStates_0a512c4a] = env->getMethodID(cls, "setMaxThreadStates", "(I)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setMergePolicy_35fd1692] = env->getMethodID(cls, "setMergePolicy", "(Lorg/apache/lucene/index/MergePolicy;)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setMergeScheduler_a7b4ba7a] = env->getMethodID(cls, "setMergeScheduler", "(Lorg/apache/lucene/index/MergeScheduler;)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setMergedSegmentWarmer_f60591d0] = env->getMethodID(cls, "setMergedSegmentWarmer", "(Lorg/apache/lucene/index/IndexWriter$IndexReaderWarmer;)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setOpenMode_ecf4c6f7] = env->getMethodID(cls, "setOpenMode", "(Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setRAMBufferSizeMB_f49ea4cb] = env->getMethodID(cls, "setRAMBufferSizeMB", "(D)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setRAMPerThreadHardLimitMB_0a512c4a] = env->getMethodID(cls, "setRAMPerThreadHardLimitMB", "(I)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setReaderPooling_53913b61] = env->getMethodID(cls, "setReaderPooling", "(Z)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setReaderTermsIndexDivisor_0a512c4a] = env->getMethodID(cls, "setReaderTermsIndexDivisor", "(I)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setSimilarity_842e4878] = env->getMethodID(cls, "setSimilarity", "(Lorg/apache/lucene/search/similarities/Similarity;)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setTermIndexInterval_0a512c4a] = env->getMethodID(cls, "setTermIndexInterval", "(I)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setUseCompoundFile_53913b61] = env->getMethodID(cls, "setUseCompoundFile", "(Z)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_setWriteLockTimeout_c56ab6f1] = env->getMethodID(cls, "setWriteLockTimeout", "(J)Lorg/apache/lucene/index/IndexWriterConfig;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_CHECK_INTEGRITY_AT_MERGE = env->getStaticBooleanField(cls, "DEFAULT_CHECK_INTEGRITY_AT_MERGE");
            DEFAULT_MAX_BUFFERED_DELETE_TERMS = env->getStaticIntField(cls, "DEFAULT_MAX_BUFFERED_DELETE_TERMS");
            DEFAULT_MAX_BUFFERED_DOCS = env->getStaticIntField(cls, "DEFAULT_MAX_BUFFERED_DOCS");
            DEFAULT_MAX_THREAD_STATES = env->getStaticIntField(cls, "DEFAULT_MAX_THREAD_STATES");
            DEFAULT_RAM_BUFFER_SIZE_MB = env->getStaticDoubleField(cls, "DEFAULT_RAM_BUFFER_SIZE_MB");
            DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB = env->getStaticIntField(cls, "DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB");
            DEFAULT_READER_POOLING = env->getStaticBooleanField(cls, "DEFAULT_READER_POOLING");
            DEFAULT_READER_TERMS_INDEX_DIVISOR = env->getStaticIntField(cls, "DEFAULT_READER_TERMS_INDEX_DIVISOR");
            DEFAULT_TERM_INDEX_INTERVAL = env->getStaticIntField(cls, "DEFAULT_TERM_INDEX_INTERVAL");
            DEFAULT_USE_COMPOUND_FILE_SYSTEM = env->getStaticBooleanField(cls, "DEFAULT_USE_COMPOUND_FILE_SYSTEM");
            DISABLE_AUTO_FLUSH = env->getStaticIntField(cls, "DISABLE_AUTO_FLUSH");
            WRITE_LOCK_TIMEOUT = env->getStaticLongField(cls, "WRITE_LOCK_TIMEOUT");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexWriterConfig::IndexWriterConfig(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::org::apache::lucene::index::LiveIndexWriterConfig(env->newObject(initializeClass, &mids$, mid_init$_b2a1ba2f, a0.this$, a1.this$)) {}

        ::org::apache::lucene::analysis::Analyzer IndexWriterConfig::getAnalyzer() const
        {
          return ::org::apache::lucene::analysis::Analyzer(env->callObjectMethod(this$, mids$[mid_getAnalyzer_347f60a9]));
        }

        ::org::apache::lucene::codecs::Codec IndexWriterConfig::getCodec() const
        {
          return ::org::apache::lucene::codecs::Codec(env->callObjectMethod(this$, mids$[mid_getCodec_27f0a02b]));
        }

        jlong IndexWriterConfig::getDefaultWriteLockTimeout()
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_getDefaultWriteLockTimeout_54c6a17a]);
        }

        ::org::apache::lucene::index::IndexCommit IndexWriterConfig::getIndexCommit() const
        {
          return ::org::apache::lucene::index::IndexCommit(env->callObjectMethod(this$, mids$[mid_getIndexCommit_09307276]));
        }

        ::org::apache::lucene::index::IndexDeletionPolicy IndexWriterConfig::getIndexDeletionPolicy() const
        {
          return ::org::apache::lucene::index::IndexDeletionPolicy(env->callObjectMethod(this$, mids$[mid_getIndexDeletionPolicy_a18376c3]));
        }

        ::org::apache::lucene::util::InfoStream IndexWriterConfig::getInfoStream() const
        {
          return ::org::apache::lucene::util::InfoStream(env->callObjectMethod(this$, mids$[mid_getInfoStream_1923150b]));
        }

        jint IndexWriterConfig::getMaxBufferedDeleteTerms() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxBufferedDeleteTerms_54c6a179]);
        }

        jint IndexWriterConfig::getMaxBufferedDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxBufferedDocs_54c6a179]);
        }

        jint IndexWriterConfig::getMaxThreadStates() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxThreadStates_54c6a179]);
        }

        ::org::apache::lucene::index::MergePolicy IndexWriterConfig::getMergePolicy() const
        {
          return ::org::apache::lucene::index::MergePolicy(env->callObjectMethod(this$, mids$[mid_getMergePolicy_753f8dfd]));
        }

        ::org::apache::lucene::index::MergeScheduler IndexWriterConfig::getMergeScheduler() const
        {
          return ::org::apache::lucene::index::MergeScheduler(env->callObjectMethod(this$, mids$[mid_getMergeScheduler_ff96d655]));
        }

        ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer IndexWriterConfig::getMergedSegmentWarmer() const
        {
          return ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer(env->callObjectMethod(this$, mids$[mid_getMergedSegmentWarmer_b145c9d7]));
        }

        ::org::apache::lucene::index::IndexWriterConfig$OpenMode IndexWriterConfig::getOpenMode() const
        {
          return ::org::apache::lucene::index::IndexWriterConfig$OpenMode(env->callObjectMethod(this$, mids$[mid_getOpenMode_4134b214]));
        }

        jdouble IndexWriterConfig::getRAMBufferSizeMB() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getRAMBufferSizeMB_54c6a174]);
        }

        jint IndexWriterConfig::getRAMPerThreadHardLimitMB() const
        {
          return env->callIntMethod(this$, mids$[mid_getRAMPerThreadHardLimitMB_54c6a179]);
        }

        jboolean IndexWriterConfig::getReaderPooling() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getReaderPooling_54c6a16a]);
        }

        jint IndexWriterConfig::getReaderTermsIndexDivisor() const
        {
          return env->callIntMethod(this$, mids$[mid_getReaderTermsIndexDivisor_54c6a179]);
        }

        ::org::apache::lucene::search::similarities::Similarity IndexWriterConfig::getSimilarity() const
        {
          return ::org::apache::lucene::search::similarities::Similarity(env->callObjectMethod(this$, mids$[mid_getSimilarity_efcb1233]));
        }

        jint IndexWriterConfig::getTermIndexInterval() const
        {
          return env->callIntMethod(this$, mids$[mid_getTermIndexInterval_54c6a179]);
        }

        jlong IndexWriterConfig::getWriteLockTimeout() const
        {
          return env->callLongMethod(this$, mids$[mid_getWriteLockTimeout_54c6a17a]);
        }

        IndexWriterConfig IndexWriterConfig::setCodec(const ::org::apache::lucene::codecs::Codec & a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setCodec_c6322414], a0.this$));
        }

        void IndexWriterConfig::setDefaultWriteLockTimeout(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_setDefaultWriteLockTimeout_0ee6df2f], a0);
        }

        IndexWriterConfig IndexWriterConfig::setIndexCommit(const ::org::apache::lucene::index::IndexCommit & a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setIndexCommit_ec04569d], a0.this$));
        }

        IndexWriterConfig IndexWriterConfig::setIndexDeletionPolicy(const ::org::apache::lucene::index::IndexDeletionPolicy & a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setIndexDeletionPolicy_e3778c88], a0.this$));
        }

        IndexWriterConfig IndexWriterConfig::setInfoStream(const ::org::apache::lucene::util::InfoStream & a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setInfoStream_46a28868], a0.this$));
        }

        IndexWriterConfig IndexWriterConfig::setInfoStream(const ::java::io::PrintStream & a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setInfoStream_915f97a5], a0.this$));
        }

        IndexWriterConfig IndexWriterConfig::setMaxBufferedDeleteTerms(jint a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setMaxBufferedDeleteTerms_0a512c4a], a0));
        }

        IndexWriterConfig IndexWriterConfig::setMaxBufferedDocs(jint a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setMaxBufferedDocs_0a512c4a], a0));
        }

        IndexWriterConfig IndexWriterConfig::setMaxThreadStates(jint a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setMaxThreadStates_0a512c4a], a0));
        }

        IndexWriterConfig IndexWriterConfig::setMergePolicy(const ::org::apache::lucene::index::MergePolicy & a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setMergePolicy_35fd1692], a0.this$));
        }

        IndexWriterConfig IndexWriterConfig::setMergeScheduler(const ::org::apache::lucene::index::MergeScheduler & a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setMergeScheduler_a7b4ba7a], a0.this$));
        }

        IndexWriterConfig IndexWriterConfig::setMergedSegmentWarmer(const ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer & a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setMergedSegmentWarmer_f60591d0], a0.this$));
        }

        IndexWriterConfig IndexWriterConfig::setOpenMode(const ::org::apache::lucene::index::IndexWriterConfig$OpenMode & a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setOpenMode_ecf4c6f7], a0.this$));
        }

        IndexWriterConfig IndexWriterConfig::setRAMBufferSizeMB(jdouble a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setRAMBufferSizeMB_f49ea4cb], a0));
        }

        IndexWriterConfig IndexWriterConfig::setRAMPerThreadHardLimitMB(jint a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setRAMPerThreadHardLimitMB_0a512c4a], a0));
        }

        IndexWriterConfig IndexWriterConfig::setReaderPooling(jboolean a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setReaderPooling_53913b61], a0));
        }

        IndexWriterConfig IndexWriterConfig::setReaderTermsIndexDivisor(jint a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setReaderTermsIndexDivisor_0a512c4a], a0));
        }

        IndexWriterConfig IndexWriterConfig::setSimilarity(const ::org::apache::lucene::search::similarities::Similarity & a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setSimilarity_842e4878], a0.this$));
        }

        IndexWriterConfig IndexWriterConfig::setTermIndexInterval(jint a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setTermIndexInterval_0a512c4a], a0));
        }

        IndexWriterConfig IndexWriterConfig::setUseCompoundFile(jboolean a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setUseCompoundFile_53913b61], a0));
        }

        IndexWriterConfig IndexWriterConfig::setWriteLockTimeout(jlong a0) const
        {
          return IndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setWriteLockTimeout_c56ab6f1], a0));
        }

        ::java::lang::String IndexWriterConfig::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexWriterConfig_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexWriterConfig_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IndexWriterConfig_init_(t_IndexWriterConfig *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IndexWriterConfig_getAnalyzer(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getCodec(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getDefaultWriteLockTimeout(PyTypeObject *type);
        static PyObject *t_IndexWriterConfig_getIndexCommit(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getIndexDeletionPolicy(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getInfoStream(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getMaxBufferedDeleteTerms(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getMaxBufferedDocs(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getMaxThreadStates(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getMergePolicy(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getMergeScheduler(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getMergedSegmentWarmer(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getOpenMode(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getRAMBufferSizeMB(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getRAMPerThreadHardLimitMB(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getReaderPooling(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getReaderTermsIndexDivisor(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getSimilarity(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getTermIndexInterval(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_getWriteLockTimeout(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_setCodec(t_IndexWriterConfig *self, PyObject *arg);
        static PyObject *t_IndexWriterConfig_setDefaultWriteLockTimeout(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexWriterConfig_setIndexCommit(t_IndexWriterConfig *self, PyObject *arg);
        static PyObject *t_IndexWriterConfig_setIndexDeletionPolicy(t_IndexWriterConfig *self, PyObject *arg);
        static PyObject *t_IndexWriterConfig_setInfoStream(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_setMaxBufferedDeleteTerms(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_setMaxBufferedDocs(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_setMaxThreadStates(t_IndexWriterConfig *self, PyObject *arg);
        static PyObject *t_IndexWriterConfig_setMergePolicy(t_IndexWriterConfig *self, PyObject *arg);
        static PyObject *t_IndexWriterConfig_setMergeScheduler(t_IndexWriterConfig *self, PyObject *arg);
        static PyObject *t_IndexWriterConfig_setMergedSegmentWarmer(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_setOpenMode(t_IndexWriterConfig *self, PyObject *arg);
        static PyObject *t_IndexWriterConfig_setRAMBufferSizeMB(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_setRAMPerThreadHardLimitMB(t_IndexWriterConfig *self, PyObject *arg);
        static PyObject *t_IndexWriterConfig_setReaderPooling(t_IndexWriterConfig *self, PyObject *arg);
        static PyObject *t_IndexWriterConfig_setReaderTermsIndexDivisor(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_setSimilarity(t_IndexWriterConfig *self, PyObject *arg);
        static PyObject *t_IndexWriterConfig_setTermIndexInterval(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_setUseCompoundFile(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_setWriteLockTimeout(t_IndexWriterConfig *self, PyObject *arg);
        static PyObject *t_IndexWriterConfig_toString(t_IndexWriterConfig *self, PyObject *args);
        static PyObject *t_IndexWriterConfig_get__analyzer(t_IndexWriterConfig *self, void *data);
        static PyObject *t_IndexWriterConfig_get__codec(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__codec(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__defaultWriteLockTimeout(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__defaultWriteLockTimeout(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__indexCommit(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__indexCommit(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__indexDeletionPolicy(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__indexDeletionPolicy(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__infoStream(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__infoStream(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__maxBufferedDeleteTerms(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__maxBufferedDeleteTerms(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__maxBufferedDocs(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__maxBufferedDocs(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__maxThreadStates(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__maxThreadStates(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__mergePolicy(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__mergePolicy(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__mergeScheduler(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__mergeScheduler(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__mergedSegmentWarmer(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__mergedSegmentWarmer(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__openMode(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__openMode(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__rAMBufferSizeMB(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__rAMBufferSizeMB(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__rAMPerThreadHardLimitMB(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__rAMPerThreadHardLimitMB(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__readerPooling(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__readerPooling(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__readerTermsIndexDivisor(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__readerTermsIndexDivisor(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__similarity(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__similarity(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__termIndexInterval(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__termIndexInterval(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static int t_IndexWriterConfig_set__useCompoundFile(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_IndexWriterConfig_get__writeLockTimeout(t_IndexWriterConfig *self, void *data);
        static int t_IndexWriterConfig_set__writeLockTimeout(t_IndexWriterConfig *self, PyObject *arg, void *data);
        static PyGetSetDef t_IndexWriterConfig__fields_[] = {
          DECLARE_GET_FIELD(t_IndexWriterConfig, analyzer),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, codec),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, defaultWriteLockTimeout),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, indexCommit),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, indexDeletionPolicy),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, infoStream),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, maxBufferedDeleteTerms),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, maxBufferedDocs),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, maxThreadStates),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, mergePolicy),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, mergeScheduler),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, mergedSegmentWarmer),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, openMode),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, rAMBufferSizeMB),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, rAMPerThreadHardLimitMB),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, readerPooling),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, readerTermsIndexDivisor),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, similarity),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, termIndexInterval),
          DECLARE_SET_FIELD(t_IndexWriterConfig, useCompoundFile),
          DECLARE_GETSET_FIELD(t_IndexWriterConfig, writeLockTimeout),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexWriterConfig__methods_[] = {
          DECLARE_METHOD(t_IndexWriterConfig, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexWriterConfig, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexWriterConfig, getAnalyzer, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getCodec, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getDefaultWriteLockTimeout, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_IndexWriterConfig, getIndexCommit, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getIndexDeletionPolicy, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getInfoStream, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getMaxBufferedDeleteTerms, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getMaxBufferedDocs, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getMaxThreadStates, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getMergePolicy, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getMergeScheduler, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getMergedSegmentWarmer, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getOpenMode, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getRAMBufferSizeMB, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getRAMPerThreadHardLimitMB, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getReaderPooling, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getReaderTermsIndexDivisor, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getSimilarity, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getTermIndexInterval, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, getWriteLockTimeout, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, setCodec, METH_O),
          DECLARE_METHOD(t_IndexWriterConfig, setDefaultWriteLockTimeout, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexWriterConfig, setIndexCommit, METH_O),
          DECLARE_METHOD(t_IndexWriterConfig, setIndexDeletionPolicy, METH_O),
          DECLARE_METHOD(t_IndexWriterConfig, setInfoStream, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, setMaxBufferedDeleteTerms, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, setMaxBufferedDocs, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, setMaxThreadStates, METH_O),
          DECLARE_METHOD(t_IndexWriterConfig, setMergePolicy, METH_O),
          DECLARE_METHOD(t_IndexWriterConfig, setMergeScheduler, METH_O),
          DECLARE_METHOD(t_IndexWriterConfig, setMergedSegmentWarmer, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, setOpenMode, METH_O),
          DECLARE_METHOD(t_IndexWriterConfig, setRAMBufferSizeMB, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, setRAMPerThreadHardLimitMB, METH_O),
          DECLARE_METHOD(t_IndexWriterConfig, setReaderPooling, METH_O),
          DECLARE_METHOD(t_IndexWriterConfig, setReaderTermsIndexDivisor, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, setSimilarity, METH_O),
          DECLARE_METHOD(t_IndexWriterConfig, setTermIndexInterval, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, setUseCompoundFile, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig, setWriteLockTimeout, METH_O),
          DECLARE_METHOD(t_IndexWriterConfig, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexWriterConfig, t_IndexWriterConfig, ::org::apache::lucene::index::LiveIndexWriterConfig, IndexWriterConfig, t_IndexWriterConfig_init_, 0, 0, t_IndexWriterConfig__fields_, 0, 0);

        void t_IndexWriterConfig::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexWriterConfig), module, "IndexWriterConfig", 0);
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "OpenMode", make_descriptor(&PY_TYPE(IndexWriterConfig$OpenMode)));
        }

        void t_IndexWriterConfig::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "class_", make_descriptor(IndexWriterConfig::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "wrapfn_", make_descriptor(t_IndexWriterConfig::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(IndexWriterConfig::initializeClass);
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "DEFAULT_CHECK_INTEGRITY_AT_MERGE", make_descriptor(IndexWriterConfig::DEFAULT_CHECK_INTEGRITY_AT_MERGE));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "DEFAULT_MAX_BUFFERED_DELETE_TERMS", make_descriptor(IndexWriterConfig::DEFAULT_MAX_BUFFERED_DELETE_TERMS));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "DEFAULT_MAX_BUFFERED_DOCS", make_descriptor(IndexWriterConfig::DEFAULT_MAX_BUFFERED_DOCS));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "DEFAULT_MAX_THREAD_STATES", make_descriptor(IndexWriterConfig::DEFAULT_MAX_THREAD_STATES));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "DEFAULT_RAM_BUFFER_SIZE_MB", make_descriptor(IndexWriterConfig::DEFAULT_RAM_BUFFER_SIZE_MB));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB", make_descriptor(IndexWriterConfig::DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "DEFAULT_READER_POOLING", make_descriptor(IndexWriterConfig::DEFAULT_READER_POOLING));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "DEFAULT_READER_TERMS_INDEX_DIVISOR", make_descriptor(IndexWriterConfig::DEFAULT_READER_TERMS_INDEX_DIVISOR));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "DEFAULT_TERM_INDEX_INTERVAL", make_descriptor(IndexWriterConfig::DEFAULT_TERM_INDEX_INTERVAL));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "DEFAULT_USE_COMPOUND_FILE_SYSTEM", make_descriptor(IndexWriterConfig::DEFAULT_USE_COMPOUND_FILE_SYSTEM));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "DISABLE_AUTO_FLUSH", make_descriptor(IndexWriterConfig::DISABLE_AUTO_FLUSH));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig).tp_dict, "WRITE_LOCK_TIMEOUT", make_descriptor(IndexWriterConfig::WRITE_LOCK_TIMEOUT));
        }

        static PyObject *t_IndexWriterConfig_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexWriterConfig::initializeClass, 1)))
            return NULL;
          return t_IndexWriterConfig::wrap_Object(IndexWriterConfig(((t_IndexWriterConfig *) arg)->object.this$));
        }
        static PyObject *t_IndexWriterConfig_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexWriterConfig::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IndexWriterConfig_init_(t_IndexWriterConfig *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::Version a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
          IndexWriterConfig object((jobject) NULL);

          if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
          {
            INT_CALL(object = IndexWriterConfig(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IndexWriterConfig_getAnalyzer(t_IndexWriterConfig *self, PyObject *args)
        {
          ::org::apache::lucene::analysis::Analyzer result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getAnalyzer());
            return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getAnalyzer", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getCodec(t_IndexWriterConfig *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::Codec result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getCodec());
            return ::org::apache::lucene::codecs::t_Codec::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getCodec", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getDefaultWriteLockTimeout(PyTypeObject *type)
        {
          jlong result;
          OBJ_CALL(result = ::org::apache::lucene::index::IndexWriterConfig::getDefaultWriteLockTimeout());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_IndexWriterConfig_getIndexCommit(t_IndexWriterConfig *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexCommit result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getIndexCommit());
            return ::org::apache::lucene::index::t_IndexCommit::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getIndexCommit", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getIndexDeletionPolicy(t_IndexWriterConfig *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexDeletionPolicy result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getIndexDeletionPolicy());
            return ::org::apache::lucene::index::t_IndexDeletionPolicy::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getIndexDeletionPolicy", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getInfoStream(t_IndexWriterConfig *self, PyObject *args)
        {
          ::org::apache::lucene::util::InfoStream result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getInfoStream());
            return ::org::apache::lucene::util::t_InfoStream::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getInfoStream", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getMaxBufferedDeleteTerms(t_IndexWriterConfig *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMaxBufferedDeleteTerms());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getMaxBufferedDeleteTerms", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getMaxBufferedDocs(t_IndexWriterConfig *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMaxBufferedDocs());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getMaxBufferedDocs", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getMaxThreadStates(t_IndexWriterConfig *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMaxThreadStates());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getMaxThreadStates", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getMergePolicy(t_IndexWriterConfig *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergePolicy result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMergePolicy());
            return ::org::apache::lucene::index::t_MergePolicy::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getMergePolicy", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getMergeScheduler(t_IndexWriterConfig *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergeScheduler result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMergeScheduler());
            return ::org::apache::lucene::index::t_MergeScheduler::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getMergeScheduler", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getMergedSegmentWarmer(t_IndexWriterConfig *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMergedSegmentWarmer());
            return ::org::apache::lucene::index::t_IndexWriter$IndexReaderWarmer::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getMergedSegmentWarmer", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getOpenMode(t_IndexWriterConfig *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexWriterConfig$OpenMode result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getOpenMode());
            return ::org::apache::lucene::index::t_IndexWriterConfig$OpenMode::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getOpenMode", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getRAMBufferSizeMB(t_IndexWriterConfig *self, PyObject *args)
        {
          jdouble result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getRAMBufferSizeMB());
            return PyFloat_FromDouble((double) result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getRAMBufferSizeMB", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getRAMPerThreadHardLimitMB(t_IndexWriterConfig *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getRAMPerThreadHardLimitMB());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getRAMPerThreadHardLimitMB", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getReaderPooling(t_IndexWriterConfig *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getReaderPooling());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getReaderPooling", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getReaderTermsIndexDivisor(t_IndexWriterConfig *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getReaderTermsIndexDivisor());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getReaderTermsIndexDivisor", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getSimilarity(t_IndexWriterConfig *self, PyObject *args)
        {
          ::org::apache::lucene::search::similarities::Similarity result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getSimilarity());
            return ::org::apache::lucene::search::similarities::t_Similarity::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getSimilarity", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getTermIndexInterval(t_IndexWriterConfig *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getTermIndexInterval());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getTermIndexInterval", args, 2);
        }

        static PyObject *t_IndexWriterConfig_getWriteLockTimeout(t_IndexWriterConfig *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getWriteLockTimeout());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "getWriteLockTimeout", args, 2);
        }

        static PyObject *t_IndexWriterConfig_setCodec(t_IndexWriterConfig *self, PyObject *arg)
        {
          ::org::apache::lucene::codecs::Codec a0((jobject) NULL);
          IndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::codecs::Codec::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setCodec(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setCodec", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setDefaultWriteLockTimeout(PyTypeObject *type, PyObject *arg)
        {
          jlong a0;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(::org::apache::lucene::index::IndexWriterConfig::setDefaultWriteLockTimeout(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "setDefaultWriteLockTimeout", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setIndexCommit(t_IndexWriterConfig *self, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexCommit a0((jobject) NULL);
          IndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexCommit::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setIndexCommit(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setIndexCommit", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setIndexDeletionPolicy(t_IndexWriterConfig *self, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexDeletionPolicy a0((jobject) NULL);
          IndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexDeletionPolicy::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setIndexDeletionPolicy(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setIndexDeletionPolicy", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setInfoStream(t_IndexWriterConfig *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::InfoStream a0((jobject) NULL);
              IndexWriterConfig result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::InfoStream::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.setInfoStream(a0));
                return t_IndexWriterConfig::wrap_Object(result);
              }
            }
            {
              ::java::io::PrintStream a0((jobject) NULL);
              IndexWriterConfig result((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::PrintStream::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.setInfoStream(a0));
                return t_IndexWriterConfig::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "setInfoStream", args);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setMaxBufferedDeleteTerms(t_IndexWriterConfig *self, PyObject *args)
        {
          jint a0;
          IndexWriterConfig result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.setMaxBufferedDeleteTerms(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "setMaxBufferedDeleteTerms", args, 2);
        }

        static PyObject *t_IndexWriterConfig_setMaxBufferedDocs(t_IndexWriterConfig *self, PyObject *args)
        {
          jint a0;
          IndexWriterConfig result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.setMaxBufferedDocs(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "setMaxBufferedDocs", args, 2);
        }

        static PyObject *t_IndexWriterConfig_setMaxThreadStates(t_IndexWriterConfig *self, PyObject *arg)
        {
          jint a0;
          IndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.setMaxThreadStates(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxThreadStates", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setMergePolicy(t_IndexWriterConfig *self, PyObject *arg)
        {
          ::org::apache::lucene::index::MergePolicy a0((jobject) NULL);
          IndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::MergePolicy::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setMergePolicy(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setMergePolicy", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setMergeScheduler(t_IndexWriterConfig *self, PyObject *arg)
        {
          ::org::apache::lucene::index::MergeScheduler a0((jobject) NULL);
          IndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::MergeScheduler::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setMergeScheduler(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setMergeScheduler", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setMergedSegmentWarmer(t_IndexWriterConfig *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer a0((jobject) NULL);
          IndexWriterConfig result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setMergedSegmentWarmer(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "setMergedSegmentWarmer", args, 2);
        }

        static PyObject *t_IndexWriterConfig_setOpenMode(t_IndexWriterConfig *self, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexWriterConfig$OpenMode a0((jobject) NULL);
          PyTypeObject **p0;
          IndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "K", ::org::apache::lucene::index::IndexWriterConfig$OpenMode::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_IndexWriterConfig$OpenMode::parameters_))
          {
            OBJ_CALL(result = self->object.setOpenMode(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setOpenMode", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setRAMBufferSizeMB(t_IndexWriterConfig *self, PyObject *args)
        {
          jdouble a0;
          IndexWriterConfig result((jobject) NULL);

          if (!parseArgs(args, "D", &a0))
          {
            OBJ_CALL(result = self->object.setRAMBufferSizeMB(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "setRAMBufferSizeMB", args, 2);
        }

        static PyObject *t_IndexWriterConfig_setRAMPerThreadHardLimitMB(t_IndexWriterConfig *self, PyObject *arg)
        {
          jint a0;
          IndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.setRAMPerThreadHardLimitMB(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setRAMPerThreadHardLimitMB", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setReaderPooling(t_IndexWriterConfig *self, PyObject *arg)
        {
          jboolean a0;
          IndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(result = self->object.setReaderPooling(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setReaderPooling", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setReaderTermsIndexDivisor(t_IndexWriterConfig *self, PyObject *args)
        {
          jint a0;
          IndexWriterConfig result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.setReaderTermsIndexDivisor(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "setReaderTermsIndexDivisor", args, 2);
        }

        static PyObject *t_IndexWriterConfig_setSimilarity(t_IndexWriterConfig *self, PyObject *arg)
        {
          ::org::apache::lucene::search::similarities::Similarity a0((jobject) NULL);
          IndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::similarities::Similarity::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setSimilarity(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setSimilarity", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_setTermIndexInterval(t_IndexWriterConfig *self, PyObject *args)
        {
          jint a0;
          IndexWriterConfig result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.setTermIndexInterval(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "setTermIndexInterval", args, 2);
        }

        static PyObject *t_IndexWriterConfig_setUseCompoundFile(t_IndexWriterConfig *self, PyObject *args)
        {
          jboolean a0;
          IndexWriterConfig result((jobject) NULL);

          if (!parseArgs(args, "Z", &a0))
          {
            OBJ_CALL(result = self->object.setUseCompoundFile(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "setUseCompoundFile", args, 2);
        }

        static PyObject *t_IndexWriterConfig_setWriteLockTimeout(t_IndexWriterConfig *self, PyObject *arg)
        {
          jlong a0;
          IndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.setWriteLockTimeout(a0));
            return t_IndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setWriteLockTimeout", arg);
          return NULL;
        }

        static PyObject *t_IndexWriterConfig_toString(t_IndexWriterConfig *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(IndexWriterConfig), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_IndexWriterConfig_get__analyzer(t_IndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
          OBJ_CALL(value = self->object.getAnalyzer());
          return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(value);
        }

        static PyObject *t_IndexWriterConfig_get__codec(t_IndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::codecs::Codec value((jobject) NULL);
          OBJ_CALL(value = self->object.getCodec());
          return ::org::apache::lucene::codecs::t_Codec::wrap_Object(value);
        }
        static int t_IndexWriterConfig_set__codec(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::codecs::Codec value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::codecs::Codec::initializeClass, &value))
            {
              INT_CALL(self->object.setCodec(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "codec", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__defaultWriteLockTimeout(t_IndexWriterConfig *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getDefaultWriteLockTimeout());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_IndexWriterConfig_set__defaultWriteLockTimeout(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object.setDefaultWriteLockTimeout(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "defaultWriteLockTimeout", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__indexCommit(t_IndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::IndexCommit value((jobject) NULL);
          OBJ_CALL(value = self->object.getIndexCommit());
          return ::org::apache::lucene::index::t_IndexCommit::wrap_Object(value);
        }
        static int t_IndexWriterConfig_set__indexCommit(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::IndexCommit value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexCommit::initializeClass, &value))
            {
              INT_CALL(self->object.setIndexCommit(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "indexCommit", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__indexDeletionPolicy(t_IndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::IndexDeletionPolicy value((jobject) NULL);
          OBJ_CALL(value = self->object.getIndexDeletionPolicy());
          return ::org::apache::lucene::index::t_IndexDeletionPolicy::wrap_Object(value);
        }
        static int t_IndexWriterConfig_set__indexDeletionPolicy(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::IndexDeletionPolicy value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexDeletionPolicy::initializeClass, &value))
            {
              INT_CALL(self->object.setIndexDeletionPolicy(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "indexDeletionPolicy", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__infoStream(t_IndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::util::InfoStream value((jobject) NULL);
          OBJ_CALL(value = self->object.getInfoStream());
          return ::org::apache::lucene::util::t_InfoStream::wrap_Object(value);
        }
        static int t_IndexWriterConfig_set__infoStream(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::util::InfoStream value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::InfoStream::initializeClass, &value))
            {
              INT_CALL(self->object.setInfoStream(value));
              return 0;
            }
          }
          {
            ::java::io::PrintStream value((jobject) NULL);
            if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &value))
            {
              INT_CALL(self->object.setInfoStream(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "infoStream", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__maxBufferedDeleteTerms(t_IndexWriterConfig *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxBufferedDeleteTerms());
          return PyInt_FromLong((long) value);
        }
        static int t_IndexWriterConfig_set__maxBufferedDeleteTerms(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMaxBufferedDeleteTerms(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxBufferedDeleteTerms", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__maxBufferedDocs(t_IndexWriterConfig *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxBufferedDocs());
          return PyInt_FromLong((long) value);
        }
        static int t_IndexWriterConfig_set__maxBufferedDocs(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMaxBufferedDocs(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxBufferedDocs", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__maxThreadStates(t_IndexWriterConfig *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxThreadStates());
          return PyInt_FromLong((long) value);
        }
        static int t_IndexWriterConfig_set__maxThreadStates(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMaxThreadStates(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxThreadStates", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__mergePolicy(t_IndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::MergePolicy value((jobject) NULL);
          OBJ_CALL(value = self->object.getMergePolicy());
          return ::org::apache::lucene::index::t_MergePolicy::wrap_Object(value);
        }
        static int t_IndexWriterConfig_set__mergePolicy(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::MergePolicy value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::MergePolicy::initializeClass, &value))
            {
              INT_CALL(self->object.setMergePolicy(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "mergePolicy", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__mergeScheduler(t_IndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::MergeScheduler value((jobject) NULL);
          OBJ_CALL(value = self->object.getMergeScheduler());
          return ::org::apache::lucene::index::t_MergeScheduler::wrap_Object(value);
        }
        static int t_IndexWriterConfig_set__mergeScheduler(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::MergeScheduler value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::MergeScheduler::initializeClass, &value))
            {
              INT_CALL(self->object.setMergeScheduler(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "mergeScheduler", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__mergedSegmentWarmer(t_IndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer value((jobject) NULL);
          OBJ_CALL(value = self->object.getMergedSegmentWarmer());
          return ::org::apache::lucene::index::t_IndexWriter$IndexReaderWarmer::wrap_Object(value);
        }
        static int t_IndexWriterConfig_set__mergedSegmentWarmer(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer::initializeClass, &value))
            {
              INT_CALL(self->object.setMergedSegmentWarmer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "mergedSegmentWarmer", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__openMode(t_IndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::IndexWriterConfig$OpenMode value((jobject) NULL);
          OBJ_CALL(value = self->object.getOpenMode());
          return ::org::apache::lucene::index::t_IndexWriterConfig$OpenMode::wrap_Object(value);
        }
        static int t_IndexWriterConfig_set__openMode(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::IndexWriterConfig$OpenMode value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexWriterConfig$OpenMode::initializeClass, &value))
            {
              INT_CALL(self->object.setOpenMode(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "openMode", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__rAMBufferSizeMB(t_IndexWriterConfig *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getRAMBufferSizeMB());
          return PyFloat_FromDouble((double) value);
        }
        static int t_IndexWriterConfig_set__rAMBufferSizeMB(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setRAMBufferSizeMB(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "rAMBufferSizeMB", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__rAMPerThreadHardLimitMB(t_IndexWriterConfig *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getRAMPerThreadHardLimitMB());
          return PyInt_FromLong((long) value);
        }
        static int t_IndexWriterConfig_set__rAMPerThreadHardLimitMB(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setRAMPerThreadHardLimitMB(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "rAMPerThreadHardLimitMB", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__readerPooling(t_IndexWriterConfig *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getReaderPooling());
          Py_RETURN_BOOL(value);
        }
        static int t_IndexWriterConfig_set__readerPooling(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setReaderPooling(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "readerPooling", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__readerTermsIndexDivisor(t_IndexWriterConfig *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getReaderTermsIndexDivisor());
          return PyInt_FromLong((long) value);
        }
        static int t_IndexWriterConfig_set__readerTermsIndexDivisor(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setReaderTermsIndexDivisor(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "readerTermsIndexDivisor", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__similarity(t_IndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::search::similarities::Similarity value((jobject) NULL);
          OBJ_CALL(value = self->object.getSimilarity());
          return ::org::apache::lucene::search::similarities::t_Similarity::wrap_Object(value);
        }
        static int t_IndexWriterConfig_set__similarity(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::similarities::Similarity value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::similarities::Similarity::initializeClass, &value))
            {
              INT_CALL(self->object.setSimilarity(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "similarity", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__termIndexInterval(t_IndexWriterConfig *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getTermIndexInterval());
          return PyInt_FromLong((long) value);
        }
        static int t_IndexWriterConfig_set__termIndexInterval(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setTermIndexInterval(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "termIndexInterval", arg);
          return -1;
        }

        static int t_IndexWriterConfig_set__useCompoundFile(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setUseCompoundFile(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "useCompoundFile", arg);
          return -1;
        }

        static PyObject *t_IndexWriterConfig_get__writeLockTimeout(t_IndexWriterConfig *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getWriteLockTimeout());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_IndexWriterConfig_set__writeLockTimeout(t_IndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object.setWriteLockTimeout(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "writeLockTimeout", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/StoredFieldsWriter.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/codecs/compressing/CompressionMode.h"
#include "org/apache/lucene/codecs/StoredFieldsReader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {

          ::java::lang::Class *CompressingStoredFieldsFormat::class$ = NULL;
          jmethodID *CompressingStoredFieldsFormat::mids$ = NULL;
          bool CompressingStoredFieldsFormat::live$ = false;

          jclass CompressingStoredFieldsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_41920a78] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/codecs/compressing/CompressionMode;I)V");
              mids$[mid_init$_5a706bd2] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/codecs/compressing/CompressionMode;I)V");
              mids$[mid_fieldsReader_bbe26ec4] = env->getMethodID(cls, "fieldsReader", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/StoredFieldsReader;");
              mids$[mid_fieldsWriter_c73cceda] = env->getMethodID(cls, "fieldsWriter", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/StoredFieldsWriter;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CompressingStoredFieldsFormat::CompressingStoredFieldsFormat(const ::java::lang::String & a0, const ::org::apache::lucene::codecs::compressing::CompressionMode & a1, jint a2) : ::org::apache::lucene::codecs::StoredFieldsFormat(env->newObject(initializeClass, &mids$, mid_init$_41920a78, a0.this$, a1.this$, a2)) {}

          CompressingStoredFieldsFormat::CompressingStoredFieldsFormat(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::org::apache::lucene::codecs::compressing::CompressionMode & a2, jint a3) : ::org::apache::lucene::codecs::StoredFieldsFormat(env->newObject(initializeClass, &mids$, mid_init$_5a706bd2, a0.this$, a1.this$, a2.this$, a3)) {}

          ::org::apache::lucene::codecs::StoredFieldsReader CompressingStoredFieldsFormat::fieldsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3) const
          {
            return ::org::apache::lucene::codecs::StoredFieldsReader(env->callObjectMethod(this$, mids$[mid_fieldsReader_bbe26ec4], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          ::org::apache::lucene::codecs::StoredFieldsWriter CompressingStoredFieldsFormat::fieldsWriter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::store::IOContext & a2) const
          {
            return ::org::apache::lucene::codecs::StoredFieldsWriter(env->callObjectMethod(this$, mids$[mid_fieldsWriter_c73cceda], a0.this$, a1.this$, a2.this$));
          }

          ::java::lang::String CompressingStoredFieldsFormat::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {
          static PyObject *t_CompressingStoredFieldsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressingStoredFieldsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CompressingStoredFieldsFormat_init_(t_CompressingStoredFieldsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CompressingStoredFieldsFormat_fieldsReader(t_CompressingStoredFieldsFormat *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsFormat_fieldsWriter(t_CompressingStoredFieldsFormat *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsFormat_toString(t_CompressingStoredFieldsFormat *self, PyObject *args);

          static PyMethodDef t_CompressingStoredFieldsFormat__methods_[] = {
            DECLARE_METHOD(t_CompressingStoredFieldsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingStoredFieldsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingStoredFieldsFormat, fieldsReader, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsFormat, fieldsWriter, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsFormat, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CompressingStoredFieldsFormat, t_CompressingStoredFieldsFormat, ::org::apache::lucene::codecs::StoredFieldsFormat, CompressingStoredFieldsFormat, t_CompressingStoredFieldsFormat_init_, 0, 0, 0, 0, 0);

          void t_CompressingStoredFieldsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(CompressingStoredFieldsFormat), module, "CompressingStoredFieldsFormat", 0);
          }

          void t_CompressingStoredFieldsFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsFormat).tp_dict, "class_", make_descriptor(CompressingStoredFieldsFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsFormat).tp_dict, "wrapfn_", make_descriptor(t_CompressingStoredFieldsFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CompressingStoredFieldsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompressingStoredFieldsFormat::initializeClass, 1)))
              return NULL;
            return t_CompressingStoredFieldsFormat::wrap_Object(CompressingStoredFieldsFormat(((t_CompressingStoredFieldsFormat *) arg)->object.this$));
          }
          static PyObject *t_CompressingStoredFieldsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompressingStoredFieldsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CompressingStoredFieldsFormat_init_(t_CompressingStoredFieldsFormat *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::codecs::compressing::CompressionMode a1((jobject) NULL);
                jint a2;
                CompressingStoredFieldsFormat object((jobject) NULL);

                if (!parseArgs(args, "skI", ::org::apache::lucene::codecs::compressing::CompressionMode::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = CompressingStoredFieldsFormat(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::codecs::compressing::CompressionMode a2((jobject) NULL);
                jint a3;
                CompressingStoredFieldsFormat object((jobject) NULL);

                if (!parseArgs(args, "sskI", ::org::apache::lucene::codecs::compressing::CompressionMode::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = CompressingStoredFieldsFormat(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CompressingStoredFieldsFormat_fieldsReader(t_CompressingStoredFieldsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);
            ::org::apache::lucene::codecs::StoredFieldsReader result((jobject) NULL);

            if (!parseArgs(args, "kkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.fieldsReader(a0, a1, a2, a3));
              return ::org::apache::lucene::codecs::t_StoredFieldsReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsFormat), (PyObject *) self, "fieldsReader", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsFormat_fieldsWriter(t_CompressingStoredFieldsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);
            ::org::apache::lucene::codecs::StoredFieldsWriter result((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.fieldsWriter(a0, a1, a2));
              return ::org::apache::lucene::codecs::t_StoredFieldsWriter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsFormat), (PyObject *) self, "fieldsWriter", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsFormat_toString(t_CompressingStoredFieldsFormat *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsFormat), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/MultiFacets.h"
#include "java/lang/Number.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/FacetResult.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *MultiFacets::class$ = NULL;
        jmethodID *MultiFacets::mids$ = NULL;
        bool MultiFacets::live$ = false;

        jclass MultiFacets::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/MultiFacets");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
            mids$[mid_init$_5c6c1e1e] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;Lorg/apache/lucene/facet/Facets;)V");
            mids$[mid_getAllDims_cdc2a528] = env->getMethodID(cls, "getAllDims", "(I)Ljava/util/List;");
            mids$[mid_getSpecificValue_8ecbcac9] = env->getMethodID(cls, "getSpecificValue", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Number;");
            mids$[mid_getTopChildren_37e8c044] = env->getMethodID(cls, "getTopChildren", "(ILjava/lang/String;[Ljava/lang/String;)Lorg/apache/lucene/facet/FacetResult;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiFacets::MultiFacets(const ::java::util::Map & a0) : ::org::apache::lucene::facet::Facets(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

        MultiFacets::MultiFacets(const ::java::util::Map & a0, const ::org::apache::lucene::facet::Facets & a1) : ::org::apache::lucene::facet::Facets(env->newObject(initializeClass, &mids$, mid_init$_5c6c1e1e, a0.this$, a1.this$)) {}

        ::java::util::List MultiFacets::getAllDims(jint a0) const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getAllDims_cdc2a528], a0));
        }

        ::java::lang::Number MultiFacets::getSpecificValue(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) const
        {
          return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getSpecificValue_8ecbcac9], a0.this$, a1.this$));
        }

        ::org::apache::lucene::facet::FacetResult MultiFacets::getTopChildren(jint a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2) const
        {
          return ::org::apache::lucene::facet::FacetResult(env->callObjectMethod(this$, mids$[mid_getTopChildren_37e8c044], a0, a1.this$, a2.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_MultiFacets_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiFacets_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiFacets_init_(t_MultiFacets *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiFacets_getAllDims(t_MultiFacets *self, PyObject *args);
        static PyObject *t_MultiFacets_getSpecificValue(t_MultiFacets *self, PyObject *args);
        static PyObject *t_MultiFacets_getTopChildren(t_MultiFacets *self, PyObject *args);

        static PyMethodDef t_MultiFacets__methods_[] = {
          DECLARE_METHOD(t_MultiFacets, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiFacets, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiFacets, getAllDims, METH_VARARGS),
          DECLARE_METHOD(t_MultiFacets, getSpecificValue, METH_VARARGS),
          DECLARE_METHOD(t_MultiFacets, getTopChildren, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiFacets, t_MultiFacets, ::org::apache::lucene::facet::Facets, MultiFacets, t_MultiFacets_init_, 0, 0, 0, 0, 0);

        void t_MultiFacets::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiFacets), module, "MultiFacets", 0);
        }

        void t_MultiFacets::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiFacets).tp_dict, "class_", make_descriptor(MultiFacets::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiFacets).tp_dict, "wrapfn_", make_descriptor(t_MultiFacets::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiFacets).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiFacets_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiFacets::initializeClass, 1)))
            return NULL;
          return t_MultiFacets::wrap_Object(MultiFacets(((t_MultiFacets *) arg)->object.this$));
        }
        static PyObject *t_MultiFacets_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiFacets::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiFacets_init_(t_MultiFacets *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              MultiFacets object((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
              {
                INT_CALL(object = MultiFacets(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::facet::Facets a1((jobject) NULL);
              MultiFacets object((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::facet::Facets::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                INT_CALL(object = MultiFacets(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MultiFacets_getAllDims(t_MultiFacets *self, PyObject *args)
        {
          jint a0;
          ::java::util::List result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.getAllDims(a0));
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::facet::PY_TYPE(FacetResult));
          }

          return callSuper(&PY_TYPE(MultiFacets), (PyObject *) self, "getAllDims", args, 2);
        }

        static PyObject *t_MultiFacets_getSpecificValue(t_MultiFacets *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::java::lang::String > a1((jobject) NULL);
          ::java::lang::Number result((jobject) NULL);

          if (!parseArgs(args, "s[s", &a0, &a1))
          {
            OBJ_CALL(result = self->object.getSpecificValue(a0, a1));
            return ::java::lang::t_Number::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiFacets), (PyObject *) self, "getSpecificValue", args, 2);
        }

        static PyObject *t_MultiFacets_getTopChildren(t_MultiFacets *self, PyObject *args)
        {
          jint a0;
          ::java::lang::String a1((jobject) NULL);
          JArray< ::java::lang::String > a2((jobject) NULL);
          ::org::apache::lucene::facet::FacetResult result((jobject) NULL);

          if (!parseArgs(args, "Is[s", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.getTopChildren(a0, a1, a2));
            return ::org::apache::lucene::facet::t_FacetResult::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiFacets), (PyObject *) self, "getTopChildren", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/LiveDocsFormat.h"
#include "java/util/Collection.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/MutableBits.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/IOContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *LiveDocsFormat::class$ = NULL;
        jmethodID *LiveDocsFormat::mids$ = NULL;
        bool LiveDocsFormat::live$ = false;

        jclass LiveDocsFormat::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/LiveDocsFormat");

            mids$ = new jmethodID[max_mid];
            mids$[mid_files_cb8dcbcf] = env->getMethodID(cls, "files", "(Lorg/apache/lucene/index/SegmentCommitInfo;Ljava/util/Collection;)V");
            mids$[mid_newLiveDocs_f311e97a] = env->getMethodID(cls, "newLiveDocs", "(I)Lorg/apache/lucene/util/MutableBits;");
            mids$[mid_newLiveDocs_e3a7ca1a] = env->getMethodID(cls, "newLiveDocs", "(Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/util/MutableBits;");
            mids$[mid_readLiveDocs_60c7b77b] = env->getMethodID(cls, "readLiveDocs", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/util/Bits;");
            mids$[mid_writeLiveDocs_37123b35] = env->getMethodID(cls, "writeLiveDocs", "(Lorg/apache/lucene/util/MutableBits;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentCommitInfo;ILorg/apache/lucene/store/IOContext;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void LiveDocsFormat::files(const ::org::apache::lucene::index::SegmentCommitInfo & a0, const ::java::util::Collection & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_files_cb8dcbcf], a0.this$, a1.this$);
        }

        ::org::apache::lucene::util::MutableBits LiveDocsFormat::newLiveDocs(jint a0) const
        {
          return ::org::apache::lucene::util::MutableBits(env->callObjectMethod(this$, mids$[mid_newLiveDocs_f311e97a], a0));
        }

        ::org::apache::lucene::util::MutableBits LiveDocsFormat::newLiveDocs(const ::org::apache::lucene::util::Bits & a0) const
        {
          return ::org::apache::lucene::util::MutableBits(env->callObjectMethod(this$, mids$[mid_newLiveDocs_e3a7ca1a], a0.this$));
        }

        ::org::apache::lucene::util::Bits LiveDocsFormat::readLiveDocs(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentCommitInfo & a1, const ::org::apache::lucene::store::IOContext & a2) const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_readLiveDocs_60c7b77b], a0.this$, a1.this$, a2.this$));
        }

        void LiveDocsFormat::writeLiveDocs(const ::org::apache::lucene::util::MutableBits & a0, const ::org::apache::lucene::store::Directory & a1, const ::org::apache::lucene::index::SegmentCommitInfo & a2, jint a3, const ::org::apache::lucene::store::IOContext & a4) const
        {
          env->callVoidMethod(this$, mids$[mid_writeLiveDocs_37123b35], a0.this$, a1.this$, a2.this$, a3, a4.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_LiveDocsFormat_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LiveDocsFormat_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LiveDocsFormat_files(t_LiveDocsFormat *self, PyObject *args);
        static PyObject *t_LiveDocsFormat_newLiveDocs(t_LiveDocsFormat *self, PyObject *args);
        static PyObject *t_LiveDocsFormat_readLiveDocs(t_LiveDocsFormat *self, PyObject *args);
        static PyObject *t_LiveDocsFormat_writeLiveDocs(t_LiveDocsFormat *self, PyObject *args);

        static PyMethodDef t_LiveDocsFormat__methods_[] = {
          DECLARE_METHOD(t_LiveDocsFormat, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LiveDocsFormat, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LiveDocsFormat, files, METH_VARARGS),
          DECLARE_METHOD(t_LiveDocsFormat, newLiveDocs, METH_VARARGS),
          DECLARE_METHOD(t_LiveDocsFormat, readLiveDocs, METH_VARARGS),
          DECLARE_METHOD(t_LiveDocsFormat, writeLiveDocs, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LiveDocsFormat, t_LiveDocsFormat, ::java::lang::Object, LiveDocsFormat, abstract_init, 0, 0, 0, 0, 0);

        void t_LiveDocsFormat::install(PyObject *module)
        {
          installType(&PY_TYPE(LiveDocsFormat), module, "LiveDocsFormat", 0);
        }

        void t_LiveDocsFormat::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LiveDocsFormat).tp_dict, "class_", make_descriptor(LiveDocsFormat::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LiveDocsFormat).tp_dict, "wrapfn_", make_descriptor(t_LiveDocsFormat::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LiveDocsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LiveDocsFormat_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LiveDocsFormat::initializeClass, 1)))
            return NULL;
          return t_LiveDocsFormat::wrap_Object(LiveDocsFormat(((t_LiveDocsFormat *) arg)->object.this$));
        }
        static PyObject *t_LiveDocsFormat_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LiveDocsFormat::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_LiveDocsFormat_files(t_LiveDocsFormat *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentCommitInfo a0((jobject) NULL);
          ::java::util::Collection a1((jobject) NULL);
          PyTypeObject **p1;

          if (!parseArgs(args, "kK", ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, ::java::util::Collection::initializeClass, &a0, &a1, &p1, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(self->object.files(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "files", args);
          return NULL;
        }

        static PyObject *t_LiveDocsFormat_newLiveDocs(t_LiveDocsFormat *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              ::org::apache::lucene::util::MutableBits result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.newLiveDocs(a0));
                return ::org::apache::lucene::util::t_MutableBits::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::util::Bits a0((jobject) NULL);
              ::org::apache::lucene::util::MutableBits result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::Bits::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.newLiveDocs(a0));
                return ::org::apache::lucene::util::t_MutableBits::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "newLiveDocs", args);
          return NULL;
        }

        static PyObject *t_LiveDocsFormat_readLiveDocs(t_LiveDocsFormat *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::org::apache::lucene::index::SegmentCommitInfo a1((jobject) NULL);
          ::org::apache::lucene::store::IOContext a2((jobject) NULL);
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.readLiveDocs(a0, a1, a2));
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "readLiveDocs", args);
          return NULL;
        }

        static PyObject *t_LiveDocsFormat_writeLiveDocs(t_LiveDocsFormat *self, PyObject *args)
        {
          ::org::apache::lucene::util::MutableBits a0((jobject) NULL);
          ::org::apache::lucene::store::Directory a1((jobject) NULL);
          ::org::apache::lucene::index::SegmentCommitInfo a2((jobject) NULL);
          jint a3;
          ::org::apache::lucene::store::IOContext a4((jobject) NULL);

          if (!parseArgs(args, "kkkIk", ::org::apache::lucene::util::MutableBits::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(self->object.writeLiveDocs(a0, a1, a2, a3, a4));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeLiveDocs", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/MultiTrie2.h"
#include "java/io/IOException.h"
#include "org/egothor/stemmer/Trie.h"
#include "java/lang/Class.h"
#include "java/io/DataInput.h"
#include "org/egothor/stemmer/Reduce.h"
#include "java/io/DataOutput.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *MultiTrie2::class$ = NULL;
      jmethodID *MultiTrie2::mids$ = NULL;
      bool MultiTrie2::live$ = false;

      jclass MultiTrie2::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/MultiTrie2");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_e051d6a6] = env->getMethodID(cls, "<init>", "(Ljava/io/DataInput;)V");
          mids$[mid_init$_bb0c767f] = env->getMethodID(cls, "<init>", "(Z)V");
          mids$[mid_add_db1d05ae] = env->getMethodID(cls, "add", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)V");
          mids$[mid_decompose_2fa560b3] = env->getMethodID(cls, "decompose", "(Ljava/lang/CharSequence;)[Ljava/lang/CharSequence;");
          mids$[mid_getFully_856f5013] = env->getMethodID(cls, "getFully", "(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;");
          mids$[mid_getLastOnPath_856f5013] = env->getMethodID(cls, "getLastOnPath", "(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;");
          mids$[mid_reduce_6ee87cd1] = env->getMethodID(cls, "reduce", "(Lorg/egothor/stemmer/Reduce;)Lorg/egothor/stemmer/Trie;");
          mids$[mid_store_cfb051e6] = env->getMethodID(cls, "store", "(Ljava/io/DataOutput;)V");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      MultiTrie2::MultiTrie2(const ::java::io::DataInput & a0) : ::org::egothor::stemmer::MultiTrie(env->newObject(initializeClass, &mids$, mid_init$_e051d6a6, a0.this$)) {}

      MultiTrie2::MultiTrie2(jboolean a0) : ::org::egothor::stemmer::MultiTrie(env->newObject(initializeClass, &mids$, mid_init$_bb0c767f, a0)) {}

      void MultiTrie2::add(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1) const
      {
        env->callVoidMethod(this$, mids$[mid_add_db1d05ae], a0.this$, a1.this$);
      }

      JArray< ::java::lang::CharSequence > MultiTrie2::decompose(const ::java::lang::CharSequence & a0) const
      {
        return JArray< ::java::lang::CharSequence >(env->callObjectMethod(this$, mids$[mid_decompose_2fa560b3], a0.this$));
      }

      ::java::lang::CharSequence MultiTrie2::getFully(const ::java::lang::CharSequence & a0) const
      {
        return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getFully_856f5013], a0.this$));
      }

      ::java::lang::CharSequence MultiTrie2::getLastOnPath(const ::java::lang::CharSequence & a0) const
      {
        return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getLastOnPath_856f5013], a0.this$));
      }

      ::org::egothor::stemmer::Trie MultiTrie2::reduce(const ::org::egothor::stemmer::Reduce & a0) const
      {
        return ::org::egothor::stemmer::Trie(env->callObjectMethod(this$, mids$[mid_reduce_6ee87cd1], a0.this$));
      }

      void MultiTrie2::store(const ::java::io::DataOutput & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_store_cfb051e6], a0.this$);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_MultiTrie2_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_MultiTrie2_instance_(PyTypeObject *type, PyObject *arg);
      static int t_MultiTrie2_init_(t_MultiTrie2 *self, PyObject *args, PyObject *kwds);
      static PyObject *t_MultiTrie2_add(t_MultiTrie2 *self, PyObject *args);
      static PyObject *t_MultiTrie2_decompose(t_MultiTrie2 *self, PyObject *arg);
      static PyObject *t_MultiTrie2_getFully(t_MultiTrie2 *self, PyObject *args);
      static PyObject *t_MultiTrie2_getLastOnPath(t_MultiTrie2 *self, PyObject *args);
      static PyObject *t_MultiTrie2_reduce(t_MultiTrie2 *self, PyObject *args);
      static PyObject *t_MultiTrie2_store(t_MultiTrie2 *self, PyObject *args);

      static PyMethodDef t_MultiTrie2__methods_[] = {
        DECLARE_METHOD(t_MultiTrie2, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_MultiTrie2, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_MultiTrie2, add, METH_VARARGS),
        DECLARE_METHOD(t_MultiTrie2, decompose, METH_O),
        DECLARE_METHOD(t_MultiTrie2, getFully, METH_VARARGS),
        DECLARE_METHOD(t_MultiTrie2, getLastOnPath, METH_VARARGS),
        DECLARE_METHOD(t_MultiTrie2, reduce, METH_VARARGS),
        DECLARE_METHOD(t_MultiTrie2, store, METH_VARARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(MultiTrie2, t_MultiTrie2, ::org::egothor::stemmer::MultiTrie, MultiTrie2, t_MultiTrie2_init_, 0, 0, 0, 0, 0);

      void t_MultiTrie2::install(PyObject *module)
      {
        installType(&PY_TYPE(MultiTrie2), module, "MultiTrie2", 0);
      }

      void t_MultiTrie2::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(MultiTrie2).tp_dict, "class_", make_descriptor(MultiTrie2::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(MultiTrie2).tp_dict, "wrapfn_", make_descriptor(t_MultiTrie2::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(MultiTrie2).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_MultiTrie2_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, MultiTrie2::initializeClass, 1)))
          return NULL;
        return t_MultiTrie2::wrap_Object(MultiTrie2(((t_MultiTrie2 *) arg)->object.this$));
      }
      static PyObject *t_MultiTrie2_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, MultiTrie2::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_MultiTrie2_init_(t_MultiTrie2 *self, PyObject *args, PyObject *kwds)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            ::java::io::DataInput a0((jobject) NULL);
            MultiTrie2 object((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::DataInput::initializeClass, &a0))
            {
              INT_CALL(object = MultiTrie2(a0));
              self->object = object;
              break;
            }
          }
          {
            jboolean a0;
            MultiTrie2 object((jobject) NULL);

            if (!parseArgs(args, "Z", &a0))
            {
              INT_CALL(object = MultiTrie2(a0));
              self->object = object;
              break;
            }
          }
         default:
          PyErr_SetArgsError((PyObject *) self, "__init__", args);
          return -1;
        }

        return 0;
      }

      static PyObject *t_MultiTrie2_add(t_MultiTrie2 *self, PyObject *args)
      {
        ::java::lang::CharSequence a0((jobject) NULL);
        ::java::lang::CharSequence a1((jobject) NULL);

        if (!parseArgs(args, "OO", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
        {
          OBJ_CALL(self->object.add(a0, a1));
          Py_RETURN_NONE;
        }

        return callSuper(&PY_TYPE(MultiTrie2), (PyObject *) self, "add", args, 2);
      }

      static PyObject *t_MultiTrie2_decompose(t_MultiTrie2 *self, PyObject *arg)
      {
        ::java::lang::CharSequence a0((jobject) NULL);
        JArray< ::java::lang::CharSequence > result((jobject) NULL);

        if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
        {
          OBJ_CALL(result = self->object.decompose(a0));
          return JArray<jobject>(result.this$).wrap(::java::lang::t_CharSequence::wrap_jobject);
        }

        PyErr_SetArgsError((PyObject *) self, "decompose", arg);
        return NULL;
      }

      static PyObject *t_MultiTrie2_getFully(t_MultiTrie2 *self, PyObject *args)
      {
        ::java::lang::CharSequence a0((jobject) NULL);
        ::java::lang::CharSequence result((jobject) NULL);

        if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
        {
          OBJ_CALL(result = self->object.getFully(a0));
          return ::java::lang::t_CharSequence::wrap_Object(result);
        }

        return callSuper(&PY_TYPE(MultiTrie2), (PyObject *) self, "getFully", args, 2);
      }

      static PyObject *t_MultiTrie2_getLastOnPath(t_MultiTrie2 *self, PyObject *args)
      {
        ::java::lang::CharSequence a0((jobject) NULL);
        ::java::lang::CharSequence result((jobject) NULL);

        if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
        {
          OBJ_CALL(result = self->object.getLastOnPath(a0));
          return ::java::lang::t_CharSequence::wrap_Object(result);
        }

        return callSuper(&PY_TYPE(MultiTrie2), (PyObject *) self, "getLastOnPath", args, 2);
      }

      static PyObject *t_MultiTrie2_reduce(t_MultiTrie2 *self, PyObject *args)
      {
        ::org::egothor::stemmer::Reduce a0((jobject) NULL);
        ::org::egothor::stemmer::Trie result((jobject) NULL);

        if (!parseArgs(args, "k", ::org::egothor::stemmer::Reduce::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.reduce(a0));
          return ::org::egothor::stemmer::t_Trie::wrap_Object(result);
        }

        return callSuper(&PY_TYPE(MultiTrie2), (PyObject *) self, "reduce", args, 2);
      }

      static PyObject *t_MultiTrie2_store(t_MultiTrie2 *self, PyObject *args)
      {
        ::java::io::DataOutput a0((jobject) NULL);

        if (!parseArgs(args, "k", ::java::io::DataOutput::initializeClass, &a0))
        {
          OBJ_CALL(self->object.store(a0));
          Py_RETURN_NONE;
        }

        return callSuper(&PY_TYPE(MultiTrie2), (PyObject *) self, "store", args, 2);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/FinnishStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *FinnishStemmer::class$ = NULL;
        jmethodID *FinnishStemmer::mids$ = NULL;
        bool FinnishStemmer::live$ = false;

        jclass FinnishStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/FinnishStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FinnishStemmer::FinnishStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean FinnishStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint FinnishStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean FinnishStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_FinnishStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FinnishStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FinnishStemmer_init_(t_FinnishStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FinnishStemmer_equals(t_FinnishStemmer *self, PyObject *args);
        static PyObject *t_FinnishStemmer_hashCode(t_FinnishStemmer *self, PyObject *args);
        static PyObject *t_FinnishStemmer_stem(t_FinnishStemmer *self, PyObject *args);

        static PyMethodDef t_FinnishStemmer__methods_[] = {
          DECLARE_METHOD(t_FinnishStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FinnishStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FinnishStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_FinnishStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_FinnishStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FinnishStemmer, t_FinnishStemmer, ::org::tartarus::snowball::SnowballProgram, FinnishStemmer, t_FinnishStemmer_init_, 0, 0, 0, 0, 0);

        void t_FinnishStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(FinnishStemmer), module, "FinnishStemmer", 0);
        }

        void t_FinnishStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FinnishStemmer).tp_dict, "class_", make_descriptor(FinnishStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FinnishStemmer).tp_dict, "wrapfn_", make_descriptor(t_FinnishStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FinnishStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FinnishStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FinnishStemmer::initializeClass, 1)))
            return NULL;
          return t_FinnishStemmer::wrap_Object(FinnishStemmer(((t_FinnishStemmer *) arg)->object.this$));
        }
        static PyObject *t_FinnishStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FinnishStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FinnishStemmer_init_(t_FinnishStemmer *self, PyObject *args, PyObject *kwds)
        {
          FinnishStemmer object((jobject) NULL);

          INT_CALL(object = FinnishStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_FinnishStemmer_equals(t_FinnishStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FinnishStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_FinnishStemmer_hashCode(t_FinnishStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FinnishStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_FinnishStemmer_stem(t_FinnishStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FinnishStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/AutomatonQuery.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *AutomatonQuery::class$ = NULL;
        jmethodID *AutomatonQuery::mids$ = NULL;
        bool AutomatonQuery::live$ = false;

        jclass AutomatonQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/AutomatonQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_1b49cba7] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;Lorg/apache/lucene/util/automaton/Automaton;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getAutomaton_9b0d5999] = env->getMethodID(cls, "getAutomaton", "()Lorg/apache/lucene/util/automaton/Automaton;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_getTermsEnum_67b5a29a] = env->getMethodID(cls, "getTermsEnum", "(Lorg/apache/lucene/index/Terms;Lorg/apache/lucene/util/AttributeSource;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        AutomatonQuery::AutomatonQuery(const ::org::apache::lucene::index::Term & a0, const ::org::apache::lucene::util::automaton::Automaton & a1) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_1b49cba7, a0.this$, a1.this$)) {}

        jboolean AutomatonQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::util::automaton::Automaton AutomatonQuery::getAutomaton() const
        {
          return ::org::apache::lucene::util::automaton::Automaton(env->callObjectMethod(this$, mids$[mid_getAutomaton_9b0d5999]));
        }

        jint AutomatonQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String AutomatonQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_AutomatonQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AutomatonQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_AutomatonQuery_init_(t_AutomatonQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_AutomatonQuery_equals(t_AutomatonQuery *self, PyObject *args);
        static PyObject *t_AutomatonQuery_getAutomaton(t_AutomatonQuery *self);
        static PyObject *t_AutomatonQuery_hashCode(t_AutomatonQuery *self, PyObject *args);
        static PyObject *t_AutomatonQuery_toString(t_AutomatonQuery *self, PyObject *args);
        static PyObject *t_AutomatonQuery_get__automaton(t_AutomatonQuery *self, void *data);
        static PyGetSetDef t_AutomatonQuery__fields_[] = {
          DECLARE_GET_FIELD(t_AutomatonQuery, automaton),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_AutomatonQuery__methods_[] = {
          DECLARE_METHOD(t_AutomatonQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AutomatonQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AutomatonQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_AutomatonQuery, getAutomaton, METH_NOARGS),
          DECLARE_METHOD(t_AutomatonQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_AutomatonQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(AutomatonQuery, t_AutomatonQuery, ::org::apache::lucene::search::MultiTermQuery, AutomatonQuery, t_AutomatonQuery_init_, 0, 0, t_AutomatonQuery__fields_, 0, 0);

        void t_AutomatonQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(AutomatonQuery), module, "AutomatonQuery", 0);
        }

        void t_AutomatonQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(AutomatonQuery).tp_dict, "class_", make_descriptor(AutomatonQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(AutomatonQuery).tp_dict, "wrapfn_", make_descriptor(t_AutomatonQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(AutomatonQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_AutomatonQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AutomatonQuery::initializeClass, 1)))
            return NULL;
          return t_AutomatonQuery::wrap_Object(AutomatonQuery(((t_AutomatonQuery *) arg)->object.this$));
        }
        static PyObject *t_AutomatonQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AutomatonQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_AutomatonQuery_init_(t_AutomatonQuery *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          ::org::apache::lucene::util::automaton::Automaton a1((jobject) NULL);
          AutomatonQuery object((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
          {
            INT_CALL(object = AutomatonQuery(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_AutomatonQuery_equals(t_AutomatonQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(AutomatonQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_AutomatonQuery_getAutomaton(t_AutomatonQuery *self)
        {
          ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);
          OBJ_CALL(result = self->object.getAutomaton());
          return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
        }

        static PyObject *t_AutomatonQuery_hashCode(t_AutomatonQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(AutomatonQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_AutomatonQuery_toString(t_AutomatonQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(AutomatonQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_AutomatonQuery_get__automaton(t_AutomatonQuery *self, void *data)
        {
          ::org::apache::lucene::util::automaton::Automaton value((jobject) NULL);
          OBJ_CALL(value = self->object.getAutomaton());
          return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/WAH8DocIdSet$Builder.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "org/apache/lucene/util/WAH8DocIdSet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *WAH8DocIdSet$Builder::class$ = NULL;
        jmethodID *WAH8DocIdSet$Builder::mids$ = NULL;
        bool WAH8DocIdSet$Builder::live$ = false;

        jclass WAH8DocIdSet$Builder::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/WAH8DocIdSet$Builder");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_f8a06644] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/search/DocIdSetIterator;)Lorg/apache/lucene/util/WAH8DocIdSet$Builder;");
            mids$[mid_add_7ac30ded] = env->getMethodID(cls, "add", "(I)Lorg/apache/lucene/util/WAH8DocIdSet$Builder;");
            mids$[mid_build_b0ef9fd4] = env->getMethodID(cls, "build", "()Lorg/apache/lucene/util/WAH8DocIdSet;");
            mids$[mid_setIndexInterval_7ac30ded] = env->getMethodID(cls, "setIndexInterval", "(I)Lorg/apache/lucene/util/WAH8DocIdSet$Builder;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        WAH8DocIdSet$Builder::WAH8DocIdSet$Builder() : ::org::apache::lucene::util::WAH8DocIdSet$WordBuilder(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        WAH8DocIdSet$Builder WAH8DocIdSet$Builder::add(const ::org::apache::lucene::search::DocIdSetIterator & a0) const
        {
          return WAH8DocIdSet$Builder(env->callObjectMethod(this$, mids$[mid_add_f8a06644], a0.this$));
        }

        WAH8DocIdSet$Builder WAH8DocIdSet$Builder::add(jint a0) const
        {
          return WAH8DocIdSet$Builder(env->callObjectMethod(this$, mids$[mid_add_7ac30ded], a0));
        }

        ::org::apache::lucene::util::WAH8DocIdSet WAH8DocIdSet$Builder::build() const
        {
          return ::org::apache::lucene::util::WAH8DocIdSet(env->callObjectMethod(this$, mids$[mid_build_b0ef9fd4]));
        }

        WAH8DocIdSet$Builder WAH8DocIdSet$Builder::setIndexInterval(jint a0) const
        {
          return WAH8DocIdSet$Builder(env->callObjectMethod(this$, mids$[mid_setIndexInterval_7ac30ded], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_WAH8DocIdSet$Builder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_WAH8DocIdSet$Builder_instance_(PyTypeObject *type, PyObject *arg);
        static int t_WAH8DocIdSet$Builder_init_(t_WAH8DocIdSet$Builder *self, PyObject *args, PyObject *kwds);
        static PyObject *t_WAH8DocIdSet$Builder_add(t_WAH8DocIdSet$Builder *self, PyObject *args);
        static PyObject *t_WAH8DocIdSet$Builder_build(t_WAH8DocIdSet$Builder *self, PyObject *args);
        static PyObject *t_WAH8DocIdSet$Builder_setIndexInterval(t_WAH8DocIdSet$Builder *self, PyObject *args);
        static int t_WAH8DocIdSet$Builder_set__indexInterval(t_WAH8DocIdSet$Builder *self, PyObject *arg, void *data);
        static PyGetSetDef t_WAH8DocIdSet$Builder__fields_[] = {
          DECLARE_SET_FIELD(t_WAH8DocIdSet$Builder, indexInterval),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_WAH8DocIdSet$Builder__methods_[] = {
          DECLARE_METHOD(t_WAH8DocIdSet$Builder, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_WAH8DocIdSet$Builder, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_WAH8DocIdSet$Builder, add, METH_VARARGS),
          DECLARE_METHOD(t_WAH8DocIdSet$Builder, build, METH_VARARGS),
          DECLARE_METHOD(t_WAH8DocIdSet$Builder, setIndexInterval, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(WAH8DocIdSet$Builder, t_WAH8DocIdSet$Builder, ::org::apache::lucene::util::WAH8DocIdSet$WordBuilder, WAH8DocIdSet$Builder, t_WAH8DocIdSet$Builder_init_, 0, 0, t_WAH8DocIdSet$Builder__fields_, 0, 0);

        void t_WAH8DocIdSet$Builder::install(PyObject *module)
        {
          installType(&PY_TYPE(WAH8DocIdSet$Builder), module, "WAH8DocIdSet$Builder", 0);
        }

        void t_WAH8DocIdSet$Builder::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(WAH8DocIdSet$Builder).tp_dict, "class_", make_descriptor(WAH8DocIdSet$Builder::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(WAH8DocIdSet$Builder).tp_dict, "wrapfn_", make_descriptor(t_WAH8DocIdSet$Builder::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(WAH8DocIdSet$Builder).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_WAH8DocIdSet$Builder_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, WAH8DocIdSet$Builder::initializeClass, 1)))
            return NULL;
          return t_WAH8DocIdSet$Builder::wrap_Object(WAH8DocIdSet$Builder(((t_WAH8DocIdSet$Builder *) arg)->object.this$));
        }
        static PyObject *t_WAH8DocIdSet$Builder_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, WAH8DocIdSet$Builder::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_WAH8DocIdSet$Builder_init_(t_WAH8DocIdSet$Builder *self, PyObject *args, PyObject *kwds)
        {
          WAH8DocIdSet$Builder object((jobject) NULL);

          INT_CALL(object = WAH8DocIdSet$Builder());
          self->object = object;

          return 0;
        }

        static PyObject *t_WAH8DocIdSet$Builder_add(t_WAH8DocIdSet$Builder *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);
              WAH8DocIdSet$Builder result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.add(a0));
                return t_WAH8DocIdSet$Builder::wrap_Object(result);
              }
            }
            {
              jint a0;
              WAH8DocIdSet$Builder result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.add(a0));
                return t_WAH8DocIdSet$Builder::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "add", args);
          return NULL;
        }

        static PyObject *t_WAH8DocIdSet$Builder_build(t_WAH8DocIdSet$Builder *self, PyObject *args)
        {
          ::org::apache::lucene::util::WAH8DocIdSet result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.build());
            return ::org::apache::lucene::util::t_WAH8DocIdSet::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(WAH8DocIdSet$Builder), (PyObject *) self, "build", args, 2);
        }

        static PyObject *t_WAH8DocIdSet$Builder_setIndexInterval(t_WAH8DocIdSet$Builder *self, PyObject *args)
        {
          jint a0;
          WAH8DocIdSet$Builder result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.setIndexInterval(a0));
            return t_WAH8DocIdSet$Builder::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(WAH8DocIdSet$Builder), (PyObject *) self, "setIndexInterval", args, 2);
        }

        static int t_WAH8DocIdSet$Builder_set__indexInterval(t_WAH8DocIdSet$Builder *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setIndexInterval(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "indexInterval", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/FacetsConfig.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyWriter.h"
#include "org/apache/lucene/facet/FacetsConfig$DimConfig.h"
#include "org/apache/lucene/document/Document.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *FacetsConfig::class$ = NULL;
        jmethodID *FacetsConfig::mids$ = NULL;
        bool FacetsConfig::live$ = false;
        ::org::apache::lucene::facet::FacetsConfig$DimConfig *FacetsConfig::DEFAULT_DIM_CONFIG = NULL;
        ::java::lang::String *FacetsConfig::DEFAULT_INDEX_FIELD_NAME = NULL;

        jclass FacetsConfig::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/FacetsConfig");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_build_4faaf947] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/document/Document;)Lorg/apache/lucene/document/Document;");
            mids$[mid_build_ae4aef7e] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/facet/taxonomy/TaxonomyWriter;Lorg/apache/lucene/document/Document;)Lorg/apache/lucene/document/Document;");
            mids$[mid_getDimConfig_7d95dc61] = env->getMethodID(cls, "getDimConfig", "(Ljava/lang/String;)Lorg/apache/lucene/facet/FacetsConfig$DimConfig;");
            mids$[mid_getDimConfigs_db60befd] = env->getMethodID(cls, "getDimConfigs", "()Ljava/util/Map;");
            mids$[mid_pathToString_1034289b] = env->getStaticMethodID(cls, "pathToString", "([Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_pathToString_64aeb14d] = env->getStaticMethodID(cls, "pathToString", "([Ljava/lang/String;I)Ljava/lang/String;");
            mids$[mid_pathToString_05f95d9d] = env->getStaticMethodID(cls, "pathToString", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_setHierarchical_f3691645] = env->getMethodID(cls, "setHierarchical", "(Ljava/lang/String;Z)V");
            mids$[mid_setIndexFieldName_4a264742] = env->getMethodID(cls, "setIndexFieldName", "(Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_setMultiValued_f3691645] = env->getMethodID(cls, "setMultiValued", "(Ljava/lang/String;Z)V");
            mids$[mid_setRequireDimCount_f3691645] = env->getMethodID(cls, "setRequireDimCount", "(Ljava/lang/String;Z)V");
            mids$[mid_stringToPath_1f6a174f] = env->getStaticMethodID(cls, "stringToPath", "(Ljava/lang/String;)[Ljava/lang/String;");
            mids$[mid_getDefaultDimConfig_d06bca2f] = env->getMethodID(cls, "getDefaultDimConfig", "()Lorg/apache/lucene/facet/FacetsConfig$DimConfig;");
            mids$[mid_dedupAndEncode_14756a33] = env->getMethodID(cls, "dedupAndEncode", "(Lorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/BytesRef;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_DIM_CONFIG = new ::org::apache::lucene::facet::FacetsConfig$DimConfig(env->getStaticObjectField(cls, "DEFAULT_DIM_CONFIG", "Lorg/apache/lucene/facet/FacetsConfig$DimConfig;"));
            DEFAULT_INDEX_FIELD_NAME = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_INDEX_FIELD_NAME", "Ljava/lang/String;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FacetsConfig::FacetsConfig() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::document::Document FacetsConfig::build(const ::org::apache::lucene::document::Document & a0) const
        {
          return ::org::apache::lucene::document::Document(env->callObjectMethod(this$, mids$[mid_build_4faaf947], a0.this$));
        }

        ::org::apache::lucene::document::Document FacetsConfig::build(const ::org::apache::lucene::facet::taxonomy::TaxonomyWriter & a0, const ::org::apache::lucene::document::Document & a1) const
        {
          return ::org::apache::lucene::document::Document(env->callObjectMethod(this$, mids$[mid_build_ae4aef7e], a0.this$, a1.this$));
        }

        ::org::apache::lucene::facet::FacetsConfig$DimConfig FacetsConfig::getDimConfig(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::facet::FacetsConfig$DimConfig(env->callObjectMethod(this$, mids$[mid_getDimConfig_7d95dc61], a0.this$));
        }

        ::java::util::Map FacetsConfig::getDimConfigs() const
        {
          return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getDimConfigs_db60befd]));
        }

        ::java::lang::String FacetsConfig::pathToString(const JArray< ::java::lang::String > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_pathToString_1034289b], a0.this$));
        }

        ::java::lang::String FacetsConfig::pathToString(const JArray< ::java::lang::String > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_pathToString_64aeb14d], a0.this$, a1));
        }

        ::java::lang::String FacetsConfig::pathToString(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_pathToString_05f95d9d], a0.this$, a1.this$));
        }

        void FacetsConfig::setHierarchical(const ::java::lang::String & a0, jboolean a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setHierarchical_f3691645], a0.this$, a1);
        }

        void FacetsConfig::setIndexFieldName(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setIndexFieldName_4a264742], a0.this$, a1.this$);
        }

        void FacetsConfig::setMultiValued(const ::java::lang::String & a0, jboolean a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setMultiValued_f3691645], a0.this$, a1);
        }

        void FacetsConfig::setRequireDimCount(const ::java::lang::String & a0, jboolean a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setRequireDimCount_f3691645], a0.this$, a1);
        }

        JArray< ::java::lang::String > FacetsConfig::stringToPath(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< ::java::lang::String >(env->callStaticObjectMethod(cls, mids$[mid_stringToPath_1f6a174f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_FacetsConfig_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FacetsConfig_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FacetsConfig_init_(t_FacetsConfig *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FacetsConfig_build(t_FacetsConfig *self, PyObject *args);
        static PyObject *t_FacetsConfig_getDimConfig(t_FacetsConfig *self, PyObject *arg);
        static PyObject *t_FacetsConfig_getDimConfigs(t_FacetsConfig *self);
        static PyObject *t_FacetsConfig_pathToString(PyTypeObject *type, PyObject *args);
        static PyObject *t_FacetsConfig_setHierarchical(t_FacetsConfig *self, PyObject *args);
        static PyObject *t_FacetsConfig_setIndexFieldName(t_FacetsConfig *self, PyObject *args);
        static PyObject *t_FacetsConfig_setMultiValued(t_FacetsConfig *self, PyObject *args);
        static PyObject *t_FacetsConfig_setRequireDimCount(t_FacetsConfig *self, PyObject *args);
        static PyObject *t_FacetsConfig_stringToPath(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FacetsConfig_get__dimConfigs(t_FacetsConfig *self, void *data);
        static PyGetSetDef t_FacetsConfig__fields_[] = {
          DECLARE_GET_FIELD(t_FacetsConfig, dimConfigs),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FacetsConfig__methods_[] = {
          DECLARE_METHOD(t_FacetsConfig, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FacetsConfig, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FacetsConfig, build, METH_VARARGS),
          DECLARE_METHOD(t_FacetsConfig, getDimConfig, METH_O),
          DECLARE_METHOD(t_FacetsConfig, getDimConfigs, METH_NOARGS),
          DECLARE_METHOD(t_FacetsConfig, pathToString, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FacetsConfig, setHierarchical, METH_VARARGS),
          DECLARE_METHOD(t_FacetsConfig, setIndexFieldName, METH_VARARGS),
          DECLARE_METHOD(t_FacetsConfig, setMultiValued, METH_VARARGS),
          DECLARE_METHOD(t_FacetsConfig, setRequireDimCount, METH_VARARGS),
          DECLARE_METHOD(t_FacetsConfig, stringToPath, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FacetsConfig, t_FacetsConfig, ::java::lang::Object, FacetsConfig, t_FacetsConfig_init_, 0, 0, t_FacetsConfig__fields_, 0, 0);

        void t_FacetsConfig::install(PyObject *module)
        {
          installType(&PY_TYPE(FacetsConfig), module, "FacetsConfig", 0);
          PyDict_SetItemString(PY_TYPE(FacetsConfig).tp_dict, "DimConfig", make_descriptor(&PY_TYPE(FacetsConfig$DimConfig)));
        }

        void t_FacetsConfig::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FacetsConfig).tp_dict, "class_", make_descriptor(FacetsConfig::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FacetsConfig).tp_dict, "wrapfn_", make_descriptor(t_FacetsConfig::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FacetsConfig).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FacetsConfig::initializeClass);
          PyDict_SetItemString(PY_TYPE(FacetsConfig).tp_dict, "DEFAULT_DIM_CONFIG", make_descriptor(::org::apache::lucene::facet::t_FacetsConfig$DimConfig::wrap_Object(*FacetsConfig::DEFAULT_DIM_CONFIG)));
          PyDict_SetItemString(PY_TYPE(FacetsConfig).tp_dict, "DEFAULT_INDEX_FIELD_NAME", make_descriptor(j2p(*FacetsConfig::DEFAULT_INDEX_FIELD_NAME)));
        }

        static PyObject *t_FacetsConfig_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FacetsConfig::initializeClass, 1)))
            return NULL;
          return t_FacetsConfig::wrap_Object(FacetsConfig(((t_FacetsConfig *) arg)->object.this$));
        }
        static PyObject *t_FacetsConfig_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FacetsConfig::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FacetsConfig_init_(t_FacetsConfig *self, PyObject *args, PyObject *kwds)
        {
          FacetsConfig object((jobject) NULL);

          INT_CALL(object = FacetsConfig());
          self->object = object;

          return 0;
        }

        static PyObject *t_FacetsConfig_build(t_FacetsConfig *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::document::Document a0((jobject) NULL);
              ::org::apache::lucene::document::Document result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::document::Document::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.build(a0));
                return ::org::apache::lucene::document::t_Document::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::facet::taxonomy::TaxonomyWriter a0((jobject) NULL);
              ::org::apache::lucene::document::Document a1((jobject) NULL);
              ::org::apache::lucene::document::Document result((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::facet::taxonomy::TaxonomyWriter::initializeClass, ::org::apache::lucene::document::Document::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.build(a0, a1));
                return ::org::apache::lucene::document::t_Document::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "build", args);
          return NULL;
        }

        static PyObject *t_FacetsConfig_getDimConfig(t_FacetsConfig *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::facet::FacetsConfig$DimConfig result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getDimConfig(a0));
            return ::org::apache::lucene::facet::t_FacetsConfig$DimConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getDimConfig", arg);
          return NULL;
        }

        static PyObject *t_FacetsConfig_getDimConfigs(t_FacetsConfig *self)
        {
          ::java::util::Map result((jobject) NULL);
          OBJ_CALL(result = self->object.getDimConfigs());
          return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::org::apache::lucene::facet::PY_TYPE(FacetsConfig$DimConfig));
        }

        static PyObject *t_FacetsConfig_pathToString(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::java::lang::String > a0((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "[s", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::facet::FacetsConfig::pathToString(a0));
                return j2p(result);
              }
            }
            break;
           case 2:
            {
              JArray< ::java::lang::String > a0((jobject) NULL);
              jint a1;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "[sI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::facet::FacetsConfig::pathToString(a0, a1));
                return j2p(result);
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< ::java::lang::String > a1((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "s[s", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::facet::FacetsConfig::pathToString(a0, a1));
                return j2p(result);
              }
            }
          }

          PyErr_SetArgsError(type, "pathToString", args);
          return NULL;
        }

        static PyObject *t_FacetsConfig_setHierarchical(t_FacetsConfig *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean a1;

          if (!parseArgs(args, "sZ", &a0, &a1))
          {
            OBJ_CALL(self->object.setHierarchical(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setHierarchical", args);
          return NULL;
        }

        static PyObject *t_FacetsConfig_setIndexFieldName(t_FacetsConfig *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(self->object.setIndexFieldName(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setIndexFieldName", args);
          return NULL;
        }

        static PyObject *t_FacetsConfig_setMultiValued(t_FacetsConfig *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean a1;

          if (!parseArgs(args, "sZ", &a0, &a1))
          {
            OBJ_CALL(self->object.setMultiValued(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMultiValued", args);
          return NULL;
        }

        static PyObject *t_FacetsConfig_setRequireDimCount(t_FacetsConfig *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean a1;

          if (!parseArgs(args, "sZ", &a0, &a1))
          {
            OBJ_CALL(self->object.setRequireDimCount(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setRequireDimCount", args);
          return NULL;
        }

        static PyObject *t_FacetsConfig_stringToPath(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::java::lang::String > result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::facet::FacetsConfig::stringToPath(a0));
            return JArray<jstring>(result.this$).wrap();
          }

          PyErr_SetArgsError(type, "stringToPath", arg);
          return NULL;
        }

        static PyObject *t_FacetsConfig_get__dimConfigs(t_FacetsConfig *self, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          OBJ_CALL(value = self->object.getDimConfigs());
          return ::java::util::t_Map::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/BoostQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/CloneNotSupportedException.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *BoostQueryNode::class$ = NULL;
              jmethodID *BoostQueryNode::mids$ = NULL;
              bool BoostQueryNode::live$ = false;

              jclass BoostQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/BoostQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_36cea640] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;F)V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getChild_b387c5e6] = env->getMethodID(cls, "getChild", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getValue_54c6a176] = env->getMethodID(cls, "getValue", "()F");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              BoostQueryNode::BoostQueryNode(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0, jfloat a1) : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_36cea640, a0.this$, a1)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode BoostQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode BoostQueryNode::getChild() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_getChild_b387c5e6]));
              }

              jfloat BoostQueryNode::getValue() const
              {
                return env->callFloatMethod(this$, mids$[mid_getValue_54c6a176]);
              }

              ::java::lang::CharSequence BoostQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String BoostQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_BoostQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_BoostQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_BoostQueryNode_init_(t_BoostQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_BoostQueryNode_cloneTree(t_BoostQueryNode *self, PyObject *args);
              static PyObject *t_BoostQueryNode_getChild(t_BoostQueryNode *self);
              static PyObject *t_BoostQueryNode_getValue(t_BoostQueryNode *self);
              static PyObject *t_BoostQueryNode_toQueryString(t_BoostQueryNode *self, PyObject *args);
              static PyObject *t_BoostQueryNode_toString(t_BoostQueryNode *self, PyObject *args);
              static PyObject *t_BoostQueryNode_get__child(t_BoostQueryNode *self, void *data);
              static PyObject *t_BoostQueryNode_get__value(t_BoostQueryNode *self, void *data);
              static PyGetSetDef t_BoostQueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_BoostQueryNode, child),
                DECLARE_GET_FIELD(t_BoostQueryNode, value),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_BoostQueryNode__methods_[] = {
                DECLARE_METHOD(t_BoostQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BoostQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BoostQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_BoostQueryNode, getChild, METH_NOARGS),
                DECLARE_METHOD(t_BoostQueryNode, getValue, METH_NOARGS),
                DECLARE_METHOD(t_BoostQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_BoostQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(BoostQueryNode, t_BoostQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, BoostQueryNode, t_BoostQueryNode_init_, 0, 0, t_BoostQueryNode__fields_, 0, 0);

              void t_BoostQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(BoostQueryNode), module, "BoostQueryNode", 0);
              }

              void t_BoostQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(BoostQueryNode).tp_dict, "class_", make_descriptor(BoostQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(BoostQueryNode).tp_dict, "wrapfn_", make_descriptor(t_BoostQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(BoostQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_BoostQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, BoostQueryNode::initializeClass, 1)))
                  return NULL;
                return t_BoostQueryNode::wrap_Object(BoostQueryNode(((t_BoostQueryNode *) arg)->object.this$));
              }
              static PyObject *t_BoostQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, BoostQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_BoostQueryNode_init_(t_BoostQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                jfloat a1;
                BoostQueryNode object((jobject) NULL);

                if (!parseArgs(args, "kF", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = BoostQueryNode(a0, a1));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_BoostQueryNode_cloneTree(t_BoostQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(BoostQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_BoostQueryNode_getChild(t_BoostQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.getChild());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
              }

              static PyObject *t_BoostQueryNode_getValue(t_BoostQueryNode *self)
              {
                jfloat result;
                OBJ_CALL(result = self->object.getValue());
                return PyFloat_FromDouble((double) result);
              }

              static PyObject *t_BoostQueryNode_toQueryString(t_BoostQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(BoostQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_BoostQueryNode_toString(t_BoostQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(BoostQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_BoostQueryNode_get__child(t_BoostQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode value((jobject) NULL);
                OBJ_CALL(value = self->object.getChild());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(value);
              }

              static PyObject *t_BoostQueryNode_get__value(t_BoostQueryNode *self, void *data)
              {
                jfloat value;
                OBJ_CALL(value = self->object.getValue());
                return PyFloat_FromDouble((double) value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/term/TermGroupFacetCollector.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace term {

            ::java::lang::Class *TermGroupFacetCollector::class$ = NULL;
            jmethodID *TermGroupFacetCollector::mids$ = NULL;
            bool TermGroupFacetCollector::live$ = false;

            jclass TermGroupFacetCollector::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/term/TermGroupFacetCollector");

                mids$ = new jmethodID[max_mid];
                mids$[mid_createTermGroupFacetCollector_36bd7ed1] = env->getStaticMethodID(cls, "createTermGroupFacetCollector", "(Ljava/lang/String;Ljava/lang/String;ZLorg/apache/lucene/util/BytesRef;I)Lorg/apache/lucene/search/grouping/term/TermGroupFacetCollector;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TermGroupFacetCollector TermGroupFacetCollector::createTermGroupFacetCollector(const ::java::lang::String & a0, const ::java::lang::String & a1, jboolean a2, const ::org::apache::lucene::util::BytesRef & a3, jint a4)
            {
              jclass cls = env->getClass(initializeClass);
              return TermGroupFacetCollector(env->callStaticObjectMethod(cls, mids$[mid_createTermGroupFacetCollector_36bd7ed1], a0.this$, a1.this$, a2, a3.this$, a4));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace term {
            static PyObject *t_TermGroupFacetCollector_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermGroupFacetCollector_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermGroupFacetCollector_createTermGroupFacetCollector(PyTypeObject *type, PyObject *args);

            static PyMethodDef t_TermGroupFacetCollector__methods_[] = {
              DECLARE_METHOD(t_TermGroupFacetCollector, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermGroupFacetCollector, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermGroupFacetCollector, createTermGroupFacetCollector, METH_VARARGS | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TermGroupFacetCollector, t_TermGroupFacetCollector, ::org::apache::lucene::search::grouping::AbstractGroupFacetCollector, TermGroupFacetCollector, abstract_init, 0, 0, 0, 0, 0);

            void t_TermGroupFacetCollector::install(PyObject *module)
            {
              installType(&PY_TYPE(TermGroupFacetCollector), module, "TermGroupFacetCollector", 0);
            }

            void t_TermGroupFacetCollector::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TermGroupFacetCollector).tp_dict, "class_", make_descriptor(TermGroupFacetCollector::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TermGroupFacetCollector).tp_dict, "wrapfn_", make_descriptor(t_TermGroupFacetCollector::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TermGroupFacetCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TermGroupFacetCollector_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TermGroupFacetCollector::initializeClass, 1)))
                return NULL;
              return t_TermGroupFacetCollector::wrap_Object(TermGroupFacetCollector(((t_TermGroupFacetCollector *) arg)->object.this$));
            }
            static PyObject *t_TermGroupFacetCollector_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TermGroupFacetCollector::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_TermGroupFacetCollector_createTermGroupFacetCollector(PyTypeObject *type, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              jboolean a2;
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
              jint a4;
              TermGroupFacetCollector result((jobject) NULL);

              if (!parseArgs(args, "ssZkI", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::grouping::term::TermGroupFacetCollector::createTermGroupFacetCollector(a0, a1, a2, a3, a4));
                return t_TermGroupFacetCollector::wrap_Object(result);
              }

              PyErr_SetArgsError(type, "createTermGroupFacetCollector", args);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/StringField.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/document/Field$Store.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *StringField::class$ = NULL;
        jmethodID *StringField::mids$ = NULL;
        bool StringField::live$ = false;
        ::org::apache::lucene::document::FieldType *StringField::TYPE_NOT_STORED = NULL;
        ::org::apache::lucene::document::FieldType *StringField::TYPE_STORED = NULL;

        jclass StringField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/StringField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_064fa087] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/document/Field$Store;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE_NOT_STORED = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_NOT_STORED", "Lorg/apache/lucene/document/FieldType;"));
            TYPE_STORED = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_STORED", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        StringField::StringField(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::org::apache::lucene::document::Field$Store & a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_064fa087, a0.this$, a1.this$, a2.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_StringField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StringField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_StringField_init_(t_StringField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_StringField__methods_[] = {
          DECLARE_METHOD(t_StringField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StringField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(StringField, t_StringField, ::org::apache::lucene::document::Field, StringField, t_StringField_init_, 0, 0, 0, 0, 0);

        void t_StringField::install(PyObject *module)
        {
          installType(&PY_TYPE(StringField), module, "StringField", 0);
        }

        void t_StringField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(StringField).tp_dict, "class_", make_descriptor(StringField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(StringField).tp_dict, "wrapfn_", make_descriptor(t_StringField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(StringField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(StringField::initializeClass);
          PyDict_SetItemString(PY_TYPE(StringField).tp_dict, "TYPE_NOT_STORED", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*StringField::TYPE_NOT_STORED)));
          PyDict_SetItemString(PY_TYPE(StringField).tp_dict, "TYPE_STORED", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*StringField::TYPE_STORED)));
        }

        static PyObject *t_StringField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, StringField::initializeClass, 1)))
            return NULL;
          return t_StringField::wrap_Object(StringField(((t_StringField *) arg)->object.this$));
        }
        static PyObject *t_StringField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, StringField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_StringField_init_(t_StringField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::document::Field$Store a2((jobject) NULL);
          PyTypeObject **p2;
          StringField object((jobject) NULL);

          if (!parseArgs(args, "ssK", ::org::apache::lucene::document::Field$Store::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::document::t_Field$Store::parameters_))
          {
            INT_CALL(object = StringField(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/RegexpQuery.h"
#include "org/apache/lucene/util/automaton/AutomatonProvider.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *RegexpQuery::class$ = NULL;
        jmethodID *RegexpQuery::mids$ = NULL;
        bool RegexpQuery::live$ = false;

        jclass RegexpQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/RegexpQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7eca6a81] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;)V");
            mids$[mid_init$_05555589] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;I)V");
            mids$[mid_init$_66cf96d2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;ILorg/apache/lucene/util/automaton/AutomatonProvider;)V");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RegexpQuery::RegexpQuery(const ::org::apache::lucene::index::Term & a0) : ::org::apache::lucene::search::AutomatonQuery(env->newObject(initializeClass, &mids$, mid_init$_7eca6a81, a0.this$)) {}

        RegexpQuery::RegexpQuery(const ::org::apache::lucene::index::Term & a0, jint a1) : ::org::apache::lucene::search::AutomatonQuery(env->newObject(initializeClass, &mids$, mid_init$_05555589, a0.this$, a1)) {}

        RegexpQuery::RegexpQuery(const ::org::apache::lucene::index::Term & a0, jint a1, const ::org::apache::lucene::util::automaton::AutomatonProvider & a2) : ::org::apache::lucene::search::AutomatonQuery(env->newObject(initializeClass, &mids$, mid_init$_66cf96d2, a0.this$, a1, a2.this$)) {}

        ::java::lang::String RegexpQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_RegexpQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RegexpQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RegexpQuery_init_(t_RegexpQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RegexpQuery_toString(t_RegexpQuery *self, PyObject *args);

        static PyMethodDef t_RegexpQuery__methods_[] = {
          DECLARE_METHOD(t_RegexpQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RegexpQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RegexpQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RegexpQuery, t_RegexpQuery, ::org::apache::lucene::search::AutomatonQuery, RegexpQuery, t_RegexpQuery_init_, 0, 0, 0, 0, 0);

        void t_RegexpQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(RegexpQuery), module, "RegexpQuery", 0);
        }

        void t_RegexpQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RegexpQuery).tp_dict, "class_", make_descriptor(RegexpQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RegexpQuery).tp_dict, "wrapfn_", make_descriptor(t_RegexpQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RegexpQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RegexpQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RegexpQuery::initializeClass, 1)))
            return NULL;
          return t_RegexpQuery::wrap_Object(RegexpQuery(((t_RegexpQuery *) arg)->object.this$));
        }
        static PyObject *t_RegexpQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RegexpQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RegexpQuery_init_(t_RegexpQuery *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              RegexpQuery object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                INT_CALL(object = RegexpQuery(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              jint a1;
              RegexpQuery object((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1))
              {
                INT_CALL(object = RegexpQuery(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::util::automaton::AutomatonProvider a2((jobject) NULL);
              RegexpQuery object((jobject) NULL);

              if (!parseArgs(args, "kIk", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::util::automaton::AutomatonProvider::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = RegexpQuery(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_RegexpQuery_toString(t_RegexpQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(RegexpQuery), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanWeight.h"
#include "org/apache/lucene/search/Query.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanWeight::class$ = NULL;
          jmethodID *SpanWeight::mids$ = NULL;
          bool SpanWeight::live$ = false;

          jclass SpanWeight::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanWeight");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_917aaae1] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanQuery;Lorg/apache/lucene/search/IndexSearcher;)V");
              mids$[mid_explain_6ad94adc] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/index/AtomicReaderContext;I)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_getQuery_97e3851a] = env->getMethodID(cls, "getQuery", "()Lorg/apache/lucene/search/Query;");
              mids$[mid_getValueForNormalization_54c6a176] = env->getMethodID(cls, "getValueForNormalization", "()F");
              mids$[mid_normalize_f1b0c004] = env->getMethodID(cls, "normalize", "(FF)V");
              mids$[mid_scorer_3869ad24] = env->getMethodID(cls, "scorer", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/Scorer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanWeight::SpanWeight(const ::org::apache::lucene::search::spans::SpanQuery & a0, const ::org::apache::lucene::search::IndexSearcher & a1) : ::org::apache::lucene::search::Weight(env->newObject(initializeClass, &mids$, mid_init$_917aaae1, a0.this$, a1.this$)) {}

          ::org::apache::lucene::search::Explanation SpanWeight::explain(const ::org::apache::lucene::index::AtomicReaderContext & a0, jint a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_6ad94adc], a0.this$, a1));
          }

          ::org::apache::lucene::search::Query SpanWeight::getQuery() const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getQuery_97e3851a]));
          }

          jfloat SpanWeight::getValueForNormalization() const
          {
            return env->callFloatMethod(this$, mids$[mid_getValueForNormalization_54c6a176]);
          }

          void SpanWeight::normalize(jfloat a0, jfloat a1) const
          {
            env->callVoidMethod(this$, mids$[mid_normalize_f1b0c004], a0, a1);
          }

          ::org::apache::lucene::search::Scorer SpanWeight::scorer(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
          {
            return ::org::apache::lucene::search::Scorer(env->callObjectMethod(this$, mids$[mid_scorer_3869ad24], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanWeight_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanWeight_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanWeight_init_(t_SpanWeight *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanWeight_explain(t_SpanWeight *self, PyObject *args);
          static PyObject *t_SpanWeight_getQuery(t_SpanWeight *self, PyObject *args);
          static PyObject *t_SpanWeight_getValueForNormalization(t_SpanWeight *self, PyObject *args);
          static PyObject *t_SpanWeight_normalize(t_SpanWeight *self, PyObject *args);
          static PyObject *t_SpanWeight_scorer(t_SpanWeight *self, PyObject *args);
          static PyObject *t_SpanWeight_get__query(t_SpanWeight *self, void *data);
          static PyObject *t_SpanWeight_get__valueForNormalization(t_SpanWeight *self, void *data);
          static PyGetSetDef t_SpanWeight__fields_[] = {
            DECLARE_GET_FIELD(t_SpanWeight, query),
            DECLARE_GET_FIELD(t_SpanWeight, valueForNormalization),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanWeight__methods_[] = {
            DECLARE_METHOD(t_SpanWeight, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanWeight, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanWeight, explain, METH_VARARGS),
            DECLARE_METHOD(t_SpanWeight, getQuery, METH_VARARGS),
            DECLARE_METHOD(t_SpanWeight, getValueForNormalization, METH_VARARGS),
            DECLARE_METHOD(t_SpanWeight, normalize, METH_VARARGS),
            DECLARE_METHOD(t_SpanWeight, scorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanWeight, t_SpanWeight, ::org::apache::lucene::search::Weight, SpanWeight, t_SpanWeight_init_, 0, 0, t_SpanWeight__fields_, 0, 0);

          void t_SpanWeight::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanWeight), module, "SpanWeight", 0);
          }

          void t_SpanWeight::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanWeight).tp_dict, "class_", make_descriptor(SpanWeight::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanWeight).tp_dict, "wrapfn_", make_descriptor(t_SpanWeight::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanWeight).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanWeight_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanWeight::initializeClass, 1)))
              return NULL;
            return t_SpanWeight::wrap_Object(SpanWeight(((t_SpanWeight *) arg)->object.this$));
          }
          static PyObject *t_SpanWeight_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanWeight::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanWeight_init_(t_SpanWeight *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spans::SpanQuery a0((jobject) NULL);
            ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);
            SpanWeight object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &a1))
            {
              INT_CALL(object = SpanWeight(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanWeight_explain(t_SpanWeight *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.explain(a0, a1));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanWeight), (PyObject *) self, "explain", args, 2);
          }

          static PyObject *t_SpanWeight_getQuery(t_SpanWeight *self, PyObject *args)
          {
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getQuery());
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanWeight), (PyObject *) self, "getQuery", args, 2);
          }

          static PyObject *t_SpanWeight_getValueForNormalization(t_SpanWeight *self, PyObject *args)
          {
            jfloat result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getValueForNormalization());
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(SpanWeight), (PyObject *) self, "getValueForNormalization", args, 2);
          }

          static PyObject *t_SpanWeight_normalize(t_SpanWeight *self, PyObject *args)
          {
            jfloat a0;
            jfloat a1;

            if (!parseArgs(args, "FF", &a0, &a1))
            {
              OBJ_CALL(self->object.normalize(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SpanWeight), (PyObject *) self, "normalize", args, 2);
          }

          static PyObject *t_SpanWeight_scorer(t_SpanWeight *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::util::Bits a1((jobject) NULL);
            ::org::apache::lucene::search::Scorer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.scorer(a0, a1));
              return ::org::apache::lucene::search::t_Scorer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanWeight), (PyObject *) self, "scorer", args, 2);
          }

          static PyObject *t_SpanWeight_get__query(t_SpanWeight *self, void *data)
          {
            ::org::apache::lucene::search::Query value((jobject) NULL);
            OBJ_CALL(value = self->object.getQuery());
            return ::org::apache::lucene::search::t_Query::wrap_Object(value);
          }

          static PyObject *t_SpanWeight_get__valueForNormalization(t_SpanWeight *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getValueForNormalization());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/memory/MemoryIndex.h"
#include "org/apache/lucene/search/Query.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        namespace memory {

          ::java::lang::Class *MemoryIndex::class$ = NULL;
          jmethodID *MemoryIndex::mids$ = NULL;
          bool MemoryIndex::live$ = false;

          jclass MemoryIndex::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/index/memory/MemoryIndex");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_bb0c767f] = env->getMethodID(cls, "<init>", "(Z)V");
              mids$[mid_addField_7d0c5392] = env->getMethodID(cls, "addField", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_addField_2f58d53f] = env->getMethodID(cls, "addField", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;F)V");
              mids$[mid_addField_94a4a674] = env->getMethodID(cls, "addField", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_addField_29c81a73] = env->getMethodID(cls, "addField", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;FI)V");
              mids$[mid_addField_6b38bf6f] = env->getMethodID(cls, "addField", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;FII)V");
              mids$[mid_createSearcher_cab79e71] = env->getMethodID(cls, "createSearcher", "()Lorg/apache/lucene/search/IndexSearcher;");
              mids$[mid_keywordTokenStream_f7dc1120] = env->getMethodID(cls, "keywordTokenStream", "(Ljava/util/Collection;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_search_6e301103] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/Query;)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MemoryIndex::MemoryIndex() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          MemoryIndex::MemoryIndex(jboolean a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_bb0c767f, a0)) {}

          void MemoryIndex::addField(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_addField_7d0c5392], a0.this$, a1.this$);
          }

          void MemoryIndex::addField(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1, jfloat a2) const
          {
            env->callVoidMethod(this$, mids$[mid_addField_2f58d53f], a0.this$, a1.this$, a2);
          }

          void MemoryIndex::addField(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer & a2) const
          {
            env->callVoidMethod(this$, mids$[mid_addField_94a4a674], a0.this$, a1.this$, a2.this$);
          }

          void MemoryIndex::addField(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1, jfloat a2, jint a3) const
          {
            env->callVoidMethod(this$, mids$[mid_addField_29c81a73], a0.this$, a1.this$, a2, a3);
          }

          void MemoryIndex::addField(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1, jfloat a2, jint a3, jint a4) const
          {
            env->callVoidMethod(this$, mids$[mid_addField_6b38bf6f], a0.this$, a1.this$, a2, a3, a4);
          }

          ::org::apache::lucene::search::IndexSearcher MemoryIndex::createSearcher() const
          {
            return ::org::apache::lucene::search::IndexSearcher(env->callObjectMethod(this$, mids$[mid_createSearcher_cab79e71]));
          }

          ::org::apache::lucene::analysis::TokenStream MemoryIndex::keywordTokenStream(const ::java::util::Collection & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_keywordTokenStream_f7dc1120], a0.this$));
          }

          void MemoryIndex::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }

          jfloat MemoryIndex::search(const ::org::apache::lucene::search::Query & a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_search_6e301103], a0.this$);
          }

          ::java::lang::String MemoryIndex::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        namespace memory {
          static PyObject *t_MemoryIndex_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MemoryIndex_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MemoryIndex_init_(t_MemoryIndex *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MemoryIndex_addField(t_MemoryIndex *self, PyObject *args);
          static PyObject *t_MemoryIndex_createSearcher(t_MemoryIndex *self);
          static PyObject *t_MemoryIndex_keywordTokenStream(t_MemoryIndex *self, PyObject *arg);
          static PyObject *t_MemoryIndex_reset(t_MemoryIndex *self);
          static PyObject *t_MemoryIndex_search(t_MemoryIndex *self, PyObject *arg);
          static PyObject *t_MemoryIndex_toString(t_MemoryIndex *self, PyObject *args);

          static PyMethodDef t_MemoryIndex__methods_[] = {
            DECLARE_METHOD(t_MemoryIndex, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MemoryIndex, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MemoryIndex, addField, METH_VARARGS),
            DECLARE_METHOD(t_MemoryIndex, createSearcher, METH_NOARGS),
            DECLARE_METHOD(t_MemoryIndex, keywordTokenStream, METH_O),
            DECLARE_METHOD(t_MemoryIndex, reset, METH_NOARGS),
            DECLARE_METHOD(t_MemoryIndex, search, METH_O),
            DECLARE_METHOD(t_MemoryIndex, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MemoryIndex, t_MemoryIndex, ::java::lang::Object, MemoryIndex, t_MemoryIndex_init_, 0, 0, 0, 0, 0);

          void t_MemoryIndex::install(PyObject *module)
          {
            installType(&PY_TYPE(MemoryIndex), module, "MemoryIndex", 0);
          }

          void t_MemoryIndex::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MemoryIndex).tp_dict, "class_", make_descriptor(MemoryIndex::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MemoryIndex).tp_dict, "wrapfn_", make_descriptor(t_MemoryIndex::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MemoryIndex).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MemoryIndex_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MemoryIndex::initializeClass, 1)))
              return NULL;
            return t_MemoryIndex::wrap_Object(MemoryIndex(((t_MemoryIndex *) arg)->object.this$));
          }
          static PyObject *t_MemoryIndex_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MemoryIndex::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MemoryIndex_init_(t_MemoryIndex *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                MemoryIndex object((jobject) NULL);

                INT_CALL(object = MemoryIndex());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jboolean a0;
                MemoryIndex object((jobject) NULL);

                if (!parseArgs(args, "Z", &a0))
                {
                  INT_CALL(object = MemoryIndex(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_MemoryIndex_addField(t_MemoryIndex *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);

                if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(self->object.addField(a0, a1));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 3:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                jfloat a2;

                if (!parseArgs(args, "skF", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(self->object.addField(a0, a1, a2));
                  Py_RETURN_NONE;
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);

                if (!parseArgs(args, "ssk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(self->object.addField(a0, a1, a2));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 4:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                jfloat a2;
                jint a3;

                if (!parseArgs(args, "skFI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(self->object.addField(a0, a1, a2, a3));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 5:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                jfloat a2;
                jint a3;
                jint a4;

                if (!parseArgs(args, "skFII", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(self->object.addField(a0, a1, a2, a3, a4));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "addField", args);
            return NULL;
          }

          static PyObject *t_MemoryIndex_createSearcher(t_MemoryIndex *self)
          {
            ::org::apache::lucene::search::IndexSearcher result((jobject) NULL);
            OBJ_CALL(result = self->object.createSearcher());
            return ::org::apache::lucene::search::t_IndexSearcher::wrap_Object(result);
          }

          static PyObject *t_MemoryIndex_keywordTokenStream(t_MemoryIndex *self, PyObject *arg)
          {
            ::java::util::Collection a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
            {
              OBJ_CALL(result = self->object.keywordTokenStream(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "keywordTokenStream", arg);
            return NULL;
          }

          static PyObject *t_MemoryIndex_reset(t_MemoryIndex *self)
          {
            OBJ_CALL(self->object.reset());
            Py_RETURN_NONE;
          }

          static PyObject *t_MemoryIndex_search(t_MemoryIndex *self, PyObject *arg)
          {
            ::org::apache::lucene::search::Query a0((jobject) NULL);
            jfloat result;

            if (!parseArg(arg, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.search(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "search", arg);
            return NULL;
          }

          static PyObject *t_MemoryIndex_toString(t_MemoryIndex *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(MemoryIndex), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/DistributionSPL.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *DistributionSPL::class$ = NULL;
          jmethodID *DistributionSPL::mids$ = NULL;
          bool DistributionSPL::live$ = false;

          jclass DistributionSPL::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/DistributionSPL");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_score_63482206] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DistributionSPL::DistributionSPL() : ::org::apache::lucene::search::similarities::Distribution(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat DistributionSPL::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1, jfloat a2) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_63482206], a0.this$, a1, a2);
          }

          ::java::lang::String DistributionSPL::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_DistributionSPL_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DistributionSPL_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DistributionSPL_init_(t_DistributionSPL *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DistributionSPL_score(t_DistributionSPL *self, PyObject *args);
          static PyObject *t_DistributionSPL_toString(t_DistributionSPL *self, PyObject *args);

          static PyMethodDef t_DistributionSPL__methods_[] = {
            DECLARE_METHOD(t_DistributionSPL, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DistributionSPL, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DistributionSPL, score, METH_VARARGS),
            DECLARE_METHOD(t_DistributionSPL, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DistributionSPL, t_DistributionSPL, ::org::apache::lucene::search::similarities::Distribution, DistributionSPL, t_DistributionSPL_init_, 0, 0, 0, 0, 0);

          void t_DistributionSPL::install(PyObject *module)
          {
            installType(&PY_TYPE(DistributionSPL), module, "DistributionSPL", 0);
          }

          void t_DistributionSPL::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DistributionSPL).tp_dict, "class_", make_descriptor(DistributionSPL::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DistributionSPL).tp_dict, "wrapfn_", make_descriptor(t_DistributionSPL::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DistributionSPL).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DistributionSPL_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DistributionSPL::initializeClass, 1)))
              return NULL;
            return t_DistributionSPL::wrap_Object(DistributionSPL(((t_DistributionSPL *) arg)->object.this$));
          }
          static PyObject *t_DistributionSPL_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DistributionSPL::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DistributionSPL_init_(t_DistributionSPL *self, PyObject *args, PyObject *kwds)
          {
            DistributionSPL object((jobject) NULL);

            INT_CALL(object = DistributionSPL());
            self->object = object;

            return 0;
          }

          static PyObject *t_DistributionSPL_score(t_DistributionSPL *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat a2;
            jfloat result;

            if (!parseArgs(args, "kFF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.score(a0, a1, a2));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(DistributionSPL), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_DistributionSPL_toString(t_DistributionSPL *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(DistributionSPL), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilterFactory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilter.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *TokenOffsetPayloadTokenFilterFactory::class$ = NULL;
          jmethodID *TokenOffsetPayloadTokenFilterFactory::mids$ = NULL;
          bool TokenOffsetPayloadTokenFilterFactory::live$ = false;

          jclass TokenOffsetPayloadTokenFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_4b14c4a0] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TokenOffsetPayloadTokenFilterFactory::TokenOffsetPayloadTokenFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::payloads::TokenOffsetPayloadTokenFilter TokenOffsetPayloadTokenFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::payloads::TokenOffsetPayloadTokenFilter(env->callObjectMethod(this$, mids$[mid_create_4b14c4a0], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_TokenOffsetPayloadTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenOffsetPayloadTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TokenOffsetPayloadTokenFilterFactory_init_(t_TokenOffsetPayloadTokenFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TokenOffsetPayloadTokenFilterFactory_create(t_TokenOffsetPayloadTokenFilterFactory *self, PyObject *args);

          static PyMethodDef t_TokenOffsetPayloadTokenFilterFactory__methods_[] = {
            DECLARE_METHOD(t_TokenOffsetPayloadTokenFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenOffsetPayloadTokenFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenOffsetPayloadTokenFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TokenOffsetPayloadTokenFilterFactory, t_TokenOffsetPayloadTokenFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, TokenOffsetPayloadTokenFilterFactory, t_TokenOffsetPayloadTokenFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_TokenOffsetPayloadTokenFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(TokenOffsetPayloadTokenFilterFactory), module, "TokenOffsetPayloadTokenFilterFactory", 0);
          }

          void t_TokenOffsetPayloadTokenFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TokenOffsetPayloadTokenFilterFactory).tp_dict, "class_", make_descriptor(TokenOffsetPayloadTokenFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TokenOffsetPayloadTokenFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_TokenOffsetPayloadTokenFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TokenOffsetPayloadTokenFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TokenOffsetPayloadTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TokenOffsetPayloadTokenFilterFactory::initializeClass, 1)))
              return NULL;
            return t_TokenOffsetPayloadTokenFilterFactory::wrap_Object(TokenOffsetPayloadTokenFilterFactory(((t_TokenOffsetPayloadTokenFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_TokenOffsetPayloadTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TokenOffsetPayloadTokenFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TokenOffsetPayloadTokenFilterFactory_init_(t_TokenOffsetPayloadTokenFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            TokenOffsetPayloadTokenFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = TokenOffsetPayloadTokenFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TokenOffsetPayloadTokenFilterFactory_create(t_TokenOffsetPayloadTokenFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::payloads::TokenOffsetPayloadTokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::payloads::t_TokenOffsetPayloadTokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(TokenOffsetPayloadTokenFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/mutable/MutableValueDate.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/util/mutable/MutableValue.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {

          ::java::lang::Class *MutableValueDate::class$ = NULL;
          jmethodID *MutableValueDate::mids$ = NULL;
          bool MutableValueDate::live$ = false;

          jclass MutableValueDate::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/mutable/MutableValueDate");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_duplicate_15ab3811] = env->getMethodID(cls, "duplicate", "()Lorg/apache/lucene/util/mutable/MutableValue;");
              mids$[mid_toObject_846352c3] = env->getMethodID(cls, "toObject", "()Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MutableValueDate::MutableValueDate() : ::org::apache::lucene::util::mutable$::MutableValueLong(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::util::mutable$::MutableValue MutableValueDate::duplicate() const
          {
            return ::org::apache::lucene::util::mutable$::MutableValue(env->callObjectMethod(this$, mids$[mid_duplicate_15ab3811]));
          }

          ::java::lang::Object MutableValueDate::toObject() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_toObject_846352c3]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {
          static PyObject *t_MutableValueDate_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MutableValueDate_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MutableValueDate_init_(t_MutableValueDate *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MutableValueDate_duplicate(t_MutableValueDate *self, PyObject *args);
          static PyObject *t_MutableValueDate_toObject(t_MutableValueDate *self, PyObject *args);

          static PyMethodDef t_MutableValueDate__methods_[] = {
            DECLARE_METHOD(t_MutableValueDate, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueDate, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueDate, duplicate, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueDate, toObject, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MutableValueDate, t_MutableValueDate, ::org::apache::lucene::util::mutable$::MutableValueLong, MutableValueDate, t_MutableValueDate_init_, 0, 0, 0, 0, 0);

          void t_MutableValueDate::install(PyObject *module)
          {
            installType(&PY_TYPE(MutableValueDate), module, "MutableValueDate", 0);
          }

          void t_MutableValueDate::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MutableValueDate).tp_dict, "class_", make_descriptor(MutableValueDate::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MutableValueDate).tp_dict, "wrapfn_", make_descriptor(t_MutableValueDate::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MutableValueDate).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MutableValueDate_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MutableValueDate::initializeClass, 1)))
              return NULL;
            return t_MutableValueDate::wrap_Object(MutableValueDate(((t_MutableValueDate *) arg)->object.this$));
          }
          static PyObject *t_MutableValueDate_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MutableValueDate::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MutableValueDate_init_(t_MutableValueDate *self, PyObject *args, PyObject *kwds)
          {
            MutableValueDate object((jobject) NULL);

            INT_CALL(object = MutableValueDate());
            self->object = object;

            return 0;
          }

          static PyObject *t_MutableValueDate_duplicate(t_MutableValueDate *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.duplicate());
              return ::org::apache::lucene::util::mutable$::t_MutableValue::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MutableValueDate), (PyObject *) self, "duplicate", args, 2);
          }

          static PyObject *t_MutableValueDate_toObject(t_MutableValueDate *self, PyObject *args)
          {
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toObject());
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MutableValueDate), (PyObject *) self, "toObject", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/DoubleDocValuesField.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *DoubleDocValuesField::class$ = NULL;
        jmethodID *DoubleDocValuesField::mids$ = NULL;
        bool DoubleDocValuesField::live$ = false;

        jclass DoubleDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/DoubleDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_493fce5f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;D)V");
            mids$[mid_setDoubleValue_5d1c7645] = env->getMethodID(cls, "setDoubleValue", "(D)V");
            mids$[mid_setLongValue_0ee6df2f] = env->getMethodID(cls, "setLongValue", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DoubleDocValuesField::DoubleDocValuesField(const ::java::lang::String & a0, jdouble a1) : ::org::apache::lucene::document::NumericDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_493fce5f, a0.this$, a1)) {}

        void DoubleDocValuesField::setDoubleValue(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setDoubleValue_5d1c7645], a0);
        }

        void DoubleDocValuesField::setLongValue(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setLongValue_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_DoubleDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DoubleDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DoubleDocValuesField_init_(t_DoubleDocValuesField *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DoubleDocValuesField_setDoubleValue(t_DoubleDocValuesField *self, PyObject *args);
        static PyObject *t_DoubleDocValuesField_setLongValue(t_DoubleDocValuesField *self, PyObject *args);
        static int t_DoubleDocValuesField_set__doubleValue(t_DoubleDocValuesField *self, PyObject *arg, void *data);
        static int t_DoubleDocValuesField_set__longValue(t_DoubleDocValuesField *self, PyObject *arg, void *data);
        static PyGetSetDef t_DoubleDocValuesField__fields_[] = {
          DECLARE_SET_FIELD(t_DoubleDocValuesField, doubleValue),
          DECLARE_SET_FIELD(t_DoubleDocValuesField, longValue),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DoubleDocValuesField__methods_[] = {
          DECLARE_METHOD(t_DoubleDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DoubleDocValuesField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DoubleDocValuesField, setDoubleValue, METH_VARARGS),
          DECLARE_METHOD(t_DoubleDocValuesField, setLongValue, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DoubleDocValuesField, t_DoubleDocValuesField, ::org::apache::lucene::document::NumericDocValuesField, DoubleDocValuesField, t_DoubleDocValuesField_init_, 0, 0, t_DoubleDocValuesField__fields_, 0, 0);

        void t_DoubleDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(DoubleDocValuesField), module, "DoubleDocValuesField", 0);
        }

        void t_DoubleDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DoubleDocValuesField).tp_dict, "class_", make_descriptor(DoubleDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DoubleDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_DoubleDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DoubleDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DoubleDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DoubleDocValuesField::initializeClass, 1)))
            return NULL;
          return t_DoubleDocValuesField::wrap_Object(DoubleDocValuesField(((t_DoubleDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_DoubleDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DoubleDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DoubleDocValuesField_init_(t_DoubleDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jdouble a1;
          DoubleDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "sD", &a0, &a1))
          {
            INT_CALL(object = DoubleDocValuesField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DoubleDocValuesField_setDoubleValue(t_DoubleDocValuesField *self, PyObject *args)
        {
          jdouble a0;

          if (!parseArgs(args, "D", &a0))
          {
            OBJ_CALL(self->object.setDoubleValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(DoubleDocValuesField), (PyObject *) self, "setDoubleValue", args, 2);
        }

        static PyObject *t_DoubleDocValuesField_setLongValue(t_DoubleDocValuesField *self, PyObject *args)
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.setLongValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(DoubleDocValuesField), (PyObject *) self, "setLongValue", args, 2);
        }

        static int t_DoubleDocValuesField_set__doubleValue(t_DoubleDocValuesField *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setDoubleValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "doubleValue", arg);
          return -1;
        }

        static int t_DoubleDocValuesField_set__longValue(t_DoubleDocValuesField *self, PyObject *arg, void *data)
        {
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object.setLongValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "longValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ckb/SoraniNormalizationFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/ckb/SoraniNormalizationFilter.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {

          ::java::lang::Class *SoraniNormalizationFilterFactory::class$ = NULL;
          jmethodID *SoraniNormalizationFilterFactory::mids$ = NULL;
          bool SoraniNormalizationFilterFactory::live$ = false;

          jclass SoraniNormalizationFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ckb/SoraniNormalizationFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_3fe7ed52] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/ckb/SoraniNormalizationFilter;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SoraniNormalizationFilterFactory::SoraniNormalizationFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::ckb::SoraniNormalizationFilter SoraniNormalizationFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::ckb::SoraniNormalizationFilter(env->callObjectMethod(this$, mids$[mid_create_3fe7ed52], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory SoraniNormalizationFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {
          static PyObject *t_SoraniNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SoraniNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SoraniNormalizationFilterFactory_init_(t_SoraniNormalizationFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SoraniNormalizationFilterFactory_create(t_SoraniNormalizationFilterFactory *self, PyObject *args);
          static PyObject *t_SoraniNormalizationFilterFactory_getMultiTermComponent(t_SoraniNormalizationFilterFactory *self);
          static PyObject *t_SoraniNormalizationFilterFactory_get__multiTermComponent(t_SoraniNormalizationFilterFactory *self, void *data);
          static PyGetSetDef t_SoraniNormalizationFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_SoraniNormalizationFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SoraniNormalizationFilterFactory__methods_[] = {
            DECLARE_METHOD(t_SoraniNormalizationFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniNormalizationFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniNormalizationFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_SoraniNormalizationFilterFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SoraniNormalizationFilterFactory, t_SoraniNormalizationFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, SoraniNormalizationFilterFactory, t_SoraniNormalizationFilterFactory_init_, 0, 0, t_SoraniNormalizationFilterFactory__fields_, 0, 0);

          void t_SoraniNormalizationFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(SoraniNormalizationFilterFactory), module, "SoraniNormalizationFilterFactory", 0);
          }

          void t_SoraniNormalizationFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SoraniNormalizationFilterFactory).tp_dict, "class_", make_descriptor(SoraniNormalizationFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SoraniNormalizationFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_SoraniNormalizationFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SoraniNormalizationFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SoraniNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SoraniNormalizationFilterFactory::initializeClass, 1)))
              return NULL;
            return t_SoraniNormalizationFilterFactory::wrap_Object(SoraniNormalizationFilterFactory(((t_SoraniNormalizationFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_SoraniNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SoraniNormalizationFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SoraniNormalizationFilterFactory_init_(t_SoraniNormalizationFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            SoraniNormalizationFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = SoraniNormalizationFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SoraniNormalizationFilterFactory_create(t_SoraniNormalizationFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::ckb::SoraniNormalizationFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::ckb::t_SoraniNormalizationFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SoraniNormalizationFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_SoraniNormalizationFilterFactory_getMultiTermComponent(t_SoraniNormalizationFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_SoraniNormalizationFilterFactory_get__multiTermComponent(t_SoraniNormalizationFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/PrefixWildcardQueryNode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/CloneNotSupportedException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldQueryNode.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {

              ::java::lang::Class *PrefixWildcardQueryNode::class$ = NULL;
              jmethodID *PrefixWildcardQueryNode::mids$ = NULL;
              bool PrefixWildcardQueryNode::live$ = false;

              jclass PrefixWildcardQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/nodes/PrefixWildcardQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_ddeda85c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldQueryNode;)V");
                  mids$[mid_init$_ddd81d4e] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;II)V");
                  mids$[mid_cloneTree_45dffc2c] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/standard/nodes/PrefixWildcardQueryNode;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              PrefixWildcardQueryNode::PrefixWildcardQueryNode(const ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode & a0) : ::org::apache::lucene::queryparser::flexible::standard::nodes::WildcardQueryNode(env->newObject(initializeClass, &mids$, mid_init$_ddeda85c, a0.this$)) {}

              PrefixWildcardQueryNode::PrefixWildcardQueryNode(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1, jint a2, jint a3) : ::org::apache::lucene::queryparser::flexible::standard::nodes::WildcardQueryNode(env->newObject(initializeClass, &mids$, mid_init$_ddd81d4e, a0.this$, a1.this$, a2, a3)) {}

              PrefixWildcardQueryNode PrefixWildcardQueryNode::cloneTree() const
              {
                return PrefixWildcardQueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_45dffc2c]));
              }

              ::java::lang::String PrefixWildcardQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {
              static PyObject *t_PrefixWildcardQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_PrefixWildcardQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_PrefixWildcardQueryNode_init_(t_PrefixWildcardQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_PrefixWildcardQueryNode_cloneTree(t_PrefixWildcardQueryNode *self, PyObject *args);
              static PyObject *t_PrefixWildcardQueryNode_toString(t_PrefixWildcardQueryNode *self, PyObject *args);

              static PyMethodDef t_PrefixWildcardQueryNode__methods_[] = {
                DECLARE_METHOD(t_PrefixWildcardQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PrefixWildcardQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PrefixWildcardQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_PrefixWildcardQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(PrefixWildcardQueryNode, t_PrefixWildcardQueryNode, ::org::apache::lucene::queryparser::flexible::standard::nodes::WildcardQueryNode, PrefixWildcardQueryNode, t_PrefixWildcardQueryNode_init_, 0, 0, 0, 0, 0);

              void t_PrefixWildcardQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(PrefixWildcardQueryNode), module, "PrefixWildcardQueryNode", 0);
              }

              void t_PrefixWildcardQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(PrefixWildcardQueryNode).tp_dict, "class_", make_descriptor(PrefixWildcardQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(PrefixWildcardQueryNode).tp_dict, "wrapfn_", make_descriptor(t_PrefixWildcardQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(PrefixWildcardQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_PrefixWildcardQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, PrefixWildcardQueryNode::initializeClass, 1)))
                  return NULL;
                return t_PrefixWildcardQueryNode::wrap_Object(PrefixWildcardQueryNode(((t_PrefixWildcardQueryNode *) arg)->object.this$));
              }
              static PyObject *t_PrefixWildcardQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, PrefixWildcardQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_PrefixWildcardQueryNode_init_(t_PrefixWildcardQueryNode *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode a0((jobject) NULL);
                    PrefixWildcardQueryNode object((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode::initializeClass, &a0))
                    {
                      INT_CALL(object = PrefixWildcardQueryNode(a0));
                      self->object = object;
                      break;
                    }
                  }
                  goto err;
                 case 4:
                  {
                    ::java::lang::CharSequence a0((jobject) NULL);
                    ::java::lang::CharSequence a1((jobject) NULL);
                    jint a2;
                    jint a3;
                    PrefixWildcardQueryNode object((jobject) NULL);

                    if (!parseArgs(args, "OOII", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2, &a3))
                    {
                      INT_CALL(object = PrefixWildcardQueryNode(a0, a1, a2, a3));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                 err:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_PrefixWildcardQueryNode_cloneTree(t_PrefixWildcardQueryNode *self, PyObject *args)
              {
                PrefixWildcardQueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return t_PrefixWildcardQueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(PrefixWildcardQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_PrefixWildcardQueryNode_toString(t_PrefixWildcardQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(PrefixWildcardQueryNode), (PyObject *) self, "toString", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/DrillSideways$DrillSidewaysResult.h"
#include "org/apache/lucene/search/TopDocs.h"
#include "org/apache/lucene/facet/Facets.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *DrillSideways$DrillSidewaysResult::class$ = NULL;
        jmethodID *DrillSideways$DrillSidewaysResult::mids$ = NULL;
        jfieldID *DrillSideways$DrillSidewaysResult::fids$ = NULL;
        bool DrillSideways$DrillSidewaysResult::live$ = false;

        jclass DrillSideways$DrillSidewaysResult::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/DrillSideways$DrillSidewaysResult");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_34005d2b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/Facets;Lorg/apache/lucene/search/TopDocs;)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_facets] = env->getFieldID(cls, "facets", "Lorg/apache/lucene/facet/Facets;");
            fids$[fid_hits] = env->getFieldID(cls, "hits", "Lorg/apache/lucene/search/TopDocs;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DrillSideways$DrillSidewaysResult::DrillSideways$DrillSidewaysResult(const ::org::apache::lucene::facet::Facets & a0, const ::org::apache::lucene::search::TopDocs & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_34005d2b, a0.this$, a1.this$)) {}

        ::org::apache::lucene::facet::Facets DrillSideways$DrillSidewaysResult::_get_facets() const
        {
          return ::org::apache::lucene::facet::Facets(env->getObjectField(this$, fids$[fid_facets]));
        }

        ::org::apache::lucene::search::TopDocs DrillSideways$DrillSidewaysResult::_get_hits() const
        {
          return ::org::apache::lucene::search::TopDocs(env->getObjectField(this$, fids$[fid_hits]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_DrillSideways$DrillSidewaysResult_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DrillSideways$DrillSidewaysResult_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DrillSideways$DrillSidewaysResult_init_(t_DrillSideways$DrillSidewaysResult *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DrillSideways$DrillSidewaysResult_get__facets(t_DrillSideways$DrillSidewaysResult *self, void *data);
        static PyObject *t_DrillSideways$DrillSidewaysResult_get__hits(t_DrillSideways$DrillSidewaysResult *self, void *data);

        static PyGetSetDef t_DrillSideways$DrillSidewaysResult__fields_[] = {
          DECLARE_GET_FIELD(t_DrillSideways$DrillSidewaysResult, facets),
          DECLARE_GET_FIELD(t_DrillSideways$DrillSidewaysResult, hits),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DrillSideways$DrillSidewaysResult__methods_[] = {
          DECLARE_METHOD(t_DrillSideways$DrillSidewaysResult, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DrillSideways$DrillSidewaysResult, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DrillSideways$DrillSidewaysResult, t_DrillSideways$DrillSidewaysResult, ::java::lang::Object, DrillSideways$DrillSidewaysResult, t_DrillSideways$DrillSidewaysResult_init_, 0, 0, t_DrillSideways$DrillSidewaysResult__fields_, 0, 0);

        void t_DrillSideways$DrillSidewaysResult::install(PyObject *module)
        {
          installType(&PY_TYPE(DrillSideways$DrillSidewaysResult), module, "DrillSideways$DrillSidewaysResult", 0);
        }

        void t_DrillSideways$DrillSidewaysResult::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DrillSideways$DrillSidewaysResult).tp_dict, "class_", make_descriptor(DrillSideways$DrillSidewaysResult::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DrillSideways$DrillSidewaysResult).tp_dict, "wrapfn_", make_descriptor(t_DrillSideways$DrillSidewaysResult::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DrillSideways$DrillSidewaysResult).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DrillSideways$DrillSidewaysResult_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DrillSideways$DrillSidewaysResult::initializeClass, 1)))
            return NULL;
          return t_DrillSideways$DrillSidewaysResult::wrap_Object(DrillSideways$DrillSidewaysResult(((t_DrillSideways$DrillSidewaysResult *) arg)->object.this$));
        }
        static PyObject *t_DrillSideways$DrillSidewaysResult_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DrillSideways$DrillSidewaysResult::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DrillSideways$DrillSidewaysResult_init_(t_DrillSideways$DrillSidewaysResult *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::facet::Facets a0((jobject) NULL);
          ::org::apache::lucene::search::TopDocs a1((jobject) NULL);
          DrillSideways$DrillSidewaysResult object((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::facet::Facets::initializeClass, ::org::apache::lucene::search::TopDocs::initializeClass, &a0, &a1))
          {
            INT_CALL(object = DrillSideways$DrillSidewaysResult(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DrillSideways$DrillSidewaysResult_get__facets(t_DrillSideways$DrillSidewaysResult *self, void *data)
        {
          ::org::apache::lucene::facet::Facets value((jobject) NULL);
          OBJ_CALL(value = self->object._get_facets());
          return ::org::apache::lucene::facet::t_Facets::wrap_Object(value);
        }

        static PyObject *t_DrillSideways$DrillSidewaysResult_get__hits(t_DrillSideways$DrillSidewaysResult *self, void *data)
        {
          ::org::apache::lucene::search::TopDocs value((jobject) NULL);
          OBJ_CALL(value = self->object._get_hits());
          return ::org::apache::lucene::search::t_TopDocs::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/FilterDirectory.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/LockFactory.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/Lock.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *FilterDirectory::class$ = NULL;
        jmethodID *FilterDirectory::mids$ = NULL;
        bool FilterDirectory::live$ = false;

        jclass FilterDirectory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/FilterDirectory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_clearLock_5fdc3f48] = env->getMethodID(cls, "clearLock", "(Ljava/lang/String;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_createOutput_5ad5358d] = env->getMethodID(cls, "createOutput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_deleteFile_5fdc3f48] = env->getMethodID(cls, "deleteFile", "(Ljava/lang/String;)V");
            mids$[mid_fileExists_5fdc3f44] = env->getMethodID(cls, "fileExists", "(Ljava/lang/String;)Z");
            mids$[mid_fileLength_5fdc3f54] = env->getMethodID(cls, "fileLength", "(Ljava/lang/String;)J");
            mids$[mid_getDelegate_1f3934bb] = env->getMethodID(cls, "getDelegate", "()Lorg/apache/lucene/store/Directory;");
            mids$[mid_getLockFactory_e4e9c36d] = env->getMethodID(cls, "getLockFactory", "()Lorg/apache/lucene/store/LockFactory;");
            mids$[mid_getLockID_14c7b5c5] = env->getMethodID(cls, "getLockID", "()Ljava/lang/String;");
            mids$[mid_listAll_2e6d5245] = env->getMethodID(cls, "listAll", "()[Ljava/lang/String;");
            mids$[mid_makeLock_f26bb9a8] = env->getMethodID(cls, "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");
            mids$[mid_openInput_3e1b5375] = env->getMethodID(cls, "openInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_setLockFactory_9892eb8c] = env->getMethodID(cls, "setLockFactory", "(Lorg/apache/lucene/store/LockFactory;)V");
            mids$[mid_sync_9bfb370d] = env->getMethodID(cls, "sync", "(Ljava/util/Collection;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void FilterDirectory::clearLock(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clearLock_5fdc3f48], a0.this$);
        }

        void FilterDirectory::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        ::org::apache::lucene::store::IndexOutput FilterDirectory::createOutput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexOutput(env->callObjectMethod(this$, mids$[mid_createOutput_5ad5358d], a0.this$, a1.this$));
        }

        void FilterDirectory::deleteFile(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_deleteFile_5fdc3f48], a0.this$);
        }

        jboolean FilterDirectory::fileExists(const ::java::lang::String & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_fileExists_5fdc3f44], a0.this$);
        }

        jlong FilterDirectory::fileLength(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_fileLength_5fdc3f54], a0.this$);
        }

        ::org::apache::lucene::store::Directory FilterDirectory::getDelegate() const
        {
          return ::org::apache::lucene::store::Directory(env->callObjectMethod(this$, mids$[mid_getDelegate_1f3934bb]));
        }

        ::org::apache::lucene::store::LockFactory FilterDirectory::getLockFactory() const
        {
          return ::org::apache::lucene::store::LockFactory(env->callObjectMethod(this$, mids$[mid_getLockFactory_e4e9c36d]));
        }

        ::java::lang::String FilterDirectory::getLockID() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLockID_14c7b5c5]));
        }

        JArray< ::java::lang::String > FilterDirectory::listAll() const
        {
          return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_listAll_2e6d5245]));
        }

        ::org::apache::lucene::store::Lock FilterDirectory::makeLock(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::store::Lock(env->callObjectMethod(this$, mids$[mid_makeLock_f26bb9a8], a0.this$));
        }

        ::org::apache::lucene::store::IndexInput FilterDirectory::openInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_openInput_3e1b5375], a0.this$, a1.this$));
        }

        void FilterDirectory::setLockFactory(const ::org::apache::lucene::store::LockFactory & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setLockFactory_9892eb8c], a0.this$);
        }

        void FilterDirectory::sync(const ::java::util::Collection & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_sync_9bfb370d], a0.this$);
        }

        ::java::lang::String FilterDirectory::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_FilterDirectory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterDirectory_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterDirectory_clearLock(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_close(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_createOutput(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_deleteFile(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_fileExists(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_fileLength(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_getDelegate(t_FilterDirectory *self);
        static PyObject *t_FilterDirectory_getLockFactory(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_getLockID(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_listAll(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_makeLock(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_openInput(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_setLockFactory(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_sync(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_toString(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_get__delegate(t_FilterDirectory *self, void *data);
        static PyObject *t_FilterDirectory_get__lockFactory(t_FilterDirectory *self, void *data);
        static int t_FilterDirectory_set__lockFactory(t_FilterDirectory *self, PyObject *arg, void *data);
        static PyObject *t_FilterDirectory_get__lockID(t_FilterDirectory *self, void *data);
        static PyGetSetDef t_FilterDirectory__fields_[] = {
          DECLARE_GET_FIELD(t_FilterDirectory, delegate),
          DECLARE_GETSET_FIELD(t_FilterDirectory, lockFactory),
          DECLARE_GET_FIELD(t_FilterDirectory, lockID),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilterDirectory__methods_[] = {
          DECLARE_METHOD(t_FilterDirectory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterDirectory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterDirectory, clearLock, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, close, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, createOutput, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, deleteFile, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, fileExists, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, fileLength, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, getDelegate, METH_NOARGS),
          DECLARE_METHOD(t_FilterDirectory, getLockFactory, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, getLockID, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, listAll, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, makeLock, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, openInput, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, setLockFactory, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, sync, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilterDirectory, t_FilterDirectory, ::org::apache::lucene::store::Directory, FilterDirectory, abstract_init, 0, 0, t_FilterDirectory__fields_, 0, 0);

        void t_FilterDirectory::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterDirectory), module, "FilterDirectory", 0);
        }

        void t_FilterDirectory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilterDirectory).tp_dict, "class_", make_descriptor(FilterDirectory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilterDirectory).tp_dict, "wrapfn_", make_descriptor(t_FilterDirectory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilterDirectory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterDirectory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterDirectory::initializeClass, 1)))
            return NULL;
          return t_FilterDirectory::wrap_Object(FilterDirectory(((t_FilterDirectory *) arg)->object.this$));
        }
        static PyObject *t_FilterDirectory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterDirectory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FilterDirectory_clearLock(t_FilterDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.clearLock(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FilterDirectory), (PyObject *) self, "clearLock", args, 2);
        }

        static PyObject *t_FilterDirectory_close(t_FilterDirectory *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FilterDirectory), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_FilterDirectory_createOutput(t_FilterDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexOutput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.createOutput(a0, a1));
            return ::org::apache::lucene::store::t_IndexOutput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterDirectory), (PyObject *) self, "createOutput", args, 2);
        }

        static PyObject *t_FilterDirectory_deleteFile(t_FilterDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.deleteFile(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FilterDirectory), (PyObject *) self, "deleteFile", args, 2);
        }

        static PyObject *t_FilterDirectory_fileExists(t_FilterDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileExists(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FilterDirectory), (PyObject *) self, "fileExists", args, 2);
        }

        static PyObject *t_FilterDirectory_fileLength(t_FilterDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileLength(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FilterDirectory), (PyObject *) self, "fileLength", args, 2);
        }

        static PyObject *t_FilterDirectory_getDelegate(t_FilterDirectory *self)
        {
          ::org::apache::lucene::store::Directory result((jobject) NULL);
          OBJ_CALL(result = self->object.getDelegate());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(result);
        }

        static PyObject *t_FilterDirectory_getLockFactory(t_FilterDirectory *self, PyObject *args)
        {
          ::org::apache::lucene::store::LockFactory result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getLockFactory());
            return ::org::apache::lucene::store::t_LockFactory::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterDirectory), (PyObject *) self, "getLockFactory", args, 2);
        }

        static PyObject *t_FilterDirectory_getLockID(t_FilterDirectory *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getLockID());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FilterDirectory), (PyObject *) self, "getLockID", args, 2);
        }

        static PyObject *t_FilterDirectory_listAll(t_FilterDirectory *self, PyObject *args)
        {
          JArray< ::java::lang::String > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.listAll());
            return JArray<jstring>(result.this$).wrap();
          }

          return callSuper(&PY_TYPE(FilterDirectory), (PyObject *) self, "listAll", args, 2);
        }

        static PyObject *t_FilterDirectory_makeLock(t_FilterDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::Lock result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.makeLock(a0));
            return ::org::apache::lucene::store::t_Lock::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterDirectory), (PyObject *) self, "makeLock", args, 2);
        }

        static PyObject *t_FilterDirectory_openInput(t_FilterDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.openInput(a0, a1));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterDirectory), (PyObject *) self, "openInput", args, 2);
        }

        static PyObject *t_FilterDirectory_setLockFactory(t_FilterDirectory *self, PyObject *args)
        {
          ::org::apache::lucene::store::LockFactory a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::store::LockFactory::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setLockFactory(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FilterDirectory), (PyObject *) self, "setLockFactory", args, 2);
        }

        static PyObject *t_FilterDirectory_sync(t_FilterDirectory *self, PyObject *args)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(self->object.sync(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FilterDirectory), (PyObject *) self, "sync", args, 2);
        }

        static PyObject *t_FilterDirectory_toString(t_FilterDirectory *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FilterDirectory), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FilterDirectory_get__delegate(t_FilterDirectory *self, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          OBJ_CALL(value = self->object.getDelegate());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
        }

        static PyObject *t_FilterDirectory_get__lockFactory(t_FilterDirectory *self, void *data)
        {
          ::org::apache::lucene::store::LockFactory value((jobject) NULL);
          OBJ_CALL(value = self->object.getLockFactory());
          return ::org::apache::lucene::store::t_LockFactory::wrap_Object(value);
        }
        static int t_FilterDirectory_set__lockFactory(t_FilterDirectory *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::store::LockFactory value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::store::LockFactory::initializeClass, &value))
            {
              INT_CALL(self->object.setLockFactory(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "lockFactory", arg);
          return -1;
        }

        static PyObject *t_FilterDirectory_get__lockID(t_FilterDirectory *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getLockID());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/Compile.h"
#include "java/lang/Exception.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *Compile::class$ = NULL;
      jmethodID *Compile::mids$ = NULL;
      bool Compile::live$ = false;

      jclass Compile::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/Compile");

          mids$ = new jmethodID[max_mid];
          mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      void Compile::main(const JArray< ::java::lang::String > & a0)
      {
        jclass cls = env->getClass(initializeClass);
        env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_Compile_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Compile_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Compile_main(PyTypeObject *type, PyObject *arg);

      static PyMethodDef t_Compile__methods_[] = {
        DECLARE_METHOD(t_Compile, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Compile, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Compile, main, METH_O | METH_CLASS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(Compile, t_Compile, ::java::lang::Object, Compile, abstract_init, 0, 0, 0, 0, 0);

      void t_Compile::install(PyObject *module)
      {
        installType(&PY_TYPE(Compile), module, "Compile", 0);
      }

      void t_Compile::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(Compile).tp_dict, "class_", make_descriptor(Compile::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(Compile).tp_dict, "wrapfn_", make_descriptor(t_Compile::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(Compile).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Compile_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Compile::initializeClass, 1)))
          return NULL;
        return t_Compile::wrap_Object(Compile(((t_Compile *) arg)->object.this$));
      }
      static PyObject *t_Compile_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Compile::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_Compile_main(PyTypeObject *type, PyObject *arg)
      {
        JArray< ::java::lang::String > a0((jobject) NULL);

        if (!parseArg(arg, "[s", &a0))
        {
          OBJ_CALL(::org::egothor::stemmer::Compile::main(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError(type, "main", arg);
        return NULL;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/concurrent/Executors.h"
#include "java/lang/Runnable.h"
#include "java/lang/Class.h"
#include "java/util/concurrent/Callable.h"
#include "java/util/concurrent/ScheduledExecutorService.h"
#include "java/util/concurrent/ExecutorService.h"
#include "java/util/concurrent/ThreadFactory.h"
#include "JArray.h"

namespace java {
  namespace util {
    namespace concurrent {

      ::java::lang::Class *Executors::class$ = NULL;
      jmethodID *Executors::mids$ = NULL;
      bool Executors::live$ = false;

      jclass Executors::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("java/util/concurrent/Executors");

          mids$ = new jmethodID[max_mid];
          mids$[mid_callable_a93e49d5] = env->getStaticMethodID(cls, "callable", "(Ljava/lang/Runnable;)Ljava/util/concurrent/Callable;");
          mids$[mid_callable_27f60351] = env->getStaticMethodID(cls, "callable", "(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/Callable;");
          mids$[mid_defaultThreadFactory_1a8a37c6] = env->getStaticMethodID(cls, "defaultThreadFactory", "()Ljava/util/concurrent/ThreadFactory;");
          mids$[mid_newCachedThreadPool_7959084a] = env->getStaticMethodID(cls, "newCachedThreadPool", "()Ljava/util/concurrent/ExecutorService;");
          mids$[mid_newCachedThreadPool_ef1f74b9] = env->getStaticMethodID(cls, "newCachedThreadPool", "(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;");
          mids$[mid_newFixedThreadPool_8e681bb4] = env->getStaticMethodID(cls, "newFixedThreadPool", "(I)Ljava/util/concurrent/ExecutorService;");
          mids$[mid_newFixedThreadPool_366a7197] = env->getStaticMethodID(cls, "newFixedThreadPool", "(ILjava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;");
          mids$[mid_newScheduledThreadPool_86106422] = env->getStaticMethodID(cls, "newScheduledThreadPool", "(I)Ljava/util/concurrent/ScheduledExecutorService;");
          mids$[mid_newScheduledThreadPool_6380c25f] = env->getStaticMethodID(cls, "newScheduledThreadPool", "(ILjava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;");
          mids$[mid_newSingleThreadExecutor_7959084a] = env->getStaticMethodID(cls, "newSingleThreadExecutor", "()Ljava/util/concurrent/ExecutorService;");
          mids$[mid_newSingleThreadExecutor_ef1f74b9] = env->getStaticMethodID(cls, "newSingleThreadExecutor", "(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;");
          mids$[mid_newSingleThreadScheduledExecutor_2e78bbb0] = env->getStaticMethodID(cls, "newSingleThreadScheduledExecutor", "()Ljava/util/concurrent/ScheduledExecutorService;");
          mids$[mid_newSingleThreadScheduledExecutor_e92dd26d] = env->getStaticMethodID(cls, "newSingleThreadScheduledExecutor", "(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;");
          mids$[mid_privilegedCallable_9221e3a3] = env->getStaticMethodID(cls, "privilegedCallable", "(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Callable;");
          mids$[mid_privilegedCallableUsingCurrentClassLoader_9221e3a3] = env->getStaticMethodID(cls, "privilegedCallableUsingCurrentClassLoader", "(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Callable;");
          mids$[mid_privilegedThreadFactory_1a8a37c6] = env->getStaticMethodID(cls, "privilegedThreadFactory", "()Ljava/util/concurrent/ThreadFactory;");
          mids$[mid_unconfigurableExecutorService_d4c55b25] = env->getStaticMethodID(cls, "unconfigurableExecutorService", "(Ljava/util/concurrent/ExecutorService;)Ljava/util/concurrent/ExecutorService;");
          mids$[mid_unconfigurableScheduledExecutorService_afd7b7c3] = env->getStaticMethodID(cls, "unconfigurableScheduledExecutorService", "(Ljava/util/concurrent/ScheduledExecutorService;)Ljava/util/concurrent/ScheduledExecutorService;");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      ::java::util::concurrent::Callable Executors::callable(const ::java::lang::Runnable & a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::Callable(env->callStaticObjectMethod(cls, mids$[mid_callable_a93e49d5], a0.this$));
      }

      ::java::util::concurrent::Callable Executors::callable(const ::java::lang::Runnable & a0, const ::java::lang::Object & a1)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::Callable(env->callStaticObjectMethod(cls, mids$[mid_callable_27f60351], a0.this$, a1.this$));
      }

      ::java::util::concurrent::ThreadFactory Executors::defaultThreadFactory()
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ThreadFactory(env->callStaticObjectMethod(cls, mids$[mid_defaultThreadFactory_1a8a37c6]));
      }

      ::java::util::concurrent::ExecutorService Executors::newCachedThreadPool()
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ExecutorService(env->callStaticObjectMethod(cls, mids$[mid_newCachedThreadPool_7959084a]));
      }

      ::java::util::concurrent::ExecutorService Executors::newCachedThreadPool(const ::java::util::concurrent::ThreadFactory & a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ExecutorService(env->callStaticObjectMethod(cls, mids$[mid_newCachedThreadPool_ef1f74b9], a0.this$));
      }

      ::java::util::concurrent::ExecutorService Executors::newFixedThreadPool(jint a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ExecutorService(env->callStaticObjectMethod(cls, mids$[mid_newFixedThreadPool_8e681bb4], a0));
      }

      ::java::util::concurrent::ExecutorService Executors::newFixedThreadPool(jint a0, const ::java::util::concurrent::ThreadFactory & a1)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ExecutorService(env->callStaticObjectMethod(cls, mids$[mid_newFixedThreadPool_366a7197], a0, a1.this$));
      }

      ::java::util::concurrent::ScheduledExecutorService Executors::newScheduledThreadPool(jint a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ScheduledExecutorService(env->callStaticObjectMethod(cls, mids$[mid_newScheduledThreadPool_86106422], a0));
      }

      ::java::util::concurrent::ScheduledExecutorService Executors::newScheduledThreadPool(jint a0, const ::java::util::concurrent::ThreadFactory & a1)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ScheduledExecutorService(env->callStaticObjectMethod(cls, mids$[mid_newScheduledThreadPool_6380c25f], a0, a1.this$));
      }

      ::java::util::concurrent::ExecutorService Executors::newSingleThreadExecutor()
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ExecutorService(env->callStaticObjectMethod(cls, mids$[mid_newSingleThreadExecutor_7959084a]));
      }

      ::java::util::concurrent::ExecutorService Executors::newSingleThreadExecutor(const ::java::util::concurrent::ThreadFactory & a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ExecutorService(env->callStaticObjectMethod(cls, mids$[mid_newSingleThreadExecutor_ef1f74b9], a0.this$));
      }

      ::java::util::concurrent::ScheduledExecutorService Executors::newSingleThreadScheduledExecutor()
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ScheduledExecutorService(env->callStaticObjectMethod(cls, mids$[mid_newSingleThreadScheduledExecutor_2e78bbb0]));
      }

      ::java::util::concurrent::ScheduledExecutorService Executors::newSingleThreadScheduledExecutor(const ::java::util::concurrent::ThreadFactory & a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ScheduledExecutorService(env->callStaticObjectMethod(cls, mids$[mid_newSingleThreadScheduledExecutor_e92dd26d], a0.this$));
      }

      ::java::util::concurrent::Callable Executors::privilegedCallable(const ::java::util::concurrent::Callable & a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::Callable(env->callStaticObjectMethod(cls, mids$[mid_privilegedCallable_9221e3a3], a0.this$));
      }

      ::java::util::concurrent::Callable Executors::privilegedCallableUsingCurrentClassLoader(const ::java::util::concurrent::Callable & a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::Callable(env->callStaticObjectMethod(cls, mids$[mid_privilegedCallableUsingCurrentClassLoader_9221e3a3], a0.this$));
      }

      ::java::util::concurrent::ThreadFactory Executors::privilegedThreadFactory()
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ThreadFactory(env->callStaticObjectMethod(cls, mids$[mid_privilegedThreadFactory_1a8a37c6]));
      }

      ::java::util::concurrent::ExecutorService Executors::unconfigurableExecutorService(const ::java::util::concurrent::ExecutorService & a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ExecutorService(env->callStaticObjectMethod(cls, mids$[mid_unconfigurableExecutorService_d4c55b25], a0.this$));
      }

      ::java::util::concurrent::ScheduledExecutorService Executors::unconfigurableScheduledExecutorService(const ::java::util::concurrent::ScheduledExecutorService & a0)
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::util::concurrent::ScheduledExecutorService(env->callStaticObjectMethod(cls, mids$[mid_unconfigurableScheduledExecutorService_afd7b7c3], a0.this$));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    namespace concurrent {
      static PyObject *t_Executors_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Executors_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Executors_callable(PyTypeObject *type, PyObject *args);
      static PyObject *t_Executors_defaultThreadFactory(PyTypeObject *type);
      static PyObject *t_Executors_newCachedThreadPool(PyTypeObject *type, PyObject *args);
      static PyObject *t_Executors_newFixedThreadPool(PyTypeObject *type, PyObject *args);
      static PyObject *t_Executors_newScheduledThreadPool(PyTypeObject *type, PyObject *args);
      static PyObject *t_Executors_newSingleThreadExecutor(PyTypeObject *type, PyObject *args);
      static PyObject *t_Executors_newSingleThreadScheduledExecutor(PyTypeObject *type, PyObject *args);
      static PyObject *t_Executors_privilegedCallable(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Executors_privilegedCallableUsingCurrentClassLoader(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Executors_privilegedThreadFactory(PyTypeObject *type);
      static PyObject *t_Executors_unconfigurableExecutorService(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Executors_unconfigurableScheduledExecutorService(PyTypeObject *type, PyObject *arg);

      static PyMethodDef t_Executors__methods_[] = {
        DECLARE_METHOD(t_Executors, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Executors, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Executors, callable, METH_VARARGS | METH_CLASS),
        DECLARE_METHOD(t_Executors, defaultThreadFactory, METH_NOARGS | METH_CLASS),
        DECLARE_METHOD(t_Executors, newCachedThreadPool, METH_VARARGS | METH_CLASS),
        DECLARE_METHOD(t_Executors, newFixedThreadPool, METH_VARARGS | METH_CLASS),
        DECLARE_METHOD(t_Executors, newScheduledThreadPool, METH_VARARGS | METH_CLASS),
        DECLARE_METHOD(t_Executors, newSingleThreadExecutor, METH_VARARGS | METH_CLASS),
        DECLARE_METHOD(t_Executors, newSingleThreadScheduledExecutor, METH_VARARGS | METH_CLASS),
        DECLARE_METHOD(t_Executors, privilegedCallable, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Executors, privilegedCallableUsingCurrentClassLoader, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Executors, privilegedThreadFactory, METH_NOARGS | METH_CLASS),
        DECLARE_METHOD(t_Executors, unconfigurableExecutorService, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Executors, unconfigurableScheduledExecutorService, METH_O | METH_CLASS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(Executors, t_Executors, ::java::lang::Object, Executors, abstract_init, 0, 0, 0, 0, 0);

      void t_Executors::install(PyObject *module)
      {
        installType(&PY_TYPE(Executors), module, "Executors", 0);
      }

      void t_Executors::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(Executors).tp_dict, "class_", make_descriptor(Executors::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(Executors).tp_dict, "wrapfn_", make_descriptor(t_Executors::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(Executors).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Executors_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Executors::initializeClass, 1)))
          return NULL;
        return t_Executors::wrap_Object(Executors(((t_Executors *) arg)->object.this$));
      }
      static PyObject *t_Executors_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Executors::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_Executors_callable(PyTypeObject *type, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            ::java::lang::Runnable a0((jobject) NULL);
            ::java::util::concurrent::Callable result((jobject) NULL);

            if (!parseArgs(args, "k", ::java::lang::Runnable::initializeClass, &a0))
            {
              OBJ_CALL(result = ::java::util::concurrent::Executors::callable(a0));
              return ::java::util::concurrent::t_Callable::wrap_Object(result, &::java::lang::PY_TYPE(Object));
            }
          }
          break;
         case 2:
          {
            ::java::lang::Runnable a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::java::util::concurrent::Callable result((jobject) NULL);

            if (!parseArgs(args, "ko", ::java::lang::Runnable::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::java::util::concurrent::Executors::callable(a0, a1));
              return ::java::util::concurrent::t_Callable::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError(type, "callable", args);
        return NULL;
      }

      static PyObject *t_Executors_defaultThreadFactory(PyTypeObject *type)
      {
        ::java::util::concurrent::ThreadFactory result((jobject) NULL);
        OBJ_CALL(result = ::java::util::concurrent::Executors::defaultThreadFactory());
        return ::java::util::concurrent::t_ThreadFactory::wrap_Object(result);
      }

      static PyObject *t_Executors_newCachedThreadPool(PyTypeObject *type, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 0:
          {
            ::java::util::concurrent::ExecutorService result((jobject) NULL);
            OBJ_CALL(result = ::java::util::concurrent::Executors::newCachedThreadPool());
            return ::java::util::concurrent::t_ExecutorService::wrap_Object(result);
          }
          break;
         case 1:
          {
            ::java::util::concurrent::ThreadFactory a0((jobject) NULL);
            ::java::util::concurrent::ExecutorService result((jobject) NULL);

            if (!parseArgs(args, "k", ::java::util::concurrent::ThreadFactory::initializeClass, &a0))
            {
              OBJ_CALL(result = ::java::util::concurrent::Executors::newCachedThreadPool(a0));
              return ::java::util::concurrent::t_ExecutorService::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError(type, "newCachedThreadPool", args);
        return NULL;
      }

      static PyObject *t_Executors_newFixedThreadPool(PyTypeObject *type, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            jint a0;
            ::java::util::concurrent::ExecutorService result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = ::java::util::concurrent::Executors::newFixedThreadPool(a0));
              return ::java::util::concurrent::t_ExecutorService::wrap_Object(result);
            }
          }
          break;
         case 2:
          {
            jint a0;
            ::java::util::concurrent::ThreadFactory a1((jobject) NULL);
            ::java::util::concurrent::ExecutorService result((jobject) NULL);

            if (!parseArgs(args, "Ik", ::java::util::concurrent::ThreadFactory::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::java::util::concurrent::Executors::newFixedThreadPool(a0, a1));
              return ::java::util::concurrent::t_ExecutorService::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError(type, "newFixedThreadPool", args);
        return NULL;
      }

      static PyObject *t_Executors_newScheduledThreadPool(PyTypeObject *type, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            jint a0;
            ::java::util::concurrent::ScheduledExecutorService result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = ::java::util::concurrent::Executors::newScheduledThreadPool(a0));
              return ::java::util::concurrent::t_ScheduledExecutorService::wrap_Object(result);
            }
          }
          break;
         case 2:
          {
            jint a0;
            ::java::util::concurrent::ThreadFactory a1((jobject) NULL);
            ::java::util::concurrent::ScheduledExecutorService result((jobject) NULL);

            if (!parseArgs(args, "Ik", ::java::util::concurrent::ThreadFactory::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::java::util::concurrent::Executors::newScheduledThreadPool(a0, a1));
              return ::java::util::concurrent::t_ScheduledExecutorService::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError(type, "newScheduledThreadPool", args);
        return NULL;
      }

      static PyObject *t_Executors_newSingleThreadExecutor(PyTypeObject *type, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 0:
          {
            ::java::util::concurrent::ExecutorService result((jobject) NULL);
            OBJ_CALL(result = ::java::util::concurrent::Executors::newSingleThreadExecutor());
            return ::java::util::concurrent::t_ExecutorService::wrap_Object(result);
          }
          break;
         case 1:
          {
            ::java::util::concurrent::ThreadFactory a0((jobject) NULL);
            ::java::util::concurrent::ExecutorService result((jobject) NULL);

            if (!parseArgs(args, "k", ::java::util::concurrent::ThreadFactory::initializeClass, &a0))
            {
              OBJ_CALL(result = ::java::util::concurrent::Executors::newSingleThreadExecutor(a0));
              return ::java::util::concurrent::t_ExecutorService::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError(type, "newSingleThreadExecutor", args);
        return NULL;
      }

      static PyObject *t_Executors_newSingleThreadScheduledExecutor(PyTypeObject *type, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 0:
          {
            ::java::util::concurrent::ScheduledExecutorService result((jobject) NULL);
            OBJ_CALL(result = ::java::util::concurrent::Executors::newSingleThreadScheduledExecutor());
            return ::java::util::concurrent::t_ScheduledExecutorService::wrap_Object(result);
          }
          break;
         case 1:
          {
            ::java::util::concurrent::ThreadFactory a0((jobject) NULL);
            ::java::util::concurrent::ScheduledExecutorService result((jobject) NULL);

            if (!parseArgs(args, "k", ::java::util::concurrent::ThreadFactory::initializeClass, &a0))
            {
              OBJ_CALL(result = ::java::util::concurrent::Executors::newSingleThreadScheduledExecutor(a0));
              return ::java::util::concurrent::t_ScheduledExecutorService::wrap_Object(result);
            }
          }
        }

        PyErr_SetArgsError(type, "newSingleThreadScheduledExecutor", args);
        return NULL;
      }

      static PyObject *t_Executors_privilegedCallable(PyTypeObject *type, PyObject *arg)
      {
        ::java::util::concurrent::Callable a0((jobject) NULL);
        PyTypeObject **p0;
        ::java::util::concurrent::Callable result((jobject) NULL);

        if (!parseArg(arg, "K", ::java::util::concurrent::Callable::initializeClass, &a0, &p0, ::java::util::concurrent::t_Callable::parameters_))
        {
          OBJ_CALL(result = ::java::util::concurrent::Executors::privilegedCallable(a0));
          return ::java::util::concurrent::t_Callable::wrap_Object(result);
        }

        PyErr_SetArgsError(type, "privilegedCallable", arg);
        return NULL;
      }

      static PyObject *t_Executors_privilegedCallableUsingCurrentClassLoader(PyTypeObject *type, PyObject *arg)
      {
        ::java::util::concurrent::Callable a0((jobject) NULL);
        PyTypeObject **p0;
        ::java::util::concurrent::Callable result((jobject) NULL);

        if (!parseArg(arg, "K", ::java::util::concurrent::Callable::initializeClass, &a0, &p0, ::java::util::concurrent::t_Callable::parameters_))
        {
          OBJ_CALL(result = ::java::util::concurrent::Executors::privilegedCallableUsingCurrentClassLoader(a0));
          return ::java::util::concurrent::t_Callable::wrap_Object(result);
        }

        PyErr_SetArgsError(type, "privilegedCallableUsingCurrentClassLoader", arg);
        return NULL;
      }

      static PyObject *t_Executors_privilegedThreadFactory(PyTypeObject *type)
      {
        ::java::util::concurrent::ThreadFactory result((jobject) NULL);
        OBJ_CALL(result = ::java::util::concurrent::Executors::privilegedThreadFactory());
        return ::java::util::concurrent::t_ThreadFactory::wrap_Object(result);
      }

      static PyObject *t_Executors_unconfigurableExecutorService(PyTypeObject *type, PyObject *arg)
      {
        ::java::util::concurrent::ExecutorService a0((jobject) NULL);
        ::java::util::concurrent::ExecutorService result((jobject) NULL);

        if (!parseArg(arg, "k", ::java::util::concurrent::ExecutorService::initializeClass, &a0))
        {
          OBJ_CALL(result = ::java::util::concurrent::Executors::unconfigurableExecutorService(a0));
          return ::java::util::concurrent::t_ExecutorService::wrap_Object(result);
        }

        PyErr_SetArgsError(type, "unconfigurableExecutorService", arg);
        return NULL;
      }

      static PyObject *t_Executors_unconfigurableScheduledExecutorService(PyTypeObject *type, PyObject *arg)
      {
        ::java::util::concurrent::ScheduledExecutorService a0((jobject) NULL);
        ::java::util::concurrent::ScheduledExecutorService result((jobject) NULL);

        if (!parseArg(arg, "k", ::java::util::concurrent::ScheduledExecutorService::initializeClass, &a0))
        {
          OBJ_CALL(result = ::java::util::concurrent::Executors::unconfigurableScheduledExecutorService(a0));
          return ::java::util::concurrent::t_ScheduledExecutorService::wrap_Object(result);
        }

        PyErr_SetArgsError(type, "unconfigurableScheduledExecutorService", arg);
        return NULL;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/BoundaryScanner.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *BoundaryScanner::class$ = NULL;
          jmethodID *BoundaryScanner::mids$ = NULL;
          bool BoundaryScanner::live$ = false;

          jclass BoundaryScanner::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/BoundaryScanner");

              mids$ = new jmethodID[max_mid];
              mids$[mid_findEndOffset_f3d950f1] = env->getMethodID(cls, "findEndOffset", "(Ljava/lang/StringBuilder;I)I");
              mids$[mid_findStartOffset_f3d950f1] = env->getMethodID(cls, "findStartOffset", "(Ljava/lang/StringBuilder;I)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint BoundaryScanner::findEndOffset(const ::java::lang::StringBuilder & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_findEndOffset_f3d950f1], a0.this$, a1);
          }

          jint BoundaryScanner::findStartOffset(const ::java::lang::StringBuilder & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_findStartOffset_f3d950f1], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_BoundaryScanner_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BoundaryScanner_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BoundaryScanner_findEndOffset(t_BoundaryScanner *self, PyObject *args);
          static PyObject *t_BoundaryScanner_findStartOffset(t_BoundaryScanner *self, PyObject *args);

          static PyMethodDef t_BoundaryScanner__methods_[] = {
            DECLARE_METHOD(t_BoundaryScanner, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BoundaryScanner, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BoundaryScanner, findEndOffset, METH_VARARGS),
            DECLARE_METHOD(t_BoundaryScanner, findStartOffset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BoundaryScanner, t_BoundaryScanner, ::java::lang::Object, BoundaryScanner, abstract_init, 0, 0, 0, 0, 0);

          void t_BoundaryScanner::install(PyObject *module)
          {
            installType(&PY_TYPE(BoundaryScanner), module, "BoundaryScanner", 0);
          }

          void t_BoundaryScanner::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BoundaryScanner).tp_dict, "class_", make_descriptor(BoundaryScanner::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BoundaryScanner).tp_dict, "wrapfn_", make_descriptor(t_BoundaryScanner::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BoundaryScanner).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BoundaryScanner_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BoundaryScanner::initializeClass, 1)))
              return NULL;
            return t_BoundaryScanner::wrap_Object(BoundaryScanner(((t_BoundaryScanner *) arg)->object.this$));
          }
          static PyObject *t_BoundaryScanner_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BoundaryScanner::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_BoundaryScanner_findEndOffset(t_BoundaryScanner *self, PyObject *args)
          {
            ::java::lang::StringBuilder a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "kI", ::java::lang::StringBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.findEndOffset(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "findEndOffset", args);
            return NULL;
          }

          static PyObject *t_BoundaryScanner_findStartOffset(t_BoundaryScanner *self, PyObject *args)
          {
            ::java::lang::StringBuilder a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "kI", ::java::lang::StringBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.findStartOffset(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "findStartOffset", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/BasicModelIF.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *BasicModelIF::class$ = NULL;
          jmethodID *BasicModelIF::mids$ = NULL;
          bool BasicModelIF::live$ = false;

          jclass BasicModelIF::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/BasicModelIF");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_score_076760a9] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;F)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BasicModelIF::BasicModelIF() : ::org::apache::lucene::search::similarities::BasicModel(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat BasicModelIF::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_076760a9], a0.this$, a1);
          }

          ::java::lang::String BasicModelIF::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_BasicModelIF_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicModelIF_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BasicModelIF_init_(t_BasicModelIF *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BasicModelIF_score(t_BasicModelIF *self, PyObject *args);
          static PyObject *t_BasicModelIF_toString(t_BasicModelIF *self, PyObject *args);

          static PyMethodDef t_BasicModelIF__methods_[] = {
            DECLARE_METHOD(t_BasicModelIF, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelIF, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelIF, score, METH_VARARGS),
            DECLARE_METHOD(t_BasicModelIF, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BasicModelIF, t_BasicModelIF, ::org::apache::lucene::search::similarities::BasicModel, BasicModelIF, t_BasicModelIF_init_, 0, 0, 0, 0, 0);

          void t_BasicModelIF::install(PyObject *module)
          {
            installType(&PY_TYPE(BasicModelIF), module, "BasicModelIF", 0);
          }

          void t_BasicModelIF::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BasicModelIF).tp_dict, "class_", make_descriptor(BasicModelIF::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BasicModelIF).tp_dict, "wrapfn_", make_descriptor(t_BasicModelIF::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BasicModelIF).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BasicModelIF_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BasicModelIF::initializeClass, 1)))
              return NULL;
            return t_BasicModelIF::wrap_Object(BasicModelIF(((t_BasicModelIF *) arg)->object.this$));
          }
          static PyObject *t_BasicModelIF_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BasicModelIF::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BasicModelIF_init_(t_BasicModelIF *self, PyObject *args, PyObject *kwds)
          {
            BasicModelIF object((jobject) NULL);

            INT_CALL(object = BasicModelIF());
            self->object = object;

            return 0;
          }

          static PyObject *t_BasicModelIF_score(t_BasicModelIF *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat result;

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(BasicModelIF), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_BasicModelIF_toString(t_BasicModelIF *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(BasicModelIF), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/BytesRefIterator.h"
#include "java/util/Comparator.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *BytesRefIterator::class$ = NULL;
        jmethodID *BytesRefIterator::mids$ = NULL;
        bool BytesRefIterator::live$ = false;
        BytesRefIterator *BytesRefIterator::EMPTY = NULL;

        jclass BytesRefIterator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/BytesRefIterator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
            mids$[mid_next_4ae19461] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY = new BytesRefIterator(env->getStaticObjectField(cls, "EMPTY", "Lorg/apache/lucene/util/BytesRefIterator;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::Comparator BytesRefIterator::getComparator() const
        {
          return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
        }

        ::org::apache::lucene::util::BytesRef BytesRefIterator::next() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_4ae19461]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_BytesRefIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BytesRefIterator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BytesRefIterator_getComparator(t_BytesRefIterator *self);
        static PyObject *t_BytesRefIterator_next(t_BytesRefIterator *self);
        static PyObject *t_BytesRefIterator_get__comparator(t_BytesRefIterator *self, void *data);
        static PyGetSetDef t_BytesRefIterator__fields_[] = {
          DECLARE_GET_FIELD(t_BytesRefIterator, comparator),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BytesRefIterator__methods_[] = {
          DECLARE_METHOD(t_BytesRefIterator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefIterator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefIterator, getComparator, METH_NOARGS),
          DECLARE_METHOD(t_BytesRefIterator, next, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BytesRefIterator, t_BytesRefIterator, ::java::lang::Object, BytesRefIterator, abstract_init, PyObject_SelfIter, ((PyObject *(*)(t_BytesRefIterator *)) get_next< t_BytesRefIterator,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >), t_BytesRefIterator__fields_, 0, 0);

        void t_BytesRefIterator::install(PyObject *module)
        {
          installType(&PY_TYPE(BytesRefIterator), module, "BytesRefIterator", 0);
        }

        void t_BytesRefIterator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BytesRefIterator).tp_dict, "class_", make_descriptor(BytesRefIterator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BytesRefIterator).tp_dict, "wrapfn_", make_descriptor(t_BytesRefIterator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BytesRefIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(BytesRefIterator::initializeClass);
          PyDict_SetItemString(PY_TYPE(BytesRefIterator).tp_dict, "EMPTY", make_descriptor(t_BytesRefIterator::wrap_Object(*BytesRefIterator::EMPTY)));
        }

        static PyObject *t_BytesRefIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BytesRefIterator::initializeClass, 1)))
            return NULL;
          return t_BytesRefIterator::wrap_Object(BytesRefIterator(((t_BytesRefIterator *) arg)->object.this$));
        }
        static PyObject *t_BytesRefIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BytesRefIterator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BytesRefIterator_getComparator(t_BytesRefIterator *self)
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
        }

        static PyObject *t_BytesRefIterator_next(t_BytesRefIterator *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.next());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_BytesRefIterator_get__comparator(t_BytesRefIterator *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/Date.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/StringBuffer.h"
#include "java/util/Locale.h"
#include "JArray.h"

namespace java {
  namespace text {

    ::java::lang::Class *SimpleDateFormat::class$ = NULL;
    jmethodID *SimpleDateFormat::mids$ = NULL;
    bool SimpleDateFormat::live$ = false;

    jclass SimpleDateFormat::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/text/SimpleDateFormat");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_f32a91b9] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/util/Locale;)V");
        mids$[mid_applyLocalizedPattern_5fdc3f48] = env->getMethodID(cls, "applyLocalizedPattern", "(Ljava/lang/String;)V");
        mids$[mid_applyPattern_5fdc3f48] = env->getMethodID(cls, "applyPattern", "(Ljava/lang/String;)V");
        mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_get2DigitYearStart_6e14513a] = env->getMethodID(cls, "get2DigitYearStart", "()Ljava/util/Date;");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_set2DigitYearStart_aa83a4b3] = env->getMethodID(cls, "set2DigitYearStart", "(Ljava/util/Date;)V");
        mids$[mid_toLocalizedPattern_14c7b5c5] = env->getMethodID(cls, "toLocalizedPattern", "()Ljava/lang/String;");
        mids$[mid_toPattern_14c7b5c5] = env->getMethodID(cls, "toPattern", "()Ljava/lang/String;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    SimpleDateFormat::SimpleDateFormat() : ::java::text::DateFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    SimpleDateFormat::SimpleDateFormat(const ::java::lang::String & a0) : ::java::text::DateFormat(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    SimpleDateFormat::SimpleDateFormat(const ::java::lang::String & a0, const ::java::util::Locale & a1) : ::java::text::DateFormat(env->newObject(initializeClass, &mids$, mid_init$_f32a91b9, a0.this$, a1.this$)) {}

    void SimpleDateFormat::applyLocalizedPattern(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_applyLocalizedPattern_5fdc3f48], a0.this$);
    }

    void SimpleDateFormat::applyPattern(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_applyPattern_5fdc3f48], a0.this$);
    }

    ::java::lang::Object SimpleDateFormat::clone() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_clone_846352c3]));
    }

    jboolean SimpleDateFormat::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    ::java::util::Date SimpleDateFormat::get2DigitYearStart() const
    {
      return ::java::util::Date(env->callObjectMethod(this$, mids$[mid_get2DigitYearStart_6e14513a]));
    }

    jint SimpleDateFormat::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    void SimpleDateFormat::set2DigitYearStart(const ::java::util::Date & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_set2DigitYearStart_aa83a4b3], a0.this$);
    }

    ::java::lang::String SimpleDateFormat::toLocalizedPattern() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toLocalizedPattern_14c7b5c5]));
    }

    ::java::lang::String SimpleDateFormat::toPattern() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toPattern_14c7b5c5]));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace text {
    static PyObject *t_SimpleDateFormat_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_SimpleDateFormat_instance_(PyTypeObject *type, PyObject *arg);
    static int t_SimpleDateFormat_init_(t_SimpleDateFormat *self, PyObject *args, PyObject *kwds);
    static PyObject *t_SimpleDateFormat_applyLocalizedPattern(t_SimpleDateFormat *self, PyObject *arg);
    static PyObject *t_SimpleDateFormat_applyPattern(t_SimpleDateFormat *self, PyObject *arg);
    static PyObject *t_SimpleDateFormat_clone(t_SimpleDateFormat *self, PyObject *args);
    static PyObject *t_SimpleDateFormat_equals(t_SimpleDateFormat *self, PyObject *args);
    static PyObject *t_SimpleDateFormat_get2DigitYearStart(t_SimpleDateFormat *self);
    static PyObject *t_SimpleDateFormat_hashCode(t_SimpleDateFormat *self, PyObject *args);
    static PyObject *t_SimpleDateFormat_set2DigitYearStart(t_SimpleDateFormat *self, PyObject *arg);
    static PyObject *t_SimpleDateFormat_toLocalizedPattern(t_SimpleDateFormat *self);
    static PyObject *t_SimpleDateFormat_toPattern(t_SimpleDateFormat *self);
    static PyObject *t_SimpleDateFormat_get__2DigitYearStart(t_SimpleDateFormat *self, void *data);
    static int t_SimpleDateFormat_set__2DigitYearStart(t_SimpleDateFormat *self, PyObject *arg, void *data);
    static PyGetSetDef t_SimpleDateFormat__fields_[] = {
      DECLARE_GETSET_FIELD(t_SimpleDateFormat, 2DigitYearStart),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_SimpleDateFormat__methods_[] = {
      DECLARE_METHOD(t_SimpleDateFormat, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_SimpleDateFormat, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_SimpleDateFormat, applyLocalizedPattern, METH_O),
      DECLARE_METHOD(t_SimpleDateFormat, applyPattern, METH_O),
      DECLARE_METHOD(t_SimpleDateFormat, clone, METH_VARARGS),
      DECLARE_METHOD(t_SimpleDateFormat, equals, METH_VARARGS),
      DECLARE_METHOD(t_SimpleDateFormat, get2DigitYearStart, METH_NOARGS),
      DECLARE_METHOD(t_SimpleDateFormat, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_SimpleDateFormat, set2DigitYearStart, METH_O),
      DECLARE_METHOD(t_SimpleDateFormat, toLocalizedPattern, METH_NOARGS),
      DECLARE_METHOD(t_SimpleDateFormat, toPattern, METH_NOARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(SimpleDateFormat, t_SimpleDateFormat, ::java::text::DateFormat, SimpleDateFormat, t_SimpleDateFormat_init_, 0, 0, t_SimpleDateFormat__fields_, 0, 0);

    void t_SimpleDateFormat::install(PyObject *module)
    {
      installType(&PY_TYPE(SimpleDateFormat), module, "SimpleDateFormat", 0);
    }

    void t_SimpleDateFormat::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(SimpleDateFormat).tp_dict, "class_", make_descriptor(SimpleDateFormat::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(SimpleDateFormat).tp_dict, "wrapfn_", make_descriptor(t_SimpleDateFormat::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(SimpleDateFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_SimpleDateFormat_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, SimpleDateFormat::initializeClass, 1)))
        return NULL;
      return t_SimpleDateFormat::wrap_Object(SimpleDateFormat(((t_SimpleDateFormat *) arg)->object.this$));
    }
    static PyObject *t_SimpleDateFormat_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, SimpleDateFormat::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_SimpleDateFormat_init_(t_SimpleDateFormat *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          SimpleDateFormat object((jobject) NULL);

          INT_CALL(object = SimpleDateFormat());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          SimpleDateFormat object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = SimpleDateFormat(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::util::Locale a1((jobject) NULL);
          SimpleDateFormat object((jobject) NULL);

          if (!parseArgs(args, "sk", ::java::util::Locale::initializeClass, &a0, &a1))
          {
            INT_CALL(object = SimpleDateFormat(a0, a1));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_SimpleDateFormat_applyLocalizedPattern(t_SimpleDateFormat *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.applyLocalizedPattern(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "applyLocalizedPattern", arg);
      return NULL;
    }

    static PyObject *t_SimpleDateFormat_applyPattern(t_SimpleDateFormat *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.applyPattern(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "applyPattern", arg);
      return NULL;
    }

    static PyObject *t_SimpleDateFormat_clone(t_SimpleDateFormat *self, PyObject *args)
    {
      ::java::lang::Object result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.clone());
        return ::java::lang::t_Object::wrap_Object(result);
      }

      return callSuper(&PY_TYPE(SimpleDateFormat), (PyObject *) self, "clone", args, 2);
    }

    static PyObject *t_SimpleDateFormat_equals(t_SimpleDateFormat *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(SimpleDateFormat), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_SimpleDateFormat_get2DigitYearStart(t_SimpleDateFormat *self)
    {
      ::java::util::Date result((jobject) NULL);
      OBJ_CALL(result = self->object.get2DigitYearStart());
      return ::java::util::t_Date::wrap_Object(result);
    }

    static PyObject *t_SimpleDateFormat_hashCode(t_SimpleDateFormat *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(SimpleDateFormat), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_SimpleDateFormat_set2DigitYearStart(t_SimpleDateFormat *self, PyObject *arg)
    {
      ::java::util::Date a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::util::Date::initializeClass, &a0))
      {
        OBJ_CALL(self->object.set2DigitYearStart(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "set2DigitYearStart", arg);
      return NULL;
    }

    static PyObject *t_SimpleDateFormat_toLocalizedPattern(t_SimpleDateFormat *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.toLocalizedPattern());
      return j2p(result);
    }

    static PyObject *t_SimpleDateFormat_toPattern(t_SimpleDateFormat *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.toPattern());
      return j2p(result);
    }

    static PyObject *t_SimpleDateFormat_get__2DigitYearStart(t_SimpleDateFormat *self, void *data)
    {
      ::java::util::Date value((jobject) NULL);
      OBJ_CALL(value = self->object.get2DigitYearStart());
      return ::java::util::t_Date::wrap_Object(value);
    }
    static int t_SimpleDateFormat_set__2DigitYearStart(t_SimpleDateFormat *self, PyObject *arg, void *data)
    {
      {
        ::java::util::Date value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::util::Date::initializeClass, &value))
        {
          INT_CALL(self->object.set2DigitYearStart(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "2DigitYearStart", arg);
      return -1;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/RateLimiter$SimpleRateLimiter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *RateLimiter$SimpleRateLimiter::class$ = NULL;
        jmethodID *RateLimiter$SimpleRateLimiter::mids$ = NULL;
        bool RateLimiter$SimpleRateLimiter::live$ = false;

        jclass RateLimiter$SimpleRateLimiter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/RateLimiter$SimpleRateLimiter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5d1c7645] = env->getMethodID(cls, "<init>", "(D)V");
            mids$[mid_getMbPerSec_54c6a174] = env->getMethodID(cls, "getMbPerSec", "()D");
            mids$[mid_getMinPauseCheckBytes_54c6a17a] = env->getMethodID(cls, "getMinPauseCheckBytes", "()J");
            mids$[mid_pause_0ee6df33] = env->getMethodID(cls, "pause", "(J)J");
            mids$[mid_setMbPerSec_5d1c7645] = env->getMethodID(cls, "setMbPerSec", "(D)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RateLimiter$SimpleRateLimiter::RateLimiter$SimpleRateLimiter(jdouble a0) : ::org::apache::lucene::store::RateLimiter(env->newObject(initializeClass, &mids$, mid_init$_5d1c7645, a0)) {}

        jdouble RateLimiter$SimpleRateLimiter::getMbPerSec() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getMbPerSec_54c6a174]);
        }

        jlong RateLimiter$SimpleRateLimiter::getMinPauseCheckBytes() const
        {
          return env->callLongMethod(this$, mids$[mid_getMinPauseCheckBytes_54c6a17a]);
        }

        jlong RateLimiter$SimpleRateLimiter::pause(jlong a0) const
        {
          return env->callLongMethod(this$, mids$[mid_pause_0ee6df33], a0);
        }

        void RateLimiter$SimpleRateLimiter::setMbPerSec(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMbPerSec_5d1c7645], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_RateLimiter$SimpleRateLimiter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RateLimiter$SimpleRateLimiter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RateLimiter$SimpleRateLimiter_init_(t_RateLimiter$SimpleRateLimiter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RateLimiter$SimpleRateLimiter_getMbPerSec(t_RateLimiter$SimpleRateLimiter *self, PyObject *args);
        static PyObject *t_RateLimiter$SimpleRateLimiter_getMinPauseCheckBytes(t_RateLimiter$SimpleRateLimiter *self, PyObject *args);
        static PyObject *t_RateLimiter$SimpleRateLimiter_pause(t_RateLimiter$SimpleRateLimiter *self, PyObject *args);
        static PyObject *t_RateLimiter$SimpleRateLimiter_setMbPerSec(t_RateLimiter$SimpleRateLimiter *self, PyObject *args);
        static PyObject *t_RateLimiter$SimpleRateLimiter_get__mbPerSec(t_RateLimiter$SimpleRateLimiter *self, void *data);
        static int t_RateLimiter$SimpleRateLimiter_set__mbPerSec(t_RateLimiter$SimpleRateLimiter *self, PyObject *arg, void *data);
        static PyObject *t_RateLimiter$SimpleRateLimiter_get__minPauseCheckBytes(t_RateLimiter$SimpleRateLimiter *self, void *data);
        static PyGetSetDef t_RateLimiter$SimpleRateLimiter__fields_[] = {
          DECLARE_GETSET_FIELD(t_RateLimiter$SimpleRateLimiter, mbPerSec),
          DECLARE_GET_FIELD(t_RateLimiter$SimpleRateLimiter, minPauseCheckBytes),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RateLimiter$SimpleRateLimiter__methods_[] = {
          DECLARE_METHOD(t_RateLimiter$SimpleRateLimiter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RateLimiter$SimpleRateLimiter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RateLimiter$SimpleRateLimiter, getMbPerSec, METH_VARARGS),
          DECLARE_METHOD(t_RateLimiter$SimpleRateLimiter, getMinPauseCheckBytes, METH_VARARGS),
          DECLARE_METHOD(t_RateLimiter$SimpleRateLimiter, pause, METH_VARARGS),
          DECLARE_METHOD(t_RateLimiter$SimpleRateLimiter, setMbPerSec, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RateLimiter$SimpleRateLimiter, t_RateLimiter$SimpleRateLimiter, ::org::apache::lucene::store::RateLimiter, RateLimiter$SimpleRateLimiter, t_RateLimiter$SimpleRateLimiter_init_, 0, 0, t_RateLimiter$SimpleRateLimiter__fields_, 0, 0);

        void t_RateLimiter$SimpleRateLimiter::install(PyObject *module)
        {
          installType(&PY_TYPE(RateLimiter$SimpleRateLimiter), module, "RateLimiter$SimpleRateLimiter", 0);
        }

        void t_RateLimiter$SimpleRateLimiter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RateLimiter$SimpleRateLimiter).tp_dict, "class_", make_descriptor(RateLimiter$SimpleRateLimiter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RateLimiter$SimpleRateLimiter).tp_dict, "wrapfn_", make_descriptor(t_RateLimiter$SimpleRateLimiter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RateLimiter$SimpleRateLimiter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RateLimiter$SimpleRateLimiter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RateLimiter$SimpleRateLimiter::initializeClass, 1)))
            return NULL;
          return t_RateLimiter$SimpleRateLimiter::wrap_Object(RateLimiter$SimpleRateLimiter(((t_RateLimiter$SimpleRateLimiter *) arg)->object.this$));
        }
        static PyObject *t_RateLimiter$SimpleRateLimiter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RateLimiter$SimpleRateLimiter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RateLimiter$SimpleRateLimiter_init_(t_RateLimiter$SimpleRateLimiter *self, PyObject *args, PyObject *kwds)
        {
          jdouble a0;
          RateLimiter$SimpleRateLimiter object((jobject) NULL);

          if (!parseArgs(args, "D", &a0))
          {
            INT_CALL(object = RateLimiter$SimpleRateLimiter(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_RateLimiter$SimpleRateLimiter_getMbPerSec(t_RateLimiter$SimpleRateLimiter *self, PyObject *args)
        {
          jdouble result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMbPerSec());
            return PyFloat_FromDouble((double) result);
          }

          return callSuper(&PY_TYPE(RateLimiter$SimpleRateLimiter), (PyObject *) self, "getMbPerSec", args, 2);
        }

        static PyObject *t_RateLimiter$SimpleRateLimiter_getMinPauseCheckBytes(t_RateLimiter$SimpleRateLimiter *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMinPauseCheckBytes());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(RateLimiter$SimpleRateLimiter), (PyObject *) self, "getMinPauseCheckBytes", args, 2);
        }

        static PyObject *t_RateLimiter$SimpleRateLimiter_pause(t_RateLimiter$SimpleRateLimiter *self, PyObject *args)
        {
          jlong a0;
          jlong result;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(result = self->object.pause(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(RateLimiter$SimpleRateLimiter), (PyObject *) self, "pause", args, 2);
        }

        static PyObject *t_RateLimiter$SimpleRateLimiter_setMbPerSec(t_RateLimiter$SimpleRateLimiter *self, PyObject *args)
        {
          jdouble a0;

          if (!parseArgs(args, "D", &a0))
          {
            OBJ_CALL(self->object.setMbPerSec(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(RateLimiter$SimpleRateLimiter), (PyObject *) self, "setMbPerSec", args, 2);
        }

        static PyObject *t_RateLimiter$SimpleRateLimiter_get__mbPerSec(t_RateLimiter$SimpleRateLimiter *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getMbPerSec());
          return PyFloat_FromDouble((double) value);
        }
        static int t_RateLimiter$SimpleRateLimiter_set__mbPerSec(t_RateLimiter$SimpleRateLimiter *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setMbPerSec(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "mbPerSec", arg);
          return -1;
        }

        static PyObject *t_RateLimiter$SimpleRateLimiter_get__minPauseCheckBytes(t_RateLimiter$SimpleRateLimiter *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getMinPauseCheckBytes());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/SearcherTaxonomyManager.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "org/apache/lucene/facet/taxonomy/SearcherTaxonomyManager$SearcherAndTaxonomy.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter.h"
#include "org/apache/lucene/search/SearcherFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *SearcherTaxonomyManager::class$ = NULL;
          jmethodID *SearcherTaxonomyManager::mids$ = NULL;
          bool SearcherTaxonomyManager::live$ = false;

          jclass SearcherTaxonomyManager::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/SearcherTaxonomyManager");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c5068542] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/search/SearcherFactory;)V");
              mids$[mid_init$_4154e337] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexWriter;ZLorg/apache/lucene/search/SearcherFactory;Lorg/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter;)V");
              mids$[mid_decRef_db563eaa] = env->getMethodID(cls, "decRef", "(Lorg/apache/lucene/facet/taxonomy/SearcherTaxonomyManager$SearcherAndTaxonomy;)V");
              mids$[mid_getRefCount_db563eb5] = env->getMethodID(cls, "getRefCount", "(Lorg/apache/lucene/facet/taxonomy/SearcherTaxonomyManager$SearcherAndTaxonomy;)I");
              mids$[mid_tryIncRef_db563ea6] = env->getMethodID(cls, "tryIncRef", "(Lorg/apache/lucene/facet/taxonomy/SearcherTaxonomyManager$SearcherAndTaxonomy;)Z");
              mids$[mid_refreshIfNeeded_9a7202bf] = env->getMethodID(cls, "refreshIfNeeded", "(Lorg/apache/lucene/facet/taxonomy/SearcherTaxonomyManager$SearcherAndTaxonomy;)Lorg/apache/lucene/facet/taxonomy/SearcherTaxonomyManager$SearcherAndTaxonomy;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SearcherTaxonomyManager::SearcherTaxonomyManager(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::store::Directory & a1, const ::org::apache::lucene::search::SearcherFactory & a2) : ::org::apache::lucene::search::ReferenceManager(env->newObject(initializeClass, &mids$, mid_init$_c5068542, a0.this$, a1.this$, a2.this$)) {}

          SearcherTaxonomyManager::SearcherTaxonomyManager(const ::org::apache::lucene::index::IndexWriter & a0, jboolean a1, const ::org::apache::lucene::search::SearcherFactory & a2, const ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter & a3) : ::org::apache::lucene::search::ReferenceManager(env->newObject(initializeClass, &mids$, mid_init$_4154e337, a0.this$, a1, a2.this$, a3.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_SearcherTaxonomyManager_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SearcherTaxonomyManager_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SearcherTaxonomyManager_of_(t_SearcherTaxonomyManager *self, PyObject *args);
          static int t_SearcherTaxonomyManager_init_(t_SearcherTaxonomyManager *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SearcherTaxonomyManager_get__parameters_(t_SearcherTaxonomyManager *self, void *data);
          static PyGetSetDef t_SearcherTaxonomyManager__fields_[] = {
            DECLARE_GET_FIELD(t_SearcherTaxonomyManager, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SearcherTaxonomyManager__methods_[] = {
            DECLARE_METHOD(t_SearcherTaxonomyManager, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SearcherTaxonomyManager, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SearcherTaxonomyManager, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SearcherTaxonomyManager, t_SearcherTaxonomyManager, ::org::apache::lucene::search::ReferenceManager, SearcherTaxonomyManager, t_SearcherTaxonomyManager_init_, 0, 0, t_SearcherTaxonomyManager__fields_, 0, 0);
          PyObject *t_SearcherTaxonomyManager::wrap_Object(const SearcherTaxonomyManager& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SearcherTaxonomyManager::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SearcherTaxonomyManager *self = (t_SearcherTaxonomyManager *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_SearcherTaxonomyManager::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SearcherTaxonomyManager::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SearcherTaxonomyManager *self = (t_SearcherTaxonomyManager *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_SearcherTaxonomyManager::install(PyObject *module)
          {
            installType(&PY_TYPE(SearcherTaxonomyManager), module, "SearcherTaxonomyManager", 0);
            PyDict_SetItemString(PY_TYPE(SearcherTaxonomyManager).tp_dict, "SearcherAndTaxonomy", make_descriptor(&PY_TYPE(SearcherTaxonomyManager$SearcherAndTaxonomy)));
          }

          void t_SearcherTaxonomyManager::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SearcherTaxonomyManager).tp_dict, "class_", make_descriptor(SearcherTaxonomyManager::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SearcherTaxonomyManager).tp_dict, "wrapfn_", make_descriptor(t_SearcherTaxonomyManager::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SearcherTaxonomyManager).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SearcherTaxonomyManager_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SearcherTaxonomyManager::initializeClass, 1)))
              return NULL;
            return t_SearcherTaxonomyManager::wrap_Object(SearcherTaxonomyManager(((t_SearcherTaxonomyManager *) arg)->object.this$));
          }
          static PyObject *t_SearcherTaxonomyManager_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SearcherTaxonomyManager::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SearcherTaxonomyManager_of_(t_SearcherTaxonomyManager *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_SearcherTaxonomyManager_init_(t_SearcherTaxonomyManager *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::store::Directory a0((jobject) NULL);
                ::org::apache::lucene::store::Directory a1((jobject) NULL);
                ::org::apache::lucene::search::SearcherFactory a2((jobject) NULL);
                SearcherTaxonomyManager object((jobject) NULL);

                if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::search::SearcherFactory::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = SearcherTaxonomyManager(a0, a1, a2));
                  self->object = object;
                  self->parameters[0] = &::org::apache::lucene::facet::taxonomy::PY_TYPE(SearcherTaxonomyManager$SearcherAndTaxonomy);
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::index::IndexWriter a0((jobject) NULL);
                jboolean a1;
                ::org::apache::lucene::search::SearcherFactory a2((jobject) NULL);
                ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter a3((jobject) NULL);
                SearcherTaxonomyManager object((jobject) NULL);

                if (!parseArgs(args, "kZkk", ::org::apache::lucene::index::IndexWriter::initializeClass, ::org::apache::lucene::search::SearcherFactory::initializeClass, ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = SearcherTaxonomyManager(a0, a1, a2, a3));
                  self->object = object;
                  self->parameters[0] = &::org::apache::lucene::facet::taxonomy::PY_TYPE(SearcherTaxonomyManager$SearcherAndTaxonomy);
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
          static PyObject *t_SearcherTaxonomyManager_get__parameters_(t_SearcherTaxonomyManager *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/FSDirectory.h"
#include "java/io/File.h"
#include "java/util/Collection.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/LockFactory.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/store/IOContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *FSDirectory::class$ = NULL;
        jmethodID *FSDirectory::mids$ = NULL;
        bool FSDirectory::live$ = false;
        jint FSDirectory::DEFAULT_READ_CHUNK_SIZE = (jint) 0;

        jclass FSDirectory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/FSDirectory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_createOutput_5ad5358d] = env->getMethodID(cls, "createOutput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_deleteFile_5fdc3f48] = env->getMethodID(cls, "deleteFile", "(Ljava/lang/String;)V");
            mids$[mid_fileExists_5fdc3f44] = env->getMethodID(cls, "fileExists", "(Ljava/lang/String;)Z");
            mids$[mid_fileLength_5fdc3f54] = env->getMethodID(cls, "fileLength", "(Ljava/lang/String;)J");
            mids$[mid_getDirectory_a8eb7bbe] = env->getMethodID(cls, "getDirectory", "()Ljava/io/File;");
            mids$[mid_getLockID_14c7b5c5] = env->getMethodID(cls, "getLockID", "()Ljava/lang/String;");
            mids$[mid_getReadChunkSize_54c6a179] = env->getMethodID(cls, "getReadChunkSize", "()I");
            mids$[mid_listAll_2e6d5245] = env->getMethodID(cls, "listAll", "()[Ljava/lang/String;");
            mids$[mid_listAll_10b06d64] = env->getStaticMethodID(cls, "listAll", "(Ljava/io/File;)[Ljava/lang/String;");
            mids$[mid_open_89cf4235] = env->getStaticMethodID(cls, "open", "(Ljava/io/File;)Lorg/apache/lucene/store/FSDirectory;");
            mids$[mid_open_588132c1] = env->getStaticMethodID(cls, "open", "(Ljava/io/File;Lorg/apache/lucene/store/LockFactory;)Lorg/apache/lucene/store/FSDirectory;");
            mids$[mid_setLockFactory_9892eb8c] = env->getMethodID(cls, "setLockFactory", "(Lorg/apache/lucene/store/LockFactory;)V");
            mids$[mid_setReadChunkSize_39c7bd3c] = env->getMethodID(cls, "setReadChunkSize", "(I)V");
            mids$[mid_sync_9bfb370d] = env->getMethodID(cls, "sync", "(Ljava/util/Collection;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_ensureCanWrite_5fdc3f48] = env->getMethodID(cls, "ensureCanWrite", "(Ljava/lang/String;)V");
            mids$[mid_onIndexOutputClosed_5fdc3f48] = env->getMethodID(cls, "onIndexOutputClosed", "(Ljava/lang/String;)V");
            mids$[mid_fsync_5fdc3f48] = env->getMethodID(cls, "fsync", "(Ljava/lang/String;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_READ_CHUNK_SIZE = env->getStaticIntField(cls, "DEFAULT_READ_CHUNK_SIZE");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void FSDirectory::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        ::org::apache::lucene::store::IndexOutput FSDirectory::createOutput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexOutput(env->callObjectMethod(this$, mids$[mid_createOutput_5ad5358d], a0.this$, a1.this$));
        }

        void FSDirectory::deleteFile(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_deleteFile_5fdc3f48], a0.this$);
        }

        jboolean FSDirectory::fileExists(const ::java::lang::String & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_fileExists_5fdc3f44], a0.this$);
        }

        jlong FSDirectory::fileLength(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_fileLength_5fdc3f54], a0.this$);
        }

        ::java::io::File FSDirectory::getDirectory() const
        {
          return ::java::io::File(env->callObjectMethod(this$, mids$[mid_getDirectory_a8eb7bbe]));
        }

        ::java::lang::String FSDirectory::getLockID() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLockID_14c7b5c5]));
        }

        jint FSDirectory::getReadChunkSize() const
        {
          return env->callIntMethod(this$, mids$[mid_getReadChunkSize_54c6a179]);
        }

        JArray< ::java::lang::String > FSDirectory::listAll() const
        {
          return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_listAll_2e6d5245]));
        }

        JArray< ::java::lang::String > FSDirectory::listAll(const ::java::io::File & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< ::java::lang::String >(env->callStaticObjectMethod(cls, mids$[mid_listAll_10b06d64], a0.this$));
        }

        FSDirectory FSDirectory::open(const ::java::io::File & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return FSDirectory(env->callStaticObjectMethod(cls, mids$[mid_open_89cf4235], a0.this$));
        }

        FSDirectory FSDirectory::open(const ::java::io::File & a0, const ::org::apache::lucene::store::LockFactory & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return FSDirectory(env->callStaticObjectMethod(cls, mids$[mid_open_588132c1], a0.this$, a1.this$));
        }

        void FSDirectory::setLockFactory(const ::org::apache::lucene::store::LockFactory & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setLockFactory_9892eb8c], a0.this$);
        }

        void FSDirectory::setReadChunkSize(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setReadChunkSize_39c7bd3c], a0);
        }

        void FSDirectory::sync(const ::java::util::Collection & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_sync_9bfb370d], a0.this$);
        }

        ::java::lang::String FSDirectory::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_FSDirectory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FSDirectory_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FSDirectory_close(t_FSDirectory *self, PyObject *args);
        static PyObject *t_FSDirectory_createOutput(t_FSDirectory *self, PyObject *args);
        static PyObject *t_FSDirectory_deleteFile(t_FSDirectory *self, PyObject *args);
        static PyObject *t_FSDirectory_fileExists(t_FSDirectory *self, PyObject *args);
        static PyObject *t_FSDirectory_fileLength(t_FSDirectory *self, PyObject *args);
        static PyObject *t_FSDirectory_getDirectory(t_FSDirectory *self);
        static PyObject *t_FSDirectory_getLockID(t_FSDirectory *self, PyObject *args);
        static PyObject *t_FSDirectory_getReadChunkSize(t_FSDirectory *self);
        static PyObject *t_FSDirectory_listAll(t_FSDirectory *self, PyObject *args);
        static PyObject *t_FSDirectory_listAll_(PyTypeObject *type, PyObject *args);
        static PyObject *t_FSDirectory_open(PyTypeObject *type, PyObject *args);
        static PyObject *t_FSDirectory_setLockFactory(t_FSDirectory *self, PyObject *args);
        static PyObject *t_FSDirectory_setReadChunkSize(t_FSDirectory *self, PyObject *arg);
        static PyObject *t_FSDirectory_sync(t_FSDirectory *self, PyObject *args);
        static PyObject *t_FSDirectory_toString(t_FSDirectory *self, PyObject *args);
        static PyObject *t_FSDirectory_get__directory(t_FSDirectory *self, void *data);
        static int t_FSDirectory_set__lockFactory(t_FSDirectory *self, PyObject *arg, void *data);
        static PyObject *t_FSDirectory_get__lockID(t_FSDirectory *self, void *data);
        static PyObject *t_FSDirectory_get__readChunkSize(t_FSDirectory *self, void *data);
        static int t_FSDirectory_set__readChunkSize(t_FSDirectory *self, PyObject *arg, void *data);
        static PyGetSetDef t_FSDirectory__fields_[] = {
          DECLARE_GET_FIELD(t_FSDirectory, directory),
          DECLARE_SET_FIELD(t_FSDirectory, lockFactory),
          DECLARE_GET_FIELD(t_FSDirectory, lockID),
          DECLARE_GETSET_FIELD(t_FSDirectory, readChunkSize),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FSDirectory__methods_[] = {
          DECLARE_METHOD(t_FSDirectory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FSDirectory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FSDirectory, close, METH_VARARGS),
          DECLARE_METHOD(t_FSDirectory, createOutput, METH_VARARGS),
          DECLARE_METHOD(t_FSDirectory, deleteFile, METH_VARARGS),
          DECLARE_METHOD(t_FSDirectory, fileExists, METH_VARARGS),
          DECLARE_METHOD(t_FSDirectory, fileLength, METH_VARARGS),
          DECLARE_METHOD(t_FSDirectory, getDirectory, METH_NOARGS),
          DECLARE_METHOD(t_FSDirectory, getLockID, METH_VARARGS),
          DECLARE_METHOD(t_FSDirectory, getReadChunkSize, METH_NOARGS),
          DECLARE_METHOD(t_FSDirectory, listAll, METH_VARARGS),
          DECLARE_METHOD(t_FSDirectory, listAll_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FSDirectory, open, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FSDirectory, setLockFactory, METH_VARARGS),
          DECLARE_METHOD(t_FSDirectory, setReadChunkSize, METH_O),
          DECLARE_METHOD(t_FSDirectory, sync, METH_VARARGS),
          DECLARE_METHOD(t_FSDirectory, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FSDirectory, t_FSDirectory, ::org::apache::lucene::store::BaseDirectory, FSDirectory, abstract_init, 0, 0, t_FSDirectory__fields_, 0, 0);

        void t_FSDirectory::install(PyObject *module)
        {
          installType(&PY_TYPE(FSDirectory), module, "FSDirectory", 0);
        }

        void t_FSDirectory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FSDirectory).tp_dict, "class_", make_descriptor(FSDirectory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FSDirectory).tp_dict, "wrapfn_", make_descriptor(t_FSDirectory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FSDirectory).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FSDirectory::initializeClass);
          PyDict_SetItemString(PY_TYPE(FSDirectory).tp_dict, "DEFAULT_READ_CHUNK_SIZE", make_descriptor(FSDirectory::DEFAULT_READ_CHUNK_SIZE));
        }

        static PyObject *t_FSDirectory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FSDirectory::initializeClass, 1)))
            return NULL;
          return t_FSDirectory::wrap_Object(FSDirectory(((t_FSDirectory *) arg)->object.this$));
        }
        static PyObject *t_FSDirectory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FSDirectory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FSDirectory_close(t_FSDirectory *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FSDirectory), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_FSDirectory_createOutput(t_FSDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexOutput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.createOutput(a0, a1));
            return ::org::apache::lucene::store::t_IndexOutput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FSDirectory), (PyObject *) self, "createOutput", args, 2);
        }

        static PyObject *t_FSDirectory_deleteFile(t_FSDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.deleteFile(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FSDirectory), (PyObject *) self, "deleteFile", args, 2);
        }

        static PyObject *t_FSDirectory_fileExists(t_FSDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileExists(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FSDirectory), (PyObject *) self, "fileExists", args, 2);
        }

        static PyObject *t_FSDirectory_fileLength(t_FSDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileLength(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FSDirectory), (PyObject *) self, "fileLength", args, 2);
        }

        static PyObject *t_FSDirectory_getDirectory(t_FSDirectory *self)
        {
          ::java::io::File result((jobject) NULL);
          OBJ_CALL(result = self->object.getDirectory());
          return ::java::io::t_File::wrap_Object(result);
        }

        static PyObject *t_FSDirectory_getLockID(t_FSDirectory *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getLockID());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FSDirectory), (PyObject *) self, "getLockID", args, 2);
        }

        static PyObject *t_FSDirectory_getReadChunkSize(t_FSDirectory *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getReadChunkSize());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_FSDirectory_listAll(t_FSDirectory *self, PyObject *args)
        {
          JArray< ::java::lang::String > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.listAll());
            return JArray<jstring>(result.this$).wrap();
          }

          return callSuper(&PY_TYPE(FSDirectory), (PyObject *) self, "listAll", args, 2);
        }

        static PyObject *t_FSDirectory_listAll_(PyTypeObject *type, PyObject *args)
        {
          ::java::io::File a0((jobject) NULL);
          JArray< ::java::lang::String > result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::store::FSDirectory::listAll(a0));
            return JArray<jstring>(result.this$).wrap();
          }

          PyErr_SetArgsError(type, "listAll_", args);
          return NULL;
        }

        static PyObject *t_FSDirectory_open(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::io::File a0((jobject) NULL);
              FSDirectory result((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::store::FSDirectory::open(a0));
                return t_FSDirectory::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              ::java::io::File a0((jobject) NULL);
              ::org::apache::lucene::store::LockFactory a1((jobject) NULL);
              FSDirectory result((jobject) NULL);

              if (!parseArgs(args, "kk", ::java::io::File::initializeClass, ::org::apache::lucene::store::LockFactory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::store::FSDirectory::open(a0, a1));
                return t_FSDirectory::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "open", args);
          return NULL;
        }

        static PyObject *t_FSDirectory_setLockFactory(t_FSDirectory *self, PyObject *args)
        {
          ::org::apache::lucene::store::LockFactory a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::store::LockFactory::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setLockFactory(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FSDirectory), (PyObject *) self, "setLockFactory", args, 2);
        }

        static PyObject *t_FSDirectory_setReadChunkSize(t_FSDirectory *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setReadChunkSize(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setReadChunkSize", arg);
          return NULL;
        }

        static PyObject *t_FSDirectory_sync(t_FSDirectory *self, PyObject *args)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(self->object.sync(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FSDirectory), (PyObject *) self, "sync", args, 2);
        }

        static PyObject *t_FSDirectory_toString(t_FSDirectory *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FSDirectory), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FSDirectory_get__directory(t_FSDirectory *self, void *data)
        {
          ::java::io::File value((jobject) NULL);
          OBJ_CALL(value = self->object.getDirectory());
          return ::java::io::t_File::wrap_Object(value);
        }

        static int t_FSDirectory_set__lockFactory(t_FSDirectory *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::store::LockFactory value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::store::LockFactory::initializeClass, &value))
            {
              INT_CALL(self->object.setLockFactory(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "lockFactory", arg);
          return -1;
        }

        static PyObject *t_FSDirectory_get__lockID(t_FSDirectory *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getLockID());
          return j2p(value);
        }

        static PyObject *t_FSDirectory_get__readChunkSize(t_FSDirectory *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getReadChunkSize());
          return PyInt_FromLong((long) value);
        }
        static int t_FSDirectory_set__readChunkSize(t_FSDirectory *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setReadChunkSize(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "readChunkSize", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ar/ArabicStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {

          ::java::lang::Class *ArabicStemFilter::class$ = NULL;
          jmethodID *ArabicStemFilter::mids$ = NULL;
          bool ArabicStemFilter::live$ = false;

          jclass ArabicStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ar/ArabicStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ArabicStemFilter::ArabicStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean ArabicStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {
          static PyObject *t_ArabicStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ArabicStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ArabicStemFilter_init_(t_ArabicStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ArabicStemFilter_incrementToken(t_ArabicStemFilter *self, PyObject *args);

          static PyMethodDef t_ArabicStemFilter__methods_[] = {
            DECLARE_METHOD(t_ArabicStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ArabicStemFilter, t_ArabicStemFilter, ::org::apache::lucene::analysis::TokenFilter, ArabicStemFilter, t_ArabicStemFilter_init_, 0, 0, 0, 0, 0);

          void t_ArabicStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ArabicStemFilter), module, "ArabicStemFilter", 0);
          }

          void t_ArabicStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ArabicStemFilter).tp_dict, "class_", make_descriptor(ArabicStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ArabicStemFilter).tp_dict, "wrapfn_", make_descriptor(t_ArabicStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ArabicStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ArabicStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ArabicStemFilter::initializeClass, 1)))
              return NULL;
            return t_ArabicStemFilter::wrap_Object(ArabicStemFilter(((t_ArabicStemFilter *) arg)->object.this$));
          }
          static PyObject *t_ArabicStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ArabicStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ArabicStemFilter_init_(t_ArabicStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ArabicStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = ArabicStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ArabicStemFilter_incrementToken(t_ArabicStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ArabicStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanPositionRangeQuery.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanPositionRangeQuery::class$ = NULL;
          jmethodID *SpanPositionRangeQuery::mids$ = NULL;
          bool SpanPositionRangeQuery::live$ = false;

          jclass SpanPositionRangeQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanPositionRangeQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d606f0cb] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanQuery;II)V");
              mids$[mid_clone_718ddad5] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/search/spans/SpanPositionRangeQuery;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getEnd_54c6a179] = env->getMethodID(cls, "getEnd", "()I");
              mids$[mid_getStart_54c6a179] = env->getMethodID(cls, "getStart", "()I");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_acceptPosition_5342f73f] = env->getMethodID(cls, "acceptPosition", "(Lorg/apache/lucene/search/spans/Spans;)Lorg/apache/lucene/search/spans/SpanPositionCheckQuery$AcceptStatus;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanPositionRangeQuery::SpanPositionRangeQuery(const ::org::apache::lucene::search::spans::SpanQuery & a0, jint a1, jint a2) : ::org::apache::lucene::search::spans::SpanPositionCheckQuery(env->newObject(initializeClass, &mids$, mid_init$_d606f0cb, a0.this$, a1, a2)) {}

          SpanPositionRangeQuery SpanPositionRangeQuery::clone() const
          {
            return SpanPositionRangeQuery(env->callObjectMethod(this$, mids$[mid_clone_718ddad5]));
          }

          jboolean SpanPositionRangeQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint SpanPositionRangeQuery::getEnd() const
          {
            return env->callIntMethod(this$, mids$[mid_getEnd_54c6a179]);
          }

          jint SpanPositionRangeQuery::getStart() const
          {
            return env->callIntMethod(this$, mids$[mid_getStart_54c6a179]);
          }

          jint SpanPositionRangeQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String SpanPositionRangeQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanPositionRangeQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanPositionRangeQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanPositionRangeQuery_init_(t_SpanPositionRangeQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanPositionRangeQuery_clone(t_SpanPositionRangeQuery *self, PyObject *args);
          static PyObject *t_SpanPositionRangeQuery_equals(t_SpanPositionRangeQuery *self, PyObject *args);
          static PyObject *t_SpanPositionRangeQuery_getEnd(t_SpanPositionRangeQuery *self);
          static PyObject *t_SpanPositionRangeQuery_getStart(t_SpanPositionRangeQuery *self);
          static PyObject *t_SpanPositionRangeQuery_hashCode(t_SpanPositionRangeQuery *self, PyObject *args);
          static PyObject *t_SpanPositionRangeQuery_toString(t_SpanPositionRangeQuery *self, PyObject *args);
          static PyObject *t_SpanPositionRangeQuery_get__end(t_SpanPositionRangeQuery *self, void *data);
          static PyObject *t_SpanPositionRangeQuery_get__start(t_SpanPositionRangeQuery *self, void *data);
          static PyGetSetDef t_SpanPositionRangeQuery__fields_[] = {
            DECLARE_GET_FIELD(t_SpanPositionRangeQuery, end),
            DECLARE_GET_FIELD(t_SpanPositionRangeQuery, start),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanPositionRangeQuery__methods_[] = {
            DECLARE_METHOD(t_SpanPositionRangeQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanPositionRangeQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanPositionRangeQuery, clone, METH_VARARGS),
            DECLARE_METHOD(t_SpanPositionRangeQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_SpanPositionRangeQuery, getEnd, METH_NOARGS),
            DECLARE_METHOD(t_SpanPositionRangeQuery, getStart, METH_NOARGS),
            DECLARE_METHOD(t_SpanPositionRangeQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SpanPositionRangeQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanPositionRangeQuery, t_SpanPositionRangeQuery, ::org::apache::lucene::search::spans::SpanPositionCheckQuery, SpanPositionRangeQuery, t_SpanPositionRangeQuery_init_, 0, 0, t_SpanPositionRangeQuery__fields_, 0, 0);

          void t_SpanPositionRangeQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanPositionRangeQuery), module, "SpanPositionRangeQuery", 0);
          }

          void t_SpanPositionRangeQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanPositionRangeQuery).tp_dict, "class_", make_descriptor(SpanPositionRangeQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanPositionRangeQuery).tp_dict, "wrapfn_", make_descriptor(t_SpanPositionRangeQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanPositionRangeQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanPositionRangeQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanPositionRangeQuery::initializeClass, 1)))
              return NULL;
            return t_SpanPositionRangeQuery::wrap_Object(SpanPositionRangeQuery(((t_SpanPositionRangeQuery *) arg)->object.this$));
          }
          static PyObject *t_SpanPositionRangeQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanPositionRangeQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanPositionRangeQuery_init_(t_SpanPositionRangeQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spans::SpanQuery a0((jobject) NULL);
            jint a1;
            jint a2;
            SpanPositionRangeQuery object((jobject) NULL);

            if (!parseArgs(args, "kII", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = SpanPositionRangeQuery(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanPositionRangeQuery_clone(t_SpanPositionRangeQuery *self, PyObject *args)
          {
            SpanPositionRangeQuery result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_SpanPositionRangeQuery::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanPositionRangeQuery), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_SpanPositionRangeQuery_equals(t_SpanPositionRangeQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SpanPositionRangeQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SpanPositionRangeQuery_getEnd(t_SpanPositionRangeQuery *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEnd());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_SpanPositionRangeQuery_getStart(t_SpanPositionRangeQuery *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getStart());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_SpanPositionRangeQuery_hashCode(t_SpanPositionRangeQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SpanPositionRangeQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SpanPositionRangeQuery_toString(t_SpanPositionRangeQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanPositionRangeQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_SpanPositionRangeQuery_get__end(t_SpanPositionRangeQuery *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEnd());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_SpanPositionRangeQuery_get__start(t_SpanPositionRangeQuery *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getStart());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SortedDocValues::class$ = NULL;
        jmethodID *SortedDocValues::mids$ = NULL;
        bool SortedDocValues::live$ = false;

        jclass SortedDocValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SortedDocValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_get_b57e9c3f] = env->getMethodID(cls, "get", "(I)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getOrd_39c7bd23] = env->getMethodID(cls, "getOrd", "(I)I");
            mids$[mid_getValueCount_54c6a179] = env->getMethodID(cls, "getValueCount", "()I");
            mids$[mid_lookupOrd_b57e9c3f] = env->getMethodID(cls, "lookupOrd", "(I)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_lookupTerm_7bc03ddb] = env->getMethodID(cls, "lookupTerm", "(Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_termsEnum_ea7afd9f] = env->getMethodID(cls, "termsEnum", "()Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::util::BytesRef SortedDocValues::get(jint a0) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_get_b57e9c3f], a0));
        }

        jint SortedDocValues::getOrd(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getOrd_39c7bd23], a0);
        }

        jint SortedDocValues::getValueCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getValueCount_54c6a179]);
        }

        ::org::apache::lucene::util::BytesRef SortedDocValues::lookupOrd(jint a0) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_lookupOrd_b57e9c3f], a0));
        }

        jint SortedDocValues::lookupTerm(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_lookupTerm_7bc03ddb], a0.this$);
        }

        ::org::apache::lucene::index::TermsEnum SortedDocValues::termsEnum() const
        {
          return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_termsEnum_ea7afd9f]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SortedDocValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedDocValues_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedDocValues_get(t_SortedDocValues *self, PyObject *args);
        static PyObject *t_SortedDocValues_getOrd(t_SortedDocValues *self, PyObject *arg);
        static PyObject *t_SortedDocValues_getValueCount(t_SortedDocValues *self);
        static PyObject *t_SortedDocValues_lookupOrd(t_SortedDocValues *self, PyObject *arg);
        static PyObject *t_SortedDocValues_lookupTerm(t_SortedDocValues *self, PyObject *arg);
        static PyObject *t_SortedDocValues_termsEnum(t_SortedDocValues *self);
        static PyObject *t_SortedDocValues_get__valueCount(t_SortedDocValues *self, void *data);
        static PyGetSetDef t_SortedDocValues__fields_[] = {
          DECLARE_GET_FIELD(t_SortedDocValues, valueCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SortedDocValues__methods_[] = {
          DECLARE_METHOD(t_SortedDocValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedDocValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedDocValues, get, METH_VARARGS),
          DECLARE_METHOD(t_SortedDocValues, getOrd, METH_O),
          DECLARE_METHOD(t_SortedDocValues, getValueCount, METH_NOARGS),
          DECLARE_METHOD(t_SortedDocValues, lookupOrd, METH_O),
          DECLARE_METHOD(t_SortedDocValues, lookupTerm, METH_O),
          DECLARE_METHOD(t_SortedDocValues, termsEnum, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SortedDocValues, t_SortedDocValues, ::org::apache::lucene::index::BinaryDocValues, SortedDocValues, abstract_init, 0, 0, t_SortedDocValues__fields_, 0, 0);

        void t_SortedDocValues::install(PyObject *module)
        {
          installType(&PY_TYPE(SortedDocValues), module, "SortedDocValues", 0);
        }

        void t_SortedDocValues::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SortedDocValues).tp_dict, "class_", make_descriptor(SortedDocValues::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SortedDocValues).tp_dict, "wrapfn_", make_descriptor(t_SortedDocValues::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SortedDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SortedDocValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortedDocValues::initializeClass, 1)))
            return NULL;
          return t_SortedDocValues::wrap_Object(SortedDocValues(((t_SortedDocValues *) arg)->object.this$));
        }
        static PyObject *t_SortedDocValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortedDocValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SortedDocValues_get(t_SortedDocValues *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SortedDocValues), (PyObject *) self, "get", args, 2);
        }

        static PyObject *t_SortedDocValues_getOrd(t_SortedDocValues *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getOrd(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getOrd", arg);
          return NULL;
        }

        static PyObject *t_SortedDocValues_getValueCount(t_SortedDocValues *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getValueCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_SortedDocValues_lookupOrd(t_SortedDocValues *self, PyObject *arg)
        {
          jint a0;
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.lookupOrd(a0));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "lookupOrd", arg);
          return NULL;
        }

        static PyObject *t_SortedDocValues_lookupTerm(t_SortedDocValues *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.lookupTerm(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "lookupTerm", arg);
          return NULL;
        }

        static PyObject *t_SortedDocValues_termsEnum(t_SortedDocValues *self)
        {
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);
          OBJ_CALL(result = self->object.termsEnum());
          return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
        }

        static PyObject *t_SortedDocValues_get__valueCount(t_SortedDocValues *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getValueCount());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fr/FrenchLightStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {

          ::java::lang::Class *FrenchLightStemmer::class$ = NULL;
          jmethodID *FrenchLightStemmer::mids$ = NULL;
          bool FrenchLightStemmer::live$ = false;

          jclass FrenchLightStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fr/FrenchLightStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FrenchLightStemmer::FrenchLightStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint FrenchLightStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {
          static PyObject *t_FrenchLightStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FrenchLightStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FrenchLightStemmer_init_(t_FrenchLightStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FrenchLightStemmer_stem(t_FrenchLightStemmer *self, PyObject *args);

          static PyMethodDef t_FrenchLightStemmer__methods_[] = {
            DECLARE_METHOD(t_FrenchLightStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchLightStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchLightStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FrenchLightStemmer, t_FrenchLightStemmer, ::java::lang::Object, FrenchLightStemmer, t_FrenchLightStemmer_init_, 0, 0, 0, 0, 0);

          void t_FrenchLightStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(FrenchLightStemmer), module, "FrenchLightStemmer", 0);
          }

          void t_FrenchLightStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FrenchLightStemmer).tp_dict, "class_", make_descriptor(FrenchLightStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FrenchLightStemmer).tp_dict, "wrapfn_", make_descriptor(t_FrenchLightStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FrenchLightStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FrenchLightStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FrenchLightStemmer::initializeClass, 1)))
              return NULL;
            return t_FrenchLightStemmer::wrap_Object(FrenchLightStemmer(((t_FrenchLightStemmer *) arg)->object.this$));
          }
          static PyObject *t_FrenchLightStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FrenchLightStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FrenchLightStemmer_init_(t_FrenchLightStemmer *self, PyObject *args, PyObject *kwds)
          {
            FrenchLightStemmer object((jobject) NULL);

            INT_CALL(object = FrenchLightStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_FrenchLightStemmer_stem(t_FrenchLightStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/text/NumberFormat.h"
#include "java/lang/Number.h"
#include "java/util/Currency.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/StringBuffer.h"
#include "java/util/Locale.h"
#include "JArray.h"

namespace java {
  namespace text {

    ::java::lang::Class *NumberFormat::class$ = NULL;
    jmethodID *NumberFormat::mids$ = NULL;
    bool NumberFormat::live$ = false;
    jint NumberFormat::FRACTION_FIELD = (jint) 0;
    jint NumberFormat::INTEGER_FIELD = (jint) 0;

    jclass NumberFormat::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/text/NumberFormat");

        mids$ = new jmethodID[max_mid];
        mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_format_1b4624f8] = env->getMethodID(cls, "format", "(D)Ljava/lang/String;");
        mids$[mid_format_3e02f30e] = env->getMethodID(cls, "format", "(J)Ljava/lang/String;");
        mids$[mid_getAvailableLocales_59cb5b46] = env->getStaticMethodID(cls, "getAvailableLocales", "()[Ljava/util/Locale;");
        mids$[mid_getCurrency_14c3f2a1] = env->getMethodID(cls, "getCurrency", "()Ljava/util/Currency;");
        mids$[mid_getCurrencyInstance_6b701965] = env->getStaticMethodID(cls, "getCurrencyInstance", "()Ljava/text/NumberFormat;");
        mids$[mid_getCurrencyInstance_c103b3da] = env->getStaticMethodID(cls, "getCurrencyInstance", "(Ljava/util/Locale;)Ljava/text/NumberFormat;");
        mids$[mid_getInstance_6b701965] = env->getStaticMethodID(cls, "getInstance", "()Ljava/text/NumberFormat;");
        mids$[mid_getInstance_c103b3da] = env->getStaticMethodID(cls, "getInstance", "(Ljava/util/Locale;)Ljava/text/NumberFormat;");
        mids$[mid_getIntegerInstance_6b701965] = env->getStaticMethodID(cls, "getIntegerInstance", "()Ljava/text/NumberFormat;");
        mids$[mid_getIntegerInstance_c103b3da] = env->getStaticMethodID(cls, "getIntegerInstance", "(Ljava/util/Locale;)Ljava/text/NumberFormat;");
        mids$[mid_getMaximumFractionDigits_54c6a179] = env->getMethodID(cls, "getMaximumFractionDigits", "()I");
        mids$[mid_getMaximumIntegerDigits_54c6a179] = env->getMethodID(cls, "getMaximumIntegerDigits", "()I");
        mids$[mid_getMinimumFractionDigits_54c6a179] = env->getMethodID(cls, "getMinimumFractionDigits", "()I");
        mids$[mid_getMinimumIntegerDigits_54c6a179] = env->getMethodID(cls, "getMinimumIntegerDigits", "()I");
        mids$[mid_getNumberInstance_6b701965] = env->getStaticMethodID(cls, "getNumberInstance", "()Ljava/text/NumberFormat;");
        mids$[mid_getNumberInstance_c103b3da] = env->getStaticMethodID(cls, "getNumberInstance", "(Ljava/util/Locale;)Ljava/text/NumberFormat;");
        mids$[mid_getPercentInstance_6b701965] = env->getStaticMethodID(cls, "getPercentInstance", "()Ljava/text/NumberFormat;");
        mids$[mid_getPercentInstance_c103b3da] = env->getStaticMethodID(cls, "getPercentInstance", "(Ljava/util/Locale;)Ljava/text/NumberFormat;");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_isGroupingUsed_54c6a16a] = env->getMethodID(cls, "isGroupingUsed", "()Z");
        mids$[mid_isParseIntegerOnly_54c6a16a] = env->getMethodID(cls, "isParseIntegerOnly", "()Z");
        mids$[mid_parse_271f2fcb] = env->getMethodID(cls, "parse", "(Ljava/lang/String;)Ljava/lang/Number;");
        mids$[mid_setCurrency_de939370] = env->getMethodID(cls, "setCurrency", "(Ljava/util/Currency;)V");
        mids$[mid_setGroupingUsed_bb0c767f] = env->getMethodID(cls, "setGroupingUsed", "(Z)V");
        mids$[mid_setMaximumFractionDigits_39c7bd3c] = env->getMethodID(cls, "setMaximumFractionDigits", "(I)V");
        mids$[mid_setMaximumIntegerDigits_39c7bd3c] = env->getMethodID(cls, "setMaximumIntegerDigits", "(I)V");
        mids$[mid_setMinimumFractionDigits_39c7bd3c] = env->getMethodID(cls, "setMinimumFractionDigits", "(I)V");
        mids$[mid_setMinimumIntegerDigits_39c7bd3c] = env->getMethodID(cls, "setMinimumIntegerDigits", "(I)V");
        mids$[mid_setParseIntegerOnly_bb0c767f] = env->getMethodID(cls, "setParseIntegerOnly", "(Z)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        FRACTION_FIELD = env->getStaticIntField(cls, "FRACTION_FIELD");
        INTEGER_FIELD = env->getStaticIntField(cls, "INTEGER_FIELD");
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    ::java::lang::Object NumberFormat::clone() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_clone_846352c3]));
    }

    jboolean NumberFormat::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    ::java::lang::String NumberFormat::format(jdouble a0) const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_format_1b4624f8], a0));
    }

    ::java::lang::String NumberFormat::format(jlong a0) const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_format_3e02f30e], a0));
    }

    JArray< ::java::util::Locale > NumberFormat::getAvailableLocales()
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< ::java::util::Locale >(env->callStaticObjectMethod(cls, mids$[mid_getAvailableLocales_59cb5b46]));
    }

    ::java::util::Currency NumberFormat::getCurrency() const
    {
      return ::java::util::Currency(env->callObjectMethod(this$, mids$[mid_getCurrency_14c3f2a1]));
    }

    NumberFormat NumberFormat::getCurrencyInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return NumberFormat(env->callStaticObjectMethod(cls, mids$[mid_getCurrencyInstance_6b701965]));
    }

    NumberFormat NumberFormat::getCurrencyInstance(const ::java::util::Locale & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return NumberFormat(env->callStaticObjectMethod(cls, mids$[mid_getCurrencyInstance_c103b3da], a0.this$));
    }

    NumberFormat NumberFormat::getInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return NumberFormat(env->callStaticObjectMethod(cls, mids$[mid_getInstance_6b701965]));
    }

    NumberFormat NumberFormat::getInstance(const ::java::util::Locale & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return NumberFormat(env->callStaticObjectMethod(cls, mids$[mid_getInstance_c103b3da], a0.this$));
    }

    NumberFormat NumberFormat::getIntegerInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return NumberFormat(env->callStaticObjectMethod(cls, mids$[mid_getIntegerInstance_6b701965]));
    }

    NumberFormat NumberFormat::getIntegerInstance(const ::java::util::Locale & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return NumberFormat(env->callStaticObjectMethod(cls, mids$[mid_getIntegerInstance_c103b3da], a0.this$));
    }

    jint NumberFormat::getMaximumFractionDigits() const
    {
      return env->callIntMethod(this$, mids$[mid_getMaximumFractionDigits_54c6a179]);
    }

    jint NumberFormat::getMaximumIntegerDigits() const
    {
      return env->callIntMethod(this$, mids$[mid_getMaximumIntegerDigits_54c6a179]);
    }

    jint NumberFormat::getMinimumFractionDigits() const
    {
      return env->callIntMethod(this$, mids$[mid_getMinimumFractionDigits_54c6a179]);
    }

    jint NumberFormat::getMinimumIntegerDigits() const
    {
      return env->callIntMethod(this$, mids$[mid_getMinimumIntegerDigits_54c6a179]);
    }

    NumberFormat NumberFormat::getNumberInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return NumberFormat(env->callStaticObjectMethod(cls, mids$[mid_getNumberInstance_6b701965]));
    }

    NumberFormat NumberFormat::getNumberInstance(const ::java::util::Locale & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return NumberFormat(env->callStaticObjectMethod(cls, mids$[mid_getNumberInstance_c103b3da], a0.this$));
    }

    NumberFormat NumberFormat::getPercentInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return NumberFormat(env->callStaticObjectMethod(cls, mids$[mid_getPercentInstance_6b701965]));
    }

    NumberFormat NumberFormat::getPercentInstance(const ::java::util::Locale & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return NumberFormat(env->callStaticObjectMethod(cls, mids$[mid_getPercentInstance_c103b3da], a0.this$));
    }

    jint NumberFormat::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jboolean NumberFormat::isGroupingUsed() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isGroupingUsed_54c6a16a]);
    }

    jboolean NumberFormat::isParseIntegerOnly() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isParseIntegerOnly_54c6a16a]);
    }

    ::java::lang::Number NumberFormat::parse(const ::java::lang::String & a0) const
    {
      return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_parse_271f2fcb], a0.this$));
    }

    void NumberFormat::setCurrency(const ::java::util::Currency & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setCurrency_de939370], a0.this$);
    }

    void NumberFormat::setGroupingUsed(jboolean a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setGroupingUsed_bb0c767f], a0);
    }

    void NumberFormat::setMaximumFractionDigits(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setMaximumFractionDigits_39c7bd3c], a0);
    }

    void NumberFormat::setMaximumIntegerDigits(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setMaximumIntegerDigits_39c7bd3c], a0);
    }

    void NumberFormat::setMinimumFractionDigits(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setMinimumFractionDigits_39c7bd3c], a0);
    }

    void NumberFormat::setMinimumIntegerDigits(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setMinimumIntegerDigits_39c7bd3c], a0);
    }

    void NumberFormat::setParseIntegerOnly(jboolean a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setParseIntegerOnly_bb0c767f], a0);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace text {
    static PyObject *t_NumberFormat_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_NumberFormat_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_NumberFormat_clone(t_NumberFormat *self, PyObject *args);
    static PyObject *t_NumberFormat_equals(t_NumberFormat *self, PyObject *args);
    static PyObject *t_NumberFormat_format(t_NumberFormat *self, PyObject *args);
    static PyObject *t_NumberFormat_getAvailableLocales(PyTypeObject *type);
    static PyObject *t_NumberFormat_getCurrency(t_NumberFormat *self);
    static PyObject *t_NumberFormat_getCurrencyInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_NumberFormat_getInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_NumberFormat_getIntegerInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_NumberFormat_getMaximumFractionDigits(t_NumberFormat *self);
    static PyObject *t_NumberFormat_getMaximumIntegerDigits(t_NumberFormat *self);
    static PyObject *t_NumberFormat_getMinimumFractionDigits(t_NumberFormat *self);
    static PyObject *t_NumberFormat_getMinimumIntegerDigits(t_NumberFormat *self);
    static PyObject *t_NumberFormat_getNumberInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_NumberFormat_getPercentInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_NumberFormat_hashCode(t_NumberFormat *self, PyObject *args);
    static PyObject *t_NumberFormat_isGroupingUsed(t_NumberFormat *self);
    static PyObject *t_NumberFormat_isParseIntegerOnly(t_NumberFormat *self);
    static PyObject *t_NumberFormat_parse(t_NumberFormat *self, PyObject *arg);
    static PyObject *t_NumberFormat_setCurrency(t_NumberFormat *self, PyObject *arg);
    static PyObject *t_NumberFormat_setGroupingUsed(t_NumberFormat *self, PyObject *arg);
    static PyObject *t_NumberFormat_setMaximumFractionDigits(t_NumberFormat *self, PyObject *arg);
    static PyObject *t_NumberFormat_setMaximumIntegerDigits(t_NumberFormat *self, PyObject *arg);
    static PyObject *t_NumberFormat_setMinimumFractionDigits(t_NumberFormat *self, PyObject *arg);
    static PyObject *t_NumberFormat_setMinimumIntegerDigits(t_NumberFormat *self, PyObject *arg);
    static PyObject *t_NumberFormat_setParseIntegerOnly(t_NumberFormat *self, PyObject *arg);
    static PyObject *t_NumberFormat_get__availableLocales(t_NumberFormat *self, void *data);
    static PyObject *t_NumberFormat_get__currency(t_NumberFormat *self, void *data);
    static int t_NumberFormat_set__currency(t_NumberFormat *self, PyObject *arg, void *data);
    static PyObject *t_NumberFormat_get__currencyInstance(t_NumberFormat *self, void *data);
    static PyObject *t_NumberFormat_get__groupingUsed(t_NumberFormat *self, void *data);
    static int t_NumberFormat_set__groupingUsed(t_NumberFormat *self, PyObject *arg, void *data);
    static PyObject *t_NumberFormat_get__instance(t_NumberFormat *self, void *data);
    static PyObject *t_NumberFormat_get__integerInstance(t_NumberFormat *self, void *data);
    static PyObject *t_NumberFormat_get__maximumFractionDigits(t_NumberFormat *self, void *data);
    static int t_NumberFormat_set__maximumFractionDigits(t_NumberFormat *self, PyObject *arg, void *data);
    static PyObject *t_NumberFormat_get__maximumIntegerDigits(t_NumberFormat *self, void *data);
    static int t_NumberFormat_set__maximumIntegerDigits(t_NumberFormat *self, PyObject *arg, void *data);
    static PyObject *t_NumberFormat_get__minimumFractionDigits(t_NumberFormat *self, void *data);
    static int t_NumberFormat_set__minimumFractionDigits(t_NumberFormat *self, PyObject *arg, void *data);
    static PyObject *t_NumberFormat_get__minimumIntegerDigits(t_NumberFormat *self, void *data);
    static int t_NumberFormat_set__minimumIntegerDigits(t_NumberFormat *self, PyObject *arg, void *data);
    static PyObject *t_NumberFormat_get__numberInstance(t_NumberFormat *self, void *data);
    static PyObject *t_NumberFormat_get__parseIntegerOnly(t_NumberFormat *self, void *data);
    static int t_NumberFormat_set__parseIntegerOnly(t_NumberFormat *self, PyObject *arg, void *data);
    static PyObject *t_NumberFormat_get__percentInstance(t_NumberFormat *self, void *data);
    static PyGetSetDef t_NumberFormat__fields_[] = {
      DECLARE_GET_FIELD(t_NumberFormat, availableLocales),
      DECLARE_GETSET_FIELD(t_NumberFormat, currency),
      DECLARE_GET_FIELD(t_NumberFormat, currencyInstance),
      DECLARE_GETSET_FIELD(t_NumberFormat, groupingUsed),
      DECLARE_GET_FIELD(t_NumberFormat, instance),
      DECLARE_GET_FIELD(t_NumberFormat, integerInstance),
      DECLARE_GETSET_FIELD(t_NumberFormat, maximumFractionDigits),
      DECLARE_GETSET_FIELD(t_NumberFormat, maximumIntegerDigits),
      DECLARE_GETSET_FIELD(t_NumberFormat, minimumFractionDigits),
      DECLARE_GETSET_FIELD(t_NumberFormat, minimumIntegerDigits),
      DECLARE_GET_FIELD(t_NumberFormat, numberInstance),
      DECLARE_GETSET_FIELD(t_NumberFormat, parseIntegerOnly),
      DECLARE_GET_FIELD(t_NumberFormat, percentInstance),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_NumberFormat__methods_[] = {
      DECLARE_METHOD(t_NumberFormat, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_NumberFormat, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_NumberFormat, clone, METH_VARARGS),
      DECLARE_METHOD(t_NumberFormat, equals, METH_VARARGS),
      DECLARE_METHOD(t_NumberFormat, format, METH_VARARGS),
      DECLARE_METHOD(t_NumberFormat, getAvailableLocales, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_NumberFormat, getCurrency, METH_NOARGS),
      DECLARE_METHOD(t_NumberFormat, getCurrencyInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_NumberFormat, getInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_NumberFormat, getIntegerInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_NumberFormat, getMaximumFractionDigits, METH_NOARGS),
      DECLARE_METHOD(t_NumberFormat, getMaximumIntegerDigits, METH_NOARGS),
      DECLARE_METHOD(t_NumberFormat, getMinimumFractionDigits, METH_NOARGS),
      DECLARE_METHOD(t_NumberFormat, getMinimumIntegerDigits, METH_NOARGS),
      DECLARE_METHOD(t_NumberFormat, getNumberInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_NumberFormat, getPercentInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_NumberFormat, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_NumberFormat, isGroupingUsed, METH_NOARGS),
      DECLARE_METHOD(t_NumberFormat, isParseIntegerOnly, METH_NOARGS),
      DECLARE_METHOD(t_NumberFormat, parse, METH_O),
      DECLARE_METHOD(t_NumberFormat, setCurrency, METH_O),
      DECLARE_METHOD(t_NumberFormat, setGroupingUsed, METH_O),
      DECLARE_METHOD(t_NumberFormat, setMaximumFractionDigits, METH_O),
      DECLARE_METHOD(t_NumberFormat, setMaximumIntegerDigits, METH_O),
      DECLARE_METHOD(t_NumberFormat, setMinimumFractionDigits, METH_O),
      DECLARE_METHOD(t_NumberFormat, setMinimumIntegerDigits, METH_O),
      DECLARE_METHOD(t_NumberFormat, setParseIntegerOnly, METH_O),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(NumberFormat, t_NumberFormat, ::java::text::Format, NumberFormat, abstract_init, 0, 0, t_NumberFormat__fields_, 0, 0);

    void t_NumberFormat::install(PyObject *module)
    {
      installType(&PY_TYPE(NumberFormat), module, "NumberFormat", 0);
    }

    void t_NumberFormat::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(NumberFormat).tp_dict, "class_", make_descriptor(NumberFormat::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(NumberFormat).tp_dict, "wrapfn_", make_descriptor(t_NumberFormat::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(NumberFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
      env->getClass(NumberFormat::initializeClass);
      PyDict_SetItemString(PY_TYPE(NumberFormat).tp_dict, "FRACTION_FIELD", make_descriptor(NumberFormat::FRACTION_FIELD));
      PyDict_SetItemString(PY_TYPE(NumberFormat).tp_dict, "INTEGER_FIELD", make_descriptor(NumberFormat::INTEGER_FIELD));
    }

    static PyObject *t_NumberFormat_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, NumberFormat::initializeClass, 1)))
        return NULL;
      return t_NumberFormat::wrap_Object(NumberFormat(((t_NumberFormat *) arg)->object.this$));
    }
    static PyObject *t_NumberFormat_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, NumberFormat::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_NumberFormat_clone(t_NumberFormat *self, PyObject *args)
    {
      ::java::lang::Object result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.clone());
        return ::java::lang::t_Object::wrap_Object(result);
      }

      return callSuper(&PY_TYPE(NumberFormat), (PyObject *) self, "clone", args, 2);
    }

    static PyObject *t_NumberFormat_equals(t_NumberFormat *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(NumberFormat), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_NumberFormat_format(t_NumberFormat *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jdouble a0;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "D", &a0))
          {
            OBJ_CALL(result = self->object.format(a0));
            return j2p(result);
          }
        }
        {
          jlong a0;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(result = self->object.format(a0));
            return j2p(result);
          }
        }
      }

      return callSuper(&PY_TYPE(NumberFormat), (PyObject *) self, "format", args, 2);
    }

    static PyObject *t_NumberFormat_getAvailableLocales(PyTypeObject *type)
    {
      JArray< ::java::util::Locale > result((jobject) NULL);
      OBJ_CALL(result = ::java::text::NumberFormat::getAvailableLocales());
      return JArray<jobject>(result.this$).wrap(::java::util::t_Locale::wrap_jobject);
    }

    static PyObject *t_NumberFormat_getCurrency(t_NumberFormat *self)
    {
      ::java::util::Currency result((jobject) NULL);
      OBJ_CALL(result = self->object.getCurrency());
      return ::java::util::t_Currency::wrap_Object(result);
    }

    static PyObject *t_NumberFormat_getCurrencyInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          NumberFormat result((jobject) NULL);
          OBJ_CALL(result = ::java::text::NumberFormat::getCurrencyInstance());
          return t_NumberFormat::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          NumberFormat result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = ::java::text::NumberFormat::getCurrencyInstance(a0));
            return t_NumberFormat::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getCurrencyInstance", args);
      return NULL;
    }

    static PyObject *t_NumberFormat_getInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          NumberFormat result((jobject) NULL);
          OBJ_CALL(result = ::java::text::NumberFormat::getInstance());
          return t_NumberFormat::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          NumberFormat result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = ::java::text::NumberFormat::getInstance(a0));
            return t_NumberFormat::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getInstance", args);
      return NULL;
    }

    static PyObject *t_NumberFormat_getIntegerInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          NumberFormat result((jobject) NULL);
          OBJ_CALL(result = ::java::text::NumberFormat::getIntegerInstance());
          return t_NumberFormat::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          NumberFormat result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = ::java::text::NumberFormat::getIntegerInstance(a0));
            return t_NumberFormat::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getIntegerInstance", args);
      return NULL;
    }

    static PyObject *t_NumberFormat_getMaximumFractionDigits(t_NumberFormat *self)
    {
      jint result;
      OBJ_CALL(result = self->object.getMaximumFractionDigits());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_NumberFormat_getMaximumIntegerDigits(t_NumberFormat *self)
    {
      jint result;
      OBJ_CALL(result = self->object.getMaximumIntegerDigits());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_NumberFormat_getMinimumFractionDigits(t_NumberFormat *self)
    {
      jint result;
      OBJ_CALL(result = self->object.getMinimumFractionDigits());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_NumberFormat_getMinimumIntegerDigits(t_NumberFormat *self)
    {
      jint result;
      OBJ_CALL(result = self->object.getMinimumIntegerDigits());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_NumberFormat_getNumberInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          NumberFormat result((jobject) NULL);
          OBJ_CALL(result = ::java::text::NumberFormat::getNumberInstance());
          return t_NumberFormat::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          NumberFormat result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = ::java::text::NumberFormat::getNumberInstance(a0));
            return t_NumberFormat::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getNumberInstance", args);
      return NULL;
    }

    static PyObject *t_NumberFormat_getPercentInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          NumberFormat result((jobject) NULL);
          OBJ_CALL(result = ::java::text::NumberFormat::getPercentInstance());
          return t_NumberFormat::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          NumberFormat result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = ::java::text::NumberFormat::getPercentInstance(a0));
            return t_NumberFormat::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getPercentInstance", args);
      return NULL;
    }

    static PyObject *t_NumberFormat_hashCode(t_NumberFormat *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(NumberFormat), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_NumberFormat_isGroupingUsed(t_NumberFormat *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isGroupingUsed());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_NumberFormat_isParseIntegerOnly(t_NumberFormat *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isParseIntegerOnly());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_NumberFormat_parse(t_NumberFormat *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      ::java::lang::Number result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = self->object.parse(a0));
        return ::java::lang::t_Number::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "parse", arg);
      return NULL;
    }

    static PyObject *t_NumberFormat_setCurrency(t_NumberFormat *self, PyObject *arg)
    {
      ::java::util::Currency a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::util::Currency::initializeClass, &a0))
      {
        OBJ_CALL(self->object.setCurrency(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setCurrency", arg);
      return NULL;
    }

    static PyObject *t_NumberFormat_setGroupingUsed(t_NumberFormat *self, PyObject *arg)
    {
      jboolean a0;

      if (!parseArg(arg, "Z", &a0))
      {
        OBJ_CALL(self->object.setGroupingUsed(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setGroupingUsed", arg);
      return NULL;
    }

    static PyObject *t_NumberFormat_setMaximumFractionDigits(t_NumberFormat *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.setMaximumFractionDigits(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setMaximumFractionDigits", arg);
      return NULL;
    }

    static PyObject *t_NumberFormat_setMaximumIntegerDigits(t_NumberFormat *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.setMaximumIntegerDigits(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setMaximumIntegerDigits", arg);
      return NULL;
    }

    static PyObject *t_NumberFormat_setMinimumFractionDigits(t_NumberFormat *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.setMinimumFractionDigits(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setMinimumFractionDigits", arg);
      return NULL;
    }

    static PyObject *t_NumberFormat_setMinimumIntegerDigits(t_NumberFormat *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.setMinimumIntegerDigits(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setMinimumIntegerDigits", arg);
      return NULL;
    }

    static PyObject *t_NumberFormat_setParseIntegerOnly(t_NumberFormat *self, PyObject *arg)
    {
      jboolean a0;

      if (!parseArg(arg, "Z", &a0))
      {
        OBJ_CALL(self->object.setParseIntegerOnly(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setParseIntegerOnly", arg);
      return NULL;
    }

    static PyObject *t_NumberFormat_get__availableLocales(t_NumberFormat *self, void *data)
    {
      JArray< ::java::util::Locale > value((jobject) NULL);
      OBJ_CALL(value = self->object.getAvailableLocales());
      return JArray<jobject>(value.this$).wrap(::java::util::t_Locale::wrap_jobject);
    }

    static PyObject *t_NumberFormat_get__currency(t_NumberFormat *self, void *data)
    {
      ::java::util::Currency value((jobject) NULL);
      OBJ_CALL(value = self->object.getCurrency());
      return ::java::util::t_Currency::wrap_Object(value);
    }
    static int t_NumberFormat_set__currency(t_NumberFormat *self, PyObject *arg, void *data)
    {
      {
        ::java::util::Currency value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::util::Currency::initializeClass, &value))
        {
          INT_CALL(self->object.setCurrency(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "currency", arg);
      return -1;
    }

    static PyObject *t_NumberFormat_get__currencyInstance(t_NumberFormat *self, void *data)
    {
      NumberFormat value((jobject) NULL);
      OBJ_CALL(value = self->object.getCurrencyInstance());
      return t_NumberFormat::wrap_Object(value);
    }

    static PyObject *t_NumberFormat_get__groupingUsed(t_NumberFormat *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isGroupingUsed());
      Py_RETURN_BOOL(value);
    }
    static int t_NumberFormat_set__groupingUsed(t_NumberFormat *self, PyObject *arg, void *data)
    {
      {
        jboolean value;
        if (!parseArg(arg, "Z", &value))
        {
          INT_CALL(self->object.setGroupingUsed(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "groupingUsed", arg);
      return -1;
    }

    static PyObject *t_NumberFormat_get__instance(t_NumberFormat *self, void *data)
    {
      NumberFormat value((jobject) NULL);
      OBJ_CALL(value = self->object.getInstance());
      return t_NumberFormat::wrap_Object(value);
    }

    static PyObject *t_NumberFormat_get__integerInstance(t_NumberFormat *self, void *data)
    {
      NumberFormat value((jobject) NULL);
      OBJ_CALL(value = self->object.getIntegerInstance());
      return t_NumberFormat::wrap_Object(value);
    }

    static PyObject *t_NumberFormat_get__maximumFractionDigits(t_NumberFormat *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getMaximumFractionDigits());
      return PyInt_FromLong((long) value);
    }
    static int t_NumberFormat_set__maximumFractionDigits(t_NumberFormat *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setMaximumFractionDigits(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "maximumFractionDigits", arg);
      return -1;
    }

    static PyObject *t_NumberFormat_get__maximumIntegerDigits(t_NumberFormat *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getMaximumIntegerDigits());
      return PyInt_FromLong((long) value);
    }
    static int t_NumberFormat_set__maximumIntegerDigits(t_NumberFormat *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setMaximumIntegerDigits(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "maximumIntegerDigits", arg);
      return -1;
    }

    static PyObject *t_NumberFormat_get__minimumFractionDigits(t_NumberFormat *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getMinimumFractionDigits());
      return PyInt_FromLong((long) value);
    }
    static int t_NumberFormat_set__minimumFractionDigits(t_NumberFormat *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setMinimumFractionDigits(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "minimumFractionDigits", arg);
      return -1;
    }

    static PyObject *t_NumberFormat_get__minimumIntegerDigits(t_NumberFormat *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getMinimumIntegerDigits());
      return PyInt_FromLong((long) value);
    }
    static int t_NumberFormat_set__minimumIntegerDigits(t_NumberFormat *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setMinimumIntegerDigits(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "minimumIntegerDigits", arg);
      return -1;
    }

    static PyObject *t_NumberFormat_get__numberInstance(t_NumberFormat *self, void *data)
    {
      NumberFormat value((jobject) NULL);
      OBJ_CALL(value = self->object.getNumberInstance());
      return t_NumberFormat::wrap_Object(value);
    }

    static PyObject *t_NumberFormat_get__parseIntegerOnly(t_NumberFormat *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isParseIntegerOnly());
      Py_RETURN_BOOL(value);
    }
    static int t_NumberFormat_set__parseIntegerOnly(t_NumberFormat *self, PyObject *arg, void *data)
    {
      {
        jboolean value;
        if (!parseArg(arg, "Z", &value))
        {
          INT_CALL(self->object.setParseIntegerOnly(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "parseIntegerOnly", arg);
      return -1;
    }

    static PyObject *t_NumberFormat_get__percentInstance(t_NumberFormat *self, void *data)
    {
      NumberFormat value((jobject) NULL);
      OBJ_CALL(value = self->object.getPercentInstance());
      return t_NumberFormat::wrap_Object(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/UTF32ToUTF8.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *UTF32ToUTF8::class$ = NULL;
          jmethodID *UTF32ToUTF8::mids$ = NULL;
          bool UTF32ToUTF8::live$ = false;

          jclass UTF32ToUTF8::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/UTF32ToUTF8");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_convert_7aca8e1f] = env->getMethodID(cls, "convert", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          UTF32ToUTF8::UTF32ToUTF8() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::util::automaton::Automaton UTF32ToUTF8::convert(const ::org::apache::lucene::util::automaton::Automaton & a0) const
          {
            return ::org::apache::lucene::util::automaton::Automaton(env->callObjectMethod(this$, mids$[mid_convert_7aca8e1f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_UTF32ToUTF8_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UTF32ToUTF8_instance_(PyTypeObject *type, PyObject *arg);
          static int t_UTF32ToUTF8_init_(t_UTF32ToUTF8 *self, PyObject *args, PyObject *kwds);
          static PyObject *t_UTF32ToUTF8_convert(t_UTF32ToUTF8 *self, PyObject *arg);

          static PyMethodDef t_UTF32ToUTF8__methods_[] = {
            DECLARE_METHOD(t_UTF32ToUTF8, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UTF32ToUTF8, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UTF32ToUTF8, convert, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(UTF32ToUTF8, t_UTF32ToUTF8, ::java::lang::Object, UTF32ToUTF8, t_UTF32ToUTF8_init_, 0, 0, 0, 0, 0);

          void t_UTF32ToUTF8::install(PyObject *module)
          {
            installType(&PY_TYPE(UTF32ToUTF8), module, "UTF32ToUTF8", 0);
          }

          void t_UTF32ToUTF8::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(UTF32ToUTF8).tp_dict, "class_", make_descriptor(UTF32ToUTF8::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(UTF32ToUTF8).tp_dict, "wrapfn_", make_descriptor(t_UTF32ToUTF8::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(UTF32ToUTF8).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_UTF32ToUTF8_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, UTF32ToUTF8::initializeClass, 1)))
              return NULL;
            return t_UTF32ToUTF8::wrap_Object(UTF32ToUTF8(((t_UTF32ToUTF8 *) arg)->object.this$));
          }
          static PyObject *t_UTF32ToUTF8_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, UTF32ToUTF8::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_UTF32ToUTF8_init_(t_UTF32ToUTF8 *self, PyObject *args, PyObject *kwds)
          {
            UTF32ToUTF8 object((jobject) NULL);

            INT_CALL(object = UTF32ToUTF8());
            self->object = object;

            return 0;
          }

          static PyObject *t_UTF32ToUTF8_convert(t_UTF32ToUTF8 *self, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.convert(a0));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "convert", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanMinimalStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanMinimalStemmer::class$ = NULL;
          jmethodID *GermanMinimalStemmer::mids$ = NULL;
          bool GermanMinimalStemmer::live$ = false;

          jclass GermanMinimalStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanMinimalStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanMinimalStemmer::GermanMinimalStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint GermanMinimalStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanMinimalStemmer_init_(t_GermanMinimalStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GermanMinimalStemmer_stem(t_GermanMinimalStemmer *self, PyObject *args);

          static PyMethodDef t_GermanMinimalStemmer__methods_[] = {
            DECLARE_METHOD(t_GermanMinimalStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanMinimalStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanMinimalStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GermanMinimalStemmer, t_GermanMinimalStemmer, ::java::lang::Object, GermanMinimalStemmer, t_GermanMinimalStemmer_init_, 0, 0, 0, 0, 0);

          void t_GermanMinimalStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanMinimalStemmer), module, "GermanMinimalStemmer", 0);
          }

          void t_GermanMinimalStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GermanMinimalStemmer).tp_dict, "class_", make_descriptor(GermanMinimalStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GermanMinimalStemmer).tp_dict, "wrapfn_", make_descriptor(t_GermanMinimalStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GermanMinimalStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GermanMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanMinimalStemmer::initializeClass, 1)))
              return NULL;
            return t_GermanMinimalStemmer::wrap_Object(GermanMinimalStemmer(((t_GermanMinimalStemmer *) arg)->object.this$));
          }
          static PyObject *t_GermanMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanMinimalStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanMinimalStemmer_init_(t_GermanMinimalStemmer *self, PyObject *args, PyObject *kwds)
          {
            GermanMinimalStemmer object((jobject) NULL);

            INT_CALL(object = GermanMinimalStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_GermanMinimalStemmer_stem(t_GermanMinimalStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FieldInfo$DocValuesType.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FieldInfo$DocValuesType::class$ = NULL;
        jmethodID *FieldInfo$DocValuesType::mids$ = NULL;
        bool FieldInfo$DocValuesType::live$ = false;
        FieldInfo$DocValuesType *FieldInfo$DocValuesType::BINARY = NULL;
        FieldInfo$DocValuesType *FieldInfo$DocValuesType::NUMERIC = NULL;
        FieldInfo$DocValuesType *FieldInfo$DocValuesType::SORTED = NULL;
        FieldInfo$DocValuesType *FieldInfo$DocValuesType::SORTED_NUMERIC = NULL;
        FieldInfo$DocValuesType *FieldInfo$DocValuesType::SORTED_SET = NULL;

        jclass FieldInfo$DocValuesType::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FieldInfo$DocValuesType");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_df70c72d] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/index/FieldInfo$DocValuesType;");
            mids$[mid_values_3d388c3f] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/index/FieldInfo$DocValuesType;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            BINARY = new FieldInfo$DocValuesType(env->getStaticObjectField(cls, "BINARY", "Lorg/apache/lucene/index/FieldInfo$DocValuesType;"));
            NUMERIC = new FieldInfo$DocValuesType(env->getStaticObjectField(cls, "NUMERIC", "Lorg/apache/lucene/index/FieldInfo$DocValuesType;"));
            SORTED = new FieldInfo$DocValuesType(env->getStaticObjectField(cls, "SORTED", "Lorg/apache/lucene/index/FieldInfo$DocValuesType;"));
            SORTED_NUMERIC = new FieldInfo$DocValuesType(env->getStaticObjectField(cls, "SORTED_NUMERIC", "Lorg/apache/lucene/index/FieldInfo$DocValuesType;"));
            SORTED_SET = new FieldInfo$DocValuesType(env->getStaticObjectField(cls, "SORTED_SET", "Lorg/apache/lucene/index/FieldInfo$DocValuesType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldInfo$DocValuesType FieldInfo$DocValuesType::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldInfo$DocValuesType(env->callStaticObjectMethod(cls, mids$[mid_valueOf_df70c72d], a0.this$));
        }

        JArray< FieldInfo$DocValuesType > FieldInfo$DocValuesType::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< FieldInfo$DocValuesType >(env->callStaticObjectMethod(cls, mids$[mid_values_3d388c3f]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FieldInfo$DocValuesType_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInfo$DocValuesType_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInfo$DocValuesType_of_(t_FieldInfo$DocValuesType *self, PyObject *args);
        static PyObject *t_FieldInfo$DocValuesType_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_FieldInfo$DocValuesType_values(PyTypeObject *type);
        static PyObject *t_FieldInfo$DocValuesType_get__parameters_(t_FieldInfo$DocValuesType *self, void *data);
        static PyGetSetDef t_FieldInfo$DocValuesType__fields_[] = {
          DECLARE_GET_FIELD(t_FieldInfo$DocValuesType, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldInfo$DocValuesType__methods_[] = {
          DECLARE_METHOD(t_FieldInfo$DocValuesType, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfo$DocValuesType, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfo$DocValuesType, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldInfo$DocValuesType, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FieldInfo$DocValuesType, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldInfo$DocValuesType, t_FieldInfo$DocValuesType, ::java::lang::Enum, FieldInfo$DocValuesType, abstract_init, 0, 0, t_FieldInfo$DocValuesType__fields_, 0, 0);
        PyObject *t_FieldInfo$DocValuesType::wrap_Object(const FieldInfo$DocValuesType& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldInfo$DocValuesType::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldInfo$DocValuesType *self = (t_FieldInfo$DocValuesType *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldInfo$DocValuesType::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldInfo$DocValuesType::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldInfo$DocValuesType *self = (t_FieldInfo$DocValuesType *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldInfo$DocValuesType::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldInfo$DocValuesType), module, "FieldInfo$DocValuesType", 0);
        }

        void t_FieldInfo$DocValuesType::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldInfo$DocValuesType).tp_dict, "class_", make_descriptor(FieldInfo$DocValuesType::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldInfo$DocValuesType).tp_dict, "wrapfn_", make_descriptor(t_FieldInfo$DocValuesType::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldInfo$DocValuesType).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FieldInfo$DocValuesType::initializeClass);
          PyDict_SetItemString(PY_TYPE(FieldInfo$DocValuesType).tp_dict, "BINARY", make_descriptor(t_FieldInfo$DocValuesType::wrap_Object(*FieldInfo$DocValuesType::BINARY)));
          PyDict_SetItemString(PY_TYPE(FieldInfo$DocValuesType).tp_dict, "NUMERIC", make_descriptor(t_FieldInfo$DocValuesType::wrap_Object(*FieldInfo$DocValuesType::NUMERIC)));
          PyDict_SetItemString(PY_TYPE(FieldInfo$DocValuesType).tp_dict, "SORTED", make_descriptor(t_FieldInfo$DocValuesType::wrap_Object(*FieldInfo$DocValuesType::SORTED)));
          PyDict_SetItemString(PY_TYPE(FieldInfo$DocValuesType).tp_dict, "SORTED_NUMERIC", make_descriptor(t_FieldInfo$DocValuesType::wrap_Object(*FieldInfo$DocValuesType::SORTED_NUMERIC)));
          PyDict_SetItemString(PY_TYPE(FieldInfo$DocValuesType).tp_dict, "SORTED_SET", make_descriptor(t_FieldInfo$DocValuesType::wrap_Object(*FieldInfo$DocValuesType::SORTED_SET)));
        }

        static PyObject *t_FieldInfo$DocValuesType_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldInfo$DocValuesType::initializeClass, 1)))
            return NULL;
          return t_FieldInfo$DocValuesType::wrap_Object(FieldInfo$DocValuesType(((t_FieldInfo$DocValuesType *) arg)->object.this$));
        }
        static PyObject *t_FieldInfo$DocValuesType_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldInfo$DocValuesType::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldInfo$DocValuesType_of_(t_FieldInfo$DocValuesType *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_FieldInfo$DocValuesType_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          FieldInfo$DocValuesType result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::FieldInfo$DocValuesType::valueOf(a0));
            return t_FieldInfo$DocValuesType::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_FieldInfo$DocValuesType_values(PyTypeObject *type)
        {
          JArray< FieldInfo$DocValuesType > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::FieldInfo$DocValuesType::values());
          return JArray<jobject>(result.this$).wrap(t_FieldInfo$DocValuesType::wrap_jobject);
        }
        static PyObject *t_FieldInfo$DocValuesType_get__parameters_(t_FieldInfo$DocValuesType *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/SimilarityBase.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/similarities/Similarity$SimScorer.h"
#include "org/apache/lucene/search/CollectionStatistics.h"
#include "org/apache/lucene/search/TermStatistics.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/FieldInvertState.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/similarities/Similarity$SimWeight.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *SimilarityBase::class$ = NULL;
          jmethodID *SimilarityBase::mids$ = NULL;
          bool SimilarityBase::live$ = false;

          jclass SimilarityBase::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/SimilarityBase");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_computeNorm_6ff84e0e] = env->getMethodID(cls, "computeNorm", "(Lorg/apache/lucene/index/FieldInvertState;)J");
              mids$[mid_computeWeight_8bb6ee0b] = env->getMethodID(cls, "computeWeight", "(FLorg/apache/lucene/search/CollectionStatistics;[Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/similarities/Similarity$SimWeight;");
              mids$[mid_getDiscountOverlaps_54c6a16a] = env->getMethodID(cls, "getDiscountOverlaps", "()Z");
              mids$[mid_log2_5d1c7657] = env->getStaticMethodID(cls, "log2", "(D)D");
              mids$[mid_setDiscountOverlaps_bb0c767f] = env->getMethodID(cls, "setDiscountOverlaps", "(Z)V");
              mids$[mid_simScorer_9a2cfed8] = env->getMethodID(cls, "simScorer", "(Lorg/apache/lucene/search/similarities/Similarity$SimWeight;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/similarities/Similarity$SimScorer;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_score_63482206] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)F");
              mids$[mid_explain_347d95f8] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/Explanation;Lorg/apache/lucene/search/similarities/BasicStats;IFF)V");
              mids$[mid_explain_be9c5a0c] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;ILorg/apache/lucene/search/Explanation;F)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_decodeNormValue_b2271697] = env->getMethodID(cls, "decodeNormValue", "(B)F");
              mids$[mid_fillBasicStats_c856a532] = env->getMethodID(cls, "fillBasicStats", "(Lorg/apache/lucene/search/similarities/BasicStats;Lorg/apache/lucene/search/CollectionStatistics;Lorg/apache/lucene/search/TermStatistics;)V");
              mids$[mid_encodeNormValue_f1b0c010] = env->getMethodID(cls, "encodeNormValue", "(FF)B");
              mids$[mid_newStats_5129800c] = env->getMethodID(cls, "newStats", "(Ljava/lang/String;F)Lorg/apache/lucene/search/similarities/BasicStats;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimilarityBase::SimilarityBase() : ::org::apache::lucene::search::similarities::Similarity(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jlong SimilarityBase::computeNorm(const ::org::apache::lucene::index::FieldInvertState & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_computeNorm_6ff84e0e], a0.this$);
          }

          ::org::apache::lucene::search::similarities::Similarity$SimWeight SimilarityBase::computeWeight(jfloat a0, const ::org::apache::lucene::search::CollectionStatistics & a1, const JArray< ::org::apache::lucene::search::TermStatistics > & a2) const
          {
            return ::org::apache::lucene::search::similarities::Similarity$SimWeight(env->callObjectMethod(this$, mids$[mid_computeWeight_8bb6ee0b], a0, a1.this$, a2.this$));
          }

          jboolean SimilarityBase::getDiscountOverlaps() const
          {
            return env->callBooleanMethod(this$, mids$[mid_getDiscountOverlaps_54c6a16a]);
          }

          jdouble SimilarityBase::log2(jdouble a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticDoubleMethod(cls, mids$[mid_log2_5d1c7657], a0);
          }

          void SimilarityBase::setDiscountOverlaps(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setDiscountOverlaps_bb0c767f], a0);
          }

          ::org::apache::lucene::search::similarities::Similarity$SimScorer SimilarityBase::simScorer(const ::org::apache::lucene::search::similarities::Similarity$SimWeight & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
          {
            return ::org::apache::lucene::search::similarities::Similarity$SimScorer(env->callObjectMethod(this$, mids$[mid_simScorer_9a2cfed8], a0.this$, a1.this$));
          }

          ::java::lang::String SimilarityBase::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_SimilarityBase_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimilarityBase_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimilarityBase_init_(t_SimilarityBase *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimilarityBase_computeNorm(t_SimilarityBase *self, PyObject *args);
          static PyObject *t_SimilarityBase_computeWeight(t_SimilarityBase *self, PyObject *args);
          static PyObject *t_SimilarityBase_getDiscountOverlaps(t_SimilarityBase *self);
          static PyObject *t_SimilarityBase_log2(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimilarityBase_setDiscountOverlaps(t_SimilarityBase *self, PyObject *arg);
          static PyObject *t_SimilarityBase_simScorer(t_SimilarityBase *self, PyObject *args);
          static PyObject *t_SimilarityBase_toString(t_SimilarityBase *self, PyObject *args);
          static PyObject *t_SimilarityBase_get__discountOverlaps(t_SimilarityBase *self, void *data);
          static int t_SimilarityBase_set__discountOverlaps(t_SimilarityBase *self, PyObject *arg, void *data);
          static PyGetSetDef t_SimilarityBase__fields_[] = {
            DECLARE_GETSET_FIELD(t_SimilarityBase, discountOverlaps),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SimilarityBase__methods_[] = {
            DECLARE_METHOD(t_SimilarityBase, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimilarityBase, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimilarityBase, computeNorm, METH_VARARGS),
            DECLARE_METHOD(t_SimilarityBase, computeWeight, METH_VARARGS),
            DECLARE_METHOD(t_SimilarityBase, getDiscountOverlaps, METH_NOARGS),
            DECLARE_METHOD(t_SimilarityBase, log2, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimilarityBase, setDiscountOverlaps, METH_O),
            DECLARE_METHOD(t_SimilarityBase, simScorer, METH_VARARGS),
            DECLARE_METHOD(t_SimilarityBase, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SimilarityBase, t_SimilarityBase, ::org::apache::lucene::search::similarities::Similarity, SimilarityBase, t_SimilarityBase_init_, 0, 0, t_SimilarityBase__fields_, 0, 0);

          void t_SimilarityBase::install(PyObject *module)
          {
            installType(&PY_TYPE(SimilarityBase), module, "SimilarityBase", 0);
          }

          void t_SimilarityBase::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SimilarityBase).tp_dict, "class_", make_descriptor(SimilarityBase::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SimilarityBase).tp_dict, "wrapfn_", make_descriptor(t_SimilarityBase::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SimilarityBase).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimilarityBase_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimilarityBase::initializeClass, 1)))
              return NULL;
            return t_SimilarityBase::wrap_Object(SimilarityBase(((t_SimilarityBase *) arg)->object.this$));
          }
          static PyObject *t_SimilarityBase_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimilarityBase::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimilarityBase_init_(t_SimilarityBase *self, PyObject *args, PyObject *kwds)
          {
            SimilarityBase object((jobject) NULL);

            INT_CALL(object = SimilarityBase());
            self->object = object;

            return 0;
          }

          static PyObject *t_SimilarityBase_computeNorm(t_SimilarityBase *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInvertState a0((jobject) NULL);
            jlong result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInvertState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.computeNorm(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(SimilarityBase), (PyObject *) self, "computeNorm", args, 2);
          }

          static PyObject *t_SimilarityBase_computeWeight(t_SimilarityBase *self, PyObject *args)
          {
            jfloat a0;
            ::org::apache::lucene::search::CollectionStatistics a1((jobject) NULL);
            JArray< ::org::apache::lucene::search::TermStatistics > a2((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity$SimWeight result((jobject) NULL);

            if (!parseArgs(args, "Fk[k", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.computeWeight(a0, a1, a2));
              return ::org::apache::lucene::search::similarities::t_Similarity$SimWeight::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SimilarityBase), (PyObject *) self, "computeWeight", args, 2);
          }

          static PyObject *t_SimilarityBase_getDiscountOverlaps(t_SimilarityBase *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.getDiscountOverlaps());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_SimilarityBase_log2(PyTypeObject *type, PyObject *arg)
          {
            jdouble a0;
            jdouble result;

            if (!parseArg(arg, "D", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::similarities::SimilarityBase::log2(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError(type, "log2", arg);
            return NULL;
          }

          static PyObject *t_SimilarityBase_setDiscountOverlaps(t_SimilarityBase *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setDiscountOverlaps(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setDiscountOverlaps", arg);
            return NULL;
          }

          static PyObject *t_SimilarityBase_simScorer(t_SimilarityBase *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::Similarity$SimWeight a0((jobject) NULL);
            ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity$SimScorer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::similarities::Similarity$SimWeight::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.simScorer(a0, a1));
              return ::org::apache::lucene::search::similarities::t_Similarity$SimScorer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SimilarityBase), (PyObject *) self, "simScorer", args, 2);
          }

          static PyObject *t_SimilarityBase_toString(t_SimilarityBase *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SimilarityBase), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_SimilarityBase_get__discountOverlaps(t_SimilarityBase *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.getDiscountOverlaps());
            Py_RETURN_BOOL(value);
          }
          static int t_SimilarityBase_set__discountOverlaps(t_SimilarityBase *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setDiscountOverlaps(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "discountOverlaps", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$unary_operator_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$unary_operator_return::class$ = NULL;
          jmethodID *JavascriptParser$unary_operator_return::mids$ = NULL;
          bool JavascriptParser$unary_operator_return::live$ = false;

          jclass JavascriptParser$unary_operator_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$unary_operator_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$unary_operator_return::JavascriptParser$unary_operator_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$unary_operator_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$unary_operator_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$unary_operator_return_init_(t_JavascriptParser$unary_operator_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$unary_operator_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$unary_operator_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$unary_operator_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$unary_operator_return, t_JavascriptParser$unary_operator_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$unary_operator_return, t_JavascriptParser$unary_operator_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$unary_operator_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$unary_operator_return), module, "JavascriptParser$unary_operator_return", 0);
          }

          void t_JavascriptParser$unary_operator_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$unary_operator_return).tp_dict, "class_", make_descriptor(JavascriptParser$unary_operator_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$unary_operator_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$unary_operator_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$unary_operator_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$unary_operator_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$unary_operator_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$unary_operator_return::wrap_Object(JavascriptParser$unary_operator_return(((t_JavascriptParser$unary_operator_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$unary_operator_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$unary_operator_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$unary_operator_return_init_(t_JavascriptParser$unary_operator_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$unary_operator_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$unary_operator_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FilteredTermsEnum.h"
#include "java/util/Comparator.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/TermState.h"
#include "org/apache/lucene/index/DocsEnum.h"
#include "org/apache/lucene/index/TermsEnum$SeekStatus.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FilteredTermsEnum::class$ = NULL;
        jmethodID *FilteredTermsEnum::mids$ = NULL;
        bool FilteredTermsEnum::live$ = false;

        jclass FilteredTermsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FilteredTermsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_0f660bfe] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/TermsEnum;)V");
            mids$[mid_init$_3c71de47] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/TermsEnum;Z)V");
            mids$[mid_attributes_f901022b] = env->getMethodID(cls, "attributes", "()Lorg/apache/lucene/util/AttributeSource;");
            mids$[mid_docFreq_54c6a179] = env->getMethodID(cls, "docFreq", "()I");
            mids$[mid_docs_e6d4c3ef] = env->getMethodID(cls, "docs", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsEnum;I)Lorg/apache/lucene/index/DocsEnum;");
            mids$[mid_docsAndPositions_b5d9c11b] = env->getMethodID(cls, "docsAndPositions", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsAndPositionsEnum;I)Lorg/apache/lucene/index/DocsAndPositionsEnum;");
            mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
            mids$[mid_next_4ae19461] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_ord_54c6a17a] = env->getMethodID(cls, "ord", "()J");
            mids$[mid_seekCeil_fa9d72c4] = env->getMethodID(cls, "seekCeil", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum$SeekStatus;");
            mids$[mid_seekExact_7bc03dc8] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;)Z");
            mids$[mid_seekExact_0ee6df2f] = env->getMethodID(cls, "seekExact", "(J)V");
            mids$[mid_seekExact_fe46da51] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/index/TermState;)V");
            mids$[mid_term_4ae19461] = env->getMethodID(cls, "term", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_termState_3e41fede] = env->getMethodID(cls, "termState", "()Lorg/apache/lucene/index/TermState;");
            mids$[mid_totalTermFreq_54c6a17a] = env->getMethodID(cls, "totalTermFreq", "()J");
            mids$[mid_accept_30bc08e1] = env->getMethodID(cls, "accept", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/FilteredTermsEnum$AcceptStatus;");
            mids$[mid_setInitialSeekTerm_7bc03dc4] = env->getMethodID(cls, "setInitialSeekTerm", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_nextSeekTerm_21e43cb7] = env->getMethodID(cls, "nextSeekTerm", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/BytesRef;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilteredTermsEnum::FilteredTermsEnum(const ::org::apache::lucene::index::TermsEnum & a0) : ::org::apache::lucene::index::TermsEnum(env->newObject(initializeClass, &mids$, mid_init$_0f660bfe, a0.this$)) {}

        FilteredTermsEnum::FilteredTermsEnum(const ::org::apache::lucene::index::TermsEnum & a0, jboolean a1) : ::org::apache::lucene::index::TermsEnum(env->newObject(initializeClass, &mids$, mid_init$_3c71de47, a0.this$, a1)) {}

        ::org::apache::lucene::util::AttributeSource FilteredTermsEnum::attributes() const
        {
          return ::org::apache::lucene::util::AttributeSource(env->callObjectMethod(this$, mids$[mid_attributes_f901022b]));
        }

        jint FilteredTermsEnum::docFreq() const
        {
          return env->callIntMethod(this$, mids$[mid_docFreq_54c6a179]);
        }

        ::org::apache::lucene::index::DocsEnum FilteredTermsEnum::docs(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::index::DocsEnum & a1, jint a2) const
        {
          return ::org::apache::lucene::index::DocsEnum(env->callObjectMethod(this$, mids$[mid_docs_e6d4c3ef], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::index::DocsAndPositionsEnum FilteredTermsEnum::docsAndPositions(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::index::DocsAndPositionsEnum & a1, jint a2) const
        {
          return ::org::apache::lucene::index::DocsAndPositionsEnum(env->callObjectMethod(this$, mids$[mid_docsAndPositions_b5d9c11b], a0.this$, a1.this$, a2));
        }

        ::java::util::Comparator FilteredTermsEnum::getComparator() const
        {
          return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
        }

        ::org::apache::lucene::util::BytesRef FilteredTermsEnum::next() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_4ae19461]));
        }

        jlong FilteredTermsEnum::ord() const
        {
          return env->callLongMethod(this$, mids$[mid_ord_54c6a17a]);
        }

        ::org::apache::lucene::index::TermsEnum$SeekStatus FilteredTermsEnum::seekCeil(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return ::org::apache::lucene::index::TermsEnum$SeekStatus(env->callObjectMethod(this$, mids$[mid_seekCeil_fa9d72c4], a0.this$));
        }

        jboolean FilteredTermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_seekExact_7bc03dc8], a0.this$);
        }

        void FilteredTermsEnum::seekExact(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_seekExact_0ee6df2f], a0);
        }

        void FilteredTermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::index::TermState & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_seekExact_fe46da51], a0.this$, a1.this$);
        }

        ::org::apache::lucene::util::BytesRef FilteredTermsEnum::term() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_term_4ae19461]));
        }

        ::org::apache::lucene::index::TermState FilteredTermsEnum::termState() const
        {
          return ::org::apache::lucene::index::TermState(env->callObjectMethod(this$, mids$[mid_termState_3e41fede]));
        }

        jlong FilteredTermsEnum::totalTermFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_totalTermFreq_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FilteredTermsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilteredTermsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilteredTermsEnum_init_(t_FilteredTermsEnum *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilteredTermsEnum_attributes(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_docFreq(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_docs(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_docsAndPositions(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_getComparator(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_next(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_ord(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_seekCeil(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_seekExact(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_term(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_termState(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_totalTermFreq(t_FilteredTermsEnum *self, PyObject *args);
        static PyObject *t_FilteredTermsEnum_get__comparator(t_FilteredTermsEnum *self, void *data);
        static PyGetSetDef t_FilteredTermsEnum__fields_[] = {
          DECLARE_GET_FIELD(t_FilteredTermsEnum, comparator),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilteredTermsEnum__methods_[] = {
          DECLARE_METHOD(t_FilteredTermsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilteredTermsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilteredTermsEnum, attributes, METH_VARARGS),
          DECLARE_METHOD(t_FilteredTermsEnum, docFreq, METH_VARARGS),
          DECLARE_METHOD(t_FilteredTermsEnum, docs, METH_VARARGS),
          DECLARE_METHOD(t_FilteredTermsEnum, docsAndPositions, METH_VARARGS),
          DECLARE_METHOD(t_FilteredTermsEnum, getComparator, METH_VARARGS),
          DECLARE_METHOD(t_FilteredTermsEnum, next, METH_VARARGS),
          DECLARE_METHOD(t_FilteredTermsEnum, ord, METH_VARARGS),
          DECLARE_METHOD(t_FilteredTermsEnum, seekCeil, METH_VARARGS),
          DECLARE_METHOD(t_FilteredTermsEnum, seekExact, METH_VARARGS),
          DECLARE_METHOD(t_FilteredTermsEnum, term, METH_VARARGS),
          DECLARE_METHOD(t_FilteredTermsEnum, termState, METH_VARARGS),
          DECLARE_METHOD(t_FilteredTermsEnum, totalTermFreq, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilteredTermsEnum, t_FilteredTermsEnum, ::org::apache::lucene::index::TermsEnum, FilteredTermsEnum, t_FilteredTermsEnum_init_, PyObject_SelfIter, ((PyObject *(*)(t_FilteredTermsEnum *)) get_next< t_FilteredTermsEnum,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >), t_FilteredTermsEnum__fields_, 0, 0);

        void t_FilteredTermsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(FilteredTermsEnum), module, "FilteredTermsEnum", 0);
        }

        void t_FilteredTermsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilteredTermsEnum).tp_dict, "class_", make_descriptor(FilteredTermsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilteredTermsEnum).tp_dict, "wrapfn_", make_descriptor(t_FilteredTermsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilteredTermsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilteredTermsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilteredTermsEnum::initializeClass, 1)))
            return NULL;
          return t_FilteredTermsEnum::wrap_Object(FilteredTermsEnum(((t_FilteredTermsEnum *) arg)->object.this$));
        }
        static PyObject *t_FilteredTermsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilteredTermsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilteredTermsEnum_init_(t_FilteredTermsEnum *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
              FilteredTermsEnum object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &a0))
              {
                INT_CALL(object = FilteredTermsEnum(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
              jboolean a1;
              FilteredTermsEnum object((jobject) NULL);

              if (!parseArgs(args, "kZ", ::org::apache::lucene::index::TermsEnum::initializeClass, &a0, &a1))
              {
                INT_CALL(object = FilteredTermsEnum(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilteredTermsEnum_attributes(t_FilteredTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::AttributeSource result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.attributes());
            return ::org::apache::lucene::util::t_AttributeSource::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilteredTermsEnum), (PyObject *) self, "attributes", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_docFreq(t_FilteredTermsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docFreq());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilteredTermsEnum), (PyObject *) self, "docFreq", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_docs(t_FilteredTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits a0((jobject) NULL);
          ::org::apache::lucene::index::DocsEnum a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::index::DocsEnum result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsEnum::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.docs(a0, a1, a2));
            return ::org::apache::lucene::index::t_DocsEnum::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilteredTermsEnum), (PyObject *) self, "docs", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_docsAndPositions(t_FilteredTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits a0((jobject) NULL);
          ::org::apache::lucene::index::DocsAndPositionsEnum a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::index::DocsAndPositionsEnum result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsAndPositionsEnum::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.docsAndPositions(a0, a1, a2));
            return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilteredTermsEnum), (PyObject *) self, "docsAndPositions", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_getComparator(t_FilteredTermsEnum *self, PyObject *args)
        {
          ::java::util::Comparator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          return callSuper(&PY_TYPE(FilteredTermsEnum), (PyObject *) self, "getComparator", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_next(t_FilteredTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilteredTermsEnum), (PyObject *) self, "next", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_ord(t_FilteredTermsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.ord());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FilteredTermsEnum), (PyObject *) self, "ord", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_seekCeil(t_FilteredTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum$SeekStatus result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.seekCeil(a0));
            return ::org::apache::lucene::index::t_TermsEnum$SeekStatus::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilteredTermsEnum), (PyObject *) self, "seekCeil", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_seekExact(t_FilteredTermsEnum *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.seekExact(a0));
                Py_RETURN_BOOL(result);
              }
            }
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.seekExact(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              ::org::apache::lucene::index::TermState a1((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::index::TermState::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.seekExact(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          return callSuper(&PY_TYPE(FilteredTermsEnum), (PyObject *) self, "seekExact", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_term(t_FilteredTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.term());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilteredTermsEnum), (PyObject *) self, "term", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_termState(t_FilteredTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::index::TermState result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.termState());
            return ::org::apache::lucene::index::t_TermState::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilteredTermsEnum), (PyObject *) self, "termState", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_totalTermFreq(t_FilteredTermsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.totalTermFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FilteredTermsEnum), (PyObject *) self, "totalTermFreq", args, 2);
        }

        static PyObject *t_FilteredTermsEnum_get__comparator(t_FilteredTermsEnum *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/text/Collator.h"
#include "java/util/Comparator.h"
#include "java/lang/Cloneable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/util/Locale.h"
#include "JArray.h"

namespace java {
  namespace text {

    ::java::lang::Class *Collator::class$ = NULL;
    jmethodID *Collator::mids$ = NULL;
    bool Collator::live$ = false;
    jint Collator::CANONICAL_DECOMPOSITION = (jint) 0;
    jint Collator::FULL_DECOMPOSITION = (jint) 0;
    jint Collator::IDENTICAL = (jint) 0;
    jint Collator::NO_DECOMPOSITION = (jint) 0;
    jint Collator::PRIMARY = (jint) 0;
    jint Collator::SECONDARY = (jint) 0;
    jint Collator::TERTIARY = (jint) 0;

    jclass Collator::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/text/Collator");

        mids$ = new jmethodID[max_mid];
        mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");
        mids$[mid_compare_466982ed] = env->getMethodID(cls, "compare", "(Ljava/lang/Object;Ljava/lang/Object;)I");
        mids$[mid_compare_4a26475d] = env->getMethodID(cls, "compare", "(Ljava/lang/String;Ljava/lang/String;)I");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_equals_4a26474e] = env->getMethodID(cls, "equals", "(Ljava/lang/String;Ljava/lang/String;)Z");
        mids$[mid_getAvailableLocales_59cb5b46] = env->getStaticMethodID(cls, "getAvailableLocales", "()[Ljava/util/Locale;");
        mids$[mid_getDecomposition_54c6a179] = env->getMethodID(cls, "getDecomposition", "()I");
        mids$[mid_getInstance_44b7fa29] = env->getStaticMethodID(cls, "getInstance", "()Ljava/text/Collator;");
        mids$[mid_getInstance_e12c63f2] = env->getStaticMethodID(cls, "getInstance", "(Ljava/util/Locale;)Ljava/text/Collator;");
        mids$[mid_getStrength_54c6a179] = env->getMethodID(cls, "getStrength", "()I");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_setDecomposition_39c7bd3c] = env->getMethodID(cls, "setDecomposition", "(I)V");
        mids$[mid_setStrength_39c7bd3c] = env->getMethodID(cls, "setStrength", "(I)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        CANONICAL_DECOMPOSITION = env->getStaticIntField(cls, "CANONICAL_DECOMPOSITION");
        FULL_DECOMPOSITION = env->getStaticIntField(cls, "FULL_DECOMPOSITION");
        IDENTICAL = env->getStaticIntField(cls, "IDENTICAL");
        NO_DECOMPOSITION = env->getStaticIntField(cls, "NO_DECOMPOSITION");
        PRIMARY = env->getStaticIntField(cls, "PRIMARY");
        SECONDARY = env->getStaticIntField(cls, "SECONDARY");
        TERTIARY = env->getStaticIntField(cls, "TERTIARY");
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    ::java::lang::Object Collator::clone() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_clone_846352c3]));
    }

    jint Collator::compare(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
    {
      return env->callIntMethod(this$, mids$[mid_compare_466982ed], a0.this$, a1.this$);
    }

    jint Collator::compare(const ::java::lang::String & a0, const ::java::lang::String & a1) const
    {
      return env->callIntMethod(this$, mids$[mid_compare_4a26475d], a0.this$, a1.this$);
    }

    jboolean Collator::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    jboolean Collator::equals(const ::java::lang::String & a0, const ::java::lang::String & a1) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_4a26474e], a0.this$, a1.this$);
    }

    JArray< ::java::util::Locale > Collator::getAvailableLocales()
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< ::java::util::Locale >(env->callStaticObjectMethod(cls, mids$[mid_getAvailableLocales_59cb5b46]));
    }

    jint Collator::getDecomposition() const
    {
      return env->callIntMethod(this$, mids$[mid_getDecomposition_54c6a179]);
    }

    Collator Collator::getInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return Collator(env->callStaticObjectMethod(cls, mids$[mid_getInstance_44b7fa29]));
    }

    Collator Collator::getInstance(const ::java::util::Locale & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Collator(env->callStaticObjectMethod(cls, mids$[mid_getInstance_e12c63f2], a0.this$));
    }

    jint Collator::getStrength() const
    {
      return env->callIntMethod(this$, mids$[mid_getStrength_54c6a179]);
    }

    jint Collator::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    void Collator::setDecomposition(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setDecomposition_39c7bd3c], a0);
    }

    void Collator::setStrength(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setStrength_39c7bd3c], a0);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace text {
    static PyObject *t_Collator_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collator_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collator_clone(t_Collator *self);
    static PyObject *t_Collator_compare(t_Collator *self, PyObject *args);
    static PyObject *t_Collator_equals(t_Collator *self, PyObject *args);
    static PyObject *t_Collator_getAvailableLocales(PyTypeObject *type);
    static PyObject *t_Collator_getDecomposition(t_Collator *self);
    static PyObject *t_Collator_getInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collator_getStrength(t_Collator *self);
    static PyObject *t_Collator_hashCode(t_Collator *self, PyObject *args);
    static PyObject *t_Collator_setDecomposition(t_Collator *self, PyObject *arg);
    static PyObject *t_Collator_setStrength(t_Collator *self, PyObject *arg);
    static PyObject *t_Collator_get__availableLocales(t_Collator *self, void *data);
    static PyObject *t_Collator_get__decomposition(t_Collator *self, void *data);
    static int t_Collator_set__decomposition(t_Collator *self, PyObject *arg, void *data);
    static PyObject *t_Collator_get__instance(t_Collator *self, void *data);
    static PyObject *t_Collator_get__strength(t_Collator *self, void *data);
    static int t_Collator_set__strength(t_Collator *self, PyObject *arg, void *data);
    static PyGetSetDef t_Collator__fields_[] = {
      DECLARE_GET_FIELD(t_Collator, availableLocales),
      DECLARE_GETSET_FIELD(t_Collator, decomposition),
      DECLARE_GET_FIELD(t_Collator, instance),
      DECLARE_GETSET_FIELD(t_Collator, strength),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Collator__methods_[] = {
      DECLARE_METHOD(t_Collator, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collator, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collator, clone, METH_NOARGS),
      DECLARE_METHOD(t_Collator, compare, METH_VARARGS),
      DECLARE_METHOD(t_Collator, equals, METH_VARARGS),
      DECLARE_METHOD(t_Collator, getAvailableLocales, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Collator, getDecomposition, METH_NOARGS),
      DECLARE_METHOD(t_Collator, getInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collator, getStrength, METH_NOARGS),
      DECLARE_METHOD(t_Collator, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Collator, setDecomposition, METH_O),
      DECLARE_METHOD(t_Collator, setStrength, METH_O),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Collator, t_Collator, ::java::lang::Object, Collator, abstract_init, 0, 0, t_Collator__fields_, 0, 0);

    void t_Collator::install(PyObject *module)
    {
      installType(&PY_TYPE(Collator), module, "Collator", 0);
    }

    void t_Collator::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Collator).tp_dict, "class_", make_descriptor(Collator::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Collator).tp_dict, "wrapfn_", make_descriptor(t_Collator::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Collator).tp_dict, "boxfn_", make_descriptor(boxObject));
      env->getClass(Collator::initializeClass);
      PyDict_SetItemString(PY_TYPE(Collator).tp_dict, "CANONICAL_DECOMPOSITION", make_descriptor(Collator::CANONICAL_DECOMPOSITION));
      PyDict_SetItemString(PY_TYPE(Collator).tp_dict, "FULL_DECOMPOSITION", make_descriptor(Collator::FULL_DECOMPOSITION));
      PyDict_SetItemString(PY_TYPE(Collator).tp_dict, "IDENTICAL", make_descriptor(Collator::IDENTICAL));
      PyDict_SetItemString(PY_TYPE(Collator).tp_dict, "NO_DECOMPOSITION", make_descriptor(Collator::NO_DECOMPOSITION));
      PyDict_SetItemString(PY_TYPE(Collator).tp_dict, "PRIMARY", make_descriptor(Collator::PRIMARY));
      PyDict_SetItemString(PY_TYPE(Collator).tp_dict, "SECONDARY", make_descriptor(Collator::SECONDARY));
      PyDict_SetItemString(PY_TYPE(Collator).tp_dict, "TERTIARY", make_descriptor(Collator::TERTIARY));
    }

    static PyObject *t_Collator_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Collator::initializeClass, 1)))
        return NULL;
      return t_Collator::wrap_Object(Collator(((t_Collator *) arg)->object.this$));
    }
    static PyObject *t_Collator_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Collator::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Collator_clone(t_Collator *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.clone());
      return ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_Collator_compare(t_Collator *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::Object a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "oo", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "compare", args);
      return NULL;
    }

    static PyObject *t_Collator_equals(t_Collator *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(result = self->object.equals(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
      }

      return callSuper(&PY_TYPE(Collator), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Collator_getAvailableLocales(PyTypeObject *type)
    {
      JArray< ::java::util::Locale > result((jobject) NULL);
      OBJ_CALL(result = ::java::text::Collator::getAvailableLocales());
      return JArray<jobject>(result.this$).wrap(::java::util::t_Locale::wrap_jobject);
    }

    static PyObject *t_Collator_getDecomposition(t_Collator *self)
    {
      jint result;
      OBJ_CALL(result = self->object.getDecomposition());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_Collator_getInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          Collator result((jobject) NULL);
          OBJ_CALL(result = ::java::text::Collator::getInstance());
          return t_Collator::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          Collator result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = ::java::text::Collator::getInstance(a0));
            return t_Collator::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getInstance", args);
      return NULL;
    }

    static PyObject *t_Collator_getStrength(t_Collator *self)
    {
      jint result;
      OBJ_CALL(result = self->object.getStrength());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_Collator_hashCode(t_Collator *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Collator), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Collator_setDecomposition(t_Collator *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.setDecomposition(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setDecomposition", arg);
      return NULL;
    }

    static PyObject *t_Collator_setStrength(t_Collator *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.setStrength(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setStrength", arg);
      return NULL;
    }

    static PyObject *t_Collator_get__availableLocales(t_Collator *self, void *data)
    {
      JArray< ::java::util::Locale > value((jobject) NULL);
      OBJ_CALL(value = self->object.getAvailableLocales());
      return JArray<jobject>(value.this$).wrap(::java::util::t_Locale::wrap_jobject);
    }

    static PyObject *t_Collator_get__decomposition(t_Collator *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getDecomposition());
      return PyInt_FromLong((long) value);
    }
    static int t_Collator_set__decomposition(t_Collator *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setDecomposition(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "decomposition", arg);
      return -1;
    }

    static PyObject *t_Collator_get__instance(t_Collator *self, void *data)
    {
      Collator value((jobject) NULL);
      OBJ_CALL(value = self->object.getInstance());
      return t_Collator::wrap_Object(value);
    }

    static PyObject *t_Collator_get__strength(t_Collator *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getStrength());
      return PyInt_FromLong((long) value);
    }
    static int t_Collator_set__strength(t_Collator *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setStrength(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "strength", arg);
      return -1;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/join/JoinUtil.h"
#include "org/apache/lucene/search/Query.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/join/ScoreMode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {

          ::java::lang::Class *JoinUtil::class$ = NULL;
          jmethodID *JoinUtil::mids$ = NULL;
          bool JoinUtil::live$ = false;

          jclass JoinUtil::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/join/JoinUtil");

              mids$ = new jmethodID[max_mid];
              mids$[mid_createJoinQuery_ef4ce860] = env->getStaticMethodID(cls, "createJoinQuery", "(Ljava/lang/String;ZLjava/lang/String;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/join/ScoreMode;)Lorg/apache/lucene/search/Query;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::search::Query JoinUtil::createJoinQuery(const ::java::lang::String & a0, jboolean a1, const ::java::lang::String & a2, const ::org::apache::lucene::search::Query & a3, const ::org::apache::lucene::search::IndexSearcher & a4, const ::org::apache::lucene::search::join::ScoreMode & a5)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_createJoinQuery_ef4ce860], a0.this$, a1, a2.this$, a3.this$, a4.this$, a5.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {
          static PyObject *t_JoinUtil_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JoinUtil_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JoinUtil_createJoinQuery(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_JoinUtil__methods_[] = {
            DECLARE_METHOD(t_JoinUtil, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JoinUtil, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JoinUtil, createJoinQuery, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JoinUtil, t_JoinUtil, ::java::lang::Object, JoinUtil, abstract_init, 0, 0, 0, 0, 0);

          void t_JoinUtil::install(PyObject *module)
          {
            installType(&PY_TYPE(JoinUtil), module, "JoinUtil", 0);
          }

          void t_JoinUtil::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JoinUtil).tp_dict, "class_", make_descriptor(JoinUtil::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JoinUtil).tp_dict, "wrapfn_", make_descriptor(t_JoinUtil::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JoinUtil).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JoinUtil_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JoinUtil::initializeClass, 1)))
              return NULL;
            return t_JoinUtil::wrap_Object(JoinUtil(((t_JoinUtil *) arg)->object.this$));
          }
          static PyObject *t_JoinUtil_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JoinUtil::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_JoinUtil_createJoinQuery(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            jboolean a1;
            ::java::lang::String a2((jobject) NULL);
            ::org::apache::lucene::search::Query a3((jobject) NULL);
            ::org::apache::lucene::search::IndexSearcher a4((jobject) NULL);
            ::org::apache::lucene::search::join::ScoreMode a5((jobject) NULL);
            PyTypeObject **p5;
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "sZskkK", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::join::ScoreMode::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &p5, ::org::apache::lucene::search::join::t_ScoreMode::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::join::JoinUtil::createJoinQuery(a0, a1, a2, a3, a4, a5));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "createJoinQuery", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$CreationPlaceholder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Accountable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$CreationPlaceholder::class$ = NULL;
        jmethodID *FieldCache$CreationPlaceholder::mids$ = NULL;
        bool FieldCache$CreationPlaceholder::live$ = false;

        jclass FieldCache$CreationPlaceholder::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$CreationPlaceholder");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldCache$CreationPlaceholder::FieldCache$CreationPlaceholder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jlong FieldCache$CreationPlaceholder::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$CreationPlaceholder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$CreationPlaceholder_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldCache$CreationPlaceholder_init_(t_FieldCache$CreationPlaceholder *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldCache$CreationPlaceholder_ramBytesUsed(t_FieldCache$CreationPlaceholder *self);

        static PyMethodDef t_FieldCache$CreationPlaceholder__methods_[] = {
          DECLARE_METHOD(t_FieldCache$CreationPlaceholder, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$CreationPlaceholder, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$CreationPlaceholder, ramBytesUsed, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$CreationPlaceholder, t_FieldCache$CreationPlaceholder, ::java::lang::Object, FieldCache$CreationPlaceholder, t_FieldCache$CreationPlaceholder_init_, 0, 0, 0, 0, 0);

        void t_FieldCache$CreationPlaceholder::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$CreationPlaceholder), module, "FieldCache$CreationPlaceholder", 0);
        }

        void t_FieldCache$CreationPlaceholder::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$CreationPlaceholder).tp_dict, "class_", make_descriptor(FieldCache$CreationPlaceholder::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$CreationPlaceholder).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$CreationPlaceholder::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$CreationPlaceholder).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCache$CreationPlaceholder_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$CreationPlaceholder::initializeClass, 1)))
            return NULL;
          return t_FieldCache$CreationPlaceholder::wrap_Object(FieldCache$CreationPlaceholder(((t_FieldCache$CreationPlaceholder *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$CreationPlaceholder_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$CreationPlaceholder::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldCache$CreationPlaceholder_init_(t_FieldCache$CreationPlaceholder *self, PyObject *args, PyObject *kwds)
        {
          FieldCache$CreationPlaceholder object((jobject) NULL);

          INT_CALL(object = FieldCache$CreationPlaceholder());
          self->object = object;

          return 0;
        }

        static PyObject *t_FieldCache$CreationPlaceholder_ramBytesUsed(t_FieldCache$CreationPlaceholder *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/TermFilter.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {

        ::java::lang::Class *TermFilter::class$ = NULL;
        jmethodID *TermFilter::mids$ = NULL;
        bool TermFilter::live$ = false;

        jclass TermFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/queries/TermFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7eca6a81] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getDocIdSet_ccce0897] = env->getMethodID(cls, "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_getTerm_0f71f314] = env->getMethodID(cls, "getTerm", "()Lorg/apache/lucene/index/Term;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TermFilter::TermFilter(const ::org::apache::lucene::index::Term & a0) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_7eca6a81, a0.this$)) {}

        jboolean TermFilter::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::search::DocIdSet TermFilter::getDocIdSet(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
        {
          return ::org::apache::lucene::search::DocIdSet(env->callObjectMethod(this$, mids$[mid_getDocIdSet_ccce0897], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::Term TermFilter::getTerm() const
        {
          return ::org::apache::lucene::index::Term(env->callObjectMethod(this$, mids$[mid_getTerm_0f71f314]));
        }

        jint TermFilter::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String TermFilter::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        static PyObject *t_TermFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TermFilter_init_(t_TermFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TermFilter_equals(t_TermFilter *self, PyObject *args);
        static PyObject *t_TermFilter_getDocIdSet(t_TermFilter *self, PyObject *args);
        static PyObject *t_TermFilter_getTerm(t_TermFilter *self);
        static PyObject *t_TermFilter_hashCode(t_TermFilter *self, PyObject *args);
        static PyObject *t_TermFilter_toString(t_TermFilter *self, PyObject *args);
        static PyObject *t_TermFilter_get__term(t_TermFilter *self, void *data);
        static PyGetSetDef t_TermFilter__fields_[] = {
          DECLARE_GET_FIELD(t_TermFilter, term),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TermFilter__methods_[] = {
          DECLARE_METHOD(t_TermFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermFilter, equals, METH_VARARGS),
          DECLARE_METHOD(t_TermFilter, getDocIdSet, METH_VARARGS),
          DECLARE_METHOD(t_TermFilter, getTerm, METH_NOARGS),
          DECLARE_METHOD(t_TermFilter, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_TermFilter, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermFilter, t_TermFilter, ::org::apache::lucene::search::Filter, TermFilter, t_TermFilter_init_, 0, 0, t_TermFilter__fields_, 0, 0);

        void t_TermFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(TermFilter), module, "TermFilter", 0);
        }

        void t_TermFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermFilter).tp_dict, "class_", make_descriptor(TermFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermFilter).tp_dict, "wrapfn_", make_descriptor(t_TermFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermFilter::initializeClass, 1)))
            return NULL;
          return t_TermFilter::wrap_Object(TermFilter(((t_TermFilter *) arg)->object.this$));
        }
        static PyObject *t_TermFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TermFilter_init_(t_TermFilter *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          TermFilter object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            INT_CALL(object = TermFilter(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TermFilter_equals(t_TermFilter *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(TermFilter), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_TermFilter_getDocIdSet(t_TermFilter *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocIdSet(a0, a1));
            return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(TermFilter), (PyObject *) self, "getDocIdSet", args, 2);
        }

        static PyObject *t_TermFilter_getTerm(t_TermFilter *self)
        {
          ::org::apache::lucene::index::Term result((jobject) NULL);
          OBJ_CALL(result = self->object.getTerm());
          return ::org::apache::lucene::index::t_Term::wrap_Object(result);
        }

        static PyObject *t_TermFilter_hashCode(t_TermFilter *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(TermFilter), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_TermFilter_toString(t_TermFilter *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(TermFilter), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_TermFilter_get__term(t_TermFilter *self, void *data)
        {
          ::org::apache::lucene::index::Term value((jobject) NULL);
          OBJ_CALL(value = self->object.getTerm());
          return ::org::apache::lucene::index::t_Term::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$IntParser.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$IntParser::class$ = NULL;
        jmethodID *FieldCache$IntParser::mids$ = NULL;
        bool FieldCache$IntParser::live$ = false;

        jclass FieldCache$IntParser::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$IntParser");

            mids$ = new jmethodID[max_mid];
            mids$[mid_parseInt_7bc03ddb] = env->getMethodID(cls, "parseInt", "(Lorg/apache/lucene/util/BytesRef;)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint FieldCache$IntParser::parseInt(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_parseInt_7bc03ddb], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$IntParser_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$IntParser_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$IntParser_parseInt(t_FieldCache$IntParser *self, PyObject *arg);

        static PyMethodDef t_FieldCache$IntParser__methods_[] = {
          DECLARE_METHOD(t_FieldCache$IntParser, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$IntParser, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$IntParser, parseInt, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$IntParser, t_FieldCache$IntParser, ::org::apache::lucene::search::FieldCache$Parser, FieldCache$IntParser, abstract_init, 0, 0, 0, 0, 0);

        void t_FieldCache$IntParser::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$IntParser), module, "FieldCache$IntParser", 0);
        }

        void t_FieldCache$IntParser::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$IntParser).tp_dict, "class_", make_descriptor(FieldCache$IntParser::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$IntParser).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$IntParser::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$IntParser).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCache$IntParser_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$IntParser::initializeClass, 1)))
            return NULL;
          return t_FieldCache$IntParser::wrap_Object(FieldCache$IntParser(((t_FieldCache$IntParser *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$IntParser_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$IntParser::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldCache$IntParser_parseInt(t_FieldCache$IntParser *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.parseInt(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "parseInt", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/InputStreamReader.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "JArray.h"

namespace java {
  namespace io {

    ::java::lang::Class *InputStreamReader::class$ = NULL;
    jmethodID *InputStreamReader::mids$ = NULL;
    bool InputStreamReader::live$ = false;

    jclass InputStreamReader::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/io/InputStreamReader");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
        mids$[mid_init$_32277d42] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;Ljava/lang/String;)V");
        mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
        mids$[mid_getEncoding_14c7b5c5] = env->getMethodID(cls, "getEncoding", "()Ljava/lang/String;");
        mids$[mid_read_54c6a179] = env->getMethodID(cls, "read", "()I");
        mids$[mid_read_6f0bb349] = env->getMethodID(cls, "read", "([CII)I");
        mids$[mid_ready_54c6a16a] = env->getMethodID(cls, "ready", "()Z");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    InputStreamReader::InputStreamReader(const ::java::io::InputStream & a0) : ::java::io::Reader(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

    InputStreamReader::InputStreamReader(const ::java::io::InputStream & a0, const ::java::lang::String & a1) : ::java::io::Reader(env->newObject(initializeClass, &mids$, mid_init$_32277d42, a0.this$, a1.this$)) {}

    void InputStreamReader::close() const
    {
      env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
    }

    ::java::lang::String InputStreamReader::getEncoding() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getEncoding_14c7b5c5]));
    }

    jint InputStreamReader::read() const
    {
      return env->callIntMethod(this$, mids$[mid_read_54c6a179]);
    }

    jint InputStreamReader::read(const JArray< jchar > & a0, jint a1, jint a2) const
    {
      return env->callIntMethod(this$, mids$[mid_read_6f0bb349], a0.this$, a1, a2);
    }

    jboolean InputStreamReader::ready() const
    {
      return env->callBooleanMethod(this$, mids$[mid_ready_54c6a16a]);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace io {
    static PyObject *t_InputStreamReader_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_InputStreamReader_instance_(PyTypeObject *type, PyObject *arg);
    static int t_InputStreamReader_init_(t_InputStreamReader *self, PyObject *args, PyObject *kwds);
    static PyObject *t_InputStreamReader_close(t_InputStreamReader *self, PyObject *args);
    static PyObject *t_InputStreamReader_getEncoding(t_InputStreamReader *self);
    static PyObject *t_InputStreamReader_read(t_InputStreamReader *self, PyObject *args);
    static PyObject *t_InputStreamReader_ready(t_InputStreamReader *self, PyObject *args);
    static PyObject *t_InputStreamReader_get__encoding(t_InputStreamReader *self, void *data);
    static PyGetSetDef t_InputStreamReader__fields_[] = {
      DECLARE_GET_FIELD(t_InputStreamReader, encoding),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_InputStreamReader__methods_[] = {
      DECLARE_METHOD(t_InputStreamReader, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_InputStreamReader, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_InputStreamReader, close, METH_VARARGS),
      DECLARE_METHOD(t_InputStreamReader, getEncoding, METH_NOARGS),
      DECLARE_METHOD(t_InputStreamReader, read, METH_VARARGS),
      DECLARE_METHOD(t_InputStreamReader, ready, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(InputStreamReader, t_InputStreamReader, ::java::io::Reader, InputStreamReader, t_InputStreamReader_init_, 0, 0, t_InputStreamReader__fields_, 0, 0);

    void t_InputStreamReader::install(PyObject *module)
    {
      installType(&PY_TYPE(InputStreamReader), module, "InputStreamReader", 0);
    }

    void t_InputStreamReader::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(InputStreamReader).tp_dict, "class_", make_descriptor(InputStreamReader::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(InputStreamReader).tp_dict, "wrapfn_", make_descriptor(t_InputStreamReader::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(InputStreamReader).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_InputStreamReader_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, InputStreamReader::initializeClass, 1)))
        return NULL;
      return t_InputStreamReader::wrap_Object(InputStreamReader(((t_InputStreamReader *) arg)->object.this$));
    }
    static PyObject *t_InputStreamReader_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, InputStreamReader::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_InputStreamReader_init_(t_InputStreamReader *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::io::InputStream a0((jobject) NULL);
          InputStreamReader object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
          {
            INT_CALL(object = InputStreamReader(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          ::java::io::InputStream a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          InputStreamReader object((jobject) NULL);

          if (!parseArgs(args, "ks", ::java::io::InputStream::initializeClass, &a0, &a1))
          {
            INT_CALL(object = InputStreamReader(a0, a1));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_InputStreamReader_close(t_InputStreamReader *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.close());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(InputStreamReader), (PyObject *) self, "close", args, 2);
    }

    static PyObject *t_InputStreamReader_getEncoding(t_InputStreamReader *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.getEncoding());
      return j2p(result);
    }

    static PyObject *t_InputStreamReader_read(t_InputStreamReader *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          jint result;
          OBJ_CALL(result = self->object.read());
          return PyInt_FromLong((long) result);
        }
        break;
       case 3:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.read(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
      }

      return callSuper(&PY_TYPE(InputStreamReader), (PyObject *) self, "read", args, 2);
    }

    static PyObject *t_InputStreamReader_ready(t_InputStreamReader *self, PyObject *args)
    {
      jboolean result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.ready());
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(InputStreamReader), (PyObject *) self, "ready", args, 2);
    }

    static PyObject *t_InputStreamReader_get__encoding(t_InputStreamReader *self, void *data)
    {
      ::java::lang::String value((jobject) NULL);
      OBJ_CALL(value = self->object.getEncoding());
      return j2p(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/util/Locale.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax$Type.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace parser {

              ::java::lang::Class *EscapeQuerySyntax::class$ = NULL;
              jmethodID *EscapeQuerySyntax::mids$ = NULL;
              bool EscapeQuerySyntax::live$ = false;

              jclass EscapeQuerySyntax::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_escape_dd58ce7f] = env->getMethodID(cls, "escape", "(Ljava/lang/CharSequence;Ljava/util/Locale;Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax$Type;)Ljava/lang/CharSequence;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::java::lang::CharSequence EscapeQuerySyntax::escape(const ::java::lang::CharSequence & a0, const ::java::util::Locale & a1, const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax$Type & a2) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_escape_dd58ce7f], a0.this$, a1.this$, a2.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace parser {
              static PyObject *t_EscapeQuerySyntax_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_EscapeQuerySyntax_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_EscapeQuerySyntax_escape(t_EscapeQuerySyntax *self, PyObject *args);

              static PyMethodDef t_EscapeQuerySyntax__methods_[] = {
                DECLARE_METHOD(t_EscapeQuerySyntax, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_EscapeQuerySyntax, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_EscapeQuerySyntax, escape, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(EscapeQuerySyntax, t_EscapeQuerySyntax, ::java::lang::Object, EscapeQuerySyntax, abstract_init, 0, 0, 0, 0, 0);

              void t_EscapeQuerySyntax::install(PyObject *module)
              {
                installType(&PY_TYPE(EscapeQuerySyntax), module, "EscapeQuerySyntax", 0);
                PyDict_SetItemString(PY_TYPE(EscapeQuerySyntax).tp_dict, "Type", make_descriptor(&PY_TYPE(EscapeQuerySyntax$Type)));
              }

              void t_EscapeQuerySyntax::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(EscapeQuerySyntax).tp_dict, "class_", make_descriptor(EscapeQuerySyntax::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(EscapeQuerySyntax).tp_dict, "wrapfn_", make_descriptor(t_EscapeQuerySyntax::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(EscapeQuerySyntax).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_EscapeQuerySyntax_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, EscapeQuerySyntax::initializeClass, 1)))
                  return NULL;
                return t_EscapeQuerySyntax::wrap_Object(EscapeQuerySyntax(((t_EscapeQuerySyntax *) arg)->object.this$));
              }
              static PyObject *t_EscapeQuerySyntax_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, EscapeQuerySyntax::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_EscapeQuerySyntax_escape(t_EscapeQuerySyntax *self, PyObject *args)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::util::Locale a1((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax$Type a2((jobject) NULL);
                PyTypeObject **p2;
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "OkK", &::java::lang::PY_TYPE(CharSequence), ::java::util::Locale::initializeClass, ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax$Type::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::queryparser::flexible::core::parser::t_EscapeQuerySyntax$Type::parameters_))
                {
                  OBJ_CALL(result = self->object.escape(a0, a1, a2));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "escape", args);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/ParallelAtomicReader.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "org/apache/lucene/index/Fields.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/StoredFieldVisitor.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/AtomicReader$CoreClosedListener.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *ParallelAtomicReader::class$ = NULL;
        jmethodID *ParallelAtomicReader::mids$ = NULL;
        bool ParallelAtomicReader::live$ = false;

        jclass ParallelAtomicReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/ParallelAtomicReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_ec148ef1] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/index/AtomicReader;)V");
            mids$[mid_init$_dac8e58a] = env->getMethodID(cls, "<init>", "(Z[Lorg/apache/lucene/index/AtomicReader;)V");
            mids$[mid_init$_d26c44dd] = env->getMethodID(cls, "<init>", "(Z[Lorg/apache/lucene/index/AtomicReader;[Lorg/apache/lucene/index/AtomicReader;)V");
            mids$[mid_addCoreClosedListener_cbc2818f] = env->getMethodID(cls, "addCoreClosedListener", "(Lorg/apache/lucene/index/AtomicReader$CoreClosedListener;)V");
            mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
            mids$[mid_document_a2ea3ebe] = env->getMethodID(cls, "document", "(ILorg/apache/lucene/index/StoredFieldVisitor;)V");
            mids$[mid_fields_77db581d] = env->getMethodID(cls, "fields", "()Lorg/apache/lucene/index/Fields;");
            mids$[mid_getBinaryDocValues_ecab96be] = env->getMethodID(cls, "getBinaryDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/BinaryDocValues;");
            mids$[mid_getDocsWithField_e1c6a7db] = env->getMethodID(cls, "getDocsWithField", "(Ljava/lang/String;)Lorg/apache/lucene/util/Bits;");
            mids$[mid_getFieldInfos_9ba20825] = env->getMethodID(cls, "getFieldInfos", "()Lorg/apache/lucene/index/FieldInfos;");
            mids$[mid_getLiveDocs_03c2457d] = env->getMethodID(cls, "getLiveDocs", "()Lorg/apache/lucene/util/Bits;");
            mids$[mid_getNormValues_d2b19f49] = env->getMethodID(cls, "getNormValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getNumericDocValues_d2b19f49] = env->getMethodID(cls, "getNumericDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getSortedDocValues_7b8b1a0a] = env->getMethodID(cls, "getSortedDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedDocValues;");
            mids$[mid_getSortedNumericDocValues_37cd1812] = env->getMethodID(cls, "getSortedNumericDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedNumericDocValues;");
            mids$[mid_getSortedSetDocValues_43e0e807] = env->getMethodID(cls, "getSortedSetDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedSetDocValues;");
            mids$[mid_getTermVectors_ef1c9c73] = env->getMethodID(cls, "getTermVectors", "(I)Lorg/apache/lucene/index/Fields;");
            mids$[mid_maxDoc_54c6a179] = env->getMethodID(cls, "maxDoc", "()I");
            mids$[mid_numDocs_54c6a179] = env->getMethodID(cls, "numDocs", "()I");
            mids$[mid_removeCoreClosedListener_cbc2818f] = env->getMethodID(cls, "removeCoreClosedListener", "(Lorg/apache/lucene/index/AtomicReader$CoreClosedListener;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_doClose_54c6a166] = env->getMethodID(cls, "doClose", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ParallelAtomicReader::ParallelAtomicReader(const JArray< ::org::apache::lucene::index::AtomicReader > & a0) : ::org::apache::lucene::index::AtomicReader(env->newObject(initializeClass, &mids$, mid_init$_ec148ef1, a0.this$)) {}

        ParallelAtomicReader::ParallelAtomicReader(jboolean a0, const JArray< ::org::apache::lucene::index::AtomicReader > & a1) : ::org::apache::lucene::index::AtomicReader(env->newObject(initializeClass, &mids$, mid_init$_dac8e58a, a0, a1.this$)) {}

        ParallelAtomicReader::ParallelAtomicReader(jboolean a0, const JArray< ::org::apache::lucene::index::AtomicReader > & a1, const JArray< ::org::apache::lucene::index::AtomicReader > & a2) : ::org::apache::lucene::index::AtomicReader(env->newObject(initializeClass, &mids$, mid_init$_d26c44dd, a0, a1.this$, a2.this$)) {}

        void ParallelAtomicReader::addCoreClosedListener(const ::org::apache::lucene::index::AtomicReader$CoreClosedListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addCoreClosedListener_cbc2818f], a0.this$);
        }

        void ParallelAtomicReader::checkIntegrity() const
        {
          env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
        }

        void ParallelAtomicReader::document(jint a0, const ::org::apache::lucene::index::StoredFieldVisitor & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_document_a2ea3ebe], a0, a1.this$);
        }

        ::org::apache::lucene::index::Fields ParallelAtomicReader::fields() const
        {
          return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_fields_77db581d]));
        }

        ::org::apache::lucene::index::BinaryDocValues ParallelAtomicReader::getBinaryDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::BinaryDocValues(env->callObjectMethod(this$, mids$[mid_getBinaryDocValues_ecab96be], a0.this$));
        }

        ::org::apache::lucene::util::Bits ParallelAtomicReader::getDocsWithField(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getDocsWithField_e1c6a7db], a0.this$));
        }

        ::org::apache::lucene::index::FieldInfos ParallelAtomicReader::getFieldInfos() const
        {
          return ::org::apache::lucene::index::FieldInfos(env->callObjectMethod(this$, mids$[mid_getFieldInfos_9ba20825]));
        }

        ::org::apache::lucene::util::Bits ParallelAtomicReader::getLiveDocs() const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getLiveDocs_03c2457d]));
        }

        ::org::apache::lucene::index::NumericDocValues ParallelAtomicReader::getNormValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNormValues_d2b19f49], a0.this$));
        }

        ::org::apache::lucene::index::NumericDocValues ParallelAtomicReader::getNumericDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNumericDocValues_d2b19f49], a0.this$));
        }

        ::org::apache::lucene::index::SortedDocValues ParallelAtomicReader::getSortedDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedDocValues(env->callObjectMethod(this$, mids$[mid_getSortedDocValues_7b8b1a0a], a0.this$));
        }

        ::org::apache::lucene::index::SortedNumericDocValues ParallelAtomicReader::getSortedNumericDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedNumericDocValues(env->callObjectMethod(this$, mids$[mid_getSortedNumericDocValues_37cd1812], a0.this$));
        }

        ::org::apache::lucene::index::SortedSetDocValues ParallelAtomicReader::getSortedSetDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedSetDocValues(env->callObjectMethod(this$, mids$[mid_getSortedSetDocValues_43e0e807], a0.this$));
        }

        ::org::apache::lucene::index::Fields ParallelAtomicReader::getTermVectors(jint a0) const
        {
          return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_getTermVectors_ef1c9c73], a0));
        }

        jint ParallelAtomicReader::maxDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_maxDoc_54c6a179]);
        }

        jint ParallelAtomicReader::numDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_numDocs_54c6a179]);
        }

        void ParallelAtomicReader::removeCoreClosedListener(const ::org::apache::lucene::index::AtomicReader$CoreClosedListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_removeCoreClosedListener_cbc2818f], a0.this$);
        }

        ::java::lang::String ParallelAtomicReader::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_ParallelAtomicReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ParallelAtomicReader_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ParallelAtomicReader_init_(t_ParallelAtomicReader *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ParallelAtomicReader_addCoreClosedListener(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_checkIntegrity(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_document(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_fields(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_getBinaryDocValues(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_getDocsWithField(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_getFieldInfos(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_getLiveDocs(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_getNormValues(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_getNumericDocValues(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_getSortedDocValues(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_getSortedNumericDocValues(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_getSortedSetDocValues(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_getTermVectors(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_maxDoc(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_numDocs(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_removeCoreClosedListener(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_toString(t_ParallelAtomicReader *self, PyObject *args);
        static PyObject *t_ParallelAtomicReader_get__fieldInfos(t_ParallelAtomicReader *self, void *data);
        static PyObject *t_ParallelAtomicReader_get__liveDocs(t_ParallelAtomicReader *self, void *data);
        static PyGetSetDef t_ParallelAtomicReader__fields_[] = {
          DECLARE_GET_FIELD(t_ParallelAtomicReader, fieldInfos),
          DECLARE_GET_FIELD(t_ParallelAtomicReader, liveDocs),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ParallelAtomicReader__methods_[] = {
          DECLARE_METHOD(t_ParallelAtomicReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ParallelAtomicReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ParallelAtomicReader, addCoreClosedListener, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, checkIntegrity, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, document, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, fields, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, getBinaryDocValues, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, getDocsWithField, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, getFieldInfos, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, getLiveDocs, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, getNormValues, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, getNumericDocValues, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, getSortedDocValues, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, getSortedNumericDocValues, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, getSortedSetDocValues, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, getTermVectors, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, maxDoc, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, numDocs, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, removeCoreClosedListener, METH_VARARGS),
          DECLARE_METHOD(t_ParallelAtomicReader, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ParallelAtomicReader, t_ParallelAtomicReader, ::org::apache::lucene::index::AtomicReader, ParallelAtomicReader, t_ParallelAtomicReader_init_, 0, 0, t_ParallelAtomicReader__fields_, 0, 0);

        void t_ParallelAtomicReader::install(PyObject *module)
        {
          installType(&PY_TYPE(ParallelAtomicReader), module, "ParallelAtomicReader", 0);
        }

        void t_ParallelAtomicReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ParallelAtomicReader).tp_dict, "class_", make_descriptor(ParallelAtomicReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ParallelAtomicReader).tp_dict, "wrapfn_", make_descriptor(t_ParallelAtomicReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ParallelAtomicReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ParallelAtomicReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ParallelAtomicReader::initializeClass, 1)))
            return NULL;
          return t_ParallelAtomicReader::wrap_Object(ParallelAtomicReader(((t_ParallelAtomicReader *) arg)->object.this$));
        }
        static PyObject *t_ParallelAtomicReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ParallelAtomicReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ParallelAtomicReader_init_(t_ParallelAtomicReader *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::org::apache::lucene::index::AtomicReader > a0((jobject) NULL);
              ParallelAtomicReader object((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0))
              {
                INT_CALL(object = ParallelAtomicReader(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              jboolean a0;
              JArray< ::org::apache::lucene::index::AtomicReader > a1((jobject) NULL);
              ParallelAtomicReader object((jobject) NULL);

              if (!parseArgs(args, "Z[k", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1))
              {
                INT_CALL(object = ParallelAtomicReader(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              jboolean a0;
              JArray< ::org::apache::lucene::index::AtomicReader > a1((jobject) NULL);
              JArray< ::org::apache::lucene::index::AtomicReader > a2((jobject) NULL);
              ParallelAtomicReader object((jobject) NULL);

              if (!parseArgs(args, "Z[k[k", ::org::apache::lucene::index::AtomicReader::initializeClass, ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = ParallelAtomicReader(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ParallelAtomicReader_addCoreClosedListener(t_ParallelAtomicReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader$CoreClosedListener a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReader$CoreClosedListener::initializeClass, &a0))
          {
            OBJ_CALL(self->object.addCoreClosedListener(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "addCoreClosedListener", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_checkIntegrity(t_ParallelAtomicReader *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.checkIntegrity());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "checkIntegrity", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_document(t_ParallelAtomicReader *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::index::StoredFieldVisitor a1((jobject) NULL);

          if (!parseArgs(args, "Ik", ::org::apache::lucene::index::StoredFieldVisitor::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.document(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "document", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_fields(t_ParallelAtomicReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::Fields result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.fields());
            return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "fields", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_getBinaryDocValues(t_ParallelAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::BinaryDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getBinaryDocValues(a0));
            return ::org::apache::lucene::index::t_BinaryDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "getBinaryDocValues", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_getDocsWithField(t_ParallelAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getDocsWithField(a0));
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "getDocsWithField", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_getFieldInfos(t_ParallelAtomicReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfos result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getFieldInfos());
            return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "getFieldInfos", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_getLiveDocs(t_ParallelAtomicReader *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getLiveDocs());
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "getLiveDocs", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_getNormValues(t_ParallelAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getNormValues(a0));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "getNormValues", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_getNumericDocValues(t_ParallelAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getNumericDocValues(a0));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "getNumericDocValues", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_getSortedDocValues(t_ParallelAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedDocValues(a0));
            return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "getSortedDocValues", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_getSortedNumericDocValues(t_ParallelAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedNumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedNumericDocValues(a0));
            return ::org::apache::lucene::index::t_SortedNumericDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "getSortedNumericDocValues", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_getSortedSetDocValues(t_ParallelAtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedSetDocValues(a0));
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "getSortedSetDocValues", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_getTermVectors(t_ParallelAtomicReader *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::index::Fields result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.getTermVectors(a0));
            return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "getTermVectors", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_maxDoc(t_ParallelAtomicReader *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.maxDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "maxDoc", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_numDocs(t_ParallelAtomicReader *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.numDocs());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "numDocs", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_removeCoreClosedListener(t_ParallelAtomicReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader$CoreClosedListener a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReader$CoreClosedListener::initializeClass, &a0))
          {
            OBJ_CALL(self->object.removeCoreClosedListener(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "removeCoreClosedListener", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_toString(t_ParallelAtomicReader *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(ParallelAtomicReader), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_ParallelAtomicReader_get__fieldInfos(t_ParallelAtomicReader *self, void *data)
        {
          ::org::apache::lucene::index::FieldInfos value((jobject) NULL);
          OBJ_CALL(value = self->object.getFieldInfos());
          return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(value);
        }

        static PyObject *t_ParallelAtomicReader_get__liveDocs(t_ParallelAtomicReader *self, void *data)
        {
          ::org::apache::lucene::util::Bits value((jobject) NULL);
          OBJ_CALL(value = self->object.getLiveDocs());
          return ::org::apache::lucene::util::t_Bits::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cn/ChineseFilterFactory.h"
#include "org/apache/lucene/analysis/cn/ChineseFilter.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cn {

          ::java::lang::Class *ChineseFilterFactory::class$ = NULL;
          jmethodID *ChineseFilterFactory::mids$ = NULL;
          bool ChineseFilterFactory::live$ = false;

          jclass ChineseFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cn/ChineseFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_08dbb372] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/cn/ChineseFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ChineseFilterFactory::ChineseFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::cn::ChineseFilter ChineseFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::cn::ChineseFilter(env->callObjectMethod(this$, mids$[mid_create_08dbb372], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cn {
          static PyObject *t_ChineseFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ChineseFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ChineseFilterFactory_init_(t_ChineseFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ChineseFilterFactory_create(t_ChineseFilterFactory *self, PyObject *args);

          static PyMethodDef t_ChineseFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ChineseFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ChineseFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ChineseFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ChineseFilterFactory, t_ChineseFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, ChineseFilterFactory, t_ChineseFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_ChineseFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ChineseFilterFactory), module, "ChineseFilterFactory", 0);
          }

          void t_ChineseFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ChineseFilterFactory).tp_dict, "class_", make_descriptor(ChineseFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ChineseFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_ChineseFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ChineseFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ChineseFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ChineseFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ChineseFilterFactory::wrap_Object(ChineseFilterFactory(((t_ChineseFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ChineseFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ChineseFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ChineseFilterFactory_init_(t_ChineseFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ChineseFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ChineseFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ChineseFilterFactory_create(t_ChineseFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::cn::ChineseFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::cn::t_ChineseFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ChineseFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanFirstQuery.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanFirstQuery::class$ = NULL;
          jmethodID *SpanFirstQuery::mids$ = NULL;
          bool SpanFirstQuery::live$ = false;

          jclass SpanFirstQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanFirstQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_611c8717] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanQuery;I)V");
              mids$[mid_clone_cf87c9b3] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/search/spans/SpanFirstQuery;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_acceptPosition_5342f73f] = env->getMethodID(cls, "acceptPosition", "(Lorg/apache/lucene/search/spans/Spans;)Lorg/apache/lucene/search/spans/SpanPositionCheckQuery$AcceptStatus;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanFirstQuery::SpanFirstQuery(const ::org::apache::lucene::search::spans::SpanQuery & a0, jint a1) : ::org::apache::lucene::search::spans::SpanPositionRangeQuery(env->newObject(initializeClass, &mids$, mid_init$_611c8717, a0.this$, a1)) {}

          SpanFirstQuery SpanFirstQuery::clone() const
          {
            return SpanFirstQuery(env->callObjectMethod(this$, mids$[mid_clone_cf87c9b3]));
          }

          jboolean SpanFirstQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint SpanFirstQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String SpanFirstQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanFirstQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanFirstQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanFirstQuery_init_(t_SpanFirstQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanFirstQuery_clone(t_SpanFirstQuery *self, PyObject *args);
          static PyObject *t_SpanFirstQuery_equals(t_SpanFirstQuery *self, PyObject *args);
          static PyObject *t_SpanFirstQuery_hashCode(t_SpanFirstQuery *self, PyObject *args);
          static PyObject *t_SpanFirstQuery_toString(t_SpanFirstQuery *self, PyObject *args);

          static PyMethodDef t_SpanFirstQuery__methods_[] = {
            DECLARE_METHOD(t_SpanFirstQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanFirstQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanFirstQuery, clone, METH_VARARGS),
            DECLARE_METHOD(t_SpanFirstQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_SpanFirstQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SpanFirstQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanFirstQuery, t_SpanFirstQuery, ::org::apache::lucene::search::spans::SpanPositionRangeQuery, SpanFirstQuery, t_SpanFirstQuery_init_, 0, 0, 0, 0, 0);

          void t_SpanFirstQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanFirstQuery), module, "SpanFirstQuery", 0);
          }

          void t_SpanFirstQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanFirstQuery).tp_dict, "class_", make_descriptor(SpanFirstQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanFirstQuery).tp_dict, "wrapfn_", make_descriptor(t_SpanFirstQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanFirstQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanFirstQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanFirstQuery::initializeClass, 1)))
              return NULL;
            return t_SpanFirstQuery::wrap_Object(SpanFirstQuery(((t_SpanFirstQuery *) arg)->object.this$));
          }
          static PyObject *t_SpanFirstQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanFirstQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanFirstQuery_init_(t_SpanFirstQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spans::SpanQuery a0((jobject) NULL);
            jint a1;
            SpanFirstQuery object((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0, &a1))
            {
              INT_CALL(object = SpanFirstQuery(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanFirstQuery_clone(t_SpanFirstQuery *self, PyObject *args)
          {
            SpanFirstQuery result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_SpanFirstQuery::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanFirstQuery), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_SpanFirstQuery_equals(t_SpanFirstQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SpanFirstQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SpanFirstQuery_hashCode(t_SpanFirstQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SpanFirstQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SpanFirstQuery_toString(t_SpanFirstQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanFirstQuery), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/text/BreakIterator.h"
#include "java/lang/Cloneable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/util/Locale.h"
#include "JArray.h"

namespace java {
  namespace text {

    ::java::lang::Class *BreakIterator::class$ = NULL;
    jmethodID *BreakIterator::mids$ = NULL;
    bool BreakIterator::live$ = false;
    jint BreakIterator::DONE = (jint) 0;

    jclass BreakIterator::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/text/BreakIterator");

        mids$ = new jmethodID[max_mid];
        mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");
        mids$[mid_current_54c6a179] = env->getMethodID(cls, "current", "()I");
        mids$[mid_first_54c6a179] = env->getMethodID(cls, "first", "()I");
        mids$[mid_following_39c7bd23] = env->getMethodID(cls, "following", "(I)I");
        mids$[mid_getAvailableLocales_59cb5b46] = env->getStaticMethodID(cls, "getAvailableLocales", "()[Ljava/util/Locale;");
        mids$[mid_getCharacterInstance_91cbbddf] = env->getStaticMethodID(cls, "getCharacterInstance", "()Ljava/text/BreakIterator;");
        mids$[mid_getCharacterInstance_09bf44ce] = env->getStaticMethodID(cls, "getCharacterInstance", "(Ljava/util/Locale;)Ljava/text/BreakIterator;");
        mids$[mid_getLineInstance_91cbbddf] = env->getStaticMethodID(cls, "getLineInstance", "()Ljava/text/BreakIterator;");
        mids$[mid_getLineInstance_09bf44ce] = env->getStaticMethodID(cls, "getLineInstance", "(Ljava/util/Locale;)Ljava/text/BreakIterator;");
        mids$[mid_getSentenceInstance_91cbbddf] = env->getStaticMethodID(cls, "getSentenceInstance", "()Ljava/text/BreakIterator;");
        mids$[mid_getSentenceInstance_09bf44ce] = env->getStaticMethodID(cls, "getSentenceInstance", "(Ljava/util/Locale;)Ljava/text/BreakIterator;");
        mids$[mid_getWordInstance_91cbbddf] = env->getStaticMethodID(cls, "getWordInstance", "()Ljava/text/BreakIterator;");
        mids$[mid_getWordInstance_09bf44ce] = env->getStaticMethodID(cls, "getWordInstance", "(Ljava/util/Locale;)Ljava/text/BreakIterator;");
        mids$[mid_isBoundary_39c7bd30] = env->getMethodID(cls, "isBoundary", "(I)Z");
        mids$[mid_last_54c6a179] = env->getMethodID(cls, "last", "()I");
        mids$[mid_next_54c6a179] = env->getMethodID(cls, "next", "()I");
        mids$[mid_next_39c7bd23] = env->getMethodID(cls, "next", "(I)I");
        mids$[mid_preceding_39c7bd23] = env->getMethodID(cls, "preceding", "(I)I");
        mids$[mid_previous_54c6a179] = env->getMethodID(cls, "previous", "()I");
        mids$[mid_setText_5fdc3f48] = env->getMethodID(cls, "setText", "(Ljava/lang/String;)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        DONE = env->getStaticIntField(cls, "DONE");
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    ::java::lang::Object BreakIterator::clone() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_clone_846352c3]));
    }

    jint BreakIterator::current() const
    {
      return env->callIntMethod(this$, mids$[mid_current_54c6a179]);
    }

    jint BreakIterator::first() const
    {
      return env->callIntMethod(this$, mids$[mid_first_54c6a179]);
    }

    jint BreakIterator::following(jint a0) const
    {
      return env->callIntMethod(this$, mids$[mid_following_39c7bd23], a0);
    }

    JArray< ::java::util::Locale > BreakIterator::getAvailableLocales()
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< ::java::util::Locale >(env->callStaticObjectMethod(cls, mids$[mid_getAvailableLocales_59cb5b46]));
    }

    BreakIterator BreakIterator::getCharacterInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return BreakIterator(env->callStaticObjectMethod(cls, mids$[mid_getCharacterInstance_91cbbddf]));
    }

    BreakIterator BreakIterator::getCharacterInstance(const ::java::util::Locale & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return BreakIterator(env->callStaticObjectMethod(cls, mids$[mid_getCharacterInstance_09bf44ce], a0.this$));
    }

    BreakIterator BreakIterator::getLineInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return BreakIterator(env->callStaticObjectMethod(cls, mids$[mid_getLineInstance_91cbbddf]));
    }

    BreakIterator BreakIterator::getLineInstance(const ::java::util::Locale & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return BreakIterator(env->callStaticObjectMethod(cls, mids$[mid_getLineInstance_09bf44ce], a0.this$));
    }

    BreakIterator BreakIterator::getSentenceInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return BreakIterator(env->callStaticObjectMethod(cls, mids$[mid_getSentenceInstance_91cbbddf]));
    }

    BreakIterator BreakIterator::getSentenceInstance(const ::java::util::Locale & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return BreakIterator(env->callStaticObjectMethod(cls, mids$[mid_getSentenceInstance_09bf44ce], a0.this$));
    }

    BreakIterator BreakIterator::getWordInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return BreakIterator(env->callStaticObjectMethod(cls, mids$[mid_getWordInstance_91cbbddf]));
    }

    BreakIterator BreakIterator::getWordInstance(const ::java::util::Locale & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return BreakIterator(env->callStaticObjectMethod(cls, mids$[mid_getWordInstance_09bf44ce], a0.this$));
    }

    jboolean BreakIterator::isBoundary(jint a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_isBoundary_39c7bd30], a0);
    }

    jint BreakIterator::last() const
    {
      return env->callIntMethod(this$, mids$[mid_last_54c6a179]);
    }

    jint BreakIterator::next() const
    {
      return env->callIntMethod(this$, mids$[mid_next_54c6a179]);
    }

    jint BreakIterator::next(jint a0) const
    {
      return env->callIntMethod(this$, mids$[mid_next_39c7bd23], a0);
    }

    jint BreakIterator::preceding(jint a0) const
    {
      return env->callIntMethod(this$, mids$[mid_preceding_39c7bd23], a0);
    }

    jint BreakIterator::previous() const
    {
      return env->callIntMethod(this$, mids$[mid_previous_54c6a179]);
    }

    void BreakIterator::setText(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setText_5fdc3f48], a0.this$);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace text {
    static PyObject *t_BreakIterator_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_BreakIterator_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_BreakIterator_clone(t_BreakIterator *self);
    static PyObject *t_BreakIterator_current(t_BreakIterator *self);
    static PyObject *t_BreakIterator_first(t_BreakIterator *self);
    static PyObject *t_BreakIterator_following(t_BreakIterator *self, PyObject *arg);
    static PyObject *t_BreakIterator_getAvailableLocales(PyTypeObject *type);
    static PyObject *t_BreakIterator_getCharacterInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_BreakIterator_getLineInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_BreakIterator_getSentenceInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_BreakIterator_getWordInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_BreakIterator_isBoundary(t_BreakIterator *self, PyObject *arg);
    static PyObject *t_BreakIterator_last(t_BreakIterator *self);
    static PyObject *t_BreakIterator_next(t_BreakIterator *self, PyObject *args);
    static PyObject *t_BreakIterator_preceding(t_BreakIterator *self, PyObject *arg);
    static PyObject *t_BreakIterator_previous(t_BreakIterator *self);
    static PyObject *t_BreakIterator_setText(t_BreakIterator *self, PyObject *arg);
    static PyObject *t_BreakIterator_get__availableLocales(t_BreakIterator *self, void *data);
    static PyObject *t_BreakIterator_get__characterInstance(t_BreakIterator *self, void *data);
    static PyObject *t_BreakIterator_get__lineInstance(t_BreakIterator *self, void *data);
    static PyObject *t_BreakIterator_get__sentenceInstance(t_BreakIterator *self, void *data);
    static int t_BreakIterator_set__text(t_BreakIterator *self, PyObject *arg, void *data);
    static PyObject *t_BreakIterator_get__wordInstance(t_BreakIterator *self, void *data);
    static PyGetSetDef t_BreakIterator__fields_[] = {
      DECLARE_GET_FIELD(t_BreakIterator, availableLocales),
      DECLARE_GET_FIELD(t_BreakIterator, characterInstance),
      DECLARE_GET_FIELD(t_BreakIterator, lineInstance),
      DECLARE_GET_FIELD(t_BreakIterator, sentenceInstance),
      DECLARE_SET_FIELD(t_BreakIterator, text),
      DECLARE_GET_FIELD(t_BreakIterator, wordInstance),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_BreakIterator__methods_[] = {
      DECLARE_METHOD(t_BreakIterator, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_BreakIterator, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_BreakIterator, clone, METH_NOARGS),
      DECLARE_METHOD(t_BreakIterator, current, METH_NOARGS),
      DECLARE_METHOD(t_BreakIterator, first, METH_NOARGS),
      DECLARE_METHOD(t_BreakIterator, following, METH_O),
      DECLARE_METHOD(t_BreakIterator, getAvailableLocales, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_BreakIterator, getCharacterInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_BreakIterator, getLineInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_BreakIterator, getSentenceInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_BreakIterator, getWordInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_BreakIterator, isBoundary, METH_O),
      DECLARE_METHOD(t_BreakIterator, last, METH_NOARGS),
      DECLARE_METHOD(t_BreakIterator, next, METH_VARARGS),
      DECLARE_METHOD(t_BreakIterator, preceding, METH_O),
      DECLARE_METHOD(t_BreakIterator, previous, METH_NOARGS),
      DECLARE_METHOD(t_BreakIterator, setText, METH_O),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(BreakIterator, t_BreakIterator, ::java::lang::Object, BreakIterator, abstract_init, 0, 0, t_BreakIterator__fields_, 0, 0);

    void t_BreakIterator::install(PyObject *module)
    {
      installType(&PY_TYPE(BreakIterator), module, "BreakIterator", 0);
    }

    void t_BreakIterator::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(BreakIterator).tp_dict, "class_", make_descriptor(BreakIterator::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(BreakIterator).tp_dict, "wrapfn_", make_descriptor(t_BreakIterator::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(BreakIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
      env->getClass(BreakIterator::initializeClass);
      PyDict_SetItemString(PY_TYPE(BreakIterator).tp_dict, "DONE", make_descriptor(BreakIterator::DONE));
    }

    static PyObject *t_BreakIterator_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, BreakIterator::initializeClass, 1)))
        return NULL;
      return t_BreakIterator::wrap_Object(BreakIterator(((t_BreakIterator *) arg)->object.this$));
    }
    static PyObject *t_BreakIterator_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, BreakIterator::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_BreakIterator_clone(t_BreakIterator *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.clone());
      return ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_BreakIterator_current(t_BreakIterator *self)
    {
      jint result;
      OBJ_CALL(result = self->object.current());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_BreakIterator_first(t_BreakIterator *self)
    {
      jint result;
      OBJ_CALL(result = self->object.first());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_BreakIterator_following(t_BreakIterator *self, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = self->object.following(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "following", arg);
      return NULL;
    }

    static PyObject *t_BreakIterator_getAvailableLocales(PyTypeObject *type)
    {
      JArray< ::java::util::Locale > result((jobject) NULL);
      OBJ_CALL(result = ::java::text::BreakIterator::getAvailableLocales());
      return JArray<jobject>(result.this$).wrap(::java::util::t_Locale::wrap_jobject);
    }

    static PyObject *t_BreakIterator_getCharacterInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          BreakIterator result((jobject) NULL);
          OBJ_CALL(result = ::java::text::BreakIterator::getCharacterInstance());
          return t_BreakIterator::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          BreakIterator result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = ::java::text::BreakIterator::getCharacterInstance(a0));
            return t_BreakIterator::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getCharacterInstance", args);
      return NULL;
    }

    static PyObject *t_BreakIterator_getLineInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          BreakIterator result((jobject) NULL);
          OBJ_CALL(result = ::java::text::BreakIterator::getLineInstance());
          return t_BreakIterator::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          BreakIterator result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = ::java::text::BreakIterator::getLineInstance(a0));
            return t_BreakIterator::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getLineInstance", args);
      return NULL;
    }

    static PyObject *t_BreakIterator_getSentenceInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          BreakIterator result((jobject) NULL);
          OBJ_CALL(result = ::java::text::BreakIterator::getSentenceInstance());
          return t_BreakIterator::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          BreakIterator result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = ::java::text::BreakIterator::getSentenceInstance(a0));
            return t_BreakIterator::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getSentenceInstance", args);
      return NULL;
    }

    static PyObject *t_BreakIterator_getWordInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          BreakIterator result((jobject) NULL);
          OBJ_CALL(result = ::java::text::BreakIterator::getWordInstance());
          return t_BreakIterator::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          BreakIterator result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = ::java::text::BreakIterator::getWordInstance(a0));
            return t_BreakIterator::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getWordInstance", args);
      return NULL;
    }

    static PyObject *t_BreakIterator_isBoundary(t_BreakIterator *self, PyObject *arg)
    {
      jint a0;
      jboolean result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = self->object.isBoundary(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "isBoundary", arg);
      return NULL;
    }

    static PyObject *t_BreakIterator_last(t_BreakIterator *self)
    {
      jint result;
      OBJ_CALL(result = self->object.last());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_BreakIterator_next(t_BreakIterator *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          jint result;
          OBJ_CALL(result = self->object.next());
          return PyInt_FromLong((long) result);
        }
        break;
       case 1:
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.next(a0));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "next", args);
      return NULL;
    }

    static PyObject *t_BreakIterator_preceding(t_BreakIterator *self, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = self->object.preceding(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "preceding", arg);
      return NULL;
    }

    static PyObject *t_BreakIterator_previous(t_BreakIterator *self)
    {
      jint result;
      OBJ_CALL(result = self->object.previous());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_BreakIterator_setText(t_BreakIterator *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.setText(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setText", arg);
      return NULL;
    }

    static PyObject *t_BreakIterator_get__availableLocales(t_BreakIterator *self, void *data)
    {
      JArray< ::java::util::Locale > value((jobject) NULL);
      OBJ_CALL(value = self->object.getAvailableLocales());
      return JArray<jobject>(value.this$).wrap(::java::util::t_Locale::wrap_jobject);
    }

    static PyObject *t_BreakIterator_get__characterInstance(t_BreakIterator *self, void *data)
    {
      BreakIterator value((jobject) NULL);
      OBJ_CALL(value = self->object.getCharacterInstance());
      return t_BreakIterator::wrap_Object(value);
    }

    static PyObject *t_BreakIterator_get__lineInstance(t_BreakIterator *self, void *data)
    {
      BreakIterator value((jobject) NULL);
      OBJ_CALL(value = self->object.getLineInstance());
      return t_BreakIterator::wrap_Object(value);
    }

    static PyObject *t_BreakIterator_get__sentenceInstance(t_BreakIterator *self, void *data)
    {
      BreakIterator value((jobject) NULL);
      OBJ_CALL(value = self->object.getSentenceInstance());
      return t_BreakIterator::wrap_Object(value);
    }

    static int t_BreakIterator_set__text(t_BreakIterator *self, PyObject *arg, void *data)
    {
      {
        ::java::lang::String value((jobject) NULL);
        if (!parseArg(arg, "s", &value))
        {
          INT_CALL(self->object.setText(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "text", arg);
      return -1;
    }

    static PyObject *t_BreakIterator_get__wordInstance(t_BreakIterator *self, void *data)
    {
      BreakIterator value((jobject) NULL);
      OBJ_CALL(value = self->object.getWordInstance());
      return t_BreakIterator::wrap_Object(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/function/FunctionDistinctValuesCollector.h"
#include "java/util/Collection.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/util/Map.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/grouping/function/FunctionDistinctValuesCollector$GroupCount.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/util/mutable/MutableValue.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/grouping/SearchGroup.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace function {

            ::java::lang::Class *FunctionDistinctValuesCollector::class$ = NULL;
            jmethodID *FunctionDistinctValuesCollector::mids$ = NULL;
            bool FunctionDistinctValuesCollector::live$ = false;

            jclass FunctionDistinctValuesCollector::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/function/FunctionDistinctValuesCollector");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_86fd8007] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;Lorg/apache/lucene/queries/function/ValueSource;Lorg/apache/lucene/queries/function/ValueSource;Ljava/util/Collection;)V");
                mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
                mids$[mid_getGroups_87851566] = env->getMethodID(cls, "getGroups", "()Ljava/util/List;");
                mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FunctionDistinctValuesCollector::FunctionDistinctValuesCollector(const ::java::util::Map & a0, const ::org::apache::lucene::queries::function::ValueSource & a1, const ::org::apache::lucene::queries::function::ValueSource & a2, const ::java::util::Collection & a3) : ::org::apache::lucene::search::grouping::AbstractDistinctValuesCollector(env->newObject(initializeClass, &mids$, mid_init$_86fd8007, a0.this$, a1.this$, a2.this$, a3.this$)) {}

            void FunctionDistinctValuesCollector::collect(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
            }

            ::java::util::List FunctionDistinctValuesCollector::getGroups() const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getGroups_87851566]));
            }

            void FunctionDistinctValuesCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace function {
            static PyObject *t_FunctionDistinctValuesCollector_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FunctionDistinctValuesCollector_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FunctionDistinctValuesCollector_of_(t_FunctionDistinctValuesCollector *self, PyObject *args);
            static int t_FunctionDistinctValuesCollector_init_(t_FunctionDistinctValuesCollector *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FunctionDistinctValuesCollector_collect(t_FunctionDistinctValuesCollector *self, PyObject *args);
            static PyObject *t_FunctionDistinctValuesCollector_getGroups(t_FunctionDistinctValuesCollector *self, PyObject *args);
            static PyObject *t_FunctionDistinctValuesCollector_setNextReader(t_FunctionDistinctValuesCollector *self, PyObject *args);
            static PyObject *t_FunctionDistinctValuesCollector_get__groups(t_FunctionDistinctValuesCollector *self, void *data);
            static int t_FunctionDistinctValuesCollector_set__nextReader(t_FunctionDistinctValuesCollector *self, PyObject *arg, void *data);
            static PyObject *t_FunctionDistinctValuesCollector_get__parameters_(t_FunctionDistinctValuesCollector *self, void *data);
            static PyGetSetDef t_FunctionDistinctValuesCollector__fields_[] = {
              DECLARE_GET_FIELD(t_FunctionDistinctValuesCollector, groups),
              DECLARE_SET_FIELD(t_FunctionDistinctValuesCollector, nextReader),
              DECLARE_GET_FIELD(t_FunctionDistinctValuesCollector, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FunctionDistinctValuesCollector__methods_[] = {
              DECLARE_METHOD(t_FunctionDistinctValuesCollector, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FunctionDistinctValuesCollector, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FunctionDistinctValuesCollector, of_, METH_VARARGS),
              DECLARE_METHOD(t_FunctionDistinctValuesCollector, collect, METH_VARARGS),
              DECLARE_METHOD(t_FunctionDistinctValuesCollector, getGroups, METH_VARARGS),
              DECLARE_METHOD(t_FunctionDistinctValuesCollector, setNextReader, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FunctionDistinctValuesCollector, t_FunctionDistinctValuesCollector, ::org::apache::lucene::search::grouping::AbstractDistinctValuesCollector, FunctionDistinctValuesCollector, t_FunctionDistinctValuesCollector_init_, 0, 0, t_FunctionDistinctValuesCollector__fields_, 0, 0);
            PyObject *t_FunctionDistinctValuesCollector::wrap_Object(const FunctionDistinctValuesCollector& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FunctionDistinctValuesCollector::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FunctionDistinctValuesCollector *self = (t_FunctionDistinctValuesCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_FunctionDistinctValuesCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FunctionDistinctValuesCollector::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FunctionDistinctValuesCollector *self = (t_FunctionDistinctValuesCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_FunctionDistinctValuesCollector::install(PyObject *module)
            {
              installType(&PY_TYPE(FunctionDistinctValuesCollector), module, "FunctionDistinctValuesCollector", 0);
              PyDict_SetItemString(PY_TYPE(FunctionDistinctValuesCollector).tp_dict, "GroupCount", make_descriptor(&PY_TYPE(FunctionDistinctValuesCollector$GroupCount)));
            }

            void t_FunctionDistinctValuesCollector::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FunctionDistinctValuesCollector).tp_dict, "class_", make_descriptor(FunctionDistinctValuesCollector::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FunctionDistinctValuesCollector).tp_dict, "wrapfn_", make_descriptor(t_FunctionDistinctValuesCollector::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FunctionDistinctValuesCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FunctionDistinctValuesCollector_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FunctionDistinctValuesCollector::initializeClass, 1)))
                return NULL;
              return t_FunctionDistinctValuesCollector::wrap_Object(FunctionDistinctValuesCollector(((t_FunctionDistinctValuesCollector *) arg)->object.this$));
            }
            static PyObject *t_FunctionDistinctValuesCollector_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FunctionDistinctValuesCollector::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_FunctionDistinctValuesCollector_of_(t_FunctionDistinctValuesCollector *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static int t_FunctionDistinctValuesCollector_init_(t_FunctionDistinctValuesCollector *self, PyObject *args, PyObject *kwds)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);
              ::org::apache::lucene::queries::function::ValueSource a2((jobject) NULL);
              ::java::util::Collection a3((jobject) NULL);
              PyTypeObject **p3;
              FunctionDistinctValuesCollector object((jobject) NULL);

              if (!parseArgs(args, "KkkK", ::java::util::Map::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1, &a2, &a3, &p3, ::java::util::t_Collection::parameters_))
              {
                INT_CALL(object = FunctionDistinctValuesCollector(a0, a1, a2, a3));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::search::grouping::function::PY_TYPE(FunctionDistinctValuesCollector$GroupCount);
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FunctionDistinctValuesCollector_collect(t_FunctionDistinctValuesCollector *self, PyObject *args)
            {
              jint a0;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(self->object.collect(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(FunctionDistinctValuesCollector), (PyObject *) self, "collect", args, 2);
            }

            static PyObject *t_FunctionDistinctValuesCollector_getGroups(t_FunctionDistinctValuesCollector *self, PyObject *args)
            {
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getGroups());
                return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::grouping::function::PY_TYPE(FunctionDistinctValuesCollector$GroupCount));
              }

              return callSuper(&PY_TYPE(FunctionDistinctValuesCollector), (PyObject *) self, "getGroups", args, 2);
            }

            static PyObject *t_FunctionDistinctValuesCollector_setNextReader(t_FunctionDistinctValuesCollector *self, PyObject *args)
            {
              ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setNextReader(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(FunctionDistinctValuesCollector), (PyObject *) self, "setNextReader", args, 2);
            }
            static PyObject *t_FunctionDistinctValuesCollector_get__parameters_(t_FunctionDistinctValuesCollector *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }

            static PyObject *t_FunctionDistinctValuesCollector_get__groups(t_FunctionDistinctValuesCollector *self, void *data)
            {
              ::java::util::List value((jobject) NULL);
              OBJ_CALL(value = self->object.getGroups());
              return ::java::util::t_List::wrap_Object(value);
            }

            static int t_FunctionDistinctValuesCollector_set__nextReader(t_FunctionDistinctValuesCollector *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
                {
                  INT_CALL(self->object.setNextReader(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fa/PersianCharFilter.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {

          ::java::lang::Class *PersianCharFilter::class$ = NULL;
          jmethodID *PersianCharFilter::mids$ = NULL;
          bool PersianCharFilter::live$ = false;

          jclass PersianCharFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fa/PersianCharFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_read_54c6a179] = env->getMethodID(cls, "read", "()I");
              mids$[mid_read_6f0bb349] = env->getMethodID(cls, "read", "([CII)I");
              mids$[mid_correct_39c7bd23] = env->getMethodID(cls, "correct", "(I)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PersianCharFilter::PersianCharFilter(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::CharFilter(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          jint PersianCharFilter::read() const
          {
            return env->callIntMethod(this$, mids$[mid_read_54c6a179]);
          }

          jint PersianCharFilter::read(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return env->callIntMethod(this$, mids$[mid_read_6f0bb349], a0.this$, a1, a2);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {
          static PyObject *t_PersianCharFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PersianCharFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PersianCharFilter_init_(t_PersianCharFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PersianCharFilter_read(t_PersianCharFilter *self, PyObject *args);

          static PyMethodDef t_PersianCharFilter__methods_[] = {
            DECLARE_METHOD(t_PersianCharFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianCharFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianCharFilter, read, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PersianCharFilter, t_PersianCharFilter, ::org::apache::lucene::analysis::CharFilter, PersianCharFilter, t_PersianCharFilter_init_, 0, 0, 0, 0, 0);

          void t_PersianCharFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PersianCharFilter), module, "PersianCharFilter", 0);
          }

          void t_PersianCharFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PersianCharFilter).tp_dict, "class_", make_descriptor(PersianCharFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PersianCharFilter).tp_dict, "wrapfn_", make_descriptor(t_PersianCharFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PersianCharFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PersianCharFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PersianCharFilter::initializeClass, 1)))
              return NULL;
            return t_PersianCharFilter::wrap_Object(PersianCharFilter(((t_PersianCharFilter *) arg)->object.this$));
          }
          static PyObject *t_PersianCharFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PersianCharFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PersianCharFilter_init_(t_PersianCharFilter *self, PyObject *args, PyObject *kwds)
          {
            ::java::io::Reader a0((jobject) NULL);
            PersianCharFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              INT_CALL(object = PersianCharFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PersianCharFilter_read(t_PersianCharFilter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jint result;
                OBJ_CALL(result = self->object.read());
                return PyInt_FromLong((long) result);
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;
                jint result;

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.read(a0, a1, a2));
                  return PyInt_FromLong((long) result);
                }
              }
            }

            return callSuper(&PY_TYPE(PersianCharFilter), (PyObject *) self, "read", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/RecyclingIntBlockAllocator.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Counter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *RecyclingIntBlockAllocator::class$ = NULL;
        jmethodID *RecyclingIntBlockAllocator::mids$ = NULL;
        bool RecyclingIntBlockAllocator::live$ = false;
        jint RecyclingIntBlockAllocator::DEFAULT_BUFFERED_BLOCKS = (jint) 0;

        jclass RecyclingIntBlockAllocator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/RecyclingIntBlockAllocator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_d8d154a6] = env->getMethodID(cls, "<init>", "(II)V");
            mids$[mid_init$_bdd89aab] = env->getMethodID(cls, "<init>", "(IILorg/apache/lucene/util/Counter;)V");
            mids$[mid_bytesUsed_54c6a17a] = env->getMethodID(cls, "bytesUsed", "()J");
            mids$[mid_freeBlocks_39c7bd23] = env->getMethodID(cls, "freeBlocks", "(I)I");
            mids$[mid_getIntBlock_dab10e75] = env->getMethodID(cls, "getIntBlock", "()[I");
            mids$[mid_maxBufferedBlocks_54c6a179] = env->getMethodID(cls, "maxBufferedBlocks", "()I");
            mids$[mid_numBufferedBlocks_54c6a179] = env->getMethodID(cls, "numBufferedBlocks", "()I");
            mids$[mid_recycleIntBlocks_9f62f13c] = env->getMethodID(cls, "recycleIntBlocks", "([[III)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_BUFFERED_BLOCKS = env->getStaticIntField(cls, "DEFAULT_BUFFERED_BLOCKS");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RecyclingIntBlockAllocator::RecyclingIntBlockAllocator() : ::org::apache::lucene::util::IntBlockPool$Allocator(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        RecyclingIntBlockAllocator::RecyclingIntBlockAllocator(jint a0, jint a1) : ::org::apache::lucene::util::IntBlockPool$Allocator(env->newObject(initializeClass, &mids$, mid_init$_d8d154a6, a0, a1)) {}

        RecyclingIntBlockAllocator::RecyclingIntBlockAllocator(jint a0, jint a1, const ::org::apache::lucene::util::Counter & a2) : ::org::apache::lucene::util::IntBlockPool$Allocator(env->newObject(initializeClass, &mids$, mid_init$_bdd89aab, a0, a1, a2.this$)) {}

        jlong RecyclingIntBlockAllocator::bytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_bytesUsed_54c6a17a]);
        }

        jint RecyclingIntBlockAllocator::freeBlocks(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_freeBlocks_39c7bd23], a0);
        }

        JArray< jint > RecyclingIntBlockAllocator::getIntBlock() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getIntBlock_dab10e75]));
        }

        jint RecyclingIntBlockAllocator::maxBufferedBlocks() const
        {
          return env->callIntMethod(this$, mids$[mid_maxBufferedBlocks_54c6a179]);
        }

        jint RecyclingIntBlockAllocator::numBufferedBlocks() const
        {
          return env->callIntMethod(this$, mids$[mid_numBufferedBlocks_54c6a179]);
        }

        void RecyclingIntBlockAllocator::recycleIntBlocks(const JArray< JArray< jint > > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_recycleIntBlocks_9f62f13c], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_RecyclingIntBlockAllocator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RecyclingIntBlockAllocator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RecyclingIntBlockAllocator_init_(t_RecyclingIntBlockAllocator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RecyclingIntBlockAllocator_bytesUsed(t_RecyclingIntBlockAllocator *self);
        static PyObject *t_RecyclingIntBlockAllocator_freeBlocks(t_RecyclingIntBlockAllocator *self, PyObject *arg);
        static PyObject *t_RecyclingIntBlockAllocator_getIntBlock(t_RecyclingIntBlockAllocator *self, PyObject *args);
        static PyObject *t_RecyclingIntBlockAllocator_maxBufferedBlocks(t_RecyclingIntBlockAllocator *self);
        static PyObject *t_RecyclingIntBlockAllocator_numBufferedBlocks(t_RecyclingIntBlockAllocator *self);
        static PyObject *t_RecyclingIntBlockAllocator_recycleIntBlocks(t_RecyclingIntBlockAllocator *self, PyObject *args);
        static PyObject *t_RecyclingIntBlockAllocator_get__intBlock(t_RecyclingIntBlockAllocator *self, void *data);
        static PyGetSetDef t_RecyclingIntBlockAllocator__fields_[] = {
          DECLARE_GET_FIELD(t_RecyclingIntBlockAllocator, intBlock),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RecyclingIntBlockAllocator__methods_[] = {
          DECLARE_METHOD(t_RecyclingIntBlockAllocator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RecyclingIntBlockAllocator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RecyclingIntBlockAllocator, bytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_RecyclingIntBlockAllocator, freeBlocks, METH_O),
          DECLARE_METHOD(t_RecyclingIntBlockAllocator, getIntBlock, METH_VARARGS),
          DECLARE_METHOD(t_RecyclingIntBlockAllocator, maxBufferedBlocks, METH_NOARGS),
          DECLARE_METHOD(t_RecyclingIntBlockAllocator, numBufferedBlocks, METH_NOARGS),
          DECLARE_METHOD(t_RecyclingIntBlockAllocator, recycleIntBlocks, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RecyclingIntBlockAllocator, t_RecyclingIntBlockAllocator, ::org::apache::lucene::util::IntBlockPool$Allocator, RecyclingIntBlockAllocator, t_RecyclingIntBlockAllocator_init_, 0, 0, t_RecyclingIntBlockAllocator__fields_, 0, 0);

        void t_RecyclingIntBlockAllocator::install(PyObject *module)
        {
          installType(&PY_TYPE(RecyclingIntBlockAllocator), module, "RecyclingIntBlockAllocator", 0);
        }

        void t_RecyclingIntBlockAllocator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RecyclingIntBlockAllocator).tp_dict, "class_", make_descriptor(RecyclingIntBlockAllocator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RecyclingIntBlockAllocator).tp_dict, "wrapfn_", make_descriptor(t_RecyclingIntBlockAllocator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RecyclingIntBlockAllocator).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(RecyclingIntBlockAllocator::initializeClass);
          PyDict_SetItemString(PY_TYPE(RecyclingIntBlockAllocator).tp_dict, "DEFAULT_BUFFERED_BLOCKS", make_descriptor(RecyclingIntBlockAllocator::DEFAULT_BUFFERED_BLOCKS));
        }

        static PyObject *t_RecyclingIntBlockAllocator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RecyclingIntBlockAllocator::initializeClass, 1)))
            return NULL;
          return t_RecyclingIntBlockAllocator::wrap_Object(RecyclingIntBlockAllocator(((t_RecyclingIntBlockAllocator *) arg)->object.this$));
        }
        static PyObject *t_RecyclingIntBlockAllocator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RecyclingIntBlockAllocator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RecyclingIntBlockAllocator_init_(t_RecyclingIntBlockAllocator *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              RecyclingIntBlockAllocator object((jobject) NULL);

              INT_CALL(object = RecyclingIntBlockAllocator());
              self->object = object;
              break;
            }
            goto err;
           case 2:
            {
              jint a0;
              jint a1;
              RecyclingIntBlockAllocator object((jobject) NULL);

              if (!parseArgs(args, "II", &a0, &a1))
              {
                INT_CALL(object = RecyclingIntBlockAllocator(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              jint a0;
              jint a1;
              ::org::apache::lucene::util::Counter a2((jobject) NULL);
              RecyclingIntBlockAllocator object((jobject) NULL);

              if (!parseArgs(args, "IIk", ::org::apache::lucene::util::Counter::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = RecyclingIntBlockAllocator(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_RecyclingIntBlockAllocator_bytesUsed(t_RecyclingIntBlockAllocator *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.bytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_RecyclingIntBlockAllocator_freeBlocks(t_RecyclingIntBlockAllocator *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.freeBlocks(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "freeBlocks", arg);
          return NULL;
        }

        static PyObject *t_RecyclingIntBlockAllocator_getIntBlock(t_RecyclingIntBlockAllocator *self, PyObject *args)
        {
          JArray< jint > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getIntBlock());
            return result.wrap();
          }

          return callSuper(&PY_TYPE(RecyclingIntBlockAllocator), (PyObject *) self, "getIntBlock", args, 2);
        }

        static PyObject *t_RecyclingIntBlockAllocator_maxBufferedBlocks(t_RecyclingIntBlockAllocator *self)
        {
          jint result;
          OBJ_CALL(result = self->object.maxBufferedBlocks());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_RecyclingIntBlockAllocator_numBufferedBlocks(t_RecyclingIntBlockAllocator *self)
        {
          jint result;
          OBJ_CALL(result = self->object.numBufferedBlocks());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_RecyclingIntBlockAllocator_recycleIntBlocks(t_RecyclingIntBlockAllocator *self, PyObject *args)
        {
          JArray< JArray< jint > > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[[III", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.recycleIntBlocks(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(RecyclingIntBlockAllocator), (PyObject *) self, "recycleIntBlocks", args, 2);
        }

        static PyObject *t_RecyclingIntBlockAllocator_get__intBlock(t_RecyclingIntBlockAllocator *self, void *data)
        {
          JArray< jint > value((jobject) NULL);
          OBJ_CALL(value = self->object.getIntBlock());
          return value.wrap();
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pl/PolishAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/egothor/stemmer/Trie.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pl {

          ::java::lang::Class *PolishAnalyzer::class$ = NULL;
          jmethodID *PolishAnalyzer::mids$ = NULL;
          bool PolishAnalyzer::live$ = false;
          ::java::lang::String *PolishAnalyzer::DEFAULT_STEMMER_FILE = NULL;
          ::java::lang::String *PolishAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass PolishAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pl/PolishAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_getDefaultTable_0b271714] = env->getStaticMethodID(cls, "getDefaultTable", "()Lorg/egothor/stemmer/Trie;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STEMMER_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STEMMER_FILE", "Ljava/lang/String;"));
              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PolishAnalyzer::PolishAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          PolishAnalyzer::PolishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          PolishAnalyzer::PolishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet PolishAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }

          ::org::egothor::stemmer::Trie PolishAnalyzer::getDefaultTable()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::egothor::stemmer::Trie(env->callStaticObjectMethod(cls, mids$[mid_getDefaultTable_0b271714]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pl {
          static PyObject *t_PolishAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PolishAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PolishAnalyzer_init_(t_PolishAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PolishAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_PolishAnalyzer_getDefaultTable(PyTypeObject *type);
          static PyObject *t_PolishAnalyzer_get__defaultStopSet(t_PolishAnalyzer *self, void *data);
          static PyObject *t_PolishAnalyzer_get__defaultTable(t_PolishAnalyzer *self, void *data);
          static PyGetSetDef t_PolishAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_PolishAnalyzer, defaultStopSet),
            DECLARE_GET_FIELD(t_PolishAnalyzer, defaultTable),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PolishAnalyzer__methods_[] = {
            DECLARE_METHOD(t_PolishAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PolishAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PolishAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_PolishAnalyzer, getDefaultTable, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PolishAnalyzer, t_PolishAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, PolishAnalyzer, t_PolishAnalyzer_init_, 0, 0, t_PolishAnalyzer__fields_, 0, 0);

          void t_PolishAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(PolishAnalyzer), module, "PolishAnalyzer", 0);
          }

          void t_PolishAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PolishAnalyzer).tp_dict, "class_", make_descriptor(PolishAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PolishAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_PolishAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PolishAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(PolishAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(PolishAnalyzer).tp_dict, "DEFAULT_STEMMER_FILE", make_descriptor(j2p(*PolishAnalyzer::DEFAULT_STEMMER_FILE)));
            PyDict_SetItemString(PY_TYPE(PolishAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*PolishAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_PolishAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PolishAnalyzer::initializeClass, 1)))
              return NULL;
            return t_PolishAnalyzer::wrap_Object(PolishAnalyzer(((t_PolishAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_PolishAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PolishAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PolishAnalyzer_init_(t_PolishAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                PolishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = PolishAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                PolishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = PolishAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                PolishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = PolishAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PolishAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::pl::PolishAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_PolishAnalyzer_getDefaultTable(PyTypeObject *type)
          {
            ::org::egothor::stemmer::Trie result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::pl::PolishAnalyzer::getDefaultTable());
            return ::org::egothor::stemmer::t_Trie::wrap_Object(result);
          }

          static PyObject *t_PolishAnalyzer_get__defaultStopSet(t_PolishAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }

          static PyObject *t_PolishAnalyzer_get__defaultTable(t_PolishAnalyzer *self, void *data)
          {
            ::org::egothor::stemmer::Trie value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultTable());
            return ::org::egothor::stemmer::t_Trie::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanStemmer::class$ = NULL;
          jmethodID *GermanStemmer::mids$ = NULL;
          bool GermanStemmer::live$ = false;

          jclass GermanStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_97a5258f] = env->getMethodID(cls, "stem", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanStemmer::GermanStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanStemmer_init_(t_GermanStemmer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_GermanStemmer__methods_[] = {
            DECLARE_METHOD(t_GermanStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanStemmer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GermanStemmer, t_GermanStemmer, ::java::lang::Object, GermanStemmer, t_GermanStemmer_init_, 0, 0, 0, 0, 0);

          void t_GermanStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanStemmer), module, "GermanStemmer", 0);
          }

          void t_GermanStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GermanStemmer).tp_dict, "class_", make_descriptor(GermanStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GermanStemmer).tp_dict, "wrapfn_", make_descriptor(t_GermanStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GermanStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GermanStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanStemmer::initializeClass, 1)))
              return NULL;
            return t_GermanStemmer::wrap_Object(GermanStemmer(((t_GermanStemmer *) arg)->object.this$));
          }
          static PyObject *t_GermanStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanStemmer_init_(t_GermanStemmer *self, PyObject *args, PyObject *kwds)
          {
            GermanStemmer object((jobject) NULL);

            INT_CALL(object = GermanStemmer());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ru/RussianAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ru {

          ::java::lang::Class *RussianAnalyzer::class$ = NULL;
          jmethodID *RussianAnalyzer::mids$ = NULL;
          bool RussianAnalyzer::live$ = false;
          ::java::lang::String *RussianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass RussianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ru/RussianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RussianAnalyzer::RussianAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          RussianAnalyzer::RussianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          RussianAnalyzer::RussianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet RussianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ru {
          static PyObject *t_RussianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RussianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RussianAnalyzer_init_(t_RussianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_RussianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_RussianAnalyzer_get__defaultStopSet(t_RussianAnalyzer *self, void *data);
          static PyGetSetDef t_RussianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_RussianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_RussianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_RussianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RussianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RussianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(RussianAnalyzer, t_RussianAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, RussianAnalyzer, t_RussianAnalyzer_init_, 0, 0, t_RussianAnalyzer__fields_, 0, 0);

          void t_RussianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(RussianAnalyzer), module, "RussianAnalyzer", 0);
          }

          void t_RussianAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(RussianAnalyzer).tp_dict, "class_", make_descriptor(RussianAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RussianAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_RussianAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RussianAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(RussianAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(RussianAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*RussianAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_RussianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RussianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_RussianAnalyzer::wrap_Object(RussianAnalyzer(((t_RussianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_RussianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RussianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RussianAnalyzer_init_(t_RussianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                RussianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = RussianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                RussianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = RussianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                RussianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = RussianAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_RussianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::ru::RussianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_RussianAnalyzer_get__defaultStopSet(t_RussianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/range/RangeFacetCounts.h"
#include "java/lang/Number.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/FacetResult.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {

          ::java::lang::Class *RangeFacetCounts::class$ = NULL;
          jmethodID *RangeFacetCounts::mids$ = NULL;
          bool RangeFacetCounts::live$ = false;

          jclass RangeFacetCounts::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/range/RangeFacetCounts");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getAllDims_cdc2a528] = env->getMethodID(cls, "getAllDims", "(I)Ljava/util/List;");
              mids$[mid_getSpecificValue_8ecbcac9] = env->getMethodID(cls, "getSpecificValue", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Number;");
              mids$[mid_getTopChildren_37e8c044] = env->getMethodID(cls, "getTopChildren", "(ILjava/lang/String;[Ljava/lang/String;)Lorg/apache/lucene/facet/FacetResult;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::util::List RangeFacetCounts::getAllDims(jint a0) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getAllDims_cdc2a528], a0));
          }

          ::java::lang::Number RangeFacetCounts::getSpecificValue(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) const
          {
            return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getSpecificValue_8ecbcac9], a0.this$, a1.this$));
          }

          ::org::apache::lucene::facet::FacetResult RangeFacetCounts::getTopChildren(jint a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2) const
          {
            return ::org::apache::lucene::facet::FacetResult(env->callObjectMethod(this$, mids$[mid_getTopChildren_37e8c044], a0, a1.this$, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {
          static PyObject *t_RangeFacetCounts_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RangeFacetCounts_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RangeFacetCounts_getAllDims(t_RangeFacetCounts *self, PyObject *args);
          static PyObject *t_RangeFacetCounts_getSpecificValue(t_RangeFacetCounts *self, PyObject *args);
          static PyObject *t_RangeFacetCounts_getTopChildren(t_RangeFacetCounts *self, PyObject *args);

          static PyMethodDef t_RangeFacetCounts__methods_[] = {
            DECLARE_METHOD(t_RangeFacetCounts, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RangeFacetCounts, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RangeFacetCounts, getAllDims, METH_VARARGS),
            DECLARE_METHOD(t_RangeFacetCounts, getSpecificValue, METH_VARARGS),
            DECLARE_METHOD(t_RangeFacetCounts, getTopChildren, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(RangeFacetCounts, t_RangeFacetCounts, ::org::apache::lucene::facet::Facets, RangeFacetCounts, abstract_init, 0, 0, 0, 0, 0);

          void t_RangeFacetCounts::install(PyObject *module)
          {
            installType(&PY_TYPE(RangeFacetCounts), module, "RangeFacetCounts", 0);
          }

          void t_RangeFacetCounts::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(RangeFacetCounts).tp_dict, "class_", make_descriptor(RangeFacetCounts::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RangeFacetCounts).tp_dict, "wrapfn_", make_descriptor(t_RangeFacetCounts::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RangeFacetCounts).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_RangeFacetCounts_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RangeFacetCounts::initializeClass, 1)))
              return NULL;
            return t_RangeFacetCounts::wrap_Object(RangeFacetCounts(((t_RangeFacetCounts *) arg)->object.this$));
          }
          static PyObject *t_RangeFacetCounts_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RangeFacetCounts::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_RangeFacetCounts_getAllDims(t_RangeFacetCounts *self, PyObject *args)
          {
            jint a0;
            ::java::util::List result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.getAllDims(a0));
              return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::facet::PY_TYPE(FacetResult));
            }

            return callSuper(&PY_TYPE(RangeFacetCounts), (PyObject *) self, "getAllDims", args, 2);
          }

          static PyObject *t_RangeFacetCounts_getSpecificValue(t_RangeFacetCounts *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            JArray< ::java::lang::String > a1((jobject) NULL);
            ::java::lang::Number result((jobject) NULL);

            if (!parseArgs(args, "s[s", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getSpecificValue(a0, a1));
              return ::java::lang::t_Number::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(RangeFacetCounts), (PyObject *) self, "getSpecificValue", args, 2);
          }

          static PyObject *t_RangeFacetCounts_getTopChildren(t_RangeFacetCounts *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            JArray< ::java::lang::String > a2((jobject) NULL);
            ::org::apache::lucene::facet::FacetResult result((jobject) NULL);

            if (!parseArgs(args, "Is[s", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getTopChildren(a0, a1, a2));
              return ::org::apache::lucene::facet::t_FacetResult::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(RangeFacetCounts), (PyObject *) self, "getTopChildren", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/DisjunctionMaxQuery.h"
#include "java/util/Collection.h"
#include "java/util/Set.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/util/ArrayList.h"
#include "java/lang/String.h"
#include "java/util/Iterator.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Iterable.h"
#include "org/apache/lucene/search/Weight.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *DisjunctionMaxQuery::class$ = NULL;
        jmethodID *DisjunctionMaxQuery::mids$ = NULL;
        bool DisjunctionMaxQuery::live$ = false;

        jclass DisjunctionMaxQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/DisjunctionMaxQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_06298cab] = env->getMethodID(cls, "<init>", "(F)V");
            mids$[mid_init$_30a7c9ca] = env->getMethodID(cls, "<init>", "(Ljava/util/Collection;F)V");
            mids$[mid_add_9bfb370d] = env->getMethodID(cls, "add", "(Ljava/util/Collection;)V");
            mids$[mid_add_6e301113] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/search/Query;)V");
            mids$[mid_clone_ca9043ca] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/search/DisjunctionMaxQuery;");
            mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
            mids$[mid_getDisjuncts_21eb51b0] = env->getMethodID(cls, "getDisjuncts", "()Ljava/util/ArrayList;");
            mids$[mid_getTieBreakerMultiplier_54c6a176] = env->getMethodID(cls, "getTieBreakerMultiplier", "()F");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DisjunctionMaxQuery::DisjunctionMaxQuery(jfloat a0) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_06298cab, a0)) {}

        DisjunctionMaxQuery::DisjunctionMaxQuery(const ::java::util::Collection & a0, jfloat a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_30a7c9ca, a0.this$, a1)) {}

        void DisjunctionMaxQuery::add(const ::java::util::Collection & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_9bfb370d], a0.this$);
        }

        void DisjunctionMaxQuery::add(const ::org::apache::lucene::search::Query & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_6e301113], a0.this$);
        }

        DisjunctionMaxQuery DisjunctionMaxQuery::clone() const
        {
          return DisjunctionMaxQuery(env->callObjectMethod(this$, mids$[mid_clone_ca9043ca]));
        }

        ::org::apache::lucene::search::Weight DisjunctionMaxQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
        }

        jboolean DisjunctionMaxQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void DisjunctionMaxQuery::extractTerms(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
        }

        ::java::util::ArrayList DisjunctionMaxQuery::getDisjuncts() const
        {
          return ::java::util::ArrayList(env->callObjectMethod(this$, mids$[mid_getDisjuncts_21eb51b0]));
        }

        jfloat DisjunctionMaxQuery::getTieBreakerMultiplier() const
        {
          return env->callFloatMethod(this$, mids$[mid_getTieBreakerMultiplier_54c6a176]);
        }

        jint DisjunctionMaxQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::util::Iterator DisjunctionMaxQuery::iterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
        }

        ::org::apache::lucene::search::Query DisjunctionMaxQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
        }

        ::java::lang::String DisjunctionMaxQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_DisjunctionMaxQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DisjunctionMaxQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DisjunctionMaxQuery_init_(t_DisjunctionMaxQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DisjunctionMaxQuery_add(t_DisjunctionMaxQuery *self, PyObject *args);
        static PyObject *t_DisjunctionMaxQuery_clone(t_DisjunctionMaxQuery *self, PyObject *args);
        static PyObject *t_DisjunctionMaxQuery_createWeight(t_DisjunctionMaxQuery *self, PyObject *args);
        static PyObject *t_DisjunctionMaxQuery_equals(t_DisjunctionMaxQuery *self, PyObject *args);
        static PyObject *t_DisjunctionMaxQuery_extractTerms(t_DisjunctionMaxQuery *self, PyObject *args);
        static PyObject *t_DisjunctionMaxQuery_getDisjuncts(t_DisjunctionMaxQuery *self);
        static PyObject *t_DisjunctionMaxQuery_getTieBreakerMultiplier(t_DisjunctionMaxQuery *self);
        static PyObject *t_DisjunctionMaxQuery_hashCode(t_DisjunctionMaxQuery *self, PyObject *args);
        static PyObject *t_DisjunctionMaxQuery_iterator(t_DisjunctionMaxQuery *self);
        static PyObject *t_DisjunctionMaxQuery_rewrite(t_DisjunctionMaxQuery *self, PyObject *args);
        static PyObject *t_DisjunctionMaxQuery_toString(t_DisjunctionMaxQuery *self, PyObject *args);
        static PyObject *t_DisjunctionMaxQuery_get__disjuncts(t_DisjunctionMaxQuery *self, void *data);
        static PyObject *t_DisjunctionMaxQuery_get__tieBreakerMultiplier(t_DisjunctionMaxQuery *self, void *data);
        static PyGetSetDef t_DisjunctionMaxQuery__fields_[] = {
          DECLARE_GET_FIELD(t_DisjunctionMaxQuery, disjuncts),
          DECLARE_GET_FIELD(t_DisjunctionMaxQuery, tieBreakerMultiplier),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DisjunctionMaxQuery__methods_[] = {
          DECLARE_METHOD(t_DisjunctionMaxQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, add, METH_VARARGS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, clone, METH_VARARGS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, extractTerms, METH_VARARGS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, getDisjuncts, METH_NOARGS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, getTieBreakerMultiplier, METH_NOARGS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, iterator, METH_NOARGS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DisjunctionMaxQuery, t_DisjunctionMaxQuery, ::org::apache::lucene::search::Query, DisjunctionMaxQuery, t_DisjunctionMaxQuery_init_, ((PyObject *(*)(t_DisjunctionMaxQuery *)) get_iterator< t_DisjunctionMaxQuery >), 0, t_DisjunctionMaxQuery__fields_, 0, 0);

        void t_DisjunctionMaxQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(DisjunctionMaxQuery), module, "DisjunctionMaxQuery", 0);
        }

        void t_DisjunctionMaxQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DisjunctionMaxQuery).tp_dict, "class_", make_descriptor(DisjunctionMaxQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DisjunctionMaxQuery).tp_dict, "wrapfn_", make_descriptor(t_DisjunctionMaxQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DisjunctionMaxQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DisjunctionMaxQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DisjunctionMaxQuery::initializeClass, 1)))
            return NULL;
          return t_DisjunctionMaxQuery::wrap_Object(DisjunctionMaxQuery(((t_DisjunctionMaxQuery *) arg)->object.this$));
        }
        static PyObject *t_DisjunctionMaxQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DisjunctionMaxQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DisjunctionMaxQuery_init_(t_DisjunctionMaxQuery *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jfloat a0;
              DisjunctionMaxQuery object((jobject) NULL);

              if (!parseArgs(args, "F", &a0))
              {
                INT_CALL(object = DisjunctionMaxQuery(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::util::Collection a0((jobject) NULL);
              PyTypeObject **p0;
              jfloat a1;
              DisjunctionMaxQuery object((jobject) NULL);

              if (!parseArgs(args, "KF", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1))
              {
                INT_CALL(object = DisjunctionMaxQuery(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DisjunctionMaxQuery_add(t_DisjunctionMaxQuery *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::util::Collection a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
              {
                OBJ_CALL(self->object.add(a0));
                Py_RETURN_NONE;
              }
            }
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
              {
                OBJ_CALL(self->object.add(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "add", args);
          return NULL;
        }

        static PyObject *t_DisjunctionMaxQuery_clone(t_DisjunctionMaxQuery *self, PyObject *args)
        {
          DisjunctionMaxQuery result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.clone());
            return t_DisjunctionMaxQuery::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(DisjunctionMaxQuery), (PyObject *) self, "clone", args, 2);
        }

        static PyObject *t_DisjunctionMaxQuery_createWeight(t_DisjunctionMaxQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.createWeight(a0));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(DisjunctionMaxQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_DisjunctionMaxQuery_equals(t_DisjunctionMaxQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(DisjunctionMaxQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_DisjunctionMaxQuery_extractTerms(t_DisjunctionMaxQuery *self, PyObject *args)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.extractTerms(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(DisjunctionMaxQuery), (PyObject *) self, "extractTerms", args, 2);
        }

        static PyObject *t_DisjunctionMaxQuery_getDisjuncts(t_DisjunctionMaxQuery *self)
        {
          ::java::util::ArrayList result((jobject) NULL);
          OBJ_CALL(result = self->object.getDisjuncts());
          return ::java::util::t_ArrayList::wrap_Object(result, &::org::apache::lucene::search::PY_TYPE(Query));
        }

        static PyObject *t_DisjunctionMaxQuery_getTieBreakerMultiplier(t_DisjunctionMaxQuery *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getTieBreakerMultiplier());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_DisjunctionMaxQuery_hashCode(t_DisjunctionMaxQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(DisjunctionMaxQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_DisjunctionMaxQuery_iterator(t_DisjunctionMaxQuery *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.iterator());
          return ::java::util::t_Iterator::wrap_Object(result, &::org::apache::lucene::search::PY_TYPE(Query));
        }

        static PyObject *t_DisjunctionMaxQuery_rewrite(t_DisjunctionMaxQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(DisjunctionMaxQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_DisjunctionMaxQuery_toString(t_DisjunctionMaxQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(DisjunctionMaxQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_DisjunctionMaxQuery_get__disjuncts(t_DisjunctionMaxQuery *self, void *data)
        {
          ::java::util::ArrayList value((jobject) NULL);
          OBJ_CALL(value = self->object.getDisjuncts());
          return ::java::util::t_ArrayList::wrap_Object(value);
        }

        static PyObject *t_DisjunctionMaxQuery_get__tieBreakerMultiplier(t_DisjunctionMaxQuery *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getTieBreakerMultiplier());
          return PyFloat_FromDouble((double) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/bg/BulgarianStemFilterFactory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace bg {

          ::java::lang::Class *BulgarianStemFilterFactory::class$ = NULL;
          jmethodID *BulgarianStemFilterFactory::mids$ = NULL;
          bool BulgarianStemFilterFactory::live$ = false;

          jclass BulgarianStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/bg/BulgarianStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BulgarianStemFilterFactory::BulgarianStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream BulgarianStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace bg {
          static PyObject *t_BulgarianStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BulgarianStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BulgarianStemFilterFactory_init_(t_BulgarianStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BulgarianStemFilterFactory_create(t_BulgarianStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_BulgarianStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_BulgarianStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BulgarianStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BulgarianStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BulgarianStemFilterFactory, t_BulgarianStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, BulgarianStemFilterFactory, t_BulgarianStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_BulgarianStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(BulgarianStemFilterFactory), module, "BulgarianStemFilterFactory", 0);
          }

          void t_BulgarianStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BulgarianStemFilterFactory).tp_dict, "class_", make_descriptor(BulgarianStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BulgarianStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_BulgarianStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BulgarianStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BulgarianStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BulgarianStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_BulgarianStemFilterFactory::wrap_Object(BulgarianStemFilterFactory(((t_BulgarianStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_BulgarianStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BulgarianStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BulgarianStemFilterFactory_init_(t_BulgarianStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            BulgarianStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = BulgarianStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BulgarianStemFilterFactory_create(t_BulgarianStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(BulgarianStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MultiCollector.h"
#include "org/apache/lucene/search/Scorer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MultiCollector::class$ = NULL;
        jmethodID *MultiCollector::mids$ = NULL;
        bool MultiCollector::live$ = false;

        jclass MultiCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MultiCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
            mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
            mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
            mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");
            mids$[mid_wrap_e0c58317] = env->getStaticMethodID(cls, "wrap", "([Lorg/apache/lucene/search/Collector;)Lorg/apache/lucene/search/Collector;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean MultiCollector::acceptsDocsOutOfOrder() const
        {
          return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
        }

        void MultiCollector::collect(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
        }

        void MultiCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
        }

        void MultiCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
        }

        ::org::apache::lucene::search::Collector MultiCollector::wrap(const JArray< ::org::apache::lucene::search::Collector > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::Collector(env->callStaticObjectMethod(cls, mids$[mid_wrap_e0c58317], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MultiCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiCollector_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiCollector_acceptsDocsOutOfOrder(t_MultiCollector *self, PyObject *args);
        static PyObject *t_MultiCollector_collect(t_MultiCollector *self, PyObject *args);
        static PyObject *t_MultiCollector_setNextReader(t_MultiCollector *self, PyObject *args);
        static PyObject *t_MultiCollector_setScorer(t_MultiCollector *self, PyObject *args);
        static PyObject *t_MultiCollector_wrap(PyTypeObject *type, PyObject *arg);
        static int t_MultiCollector_set__nextReader(t_MultiCollector *self, PyObject *arg, void *data);
        static int t_MultiCollector_set__scorer(t_MultiCollector *self, PyObject *arg, void *data);
        static PyGetSetDef t_MultiCollector__fields_[] = {
          DECLARE_SET_FIELD(t_MultiCollector, nextReader),
          DECLARE_SET_FIELD(t_MultiCollector, scorer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiCollector__methods_[] = {
          DECLARE_METHOD(t_MultiCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiCollector, acceptsDocsOutOfOrder, METH_VARARGS),
          DECLARE_METHOD(t_MultiCollector, collect, METH_VARARGS),
          DECLARE_METHOD(t_MultiCollector, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_MultiCollector, setScorer, METH_VARARGS),
          DECLARE_METHOD(t_MultiCollector, wrap, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiCollector, t_MultiCollector, ::org::apache::lucene::search::Collector, MultiCollector, abstract_init, 0, 0, t_MultiCollector__fields_, 0, 0);

        void t_MultiCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiCollector), module, "MultiCollector", 0);
        }

        void t_MultiCollector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiCollector).tp_dict, "class_", make_descriptor(MultiCollector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiCollector).tp_dict, "wrapfn_", make_descriptor(t_MultiCollector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiCollector::initializeClass, 1)))
            return NULL;
          return t_MultiCollector::wrap_Object(MultiCollector(((t_MultiCollector *) arg)->object.this$));
        }
        static PyObject *t_MultiCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiCollector_acceptsDocsOutOfOrder(t_MultiCollector *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(MultiCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
        }

        static PyObject *t_MultiCollector_collect(t_MultiCollector *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.collect(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(MultiCollector), (PyObject *) self, "collect", args, 2);
        }

        static PyObject *t_MultiCollector_setNextReader(t_MultiCollector *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setNextReader(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(MultiCollector), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_MultiCollector_setScorer(t_MultiCollector *self, PyObject *args)
        {
          ::org::apache::lucene::search::Scorer a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setScorer(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(MultiCollector), (PyObject *) self, "setScorer", args, 2);
        }

        static PyObject *t_MultiCollector_wrap(PyTypeObject *type, PyObject *arg)
        {
          JArray< ::org::apache::lucene::search::Collector > a0((jobject) NULL);
          ::org::apache::lucene::search::Collector result((jobject) NULL);

          if (!parseArg(arg, "[k", ::org::apache::lucene::search::Collector::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::MultiCollector::wrap(a0));
            return ::org::apache::lucene::search::t_Collector::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "wrap", arg);
          return NULL;
        }

        static int t_MultiCollector_set__nextReader(t_MultiCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_MultiCollector_set__scorer(t_MultiCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Scorer value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
            {
              INT_CALL(self->object.setScorer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "scorer", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hu/HungarianLightStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hu {

          ::java::lang::Class *HungarianLightStemmer::class$ = NULL;
          jmethodID *HungarianLightStemmer::mids$ = NULL;
          bool HungarianLightStemmer::live$ = false;

          jclass HungarianLightStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hu/HungarianLightStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HungarianLightStemmer::HungarianLightStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint HungarianLightStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hu {
          static PyObject *t_HungarianLightStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HungarianLightStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HungarianLightStemmer_init_(t_HungarianLightStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HungarianLightStemmer_stem(t_HungarianLightStemmer *self, PyObject *args);

          static PyMethodDef t_HungarianLightStemmer__methods_[] = {
            DECLARE_METHOD(t_HungarianLightStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HungarianLightStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HungarianLightStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HungarianLightStemmer, t_HungarianLightStemmer, ::java::lang::Object, HungarianLightStemmer, t_HungarianLightStemmer_init_, 0, 0, 0, 0, 0);

          void t_HungarianLightStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(HungarianLightStemmer), module, "HungarianLightStemmer", 0);
          }

          void t_HungarianLightStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HungarianLightStemmer).tp_dict, "class_", make_descriptor(HungarianLightStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HungarianLightStemmer).tp_dict, "wrapfn_", make_descriptor(t_HungarianLightStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HungarianLightStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HungarianLightStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HungarianLightStemmer::initializeClass, 1)))
              return NULL;
            return t_HungarianLightStemmer::wrap_Object(HungarianLightStemmer(((t_HungarianLightStemmer *) arg)->object.this$));
          }
          static PyObject *t_HungarianLightStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HungarianLightStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HungarianLightStemmer_init_(t_HungarianLightStemmer *self, PyObject *args, PyObject *kwds)
          {
            HungarianLightStemmer object((jobject) NULL);

            INT_CALL(object = HungarianLightStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_HungarianLightStemmer_stem(t_HungarianLightStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/WildcardQueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *WildcardQueryNodeProcessor::class$ = NULL;
              jmethodID *WildcardQueryNodeProcessor::mids$ = NULL;
              bool WildcardQueryNodeProcessor::live$ = false;

              jclass WildcardQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/WildcardQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              WildcardQueryNodeProcessor::WildcardQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_WildcardQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_WildcardQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_WildcardQueryNodeProcessor_init_(t_WildcardQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_WildcardQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_WildcardQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_WildcardQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(WildcardQueryNodeProcessor, t_WildcardQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, WildcardQueryNodeProcessor, t_WildcardQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_WildcardQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(WildcardQueryNodeProcessor), module, "WildcardQueryNodeProcessor", 0);
              }

              void t_WildcardQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(WildcardQueryNodeProcessor).tp_dict, "class_", make_descriptor(WildcardQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(WildcardQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_WildcardQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(WildcardQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_WildcardQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, WildcardQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_WildcardQueryNodeProcessor::wrap_Object(WildcardQueryNodeProcessor(((t_WildcardQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_WildcardQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, WildcardQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_WildcardQueryNodeProcessor_init_(t_WildcardQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                WildcardQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = WildcardQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/util/Map.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/String.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *QueryNode::class$ = NULL;
              jmethodID *QueryNode::mids$ = NULL;
              bool QueryNode::live$ = false;

              jclass QueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/QueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_add_cc04aeef] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)V");
                  mids$[mid_add_1fde8fc3] = env->getMethodID(cls, "add", "(Ljava/util/List;)V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_containsTag_5fdc3f44] = env->getMethodID(cls, "containsTag", "(Ljava/lang/String;)Z");
                  mids$[mid_getChildren_87851566] = env->getMethodID(cls, "getChildren", "()Ljava/util/List;");
                  mids$[mid_getParent_b387c5e6] = env->getMethodID(cls, "getParent", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getTag_2a1c4d09] = env->getMethodID(cls, "getTag", "(Ljava/lang/String;)Ljava/lang/Object;");
                  mids$[mid_getTagMap_db60befd] = env->getMethodID(cls, "getTagMap", "()Ljava/util/Map;");
                  mids$[mid_isLeaf_54c6a16a] = env->getMethodID(cls, "isLeaf", "()Z");
                  mids$[mid_removeFromParent_54c6a166] = env->getMethodID(cls, "removeFromParent", "()V");
                  mids$[mid_set_1fde8fc3] = env->getMethodID(cls, "set", "(Ljava/util/List;)V");
                  mids$[mid_setTag_2da4da24] = env->getMethodID(cls, "setTag", "(Ljava/lang/String;Ljava/lang/Object;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                  mids$[mid_unsetTag_5fdc3f48] = env->getMethodID(cls, "unsetTag", "(Ljava/lang/String;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              void QueryNode::add(const QueryNode & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_add_cc04aeef], a0.this$);
              }

              void QueryNode::add(const ::java::util::List & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_add_1fde8fc3], a0.this$);
              }

              QueryNode QueryNode::cloneTree() const
              {
                return QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              jboolean QueryNode::containsTag(const ::java::lang::String & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_containsTag_5fdc3f44], a0.this$);
              }

              ::java::util::List QueryNode::getChildren() const
              {
                return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getChildren_87851566]));
              }

              QueryNode QueryNode::getParent() const
              {
                return QueryNode(env->callObjectMethod(this$, mids$[mid_getParent_b387c5e6]));
              }

              ::java::lang::Object QueryNode::getTag(const ::java::lang::String & a0) const
              {
                return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getTag_2a1c4d09], a0.this$));
              }

              ::java::util::Map QueryNode::getTagMap() const
              {
                return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getTagMap_db60befd]));
              }

              jboolean QueryNode::isLeaf() const
              {
                return env->callBooleanMethod(this$, mids$[mid_isLeaf_54c6a16a]);
              }

              void QueryNode::removeFromParent() const
              {
                env->callVoidMethod(this$, mids$[mid_removeFromParent_54c6a166]);
              }

              void QueryNode::set(const ::java::util::List & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_set_1fde8fc3], a0.this$);
              }

              void QueryNode::setTag(const ::java::lang::String & a0, const ::java::lang::Object & a1) const
              {
                env->callVoidMethod(this$, mids$[mid_setTag_2da4da24], a0.this$, a1.this$);
              }

              ::java::lang::CharSequence QueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String QueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }

              void QueryNode::unsetTag(const ::java::lang::String & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_unsetTag_5fdc3f48], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_QueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryNode_add(t_QueryNode *self, PyObject *args);
              static PyObject *t_QueryNode_cloneTree(t_QueryNode *self);
              static PyObject *t_QueryNode_containsTag(t_QueryNode *self, PyObject *arg);
              static PyObject *t_QueryNode_getChildren(t_QueryNode *self);
              static PyObject *t_QueryNode_getParent(t_QueryNode *self);
              static PyObject *t_QueryNode_getTag(t_QueryNode *self, PyObject *arg);
              static PyObject *t_QueryNode_getTagMap(t_QueryNode *self);
              static PyObject *t_QueryNode_isLeaf(t_QueryNode *self);
              static PyObject *t_QueryNode_removeFromParent(t_QueryNode *self);
              static PyObject *t_QueryNode_set(t_QueryNode *self, PyObject *arg);
              static PyObject *t_QueryNode_setTag(t_QueryNode *self, PyObject *args);
              static PyObject *t_QueryNode_toQueryString(t_QueryNode *self, PyObject *arg);
              static PyObject *t_QueryNode_toString(t_QueryNode *self, PyObject *args);
              static PyObject *t_QueryNode_unsetTag(t_QueryNode *self, PyObject *arg);
              static PyObject *t_QueryNode_get__children(t_QueryNode *self, void *data);
              static PyObject *t_QueryNode_get__leaf(t_QueryNode *self, void *data);
              static PyObject *t_QueryNode_get__parent(t_QueryNode *self, void *data);
              static PyObject *t_QueryNode_get__tagMap(t_QueryNode *self, void *data);
              static PyGetSetDef t_QueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_QueryNode, children),
                DECLARE_GET_FIELD(t_QueryNode, leaf),
                DECLARE_GET_FIELD(t_QueryNode, parent),
                DECLARE_GET_FIELD(t_QueryNode, tagMap),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_QueryNode__methods_[] = {
                DECLARE_METHOD(t_QueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNode, add, METH_VARARGS),
                DECLARE_METHOD(t_QueryNode, cloneTree, METH_NOARGS),
                DECLARE_METHOD(t_QueryNode, containsTag, METH_O),
                DECLARE_METHOD(t_QueryNode, getChildren, METH_NOARGS),
                DECLARE_METHOD(t_QueryNode, getParent, METH_NOARGS),
                DECLARE_METHOD(t_QueryNode, getTag, METH_O),
                DECLARE_METHOD(t_QueryNode, getTagMap, METH_NOARGS),
                DECLARE_METHOD(t_QueryNode, isLeaf, METH_NOARGS),
                DECLARE_METHOD(t_QueryNode, removeFromParent, METH_NOARGS),
                DECLARE_METHOD(t_QueryNode, set, METH_O),
                DECLARE_METHOD(t_QueryNode, setTag, METH_VARARGS),
                DECLARE_METHOD(t_QueryNode, toQueryString, METH_O),
                DECLARE_METHOD(t_QueryNode, toString, METH_VARARGS),
                DECLARE_METHOD(t_QueryNode, unsetTag, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(QueryNode, t_QueryNode, ::java::lang::Object, QueryNode, abstract_init, 0, 0, t_QueryNode__fields_, 0, 0);

              void t_QueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(QueryNode), module, "QueryNode", 0);
              }

              void t_QueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(QueryNode).tp_dict, "class_", make_descriptor(QueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(QueryNode).tp_dict, "wrapfn_", make_descriptor(t_QueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(QueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_QueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, QueryNode::initializeClass, 1)))
                  return NULL;
                return t_QueryNode::wrap_Object(QueryNode(((t_QueryNode *) arg)->object.this$));
              }
              static PyObject *t_QueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, QueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_QueryNode_add(t_QueryNode *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    QueryNode a0((jobject) NULL);

                    if (!parseArgs(args, "k", QueryNode::initializeClass, &a0))
                    {
                      OBJ_CALL(self->object.add(a0));
                      Py_RETURN_NONE;
                    }
                  }
                  {
                    ::java::util::List a0((jobject) NULL);
                    PyTypeObject **p0;

                    if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
                    {
                      OBJ_CALL(self->object.add(a0));
                      Py_RETURN_NONE;
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "add", args);
                return NULL;
              }

              static PyObject *t_QueryNode_cloneTree(t_QueryNode *self)
              {
                QueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.cloneTree());
                return t_QueryNode::wrap_Object(result);
              }

              static PyObject *t_QueryNode_containsTag(t_QueryNode *self, PyObject *arg)
              {
                ::java::lang::String a0((jobject) NULL);
                jboolean result;

                if (!parseArg(arg, "s", &a0))
                {
                  OBJ_CALL(result = self->object.containsTag(a0));
                  Py_RETURN_BOOL(result);
                }

                PyErr_SetArgsError((PyObject *) self, "containsTag", arg);
                return NULL;
              }

              static PyObject *t_QueryNode_getChildren(t_QueryNode *self)
              {
                ::java::util::List result((jobject) NULL);
                OBJ_CALL(result = self->object.getChildren());
                return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::queryparser::flexible::core::nodes::PY_TYPE(QueryNode));
              }

              static PyObject *t_QueryNode_getParent(t_QueryNode *self)
              {
                QueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.getParent());
                return t_QueryNode::wrap_Object(result);
              }

              static PyObject *t_QueryNode_getTag(t_QueryNode *self, PyObject *arg)
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::Object result((jobject) NULL);

                if (!parseArg(arg, "s", &a0))
                {
                  OBJ_CALL(result = self->object.getTag(a0));
                  return ::java::lang::t_Object::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "getTag", arg);
                return NULL;
              }

              static PyObject *t_QueryNode_getTagMap(t_QueryNode *self)
              {
                ::java::util::Map result((jobject) NULL);
                OBJ_CALL(result = self->object.getTagMap());
                return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(Object));
              }

              static PyObject *t_QueryNode_isLeaf(t_QueryNode *self)
              {
                jboolean result;
                OBJ_CALL(result = self->object.isLeaf());
                Py_RETURN_BOOL(result);
              }

              static PyObject *t_QueryNode_removeFromParent(t_QueryNode *self)
              {
                OBJ_CALL(self->object.removeFromParent());
                Py_RETURN_NONE;
              }

              static PyObject *t_QueryNode_set(t_QueryNode *self, PyObject *arg)
              {
                ::java::util::List a0((jobject) NULL);
                PyTypeObject **p0;

                if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
                {
                  OBJ_CALL(self->object.set(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "set", arg);
                return NULL;
              }

              static PyObject *t_QueryNode_setTag(t_QueryNode *self, PyObject *args)
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::Object a1((jobject) NULL);

                if (!parseArgs(args, "so", &a0, &a1))
                {
                  OBJ_CALL(self->object.setTag(a0, a1));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setTag", args);
                return NULL;
              }

              static PyObject *t_QueryNode_toQueryString(t_QueryNode *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "toQueryString", arg);
                return NULL;
              }

              static PyObject *t_QueryNode_toString(t_QueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(QueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_QueryNode_unsetTag(t_QueryNode *self, PyObject *arg)
              {
                ::java::lang::String a0((jobject) NULL);

                if (!parseArg(arg, "s", &a0))
                {
                  OBJ_CALL(self->object.unsetTag(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "unsetTag", arg);
                return NULL;
              }

              static PyObject *t_QueryNode_get__children(t_QueryNode *self, void *data)
              {
                ::java::util::List value((jobject) NULL);
                OBJ_CALL(value = self->object.getChildren());
                return ::java::util::t_List::wrap_Object(value);
              }

              static PyObject *t_QueryNode_get__leaf(t_QueryNode *self, void *data)
              {
                jboolean value;
                OBJ_CALL(value = self->object.isLeaf());
                Py_RETURN_BOOL(value);
              }

              static PyObject *t_QueryNode_get__parent(t_QueryNode *self, void *data)
              {
                QueryNode value((jobject) NULL);
                OBJ_CALL(value = self->object.getParent());
                return t_QueryNode::wrap_Object(value);
              }

              static PyObject *t_QueryNode_get__tagMap(t_QueryNode *self, void *data)
              {
                ::java::util::Map value((jobject) NULL);
                OBJ_CALL(value = self->object.getTagMap());
                return ::java::util::t_Map::wrap_Object(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ValueQueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *FieldValuePairQueryNode::class$ = NULL;
              jmethodID *FieldValuePairQueryNode::mids$ = NULL;
              bool FieldValuePairQueryNode::live$ = false;

              jclass FieldValuePairQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_FieldValuePairQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FieldValuePairQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FieldValuePairQueryNode_of_(t_FieldValuePairQueryNode *self, PyObject *args);
              static PyObject *t_FieldValuePairQueryNode_get__parameters_(t_FieldValuePairQueryNode *self, void *data);
              static PyGetSetDef t_FieldValuePairQueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_FieldValuePairQueryNode, parameters_),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_FieldValuePairQueryNode__methods_[] = {
                DECLARE_METHOD(t_FieldValuePairQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldValuePairQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldValuePairQueryNode, of_, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(FieldValuePairQueryNode, t_FieldValuePairQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::FieldableNode, FieldValuePairQueryNode, abstract_init, 0, 0, t_FieldValuePairQueryNode__fields_, 0, 0);
              PyObject *t_FieldValuePairQueryNode::wrap_Object(const FieldValuePairQueryNode& object, PyTypeObject *p0)
              {
                PyObject *obj = t_FieldValuePairQueryNode::wrap_Object(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_FieldValuePairQueryNode *self = (t_FieldValuePairQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              PyObject *t_FieldValuePairQueryNode::wrap_jobject(const jobject& object, PyTypeObject *p0)
              {
                PyObject *obj = t_FieldValuePairQueryNode::wrap_jobject(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_FieldValuePairQueryNode *self = (t_FieldValuePairQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              void t_FieldValuePairQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(FieldValuePairQueryNode), module, "FieldValuePairQueryNode", 0);
              }

              void t_FieldValuePairQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(FieldValuePairQueryNode).tp_dict, "class_", make_descriptor(FieldValuePairQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(FieldValuePairQueryNode).tp_dict, "wrapfn_", make_descriptor(t_FieldValuePairQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(FieldValuePairQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FieldValuePairQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FieldValuePairQueryNode::initializeClass, 1)))
                  return NULL;
                return t_FieldValuePairQueryNode::wrap_Object(FieldValuePairQueryNode(((t_FieldValuePairQueryNode *) arg)->object.this$));
              }
              static PyObject *t_FieldValuePairQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FieldValuePairQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_FieldValuePairQueryNode_of_(t_FieldValuePairQueryNode *self, PyObject *args)
              {
                if (!parseArg(args, "T", 1, &(self->parameters)))
                  Py_RETURN_SELF;
                return PyErr_SetArgsError((PyObject *) self, "of_", args);
              }
              static PyObject *t_FieldValuePairQueryNode_get__parameters_(t_FieldValuePairQueryNode *self, void *data)
              {
                return typeParameters(self->parameters, sizeof(self->parameters));
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/TwoPhaseCommitTool$CommitFailException.h"
#include "org/apache/lucene/index/TwoPhaseCommit.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *TwoPhaseCommitTool$CommitFailException::class$ = NULL;
        jmethodID *TwoPhaseCommitTool$CommitFailException::mids$ = NULL;
        bool TwoPhaseCommitTool$CommitFailException::live$ = false;

        jclass TwoPhaseCommitTool$CommitFailException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/TwoPhaseCommitTool$CommitFailException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_52a0ac67] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;Lorg/apache/lucene/index/TwoPhaseCommit;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TwoPhaseCommitTool$CommitFailException::TwoPhaseCommitTool$CommitFailException(const ::java::lang::Throwable & a0, const ::org::apache::lucene::index::TwoPhaseCommit & a1) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_52a0ac67, a0.this$, a1.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_TwoPhaseCommitTool$CommitFailException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TwoPhaseCommitTool$CommitFailException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TwoPhaseCommitTool$CommitFailException_init_(t_TwoPhaseCommitTool$CommitFailException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_TwoPhaseCommitTool$CommitFailException__methods_[] = {
          DECLARE_METHOD(t_TwoPhaseCommitTool$CommitFailException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TwoPhaseCommitTool$CommitFailException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TwoPhaseCommitTool$CommitFailException, t_TwoPhaseCommitTool$CommitFailException, ::java::io::IOException, TwoPhaseCommitTool$CommitFailException, t_TwoPhaseCommitTool$CommitFailException_init_, 0, 0, 0, 0, 0);

        void t_TwoPhaseCommitTool$CommitFailException::install(PyObject *module)
        {
          installType(&PY_TYPE(TwoPhaseCommitTool$CommitFailException), module, "TwoPhaseCommitTool$CommitFailException", 0);
        }

        void t_TwoPhaseCommitTool$CommitFailException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TwoPhaseCommitTool$CommitFailException).tp_dict, "class_", make_descriptor(TwoPhaseCommitTool$CommitFailException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TwoPhaseCommitTool$CommitFailException).tp_dict, "wrapfn_", make_descriptor(t_TwoPhaseCommitTool$CommitFailException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TwoPhaseCommitTool$CommitFailException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TwoPhaseCommitTool$CommitFailException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TwoPhaseCommitTool$CommitFailException::initializeClass, 1)))
            return NULL;
          return t_TwoPhaseCommitTool$CommitFailException::wrap_Object(TwoPhaseCommitTool$CommitFailException(((t_TwoPhaseCommitTool$CommitFailException *) arg)->object.this$));
        }
        static PyObject *t_TwoPhaseCommitTool$CommitFailException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TwoPhaseCommitTool$CommitFailException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TwoPhaseCommitTool$CommitFailException_init_(t_TwoPhaseCommitTool$CommitFailException *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::Throwable a0((jobject) NULL);
          ::org::apache::lucene::index::TwoPhaseCommit a1((jobject) NULL);
          TwoPhaseCommitTool$CommitFailException object((jobject) NULL);

          if (!parseArgs(args, "kk", ::java::lang::Throwable::initializeClass, ::org::apache::lucene::index::TwoPhaseCommit::initializeClass, &a0, &a1))
          {
            INT_CALL(object = TwoPhaseCommitTool$CommitFailException(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/RollingBuffer.h"
#include "org/apache/lucene/util/RollingBuffer$Resettable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *RollingBuffer::class$ = NULL;
        jmethodID *RollingBuffer::mids$ = NULL;
        bool RollingBuffer::live$ = false;

        jclass RollingBuffer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/RollingBuffer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_freeBefore_39c7bd3c] = env->getMethodID(cls, "freeBefore", "(I)V");
            mids$[mid_get_730fb8ff] = env->getMethodID(cls, "get", "(I)Lorg/apache/lucene/util/RollingBuffer$Resettable;");
            mids$[mid_getMaxPos_54c6a179] = env->getMethodID(cls, "getMaxPos", "()I");
            mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
            mids$[mid_newInstance_a57a1151] = env->getMethodID(cls, "newInstance", "()Lorg/apache/lucene/util/RollingBuffer$Resettable;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RollingBuffer::RollingBuffer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void RollingBuffer::freeBefore(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_freeBefore_39c7bd3c], a0);
        }

        ::org::apache::lucene::util::RollingBuffer$Resettable RollingBuffer::get(jint a0) const
        {
          return ::org::apache::lucene::util::RollingBuffer$Resettable(env->callObjectMethod(this$, mids$[mid_get_730fb8ff], a0));
        }

        jint RollingBuffer::getMaxPos() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxPos_54c6a179]);
        }

        void RollingBuffer::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_RollingBuffer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RollingBuffer_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RollingBuffer_of_(t_RollingBuffer *self, PyObject *args);
        static int t_RollingBuffer_init_(t_RollingBuffer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RollingBuffer_freeBefore(t_RollingBuffer *self, PyObject *arg);
        static PyObject *t_RollingBuffer_get(t_RollingBuffer *self, PyObject *arg);
        static PyObject *t_RollingBuffer_getMaxPos(t_RollingBuffer *self);
        static PyObject *t_RollingBuffer_reset(t_RollingBuffer *self);
        static PyObject *t_RollingBuffer_get__maxPos(t_RollingBuffer *self, void *data);
        static PyObject *t_RollingBuffer_get__parameters_(t_RollingBuffer *self, void *data);
        static PyGetSetDef t_RollingBuffer__fields_[] = {
          DECLARE_GET_FIELD(t_RollingBuffer, maxPos),
          DECLARE_GET_FIELD(t_RollingBuffer, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RollingBuffer__methods_[] = {
          DECLARE_METHOD(t_RollingBuffer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RollingBuffer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RollingBuffer, of_, METH_VARARGS),
          DECLARE_METHOD(t_RollingBuffer, freeBefore, METH_O),
          DECLARE_METHOD(t_RollingBuffer, get, METH_O),
          DECLARE_METHOD(t_RollingBuffer, getMaxPos, METH_NOARGS),
          DECLARE_METHOD(t_RollingBuffer, reset, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RollingBuffer, t_RollingBuffer, ::java::lang::Object, RollingBuffer, t_RollingBuffer_init_, 0, 0, t_RollingBuffer__fields_, 0, 0);
        PyObject *t_RollingBuffer::wrap_Object(const RollingBuffer& object, PyTypeObject *p0)
        {
          PyObject *obj = t_RollingBuffer::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_RollingBuffer *self = (t_RollingBuffer *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_RollingBuffer::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_RollingBuffer::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_RollingBuffer *self = (t_RollingBuffer *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_RollingBuffer::install(PyObject *module)
        {
          installType(&PY_TYPE(RollingBuffer), module, "RollingBuffer", 0);
          PyDict_SetItemString(PY_TYPE(RollingBuffer).tp_dict, "Resettable", make_descriptor(&PY_TYPE(RollingBuffer$Resettable)));
        }

        void t_RollingBuffer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RollingBuffer).tp_dict, "class_", make_descriptor(RollingBuffer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RollingBuffer).tp_dict, "wrapfn_", make_descriptor(t_RollingBuffer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RollingBuffer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RollingBuffer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RollingBuffer::initializeClass, 1)))
            return NULL;
          return t_RollingBuffer::wrap_Object(RollingBuffer(((t_RollingBuffer *) arg)->object.this$));
        }
        static PyObject *t_RollingBuffer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RollingBuffer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_RollingBuffer_of_(t_RollingBuffer *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_RollingBuffer_init_(t_RollingBuffer *self, PyObject *args, PyObject *kwds)
        {
          RollingBuffer object((jobject) NULL);

          INT_CALL(object = RollingBuffer());
          self->object = object;

          return 0;
        }

        static PyObject *t_RollingBuffer_freeBefore(t_RollingBuffer *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.freeBefore(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "freeBefore", arg);
          return NULL;
        }

        static PyObject *t_RollingBuffer_get(t_RollingBuffer *self, PyObject *arg)
        {
          jint a0;
          ::org::apache::lucene::util::RollingBuffer$Resettable result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::org::apache::lucene::util::t_RollingBuffer$Resettable::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_RollingBuffer_getMaxPos(t_RollingBuffer *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxPos());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_RollingBuffer_reset(t_RollingBuffer *self)
        {
          OBJ_CALL(self->object.reset());
          Py_RETURN_NONE;
        }
        static PyObject *t_RollingBuffer_get__parameters_(t_RollingBuffer *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_RollingBuffer_get__maxPos(t_RollingBuffer *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxPos());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/Lucene43EdgeNGramTokenizer$Side.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *Lucene43EdgeNGramTokenizer$Side::class$ = NULL;
          jmethodID *Lucene43EdgeNGramTokenizer$Side::mids$ = NULL;
          bool Lucene43EdgeNGramTokenizer$Side::live$ = false;
          Lucene43EdgeNGramTokenizer$Side *Lucene43EdgeNGramTokenizer$Side::BACK = NULL;
          Lucene43EdgeNGramTokenizer$Side *Lucene43EdgeNGramTokenizer$Side::FRONT = NULL;

          jclass Lucene43EdgeNGramTokenizer$Side::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/Lucene43EdgeNGramTokenizer$Side");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getLabel_14c7b5c5] = env->getMethodID(cls, "getLabel", "()Ljava/lang/String;");
              mids$[mid_getSide_2ac44635] = env->getStaticMethodID(cls, "getSide", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/ngram/Lucene43EdgeNGramTokenizer$Side;");
              mids$[mid_valueOf_2ac44635] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/ngram/Lucene43EdgeNGramTokenizer$Side;");
              mids$[mid_values_0033eb83] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/analysis/ngram/Lucene43EdgeNGramTokenizer$Side;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              BACK = new Lucene43EdgeNGramTokenizer$Side(env->getStaticObjectField(cls, "BACK", "Lorg/apache/lucene/analysis/ngram/Lucene43EdgeNGramTokenizer$Side;"));
              FRONT = new Lucene43EdgeNGramTokenizer$Side(env->getStaticObjectField(cls, "FRONT", "Lorg/apache/lucene/analysis/ngram/Lucene43EdgeNGramTokenizer$Side;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::String Lucene43EdgeNGramTokenizer$Side::getLabel() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLabel_14c7b5c5]));
          }

          Lucene43EdgeNGramTokenizer$Side Lucene43EdgeNGramTokenizer$Side::getSide(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return Lucene43EdgeNGramTokenizer$Side(env->callStaticObjectMethod(cls, mids$[mid_getSide_2ac44635], a0.this$));
          }

          Lucene43EdgeNGramTokenizer$Side Lucene43EdgeNGramTokenizer$Side::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return Lucene43EdgeNGramTokenizer$Side(env->callStaticObjectMethod(cls, mids$[mid_valueOf_2ac44635], a0.this$));
          }

          JArray< Lucene43EdgeNGramTokenizer$Side > Lucene43EdgeNGramTokenizer$Side::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< Lucene43EdgeNGramTokenizer$Side >(env->callStaticObjectMethod(cls, mids$[mid_values_0033eb83]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_of_(t_Lucene43EdgeNGramTokenizer$Side *self, PyObject *args);
          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_getLabel(t_Lucene43EdgeNGramTokenizer$Side *self);
          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_getSide(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_values(PyTypeObject *type);
          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_get__label(t_Lucene43EdgeNGramTokenizer$Side *self, void *data);
          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_get__parameters_(t_Lucene43EdgeNGramTokenizer$Side *self, void *data);
          static PyGetSetDef t_Lucene43EdgeNGramTokenizer$Side__fields_[] = {
            DECLARE_GET_FIELD(t_Lucene43EdgeNGramTokenizer$Side, label),
            DECLARE_GET_FIELD(t_Lucene43EdgeNGramTokenizer$Side, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lucene43EdgeNGramTokenizer$Side__methods_[] = {
            DECLARE_METHOD(t_Lucene43EdgeNGramTokenizer$Side, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene43EdgeNGramTokenizer$Side, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene43EdgeNGramTokenizer$Side, of_, METH_VARARGS),
            DECLARE_METHOD(t_Lucene43EdgeNGramTokenizer$Side, getLabel, METH_NOARGS),
            DECLARE_METHOD(t_Lucene43EdgeNGramTokenizer$Side, getSide, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene43EdgeNGramTokenizer$Side, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Lucene43EdgeNGramTokenizer$Side, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene43EdgeNGramTokenizer$Side, t_Lucene43EdgeNGramTokenizer$Side, ::java::lang::Enum, Lucene43EdgeNGramTokenizer$Side, abstract_init, 0, 0, t_Lucene43EdgeNGramTokenizer$Side__fields_, 0, 0);
          PyObject *t_Lucene43EdgeNGramTokenizer$Side::wrap_Object(const Lucene43EdgeNGramTokenizer$Side& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Lucene43EdgeNGramTokenizer$Side::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Lucene43EdgeNGramTokenizer$Side *self = (t_Lucene43EdgeNGramTokenizer$Side *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_Lucene43EdgeNGramTokenizer$Side::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Lucene43EdgeNGramTokenizer$Side::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Lucene43EdgeNGramTokenizer$Side *self = (t_Lucene43EdgeNGramTokenizer$Side *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_Lucene43EdgeNGramTokenizer$Side::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene43EdgeNGramTokenizer$Side), module, "Lucene43EdgeNGramTokenizer$Side", 0);
          }

          void t_Lucene43EdgeNGramTokenizer$Side::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene43EdgeNGramTokenizer$Side).tp_dict, "class_", make_descriptor(Lucene43EdgeNGramTokenizer$Side::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene43EdgeNGramTokenizer$Side).tp_dict, "wrapfn_", make_descriptor(t_Lucene43EdgeNGramTokenizer$Side::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene43EdgeNGramTokenizer$Side).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene43EdgeNGramTokenizer$Side::initializeClass);
            PyDict_SetItemString(PY_TYPE(Lucene43EdgeNGramTokenizer$Side).tp_dict, "BACK", make_descriptor(t_Lucene43EdgeNGramTokenizer$Side::wrap_Object(*Lucene43EdgeNGramTokenizer$Side::BACK)));
            PyDict_SetItemString(PY_TYPE(Lucene43EdgeNGramTokenizer$Side).tp_dict, "FRONT", make_descriptor(t_Lucene43EdgeNGramTokenizer$Side::wrap_Object(*Lucene43EdgeNGramTokenizer$Side::FRONT)));
          }

          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene43EdgeNGramTokenizer$Side::initializeClass, 1)))
              return NULL;
            return t_Lucene43EdgeNGramTokenizer$Side::wrap_Object(Lucene43EdgeNGramTokenizer$Side(((t_Lucene43EdgeNGramTokenizer$Side *) arg)->object.this$));
          }
          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene43EdgeNGramTokenizer$Side::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_of_(t_Lucene43EdgeNGramTokenizer$Side *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_getLabel(t_Lucene43EdgeNGramTokenizer$Side *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getLabel());
            return j2p(result);
          }

          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_getSide(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            Lucene43EdgeNGramTokenizer$Side result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::ngram::Lucene43EdgeNGramTokenizer$Side::getSide(a0));
              return t_Lucene43EdgeNGramTokenizer$Side::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getSide", arg);
            return NULL;
          }

          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            Lucene43EdgeNGramTokenizer$Side result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::ngram::Lucene43EdgeNGramTokenizer$Side::valueOf(a0));
              return t_Lucene43EdgeNGramTokenizer$Side::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_values(PyTypeObject *type)
          {
            JArray< Lucene43EdgeNGramTokenizer$Side > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::ngram::Lucene43EdgeNGramTokenizer$Side::values());
            return JArray<jobject>(result.this$).wrap(t_Lucene43EdgeNGramTokenizer$Side::wrap_jobject);
          }
          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_get__parameters_(t_Lucene43EdgeNGramTokenizer$Side *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_get__label(t_Lucene43EdgeNGramTokenizer$Side *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getLabel());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/DocValuesOrdinalsReader.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/taxonomy/OrdinalsReader$OrdinalsSegmentReader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *DocValuesOrdinalsReader::class$ = NULL;
          jmethodID *DocValuesOrdinalsReader::mids$ = NULL;
          bool DocValuesOrdinalsReader::live$ = false;

          jclass DocValuesOrdinalsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/DocValuesOrdinalsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
              mids$[mid_getIndexFieldName_14c7b5c5] = env->getMethodID(cls, "getIndexFieldName", "()Ljava/lang/String;");
              mids$[mid_getReader_7c7f912a] = env->getMethodID(cls, "getReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/facet/taxonomy/OrdinalsReader$OrdinalsSegmentReader;");
              mids$[mid_decode_079b7c7a] = env->getMethodID(cls, "decode", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/IntsRef;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DocValuesOrdinalsReader::DocValuesOrdinalsReader() : ::org::apache::lucene::facet::taxonomy::OrdinalsReader(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          DocValuesOrdinalsReader::DocValuesOrdinalsReader(const ::java::lang::String & a0) : ::org::apache::lucene::facet::taxonomy::OrdinalsReader(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

          ::java::lang::String DocValuesOrdinalsReader::getIndexFieldName() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getIndexFieldName_14c7b5c5]));
          }

          ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader DocValuesOrdinalsReader::getReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
          {
            return ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader(env->callObjectMethod(this$, mids$[mid_getReader_7c7f912a], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_DocValuesOrdinalsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DocValuesOrdinalsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DocValuesOrdinalsReader_init_(t_DocValuesOrdinalsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DocValuesOrdinalsReader_getIndexFieldName(t_DocValuesOrdinalsReader *self, PyObject *args);
          static PyObject *t_DocValuesOrdinalsReader_getReader(t_DocValuesOrdinalsReader *self, PyObject *args);
          static PyObject *t_DocValuesOrdinalsReader_get__indexFieldName(t_DocValuesOrdinalsReader *self, void *data);
          static PyGetSetDef t_DocValuesOrdinalsReader__fields_[] = {
            DECLARE_GET_FIELD(t_DocValuesOrdinalsReader, indexFieldName),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DocValuesOrdinalsReader__methods_[] = {
            DECLARE_METHOD(t_DocValuesOrdinalsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DocValuesOrdinalsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DocValuesOrdinalsReader, getIndexFieldName, METH_VARARGS),
            DECLARE_METHOD(t_DocValuesOrdinalsReader, getReader, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DocValuesOrdinalsReader, t_DocValuesOrdinalsReader, ::org::apache::lucene::facet::taxonomy::OrdinalsReader, DocValuesOrdinalsReader, t_DocValuesOrdinalsReader_init_, 0, 0, t_DocValuesOrdinalsReader__fields_, 0, 0);

          void t_DocValuesOrdinalsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(DocValuesOrdinalsReader), module, "DocValuesOrdinalsReader", 0);
          }

          void t_DocValuesOrdinalsReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DocValuesOrdinalsReader).tp_dict, "class_", make_descriptor(DocValuesOrdinalsReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DocValuesOrdinalsReader).tp_dict, "wrapfn_", make_descriptor(t_DocValuesOrdinalsReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DocValuesOrdinalsReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DocValuesOrdinalsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DocValuesOrdinalsReader::initializeClass, 1)))
              return NULL;
            return t_DocValuesOrdinalsReader::wrap_Object(DocValuesOrdinalsReader(((t_DocValuesOrdinalsReader *) arg)->object.this$));
          }
          static PyObject *t_DocValuesOrdinalsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DocValuesOrdinalsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DocValuesOrdinalsReader_init_(t_DocValuesOrdinalsReader *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                DocValuesOrdinalsReader object((jobject) NULL);

                INT_CALL(object = DocValuesOrdinalsReader());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                DocValuesOrdinalsReader object((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  INT_CALL(object = DocValuesOrdinalsReader(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DocValuesOrdinalsReader_getIndexFieldName(t_DocValuesOrdinalsReader *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getIndexFieldName());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(DocValuesOrdinalsReader), (PyObject *) self, "getIndexFieldName", args, 2);
          }

          static PyObject *t_DocValuesOrdinalsReader_getReader(t_DocValuesOrdinalsReader *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.getReader(a0));
              return ::org::apache::lucene::facet::taxonomy::t_OrdinalsReader$OrdinalsSegmentReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(DocValuesOrdinalsReader), (PyObject *) self, "getReader", args, 2);
          }

          static PyObject *t_DocValuesOrdinalsReader_get__indexFieldName(t_DocValuesOrdinalsReader *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getIndexFieldName());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/th/ThaiAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace th {

          ::java::lang::Class *ThaiAnalyzer::class$ = NULL;
          jmethodID *ThaiAnalyzer::mids$ = NULL;
          bool ThaiAnalyzer::live$ = false;
          ::java::lang::String *ThaiAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass ThaiAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/th/ThaiAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ThaiAnalyzer::ThaiAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          ThaiAnalyzer::ThaiAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet ThaiAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace th {
          static PyObject *t_ThaiAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ThaiAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ThaiAnalyzer_init_(t_ThaiAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ThaiAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_ThaiAnalyzer_get__defaultStopSet(t_ThaiAnalyzer *self, void *data);
          static PyGetSetDef t_ThaiAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_ThaiAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ThaiAnalyzer__methods_[] = {
            DECLARE_METHOD(t_ThaiAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ThaiAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ThaiAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ThaiAnalyzer, t_ThaiAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, ThaiAnalyzer, t_ThaiAnalyzer_init_, 0, 0, t_ThaiAnalyzer__fields_, 0, 0);

          void t_ThaiAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(ThaiAnalyzer), module, "ThaiAnalyzer", 0);
          }

          void t_ThaiAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ThaiAnalyzer).tp_dict, "class_", make_descriptor(ThaiAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ThaiAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_ThaiAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ThaiAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ThaiAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(ThaiAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*ThaiAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_ThaiAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ThaiAnalyzer::initializeClass, 1)))
              return NULL;
            return t_ThaiAnalyzer::wrap_Object(ThaiAnalyzer(((t_ThaiAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_ThaiAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ThaiAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ThaiAnalyzer_init_(t_ThaiAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ThaiAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = ThaiAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ThaiAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = ThaiAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ThaiAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::th::ThaiAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_ThaiAnalyzer_get__defaultStopSet(t_ThaiAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/synonym/SynonymFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {

          ::java::lang::Class *SynonymFilterFactory::class$ = NULL;
          jmethodID *SynonymFilterFactory::mids$ = NULL;
          bool SynonymFilterFactory::live$ = false;

          jclass SynonymFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/synonym/SynonymFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SynonymFilterFactory::SynonymFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream SynonymFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          void SynonymFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {
          static PyObject *t_SynonymFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SynonymFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SynonymFilterFactory_init_(t_SynonymFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SynonymFilterFactory_create(t_SynonymFilterFactory *self, PyObject *args);
          static PyObject *t_SynonymFilterFactory_inform(t_SynonymFilterFactory *self, PyObject *arg);

          static PyMethodDef t_SynonymFilterFactory__methods_[] = {
            DECLARE_METHOD(t_SynonymFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SynonymFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SynonymFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_SynonymFilterFactory, inform, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SynonymFilterFactory, t_SynonymFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, SynonymFilterFactory, t_SynonymFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_SynonymFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(SynonymFilterFactory), module, "SynonymFilterFactory", 0);
          }

          void t_SynonymFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SynonymFilterFactory).tp_dict, "class_", make_descriptor(SynonymFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SynonymFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_SynonymFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SynonymFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SynonymFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SynonymFilterFactory::initializeClass, 1)))
              return NULL;
            return t_SynonymFilterFactory::wrap_Object(SynonymFilterFactory(((t_SynonymFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_SynonymFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SynonymFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SynonymFilterFactory_init_(t_SynonymFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            SynonymFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = SynonymFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SynonymFilterFactory_create(t_SynonymFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SynonymFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_SynonymFilterFactory_inform(t_SynonymFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryTreeBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *StandardQueryTreeBuilder::class$ = NULL;
              jmethodID *StandardQueryTreeBuilder::mids$ = NULL;
              bool StandardQueryTreeBuilder::live$ = false;

              jclass StandardQueryTreeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryTreeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_7f6ce179] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/Query;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              StandardQueryTreeBuilder::StandardQueryTreeBuilder() : ::org::apache::lucene::queryparser::flexible::core::builders::QueryTreeBuilder(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::Query StandardQueryTreeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_build_7f6ce179], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_StandardQueryTreeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardQueryTreeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_StandardQueryTreeBuilder_init_(t_StandardQueryTreeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_StandardQueryTreeBuilder_build(t_StandardQueryTreeBuilder *self, PyObject *args);

              static PyMethodDef t_StandardQueryTreeBuilder__methods_[] = {
                DECLARE_METHOD(t_StandardQueryTreeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardQueryTreeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardQueryTreeBuilder, build, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(StandardQueryTreeBuilder, t_StandardQueryTreeBuilder, ::org::apache::lucene::queryparser::flexible::core::builders::QueryTreeBuilder, StandardQueryTreeBuilder, t_StandardQueryTreeBuilder_init_, 0, 0, 0, 0, 0);

              void t_StandardQueryTreeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(StandardQueryTreeBuilder), module, "StandardQueryTreeBuilder", 0);
              }

              void t_StandardQueryTreeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(StandardQueryTreeBuilder).tp_dict, "class_", make_descriptor(StandardQueryTreeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(StandardQueryTreeBuilder).tp_dict, "wrapfn_", make_descriptor(t_StandardQueryTreeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(StandardQueryTreeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_StandardQueryTreeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StandardQueryTreeBuilder::initializeClass, 1)))
                  return NULL;
                return t_StandardQueryTreeBuilder::wrap_Object(StandardQueryTreeBuilder(((t_StandardQueryTreeBuilder *) arg)->object.this$));
              }
              static PyObject *t_StandardQueryTreeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StandardQueryTreeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_StandardQueryTreeBuilder_init_(t_StandardQueryTreeBuilder *self, PyObject *args, PyObject *kwds)
              {
                StandardQueryTreeBuilder object((jobject) NULL);

                INT_CALL(object = StandardQueryTreeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_StandardQueryTreeBuilder_build(t_StandardQueryTreeBuilder *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(StandardQueryTreeBuilder), (PyObject *) self, "build", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/TreeSet.h"
#include "java/util/Comparator.h"
#include "java/util/Collection.h"
#include "java/util/NavigableSet.h"
#include "java/lang/Cloneable.h"
#include "java/util/Iterator.h"
#include "java/lang/Class.h"
#include "java/io/Serializable.h"
#include "java/lang/Object.h"
#include "java/util/SortedSet.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *TreeSet::class$ = NULL;
    jmethodID *TreeSet::mids$ = NULL;
    bool TreeSet::live$ = false;

    jclass TreeSet::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/TreeSet");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_6ffdd545] = env->getMethodID(cls, "<init>", "(Ljava/util/Comparator;)V");
        mids$[mid_init$_0c3f2ecf] = env->getMethodID(cls, "<init>", "(Ljava/util/SortedSet;)V");
        mids$[mid_init$_9bfb370d] = env->getMethodID(cls, "<init>", "(Ljava/util/Collection;)V");
        mids$[mid_add_290588e2] = env->getMethodID(cls, "add", "(Ljava/lang/Object;)Z");
        mids$[mid_addAll_9bfb3701] = env->getMethodID(cls, "addAll", "(Ljava/util/Collection;)Z");
        mids$[mid_ceiling_a932a95f] = env->getMethodID(cls, "ceiling", "(Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
        mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");
        mids$[mid_comparator_5a7ff2fc] = env->getMethodID(cls, "comparator", "()Ljava/util/Comparator;");
        mids$[mid_contains_290588e2] = env->getMethodID(cls, "contains", "(Ljava/lang/Object;)Z");
        mids$[mid_descendingIterator_40858c90] = env->getMethodID(cls, "descendingIterator", "()Ljava/util/Iterator;");
        mids$[mid_descendingSet_1d81e42d] = env->getMethodID(cls, "descendingSet", "()Ljava/util/NavigableSet;");
        mids$[mid_first_846352c3] = env->getMethodID(cls, "first", "()Ljava/lang/Object;");
        mids$[mid_floor_a932a95f] = env->getMethodID(cls, "floor", "(Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_headSet_39f27c22] = env->getMethodID(cls, "headSet", "(Ljava/lang/Object;)Ljava/util/SortedSet;");
        mids$[mid_headSet_a72e541e] = env->getMethodID(cls, "headSet", "(Ljava/lang/Object;Z)Ljava/util/NavigableSet;");
        mids$[mid_higher_a932a95f] = env->getMethodID(cls, "higher", "(Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
        mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
        mids$[mid_last_846352c3] = env->getMethodID(cls, "last", "()Ljava/lang/Object;");
        mids$[mid_lower_a932a95f] = env->getMethodID(cls, "lower", "(Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_pollFirst_846352c3] = env->getMethodID(cls, "pollFirst", "()Ljava/lang/Object;");
        mids$[mid_pollLast_846352c3] = env->getMethodID(cls, "pollLast", "()Ljava/lang/Object;");
        mids$[mid_remove_290588e2] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Z");
        mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
        mids$[mid_subSet_cf2accb6] = env->getMethodID(cls, "subSet", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedSet;");
        mids$[mid_subSet_34a398b7] = env->getMethodID(cls, "subSet", "(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/NavigableSet;");
        mids$[mid_tailSet_39f27c22] = env->getMethodID(cls, "tailSet", "(Ljava/lang/Object;)Ljava/util/SortedSet;");
        mids$[mid_tailSet_a72e541e] = env->getMethodID(cls, "tailSet", "(Ljava/lang/Object;Z)Ljava/util/NavigableSet;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    TreeSet::TreeSet() : ::java::util::AbstractSet(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    TreeSet::TreeSet(const ::java::util::Comparator & a0) : ::java::util::AbstractSet(env->newObject(initializeClass, &mids$, mid_init$_6ffdd545, a0.this$)) {}

    TreeSet::TreeSet(const ::java::util::SortedSet & a0) : ::java::util::AbstractSet(env->newObject(initializeClass, &mids$, mid_init$_0c3f2ecf, a0.this$)) {}

    TreeSet::TreeSet(const ::java::util::Collection & a0) : ::java::util::AbstractSet(env->newObject(initializeClass, &mids$, mid_init$_9bfb370d, a0.this$)) {}

    jboolean TreeSet::add(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_add_290588e2], a0.this$);
    }

    jboolean TreeSet::addAll(const ::java::util::Collection & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_addAll_9bfb3701], a0.this$);
    }

    ::java::lang::Object TreeSet::ceiling(const ::java::lang::Object & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_ceiling_a932a95f], a0.this$));
    }

    void TreeSet::clear() const
    {
      env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
    }

    ::java::lang::Object TreeSet::clone() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_clone_846352c3]));
    }

    ::java::util::Comparator TreeSet::comparator() const
    {
      return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_comparator_5a7ff2fc]));
    }

    jboolean TreeSet::contains(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_contains_290588e2], a0.this$);
    }

    ::java::util::Iterator TreeSet::descendingIterator() const
    {
      return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_descendingIterator_40858c90]));
    }

    ::java::util::NavigableSet TreeSet::descendingSet() const
    {
      return ::java::util::NavigableSet(env->callObjectMethod(this$, mids$[mid_descendingSet_1d81e42d]));
    }

    ::java::lang::Object TreeSet::first() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_first_846352c3]));
    }

    ::java::lang::Object TreeSet::floor(const ::java::lang::Object & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_floor_a932a95f], a0.this$));
    }

    ::java::util::SortedSet TreeSet::headSet(const ::java::lang::Object & a0) const
    {
      return ::java::util::SortedSet(env->callObjectMethod(this$, mids$[mid_headSet_39f27c22], a0.this$));
    }

    ::java::util::NavigableSet TreeSet::headSet(const ::java::lang::Object & a0, jboolean a1) const
    {
      return ::java::util::NavigableSet(env->callObjectMethod(this$, mids$[mid_headSet_a72e541e], a0.this$, a1));
    }

    ::java::lang::Object TreeSet::higher(const ::java::lang::Object & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_higher_a932a95f], a0.this$));
    }

    jboolean TreeSet::isEmpty() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isEmpty_54c6a16a]);
    }

    ::java::util::Iterator TreeSet::iterator() const
    {
      return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
    }

    ::java::lang::Object TreeSet::last() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_last_846352c3]));
    }

    ::java::lang::Object TreeSet::lower(const ::java::lang::Object & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_lower_a932a95f], a0.this$));
    }

    ::java::lang::Object TreeSet::pollFirst() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_pollFirst_846352c3]));
    }

    ::java::lang::Object TreeSet::pollLast() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_pollLast_846352c3]));
    }

    jboolean TreeSet::remove(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_remove_290588e2], a0.this$);
    }

    jint TreeSet::size() const
    {
      return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
    }

    ::java::util::SortedSet TreeSet::subSet(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
    {
      return ::java::util::SortedSet(env->callObjectMethod(this$, mids$[mid_subSet_cf2accb6], a0.this$, a1.this$));
    }

    ::java::util::NavigableSet TreeSet::subSet(const ::java::lang::Object & a0, jboolean a1, const ::java::lang::Object & a2, jboolean a3) const
    {
      return ::java::util::NavigableSet(env->callObjectMethod(this$, mids$[mid_subSet_34a398b7], a0.this$, a1, a2.this$, a3));
    }

    ::java::util::SortedSet TreeSet::tailSet(const ::java::lang::Object & a0) const
    {
      return ::java::util::SortedSet(env->callObjectMethod(this$, mids$[mid_tailSet_39f27c22], a0.this$));
    }

    ::java::util::NavigableSet TreeSet::tailSet(const ::java::lang::Object & a0, jboolean a1) const
    {
      return ::java::util::NavigableSet(env->callObjectMethod(this$, mids$[mid_tailSet_a72e541e], a0.this$, a1));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_TreeSet_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_TreeSet_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_TreeSet_of_(t_TreeSet *self, PyObject *args);
    static int t_TreeSet_init_(t_TreeSet *self, PyObject *args, PyObject *kwds);
    static PyObject *t_TreeSet_add(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_addAll(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_ceiling(t_TreeSet *self, PyObject *arg);
    static PyObject *t_TreeSet_clear(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_clone(t_TreeSet *self);
    static PyObject *t_TreeSet_comparator(t_TreeSet *self);
    static PyObject *t_TreeSet_contains(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_descendingIterator(t_TreeSet *self);
    static PyObject *t_TreeSet_descendingSet(t_TreeSet *self);
    static PyObject *t_TreeSet_first(t_TreeSet *self);
    static PyObject *t_TreeSet_floor(t_TreeSet *self, PyObject *arg);
    static PyObject *t_TreeSet_headSet(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_higher(t_TreeSet *self, PyObject *arg);
    static PyObject *t_TreeSet_isEmpty(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_iterator(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_last(t_TreeSet *self);
    static PyObject *t_TreeSet_lower(t_TreeSet *self, PyObject *arg);
    static PyObject *t_TreeSet_pollFirst(t_TreeSet *self);
    static PyObject *t_TreeSet_pollLast(t_TreeSet *self);
    static PyObject *t_TreeSet_remove(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_size(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_subSet(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_tailSet(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_get__empty(t_TreeSet *self, void *data);
    static PyObject *t_TreeSet_get__parameters_(t_TreeSet *self, void *data);
    static PyGetSetDef t_TreeSet__fields_[] = {
      DECLARE_GET_FIELD(t_TreeSet, empty),
      DECLARE_GET_FIELD(t_TreeSet, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_TreeSet__methods_[] = {
      DECLARE_METHOD(t_TreeSet, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_TreeSet, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_TreeSet, of_, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, add, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, addAll, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, ceiling, METH_O),
      DECLARE_METHOD(t_TreeSet, clear, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, clone, METH_NOARGS),
      DECLARE_METHOD(t_TreeSet, comparator, METH_NOARGS),
      DECLARE_METHOD(t_TreeSet, contains, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, descendingIterator, METH_NOARGS),
      DECLARE_METHOD(t_TreeSet, descendingSet, METH_NOARGS),
      DECLARE_METHOD(t_TreeSet, first, METH_NOARGS),
      DECLARE_METHOD(t_TreeSet, floor, METH_O),
      DECLARE_METHOD(t_TreeSet, headSet, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, higher, METH_O),
      DECLARE_METHOD(t_TreeSet, isEmpty, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, iterator, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, last, METH_NOARGS),
      DECLARE_METHOD(t_TreeSet, lower, METH_O),
      DECLARE_METHOD(t_TreeSet, pollFirst, METH_NOARGS),
      DECLARE_METHOD(t_TreeSet, pollLast, METH_NOARGS),
      DECLARE_METHOD(t_TreeSet, remove, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, size, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, subSet, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, tailSet, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(TreeSet, t_TreeSet, ::java::util::AbstractSet, TreeSet, t_TreeSet_init_, ((PyObject *(*)(t_TreeSet *)) get_generic_iterator< t_TreeSet >), 0, t_TreeSet__fields_, 0, 0);
    PyObject *t_TreeSet::wrap_Object(const TreeSet& object, PyTypeObject *p0)
    {
      PyObject *obj = t_TreeSet::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_TreeSet *self = (t_TreeSet *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    PyObject *t_TreeSet::wrap_jobject(const jobject& object, PyTypeObject *p0)
    {
      PyObject *obj = t_TreeSet::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_TreeSet *self = (t_TreeSet *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    void t_TreeSet::install(PyObject *module)
    {
      installType(&PY_TYPE(TreeSet), module, "TreeSet", 0);
    }

    void t_TreeSet::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(TreeSet).tp_dict, "class_", make_descriptor(TreeSet::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(TreeSet).tp_dict, "wrapfn_", make_descriptor(t_TreeSet::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(TreeSet).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_TreeSet_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, TreeSet::initializeClass, 1)))
        return NULL;
      return t_TreeSet::wrap_Object(TreeSet(((t_TreeSet *) arg)->object.this$));
    }
    static PyObject *t_TreeSet_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, TreeSet::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_TreeSet_of_(t_TreeSet *self, PyObject *args)
    {
      if (!parseArg(args, "T", 1, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static int t_TreeSet_init_(t_TreeSet *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          TreeSet object((jobject) NULL);

          INT_CALL(object = TreeSet());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::util::Comparator a0((jobject) NULL);
          PyTypeObject **p0;
          TreeSet object((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_))
          {
            INT_CALL(object = TreeSet(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::util::SortedSet a0((jobject) NULL);
          PyTypeObject **p0;
          TreeSet object((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::SortedSet::initializeClass, &a0, &p0, ::java::util::t_SortedSet::parameters_))
          {
            INT_CALL(object = TreeSet(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;
          TreeSet object((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            INT_CALL(object = TreeSet(a0));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_TreeSet_add(t_TreeSet *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "O", self->parameters[0], &a0))
      {
        OBJ_CALL(result = self->object.add(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(TreeSet), (PyObject *) self, "add", args, 2);
    }

    static PyObject *t_TreeSet_addAll(t_TreeSet *self, PyObject *args)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      jboolean result;

      if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
      {
        OBJ_CALL(result = self->object.addAll(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(TreeSet), (PyObject *) self, "addAll", args, 2);
    }

    static PyObject *t_TreeSet_ceiling(t_TreeSet *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArg(arg, "O", self->parameters[0], &a0))
      {
        OBJ_CALL(result = self->object.ceiling(a0));
        return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "ceiling", arg);
      return NULL;
    }

    static PyObject *t_TreeSet_clear(t_TreeSet *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.clear());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(TreeSet), (PyObject *) self, "clear", args, 2);
    }

    static PyObject *t_TreeSet_clone(t_TreeSet *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.clone());
      return ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_TreeSet_comparator(t_TreeSet *self)
    {
      ::java::util::Comparator result((jobject) NULL);
      OBJ_CALL(result = self->object.comparator());
      return ::java::util::t_Comparator::wrap_Object(result);
    }

    static PyObject *t_TreeSet_contains(t_TreeSet *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.contains(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(TreeSet), (PyObject *) self, "contains", args, 2);
    }

    static PyObject *t_TreeSet_descendingIterator(t_TreeSet *self)
    {
      ::java::util::Iterator result((jobject) NULL);
      OBJ_CALL(result = self->object.descendingIterator());
      return ::java::util::t_Iterator::wrap_Object(result, self->parameters[0]);
    }

    static PyObject *t_TreeSet_descendingSet(t_TreeSet *self)
    {
      ::java::util::NavigableSet result((jobject) NULL);
      OBJ_CALL(result = self->object.descendingSet());
      return ::java::util::t_NavigableSet::wrap_Object(result, self->parameters[0]);
    }

    static PyObject *t_TreeSet_first(t_TreeSet *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.first());
      return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_TreeSet_floor(t_TreeSet *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArg(arg, "O", self->parameters[0], &a0))
      {
        OBJ_CALL(result = self->object.floor(a0));
        return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "floor", arg);
      return NULL;
    }

    static PyObject *t_TreeSet_headSet(t_TreeSet *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::util::SortedSet result((jobject) NULL);

          if (!parseArgs(args, "O", self->parameters[0], &a0))
          {
            OBJ_CALL(result = self->object.headSet(a0));
            return ::java::util::t_SortedSet::wrap_Object(result, self->parameters[0]);
          }
        }
        break;
       case 2:
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean a1;
          ::java::util::NavigableSet result((jobject) NULL);

          if (!parseArgs(args, "OZ", self->parameters[0], &a0, &a1))
          {
            OBJ_CALL(result = self->object.headSet(a0, a1));
            return ::java::util::t_NavigableSet::wrap_Object(result, self->parameters[0]);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "headSet", args);
      return NULL;
    }

    static PyObject *t_TreeSet_higher(t_TreeSet *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArg(arg, "O", self->parameters[0], &a0))
      {
        OBJ_CALL(result = self->object.higher(a0));
        return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "higher", arg);
      return NULL;
    }

    static PyObject *t_TreeSet_isEmpty(t_TreeSet *self, PyObject *args)
    {
      jboolean result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.isEmpty());
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(TreeSet), (PyObject *) self, "isEmpty", args, 2);
    }

    static PyObject *t_TreeSet_iterator(t_TreeSet *self, PyObject *args)
    {
      ::java::util::Iterator result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.iterator());
        return ::java::util::t_Iterator::wrap_Object(result, self->parameters[0]);
      }

      return callSuper(&PY_TYPE(TreeSet), (PyObject *) self, "iterator", args, 2);
    }

    static PyObject *t_TreeSet_last(t_TreeSet *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.last());
      return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_TreeSet_lower(t_TreeSet *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArg(arg, "O", self->parameters[0], &a0))
      {
        OBJ_CALL(result = self->object.lower(a0));
        return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "lower", arg);
      return NULL;
    }

    static PyObject *t_TreeSet_pollFirst(t_TreeSet *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.pollFirst());
      return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_TreeSet_pollLast(t_TreeSet *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.pollLast());
      return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_TreeSet_remove(t_TreeSet *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.remove(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(TreeSet), (PyObject *) self, "remove", args, 2);
    }

    static PyObject *t_TreeSet_size(t_TreeSet *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.size());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(TreeSet), (PyObject *) self, "size", args, 2);
    }

    static PyObject *t_TreeSet_subSet(t_TreeSet *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::Object a1((jobject) NULL);
          ::java::util::SortedSet result((jobject) NULL);

          if (!parseArgs(args, "OO", self->parameters[0], self->parameters[0], &a0, &a1))
          {
            OBJ_CALL(result = self->object.subSet(a0, a1));
            return ::java::util::t_SortedSet::wrap_Object(result, self->parameters[0]);
          }
        }
        break;
       case 4:
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean a1;
          ::java::lang::Object a2((jobject) NULL);
          jboolean a3;
          ::java::util::NavigableSet result((jobject) NULL);

          if (!parseArgs(args, "OZOZ", self->parameters[0], self->parameters[0], &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = self->object.subSet(a0, a1, a2, a3));
            return ::java::util::t_NavigableSet::wrap_Object(result, self->parameters[0]);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "subSet", args);
      return NULL;
    }

    static PyObject *t_TreeSet_tailSet(t_TreeSet *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::util::SortedSet result((jobject) NULL);

          if (!parseArgs(args, "O", self->parameters[0], &a0))
          {
            OBJ_CALL(result = self->object.tailSet(a0));
            return ::java::util::t_SortedSet::wrap_Object(result, self->parameters[0]);
          }
        }
        break;
       case 2:
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean a1;
          ::java::util::NavigableSet result((jobject) NULL);

          if (!parseArgs(args, "OZ", self->parameters[0], &a0, &a1))
          {
            OBJ_CALL(result = self->object.tailSet(a0, a1));
            return ::java::util::t_NavigableSet::wrap_Object(result, self->parameters[0]);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "tailSet", args);
      return NULL;
    }
    static PyObject *t_TreeSet_get__parameters_(t_TreeSet *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }

    static PyObject *t_TreeSet_get__empty(t_TreeSet *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isEmpty());
      Py_RETURN_BOOL(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/PositionSpan.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *PositionSpan::class$ = NULL;
          jmethodID *PositionSpan::mids$ = NULL;
          bool PositionSpan::live$ = false;

          jclass PositionSpan::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/PositionSpan");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d8d154a6] = env->getMethodID(cls, "<init>", "(II)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PositionSpan::PositionSpan(jint a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d8d154a6, a0, a1)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_PositionSpan_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PositionSpan_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PositionSpan_init_(t_PositionSpan *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_PositionSpan__methods_[] = {
            DECLARE_METHOD(t_PositionSpan, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionSpan, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PositionSpan, t_PositionSpan, ::java::lang::Object, PositionSpan, t_PositionSpan_init_, 0, 0, 0, 0, 0);

          void t_PositionSpan::install(PyObject *module)
          {
            installType(&PY_TYPE(PositionSpan), module, "PositionSpan", 0);
          }

          void t_PositionSpan::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PositionSpan).tp_dict, "class_", make_descriptor(PositionSpan::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PositionSpan).tp_dict, "wrapfn_", make_descriptor(t_PositionSpan::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PositionSpan).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PositionSpan_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PositionSpan::initializeClass, 1)))
              return NULL;
            return t_PositionSpan::wrap_Object(PositionSpan(((t_PositionSpan *) arg)->object.this$));
          }
          static PyObject *t_PositionSpan_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PositionSpan::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PositionSpan_init_(t_PositionSpan *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            jint a1;
            PositionSpan object((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              INT_CALL(object = PositionSpan(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Comparable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *Term::class$ = NULL;
        jmethodID *Term::mids$ = NULL;
        bool Term::live$ = false;

        jclass Term::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/Term");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_init$_4a264742] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_init$_43cce44e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_bytes_4ae19461] = env->getMethodID(cls, "bytes", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_compareTo_7eca6a9e] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/index/Term;)I");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_field_14c7b5c5] = env->getMethodID(cls, "field", "()Ljava/lang/String;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_text_14c7b5c5] = env->getMethodID(cls, "text", "()Ljava/lang/String;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_toString_edfda73b] = env->getStaticMethodID(cls, "toString", "(Lorg/apache/lucene/util/BytesRef;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Term::Term(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        Term::Term(const ::java::lang::String & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4a264742, a0.this$, a1.this$)) {}

        Term::Term(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_43cce44e, a0.this$, a1.this$)) {}

        ::org::apache::lucene::util::BytesRef Term::bytes() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_bytes_4ae19461]));
        }

        jint Term::compareTo(const Term & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTo_7eca6a9e], a0.this$);
        }

        jboolean Term::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::java::lang::String Term::field() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_field_14c7b5c5]));
        }

        jint Term::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String Term::text() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_text_14c7b5c5]));
        }

        ::java::lang::String Term::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::java::lang::String Term::toString(const ::org::apache::lucene::util::BytesRef & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_edfda73b], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_Term_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Term_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Term_init_(t_Term *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Term_bytes(t_Term *self);
        static PyObject *t_Term_compareTo(t_Term *self, PyObject *arg);
        static PyObject *t_Term_equals(t_Term *self, PyObject *args);
        static PyObject *t_Term_field(t_Term *self);
        static PyObject *t_Term_hashCode(t_Term *self, PyObject *args);
        static PyObject *t_Term_text(t_Term *self);
        static PyObject *t_Term_toString(t_Term *self, PyObject *args);
        static PyObject *t_Term_toString_(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_Term__methods_[] = {
          DECLARE_METHOD(t_Term, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Term, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Term, bytes, METH_NOARGS),
          DECLARE_METHOD(t_Term, compareTo, METH_O),
          DECLARE_METHOD(t_Term, equals, METH_VARARGS),
          DECLARE_METHOD(t_Term, field, METH_NOARGS),
          DECLARE_METHOD(t_Term, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_Term, text, METH_NOARGS),
          DECLARE_METHOD(t_Term, toString, METH_VARARGS),
          DECLARE_METHOD(t_Term, toString_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Term, t_Term, ::java::lang::Object, Term, t_Term_init_, 0, 0, 0, 0, 0);

        void t_Term::install(PyObject *module)
        {
          installType(&PY_TYPE(Term), module, "Term", 0);
        }

        void t_Term::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Term).tp_dict, "class_", make_descriptor(Term::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Term).tp_dict, "wrapfn_", make_descriptor(t_Term::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Term).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Term_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Term::initializeClass, 1)))
            return NULL;
          return t_Term::wrap_Object(Term(((t_Term *) arg)->object.this$));
        }
        static PyObject *t_Term_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Term::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Term_init_(t_Term *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              Term object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = Term(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              Term object((jobject) NULL);

              if (!parseArgs(args, "ss", &a0, &a1))
              {
                INT_CALL(object = Term(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
              Term object((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                INT_CALL(object = Term(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Term_bytes(t_Term *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.bytes());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_Term_compareTo(t_Term *self, PyObject *arg)
        {
          Term a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", Term::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.compareTo(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
          return NULL;
        }

        static PyObject *t_Term_equals(t_Term *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(Term), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_Term_field(t_Term *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.field());
          return j2p(result);
        }

        static PyObject *t_Term_hashCode(t_Term *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(Term), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_Term_text(t_Term *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.text());
          return j2p(result);
        }

        static PyObject *t_Term_toString(t_Term *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(Term), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Term_toString_(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::Term::toString(a0));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "toString_", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/stempel/StempelStemmer.h"
#include "java/io/IOException.h"
#include "org/egothor/stemmer/Trie.h"
#include "java/lang/Class.h"
#include "java/lang/StringBuilder.h"
#include "java/io/InputStream.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace stempel {

          ::java::lang::Class *StempelStemmer::class$ = NULL;
          jmethodID *StempelStemmer::mids$ = NULL;
          bool StempelStemmer::live$ = false;

          jclass StempelStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/stempel/StempelStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
              mids$[mid_init$_366af231] = env->getMethodID(cls, "<init>", "(Lorg/egothor/stemmer/Trie;)V");
              mids$[mid_load_850f7b4e] = env->getStaticMethodID(cls, "load", "(Ljava/io/InputStream;)Lorg/egothor/stemmer/Trie;");
              mids$[mid_stem_50083a71] = env->getMethodID(cls, "stem", "(Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StempelStemmer::StempelStemmer(const ::java::io::InputStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

          StempelStemmer::StempelStemmer(const ::org::egothor::stemmer::Trie & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_366af231, a0.this$)) {}

          ::org::egothor::stemmer::Trie StempelStemmer::load(const ::java::io::InputStream & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::egothor::stemmer::Trie(env->callStaticObjectMethod(cls, mids$[mid_load_850f7b4e], a0.this$));
          }

          ::java::lang::StringBuilder StempelStemmer::stem(const ::java::lang::CharSequence & a0) const
          {
            return ::java::lang::StringBuilder(env->callObjectMethod(this$, mids$[mid_stem_50083a71], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace stempel {
          static PyObject *t_StempelStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StempelStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StempelStemmer_init_(t_StempelStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StempelStemmer_load(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StempelStemmer_stem(t_StempelStemmer *self, PyObject *arg);

          static PyMethodDef t_StempelStemmer__methods_[] = {
            DECLARE_METHOD(t_StempelStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StempelStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StempelStemmer, load, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StempelStemmer, stem, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StempelStemmer, t_StempelStemmer, ::java::lang::Object, StempelStemmer, t_StempelStemmer_init_, 0, 0, 0, 0, 0);

          void t_StempelStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(StempelStemmer), module, "StempelStemmer", 0);
          }

          void t_StempelStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StempelStemmer).tp_dict, "class_", make_descriptor(StempelStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StempelStemmer).tp_dict, "wrapfn_", make_descriptor(t_StempelStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StempelStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StempelStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StempelStemmer::initializeClass, 1)))
              return NULL;
            return t_StempelStemmer::wrap_Object(StempelStemmer(((t_StempelStemmer *) arg)->object.this$));
          }
          static PyObject *t_StempelStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StempelStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StempelStemmer_init_(t_StempelStemmer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::InputStream a0((jobject) NULL);
                StempelStemmer object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                {
                  INT_CALL(object = StempelStemmer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::egothor::stemmer::Trie a0((jobject) NULL);
                StempelStemmer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::egothor::stemmer::Trie::initializeClass, &a0))
                {
                  INT_CALL(object = StempelStemmer(a0));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StempelStemmer_load(PyTypeObject *type, PyObject *arg)
          {
            ::java::io::InputStream a0((jobject) NULL);
            ::org::egothor::stemmer::Trie result((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::InputStream::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::stempel::StempelStemmer::load(a0));
              return ::org::egothor::stemmer::t_Trie::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "load", arg);
            return NULL;
          }

          static PyObject *t_StempelStemmer_stem(t_StempelStemmer *self, PyObject *arg)
          {
            ::java::lang::CharSequence a0((jobject) NULL);
            ::java::lang::StringBuilder result((jobject) NULL);

            if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
            {
              OBJ_CALL(result = self->object.stem(a0));
              return ::java::lang::t_StringBuilder::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/LockVerifyServer.h"
#include "java/lang/Exception.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *LockVerifyServer::class$ = NULL;
        jmethodID *LockVerifyServer::mids$ = NULL;
        bool LockVerifyServer::live$ = false;

        jclass LockVerifyServer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/LockVerifyServer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LockVerifyServer::LockVerifyServer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void LockVerifyServer::main(const JArray< ::java::lang::String > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_LockVerifyServer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LockVerifyServer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LockVerifyServer_init_(t_LockVerifyServer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LockVerifyServer_main(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_LockVerifyServer__methods_[] = {
          DECLARE_METHOD(t_LockVerifyServer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LockVerifyServer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LockVerifyServer, main, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LockVerifyServer, t_LockVerifyServer, ::java::lang::Object, LockVerifyServer, t_LockVerifyServer_init_, 0, 0, 0, 0, 0);

        void t_LockVerifyServer::install(PyObject *module)
        {
          installType(&PY_TYPE(LockVerifyServer), module, "LockVerifyServer", 0);
        }

        void t_LockVerifyServer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LockVerifyServer).tp_dict, "class_", make_descriptor(LockVerifyServer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LockVerifyServer).tp_dict, "wrapfn_", make_descriptor(t_LockVerifyServer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LockVerifyServer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LockVerifyServer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LockVerifyServer::initializeClass, 1)))
            return NULL;
          return t_LockVerifyServer::wrap_Object(LockVerifyServer(((t_LockVerifyServer *) arg)->object.this$));
        }
        static PyObject *t_LockVerifyServer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LockVerifyServer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LockVerifyServer_init_(t_LockVerifyServer *self, PyObject *args, PyObject *kwds)
        {
          LockVerifyServer object((jobject) NULL);

          INT_CALL(object = LockVerifyServer());
          self->object = object;

          return 0;
        }

        static PyObject *t_LockVerifyServer_main(PyTypeObject *type, PyObject *arg)
        {
          JArray< ::java::lang::String > a0((jobject) NULL);

          if (!parseArg(arg, "[s", &a0))
          {
            OBJ_CALL(::org::apache::lucene::store::LockVerifyServer::main(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "main", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/KeywordMarkerFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *KeywordMarkerFilterFactory::class$ = NULL;
          jmethodID *KeywordMarkerFilterFactory::mids$ = NULL;
          bool KeywordMarkerFilterFactory::live$ = false;
          ::java::lang::String *KeywordMarkerFilterFactory::PATTERN = NULL;
          ::java::lang::String *KeywordMarkerFilterFactory::PROTECTED_TOKENS = NULL;

          jclass KeywordMarkerFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/KeywordMarkerFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");
              mids$[mid_isIgnoreCase_54c6a16a] = env->getMethodID(cls, "isIgnoreCase", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              PATTERN = new ::java::lang::String(env->getStaticObjectField(cls, "PATTERN", "Ljava/lang/String;"));
              PROTECTED_TOKENS = new ::java::lang::String(env->getStaticObjectField(cls, "PROTECTED_TOKENS", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KeywordMarkerFilterFactory::KeywordMarkerFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream KeywordMarkerFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          void KeywordMarkerFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }

          jboolean KeywordMarkerFilterFactory::isIgnoreCase() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isIgnoreCase_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_KeywordMarkerFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeywordMarkerFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KeywordMarkerFilterFactory_init_(t_KeywordMarkerFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KeywordMarkerFilterFactory_create(t_KeywordMarkerFilterFactory *self, PyObject *args);
          static PyObject *t_KeywordMarkerFilterFactory_inform(t_KeywordMarkerFilterFactory *self, PyObject *arg);
          static PyObject *t_KeywordMarkerFilterFactory_isIgnoreCase(t_KeywordMarkerFilterFactory *self);
          static PyObject *t_KeywordMarkerFilterFactory_get__ignoreCase(t_KeywordMarkerFilterFactory *self, void *data);
          static PyGetSetDef t_KeywordMarkerFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_KeywordMarkerFilterFactory, ignoreCase),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_KeywordMarkerFilterFactory__methods_[] = {
            DECLARE_METHOD(t_KeywordMarkerFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordMarkerFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordMarkerFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_KeywordMarkerFilterFactory, inform, METH_O),
            DECLARE_METHOD(t_KeywordMarkerFilterFactory, isIgnoreCase, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(KeywordMarkerFilterFactory, t_KeywordMarkerFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, KeywordMarkerFilterFactory, t_KeywordMarkerFilterFactory_init_, 0, 0, t_KeywordMarkerFilterFactory__fields_, 0, 0);

          void t_KeywordMarkerFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(KeywordMarkerFilterFactory), module, "KeywordMarkerFilterFactory", 0);
          }

          void t_KeywordMarkerFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(KeywordMarkerFilterFactory).tp_dict, "class_", make_descriptor(KeywordMarkerFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(KeywordMarkerFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_KeywordMarkerFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(KeywordMarkerFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(KeywordMarkerFilterFactory::initializeClass);
            PyDict_SetItemString(PY_TYPE(KeywordMarkerFilterFactory).tp_dict, "PATTERN", make_descriptor(j2p(*KeywordMarkerFilterFactory::PATTERN)));
            PyDict_SetItemString(PY_TYPE(KeywordMarkerFilterFactory).tp_dict, "PROTECTED_TOKENS", make_descriptor(j2p(*KeywordMarkerFilterFactory::PROTECTED_TOKENS)));
          }

          static PyObject *t_KeywordMarkerFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KeywordMarkerFilterFactory::initializeClass, 1)))
              return NULL;
            return t_KeywordMarkerFilterFactory::wrap_Object(KeywordMarkerFilterFactory(((t_KeywordMarkerFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_KeywordMarkerFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KeywordMarkerFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KeywordMarkerFilterFactory_init_(t_KeywordMarkerFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            KeywordMarkerFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = KeywordMarkerFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_KeywordMarkerFilterFactory_create(t_KeywordMarkerFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(KeywordMarkerFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_KeywordMarkerFilterFactory_inform(t_KeywordMarkerFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }

          static PyObject *t_KeywordMarkerFilterFactory_isIgnoreCase(t_KeywordMarkerFilterFactory *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isIgnoreCase());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_KeywordMarkerFilterFactory_get__ignoreCase(t_KeywordMarkerFilterFactory *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isIgnoreCase());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/WeightedSpanTermExtractor.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/highlight/WeightedSpanTerm.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *WeightedSpanTermExtractor::class$ = NULL;
          jmethodID *WeightedSpanTermExtractor::mids$ = NULL;
          bool WeightedSpanTermExtractor::live$ = false;

          jclass WeightedSpanTermExtractor::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/WeightedSpanTermExtractor");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
              mids$[mid_getExpandMultiTermQuery_54c6a16a] = env->getMethodID(cls, "getExpandMultiTermQuery", "()Z");
              mids$[mid_getTokenStream_71f550c9] = env->getMethodID(cls, "getTokenStream", "()Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getWeightedSpanTerms_2b00c132] = env->getMethodID(cls, "getWeightedSpanTerms", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/analysis/TokenStream;)Ljava/util/Map;");
              mids$[mid_getWeightedSpanTerms_4bedc0dc] = env->getMethodID(cls, "getWeightedSpanTerms", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/analysis/TokenStream;Ljava/lang/String;)Ljava/util/Map;");
              mids$[mid_getWeightedSpanTermsWithScores_d44049f9] = env->getMethodID(cls, "getWeightedSpanTermsWithScores", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/analysis/TokenStream;Ljava/lang/String;Lorg/apache/lucene/index/IndexReader;)Ljava/util/Map;");
              mids$[mid_isCachedTokenStream_54c6a16a] = env->getMethodID(cls, "isCachedTokenStream", "()Z");
              mids$[mid_setExpandMultiTermQuery_bb0c767f] = env->getMethodID(cls, "setExpandMultiTermQuery", "(Z)V");
              mids$[mid_setWrapIfNotCachingTokenFilter_bb0c767f] = env->getMethodID(cls, "setWrapIfNotCachingTokenFilter", "(Z)V");
              mids$[mid_extract_1ecdc9cb] = env->getMethodID(cls, "extract", "(Lorg/apache/lucene/search/Query;Ljava/util/Map;)V");
              mids$[mid_extractUnknownQuery_1ecdc9cb] = env->getMethodID(cls, "extractUnknownQuery", "(Lorg/apache/lucene/search/Query;Ljava/util/Map;)V");
              mids$[mid_extractWeightedSpanTerms_66aae95d] = env->getMethodID(cls, "extractWeightedSpanTerms", "(Ljava/util/Map;Lorg/apache/lucene/search/spans/SpanQuery;)V");
              mids$[mid_mustRewriteQuery_056c189b] = env->getMethodID(cls, "mustRewriteQuery", "(Lorg/apache/lucene/search/spans/SpanQuery;)Z");
              mids$[mid_extractWeightedTerms_f386227d] = env->getMethodID(cls, "extractWeightedTerms", "(Ljava/util/Map;Lorg/apache/lucene/search/Query;)V");
              mids$[mid_collectSpanQueryFields_33bf20d1] = env->getMethodID(cls, "collectSpanQueryFields", "(Lorg/apache/lucene/search/spans/SpanQuery;Ljava/util/Set;)V");
              mids$[mid_setMaxDocCharsToAnalyze_39c7bd3c] = env->getMethodID(cls, "setMaxDocCharsToAnalyze", "(I)V");
              mids$[mid_fieldNameComparator_5fdc3f44] = env->getMethodID(cls, "fieldNameComparator", "(Ljava/lang/String;)Z");
              mids$[mid_getLeafContext_c2ef2576] = env->getMethodID(cls, "getLeafContext", "()Lorg/apache/lucene/index/AtomicReaderContext;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WeightedSpanTermExtractor::WeightedSpanTermExtractor() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          WeightedSpanTermExtractor::WeightedSpanTermExtractor(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

          jboolean WeightedSpanTermExtractor::getExpandMultiTermQuery() const
          {
            return env->callBooleanMethod(this$, mids$[mid_getExpandMultiTermQuery_54c6a16a]);
          }

          ::org::apache::lucene::analysis::TokenStream WeightedSpanTermExtractor::getTokenStream() const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_getTokenStream_71f550c9]));
          }

          ::java::util::Map WeightedSpanTermExtractor::getWeightedSpanTerms(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::analysis::TokenStream & a1) const
          {
            return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getWeightedSpanTerms_2b00c132], a0.this$, a1.this$));
          }

          ::java::util::Map WeightedSpanTermExtractor::getWeightedSpanTerms(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::java::lang::String & a2) const
          {
            return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getWeightedSpanTerms_4bedc0dc], a0.this$, a1.this$, a2.this$));
          }

          ::java::util::Map WeightedSpanTermExtractor::getWeightedSpanTermsWithScores(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::java::lang::String & a2, const ::org::apache::lucene::index::IndexReader & a3) const
          {
            return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getWeightedSpanTermsWithScores_d44049f9], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          jboolean WeightedSpanTermExtractor::isCachedTokenStream() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isCachedTokenStream_54c6a16a]);
          }

          void WeightedSpanTermExtractor::setExpandMultiTermQuery(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setExpandMultiTermQuery_bb0c767f], a0);
          }

          void WeightedSpanTermExtractor::setWrapIfNotCachingTokenFilter(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setWrapIfNotCachingTokenFilter_bb0c767f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_WeightedSpanTermExtractor_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WeightedSpanTermExtractor_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WeightedSpanTermExtractor_init_(t_WeightedSpanTermExtractor *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WeightedSpanTermExtractor_getExpandMultiTermQuery(t_WeightedSpanTermExtractor *self);
          static PyObject *t_WeightedSpanTermExtractor_getTokenStream(t_WeightedSpanTermExtractor *self);
          static PyObject *t_WeightedSpanTermExtractor_getWeightedSpanTerms(t_WeightedSpanTermExtractor *self, PyObject *args);
          static PyObject *t_WeightedSpanTermExtractor_getWeightedSpanTermsWithScores(t_WeightedSpanTermExtractor *self, PyObject *args);
          static PyObject *t_WeightedSpanTermExtractor_isCachedTokenStream(t_WeightedSpanTermExtractor *self);
          static PyObject *t_WeightedSpanTermExtractor_setExpandMultiTermQuery(t_WeightedSpanTermExtractor *self, PyObject *arg);
          static PyObject *t_WeightedSpanTermExtractor_setWrapIfNotCachingTokenFilter(t_WeightedSpanTermExtractor *self, PyObject *arg);
          static PyObject *t_WeightedSpanTermExtractor_get__cachedTokenStream(t_WeightedSpanTermExtractor *self, void *data);
          static PyObject *t_WeightedSpanTermExtractor_get__expandMultiTermQuery(t_WeightedSpanTermExtractor *self, void *data);
          static int t_WeightedSpanTermExtractor_set__expandMultiTermQuery(t_WeightedSpanTermExtractor *self, PyObject *arg, void *data);
          static PyObject *t_WeightedSpanTermExtractor_get__tokenStream(t_WeightedSpanTermExtractor *self, void *data);
          static int t_WeightedSpanTermExtractor_set__wrapIfNotCachingTokenFilter(t_WeightedSpanTermExtractor *self, PyObject *arg, void *data);
          static PyGetSetDef t_WeightedSpanTermExtractor__fields_[] = {
            DECLARE_GET_FIELD(t_WeightedSpanTermExtractor, cachedTokenStream),
            DECLARE_GETSET_FIELD(t_WeightedSpanTermExtractor, expandMultiTermQuery),
            DECLARE_GET_FIELD(t_WeightedSpanTermExtractor, tokenStream),
            DECLARE_SET_FIELD(t_WeightedSpanTermExtractor, wrapIfNotCachingTokenFilter),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_WeightedSpanTermExtractor__methods_[] = {
            DECLARE_METHOD(t_WeightedSpanTermExtractor, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WeightedSpanTermExtractor, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WeightedSpanTermExtractor, getExpandMultiTermQuery, METH_NOARGS),
            DECLARE_METHOD(t_WeightedSpanTermExtractor, getTokenStream, METH_NOARGS),
            DECLARE_METHOD(t_WeightedSpanTermExtractor, getWeightedSpanTerms, METH_VARARGS),
            DECLARE_METHOD(t_WeightedSpanTermExtractor, getWeightedSpanTermsWithScores, METH_VARARGS),
            DECLARE_METHOD(t_WeightedSpanTermExtractor, isCachedTokenStream, METH_NOARGS),
            DECLARE_METHOD(t_WeightedSpanTermExtractor, setExpandMultiTermQuery, METH_O),
            DECLARE_METHOD(t_WeightedSpanTermExtractor, setWrapIfNotCachingTokenFilter, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WeightedSpanTermExtractor, t_WeightedSpanTermExtractor, ::java::lang::Object, WeightedSpanTermExtractor, t_WeightedSpanTermExtractor_init_, 0, 0, t_WeightedSpanTermExtractor__fields_, 0, 0);

          void t_WeightedSpanTermExtractor::install(PyObject *module)
          {
            installType(&PY_TYPE(WeightedSpanTermExtractor), module, "WeightedSpanTermExtractor", 0);
          }

          void t_WeightedSpanTermExtractor::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WeightedSpanTermExtractor).tp_dict, "class_", make_descriptor(WeightedSpanTermExtractor::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WeightedSpanTermExtractor).tp_dict, "wrapfn_", make_descriptor(t_WeightedSpanTermExtractor::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WeightedSpanTermExtractor).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_WeightedSpanTermExtractor_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WeightedSpanTermExtractor::initializeClass, 1)))
              return NULL;
            return t_WeightedSpanTermExtractor::wrap_Object(WeightedSpanTermExtractor(((t_WeightedSpanTermExtractor *) arg)->object.this$));
          }
          static PyObject *t_WeightedSpanTermExtractor_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WeightedSpanTermExtractor::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WeightedSpanTermExtractor_init_(t_WeightedSpanTermExtractor *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                WeightedSpanTermExtractor object((jobject) NULL);

                INT_CALL(object = WeightedSpanTermExtractor());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                WeightedSpanTermExtractor object((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  INT_CALL(object = WeightedSpanTermExtractor(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_WeightedSpanTermExtractor_getExpandMultiTermQuery(t_WeightedSpanTermExtractor *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.getExpandMultiTermQuery());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_WeightedSpanTermExtractor_getTokenStream(t_WeightedSpanTermExtractor *self)
          {
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);
            OBJ_CALL(result = self->object.getTokenStream());
            return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
          }

          static PyObject *t_WeightedSpanTermExtractor_getWeightedSpanTerms(t_WeightedSpanTermExtractor *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ::java::util::Map result((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.getWeightedSpanTerms(a0, a1));
                  return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::org::apache::lucene::search::highlight::PY_TYPE(WeightedSpanTerm));
                }
              }
              break;
             case 3:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                ::java::util::Map result((jobject) NULL);

                if (!parseArgs(args, "kks", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.getWeightedSpanTerms(a0, a1, a2));
                  return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::org::apache::lucene::search::highlight::PY_TYPE(WeightedSpanTerm));
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getWeightedSpanTerms", args);
            return NULL;
          }

          static PyObject *t_WeightedSpanTermExtractor_getWeightedSpanTermsWithScores(t_WeightedSpanTermExtractor *self, PyObject *args)
          {
            ::org::apache::lucene::search::Query a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            ::org::apache::lucene::index::IndexReader a3((jobject) NULL);
            ::java::util::Map result((jobject) NULL);

            if (!parseArgs(args, "kksk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.getWeightedSpanTermsWithScores(a0, a1, a2, a3));
              return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::org::apache::lucene::search::highlight::PY_TYPE(WeightedSpanTerm));
            }

            PyErr_SetArgsError((PyObject *) self, "getWeightedSpanTermsWithScores", args);
            return NULL;
          }

          static PyObject *t_WeightedSpanTermExtractor_isCachedTokenStream(t_WeightedSpanTermExtractor *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isCachedTokenStream());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_WeightedSpanTermExtractor_setExpandMultiTermQuery(t_WeightedSpanTermExtractor *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setExpandMultiTermQuery(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setExpandMultiTermQuery", arg);
            return NULL;
          }

          static PyObject *t_WeightedSpanTermExtractor_setWrapIfNotCachingTokenFilter(t_WeightedSpanTermExtractor *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setWrapIfNotCachingTokenFilter(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setWrapIfNotCachingTokenFilter", arg);
            return NULL;
          }

          static PyObject *t_WeightedSpanTermExtractor_get__cachedTokenStream(t_WeightedSpanTermExtractor *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isCachedTokenStream());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_WeightedSpanTermExtractor_get__expandMultiTermQuery(t_WeightedSpanTermExtractor *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.getExpandMultiTermQuery());
            Py_RETURN_BOOL(value);
          }
          static int t_WeightedSpanTermExtractor_set__expandMultiTermQuery(t_WeightedSpanTermExtractor *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setExpandMultiTermQuery(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "expandMultiTermQuery", arg);
            return -1;
          }

          static PyObject *t_WeightedSpanTermExtractor_get__tokenStream(t_WeightedSpanTermExtractor *self, void *data)
          {
            ::org::apache::lucene::analysis::TokenStream value((jobject) NULL);
            OBJ_CALL(value = self->object.getTokenStream());
            return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(value);
          }

          static int t_WeightedSpanTermExtractor_set__wrapIfNotCachingTokenFilter(t_WeightedSpanTermExtractor *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setWrapIfNotCachingTokenFilter(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "wrapIfNotCachingTokenFilter", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/Scorer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/highlight/TextFragment.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *Scorer::class$ = NULL;
          jmethodID *Scorer::mids$ = NULL;
          bool Scorer::live$ = false;

          jclass Scorer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/Scorer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getFragmentScore_54c6a176] = env->getMethodID(cls, "getFragmentScore", "()F");
              mids$[mid_getTokenScore_54c6a176] = env->getMethodID(cls, "getTokenScore", "()F");
              mids$[mid_init_a65cd6ab] = env->getMethodID(cls, "init", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_startFragment_0335a78a] = env->getMethodID(cls, "startFragment", "(Lorg/apache/lucene/search/highlight/TextFragment;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jfloat Scorer::getFragmentScore() const
          {
            return env->callFloatMethod(this$, mids$[mid_getFragmentScore_54c6a176]);
          }

          jfloat Scorer::getTokenScore() const
          {
            return env->callFloatMethod(this$, mids$[mid_getTokenScore_54c6a176]);
          }

          ::org::apache::lucene::analysis::TokenStream Scorer::init(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_init_a65cd6ab], a0.this$));
          }

          void Scorer::startFragment(const ::org::apache::lucene::search::highlight::TextFragment & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_startFragment_0335a78a], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_Scorer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Scorer_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Scorer_getFragmentScore(t_Scorer *self);
          static PyObject *t_Scorer_getTokenScore(t_Scorer *self);
          static PyObject *t_Scorer_init(t_Scorer *self, PyObject *arg);
          static PyObject *t_Scorer_startFragment(t_Scorer *self, PyObject *arg);
          static PyObject *t_Scorer_get__fragmentScore(t_Scorer *self, void *data);
          static PyObject *t_Scorer_get__tokenScore(t_Scorer *self, void *data);
          static PyGetSetDef t_Scorer__fields_[] = {
            DECLARE_GET_FIELD(t_Scorer, fragmentScore),
            DECLARE_GET_FIELD(t_Scorer, tokenScore),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Scorer__methods_[] = {
            DECLARE_METHOD(t_Scorer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Scorer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Scorer, getFragmentScore, METH_NOARGS),
            DECLARE_METHOD(t_Scorer, getTokenScore, METH_NOARGS),
            DECLARE_METHOD(t_Scorer, init, METH_O),
            DECLARE_METHOD(t_Scorer, startFragment, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Scorer, t_Scorer, ::java::lang::Object, Scorer, abstract_init, 0, 0, t_Scorer__fields_, 0, 0);

          void t_Scorer::install(PyObject *module)
          {
            installType(&PY_TYPE(Scorer), module, "Scorer", 0);
          }

          void t_Scorer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Scorer).tp_dict, "class_", make_descriptor(Scorer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Scorer).tp_dict, "wrapfn_", make_descriptor(t_Scorer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Scorer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Scorer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Scorer::initializeClass, 1)))
              return NULL;
            return t_Scorer::wrap_Object(Scorer(((t_Scorer *) arg)->object.this$));
          }
          static PyObject *t_Scorer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Scorer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Scorer_getFragmentScore(t_Scorer *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getFragmentScore());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_Scorer_getTokenScore(t_Scorer *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getTokenScore());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_Scorer_init(t_Scorer *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.init(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "init", arg);
            return NULL;
          }

          static PyObject *t_Scorer_startFragment(t_Scorer *self, PyObject *arg)
          {
            ::org::apache::lucene::search::highlight::TextFragment a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::highlight::TextFragment::initializeClass, &a0))
            {
              OBJ_CALL(self->object.startFragment(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "startFragment", arg);
            return NULL;
          }

          static PyObject *t_Scorer_get__fragmentScore(t_Scorer *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getFragmentScore());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_Scorer_get__tokenScore(t_Scorer *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getTokenScore());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/TermRangeQueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *TermRangeQueryNodeProcessor::class$ = NULL;
              jmethodID *TermRangeQueryNodeProcessor::mids$ = NULL;
              bool TermRangeQueryNodeProcessor::live$ = false;

              jclass TermRangeQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/TermRangeQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              TermRangeQueryNodeProcessor::TermRangeQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_TermRangeQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_TermRangeQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_TermRangeQueryNodeProcessor_init_(t_TermRangeQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_TermRangeQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_TermRangeQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_TermRangeQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(TermRangeQueryNodeProcessor, t_TermRangeQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, TermRangeQueryNodeProcessor, t_TermRangeQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_TermRangeQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(TermRangeQueryNodeProcessor), module, "TermRangeQueryNodeProcessor", 0);
              }

              void t_TermRangeQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(TermRangeQueryNodeProcessor).tp_dict, "class_", make_descriptor(TermRangeQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(TermRangeQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_TermRangeQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(TermRangeQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_TermRangeQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, TermRangeQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_TermRangeQueryNodeProcessor::wrap_Object(TermRangeQueryNodeProcessor(((t_TermRangeQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_TermRangeQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, TermRangeQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_TermRangeQueryNodeProcessor_init_(t_TermRangeQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                TermRangeQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = TermRangeQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FuzzyQuery.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FuzzyQuery::class$ = NULL;
        jmethodID *FuzzyQuery::mids$ = NULL;
        bool FuzzyQuery::live$ = false;
        jint FuzzyQuery::defaultMaxEdits = (jint) 0;
        jint FuzzyQuery::defaultMaxExpansions = (jint) 0;
        jfloat FuzzyQuery::defaultMinSimilarity = (jfloat) 0;
        jint FuzzyQuery::defaultPrefixLength = (jint) 0;
        jboolean FuzzyQuery::defaultTranspositions = (jboolean) 0;

        jclass FuzzyQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FuzzyQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7eca6a81] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;)V");
            mids$[mid_init$_05555589] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;I)V");
            mids$[mid_init$_10c66029] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;II)V");
            mids$[mid_init$_12e80fe2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;IIIZ)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_floatToEdits_77691edc] = env->getStaticMethodID(cls, "floatToEdits", "(FI)I");
            mids$[mid_getMaxEdits_54c6a179] = env->getMethodID(cls, "getMaxEdits", "()I");
            mids$[mid_getPrefixLength_54c6a179] = env->getMethodID(cls, "getPrefixLength", "()I");
            mids$[mid_getTerm_0f71f314] = env->getMethodID(cls, "getTerm", "()Lorg/apache/lucene/index/Term;");
            mids$[mid_getTranspositions_54c6a16a] = env->getMethodID(cls, "getTranspositions", "()Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_getTermsEnum_67b5a29a] = env->getMethodID(cls, "getTermsEnum", "(Lorg/apache/lucene/index/Terms;Lorg/apache/lucene/util/AttributeSource;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            defaultMaxEdits = env->getStaticIntField(cls, "defaultMaxEdits");
            defaultMaxExpansions = env->getStaticIntField(cls, "defaultMaxExpansions");
            defaultMinSimilarity = env->getStaticFloatField(cls, "defaultMinSimilarity");
            defaultPrefixLength = env->getStaticIntField(cls, "defaultPrefixLength");
            defaultTranspositions = env->getStaticBooleanField(cls, "defaultTranspositions");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FuzzyQuery::FuzzyQuery(const ::org::apache::lucene::index::Term & a0) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_7eca6a81, a0.this$)) {}

        FuzzyQuery::FuzzyQuery(const ::org::apache::lucene::index::Term & a0, jint a1) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_05555589, a0.this$, a1)) {}

        FuzzyQuery::FuzzyQuery(const ::org::apache::lucene::index::Term & a0, jint a1, jint a2) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_10c66029, a0.this$, a1, a2)) {}

        FuzzyQuery::FuzzyQuery(const ::org::apache::lucene::index::Term & a0, jint a1, jint a2, jint a3, jboolean a4) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_12e80fe2, a0.this$, a1, a2, a3, a4)) {}

        jboolean FuzzyQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint FuzzyQuery::floatToEdits(jfloat a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_floatToEdits_77691edc], a0, a1);
        }

        jint FuzzyQuery::getMaxEdits() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxEdits_54c6a179]);
        }

        jint FuzzyQuery::getPrefixLength() const
        {
          return env->callIntMethod(this$, mids$[mid_getPrefixLength_54c6a179]);
        }

        ::org::apache::lucene::index::Term FuzzyQuery::getTerm() const
        {
          return ::org::apache::lucene::index::Term(env->callObjectMethod(this$, mids$[mid_getTerm_0f71f314]));
        }

        jboolean FuzzyQuery::getTranspositions() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getTranspositions_54c6a16a]);
        }

        jint FuzzyQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String FuzzyQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FuzzyQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FuzzyQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FuzzyQuery_init_(t_FuzzyQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FuzzyQuery_equals(t_FuzzyQuery *self, PyObject *args);
        static PyObject *t_FuzzyQuery_floatToEdits(PyTypeObject *type, PyObject *args);
        static PyObject *t_FuzzyQuery_getMaxEdits(t_FuzzyQuery *self);
        static PyObject *t_FuzzyQuery_getPrefixLength(t_FuzzyQuery *self);
        static PyObject *t_FuzzyQuery_getTerm(t_FuzzyQuery *self);
        static PyObject *t_FuzzyQuery_getTranspositions(t_FuzzyQuery *self);
        static PyObject *t_FuzzyQuery_hashCode(t_FuzzyQuery *self, PyObject *args);
        static PyObject *t_FuzzyQuery_toString(t_FuzzyQuery *self, PyObject *args);
        static PyObject *t_FuzzyQuery_get__maxEdits(t_FuzzyQuery *self, void *data);
        static PyObject *t_FuzzyQuery_get__prefixLength(t_FuzzyQuery *self, void *data);
        static PyObject *t_FuzzyQuery_get__term(t_FuzzyQuery *self, void *data);
        static PyObject *t_FuzzyQuery_get__transpositions(t_FuzzyQuery *self, void *data);
        static PyGetSetDef t_FuzzyQuery__fields_[] = {
          DECLARE_GET_FIELD(t_FuzzyQuery, maxEdits),
          DECLARE_GET_FIELD(t_FuzzyQuery, prefixLength),
          DECLARE_GET_FIELD(t_FuzzyQuery, term),
          DECLARE_GET_FIELD(t_FuzzyQuery, transpositions),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FuzzyQuery__methods_[] = {
          DECLARE_METHOD(t_FuzzyQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FuzzyQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FuzzyQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyQuery, floatToEdits, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FuzzyQuery, getMaxEdits, METH_NOARGS),
          DECLARE_METHOD(t_FuzzyQuery, getPrefixLength, METH_NOARGS),
          DECLARE_METHOD(t_FuzzyQuery, getTerm, METH_NOARGS),
          DECLARE_METHOD(t_FuzzyQuery, getTranspositions, METH_NOARGS),
          DECLARE_METHOD(t_FuzzyQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FuzzyQuery, t_FuzzyQuery, ::org::apache::lucene::search::MultiTermQuery, FuzzyQuery, t_FuzzyQuery_init_, 0, 0, t_FuzzyQuery__fields_, 0, 0);

        void t_FuzzyQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(FuzzyQuery), module, "FuzzyQuery", 0);
        }

        void t_FuzzyQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FuzzyQuery).tp_dict, "class_", make_descriptor(FuzzyQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FuzzyQuery).tp_dict, "wrapfn_", make_descriptor(t_FuzzyQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FuzzyQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FuzzyQuery::initializeClass);
          PyDict_SetItemString(PY_TYPE(FuzzyQuery).tp_dict, "defaultMaxEdits", make_descriptor(FuzzyQuery::defaultMaxEdits));
          PyDict_SetItemString(PY_TYPE(FuzzyQuery).tp_dict, "defaultMaxExpansions", make_descriptor(FuzzyQuery::defaultMaxExpansions));
          PyDict_SetItemString(PY_TYPE(FuzzyQuery).tp_dict, "defaultMinSimilarity", make_descriptor(FuzzyQuery::defaultMinSimilarity));
          PyDict_SetItemString(PY_TYPE(FuzzyQuery).tp_dict, "defaultPrefixLength", make_descriptor(FuzzyQuery::defaultPrefixLength));
          PyDict_SetItemString(PY_TYPE(FuzzyQuery).tp_dict, "defaultTranspositions", make_descriptor(FuzzyQuery::defaultTranspositions));
        }

        static PyObject *t_FuzzyQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FuzzyQuery::initializeClass, 1)))
            return NULL;
          return t_FuzzyQuery::wrap_Object(FuzzyQuery(((t_FuzzyQuery *) arg)->object.this$));
        }
        static PyObject *t_FuzzyQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FuzzyQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FuzzyQuery_init_(t_FuzzyQuery *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              FuzzyQuery object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                INT_CALL(object = FuzzyQuery(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              jint a1;
              FuzzyQuery object((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1))
              {
                INT_CALL(object = FuzzyQuery(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              jint a1;
              jint a2;
              FuzzyQuery object((jobject) NULL);

              if (!parseArgs(args, "kII", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = FuzzyQuery(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            goto err;
           case 5:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              jboolean a4;
              FuzzyQuery object((jobject) NULL);

              if (!parseArgs(args, "kIIIZ", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                INT_CALL(object = FuzzyQuery(a0, a1, a2, a3, a4));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FuzzyQuery_equals(t_FuzzyQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FuzzyQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_FuzzyQuery_floatToEdits(PyTypeObject *type, PyObject *args)
        {
          jfloat a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "FI", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::FuzzyQuery::floatToEdits(a0, a1));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "floatToEdits", args);
          return NULL;
        }

        static PyObject *t_FuzzyQuery_getMaxEdits(t_FuzzyQuery *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxEdits());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_FuzzyQuery_getPrefixLength(t_FuzzyQuery *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getPrefixLength());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_FuzzyQuery_getTerm(t_FuzzyQuery *self)
        {
          ::org::apache::lucene::index::Term result((jobject) NULL);
          OBJ_CALL(result = self->object.getTerm());
          return ::org::apache::lucene::index::t_Term::wrap_Object(result);
        }

        static PyObject *t_FuzzyQuery_getTranspositions(t_FuzzyQuery *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getTranspositions());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FuzzyQuery_hashCode(t_FuzzyQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FuzzyQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_FuzzyQuery_toString(t_FuzzyQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FuzzyQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FuzzyQuery_get__maxEdits(t_FuzzyQuery *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxEdits());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_FuzzyQuery_get__prefixLength(t_FuzzyQuery *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getPrefixLength());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_FuzzyQuery_get__term(t_FuzzyQuery *self, void *data)
        {
          ::org::apache::lucene::index::Term value((jobject) NULL);
          OBJ_CALL(value = self->object.getTerm());
          return ::org::apache::lucene::index::t_Term::wrap_Object(value);
        }

        static PyObject *t_FuzzyQuery_get__transpositions(t_FuzzyQuery *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getTranspositions());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/CustomScoreProvider.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {

        ::java::lang::Class *CustomScoreProvider::class$ = NULL;
        jmethodID *CustomScoreProvider::mids$ = NULL;
        bool CustomScoreProvider::live$ = false;

        jclass CustomScoreProvider::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/queries/CustomScoreProvider");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a6f59947] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
            mids$[mid_customExplain_3236f395] = env->getMethodID(cls, "customExplain", "(ILorg/apache/lucene/search/Explanation;Lorg/apache/lucene/search/Explanation;)Lorg/apache/lucene/search/Explanation;");
            mids$[mid_customExplain_bec3370d] = env->getMethodID(cls, "customExplain", "(ILorg/apache/lucene/search/Explanation;[Lorg/apache/lucene/search/Explanation;)Lorg/apache/lucene/search/Explanation;");
            mids$[mid_customScore_f55b9306] = env->getMethodID(cls, "customScore", "(IFF)F");
            mids$[mid_customScore_c9ca8e84] = env->getMethodID(cls, "customScore", "(IF[F)F");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CustomScoreProvider::CustomScoreProvider(const ::org::apache::lucene::index::AtomicReaderContext & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a6f59947, a0.this$)) {}

        ::org::apache::lucene::search::Explanation CustomScoreProvider::customExplain(jint a0, const ::org::apache::lucene::search::Explanation & a1, const ::org::apache::lucene::search::Explanation & a2) const
        {
          return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_customExplain_3236f395], a0, a1.this$, a2.this$));
        }

        ::org::apache::lucene::search::Explanation CustomScoreProvider::customExplain(jint a0, const ::org::apache::lucene::search::Explanation & a1, const JArray< ::org::apache::lucene::search::Explanation > & a2) const
        {
          return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_customExplain_bec3370d], a0, a1.this$, a2.this$));
        }

        jfloat CustomScoreProvider::customScore(jint a0, jfloat a1, jfloat a2) const
        {
          return env->callFloatMethod(this$, mids$[mid_customScore_f55b9306], a0, a1, a2);
        }

        jfloat CustomScoreProvider::customScore(jint a0, jfloat a1, const JArray< jfloat > & a2) const
        {
          return env->callFloatMethod(this$, mids$[mid_customScore_c9ca8e84], a0, a1, a2.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        static PyObject *t_CustomScoreProvider_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CustomScoreProvider_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CustomScoreProvider_init_(t_CustomScoreProvider *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CustomScoreProvider_customExplain(t_CustomScoreProvider *self, PyObject *args);
        static PyObject *t_CustomScoreProvider_customScore(t_CustomScoreProvider *self, PyObject *args);

        static PyMethodDef t_CustomScoreProvider__methods_[] = {
          DECLARE_METHOD(t_CustomScoreProvider, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CustomScoreProvider, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CustomScoreProvider, customExplain, METH_VARARGS),
          DECLARE_METHOD(t_CustomScoreProvider, customScore, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CustomScoreProvider, t_CustomScoreProvider, ::java::lang::Object, CustomScoreProvider, t_CustomScoreProvider_init_, 0, 0, 0, 0, 0);

        void t_CustomScoreProvider::install(PyObject *module)
        {
          installType(&PY_TYPE(CustomScoreProvider), module, "CustomScoreProvider", 0);
        }

        void t_CustomScoreProvider::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CustomScoreProvider).tp_dict, "class_", make_descriptor(CustomScoreProvider::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CustomScoreProvider).tp_dict, "wrapfn_", make_descriptor(t_CustomScoreProvider::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CustomScoreProvider).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CustomScoreProvider_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CustomScoreProvider::initializeClass, 1)))
            return NULL;
          return t_CustomScoreProvider::wrap_Object(CustomScoreProvider(((t_CustomScoreProvider *) arg)->object.this$));
        }
        static PyObject *t_CustomScoreProvider_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CustomScoreProvider::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CustomScoreProvider_init_(t_CustomScoreProvider *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          CustomScoreProvider object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            INT_CALL(object = CustomScoreProvider(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CustomScoreProvider_customExplain(t_CustomScoreProvider *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              jint a0;
              ::org::apache::lucene::search::Explanation a1((jobject) NULL);
              ::org::apache::lucene::search::Explanation a2((jobject) NULL);
              ::org::apache::lucene::search::Explanation result((jobject) NULL);

              if (!parseArgs(args, "Ikk", ::org::apache::lucene::search::Explanation::initializeClass, ::org::apache::lucene::search::Explanation::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.customExplain(a0, a1, a2));
                return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
              }
            }
            {
              jint a0;
              ::org::apache::lucene::search::Explanation a1((jobject) NULL);
              JArray< ::org::apache::lucene::search::Explanation > a2((jobject) NULL);
              ::org::apache::lucene::search::Explanation result((jobject) NULL);

              if (!parseArgs(args, "Ik[k", ::org::apache::lucene::search::Explanation::initializeClass, ::org::apache::lucene::search::Explanation::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.customExplain(a0, a1, a2));
                return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "customExplain", args);
          return NULL;
        }

        static PyObject *t_CustomScoreProvider_customScore(t_CustomScoreProvider *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              jint a0;
              jfloat a1;
              jfloat a2;
              jfloat result;

              if (!parseArgs(args, "IFF", &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.customScore(a0, a1, a2));
                return PyFloat_FromDouble((double) result);
              }
            }
            {
              jint a0;
              jfloat a1;
              JArray< jfloat > a2((jobject) NULL);
              jfloat result;

              if (!parseArgs(args, "IF[F", &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.customScore(a0, a1, a2));
                return PyFloat_FromDouble((double) result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "customScore", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/Lucene43NGramTokenizer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *Lucene43NGramTokenizer::class$ = NULL;
          jmethodID *Lucene43NGramTokenizer::mids$ = NULL;
          bool Lucene43NGramTokenizer::live$ = false;
          jint Lucene43NGramTokenizer::DEFAULT_MAX_NGRAM_SIZE = (jint) 0;
          jint Lucene43NGramTokenizer::DEFAULT_MIN_NGRAM_SIZE = (jint) 0;

          jclass Lucene43NGramTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/Lucene43NGramTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_92513554] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;II)V");
              mids$[mid_init$_fb18a8f8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;II)V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_NGRAM_SIZE = env->getStaticIntField(cls, "DEFAULT_MAX_NGRAM_SIZE");
              DEFAULT_MIN_NGRAM_SIZE = env->getStaticIntField(cls, "DEFAULT_MIN_NGRAM_SIZE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene43NGramTokenizer::Lucene43NGramTokenizer(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          Lucene43NGramTokenizer::Lucene43NGramTokenizer(const ::java::io::Reader & a0, jint a1, jint a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_92513554, a0.this$, a1, a2)) {}

          Lucene43NGramTokenizer::Lucene43NGramTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1, jint a2, jint a3) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_fb18a8f8, a0.this$, a1.this$, a2, a3)) {}

          void Lucene43NGramTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean Lucene43NGramTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void Lucene43NGramTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_Lucene43NGramTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene43NGramTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene43NGramTokenizer_init_(t_Lucene43NGramTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene43NGramTokenizer_end(t_Lucene43NGramTokenizer *self, PyObject *args);
          static PyObject *t_Lucene43NGramTokenizer_incrementToken(t_Lucene43NGramTokenizer *self, PyObject *args);
          static PyObject *t_Lucene43NGramTokenizer_reset(t_Lucene43NGramTokenizer *self, PyObject *args);

          static PyMethodDef t_Lucene43NGramTokenizer__methods_[] = {
            DECLARE_METHOD(t_Lucene43NGramTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene43NGramTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene43NGramTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_Lucene43NGramTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_Lucene43NGramTokenizer, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene43NGramTokenizer, t_Lucene43NGramTokenizer, ::org::apache::lucene::analysis::Tokenizer, Lucene43NGramTokenizer, t_Lucene43NGramTokenizer_init_, 0, 0, 0, 0, 0);

          void t_Lucene43NGramTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene43NGramTokenizer), module, "Lucene43NGramTokenizer", 0);
          }

          void t_Lucene43NGramTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene43NGramTokenizer).tp_dict, "class_", make_descriptor(Lucene43NGramTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene43NGramTokenizer).tp_dict, "wrapfn_", make_descriptor(t_Lucene43NGramTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene43NGramTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene43NGramTokenizer::initializeClass);
            PyDict_SetItemString(PY_TYPE(Lucene43NGramTokenizer).tp_dict, "DEFAULT_MAX_NGRAM_SIZE", make_descriptor(Lucene43NGramTokenizer::DEFAULT_MAX_NGRAM_SIZE));
            PyDict_SetItemString(PY_TYPE(Lucene43NGramTokenizer).tp_dict, "DEFAULT_MIN_NGRAM_SIZE", make_descriptor(Lucene43NGramTokenizer::DEFAULT_MIN_NGRAM_SIZE));
          }

          static PyObject *t_Lucene43NGramTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene43NGramTokenizer::initializeClass, 1)))
              return NULL;
            return t_Lucene43NGramTokenizer::wrap_Object(Lucene43NGramTokenizer(((t_Lucene43NGramTokenizer *) arg)->object.this$));
          }
          static PyObject *t_Lucene43NGramTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene43NGramTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene43NGramTokenizer_init_(t_Lucene43NGramTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                Lucene43NGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = Lucene43NGramTokenizer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::java::io::Reader a0((jobject) NULL);
                jint a1;
                jint a2;
                Lucene43NGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kII", ::java::io::Reader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = Lucene43NGramTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                jint a2;
                jint a3;
                Lucene43NGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkII", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = Lucene43NGramTokenizer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene43NGramTokenizer_end(t_Lucene43NGramTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene43NGramTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_Lucene43NGramTokenizer_incrementToken(t_Lucene43NGramTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(Lucene43NGramTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_Lucene43NGramTokenizer_reset(t_Lucene43NGramTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene43NGramTokenizer), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/MonotonicBlockPackedWriter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *MonotonicBlockPackedWriter::class$ = NULL;
          jmethodID *MonotonicBlockPackedWriter::mids$ = NULL;
          bool MonotonicBlockPackedWriter::live$ = false;

          jclass MonotonicBlockPackedWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/MonotonicBlockPackedWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f4663c33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/DataOutput;I)V");
              mids$[mid_add_0ee6df2f] = env->getMethodID(cls, "add", "(J)V");
              mids$[mid_flush_54c6a166] = env->getMethodID(cls, "flush", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MonotonicBlockPackedWriter::MonotonicBlockPackedWriter(const ::org::apache::lucene::store::DataOutput & a0, jint a1) : ::org::apache::lucene::util::packed::AbstractBlockPackedWriter(env->newObject(initializeClass, &mids$, mid_init$_f4663c33, a0.this$, a1)) {}

          void MonotonicBlockPackedWriter::add(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_add_0ee6df2f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_MonotonicBlockPackedWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MonotonicBlockPackedWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MonotonicBlockPackedWriter_init_(t_MonotonicBlockPackedWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MonotonicBlockPackedWriter_add(t_MonotonicBlockPackedWriter *self, PyObject *args);

          static PyMethodDef t_MonotonicBlockPackedWriter__methods_[] = {
            DECLARE_METHOD(t_MonotonicBlockPackedWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MonotonicBlockPackedWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MonotonicBlockPackedWriter, add, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MonotonicBlockPackedWriter, t_MonotonicBlockPackedWriter, ::org::apache::lucene::util::packed::AbstractBlockPackedWriter, MonotonicBlockPackedWriter, t_MonotonicBlockPackedWriter_init_, 0, 0, 0, 0, 0);

          void t_MonotonicBlockPackedWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(MonotonicBlockPackedWriter), module, "MonotonicBlockPackedWriter", 0);
          }

          void t_MonotonicBlockPackedWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MonotonicBlockPackedWriter).tp_dict, "class_", make_descriptor(MonotonicBlockPackedWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MonotonicBlockPackedWriter).tp_dict, "wrapfn_", make_descriptor(t_MonotonicBlockPackedWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MonotonicBlockPackedWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MonotonicBlockPackedWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MonotonicBlockPackedWriter::initializeClass, 1)))
              return NULL;
            return t_MonotonicBlockPackedWriter::wrap_Object(MonotonicBlockPackedWriter(((t_MonotonicBlockPackedWriter *) arg)->object.this$));
          }
          static PyObject *t_MonotonicBlockPackedWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MonotonicBlockPackedWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MonotonicBlockPackedWriter_init_(t_MonotonicBlockPackedWriter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
            jint a1;
            MonotonicBlockPackedWriter object((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
            {
              INT_CALL(object = MonotonicBlockPackedWriter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_MonotonicBlockPackedWriter_add(t_MonotonicBlockPackedWriter *self, PyObject *args)
          {
            jlong a0;

            if (!parseArgs(args, "J", &a0))
            {
              OBJ_CALL(self->object.add(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(MonotonicBlockPackedWriter), (PyObject *) self, "add", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Runtime.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/Thread.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/Process.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Runtime::class$ = NULL;
    jmethodID *Runtime::mids$ = NULL;
    bool Runtime::live$ = false;

    jclass Runtime::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Runtime");

        mids$ = new jmethodID[max_mid];
        mids$[mid_addShutdownHook_cfc68b69] = env->getMethodID(cls, "addShutdownHook", "(Ljava/lang/Thread;)V");
        mids$[mid_availableProcessors_54c6a179] = env->getMethodID(cls, "availableProcessors", "()I");
        mids$[mid_exec_cb215688] = env->getMethodID(cls, "exec", "([Ljava/lang/String;)Ljava/lang/Process;");
        mids$[mid_exec_a3a0dfc8] = env->getMethodID(cls, "exec", "(Ljava/lang/String;)Ljava/lang/Process;");
        mids$[mid_exec_d0c45a12] = env->getMethodID(cls, "exec", "([Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Process;");
        mids$[mid_exec_dfe32e32] = env->getMethodID(cls, "exec", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Process;");
        mids$[mid_exec_e1ed077f] = env->getMethodID(cls, "exec", "(Ljava/lang/String;[Ljava/lang/String;Ljava/io/File;)Ljava/lang/Process;");
        mids$[mid_exec_5726a223] = env->getMethodID(cls, "exec", "([Ljava/lang/String;[Ljava/lang/String;Ljava/io/File;)Ljava/lang/Process;");
        mids$[mid_exit_39c7bd3c] = env->getMethodID(cls, "exit", "(I)V");
        mids$[mid_freeMemory_54c6a17a] = env->getMethodID(cls, "freeMemory", "()J");
        mids$[mid_gc_54c6a166] = env->getMethodID(cls, "gc", "()V");
        mids$[mid_getLocalizedInputStream_04932eef] = env->getMethodID(cls, "getLocalizedInputStream", "(Ljava/io/InputStream;)Ljava/io/InputStream;");
        mids$[mid_getLocalizedOutputStream_97714a3f] = env->getMethodID(cls, "getLocalizedOutputStream", "(Ljava/io/OutputStream;)Ljava/io/OutputStream;");
        mids$[mid_getRuntime_620bf90f] = env->getStaticMethodID(cls, "getRuntime", "()Ljava/lang/Runtime;");
        mids$[mid_halt_39c7bd3c] = env->getMethodID(cls, "halt", "(I)V");
        mids$[mid_load_5fdc3f48] = env->getMethodID(cls, "load", "(Ljava/lang/String;)V");
        mids$[mid_loadLibrary_5fdc3f48] = env->getMethodID(cls, "loadLibrary", "(Ljava/lang/String;)V");
        mids$[mid_maxMemory_54c6a17a] = env->getMethodID(cls, "maxMemory", "()J");
        mids$[mid_removeShutdownHook_cfc68b65] = env->getMethodID(cls, "removeShutdownHook", "(Ljava/lang/Thread;)Z");
        mids$[mid_runFinalization_54c6a166] = env->getMethodID(cls, "runFinalization", "()V");
        mids$[mid_runFinalizersOnExit_bb0c767f] = env->getStaticMethodID(cls, "runFinalizersOnExit", "(Z)V");
        mids$[mid_totalMemory_54c6a17a] = env->getMethodID(cls, "totalMemory", "()J");
        mids$[mid_traceInstructions_bb0c767f] = env->getMethodID(cls, "traceInstructions", "(Z)V");
        mids$[mid_traceMethodCalls_bb0c767f] = env->getMethodID(cls, "traceMethodCalls", "(Z)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    void Runtime::addShutdownHook(const ::java::lang::Thread & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_addShutdownHook_cfc68b69], a0.this$);
    }

    jint Runtime::availableProcessors() const
    {
      return env->callIntMethod(this$, mids$[mid_availableProcessors_54c6a179]);
    }

    ::java::lang::Process Runtime::exec(const JArray< ::java::lang::String > & a0) const
    {
      return ::java::lang::Process(env->callObjectMethod(this$, mids$[mid_exec_cb215688], a0.this$));
    }

    ::java::lang::Process Runtime::exec(const ::java::lang::String & a0) const
    {
      return ::java::lang::Process(env->callObjectMethod(this$, mids$[mid_exec_a3a0dfc8], a0.this$));
    }

    ::java::lang::Process Runtime::exec(const JArray< ::java::lang::String > & a0, const JArray< ::java::lang::String > & a1) const
    {
      return ::java::lang::Process(env->callObjectMethod(this$, mids$[mid_exec_d0c45a12], a0.this$, a1.this$));
    }

    ::java::lang::Process Runtime::exec(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) const
    {
      return ::java::lang::Process(env->callObjectMethod(this$, mids$[mid_exec_dfe32e32], a0.this$, a1.this$));
    }

    ::java::lang::Process Runtime::exec(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1, const ::java::io::File & a2) const
    {
      return ::java::lang::Process(env->callObjectMethod(this$, mids$[mid_exec_e1ed077f], a0.this$, a1.this$, a2.this$));
    }

    ::java::lang::Process Runtime::exec(const JArray< ::java::lang::String > & a0, const JArray< ::java::lang::String > & a1, const ::java::io::File & a2) const
    {
      return ::java::lang::Process(env->callObjectMethod(this$, mids$[mid_exec_5726a223], a0.this$, a1.this$, a2.this$));
    }

    void Runtime::exit(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_exit_39c7bd3c], a0);
    }

    jlong Runtime::freeMemory() const
    {
      return env->callLongMethod(this$, mids$[mid_freeMemory_54c6a17a]);
    }

    void Runtime::gc() const
    {
      env->callVoidMethod(this$, mids$[mid_gc_54c6a166]);
    }

    ::java::io::InputStream Runtime::getLocalizedInputStream(const ::java::io::InputStream & a0) const
    {
      return ::java::io::InputStream(env->callObjectMethod(this$, mids$[mid_getLocalizedInputStream_04932eef], a0.this$));
    }

    ::java::io::OutputStream Runtime::getLocalizedOutputStream(const ::java::io::OutputStream & a0) const
    {
      return ::java::io::OutputStream(env->callObjectMethod(this$, mids$[mid_getLocalizedOutputStream_97714a3f], a0.this$));
    }

    Runtime Runtime::getRuntime()
    {
      jclass cls = env->getClass(initializeClass);
      return Runtime(env->callStaticObjectMethod(cls, mids$[mid_getRuntime_620bf90f]));
    }

    void Runtime::halt(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_halt_39c7bd3c], a0);
    }

    void Runtime::load(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_load_5fdc3f48], a0.this$);
    }

    void Runtime::loadLibrary(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_loadLibrary_5fdc3f48], a0.this$);
    }

    jlong Runtime::maxMemory() const
    {
      return env->callLongMethod(this$, mids$[mid_maxMemory_54c6a17a]);
    }

    jboolean Runtime::removeShutdownHook(const ::java::lang::Thread & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_removeShutdownHook_cfc68b65], a0.this$);
    }

    void Runtime::runFinalization() const
    {
      env->callVoidMethod(this$, mids$[mid_runFinalization_54c6a166]);
    }

    void Runtime::runFinalizersOnExit(jboolean a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_runFinalizersOnExit_bb0c767f], a0);
    }

    jlong Runtime::totalMemory() const
    {
      return env->callLongMethod(this$, mids$[mid_totalMemory_54c6a17a]);
    }

    void Runtime::traceInstructions(jboolean a0) const
    {
      env->callVoidMethod(this$, mids$[mid_traceInstructions_bb0c767f], a0);
    }

    void Runtime::traceMethodCalls(jboolean a0) const
    {
      env->callVoidMethod(this$, mids$[mid_traceMethodCalls_bb0c767f], a0);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Runtime_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Runtime_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Runtime_addShutdownHook(t_Runtime *self, PyObject *arg);
    static PyObject *t_Runtime_availableProcessors(t_Runtime *self);
    static PyObject *t_Runtime_exec(t_Runtime *self, PyObject *args);
    static PyObject *t_Runtime_exit(t_Runtime *self, PyObject *arg);
    static PyObject *t_Runtime_freeMemory(t_Runtime *self);
    static PyObject *t_Runtime_gc(t_Runtime *self);
    static PyObject *t_Runtime_getLocalizedInputStream(t_Runtime *self, PyObject *arg);
    static PyObject *t_Runtime_getLocalizedOutputStream(t_Runtime *self, PyObject *arg);
    static PyObject *t_Runtime_getRuntime(PyTypeObject *type);
    static PyObject *t_Runtime_halt(t_Runtime *self, PyObject *arg);
    static PyObject *t_Runtime_load(t_Runtime *self, PyObject *arg);
    static PyObject *t_Runtime_loadLibrary(t_Runtime *self, PyObject *arg);
    static PyObject *t_Runtime_maxMemory(t_Runtime *self);
    static PyObject *t_Runtime_removeShutdownHook(t_Runtime *self, PyObject *arg);
    static PyObject *t_Runtime_runFinalization(t_Runtime *self);
    static PyObject *t_Runtime_runFinalizersOnExit(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Runtime_totalMemory(t_Runtime *self);
    static PyObject *t_Runtime_traceInstructions(t_Runtime *self, PyObject *arg);
    static PyObject *t_Runtime_traceMethodCalls(t_Runtime *self, PyObject *arg);
    static PyObject *t_Runtime_get__runtime(t_Runtime *self, void *data);
    static PyGetSetDef t_Runtime__fields_[] = {
      DECLARE_GET_FIELD(t_Runtime, runtime),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Runtime__methods_[] = {
      DECLARE_METHOD(t_Runtime, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Runtime, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Runtime, addShutdownHook, METH_O),
      DECLARE_METHOD(t_Runtime, availableProcessors, METH_NOARGS),
      DECLARE_METHOD(t_Runtime, exec, METH_VARARGS),
      DECLARE_METHOD(t_Runtime, exit, METH_O),
      DECLARE_METHOD(t_Runtime, freeMemory, METH_NOARGS),
      DECLARE_METHOD(t_Runtime, gc, METH_NOARGS),
      DECLARE_METHOD(t_Runtime, getLocalizedInputStream, METH_O),
      DECLARE_METHOD(t_Runtime, getLocalizedOutputStream, METH_O),
      DECLARE_METHOD(t_Runtime, getRuntime, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Runtime, halt, METH_O),
      DECLARE_METHOD(t_Runtime, load, METH_O),
      DECLARE_METHOD(t_Runtime, loadLibrary, METH_O),
      DECLARE_METHOD(t_Runtime, maxMemory, METH_NOARGS),
      DECLARE_METHOD(t_Runtime, removeShutdownHook, METH_O),
      DECLARE_METHOD(t_Runtime, runFinalization, METH_NOARGS),
      DECLARE_METHOD(t_Runtime, runFinalizersOnExit, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Runtime, totalMemory, METH_NOARGS),
      DECLARE_METHOD(t_Runtime, traceInstructions, METH_O),
      DECLARE_METHOD(t_Runtime, traceMethodCalls, METH_O),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Runtime, t_Runtime, ::java::lang::Object, Runtime, abstract_init, 0, 0, t_Runtime__fields_, 0, 0);

    void t_Runtime::install(PyObject *module)
    {
      installType(&PY_TYPE(Runtime), module, "Runtime", 0);
    }

    void t_Runtime::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Runtime).tp_dict, "class_", make_descriptor(Runtime::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Runtime).tp_dict, "wrapfn_", make_descriptor(t_Runtime::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Runtime).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Runtime_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Runtime::initializeClass, 1)))
        return NULL;
      return t_Runtime::wrap_Object(Runtime(((t_Runtime *) arg)->object.this$));
    }
    static PyObject *t_Runtime_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Runtime::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Runtime_addShutdownHook(t_Runtime *self, PyObject *arg)
    {
      ::java::lang::Thread a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::lang::Thread::initializeClass, &a0))
      {
        OBJ_CALL(self->object.addShutdownHook(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "addShutdownHook", arg);
      return NULL;
    }

    static PyObject *t_Runtime_availableProcessors(t_Runtime *self)
    {
      jint result;
      OBJ_CALL(result = self->object.availableProcessors());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_Runtime_exec(t_Runtime *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          JArray< ::java::lang::String > a0((jobject) NULL);
          ::java::lang::Process result((jobject) NULL);

          if (!parseArgs(args, "[s", &a0))
          {
            OBJ_CALL(result = self->object.exec(a0));
            return ::java::lang::t_Process::wrap_Object(result);
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Process result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.exec(a0));
            return ::java::lang::t_Process::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          JArray< ::java::lang::String > a0((jobject) NULL);
          JArray< ::java::lang::String > a1((jobject) NULL);
          ::java::lang::Process result((jobject) NULL);

          if (!parseArgs(args, "[s[s", &a0, &a1))
          {
            OBJ_CALL(result = self->object.exec(a0, a1));
            return ::java::lang::t_Process::wrap_Object(result);
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::java::lang::String > a1((jobject) NULL);
          ::java::lang::Process result((jobject) NULL);

          if (!parseArgs(args, "s[s", &a0, &a1))
          {
            OBJ_CALL(result = self->object.exec(a0, a1));
            return ::java::lang::t_Process::wrap_Object(result);
          }
        }
        break;
       case 3:
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::java::lang::String > a1((jobject) NULL);
          ::java::io::File a2((jobject) NULL);
          ::java::lang::Process result((jobject) NULL);

          if (!parseArgs(args, "s[sk", ::java::io::File::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.exec(a0, a1, a2));
            return ::java::lang::t_Process::wrap_Object(result);
          }
        }
        {
          JArray< ::java::lang::String > a0((jobject) NULL);
          JArray< ::java::lang::String > a1((jobject) NULL);
          ::java::io::File a2((jobject) NULL);
          ::java::lang::Process result((jobject) NULL);

          if (!parseArgs(args, "[s[sk", ::java::io::File::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.exec(a0, a1, a2));
            return ::java::lang::t_Process::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "exec", args);
      return NULL;
    }

    static PyObject *t_Runtime_exit(t_Runtime *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.exit(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "exit", arg);
      return NULL;
    }

    static PyObject *t_Runtime_freeMemory(t_Runtime *self)
    {
      jlong result;
      OBJ_CALL(result = self->object.freeMemory());
      return PyLong_FromLongLong((PY_LONG_LONG) result);
    }

    static PyObject *t_Runtime_gc(t_Runtime *self)
    {
      OBJ_CALL(self->object.gc());
      Py_RETURN_NONE;
    }

    static PyObject *t_Runtime_getLocalizedInputStream(t_Runtime *self, PyObject *arg)
    {
      ::java::io::InputStream a0((jobject) NULL);
      ::java::io::InputStream result((jobject) NULL);

      if (!parseArg(arg, "k", ::java::io::InputStream::initializeClass, &a0))
      {
        OBJ_CALL(result = self->object.getLocalizedInputStream(a0));
        return ::java::io::t_InputStream::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "getLocalizedInputStream", arg);
      return NULL;
    }

    static PyObject *t_Runtime_getLocalizedOutputStream(t_Runtime *self, PyObject *arg)
    {
      ::java::io::OutputStream a0((jobject) NULL);
      ::java::io::OutputStream result((jobject) NULL);

      if (!parseArg(arg, "k", ::java::io::OutputStream::initializeClass, &a0))
      {
        OBJ_CALL(result = self->object.getLocalizedOutputStream(a0));
        return ::java::io::t_OutputStream::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "getLocalizedOutputStream", arg);
      return NULL;
    }

    static PyObject *t_Runtime_getRuntime(PyTypeObject *type)
    {
      Runtime result((jobject) NULL);
      OBJ_CALL(result = ::java::lang::Runtime::getRuntime());
      return t_Runtime::wrap_Object(result);
    }

    static PyObject *t_Runtime_halt(t_Runtime *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.halt(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "halt", arg);
      return NULL;
    }

    static PyObject *t_Runtime_load(t_Runtime *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.load(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "load", arg);
      return NULL;
    }

    static PyObject *t_Runtime_loadLibrary(t_Runtime *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.loadLibrary(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "loadLibrary", arg);
      return NULL;
    }

    static PyObject *t_Runtime_maxMemory(t_Runtime *self)
    {
      jlong result;
      OBJ_CALL(result = self->object.maxMemory());
      return PyLong_FromLongLong((PY_LONG_LONG) result);
    }

    static PyObject *t_Runtime_removeShutdownHook(t_Runtime *self, PyObject *arg)
    {
      ::java::lang::Thread a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "k", ::java::lang::Thread::initializeClass, &a0))
      {
        OBJ_CALL(result = self->object.removeShutdownHook(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "removeShutdownHook", arg);
      return NULL;
    }

    static PyObject *t_Runtime_runFinalization(t_Runtime *self)
    {
      OBJ_CALL(self->object.runFinalization());
      Py_RETURN_NONE;
    }

    static PyObject *t_Runtime_runFinalizersOnExit(PyTypeObject *type, PyObject *arg)
    {
      jboolean a0;

      if (!parseArg(arg, "Z", &a0))
      {
        OBJ_CALL(::java::lang::Runtime::runFinalizersOnExit(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "runFinalizersOnExit", arg);
      return NULL;
    }

    static PyObject *t_Runtime_totalMemory(t_Runtime *self)
    {
      jlong result;
      OBJ_CALL(result = self->object.totalMemory());
      return PyLong_FromLongLong((PY_LONG_LONG) result);
    }

    static PyObject *t_Runtime_traceInstructions(t_Runtime *self, PyObject *arg)
    {
      jboolean a0;

      if (!parseArg(arg, "Z", &a0))
      {
        OBJ_CALL(self->object.traceInstructions(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "traceInstructions", arg);
      return NULL;
    }

    static PyObject *t_Runtime_traceMethodCalls(t_Runtime *self, PyObject *arg)
    {
      jboolean a0;

      if (!parseArg(arg, "Z", &a0))
      {
        OBJ_CALL(self->object.traceMethodCalls(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "traceMethodCalls", arg);
      return NULL;
    }

    static PyObject *t_Runtime_get__runtime(t_Runtime *self, void *data)
    {
      Runtime value((jobject) NULL);
      OBJ_CALL(value = self->object.getRuntime());
      return t_Runtime::wrap_Object(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/NormsFormat.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/DocValuesConsumer.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *NormsFormat::class$ = NULL;
        jmethodID *NormsFormat::mids$ = NULL;
        bool NormsFormat::live$ = false;

        jclass NormsFormat::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/NormsFormat");

            mids$ = new jmethodID[max_mid];
            mids$[mid_normsConsumer_025deb44] = env->getMethodID(cls, "normsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/DocValuesConsumer;");
            mids$[mid_normsProducer_9b0d4e4a] = env->getMethodID(cls, "normsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/DocValuesProducer;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::codecs::DocValuesConsumer NormsFormat::normsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
        {
          return ::org::apache::lucene::codecs::DocValuesConsumer(env->callObjectMethod(this$, mids$[mid_normsConsumer_025deb44], a0.this$));
        }

        ::org::apache::lucene::codecs::DocValuesProducer NormsFormat::normsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
        {
          return ::org::apache::lucene::codecs::DocValuesProducer(env->callObjectMethod(this$, mids$[mid_normsProducer_9b0d4e4a], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_NormsFormat_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NormsFormat_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NormsFormat_normsConsumer(t_NormsFormat *self, PyObject *arg);
        static PyObject *t_NormsFormat_normsProducer(t_NormsFormat *self, PyObject *arg);

        static PyMethodDef t_NormsFormat__methods_[] = {
          DECLARE_METHOD(t_NormsFormat, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NormsFormat, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NormsFormat, normsConsumer, METH_O),
          DECLARE_METHOD(t_NormsFormat, normsProducer, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NormsFormat, t_NormsFormat, ::java::lang::Object, NormsFormat, abstract_init, 0, 0, 0, 0, 0);

        void t_NormsFormat::install(PyObject *module)
        {
          installType(&PY_TYPE(NormsFormat), module, "NormsFormat", 0);
        }

        void t_NormsFormat::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NormsFormat).tp_dict, "class_", make_descriptor(NormsFormat::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NormsFormat).tp_dict, "wrapfn_", make_descriptor(t_NormsFormat::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NormsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NormsFormat_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NormsFormat::initializeClass, 1)))
            return NULL;
          return t_NormsFormat::wrap_Object(NormsFormat(((t_NormsFormat *) arg)->object.this$));
        }
        static PyObject *t_NormsFormat_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NormsFormat::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NormsFormat_normsConsumer(t_NormsFormat *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
          ::org::apache::lucene::codecs::DocValuesConsumer result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.normsConsumer(a0));
            return ::org::apache::lucene::codecs::t_DocValuesConsumer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "normsConsumer", arg);
          return NULL;
        }

        static PyObject *t_NormsFormat_normsProducer(t_NormsFormat *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
          ::org::apache::lucene::codecs::DocValuesProducer result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.normsProducer(a0));
            return ::org::apache::lucene::codecs::t_DocValuesProducer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "normsProducer", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/DutchStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *DutchStemmer::class$ = NULL;
        jmethodID *DutchStemmer::mids$ = NULL;
        bool DutchStemmer::live$ = false;

        jclass DutchStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/DutchStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DutchStemmer::DutchStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean DutchStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint DutchStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean DutchStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_DutchStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DutchStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DutchStemmer_init_(t_DutchStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DutchStemmer_equals(t_DutchStemmer *self, PyObject *args);
        static PyObject *t_DutchStemmer_hashCode(t_DutchStemmer *self, PyObject *args);
        static PyObject *t_DutchStemmer_stem(t_DutchStemmer *self, PyObject *args);

        static PyMethodDef t_DutchStemmer__methods_[] = {
          DECLARE_METHOD(t_DutchStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DutchStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DutchStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_DutchStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_DutchStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DutchStemmer, t_DutchStemmer, ::org::tartarus::snowball::SnowballProgram, DutchStemmer, t_DutchStemmer_init_, 0, 0, 0, 0, 0);

        void t_DutchStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(DutchStemmer), module, "DutchStemmer", 0);
        }

        void t_DutchStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DutchStemmer).tp_dict, "class_", make_descriptor(DutchStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DutchStemmer).tp_dict, "wrapfn_", make_descriptor(t_DutchStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DutchStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DutchStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DutchStemmer::initializeClass, 1)))
            return NULL;
          return t_DutchStemmer::wrap_Object(DutchStemmer(((t_DutchStemmer *) arg)->object.this$));
        }
        static PyObject *t_DutchStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DutchStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DutchStemmer_init_(t_DutchStemmer *self, PyObject *args, PyObject *kwds)
        {
          DutchStemmer object((jobject) NULL);

          INT_CALL(object = DutchStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_DutchStemmer_equals(t_DutchStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(DutchStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_DutchStemmer_hashCode(t_DutchStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(DutchStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_DutchStemmer_stem(t_DutchStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(DutchStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/KeepOnlyLastCommitDeletionPolicy.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "java/lang/Class.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *KeepOnlyLastCommitDeletionPolicy::class$ = NULL;
        jmethodID *KeepOnlyLastCommitDeletionPolicy::mids$ = NULL;
        bool KeepOnlyLastCommitDeletionPolicy::live$ = false;

        jclass KeepOnlyLastCommitDeletionPolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/KeepOnlyLastCommitDeletionPolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_onCommit_1fde8fc3] = env->getMethodID(cls, "onCommit", "(Ljava/util/List;)V");
            mids$[mid_onInit_1fde8fc3] = env->getMethodID(cls, "onInit", "(Ljava/util/List;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        KeepOnlyLastCommitDeletionPolicy::KeepOnlyLastCommitDeletionPolicy() : ::org::apache::lucene::index::IndexDeletionPolicy(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void KeepOnlyLastCommitDeletionPolicy::onCommit(const ::java::util::List & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_onCommit_1fde8fc3], a0.this$);
        }

        void KeepOnlyLastCommitDeletionPolicy::onInit(const ::java::util::List & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_onInit_1fde8fc3], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_KeepOnlyLastCommitDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_KeepOnlyLastCommitDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_KeepOnlyLastCommitDeletionPolicy_init_(t_KeepOnlyLastCommitDeletionPolicy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_KeepOnlyLastCommitDeletionPolicy_onCommit(t_KeepOnlyLastCommitDeletionPolicy *self, PyObject *args);
        static PyObject *t_KeepOnlyLastCommitDeletionPolicy_onInit(t_KeepOnlyLastCommitDeletionPolicy *self, PyObject *args);

        static PyMethodDef t_KeepOnlyLastCommitDeletionPolicy__methods_[] = {
          DECLARE_METHOD(t_KeepOnlyLastCommitDeletionPolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_KeepOnlyLastCommitDeletionPolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_KeepOnlyLastCommitDeletionPolicy, onCommit, METH_VARARGS),
          DECLARE_METHOD(t_KeepOnlyLastCommitDeletionPolicy, onInit, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(KeepOnlyLastCommitDeletionPolicy, t_KeepOnlyLastCommitDeletionPolicy, ::org::apache::lucene::index::IndexDeletionPolicy, KeepOnlyLastCommitDeletionPolicy, t_KeepOnlyLastCommitDeletionPolicy_init_, 0, 0, 0, 0, 0);

        void t_KeepOnlyLastCommitDeletionPolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(KeepOnlyLastCommitDeletionPolicy), module, "KeepOnlyLastCommitDeletionPolicy", 0);
        }

        void t_KeepOnlyLastCommitDeletionPolicy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(KeepOnlyLastCommitDeletionPolicy).tp_dict, "class_", make_descriptor(KeepOnlyLastCommitDeletionPolicy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(KeepOnlyLastCommitDeletionPolicy).tp_dict, "wrapfn_", make_descriptor(t_KeepOnlyLastCommitDeletionPolicy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(KeepOnlyLastCommitDeletionPolicy).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_KeepOnlyLastCommitDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, KeepOnlyLastCommitDeletionPolicy::initializeClass, 1)))
            return NULL;
          return t_KeepOnlyLastCommitDeletionPolicy::wrap_Object(KeepOnlyLastCommitDeletionPolicy(((t_KeepOnlyLastCommitDeletionPolicy *) arg)->object.this$));
        }
        static PyObject *t_KeepOnlyLastCommitDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, KeepOnlyLastCommitDeletionPolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_KeepOnlyLastCommitDeletionPolicy_init_(t_KeepOnlyLastCommitDeletionPolicy *self, PyObject *args, PyObject *kwds)
        {
          KeepOnlyLastCommitDeletionPolicy object((jobject) NULL);

          INT_CALL(object = KeepOnlyLastCommitDeletionPolicy());
          self->object = object;

          return 0;
        }

        static PyObject *t_KeepOnlyLastCommitDeletionPolicy_onCommit(t_KeepOnlyLastCommitDeletionPolicy *self, PyObject *args)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.onCommit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(KeepOnlyLastCommitDeletionPolicy), (PyObject *) self, "onCommit", args, 2);
        }

        static PyObject *t_KeepOnlyLastCommitDeletionPolicy_onInit(t_KeepOnlyLastCommitDeletionPolicy *self, PyObject *args)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.onInit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(KeepOnlyLastCommitDeletionPolicy), (PyObject *) self, "onInit", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/builders/QueryTreeBuilder.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/builders/QueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace builders {

              ::java::lang::Class *QueryTreeBuilder::class$ = NULL;
              jmethodID *QueryTreeBuilder::mids$ = NULL;
              bool QueryTreeBuilder::live$ = false;
              ::java::lang::String *QueryTreeBuilder::QUERY_TREE_BUILDER_TAGID = NULL;

              jclass QueryTreeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/builders/QueryTreeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_30efaf9c] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Ljava/lang/Object;");
                  mids$[mid_setBuilder_868de661] = env->getMethodID(cls, "setBuilder", "(Ljava/lang/CharSequence;Lorg/apache/lucene/queryparser/flexible/core/builders/QueryBuilder;)V");
                  mids$[mid_setBuilder_ba566e4f] = env->getMethodID(cls, "setBuilder", "(Ljava/lang/Class;Lorg/apache/lucene/queryparser/flexible/core/builders/QueryBuilder;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  cls = (jclass) class$->this$;

                  QUERY_TREE_BUILDER_TAGID = new ::java::lang::String(env->getStaticObjectField(cls, "QUERY_TREE_BUILDER_TAGID", "Ljava/lang/String;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              QueryTreeBuilder::QueryTreeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::java::lang::Object QueryTreeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_build_30efaf9c], a0.this$));
              }

              void QueryTreeBuilder::setBuilder(const ::java::lang::CharSequence & a0, const ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder & a1) const
              {
                env->callVoidMethod(this$, mids$[mid_setBuilder_868de661], a0.this$, a1.this$);
              }

              void QueryTreeBuilder::setBuilder(const ::java::lang::Class & a0, const ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder & a1) const
              {
                env->callVoidMethod(this$, mids$[mid_setBuilder_ba566e4f], a0.this$, a1.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace builders {
              static PyObject *t_QueryTreeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryTreeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_QueryTreeBuilder_init_(t_QueryTreeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_QueryTreeBuilder_build(t_QueryTreeBuilder *self, PyObject *arg);
              static PyObject *t_QueryTreeBuilder_setBuilder(t_QueryTreeBuilder *self, PyObject *args);

              static PyMethodDef t_QueryTreeBuilder__methods_[] = {
                DECLARE_METHOD(t_QueryTreeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryTreeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryTreeBuilder, build, METH_O),
                DECLARE_METHOD(t_QueryTreeBuilder, setBuilder, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(QueryTreeBuilder, t_QueryTreeBuilder, ::java::lang::Object, QueryTreeBuilder, t_QueryTreeBuilder_init_, 0, 0, 0, 0, 0);

              void t_QueryTreeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(QueryTreeBuilder), module, "QueryTreeBuilder", 0);
              }

              void t_QueryTreeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(QueryTreeBuilder).tp_dict, "class_", make_descriptor(QueryTreeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(QueryTreeBuilder).tp_dict, "wrapfn_", make_descriptor(t_QueryTreeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(QueryTreeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
                env->getClass(QueryTreeBuilder::initializeClass);
                PyDict_SetItemString(PY_TYPE(QueryTreeBuilder).tp_dict, "QUERY_TREE_BUILDER_TAGID", make_descriptor(j2p(*QueryTreeBuilder::QUERY_TREE_BUILDER_TAGID)));
              }

              static PyObject *t_QueryTreeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, QueryTreeBuilder::initializeClass, 1)))
                  return NULL;
                return t_QueryTreeBuilder::wrap_Object(QueryTreeBuilder(((t_QueryTreeBuilder *) arg)->object.this$));
              }
              static PyObject *t_QueryTreeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, QueryTreeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_QueryTreeBuilder_init_(t_QueryTreeBuilder *self, PyObject *args, PyObject *kwds)
              {
                QueryTreeBuilder object((jobject) NULL);

                INT_CALL(object = QueryTreeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_QueryTreeBuilder_build(t_QueryTreeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::java::lang::Object result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::java::lang::t_Object::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }

              static PyObject *t_QueryTreeBuilder_setBuilder(t_QueryTreeBuilder *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 2:
                  {
                    ::java::lang::CharSequence a0((jobject) NULL);
                    ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder a1((jobject) NULL);

                    if (!parseArgs(args, "Ok", &::java::lang::PY_TYPE(CharSequence), ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder::initializeClass, &a0, &a1))
                    {
                      OBJ_CALL(self->object.setBuilder(a0, a1));
                      Py_RETURN_NONE;
                    }
                  }
                  {
                    ::java::lang::Class a0((jobject) NULL);
                    PyTypeObject **p0;
                    ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder a1((jobject) NULL);

                    if (!parseArgs(args, "Kk", ::java::lang::Class::initializeClass, ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1))
                    {
                      OBJ_CALL(self->object.setBuilder(a0, a1));
                      Py_RETURN_NONE;
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "setBuilder", args);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList.h"
#include "org/apache/lucene/search/vectorhighlight/FieldQuery.h"
#include "org/apache/lucene/search/vectorhighlight/FieldTermStack.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FieldPhraseList::class$ = NULL;
          jmethodID *FieldPhraseList::mids$ = NULL;
          bool FieldPhraseList::live$ = false;

          jclass FieldPhraseList::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FieldPhraseList");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e0573fb6] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/vectorhighlight/FieldPhraseList;)V");
              mids$[mid_init$_ed2eefc8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/vectorhighlight/FieldTermStack;Lorg/apache/lucene/search/vectorhighlight/FieldQuery;)V");
              mids$[mid_init$_5d494a16] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/vectorhighlight/FieldTermStack;Lorg/apache/lucene/search/vectorhighlight/FieldQuery;I)V");
              mids$[mid_addIfNoOverlap_3f58e089] = env->getMethodID(cls, "addIfNoOverlap", "(Lorg/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo;)V");
              mids$[mid_getPhraseList_87851566] = env->getMethodID(cls, "getPhraseList", "()Ljava/util/List;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FieldPhraseList::FieldPhraseList(const JArray< FieldPhraseList > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e0573fb6, a0.this$)) {}

          FieldPhraseList::FieldPhraseList(const ::org::apache::lucene::search::vectorhighlight::FieldTermStack & a0, const ::org::apache::lucene::search::vectorhighlight::FieldQuery & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ed2eefc8, a0.this$, a1.this$)) {}

          FieldPhraseList::FieldPhraseList(const ::org::apache::lucene::search::vectorhighlight::FieldTermStack & a0, const ::org::apache::lucene::search::vectorhighlight::FieldQuery & a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5d494a16, a0.this$, a1.this$, a2)) {}

          void FieldPhraseList::addIfNoOverlap(const ::org::apache::lucene::search::vectorhighlight::FieldPhraseList$WeightedPhraseInfo & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_addIfNoOverlap_3f58e089], a0.this$);
          }

          ::java::util::List FieldPhraseList::getPhraseList() const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getPhraseList_87851566]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FieldPhraseList_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldPhraseList_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FieldPhraseList_init_(t_FieldPhraseList *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FieldPhraseList_addIfNoOverlap(t_FieldPhraseList *self, PyObject *arg);
          static PyObject *t_FieldPhraseList_getPhraseList(t_FieldPhraseList *self);
          static PyObject *t_FieldPhraseList_get__phraseList(t_FieldPhraseList *self, void *data);
          static PyGetSetDef t_FieldPhraseList__fields_[] = {
            DECLARE_GET_FIELD(t_FieldPhraseList, phraseList),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldPhraseList__methods_[] = {
            DECLARE_METHOD(t_FieldPhraseList, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldPhraseList, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldPhraseList, addIfNoOverlap, METH_O),
            DECLARE_METHOD(t_FieldPhraseList, getPhraseList, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FieldPhraseList, t_FieldPhraseList, ::java::lang::Object, FieldPhraseList, t_FieldPhraseList_init_, 0, 0, t_FieldPhraseList__fields_, 0, 0);

          void t_FieldPhraseList::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldPhraseList), module, "FieldPhraseList", 0);
            PyDict_SetItemString(PY_TYPE(FieldPhraseList).tp_dict, "WeightedPhraseInfo", make_descriptor(&PY_TYPE(FieldPhraseList$WeightedPhraseInfo)));
          }

          void t_FieldPhraseList::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FieldPhraseList).tp_dict, "class_", make_descriptor(FieldPhraseList::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FieldPhraseList).tp_dict, "wrapfn_", make_descriptor(t_FieldPhraseList::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FieldPhraseList).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldPhraseList_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldPhraseList::initializeClass, 1)))
              return NULL;
            return t_FieldPhraseList::wrap_Object(FieldPhraseList(((t_FieldPhraseList *) arg)->object.this$));
          }
          static PyObject *t_FieldPhraseList_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldPhraseList::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FieldPhraseList_init_(t_FieldPhraseList *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                JArray< FieldPhraseList > a0((jobject) NULL);
                FieldPhraseList object((jobject) NULL);

                if (!parseArgs(args, "[k", FieldPhraseList::initializeClass, &a0))
                {
                  INT_CALL(object = FieldPhraseList(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::search::vectorhighlight::FieldTermStack a0((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldQuery a1((jobject) NULL);
                FieldPhraseList object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::search::vectorhighlight::FieldTermStack::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldQuery::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = FieldPhraseList(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::search::vectorhighlight::FieldTermStack a0((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldQuery a1((jobject) NULL);
                jint a2;
                FieldPhraseList object((jobject) NULL);

                if (!parseArgs(args, "kkI", ::org::apache::lucene::search::vectorhighlight::FieldTermStack::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldQuery::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = FieldPhraseList(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FieldPhraseList_addIfNoOverlap(t_FieldPhraseList *self, PyObject *arg)
          {
            ::org::apache::lucene::search::vectorhighlight::FieldPhraseList$WeightedPhraseInfo a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::vectorhighlight::FieldPhraseList$WeightedPhraseInfo::initializeClass, &a0))
            {
              OBJ_CALL(self->object.addIfNoOverlap(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addIfNoOverlap", arg);
            return NULL;
          }

          static PyObject *t_FieldPhraseList_getPhraseList(t_FieldPhraseList *self)
          {
            ::java::util::List result((jobject) NULL);
            OBJ_CALL(result = self->object.getPhraseList());
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::vectorhighlight::PY_TYPE(FieldPhraseList$WeightedPhraseInfo));
          }

          static PyObject *t_FieldPhraseList_get__phraseList(t_FieldPhraseList *self, void *data)
          {
            ::java::util::List value((jobject) NULL);
            OBJ_CALL(value = self->object.getPhraseList());
            return ::java::util::t_List::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/BlockPackedReaderIterator.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/LongsRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *BlockPackedReaderIterator::class$ = NULL;
          jmethodID *BlockPackedReaderIterator::mids$ = NULL;
          bool BlockPackedReaderIterator::live$ = false;

          jclass BlockPackedReaderIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/BlockPackedReaderIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_71304522] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/DataInput;IIJ)V");
              mids$[mid_next_54c6a17a] = env->getMethodID(cls, "next", "()J");
              mids$[mid_next_a3d07a9b] = env->getMethodID(cls, "next", "(I)Lorg/apache/lucene/util/LongsRef;");
              mids$[mid_ord_54c6a17a] = env->getMethodID(cls, "ord", "()J");
              mids$[mid_reset_394617c2] = env->getMethodID(cls, "reset", "(Lorg/apache/lucene/store/DataInput;J)V");
              mids$[mid_skip_0ee6df2f] = env->getMethodID(cls, "skip", "(J)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BlockPackedReaderIterator::BlockPackedReaderIterator(const ::org::apache::lucene::store::DataInput & a0, jint a1, jint a2, jlong a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_71304522, a0.this$, a1, a2, a3)) {}

          jlong BlockPackedReaderIterator::next() const
          {
            return env->callLongMethod(this$, mids$[mid_next_54c6a17a]);
          }

          ::org::apache::lucene::util::LongsRef BlockPackedReaderIterator::next(jint a0) const
          {
            return ::org::apache::lucene::util::LongsRef(env->callObjectMethod(this$, mids$[mid_next_a3d07a9b], a0));
          }

          jlong BlockPackedReaderIterator::ord() const
          {
            return env->callLongMethod(this$, mids$[mid_ord_54c6a17a]);
          }

          void BlockPackedReaderIterator::reset(const ::org::apache::lucene::store::DataInput & a0, jlong a1) const
          {
            env->callVoidMethod(this$, mids$[mid_reset_394617c2], a0.this$, a1);
          }

          void BlockPackedReaderIterator::skip(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_skip_0ee6df2f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_BlockPackedReaderIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BlockPackedReaderIterator_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BlockPackedReaderIterator_init_(t_BlockPackedReaderIterator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BlockPackedReaderIterator_next(t_BlockPackedReaderIterator *self, PyObject *args);
          static PyObject *t_BlockPackedReaderIterator_ord(t_BlockPackedReaderIterator *self);
          static PyObject *t_BlockPackedReaderIterator_reset(t_BlockPackedReaderIterator *self, PyObject *args);
          static PyObject *t_BlockPackedReaderIterator_skip(t_BlockPackedReaderIterator *self, PyObject *arg);

          static PyMethodDef t_BlockPackedReaderIterator__methods_[] = {
            DECLARE_METHOD(t_BlockPackedReaderIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockPackedReaderIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockPackedReaderIterator, next, METH_VARARGS),
            DECLARE_METHOD(t_BlockPackedReaderIterator, ord, METH_NOARGS),
            DECLARE_METHOD(t_BlockPackedReaderIterator, reset, METH_VARARGS),
            DECLARE_METHOD(t_BlockPackedReaderIterator, skip, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BlockPackedReaderIterator, t_BlockPackedReaderIterator, ::java::lang::Object, BlockPackedReaderIterator, t_BlockPackedReaderIterator_init_, 0, 0, 0, 0, 0);

          void t_BlockPackedReaderIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(BlockPackedReaderIterator), module, "BlockPackedReaderIterator", 0);
          }

          void t_BlockPackedReaderIterator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BlockPackedReaderIterator).tp_dict, "class_", make_descriptor(BlockPackedReaderIterator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BlockPackedReaderIterator).tp_dict, "wrapfn_", make_descriptor(t_BlockPackedReaderIterator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BlockPackedReaderIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BlockPackedReaderIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BlockPackedReaderIterator::initializeClass, 1)))
              return NULL;
            return t_BlockPackedReaderIterator::wrap_Object(BlockPackedReaderIterator(((t_BlockPackedReaderIterator *) arg)->object.this$));
          }
          static PyObject *t_BlockPackedReaderIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BlockPackedReaderIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BlockPackedReaderIterator_init_(t_BlockPackedReaderIterator *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            jint a1;
            jint a2;
            jlong a3;
            BlockPackedReaderIterator object((jobject) NULL);

            if (!parseArgs(args, "kIIJ", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = BlockPackedReaderIterator(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BlockPackedReaderIterator_next(t_BlockPackedReaderIterator *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jlong result;
                OBJ_CALL(result = self->object.next());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
              break;
             case 1:
              {
                jint a0;
                ::org::apache::lucene::util::LongsRef result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.next(a0));
                  return ::org::apache::lucene::util::t_LongsRef::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "next", args);
            return NULL;
          }

          static PyObject *t_BlockPackedReaderIterator_ord(t_BlockPackedReaderIterator *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ord());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_BlockPackedReaderIterator_reset(t_BlockPackedReaderIterator *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            jlong a1;

            if (!parseArgs(args, "kJ", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.reset(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "reset", args);
            return NULL;
          }

          static PyObject *t_BlockPackedReaderIterator_skip(t_BlockPackedReaderIterator *self, PyObject *arg)
          {
            jlong a0;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(self->object.skip(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "skip", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/hyphenation/HyphenationTree.h"
#include "java/io/PrintStream.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/compound/hyphenation/Hyphenation.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/util/ArrayList.h"
#include "org/apache/lucene/analysis/compound/hyphenation/PatternConsumer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {

            ::java::lang::Class *HyphenationTree::class$ = NULL;
            jmethodID *HyphenationTree::mids$ = NULL;
            bool HyphenationTree::live$ = false;

            jclass HyphenationTree::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/hyphenation/HyphenationTree");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_addClass_5fdc3f48] = env->getMethodID(cls, "addClass", "(Ljava/lang/String;)V");
                mids$[mid_addException_069f7243] = env->getMethodID(cls, "addException", "(Ljava/lang/String;Ljava/util/ArrayList;)V");
                mids$[mid_addPattern_4a264742] = env->getMethodID(cls, "addPattern", "(Ljava/lang/String;Ljava/lang/String;)V");
                mids$[mid_findPattern_97a5258f] = env->getMethodID(cls, "findPattern", "(Ljava/lang/String;)Ljava/lang/String;");
                mids$[mid_hyphenate_b8db7bec] = env->getMethodID(cls, "hyphenate", "(Ljava/lang/String;II)Lorg/apache/lucene/analysis/compound/hyphenation/Hyphenation;");
                mids$[mid_hyphenate_bc347fb6] = env->getMethodID(cls, "hyphenate", "([CIIII)Lorg/apache/lucene/analysis/compound/hyphenation/Hyphenation;");
                mids$[mid_loadPatterns_c3dacf57] = env->getMethodID(cls, "loadPatterns", "(Ljava/io/File;)V");
                mids$[mid_printStats_1b7c898b] = env->getMethodID(cls, "printStats", "(Ljava/io/PrintStream;)V");
                mids$[mid_getValues_b4292e98] = env->getMethodID(cls, "getValues", "(I)[B");
                mids$[mid_packValues_5fdc3f57] = env->getMethodID(cls, "packValues", "(Ljava/lang/String;)I");
                mids$[mid_unpackValues_141401b3] = env->getMethodID(cls, "unpackValues", "(I)Ljava/lang/String;");
                mids$[mid_hstrcmp_aa5dc2ed] = env->getMethodID(cls, "hstrcmp", "([CI[CI)I");
                mids$[mid_searchPatterns_fa7f9f9d] = env->getMethodID(cls, "searchPatterns", "([CI[B)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            HyphenationTree::HyphenationTree() : ::org::apache::lucene::analysis::compound::hyphenation::TernaryTree(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            void HyphenationTree::addClass(const ::java::lang::String & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_addClass_5fdc3f48], a0.this$);
            }

            void HyphenationTree::addException(const ::java::lang::String & a0, const ::java::util::ArrayList & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addException_069f7243], a0.this$, a1.this$);
            }

            void HyphenationTree::addPattern(const ::java::lang::String & a0, const ::java::lang::String & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addPattern_4a264742], a0.this$, a1.this$);
            }

            ::java::lang::String HyphenationTree::findPattern(const ::java::lang::String & a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_findPattern_97a5258f], a0.this$));
            }

            ::org::apache::lucene::analysis::compound::hyphenation::Hyphenation HyphenationTree::hyphenate(const ::java::lang::String & a0, jint a1, jint a2) const
            {
              return ::org::apache::lucene::analysis::compound::hyphenation::Hyphenation(env->callObjectMethod(this$, mids$[mid_hyphenate_b8db7bec], a0.this$, a1, a2));
            }

            ::org::apache::lucene::analysis::compound::hyphenation::Hyphenation HyphenationTree::hyphenate(const JArray< jchar > & a0, jint a1, jint a2, jint a3, jint a4) const
            {
              return ::org::apache::lucene::analysis::compound::hyphenation::Hyphenation(env->callObjectMethod(this$, mids$[mid_hyphenate_bc347fb6], a0.this$, a1, a2, a3, a4));
            }

            void HyphenationTree::loadPatterns(const ::java::io::File & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_loadPatterns_c3dacf57], a0.this$);
            }

            void HyphenationTree::printStats(const ::java::io::PrintStream & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_printStats_1b7c898b], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {
            static PyObject *t_HyphenationTree_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_HyphenationTree_instance_(PyTypeObject *type, PyObject *arg);
            static int t_HyphenationTree_init_(t_HyphenationTree *self, PyObject *args, PyObject *kwds);
            static PyObject *t_HyphenationTree_addClass(t_HyphenationTree *self, PyObject *arg);
            static PyObject *t_HyphenationTree_addException(t_HyphenationTree *self, PyObject *args);
            static PyObject *t_HyphenationTree_addPattern(t_HyphenationTree *self, PyObject *args);
            static PyObject *t_HyphenationTree_findPattern(t_HyphenationTree *self, PyObject *arg);
            static PyObject *t_HyphenationTree_hyphenate(t_HyphenationTree *self, PyObject *args);
            static PyObject *t_HyphenationTree_loadPatterns(t_HyphenationTree *self, PyObject *arg);
            static PyObject *t_HyphenationTree_printStats(t_HyphenationTree *self, PyObject *args);

            static PyMethodDef t_HyphenationTree__methods_[] = {
              DECLARE_METHOD(t_HyphenationTree, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_HyphenationTree, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_HyphenationTree, addClass, METH_O),
              DECLARE_METHOD(t_HyphenationTree, addException, METH_VARARGS),
              DECLARE_METHOD(t_HyphenationTree, addPattern, METH_VARARGS),
              DECLARE_METHOD(t_HyphenationTree, findPattern, METH_O),
              DECLARE_METHOD(t_HyphenationTree, hyphenate, METH_VARARGS),
              DECLARE_METHOD(t_HyphenationTree, loadPatterns, METH_O),
              DECLARE_METHOD(t_HyphenationTree, printStats, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(HyphenationTree, t_HyphenationTree, ::org::apache::lucene::analysis::compound::hyphenation::TernaryTree, HyphenationTree, t_HyphenationTree_init_, 0, 0, 0, 0, 0);

            void t_HyphenationTree::install(PyObject *module)
            {
              installType(&PY_TYPE(HyphenationTree), module, "HyphenationTree", 0);
            }

            void t_HyphenationTree::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(HyphenationTree).tp_dict, "class_", make_descriptor(HyphenationTree::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(HyphenationTree).tp_dict, "wrapfn_", make_descriptor(t_HyphenationTree::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(HyphenationTree).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_HyphenationTree_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, HyphenationTree::initializeClass, 1)))
                return NULL;
              return t_HyphenationTree::wrap_Object(HyphenationTree(((t_HyphenationTree *) arg)->object.this$));
            }
            static PyObject *t_HyphenationTree_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, HyphenationTree::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_HyphenationTree_init_(t_HyphenationTree *self, PyObject *args, PyObject *kwds)
            {
              HyphenationTree object((jobject) NULL);

              INT_CALL(object = HyphenationTree());
              self->object = object;

              return 0;
            }

            static PyObject *t_HyphenationTree_addClass(t_HyphenationTree *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(self->object.addClass(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addClass", arg);
              return NULL;
            }

            static PyObject *t_HyphenationTree_addException(t_HyphenationTree *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::util::ArrayList a1((jobject) NULL);
              PyTypeObject **p1;

              if (!parseArgs(args, "sK", ::java::util::ArrayList::initializeClass, &a0, &a1, &p1, ::java::util::t_ArrayList::parameters_))
              {
                OBJ_CALL(self->object.addException(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addException", args);
              return NULL;
            }

            static PyObject *t_HyphenationTree_addPattern(t_HyphenationTree *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);

              if (!parseArgs(args, "ss", &a0, &a1))
              {
                OBJ_CALL(self->object.addPattern(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addPattern", args);
              return NULL;
            }

            static PyObject *t_HyphenationTree_findPattern(t_HyphenationTree *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = self->object.findPattern(a0));
                return j2p(result);
              }

              PyErr_SetArgsError((PyObject *) self, "findPattern", arg);
              return NULL;
            }

            static PyObject *t_HyphenationTree_hyphenate(t_HyphenationTree *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 3:
                {
                  ::java::lang::String a0((jobject) NULL);
                  jint a1;
                  jint a2;
                  ::org::apache::lucene::analysis::compound::hyphenation::Hyphenation result((jobject) NULL);

                  if (!parseArgs(args, "sII", &a0, &a1, &a2))
                  {
                    OBJ_CALL(result = self->object.hyphenate(a0, a1, a2));
                    return ::org::apache::lucene::analysis::compound::hyphenation::t_Hyphenation::wrap_Object(result);
                  }
                }
                break;
               case 5:
                {
                  JArray< jchar > a0((jobject) NULL);
                  jint a1;
                  jint a2;
                  jint a3;
                  jint a4;
                  ::org::apache::lucene::analysis::compound::hyphenation::Hyphenation result((jobject) NULL);

                  if (!parseArgs(args, "[CIIII", &a0, &a1, &a2, &a3, &a4))
                  {
                    OBJ_CALL(result = self->object.hyphenate(a0, a1, a2, a3, a4));
                    return ::org::apache::lucene::analysis::compound::hyphenation::t_Hyphenation::wrap_Object(result);
                  }
                }
              }

              PyErr_SetArgsError((PyObject *) self, "hyphenate", args);
              return NULL;
            }

            static PyObject *t_HyphenationTree_loadPatterns(t_HyphenationTree *self, PyObject *arg)
            {
              ::java::io::File a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::io::File::initializeClass, &a0))
              {
                OBJ_CALL(self->object.loadPatterns(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "loadPatterns", arg);
              return NULL;
            }

            static PyObject *t_HyphenationTree_printStats(t_HyphenationTree *self, PyObject *args)
            {
              ::java::io::PrintStream a0((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::PrintStream::initializeClass, &a0))
              {
                OBJ_CALL(self->object.printStats(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(HyphenationTree), (PyObject *) self, "printStats", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/ScoreDoc.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *ScoreDoc::class$ = NULL;
        jmethodID *ScoreDoc::mids$ = NULL;
        jfieldID *ScoreDoc::fids$ = NULL;
        bool ScoreDoc::live$ = false;

        jclass ScoreDoc::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/ScoreDoc");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_abdf2c51] = env->getMethodID(cls, "<init>", "(IF)V");
            mids$[mid_init$_776c6331] = env->getMethodID(cls, "<init>", "(IFI)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_doc] = env->getFieldID(cls, "doc", "I");
            fids$[fid_score] = env->getFieldID(cls, "score", "F");
            fids$[fid_shardIndex] = env->getFieldID(cls, "shardIndex", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ScoreDoc::ScoreDoc(jint a0, jfloat a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_abdf2c51, a0, a1)) {}

        ScoreDoc::ScoreDoc(jint a0, jfloat a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_776c6331, a0, a1, a2)) {}

        ::java::lang::String ScoreDoc::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        jint ScoreDoc::_get_doc() const
        {
          return env->getIntField(this$, fids$[fid_doc]);
        }

        void ScoreDoc::_set_doc(jint a0) const
        {
          env->setIntField(this$, fids$[fid_doc], a0);
        }

        jfloat ScoreDoc::_get_score() const
        {
          return env->getFloatField(this$, fids$[fid_score]);
        }

        void ScoreDoc::_set_score(jfloat a0) const
        {
          env->setFloatField(this$, fids$[fid_score], a0);
        }

        jint ScoreDoc::_get_shardIndex() const
        {
          return env->getIntField(this$, fids$[fid_shardIndex]);
        }

        void ScoreDoc::_set_shardIndex(jint a0) const
        {
          env->setIntField(this$, fids$[fid_shardIndex], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_ScoreDoc_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ScoreDoc_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ScoreDoc_init_(t_ScoreDoc *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ScoreDoc_toString(t_ScoreDoc *self, PyObject *args);
        static PyObject *t_ScoreDoc_get__doc(t_ScoreDoc *self, void *data);
        static int t_ScoreDoc_set__doc(t_ScoreDoc *self, PyObject *arg, void *data);
        static PyObject *t_ScoreDoc_get__score(t_ScoreDoc *self, void *data);
        static int t_ScoreDoc_set__score(t_ScoreDoc *self, PyObject *arg, void *data);
        static PyObject *t_ScoreDoc_get__shardIndex(t_ScoreDoc *self, void *data);
        static int t_ScoreDoc_set__shardIndex(t_ScoreDoc *self, PyObject *arg, void *data);

        static PyGetSetDef t_ScoreDoc__fields_[] = {
          DECLARE_GETSET_FIELD(t_ScoreDoc, doc),
          DECLARE_GETSET_FIELD(t_ScoreDoc, score),
          DECLARE_GETSET_FIELD(t_ScoreDoc, shardIndex),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ScoreDoc__methods_[] = {
          DECLARE_METHOD(t_ScoreDoc, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ScoreDoc, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ScoreDoc, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ScoreDoc, t_ScoreDoc, ::java::lang::Object, ScoreDoc, t_ScoreDoc_init_, 0, 0, t_ScoreDoc__fields_, 0, 0);

        void t_ScoreDoc::install(PyObject *module)
        {
          installType(&PY_TYPE(ScoreDoc), module, "ScoreDoc", 0);
        }

        void t_ScoreDoc::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ScoreDoc).tp_dict, "class_", make_descriptor(ScoreDoc::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ScoreDoc).tp_dict, "wrapfn_", make_descriptor(t_ScoreDoc::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ScoreDoc).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ScoreDoc_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ScoreDoc::initializeClass, 1)))
            return NULL;
          return t_ScoreDoc::wrap_Object(ScoreDoc(((t_ScoreDoc *) arg)->object.this$));
        }
        static PyObject *t_ScoreDoc_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ScoreDoc::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ScoreDoc_init_(t_ScoreDoc *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              jint a0;
              jfloat a1;
              ScoreDoc object((jobject) NULL);

              if (!parseArgs(args, "IF", &a0, &a1))
              {
                INT_CALL(object = ScoreDoc(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              jint a0;
              jfloat a1;
              jint a2;
              ScoreDoc object((jobject) NULL);

              if (!parseArgs(args, "IFI", &a0, &a1, &a2))
              {
                INT_CALL(object = ScoreDoc(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ScoreDoc_toString(t_ScoreDoc *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(ScoreDoc), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_ScoreDoc_get__doc(t_ScoreDoc *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_doc());
          return PyInt_FromLong((long) value);
        }
        static int t_ScoreDoc_set__doc(t_ScoreDoc *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_doc(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "doc", arg);
          return -1;
        }

        static PyObject *t_ScoreDoc_get__score(t_ScoreDoc *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object._get_score());
          return PyFloat_FromDouble((double) value);
        }
        static int t_ScoreDoc_set__score(t_ScoreDoc *self, PyObject *arg, void *data)
        {
          jfloat value;
          if (!parseArg(arg, "F", &value))
          {
            INT_CALL(self->object._set_score(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "score", arg);
          return -1;
        }

        static PyObject *t_ScoreDoc_get__shardIndex(t_ScoreDoc *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_shardIndex());
          return PyInt_FromLong((long) value);
        }
        static int t_ScoreDoc_set__shardIndex(t_ScoreDoc *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_shardIndex(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "shardIndex", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergePolicy$MergeSpecification.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/Class.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/MergePolicy$OneMerge.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergePolicy$MergeSpecification::class$ = NULL;
        jmethodID *MergePolicy$MergeSpecification::mids$ = NULL;
        jfieldID *MergePolicy$MergeSpecification::fids$ = NULL;
        bool MergePolicy$MergeSpecification::live$ = false;

        jclass MergePolicy$MergeSpecification::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergePolicy$MergeSpecification");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_54badd95] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/index/MergePolicy$OneMerge;)V");
            mids$[mid_segString_0451c495] = env->getMethodID(cls, "segString", "(Lorg/apache/lucene/store/Directory;)Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_merges] = env->getFieldID(cls, "merges", "Ljava/util/List;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MergePolicy$MergeSpecification::MergePolicy$MergeSpecification() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void MergePolicy$MergeSpecification::add(const ::org::apache::lucene::index::MergePolicy$OneMerge & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_54badd95], a0.this$);
        }

        ::java::lang::String MergePolicy$MergeSpecification::segString(const ::org::apache::lucene::store::Directory & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_segString_0451c495], a0.this$));
        }

        ::java::util::List MergePolicy$MergeSpecification::_get_merges() const
        {
          return ::java::util::List(env->getObjectField(this$, fids$[fid_merges]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergePolicy$MergeSpecification_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergePolicy$MergeSpecification_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MergePolicy$MergeSpecification_init_(t_MergePolicy$MergeSpecification *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MergePolicy$MergeSpecification_add(t_MergePolicy$MergeSpecification *self, PyObject *arg);
        static PyObject *t_MergePolicy$MergeSpecification_segString(t_MergePolicy$MergeSpecification *self, PyObject *arg);
        static PyObject *t_MergePolicy$MergeSpecification_get__merges(t_MergePolicy$MergeSpecification *self, void *data);

        static PyGetSetDef t_MergePolicy$MergeSpecification__fields_[] = {
          DECLARE_GET_FIELD(t_MergePolicy$MergeSpecification, merges),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MergePolicy$MergeSpecification__methods_[] = {
          DECLARE_METHOD(t_MergePolicy$MergeSpecification, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy$MergeSpecification, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy$MergeSpecification, add, METH_O),
          DECLARE_METHOD(t_MergePolicy$MergeSpecification, segString, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MergePolicy$MergeSpecification, t_MergePolicy$MergeSpecification, ::java::lang::Object, MergePolicy$MergeSpecification, t_MergePolicy$MergeSpecification_init_, 0, 0, t_MergePolicy$MergeSpecification__fields_, 0, 0);

        void t_MergePolicy$MergeSpecification::install(PyObject *module)
        {
          installType(&PY_TYPE(MergePolicy$MergeSpecification), module, "MergePolicy$MergeSpecification", 0);
        }

        void t_MergePolicy$MergeSpecification::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MergePolicy$MergeSpecification).tp_dict, "class_", make_descriptor(MergePolicy$MergeSpecification::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MergePolicy$MergeSpecification).tp_dict, "wrapfn_", make_descriptor(t_MergePolicy$MergeSpecification::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MergePolicy$MergeSpecification).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergePolicy$MergeSpecification_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergePolicy$MergeSpecification::initializeClass, 1)))
            return NULL;
          return t_MergePolicy$MergeSpecification::wrap_Object(MergePolicy$MergeSpecification(((t_MergePolicy$MergeSpecification *) arg)->object.this$));
        }
        static PyObject *t_MergePolicy$MergeSpecification_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergePolicy$MergeSpecification::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MergePolicy$MergeSpecification_init_(t_MergePolicy$MergeSpecification *self, PyObject *args, PyObject *kwds)
        {
          MergePolicy$MergeSpecification object((jobject) NULL);

          INT_CALL(object = MergePolicy$MergeSpecification());
          self->object = object;

          return 0;
        }

        static PyObject *t_MergePolicy$MergeSpecification_add(t_MergePolicy$MergeSpecification *self, PyObject *arg)
        {
          ::org::apache::lucene::index::MergePolicy$OneMerge a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::MergePolicy$OneMerge::initializeClass, &a0))
          {
            OBJ_CALL(self->object.add(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "add", arg);
          return NULL;
        }

        static PyObject *t_MergePolicy$MergeSpecification_segString(t_MergePolicy$MergeSpecification *self, PyObject *arg)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.segString(a0));
            return j2p(result);
          }

          PyErr_SetArgsError((PyObject *) self, "segString", arg);
          return NULL;
        }

        static PyObject *t_MergePolicy$MergeSpecification_get__merges(t_MergePolicy$MergeSpecification *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object._get_merges());
          return ::java::util::t_List::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/NormalizationH1.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *NormalizationH1::class$ = NULL;
          jmethodID *NormalizationH1::mids$ = NULL;
          bool NormalizationH1::live$ = false;

          jclass NormalizationH1::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/NormalizationH1");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_06298cab] = env->getMethodID(cls, "<init>", "(F)V");
              mids$[mid_getC_54c6a176] = env->getMethodID(cls, "getC", "()F");
              mids$[mid_tfn_63482206] = env->getMethodID(cls, "tfn", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NormalizationH1::NormalizationH1() : ::org::apache::lucene::search::similarities::Normalization(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          NormalizationH1::NormalizationH1(jfloat a0) : ::org::apache::lucene::search::similarities::Normalization(env->newObject(initializeClass, &mids$, mid_init$_06298cab, a0)) {}

          jfloat NormalizationH1::getC() const
          {
            return env->callFloatMethod(this$, mids$[mid_getC_54c6a176]);
          }

          jfloat NormalizationH1::tfn(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1, jfloat a2) const
          {
            return env->callFloatMethod(this$, mids$[mid_tfn_63482206], a0.this$, a1, a2);
          }

          ::java::lang::String NormalizationH1::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_NormalizationH1_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NormalizationH1_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NormalizationH1_init_(t_NormalizationH1 *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NormalizationH1_getC(t_NormalizationH1 *self);
          static PyObject *t_NormalizationH1_tfn(t_NormalizationH1 *self, PyObject *args);
          static PyObject *t_NormalizationH1_toString(t_NormalizationH1 *self, PyObject *args);
          static PyObject *t_NormalizationH1_get__c(t_NormalizationH1 *self, void *data);
          static PyGetSetDef t_NormalizationH1__fields_[] = {
            DECLARE_GET_FIELD(t_NormalizationH1, c),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_NormalizationH1__methods_[] = {
            DECLARE_METHOD(t_NormalizationH1, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NormalizationH1, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NormalizationH1, getC, METH_NOARGS),
            DECLARE_METHOD(t_NormalizationH1, tfn, METH_VARARGS),
            DECLARE_METHOD(t_NormalizationH1, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NormalizationH1, t_NormalizationH1, ::org::apache::lucene::search::similarities::Normalization, NormalizationH1, t_NormalizationH1_init_, 0, 0, t_NormalizationH1__fields_, 0, 0);

          void t_NormalizationH1::install(PyObject *module)
          {
            installType(&PY_TYPE(NormalizationH1), module, "NormalizationH1", 0);
          }

          void t_NormalizationH1::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NormalizationH1).tp_dict, "class_", make_descriptor(NormalizationH1::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NormalizationH1).tp_dict, "wrapfn_", make_descriptor(t_NormalizationH1::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NormalizationH1).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NormalizationH1_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NormalizationH1::initializeClass, 1)))
              return NULL;
            return t_NormalizationH1::wrap_Object(NormalizationH1(((t_NormalizationH1 *) arg)->object.this$));
          }
          static PyObject *t_NormalizationH1_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NormalizationH1::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NormalizationH1_init_(t_NormalizationH1 *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                NormalizationH1 object((jobject) NULL);

                INT_CALL(object = NormalizationH1());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jfloat a0;
                NormalizationH1 object((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  INT_CALL(object = NormalizationH1(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NormalizationH1_getC(t_NormalizationH1 *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getC());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_NormalizationH1_tfn(t_NormalizationH1 *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat a2;
            jfloat result;

            if (!parseArgs(args, "kFF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.tfn(a0, a1, a2));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(NormalizationH1), (PyObject *) self, "tfn", args, 2);
          }

          static PyObject *t_NormalizationH1_toString(t_NormalizationH1 *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(NormalizationH1), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_NormalizationH1_get__c(t_NormalizationH1 *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getC());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/SimpleFSDirectory.h"
#include "java/io/File.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/LockFactory.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IOContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *SimpleFSDirectory::class$ = NULL;
        jmethodID *SimpleFSDirectory::mids$ = NULL;
        bool SimpleFSDirectory::live$ = false;

        jclass SimpleFSDirectory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/SimpleFSDirectory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c3dacf57] = env->getMethodID(cls, "<init>", "(Ljava/io/File;)V");
            mids$[mid_init$_5f9cf6ef] = env->getMethodID(cls, "<init>", "(Ljava/io/File;Lorg/apache/lucene/store/LockFactory;)V");
            mids$[mid_openInput_3e1b5375] = env->getMethodID(cls, "openInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexInput;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SimpleFSDirectory::SimpleFSDirectory(const ::java::io::File & a0) : ::org::apache::lucene::store::FSDirectory(env->newObject(initializeClass, &mids$, mid_init$_c3dacf57, a0.this$)) {}

        SimpleFSDirectory::SimpleFSDirectory(const ::java::io::File & a0, const ::org::apache::lucene::store::LockFactory & a1) : ::org::apache::lucene::store::FSDirectory(env->newObject(initializeClass, &mids$, mid_init$_5f9cf6ef, a0.this$, a1.this$)) {}

        ::org::apache::lucene::store::IndexInput SimpleFSDirectory::openInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_openInput_3e1b5375], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_SimpleFSDirectory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SimpleFSDirectory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SimpleFSDirectory_init_(t_SimpleFSDirectory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SimpleFSDirectory_openInput(t_SimpleFSDirectory *self, PyObject *args);

        static PyMethodDef t_SimpleFSDirectory__methods_[] = {
          DECLARE_METHOD(t_SimpleFSDirectory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SimpleFSDirectory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SimpleFSDirectory, openInput, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SimpleFSDirectory, t_SimpleFSDirectory, ::org::apache::lucene::store::FSDirectory, SimpleFSDirectory, t_SimpleFSDirectory_init_, 0, 0, 0, 0, 0);

        void t_SimpleFSDirectory::install(PyObject *module)
        {
          installType(&PY_TYPE(SimpleFSDirectory), module, "SimpleFSDirectory", 0);
        }

        void t_SimpleFSDirectory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SimpleFSDirectory).tp_dict, "class_", make_descriptor(SimpleFSDirectory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SimpleFSDirectory).tp_dict, "wrapfn_", make_descriptor(t_SimpleFSDirectory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SimpleFSDirectory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SimpleFSDirectory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SimpleFSDirectory::initializeClass, 1)))
            return NULL;
          return t_SimpleFSDirectory::wrap_Object(SimpleFSDirectory(((t_SimpleFSDirectory *) arg)->object.this$));
        }
        static PyObject *t_SimpleFSDirectory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SimpleFSDirectory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SimpleFSDirectory_init_(t_SimpleFSDirectory *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::io::File a0((jobject) NULL);
              SimpleFSDirectory object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
              {
                INT_CALL(object = SimpleFSDirectory(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::io::File a0((jobject) NULL);
              ::org::apache::lucene::store::LockFactory a1((jobject) NULL);
              SimpleFSDirectory object((jobject) NULL);

              if (!parseArgs(args, "kk", ::java::io::File::initializeClass, ::org::apache::lucene::store::LockFactory::initializeClass, &a0, &a1))
              {
                INT_CALL(object = SimpleFSDirectory(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SimpleFSDirectory_openInput(t_SimpleFSDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.openInput(a0, a1));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SimpleFSDirectory), (PyObject *) self, "openInput", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queries/function/FunctionValues$ValueFiller.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/queries/function/ValueSourceScorer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {

          ::java::lang::Class *FunctionValues::class$ = NULL;
          jmethodID *FunctionValues::mids$ = NULL;
          bool FunctionValues::live$ = false;

          jclass FunctionValues::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/FunctionValues");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_boolVal_39c7bd30] = env->getMethodID(cls, "boolVal", "(I)Z");
              mids$[mid_byteVal_39c7bd28] = env->getMethodID(cls, "byteVal", "(I)B");
              mids$[mid_byteVal_5d2e3265] = env->getMethodID(cls, "byteVal", "(I[B)V");
              mids$[mid_bytesVal_b7fef192] = env->getMethodID(cls, "bytesVal", "(ILorg/apache/lucene/util/BytesRef;)Z");
              mids$[mid_doubleVal_39c7bd2e] = env->getMethodID(cls, "doubleVal", "(I)D");
              mids$[mid_doubleVal_08239127] = env->getMethodID(cls, "doubleVal", "(I[D)V");
              mids$[mid_exists_39c7bd30] = env->getMethodID(cls, "exists", "(I)Z");
              mids$[mid_explain_ae608291] = env->getMethodID(cls, "explain", "(I)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_floatVal_39c7bd2c] = env->getMethodID(cls, "floatVal", "(I)F");
              mids$[mid_floatVal_b130a809] = env->getMethodID(cls, "floatVal", "(I[F)V");
              mids$[mid_getRangeScorer_d201bc96] = env->getMethodID(cls, "getRangeScorer", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/queries/function/ValueSourceScorer;");
              mids$[mid_getScorer_fca96384] = env->getMethodID(cls, "getScorer", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/queries/function/ValueSourceScorer;");
              mids$[mid_getValueFiller_7731f0bd] = env->getMethodID(cls, "getValueFiller", "()Lorg/apache/lucene/queries/function/FunctionValues$ValueFiller;");
              mids$[mid_intVal_39c7bd23] = env->getMethodID(cls, "intVal", "(I)I");
              mids$[mid_intVal_dd2db71e] = env->getMethodID(cls, "intVal", "(I[I)V");
              mids$[mid_longVal_39c7bd20] = env->getMethodID(cls, "longVal", "(I)J");
              mids$[mid_longVal_b24cd90d] = env->getMethodID(cls, "longVal", "(I[J)V");
              mids$[mid_numOrd_54c6a179] = env->getMethodID(cls, "numOrd", "()I");
              mids$[mid_objectVal_29be6a55] = env->getMethodID(cls, "objectVal", "(I)Ljava/lang/Object;");
              mids$[mid_ordVal_39c7bd23] = env->getMethodID(cls, "ordVal", "(I)I");
              mids$[mid_shortVal_39c7bd39] = env->getMethodID(cls, "shortVal", "(I)S");
              mids$[mid_shortVal_df2a0648] = env->getMethodID(cls, "shortVal", "(I[S)V");
              mids$[mid_strVal_141401b3] = env->getMethodID(cls, "strVal", "(I)Ljava/lang/String;");
              mids$[mid_strVal_2f05a56a] = env->getMethodID(cls, "strVal", "(I[Ljava/lang/String;)V");
              mids$[mid_toString_141401b3] = env->getMethodID(cls, "toString", "(I)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FunctionValues::FunctionValues() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jboolean FunctionValues::boolVal(jint a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_boolVal_39c7bd30], a0);
          }

          jbyte FunctionValues::byteVal(jint a0) const
          {
            return env->callByteMethod(this$, mids$[mid_byteVal_39c7bd28], a0);
          }

          void FunctionValues::byteVal(jint a0, const JArray< jbyte > & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_byteVal_5d2e3265], a0, a1.this$);
          }

          jboolean FunctionValues::bytesVal(jint a0, const ::org::apache::lucene::util::BytesRef & a1) const
          {
            return env->callBooleanMethod(this$, mids$[mid_bytesVal_b7fef192], a0, a1.this$);
          }

          jdouble FunctionValues::doubleVal(jint a0) const
          {
            return env->callDoubleMethod(this$, mids$[mid_doubleVal_39c7bd2e], a0);
          }

          void FunctionValues::doubleVal(jint a0, const JArray< jdouble > & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_doubleVal_08239127], a0, a1.this$);
          }

          jboolean FunctionValues::exists(jint a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_exists_39c7bd30], a0);
          }

          ::org::apache::lucene::search::Explanation FunctionValues::explain(jint a0) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_ae608291], a0));
          }

          jfloat FunctionValues::floatVal(jint a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_floatVal_39c7bd2c], a0);
          }

          void FunctionValues::floatVal(jint a0, const JArray< jfloat > & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_floatVal_b130a809], a0, a1.this$);
          }

          ::org::apache::lucene::queries::function::ValueSourceScorer FunctionValues::getRangeScorer(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3, jboolean a4) const
          {
            return ::org::apache::lucene::queries::function::ValueSourceScorer(env->callObjectMethod(this$, mids$[mid_getRangeScorer_d201bc96], a0.this$, a1.this$, a2.this$, a3, a4));
          }

          ::org::apache::lucene::queries::function::ValueSourceScorer FunctionValues::getScorer(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::queries::function::ValueSourceScorer(env->callObjectMethod(this$, mids$[mid_getScorer_fca96384], a0.this$));
          }

          ::org::apache::lucene::queries::function::FunctionValues$ValueFiller FunctionValues::getValueFiller() const
          {
            return ::org::apache::lucene::queries::function::FunctionValues$ValueFiller(env->callObjectMethod(this$, mids$[mid_getValueFiller_7731f0bd]));
          }

          jint FunctionValues::intVal(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_intVal_39c7bd23], a0);
          }

          void FunctionValues::intVal(jint a0, const JArray< jint > & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_intVal_dd2db71e], a0, a1.this$);
          }

          jlong FunctionValues::longVal(jint a0) const
          {
            return env->callLongMethod(this$, mids$[mid_longVal_39c7bd20], a0);
          }

          void FunctionValues::longVal(jint a0, const JArray< jlong > & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_longVal_b24cd90d], a0, a1.this$);
          }

          jint FunctionValues::numOrd() const
          {
            return env->callIntMethod(this$, mids$[mid_numOrd_54c6a179]);
          }

          ::java::lang::Object FunctionValues::objectVal(jint a0) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_objectVal_29be6a55], a0));
          }

          jint FunctionValues::ordVal(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_ordVal_39c7bd23], a0);
          }

          jshort FunctionValues::shortVal(jint a0) const
          {
            return env->callShortMethod(this$, mids$[mid_shortVal_39c7bd39], a0);
          }

          void FunctionValues::shortVal(jint a0, const JArray< jshort > & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_shortVal_df2a0648], a0, a1.this$);
          }

          ::java::lang::String FunctionValues::strVal(jint a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_strVal_141401b3], a0));
          }

          void FunctionValues::strVal(jint a0, const JArray< ::java::lang::String > & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_strVal_2f05a56a], a0, a1.this$);
          }

          ::java::lang::String FunctionValues::toString(jint a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_141401b3], a0));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          static PyObject *t_FunctionValues_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FunctionValues_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FunctionValues_init_(t_FunctionValues *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FunctionValues_boolVal(t_FunctionValues *self, PyObject *arg);
          static PyObject *t_FunctionValues_byteVal(t_FunctionValues *self, PyObject *args);
          static PyObject *t_FunctionValues_bytesVal(t_FunctionValues *self, PyObject *args);
          static PyObject *t_FunctionValues_doubleVal(t_FunctionValues *self, PyObject *args);
          static PyObject *t_FunctionValues_exists(t_FunctionValues *self, PyObject *arg);
          static PyObject *t_FunctionValues_explain(t_FunctionValues *self, PyObject *arg);
          static PyObject *t_FunctionValues_floatVal(t_FunctionValues *self, PyObject *args);
          static PyObject *t_FunctionValues_getRangeScorer(t_FunctionValues *self, PyObject *args);
          static PyObject *t_FunctionValues_getScorer(t_FunctionValues *self, PyObject *arg);
          static PyObject *t_FunctionValues_getValueFiller(t_FunctionValues *self);
          static PyObject *t_FunctionValues_intVal(t_FunctionValues *self, PyObject *args);
          static PyObject *t_FunctionValues_longVal(t_FunctionValues *self, PyObject *args);
          static PyObject *t_FunctionValues_numOrd(t_FunctionValues *self);
          static PyObject *t_FunctionValues_objectVal(t_FunctionValues *self, PyObject *arg);
          static PyObject *t_FunctionValues_ordVal(t_FunctionValues *self, PyObject *arg);
          static PyObject *t_FunctionValues_shortVal(t_FunctionValues *self, PyObject *args);
          static PyObject *t_FunctionValues_strVal(t_FunctionValues *self, PyObject *args);
          static PyObject *t_FunctionValues_toString(t_FunctionValues *self, PyObject *args);
          static PyObject *t_FunctionValues_get__valueFiller(t_FunctionValues *self, void *data);
          static PyGetSetDef t_FunctionValues__fields_[] = {
            DECLARE_GET_FIELD(t_FunctionValues, valueFiller),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FunctionValues__methods_[] = {
            DECLARE_METHOD(t_FunctionValues, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FunctionValues, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FunctionValues, boolVal, METH_O),
            DECLARE_METHOD(t_FunctionValues, byteVal, METH_VARARGS),
            DECLARE_METHOD(t_FunctionValues, bytesVal, METH_VARARGS),
            DECLARE_METHOD(t_FunctionValues, doubleVal, METH_VARARGS),
            DECLARE_METHOD(t_FunctionValues, exists, METH_O),
            DECLARE_METHOD(t_FunctionValues, explain, METH_O),
            DECLARE_METHOD(t_FunctionValues, floatVal, METH_VARARGS),
            DECLARE_METHOD(t_FunctionValues, getRangeScorer, METH_VARARGS),
            DECLARE_METHOD(t_FunctionValues, getScorer, METH_O),
            DECLARE_METHOD(t_FunctionValues, getValueFiller, METH_NOARGS),
            DECLARE_METHOD(t_FunctionValues, intVal, METH_VARARGS),
            DECLARE_METHOD(t_FunctionValues, longVal, METH_VARARGS),
            DECLARE_METHOD(t_FunctionValues, numOrd, METH_NOARGS),
            DECLARE_METHOD(t_FunctionValues, objectVal, METH_O),
            DECLARE_METHOD(t_FunctionValues, ordVal, METH_O),
            DECLARE_METHOD(t_FunctionValues, shortVal, METH_VARARGS),
            DECLARE_METHOD(t_FunctionValues, strVal, METH_VARARGS),
            DECLARE_METHOD(t_FunctionValues, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FunctionValues, t_FunctionValues, ::java::lang::Object, FunctionValues, t_FunctionValues_init_, 0, 0, t_FunctionValues__fields_, 0, 0);

          void t_FunctionValues::install(PyObject *module)
          {
            installType(&PY_TYPE(FunctionValues), module, "FunctionValues", 0);
            PyDict_SetItemString(PY_TYPE(FunctionValues).tp_dict, "ValueFiller", make_descriptor(&PY_TYPE(FunctionValues$ValueFiller)));
          }

          void t_FunctionValues::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FunctionValues).tp_dict, "class_", make_descriptor(FunctionValues::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FunctionValues).tp_dict, "wrapfn_", make_descriptor(t_FunctionValues::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FunctionValues).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FunctionValues_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FunctionValues::initializeClass, 1)))
              return NULL;
            return t_FunctionValues::wrap_Object(FunctionValues(((t_FunctionValues *) arg)->object.this$));
          }
          static PyObject *t_FunctionValues_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FunctionValues::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FunctionValues_init_(t_FunctionValues *self, PyObject *args, PyObject *kwds)
          {
            FunctionValues object((jobject) NULL);

            INT_CALL(object = FunctionValues());
            self->object = object;

            return 0;
          }

          static PyObject *t_FunctionValues_boolVal(t_FunctionValues *self, PyObject *arg)
          {
            jint a0;
            jboolean result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.boolVal(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "boolVal", arg);
            return NULL;
          }

          static PyObject *t_FunctionValues_byteVal(t_FunctionValues *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                jbyte result;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.byteVal(a0));
                  return PyInt_FromLong((long) result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                JArray< jbyte > a1((jobject) NULL);

                if (!parseArgs(args, "I[B", &a0, &a1))
                {
                  OBJ_CALL(self->object.byteVal(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "byteVal", args);
            return NULL;
          }

          static PyObject *t_FunctionValues_bytesVal(t_FunctionValues *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "Ik", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.bytesVal(a0, a1));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "bytesVal", args);
            return NULL;
          }

          static PyObject *t_FunctionValues_doubleVal(t_FunctionValues *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                jdouble result;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.doubleVal(a0));
                  return PyFloat_FromDouble((double) result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                JArray< jdouble > a1((jobject) NULL);

                if (!parseArgs(args, "I[D", &a0, &a1))
                {
                  OBJ_CALL(self->object.doubleVal(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "doubleVal", args);
            return NULL;
          }

          static PyObject *t_FunctionValues_exists(t_FunctionValues *self, PyObject *arg)
          {
            jint a0;
            jboolean result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.exists(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "exists", arg);
            return NULL;
          }

          static PyObject *t_FunctionValues_explain(t_FunctionValues *self, PyObject *arg)
          {
            jint a0;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.explain(a0));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "explain", arg);
            return NULL;
          }

          static PyObject *t_FunctionValues_floatVal(t_FunctionValues *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                jfloat result;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.floatVal(a0));
                  return PyFloat_FromDouble((double) result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                JArray< jfloat > a1((jobject) NULL);

                if (!parseArgs(args, "I[F", &a0, &a1))
                {
                  OBJ_CALL(self->object.floatVal(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "floatVal", args);
            return NULL;
          }

          static PyObject *t_FunctionValues_getRangeScorer(t_FunctionValues *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            jboolean a3;
            jboolean a4;
            ::org::apache::lucene::queries::function::ValueSourceScorer result((jobject) NULL);

            if (!parseArgs(args, "kssZZ", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.getRangeScorer(a0, a1, a2, a3, a4));
              return ::org::apache::lucene::queries::function::t_ValueSourceScorer::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getRangeScorer", args);
            return NULL;
          }

          static PyObject *t_FunctionValues_getScorer(t_FunctionValues *self, PyObject *arg)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::queries::function::ValueSourceScorer result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.getScorer(a0));
              return ::org::apache::lucene::queries::function::t_ValueSourceScorer::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getScorer", arg);
            return NULL;
          }

          static PyObject *t_FunctionValues_getValueFiller(t_FunctionValues *self)
          {
            ::org::apache::lucene::queries::function::FunctionValues$ValueFiller result((jobject) NULL);
            OBJ_CALL(result = self->object.getValueFiller());
            return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(result);
          }

          static PyObject *t_FunctionValues_intVal(t_FunctionValues *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                jint result;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.intVal(a0));
                  return PyInt_FromLong((long) result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                JArray< jint > a1((jobject) NULL);

                if (!parseArgs(args, "I[I", &a0, &a1))
                {
                  OBJ_CALL(self->object.intVal(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "intVal", args);
            return NULL;
          }

          static PyObject *t_FunctionValues_longVal(t_FunctionValues *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                jlong result;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.longVal(a0));
                  return PyLong_FromLongLong((PY_LONG_LONG) result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                JArray< jlong > a1((jobject) NULL);

                if (!parseArgs(args, "I[J", &a0, &a1))
                {
                  OBJ_CALL(self->object.longVal(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "longVal", args);
            return NULL;
          }

          static PyObject *t_FunctionValues_numOrd(t_FunctionValues *self)
          {
            jint result;
            OBJ_CALL(result = self->object.numOrd());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FunctionValues_objectVal(t_FunctionValues *self, PyObject *arg)
          {
            jint a0;
            ::java::lang::Object result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.objectVal(a0));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "objectVal", arg);
            return NULL;
          }

          static PyObject *t_FunctionValues_ordVal(t_FunctionValues *self, PyObject *arg)
          {
            jint a0;
            jint result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.ordVal(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "ordVal", arg);
            return NULL;
          }

          static PyObject *t_FunctionValues_shortVal(t_FunctionValues *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                jshort result;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.shortVal(a0));
                  return PyInt_FromLong((long) result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                JArray< jshort > a1((jobject) NULL);

                if (!parseArgs(args, "I[S", &a0, &a1))
                {
                  OBJ_CALL(self->object.shortVal(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "shortVal", args);
            return NULL;
          }

          static PyObject *t_FunctionValues_strVal(t_FunctionValues *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.strVal(a0));
                  return j2p(result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                JArray< ::java::lang::String > a1((jobject) NULL);

                if (!parseArgs(args, "I[s", &a0, &a1))
                {
                  OBJ_CALL(self->object.strVal(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "strVal", args);
            return NULL;
          }

          static PyObject *t_FunctionValues_toString(t_FunctionValues *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(FunctionValues), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FunctionValues_get__valueFiller(t_FunctionValues *self, void *data)
          {
            ::org::apache::lucene::queries::function::FunctionValues$ValueFiller value((jobject) NULL);
            OBJ_CALL(value = self->object.getValueFiller());
            return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(value);
          }
        }
      }
    }
  }
}
