#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/ParallelTaxonomyArrays.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *ParallelTaxonomyArrays::class$ = NULL;
          jmethodID *ParallelTaxonomyArrays::mids$ = NULL;
          bool ParallelTaxonomyArrays::live$ = false;

          jclass ParallelTaxonomyArrays::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/ParallelTaxonomyArrays");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_children_dab10e75] = env->getMethodID(cls, "children", "()[I");
              mids$[mid_parents_dab10e75] = env->getMethodID(cls, "parents", "()[I");
              mids$[mid_siblings_dab10e75] = env->getMethodID(cls, "siblings", "()[I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ParallelTaxonomyArrays::ParallelTaxonomyArrays() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          JArray< jint > ParallelTaxonomyArrays::children() const
          {
            return JArray< jint >(env->callObjectMethod(this$, mids$[mid_children_dab10e75]));
          }

          JArray< jint > ParallelTaxonomyArrays::parents() const
          {
            return JArray< jint >(env->callObjectMethod(this$, mids$[mid_parents_dab10e75]));
          }

          JArray< jint > ParallelTaxonomyArrays::siblings() const
          {
            return JArray< jint >(env->callObjectMethod(this$, mids$[mid_siblings_dab10e75]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_ParallelTaxonomyArrays_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ParallelTaxonomyArrays_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ParallelTaxonomyArrays_init_(t_ParallelTaxonomyArrays *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ParallelTaxonomyArrays_children(t_ParallelTaxonomyArrays *self);
          static PyObject *t_ParallelTaxonomyArrays_parents(t_ParallelTaxonomyArrays *self);
          static PyObject *t_ParallelTaxonomyArrays_siblings(t_ParallelTaxonomyArrays *self);

          static PyMethodDef t_ParallelTaxonomyArrays__methods_[] = {
            DECLARE_METHOD(t_ParallelTaxonomyArrays, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ParallelTaxonomyArrays, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ParallelTaxonomyArrays, children, METH_NOARGS),
            DECLARE_METHOD(t_ParallelTaxonomyArrays, parents, METH_NOARGS),
            DECLARE_METHOD(t_ParallelTaxonomyArrays, siblings, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ParallelTaxonomyArrays, t_ParallelTaxonomyArrays, ::java::lang::Object, ParallelTaxonomyArrays, t_ParallelTaxonomyArrays_init_, 0, 0, 0, 0, 0);

          void t_ParallelTaxonomyArrays::install(PyObject *module)
          {
            installType(&PY_TYPE(ParallelTaxonomyArrays), module, "ParallelTaxonomyArrays", 0);
          }

          void t_ParallelTaxonomyArrays::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ParallelTaxonomyArrays).tp_dict, "class_", make_descriptor(ParallelTaxonomyArrays::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ParallelTaxonomyArrays).tp_dict, "wrapfn_", make_descriptor(t_ParallelTaxonomyArrays::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ParallelTaxonomyArrays).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ParallelTaxonomyArrays_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ParallelTaxonomyArrays::initializeClass, 1)))
              return NULL;
            return t_ParallelTaxonomyArrays::wrap_Object(ParallelTaxonomyArrays(((t_ParallelTaxonomyArrays *) arg)->object.this$));
          }
          static PyObject *t_ParallelTaxonomyArrays_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ParallelTaxonomyArrays::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ParallelTaxonomyArrays_init_(t_ParallelTaxonomyArrays *self, PyObject *args, PyObject *kwds)
          {
            ParallelTaxonomyArrays object((jobject) NULL);

            INT_CALL(object = ParallelTaxonomyArrays());
            self->object = object;

            return 0;
          }

          static PyObject *t_ParallelTaxonomyArrays_children(t_ParallelTaxonomyArrays *self)
          {
            JArray< jint > result((jobject) NULL);
            OBJ_CALL(result = self->object.children());
            return result.wrap();
          }

          static PyObject *t_ParallelTaxonomyArrays_parents(t_ParallelTaxonomyArrays *self)
          {
            JArray< jint > result((jobject) NULL);
            OBJ_CALL(result = self->object.parents());
            return result.wrap();
          }

          static PyObject *t_ParallelTaxonomyArrays_siblings(t_ParallelTaxonomyArrays *self)
          {
            JArray< jint > result((jobject) NULL);
            OBJ_CALL(result = self->object.siblings());
            return result.wrap();
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/NumericRangeQueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *NumericRangeQueryNodeProcessor::class$ = NULL;
              jmethodID *NumericRangeQueryNodeProcessor::mids$ = NULL;
              bool NumericRangeQueryNodeProcessor::live$ = false;

              jclass NumericRangeQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/NumericRangeQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              NumericRangeQueryNodeProcessor::NumericRangeQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_NumericRangeQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_NumericRangeQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_NumericRangeQueryNodeProcessor_init_(t_NumericRangeQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_NumericRangeQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_NumericRangeQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NumericRangeQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(NumericRangeQueryNodeProcessor, t_NumericRangeQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, NumericRangeQueryNodeProcessor, t_NumericRangeQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_NumericRangeQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(NumericRangeQueryNodeProcessor), module, "NumericRangeQueryNodeProcessor", 0);
              }

              void t_NumericRangeQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(NumericRangeQueryNodeProcessor).tp_dict, "class_", make_descriptor(NumericRangeQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(NumericRangeQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_NumericRangeQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(NumericRangeQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_NumericRangeQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, NumericRangeQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_NumericRangeQueryNodeProcessor::wrap_Object(NumericRangeQueryNodeProcessor(((t_NumericRangeQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_NumericRangeQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, NumericRangeQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_NumericRangeQueryNodeProcessor_init_(t_NumericRangeQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                NumericRangeQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = NumericRangeQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/LMJelinekMercerSimilarity.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/similarities/LMSimilarity$CollectionModel.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *LMJelinekMercerSimilarity::class$ = NULL;
          jmethodID *LMJelinekMercerSimilarity::mids$ = NULL;
          bool LMJelinekMercerSimilarity::live$ = false;

          jclass LMJelinekMercerSimilarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/LMJelinekMercerSimilarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_06298cab] = env->getMethodID(cls, "<init>", "(F)V");
              mids$[mid_init$_75020b37] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/similarities/LMSimilarity$CollectionModel;F)V");
              mids$[mid_getLambda_54c6a176] = env->getMethodID(cls, "getLambda", "()F");
              mids$[mid_getName_14c7b5c5] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");
              mids$[mid_score_63482206] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)F");
              mids$[mid_explain_347d95f8] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/Explanation;Lorg/apache/lucene/search/similarities/BasicStats;IFF)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LMJelinekMercerSimilarity::LMJelinekMercerSimilarity(jfloat a0) : ::org::apache::lucene::search::similarities::LMSimilarity(env->newObject(initializeClass, &mids$, mid_init$_06298cab, a0)) {}

          LMJelinekMercerSimilarity::LMJelinekMercerSimilarity(const ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel & a0, jfloat a1) : ::org::apache::lucene::search::similarities::LMSimilarity(env->newObject(initializeClass, &mids$, mid_init$_75020b37, a0.this$, a1)) {}

          jfloat LMJelinekMercerSimilarity::getLambda() const
          {
            return env->callFloatMethod(this$, mids$[mid_getLambda_54c6a176]);
          }

          ::java::lang::String LMJelinekMercerSimilarity::getName() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_LMJelinekMercerSimilarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LMJelinekMercerSimilarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LMJelinekMercerSimilarity_init_(t_LMJelinekMercerSimilarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LMJelinekMercerSimilarity_getLambda(t_LMJelinekMercerSimilarity *self);
          static PyObject *t_LMJelinekMercerSimilarity_getName(t_LMJelinekMercerSimilarity *self, PyObject *args);
          static PyObject *t_LMJelinekMercerSimilarity_get__lambda(t_LMJelinekMercerSimilarity *self, void *data);
          static PyObject *t_LMJelinekMercerSimilarity_get__name(t_LMJelinekMercerSimilarity *self, void *data);
          static PyGetSetDef t_LMJelinekMercerSimilarity__fields_[] = {
            DECLARE_GET_FIELD(t_LMJelinekMercerSimilarity, lambda),
            DECLARE_GET_FIELD(t_LMJelinekMercerSimilarity, name),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LMJelinekMercerSimilarity__methods_[] = {
            DECLARE_METHOD(t_LMJelinekMercerSimilarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMJelinekMercerSimilarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMJelinekMercerSimilarity, getLambda, METH_NOARGS),
            DECLARE_METHOD(t_LMJelinekMercerSimilarity, getName, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LMJelinekMercerSimilarity, t_LMJelinekMercerSimilarity, ::org::apache::lucene::search::similarities::LMSimilarity, LMJelinekMercerSimilarity, t_LMJelinekMercerSimilarity_init_, 0, 0, t_LMJelinekMercerSimilarity__fields_, 0, 0);

          void t_LMJelinekMercerSimilarity::install(PyObject *module)
          {
            installType(&PY_TYPE(LMJelinekMercerSimilarity), module, "LMJelinekMercerSimilarity", 0);
          }

          void t_LMJelinekMercerSimilarity::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LMJelinekMercerSimilarity).tp_dict, "class_", make_descriptor(LMJelinekMercerSimilarity::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LMJelinekMercerSimilarity).tp_dict, "wrapfn_", make_descriptor(t_LMJelinekMercerSimilarity::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LMJelinekMercerSimilarity).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LMJelinekMercerSimilarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LMJelinekMercerSimilarity::initializeClass, 1)))
              return NULL;
            return t_LMJelinekMercerSimilarity::wrap_Object(LMJelinekMercerSimilarity(((t_LMJelinekMercerSimilarity *) arg)->object.this$));
          }
          static PyObject *t_LMJelinekMercerSimilarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LMJelinekMercerSimilarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LMJelinekMercerSimilarity_init_(t_LMJelinekMercerSimilarity *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jfloat a0;
                LMJelinekMercerSimilarity object((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  INT_CALL(object = LMJelinekMercerSimilarity(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel a0((jobject) NULL);
                jfloat a1;
                LMJelinekMercerSimilarity object((jobject) NULL);

                if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::LMSimilarity$CollectionModel::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = LMJelinekMercerSimilarity(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LMJelinekMercerSimilarity_getLambda(t_LMJelinekMercerSimilarity *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getLambda());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_LMJelinekMercerSimilarity_getName(t_LMJelinekMercerSimilarity *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getName());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(LMJelinekMercerSimilarity), (PyObject *) self, "getName", args, 2);
          }

          static PyObject *t_LMJelinekMercerSimilarity_get__lambda(t_LMJelinekMercerSimilarity *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getLambda());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_LMJelinekMercerSimilarity_get__name(t_LMJelinekMercerSimilarity *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getName());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/TwoPhaseCommit.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *TwoPhaseCommit::class$ = NULL;
        jmethodID *TwoPhaseCommit::mids$ = NULL;
        bool TwoPhaseCommit::live$ = false;

        jclass TwoPhaseCommit::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/TwoPhaseCommit");

            mids$ = new jmethodID[max_mid];
            mids$[mid_commit_54c6a166] = env->getMethodID(cls, "commit", "()V");
            mids$[mid_prepareCommit_54c6a166] = env->getMethodID(cls, "prepareCommit", "()V");
            mids$[mid_rollback_54c6a166] = env->getMethodID(cls, "rollback", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void TwoPhaseCommit::commit() const
        {
          env->callVoidMethod(this$, mids$[mid_commit_54c6a166]);
        }

        void TwoPhaseCommit::prepareCommit() const
        {
          env->callVoidMethod(this$, mids$[mid_prepareCommit_54c6a166]);
        }

        void TwoPhaseCommit::rollback() const
        {
          env->callVoidMethod(this$, mids$[mid_rollback_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_TwoPhaseCommit_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TwoPhaseCommit_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TwoPhaseCommit_commit(t_TwoPhaseCommit *self);
        static PyObject *t_TwoPhaseCommit_prepareCommit(t_TwoPhaseCommit *self);
        static PyObject *t_TwoPhaseCommit_rollback(t_TwoPhaseCommit *self);

        static PyMethodDef t_TwoPhaseCommit__methods_[] = {
          DECLARE_METHOD(t_TwoPhaseCommit, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TwoPhaseCommit, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TwoPhaseCommit, commit, METH_NOARGS),
          DECLARE_METHOD(t_TwoPhaseCommit, prepareCommit, METH_NOARGS),
          DECLARE_METHOD(t_TwoPhaseCommit, rollback, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TwoPhaseCommit, t_TwoPhaseCommit, ::java::lang::Object, TwoPhaseCommit, abstract_init, 0, 0, 0, 0, 0);

        void t_TwoPhaseCommit::install(PyObject *module)
        {
          installType(&PY_TYPE(TwoPhaseCommit), module, "TwoPhaseCommit", 0);
        }

        void t_TwoPhaseCommit::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TwoPhaseCommit).tp_dict, "class_", make_descriptor(TwoPhaseCommit::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TwoPhaseCommit).tp_dict, "wrapfn_", make_descriptor(t_TwoPhaseCommit::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TwoPhaseCommit).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TwoPhaseCommit_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TwoPhaseCommit::initializeClass, 1)))
            return NULL;
          return t_TwoPhaseCommit::wrap_Object(TwoPhaseCommit(((t_TwoPhaseCommit *) arg)->object.this$));
        }
        static PyObject *t_TwoPhaseCommit_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TwoPhaseCommit::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TwoPhaseCommit_commit(t_TwoPhaseCommit *self)
        {
          OBJ_CALL(self->object.commit());
          Py_RETURN_NONE;
        }

        static PyObject *t_TwoPhaseCommit_prepareCommit(t_TwoPhaseCommit *self)
        {
          OBJ_CALL(self->object.prepareCommit());
          Py_RETURN_NONE;
        }

        static PyObject *t_TwoPhaseCommit_rollback(t_TwoPhaseCommit *self)
        {
          OBJ_CALL(self->object.rollback());
          Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Integer.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/Comparable.h"
#include "java/lang/Object.h"
#include "java/lang/NumberFormatException.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Integer::class$ = NULL;
    jmethodID *Integer::mids$ = NULL;
    bool Integer::live$ = false;
    jint Integer::MAX_VALUE = (jint) 0;
    jint Integer::MIN_VALUE = (jint) 0;
    jint Integer::SIZE = (jint) 0;
    ::java::lang::Class *Integer::TYPE = NULL;

    jclass Integer::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Integer");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_bitCount_39c7bd23] = env->getStaticMethodID(cls, "bitCount", "(I)I");
        mids$[mid_byteValue_54c6a172] = env->getMethodID(cls, "byteValue", "()B");
        mids$[mid_compare_d8d154b9] = env->getStaticMethodID(cls, "compare", "(II)I");
        mids$[mid_compareTo_af7b73bb] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Integer;)I");
        mids$[mid_decode_da36ea2b] = env->getStaticMethodID(cls, "decode", "(Ljava/lang/String;)Ljava/lang/Integer;");
        mids$[mid_doubleValue_54c6a174] = env->getMethodID(cls, "doubleValue", "()D");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_floatValue_54c6a176] = env->getMethodID(cls, "floatValue", "()F");
        mids$[mid_getInteger_da36ea2b] = env->getStaticMethodID(cls, "getInteger", "(Ljava/lang/String;)Ljava/lang/Integer;");
        mids$[mid_getInteger_fe9eddb1] = env->getStaticMethodID(cls, "getInteger", "(Ljava/lang/String;Ljava/lang/Integer;)Ljava/lang/Integer;");
        mids$[mid_getInteger_39b2b79d] = env->getStaticMethodID(cls, "getInteger", "(Ljava/lang/String;I)Ljava/lang/Integer;");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_highestOneBit_39c7bd23] = env->getStaticMethodID(cls, "highestOneBit", "(I)I");
        mids$[mid_intValue_54c6a179] = env->getMethodID(cls, "intValue", "()I");
        mids$[mid_longValue_54c6a17a] = env->getMethodID(cls, "longValue", "()J");
        mids$[mid_lowestOneBit_39c7bd23] = env->getStaticMethodID(cls, "lowestOneBit", "(I)I");
        mids$[mid_numberOfLeadingZeros_39c7bd23] = env->getStaticMethodID(cls, "numberOfLeadingZeros", "(I)I");
        mids$[mid_numberOfTrailingZeros_39c7bd23] = env->getStaticMethodID(cls, "numberOfTrailingZeros", "(I)I");
        mids$[mid_parseInt_5fdc3f57] = env->getStaticMethodID(cls, "parseInt", "(Ljava/lang/String;)I");
        mids$[mid_parseInt_6e53ccd9] = env->getStaticMethodID(cls, "parseInt", "(Ljava/lang/String;I)I");
        mids$[mid_reverse_39c7bd23] = env->getStaticMethodID(cls, "reverse", "(I)I");
        mids$[mid_reverseBytes_39c7bd23] = env->getStaticMethodID(cls, "reverseBytes", "(I)I");
        mids$[mid_rotateLeft_d8d154b9] = env->getStaticMethodID(cls, "rotateLeft", "(II)I");
        mids$[mid_rotateRight_d8d154b9] = env->getStaticMethodID(cls, "rotateRight", "(II)I");
        mids$[mid_shortValue_54c6a163] = env->getMethodID(cls, "shortValue", "()S");
        mids$[mid_signum_39c7bd23] = env->getStaticMethodID(cls, "signum", "(I)I");
        mids$[mid_toBinaryString_141401b3] = env->getStaticMethodID(cls, "toBinaryString", "(I)Ljava/lang/String;");
        mids$[mid_toHexString_141401b3] = env->getStaticMethodID(cls, "toHexString", "(I)Ljava/lang/String;");
        mids$[mid_toOctalString_141401b3] = env->getStaticMethodID(cls, "toOctalString", "(I)Ljava/lang/String;");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_toString_141401b3] = env->getStaticMethodID(cls, "toString", "(I)Ljava/lang/String;");
        mids$[mid_toString_f9118fe5] = env->getStaticMethodID(cls, "toString", "(II)Ljava/lang/String;");
        mids$[mid_valueOf_7266dabb] = env->getStaticMethodID(cls, "valueOf", "(I)Ljava/lang/Integer;");
        mids$[mid_valueOf_da36ea2b] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Ljava/lang/Integer;");
        mids$[mid_valueOf_39b2b79d] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;I)Ljava/lang/Integer;");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        MAX_VALUE = env->getStaticIntField(cls, "MAX_VALUE");
        MIN_VALUE = env->getStaticIntField(cls, "MIN_VALUE");
        SIZE = env->getStaticIntField(cls, "SIZE");
        TYPE = new ::java::lang::Class(env->getStaticObjectField(cls, "TYPE", "Ljava/lang/Class;"));
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Integer::Integer(jint a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

    Integer::Integer(const ::java::lang::String & a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    jint Integer::bitCount(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_bitCount_39c7bd23], a0);
    }

    jbyte Integer::byteValue() const
    {
      return env->callByteMethod(this$, mids$[mid_byteValue_54c6a172]);
    }

    jint Integer::compare(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_compare_d8d154b9], a0, a1);
    }

    jint Integer::compareTo(const Integer & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareTo_af7b73bb], a0.this$);
    }

    Integer Integer::decode(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Integer(env->callStaticObjectMethod(cls, mids$[mid_decode_da36ea2b], a0.this$));
    }

    jdouble Integer::doubleValue() const
    {
      return env->callDoubleMethod(this$, mids$[mid_doubleValue_54c6a174]);
    }

    jboolean Integer::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    jfloat Integer::floatValue() const
    {
      return env->callFloatMethod(this$, mids$[mid_floatValue_54c6a176]);
    }

    Integer Integer::getInteger(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Integer(env->callStaticObjectMethod(cls, mids$[mid_getInteger_da36ea2b], a0.this$));
    }

    Integer Integer::getInteger(const ::java::lang::String & a0, const Integer & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return Integer(env->callStaticObjectMethod(cls, mids$[mid_getInteger_fe9eddb1], a0.this$, a1.this$));
    }

    Integer Integer::getInteger(const ::java::lang::String & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return Integer(env->callStaticObjectMethod(cls, mids$[mid_getInteger_39b2b79d], a0.this$, a1));
    }

    jint Integer::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jint Integer::highestOneBit(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_highestOneBit_39c7bd23], a0);
    }

    jint Integer::intValue() const
    {
      return env->callIntMethod(this$, mids$[mid_intValue_54c6a179]);
    }

    jlong Integer::longValue() const
    {
      return env->callLongMethod(this$, mids$[mid_longValue_54c6a17a]);
    }

    jint Integer::lowestOneBit(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_lowestOneBit_39c7bd23], a0);
    }

    jint Integer::numberOfLeadingZeros(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_numberOfLeadingZeros_39c7bd23], a0);
    }

    jint Integer::numberOfTrailingZeros(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_numberOfTrailingZeros_39c7bd23], a0);
    }

    jint Integer::parseInt(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_parseInt_5fdc3f57], a0.this$);
    }

    jint Integer::parseInt(const ::java::lang::String & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_parseInt_6e53ccd9], a0.this$, a1);
    }

    jint Integer::reverse(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_reverse_39c7bd23], a0);
    }

    jint Integer::reverseBytes(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_reverseBytes_39c7bd23], a0);
    }

    jint Integer::rotateLeft(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_rotateLeft_d8d154b9], a0, a1);
    }

    jint Integer::rotateRight(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_rotateRight_d8d154b9], a0, a1);
    }

    jshort Integer::shortValue() const
    {
      return env->callShortMethod(this$, mids$[mid_shortValue_54c6a163]);
    }

    jint Integer::signum(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_signum_39c7bd23], a0);
    }

    ::java::lang::String Integer::toBinaryString(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toBinaryString_141401b3], a0));
    }

    ::java::lang::String Integer::toHexString(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toHexString_141401b3], a0));
    }

    ::java::lang::String Integer::toOctalString(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toOctalString_141401b3], a0));
    }

    ::java::lang::String Integer::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    ::java::lang::String Integer::toString(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_141401b3], a0));
    }

    ::java::lang::String Integer::toString(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_f9118fe5], a0, a1));
    }

    Integer Integer::valueOf(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Integer(env->callStaticObjectMethod(cls, mids$[mid_valueOf_7266dabb], a0));
    }

    Integer Integer::valueOf(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Integer(env->callStaticObjectMethod(cls, mids$[mid_valueOf_da36ea2b], a0.this$));
    }

    Integer Integer::valueOf(const ::java::lang::String & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return Integer(env->callStaticObjectMethod(cls, mids$[mid_valueOf_39b2b79d], a0.this$, a1));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Integer_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Integer_init_(t_Integer *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Integer_bitCount(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_byteValue(t_Integer *self, PyObject *args);
    static PyObject *t_Integer_compare(PyTypeObject *type, PyObject *args);
    static PyObject *t_Integer_compareTo(t_Integer *self, PyObject *arg);
    static PyObject *t_Integer_decode(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_doubleValue(t_Integer *self, PyObject *args);
    static PyObject *t_Integer_equals(t_Integer *self, PyObject *args);
    static PyObject *t_Integer_floatValue(t_Integer *self, PyObject *args);
    static PyObject *t_Integer_getInteger(PyTypeObject *type, PyObject *args);
    static PyObject *t_Integer_hashCode(t_Integer *self, PyObject *args);
    static PyObject *t_Integer_highestOneBit(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_intValue(t_Integer *self, PyObject *args);
    static PyObject *t_Integer_longValue(t_Integer *self, PyObject *args);
    static PyObject *t_Integer_lowestOneBit(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_numberOfLeadingZeros(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_numberOfTrailingZeros(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_parseInt(PyTypeObject *type, PyObject *args);
    static PyObject *t_Integer_reverse(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_reverseBytes(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_rotateLeft(PyTypeObject *type, PyObject *args);
    static PyObject *t_Integer_rotateRight(PyTypeObject *type, PyObject *args);
    static PyObject *t_Integer_shortValue(t_Integer *self, PyObject *args);
    static PyObject *t_Integer_signum(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_toBinaryString(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_toHexString(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_toOctalString(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_toString(t_Integer *self, PyObject *args);
    static PyObject *t_Integer_toString_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Integer_valueOf(PyTypeObject *type, PyObject *args);

    static PyMethodDef t_Integer__methods_[] = {
      DECLARE_METHOD(t_Integer, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, bitCount, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, byteValue, METH_VARARGS),
      DECLARE_METHOD(t_Integer, compare, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Integer, compareTo, METH_O),
      DECLARE_METHOD(t_Integer, decode, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, doubleValue, METH_VARARGS),
      DECLARE_METHOD(t_Integer, equals, METH_VARARGS),
      DECLARE_METHOD(t_Integer, floatValue, METH_VARARGS),
      DECLARE_METHOD(t_Integer, getInteger, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Integer, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Integer, highestOneBit, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, intValue, METH_VARARGS),
      DECLARE_METHOD(t_Integer, longValue, METH_VARARGS),
      DECLARE_METHOD(t_Integer, lowestOneBit, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, numberOfLeadingZeros, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, numberOfTrailingZeros, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, parseInt, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Integer, reverse, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, reverseBytes, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, rotateLeft, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Integer, rotateRight, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Integer, shortValue, METH_VARARGS),
      DECLARE_METHOD(t_Integer, signum, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, toBinaryString, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, toHexString, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, toOctalString, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, toString, METH_VARARGS),
      DECLARE_METHOD(t_Integer, toString_, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Integer, valueOf, METH_VARARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Integer, t_Integer, ::java::lang::Number, Integer, t_Integer_init_, 0, 0, 0, 0, 0);

    void t_Integer::install(PyObject *module)
    {
      installType(&PY_TYPE(Integer), module, "Integer", 0);
    }

    void t_Integer::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Integer).tp_dict, "class_", make_descriptor(Integer::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Integer).tp_dict, "wrapfn_", make_descriptor(unboxInteger));
      PyDict_SetItemString(PY_TYPE(Integer).tp_dict, "boxfn_", make_descriptor(boxInteger));
      env->getClass(Integer::initializeClass);
      PyDict_SetItemString(PY_TYPE(Integer).tp_dict, "MAX_VALUE", make_descriptor(Integer::MAX_VALUE));
      PyDict_SetItemString(PY_TYPE(Integer).tp_dict, "MIN_VALUE", make_descriptor(Integer::MIN_VALUE));
      PyDict_SetItemString(PY_TYPE(Integer).tp_dict, "SIZE", make_descriptor(Integer::SIZE));
      PyDict_SetItemString(PY_TYPE(Integer).tp_dict, "TYPE", make_descriptor(::java::lang::t_Class::wrap_Object(*Integer::TYPE)));
    }

    static PyObject *t_Integer_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Integer::initializeClass, 1)))
        return NULL;
      return t_Integer::wrap_Object(Integer(((t_Integer *) arg)->object.this$));
    }
    static PyObject *t_Integer_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Integer::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Integer_init_(t_Integer *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          Integer object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = Integer(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Integer object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Integer(a0));
            self->object = object;
            break;
          }
        }
       default:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_Integer_bitCount(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::bitCount(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "bitCount", arg);
      return NULL;
    }

    static PyObject *t_Integer_byteValue(t_Integer *self, PyObject *args)
    {
      jbyte result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.byteValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Integer), (PyObject *) self, "byteValue", args, 2);
    }

    static PyObject *t_Integer_compare(PyTypeObject *type, PyObject *args)
    {
      jint a0;
      jint a1;
      jint result;

      if (!parseArgs(args, "II", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Integer::compare(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "compare", args);
      return NULL;
    }

    static PyObject *t_Integer_compareTo(t_Integer *self, PyObject *arg)
    {
      Integer a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Integer), &a0))
      {
        OBJ_CALL(result = self->object.compareTo(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
      return NULL;
    }

    static PyObject *t_Integer_decode(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      Integer result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::decode(a0));
        return t_Integer::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "decode", arg);
      return NULL;
    }

    static PyObject *t_Integer_doubleValue(t_Integer *self, PyObject *args)
    {
      jdouble result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.doubleValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(&PY_TYPE(Integer), (PyObject *) self, "doubleValue", args, 2);
    }

    static PyObject *t_Integer_equals(t_Integer *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(Integer), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Integer_floatValue(t_Integer *self, PyObject *args)
    {
      jfloat result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.floatValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(&PY_TYPE(Integer), (PyObject *) self, "floatValue", args, 2);
    }

    static PyObject *t_Integer_getInteger(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          Integer result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Integer::getInteger(a0));
            return t_Integer::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          Integer a1((jobject) NULL);
          Integer result((jobject) NULL);

          if (!parseArgs(args, "sO", &::java::lang::PY_TYPE(Integer), &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Integer::getInteger(a0, a1));
            return t_Integer::wrap_Object(result);
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          Integer result((jobject) NULL);

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Integer::getInteger(a0, a1));
            return t_Integer::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getInteger", args);
      return NULL;
    }

    static PyObject *t_Integer_hashCode(t_Integer *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Integer), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Integer_highestOneBit(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::highestOneBit(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "highestOneBit", arg);
      return NULL;
    }

    static PyObject *t_Integer_intValue(t_Integer *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.intValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Integer), (PyObject *) self, "intValue", args, 2);
    }

    static PyObject *t_Integer_longValue(t_Integer *self, PyObject *args)
    {
      jlong result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.longValue());
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      return callSuper(&PY_TYPE(Integer), (PyObject *) self, "longValue", args, 2);
    }

    static PyObject *t_Integer_lowestOneBit(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::lowestOneBit(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "lowestOneBit", arg);
      return NULL;
    }

    static PyObject *t_Integer_numberOfLeadingZeros(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::numberOfLeadingZeros(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "numberOfLeadingZeros", arg);
      return NULL;
    }

    static PyObject *t_Integer_numberOfTrailingZeros(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::numberOfTrailingZeros(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "numberOfTrailingZeros", arg);
      return NULL;
    }

    static PyObject *t_Integer_parseInt(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Integer::parseInt(a0));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          jint result;

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Integer::parseInt(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "parseInt", args);
      return NULL;
    }

    static PyObject *t_Integer_reverse(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::reverse(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "reverse", arg);
      return NULL;
    }

    static PyObject *t_Integer_reverseBytes(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::reverseBytes(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "reverseBytes", arg);
      return NULL;
    }

    static PyObject *t_Integer_rotateLeft(PyTypeObject *type, PyObject *args)
    {
      jint a0;
      jint a1;
      jint result;

      if (!parseArgs(args, "II", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Integer::rotateLeft(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "rotateLeft", args);
      return NULL;
    }

    static PyObject *t_Integer_rotateRight(PyTypeObject *type, PyObject *args)
    {
      jint a0;
      jint a1;
      jint result;

      if (!parseArgs(args, "II", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Integer::rotateRight(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "rotateRight", args);
      return NULL;
    }

    static PyObject *t_Integer_shortValue(t_Integer *self, PyObject *args)
    {
      jshort result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.shortValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Integer), (PyObject *) self, "shortValue", args, 2);
    }

    static PyObject *t_Integer_signum(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::signum(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "signum", arg);
      return NULL;
    }

    static PyObject *t_Integer_toBinaryString(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::toBinaryString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toBinaryString", arg);
      return NULL;
    }

    static PyObject *t_Integer_toHexString(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::toHexString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toHexString", arg);
      return NULL;
    }

    static PyObject *t_Integer_toOctalString(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::toOctalString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toOctalString", arg);
      return NULL;
    }

    static PyObject *t_Integer_toString(t_Integer *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(Integer), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Integer_toString_(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Integer::toString(a0));
            return j2p(result);
          }
        }
        break;
       case 2:
        {
          jint a0;
          jint a1;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Integer::toString(a0, a1));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError(type, "toString_", args);
      return NULL;
    }

    static PyObject *t_Integer_valueOf(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          Integer result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Integer::valueOf(a0));
            return t_Integer::wrap_Object(result);
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Integer result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Integer::valueOf(a0));
            return t_Integer::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          Integer result((jobject) NULL);

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Integer::valueOf(a0, a1));
            return t_Integer::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "valueOf", args);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/DocFreqValueSource.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *DocFreqValueSource::class$ = NULL;
            jmethodID *DocFreqValueSource::mids$ = NULL;
            bool DocFreqValueSource::live$ = false;

            jclass DocFreqValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/DocFreqValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_b45b6622] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DocFreqValueSource::DocFreqValueSource(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::org::apache::lucene::util::BytesRef & a3) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_b45b6622, a0.this$, a1.this$, a2.this$, a3.this$)) {}

            void DocFreqValueSource::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String DocFreqValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean DocFreqValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues DocFreqValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint DocFreqValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }

            ::java::lang::String DocFreqValueSource::name() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_DocFreqValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DocFreqValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DocFreqValueSource_init_(t_DocFreqValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DocFreqValueSource_createWeight(t_DocFreqValueSource *self, PyObject *args);
            static PyObject *t_DocFreqValueSource_description(t_DocFreqValueSource *self, PyObject *args);
            static PyObject *t_DocFreqValueSource_equals(t_DocFreqValueSource *self, PyObject *args);
            static PyObject *t_DocFreqValueSource_getValues(t_DocFreqValueSource *self, PyObject *args);
            static PyObject *t_DocFreqValueSource_hashCode(t_DocFreqValueSource *self, PyObject *args);
            static PyObject *t_DocFreqValueSource_name(t_DocFreqValueSource *self);

            static PyMethodDef t_DocFreqValueSource__methods_[] = {
              DECLARE_METHOD(t_DocFreqValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DocFreqValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DocFreqValueSource, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_DocFreqValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_DocFreqValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_DocFreqValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_DocFreqValueSource, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_DocFreqValueSource, name, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DocFreqValueSource, t_DocFreqValueSource, ::org::apache::lucene::queries::function::ValueSource, DocFreqValueSource, t_DocFreqValueSource_init_, 0, 0, 0, 0, 0);

            void t_DocFreqValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(DocFreqValueSource), module, "DocFreqValueSource", 0);
            }

            void t_DocFreqValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DocFreqValueSource).tp_dict, "class_", make_descriptor(DocFreqValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DocFreqValueSource).tp_dict, "wrapfn_", make_descriptor(t_DocFreqValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DocFreqValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DocFreqValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DocFreqValueSource::initializeClass, 1)))
                return NULL;
              return t_DocFreqValueSource::wrap_Object(DocFreqValueSource(((t_DocFreqValueSource *) arg)->object.this$));
            }
            static PyObject *t_DocFreqValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DocFreqValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DocFreqValueSource_init_(t_DocFreqValueSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
              DocFreqValueSource object((jobject) NULL);

              if (!parseArgs(args, "sssk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = DocFreqValueSource(a0, a1, a2, a3));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_DocFreqValueSource_createWeight(t_DocFreqValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(DocFreqValueSource), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_DocFreqValueSource_description(t_DocFreqValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(DocFreqValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_DocFreqValueSource_equals(t_DocFreqValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(DocFreqValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_DocFreqValueSource_getValues(t_DocFreqValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(DocFreqValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_DocFreqValueSource_hashCode(t_DocFreqValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(DocFreqValueSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_DocFreqValueSource_name(t_DocFreqValueSource *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.name());
              return j2p(result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/SimilarityBase.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/TermStatistics.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/CollectionStatistics.h"
#include "org/apache/lucene/index/FieldInvertState.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/similarities/Similarity$SimWeight.h"
#include "org/apache/lucene/search/similarities/Similarity$SimScorer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *SimilarityBase::class$ = NULL;
          jmethodID *SimilarityBase::mids$ = NULL;
          bool SimilarityBase::live$ = false;

          jclass SimilarityBase::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/SimilarityBase");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_computeNorm_6ff84e0e] = env->getMethodID(cls, "computeNorm", "(Lorg/apache/lucene/index/FieldInvertState;)J");
              mids$[mid_computeWeight_8bb6ee0b] = env->getMethodID(cls, "computeWeight", "(FLorg/apache/lucene/search/CollectionStatistics;[Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/similarities/Similarity$SimWeight;");
              mids$[mid_getDiscountOverlaps_54c6a16a] = env->getMethodID(cls, "getDiscountOverlaps", "()Z");
              mids$[mid_log2_5d1c7657] = env->getStaticMethodID(cls, "log2", "(D)D");
              mids$[mid_setDiscountOverlaps_bb0c767f] = env->getMethodID(cls, "setDiscountOverlaps", "(Z)V");
              mids$[mid_simScorer_9a2cfed8] = env->getMethodID(cls, "simScorer", "(Lorg/apache/lucene/search/similarities/Similarity$SimWeight;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/similarities/Similarity$SimScorer;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_score_63482206] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)F");
              mids$[mid_explain_347d95f8] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/Explanation;Lorg/apache/lucene/search/similarities/BasicStats;IFF)V");
              mids$[mid_explain_be9c5a0c] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;ILorg/apache/lucene/search/Explanation;F)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_decodeNormValue_b2271697] = env->getMethodID(cls, "decodeNormValue", "(B)F");
              mids$[mid_fillBasicStats_c856a532] = env->getMethodID(cls, "fillBasicStats", "(Lorg/apache/lucene/search/similarities/BasicStats;Lorg/apache/lucene/search/CollectionStatistics;Lorg/apache/lucene/search/TermStatistics;)V");
              mids$[mid_encodeNormValue_f1b0c010] = env->getMethodID(cls, "encodeNormValue", "(FF)B");
              mids$[mid_newStats_5129800c] = env->getMethodID(cls, "newStats", "(Ljava/lang/String;F)Lorg/apache/lucene/search/similarities/BasicStats;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimilarityBase::SimilarityBase() : ::org::apache::lucene::search::similarities::Similarity(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jlong SimilarityBase::computeNorm(const ::org::apache::lucene::index::FieldInvertState & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_computeNorm_6ff84e0e], a0.this$);
          }

          ::org::apache::lucene::search::similarities::Similarity$SimWeight SimilarityBase::computeWeight(jfloat a0, const ::org::apache::lucene::search::CollectionStatistics & a1, const JArray< ::org::apache::lucene::search::TermStatistics > & a2) const
          {
            return ::org::apache::lucene::search::similarities::Similarity$SimWeight(env->callObjectMethod(this$, mids$[mid_computeWeight_8bb6ee0b], a0, a1.this$, a2.this$));
          }

          jboolean SimilarityBase::getDiscountOverlaps() const
          {
            return env->callBooleanMethod(this$, mids$[mid_getDiscountOverlaps_54c6a16a]);
          }

          jdouble SimilarityBase::log2(jdouble a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticDoubleMethod(cls, mids$[mid_log2_5d1c7657], a0);
          }

          void SimilarityBase::setDiscountOverlaps(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setDiscountOverlaps_bb0c767f], a0);
          }

          ::org::apache::lucene::search::similarities::Similarity$SimScorer SimilarityBase::simScorer(const ::org::apache::lucene::search::similarities::Similarity$SimWeight & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
          {
            return ::org::apache::lucene::search::similarities::Similarity$SimScorer(env->callObjectMethod(this$, mids$[mid_simScorer_9a2cfed8], a0.this$, a1.this$));
          }

          ::java::lang::String SimilarityBase::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_SimilarityBase_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimilarityBase_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimilarityBase_init_(t_SimilarityBase *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimilarityBase_computeNorm(t_SimilarityBase *self, PyObject *args);
          static PyObject *t_SimilarityBase_computeWeight(t_SimilarityBase *self, PyObject *args);
          static PyObject *t_SimilarityBase_getDiscountOverlaps(t_SimilarityBase *self);
          static PyObject *t_SimilarityBase_log2(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimilarityBase_setDiscountOverlaps(t_SimilarityBase *self, PyObject *arg);
          static PyObject *t_SimilarityBase_simScorer(t_SimilarityBase *self, PyObject *args);
          static PyObject *t_SimilarityBase_toString(t_SimilarityBase *self, PyObject *args);
          static PyObject *t_SimilarityBase_get__discountOverlaps(t_SimilarityBase *self, void *data);
          static int t_SimilarityBase_set__discountOverlaps(t_SimilarityBase *self, PyObject *arg, void *data);
          static PyGetSetDef t_SimilarityBase__fields_[] = {
            DECLARE_GETSET_FIELD(t_SimilarityBase, discountOverlaps),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SimilarityBase__methods_[] = {
            DECLARE_METHOD(t_SimilarityBase, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimilarityBase, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimilarityBase, computeNorm, METH_VARARGS),
            DECLARE_METHOD(t_SimilarityBase, computeWeight, METH_VARARGS),
            DECLARE_METHOD(t_SimilarityBase, getDiscountOverlaps, METH_NOARGS),
            DECLARE_METHOD(t_SimilarityBase, log2, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimilarityBase, setDiscountOverlaps, METH_O),
            DECLARE_METHOD(t_SimilarityBase, simScorer, METH_VARARGS),
            DECLARE_METHOD(t_SimilarityBase, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SimilarityBase, t_SimilarityBase, ::org::apache::lucene::search::similarities::Similarity, SimilarityBase, t_SimilarityBase_init_, 0, 0, t_SimilarityBase__fields_, 0, 0);

          void t_SimilarityBase::install(PyObject *module)
          {
            installType(&PY_TYPE(SimilarityBase), module, "SimilarityBase", 0);
          }

          void t_SimilarityBase::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SimilarityBase).tp_dict, "class_", make_descriptor(SimilarityBase::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SimilarityBase).tp_dict, "wrapfn_", make_descriptor(t_SimilarityBase::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SimilarityBase).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimilarityBase_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimilarityBase::initializeClass, 1)))
              return NULL;
            return t_SimilarityBase::wrap_Object(SimilarityBase(((t_SimilarityBase *) arg)->object.this$));
          }
          static PyObject *t_SimilarityBase_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimilarityBase::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimilarityBase_init_(t_SimilarityBase *self, PyObject *args, PyObject *kwds)
          {
            SimilarityBase object((jobject) NULL);

            INT_CALL(object = SimilarityBase());
            self->object = object;

            return 0;
          }

          static PyObject *t_SimilarityBase_computeNorm(t_SimilarityBase *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInvertState a0((jobject) NULL);
            jlong result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInvertState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.computeNorm(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(SimilarityBase), (PyObject *) self, "computeNorm", args, 2);
          }

          static PyObject *t_SimilarityBase_computeWeight(t_SimilarityBase *self, PyObject *args)
          {
            jfloat a0;
            ::org::apache::lucene::search::CollectionStatistics a1((jobject) NULL);
            JArray< ::org::apache::lucene::search::TermStatistics > a2((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity$SimWeight result((jobject) NULL);

            if (!parseArgs(args, "Fk[k", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.computeWeight(a0, a1, a2));
              return ::org::apache::lucene::search::similarities::t_Similarity$SimWeight::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SimilarityBase), (PyObject *) self, "computeWeight", args, 2);
          }

          static PyObject *t_SimilarityBase_getDiscountOverlaps(t_SimilarityBase *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.getDiscountOverlaps());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_SimilarityBase_log2(PyTypeObject *type, PyObject *arg)
          {
            jdouble a0;
            jdouble result;

            if (!parseArg(arg, "D", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::similarities::SimilarityBase::log2(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError(type, "log2", arg);
            return NULL;
          }

          static PyObject *t_SimilarityBase_setDiscountOverlaps(t_SimilarityBase *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setDiscountOverlaps(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setDiscountOverlaps", arg);
            return NULL;
          }

          static PyObject *t_SimilarityBase_simScorer(t_SimilarityBase *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::Similarity$SimWeight a0((jobject) NULL);
            ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity$SimScorer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::similarities::Similarity$SimWeight::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.simScorer(a0, a1));
              return ::org::apache::lucene::search::similarities::t_Similarity$SimScorer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SimilarityBase), (PyObject *) self, "simScorer", args, 2);
          }

          static PyObject *t_SimilarityBase_toString(t_SimilarityBase *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SimilarityBase), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_SimilarityBase_get__discountOverlaps(t_SimilarityBase *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.getDiscountOverlaps());
            Py_RETURN_BOOL(value);
          }
          static int t_SimilarityBase_set__discountOverlaps(t_SimilarityBase *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setDiscountOverlaps(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "discountOverlaps", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FilteredQuery.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Weight.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/search/FilteredQuery$FilterStrategy.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/util/Set.h"
#include "org/apache/lucene/search/Filter.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FilteredQuery::class$ = NULL;
        jmethodID *FilteredQuery::mids$ = NULL;
        bool FilteredQuery::live$ = false;
        ::org::apache::lucene::search::FilteredQuery$FilterStrategy *FilteredQuery::LEAP_FROG_FILTER_FIRST_STRATEGY = NULL;
        ::org::apache::lucene::search::FilteredQuery$FilterStrategy *FilteredQuery::LEAP_FROG_QUERY_FIRST_STRATEGY = NULL;
        ::org::apache::lucene::search::FilteredQuery$FilterStrategy *FilteredQuery::QUERY_FIRST_FILTER_STRATEGY = NULL;
        ::org::apache::lucene::search::FilteredQuery$FilterStrategy *FilteredQuery::RANDOM_ACCESS_FILTER_STRATEGY = NULL;

        jclass FilteredQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FilteredQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_96ca297d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;)V");
            mids$[mid_init$_61c4287b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/search/FilteredQuery$FilterStrategy;)V");
            mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
            mids$[mid_getFilter_b40f961f] = env->getMethodID(cls, "getFilter", "()Lorg/apache/lucene/search/Filter;");
            mids$[mid_getFilterStrategy_98d3690b] = env->getMethodID(cls, "getFilterStrategy", "()Lorg/apache/lucene/search/FilteredQuery$FilterStrategy;");
            mids$[mid_getQuery_97e3851a] = env->getMethodID(cls, "getQuery", "()Lorg/apache/lucene/search/Query;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            LEAP_FROG_FILTER_FIRST_STRATEGY = new ::org::apache::lucene::search::FilteredQuery$FilterStrategy(env->getStaticObjectField(cls, "LEAP_FROG_FILTER_FIRST_STRATEGY", "Lorg/apache/lucene/search/FilteredQuery$FilterStrategy;"));
            LEAP_FROG_QUERY_FIRST_STRATEGY = new ::org::apache::lucene::search::FilteredQuery$FilterStrategy(env->getStaticObjectField(cls, "LEAP_FROG_QUERY_FIRST_STRATEGY", "Lorg/apache/lucene/search/FilteredQuery$FilterStrategy;"));
            QUERY_FIRST_FILTER_STRATEGY = new ::org::apache::lucene::search::FilteredQuery$FilterStrategy(env->getStaticObjectField(cls, "QUERY_FIRST_FILTER_STRATEGY", "Lorg/apache/lucene/search/FilteredQuery$FilterStrategy;"));
            RANDOM_ACCESS_FILTER_STRATEGY = new ::org::apache::lucene::search::FilteredQuery$FilterStrategy(env->getStaticObjectField(cls, "RANDOM_ACCESS_FILTER_STRATEGY", "Lorg/apache/lucene/search/FilteredQuery$FilterStrategy;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilteredQuery::FilteredQuery(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::Filter & a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_96ca297d, a0.this$, a1.this$)) {}

        FilteredQuery::FilteredQuery(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::Filter & a1, const ::org::apache::lucene::search::FilteredQuery$FilterStrategy & a2) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_61c4287b, a0.this$, a1.this$, a2.this$)) {}

        ::org::apache::lucene::search::Weight FilteredQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
        }

        jboolean FilteredQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void FilteredQuery::extractTerms(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
        }

        ::org::apache::lucene::search::Filter FilteredQuery::getFilter() const
        {
          return ::org::apache::lucene::search::Filter(env->callObjectMethod(this$, mids$[mid_getFilter_b40f961f]));
        }

        ::org::apache::lucene::search::FilteredQuery$FilterStrategy FilteredQuery::getFilterStrategy() const
        {
          return ::org::apache::lucene::search::FilteredQuery$FilterStrategy(env->callObjectMethod(this$, mids$[mid_getFilterStrategy_98d3690b]));
        }

        ::org::apache::lucene::search::Query FilteredQuery::getQuery() const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getQuery_97e3851a]));
        }

        jint FilteredQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::org::apache::lucene::search::Query FilteredQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
        }

        ::java::lang::String FilteredQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/FilteredQuery$RandomAccessFilterStrategy.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FilteredQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilteredQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilteredQuery_init_(t_FilteredQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilteredQuery_createWeight(t_FilteredQuery *self, PyObject *args);
        static PyObject *t_FilteredQuery_equals(t_FilteredQuery *self, PyObject *args);
        static PyObject *t_FilteredQuery_extractTerms(t_FilteredQuery *self, PyObject *args);
        static PyObject *t_FilteredQuery_getFilter(t_FilteredQuery *self);
        static PyObject *t_FilteredQuery_getFilterStrategy(t_FilteredQuery *self);
        static PyObject *t_FilteredQuery_getQuery(t_FilteredQuery *self);
        static PyObject *t_FilteredQuery_hashCode(t_FilteredQuery *self, PyObject *args);
        static PyObject *t_FilteredQuery_rewrite(t_FilteredQuery *self, PyObject *args);
        static PyObject *t_FilteredQuery_toString(t_FilteredQuery *self, PyObject *args);
        static PyObject *t_FilteredQuery_get__filter(t_FilteredQuery *self, void *data);
        static PyObject *t_FilteredQuery_get__filterStrategy(t_FilteredQuery *self, void *data);
        static PyObject *t_FilteredQuery_get__query(t_FilteredQuery *self, void *data);
        static PyGetSetDef t_FilteredQuery__fields_[] = {
          DECLARE_GET_FIELD(t_FilteredQuery, filter),
          DECLARE_GET_FIELD(t_FilteredQuery, filterStrategy),
          DECLARE_GET_FIELD(t_FilteredQuery, query),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilteredQuery__methods_[] = {
          DECLARE_METHOD(t_FilteredQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilteredQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilteredQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_FilteredQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_FilteredQuery, extractTerms, METH_VARARGS),
          DECLARE_METHOD(t_FilteredQuery, getFilter, METH_NOARGS),
          DECLARE_METHOD(t_FilteredQuery, getFilterStrategy, METH_NOARGS),
          DECLARE_METHOD(t_FilteredQuery, getQuery, METH_NOARGS),
          DECLARE_METHOD(t_FilteredQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_FilteredQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_FilteredQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilteredQuery, t_FilteredQuery, ::org::apache::lucene::search::Query, FilteredQuery, t_FilteredQuery_init_, 0, 0, t_FilteredQuery__fields_, 0, 0);

        void t_FilteredQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(FilteredQuery), module, "FilteredQuery", 0);
          PyDict_SetItemString(PY_TYPE(FilteredQuery).tp_dict, "RandomAccessFilterStrategy", make_descriptor(&PY_TYPE(FilteredQuery$RandomAccessFilterStrategy)));
          PyDict_SetItemString(PY_TYPE(FilteredQuery).tp_dict, "FilterStrategy", make_descriptor(&PY_TYPE(FilteredQuery$FilterStrategy)));
        }

        void t_FilteredQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilteredQuery).tp_dict, "class_", make_descriptor(FilteredQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilteredQuery).tp_dict, "wrapfn_", make_descriptor(t_FilteredQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilteredQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FilteredQuery::initializeClass);
          PyDict_SetItemString(PY_TYPE(FilteredQuery).tp_dict, "LEAP_FROG_FILTER_FIRST_STRATEGY", make_descriptor(::org::apache::lucene::search::t_FilteredQuery$FilterStrategy::wrap_Object(*FilteredQuery::LEAP_FROG_FILTER_FIRST_STRATEGY)));
          PyDict_SetItemString(PY_TYPE(FilteredQuery).tp_dict, "LEAP_FROG_QUERY_FIRST_STRATEGY", make_descriptor(::org::apache::lucene::search::t_FilteredQuery$FilterStrategy::wrap_Object(*FilteredQuery::LEAP_FROG_QUERY_FIRST_STRATEGY)));
          PyDict_SetItemString(PY_TYPE(FilteredQuery).tp_dict, "QUERY_FIRST_FILTER_STRATEGY", make_descriptor(::org::apache::lucene::search::t_FilteredQuery$FilterStrategy::wrap_Object(*FilteredQuery::QUERY_FIRST_FILTER_STRATEGY)));
          PyDict_SetItemString(PY_TYPE(FilteredQuery).tp_dict, "RANDOM_ACCESS_FILTER_STRATEGY", make_descriptor(::org::apache::lucene::search::t_FilteredQuery$FilterStrategy::wrap_Object(*FilteredQuery::RANDOM_ACCESS_FILTER_STRATEGY)));
        }

        static PyObject *t_FilteredQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilteredQuery::initializeClass, 1)))
            return NULL;
          return t_FilteredQuery::wrap_Object(FilteredQuery(((t_FilteredQuery *) arg)->object.this$));
        }
        static PyObject *t_FilteredQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilteredQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilteredQuery_init_(t_FilteredQuery *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              ::org::apache::lucene::search::Filter a1((jobject) NULL);
              FilteredQuery object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, &a0, &a1))
              {
                INT_CALL(object = FilteredQuery(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              ::org::apache::lucene::search::Filter a1((jobject) NULL);
              ::org::apache::lucene::search::FilteredQuery$FilterStrategy a2((jobject) NULL);
              FilteredQuery object((jobject) NULL);

              if (!parseArgs(args, "kkk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::FilteredQuery$FilterStrategy::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = FilteredQuery(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilteredQuery_createWeight(t_FilteredQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.createWeight(a0));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilteredQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_FilteredQuery_equals(t_FilteredQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FilteredQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_FilteredQuery_extractTerms(t_FilteredQuery *self, PyObject *args)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.extractTerms(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FilteredQuery), (PyObject *) self, "extractTerms", args, 2);
        }

        static PyObject *t_FilteredQuery_getFilter(t_FilteredQuery *self)
        {
          ::org::apache::lucene::search::Filter result((jobject) NULL);
          OBJ_CALL(result = self->object.getFilter());
          return ::org::apache::lucene::search::t_Filter::wrap_Object(result);
        }

        static PyObject *t_FilteredQuery_getFilterStrategy(t_FilteredQuery *self)
        {
          ::org::apache::lucene::search::FilteredQuery$FilterStrategy result((jobject) NULL);
          OBJ_CALL(result = self->object.getFilterStrategy());
          return ::org::apache::lucene::search::t_FilteredQuery$FilterStrategy::wrap_Object(result);
        }

        static PyObject *t_FilteredQuery_getQuery(t_FilteredQuery *self)
        {
          ::org::apache::lucene::search::Query result((jobject) NULL);
          OBJ_CALL(result = self->object.getQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(result);
        }

        static PyObject *t_FilteredQuery_hashCode(t_FilteredQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilteredQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_FilteredQuery_rewrite(t_FilteredQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilteredQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_FilteredQuery_toString(t_FilteredQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FilteredQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FilteredQuery_get__filter(t_FilteredQuery *self, void *data)
        {
          ::org::apache::lucene::search::Filter value((jobject) NULL);
          OBJ_CALL(value = self->object.getFilter());
          return ::org::apache::lucene::search::t_Filter::wrap_Object(value);
        }

        static PyObject *t_FilteredQuery_get__filterStrategy(t_FilteredQuery *self, void *data)
        {
          ::org::apache::lucene::search::FilteredQuery$FilterStrategy value((jobject) NULL);
          OBJ_CALL(value = self->object.getFilterStrategy());
          return ::org::apache::lucene::search::t_FilteredQuery$FilterStrategy::wrap_Object(value);
        }

        static PyObject *t_FilteredQuery_get__query(t_FilteredQuery *self, void *data)
        {
          ::org::apache::lucene::search::Query value((jobject) NULL);
          OBJ_CALL(value = self->object.getQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *TokenOffsetPayloadTokenFilter::class$ = NULL;
          jmethodID *TokenOffsetPayloadTokenFilter::mids$ = NULL;
          bool TokenOffsetPayloadTokenFilter::live$ = false;

          jclass TokenOffsetPayloadTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TokenOffsetPayloadTokenFilter::TokenOffsetPayloadTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean TokenOffsetPayloadTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_TokenOffsetPayloadTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenOffsetPayloadTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TokenOffsetPayloadTokenFilter_init_(t_TokenOffsetPayloadTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TokenOffsetPayloadTokenFilter_incrementToken(t_TokenOffsetPayloadTokenFilter *self, PyObject *args);

          static PyMethodDef t_TokenOffsetPayloadTokenFilter__methods_[] = {
            DECLARE_METHOD(t_TokenOffsetPayloadTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenOffsetPayloadTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenOffsetPayloadTokenFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TokenOffsetPayloadTokenFilter, t_TokenOffsetPayloadTokenFilter, ::org::apache::lucene::analysis::TokenFilter, TokenOffsetPayloadTokenFilter, t_TokenOffsetPayloadTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_TokenOffsetPayloadTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(TokenOffsetPayloadTokenFilter), module, "TokenOffsetPayloadTokenFilter", 0);
          }

          void t_TokenOffsetPayloadTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TokenOffsetPayloadTokenFilter).tp_dict, "class_", make_descriptor(TokenOffsetPayloadTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TokenOffsetPayloadTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_TokenOffsetPayloadTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TokenOffsetPayloadTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TokenOffsetPayloadTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TokenOffsetPayloadTokenFilter::initializeClass, 1)))
              return NULL;
            return t_TokenOffsetPayloadTokenFilter::wrap_Object(TokenOffsetPayloadTokenFilter(((t_TokenOffsetPayloadTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_TokenOffsetPayloadTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TokenOffsetPayloadTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TokenOffsetPayloadTokenFilter_init_(t_TokenOffsetPayloadTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            TokenOffsetPayloadTokenFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = TokenOffsetPayloadTokenFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TokenOffsetPayloadTokenFilter_incrementToken(t_TokenOffsetPayloadTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TokenOffsetPayloadTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/DocTermOrdsRewriteMethod.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *DocTermOrdsRewriteMethod::class$ = NULL;
        jmethodID *DocTermOrdsRewriteMethod::mids$ = NULL;
        bool DocTermOrdsRewriteMethod::live$ = false;

        jclass DocTermOrdsRewriteMethod::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/DocTermOrdsRewriteMethod");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_925c5bbc] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/MultiTermQuery;)Lorg/apache/lucene/search/Query;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DocTermOrdsRewriteMethod::DocTermOrdsRewriteMethod() : ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean DocTermOrdsRewriteMethod::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint DocTermOrdsRewriteMethod::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::org::apache::lucene::search::Query DocTermOrdsRewriteMethod::rewrite(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::search::MultiTermQuery & a1) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_925c5bbc], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_DocTermOrdsRewriteMethod_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocTermOrdsRewriteMethod_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DocTermOrdsRewriteMethod_init_(t_DocTermOrdsRewriteMethod *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DocTermOrdsRewriteMethod_equals(t_DocTermOrdsRewriteMethod *self, PyObject *args);
        static PyObject *t_DocTermOrdsRewriteMethod_hashCode(t_DocTermOrdsRewriteMethod *self, PyObject *args);
        static PyObject *t_DocTermOrdsRewriteMethod_rewrite(t_DocTermOrdsRewriteMethod *self, PyObject *args);

        static PyMethodDef t_DocTermOrdsRewriteMethod__methods_[] = {
          DECLARE_METHOD(t_DocTermOrdsRewriteMethod, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocTermOrdsRewriteMethod, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocTermOrdsRewriteMethod, equals, METH_VARARGS),
          DECLARE_METHOD(t_DocTermOrdsRewriteMethod, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_DocTermOrdsRewriteMethod, rewrite, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DocTermOrdsRewriteMethod, t_DocTermOrdsRewriteMethod, ::org::apache::lucene::search::MultiTermQuery$RewriteMethod, DocTermOrdsRewriteMethod, t_DocTermOrdsRewriteMethod_init_, 0, 0, 0, 0, 0);

        void t_DocTermOrdsRewriteMethod::install(PyObject *module)
        {
          installType(&PY_TYPE(DocTermOrdsRewriteMethod), module, "DocTermOrdsRewriteMethod", 0);
        }

        void t_DocTermOrdsRewriteMethod::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DocTermOrdsRewriteMethod).tp_dict, "class_", make_descriptor(DocTermOrdsRewriteMethod::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DocTermOrdsRewriteMethod).tp_dict, "wrapfn_", make_descriptor(t_DocTermOrdsRewriteMethod::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DocTermOrdsRewriteMethod).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DocTermOrdsRewriteMethod_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocTermOrdsRewriteMethod::initializeClass, 1)))
            return NULL;
          return t_DocTermOrdsRewriteMethod::wrap_Object(DocTermOrdsRewriteMethod(((t_DocTermOrdsRewriteMethod *) arg)->object.this$));
        }
        static PyObject *t_DocTermOrdsRewriteMethod_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocTermOrdsRewriteMethod::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DocTermOrdsRewriteMethod_init_(t_DocTermOrdsRewriteMethod *self, PyObject *args, PyObject *kwds)
        {
          DocTermOrdsRewriteMethod object((jobject) NULL);

          INT_CALL(object = DocTermOrdsRewriteMethod());
          self->object = object;

          return 0;
        }

        static PyObject *t_DocTermOrdsRewriteMethod_equals(t_DocTermOrdsRewriteMethod *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(DocTermOrdsRewriteMethod), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_DocTermOrdsRewriteMethod_hashCode(t_DocTermOrdsRewriteMethod *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(DocTermOrdsRewriteMethod), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_DocTermOrdsRewriteMethod_rewrite(t_DocTermOrdsRewriteMethod *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::MultiTermQuery a1((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::MultiTermQuery::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.rewrite(a0, a1));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(DocTermOrdsRewriteMethod), (PyObject *) self, "rewrite", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/SlopQueryNode.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldableNode.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *SlopQueryNode::class$ = NULL;
              jmethodID *SlopQueryNode::mids$ = NULL;
              bool SlopQueryNode::live$ = false;

              jclass SlopQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/SlopQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_bc870487] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;I)V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getChild_b387c5e6] = env->getMethodID(cls, "getChild", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getField_e0adba2f] = env->getMethodID(cls, "getField", "()Ljava/lang/CharSequence;");
                  mids$[mid_getValue_54c6a179] = env->getMethodID(cls, "getValue", "()I");
                  mids$[mid_setField_a8afc64a] = env->getMethodID(cls, "setField", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              SlopQueryNode::SlopQueryNode(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0, jint a1) : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_bc870487, a0.this$, a1)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode SlopQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode SlopQueryNode::getChild() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_getChild_b387c5e6]));
              }

              ::java::lang::CharSequence SlopQueryNode::getField() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getField_e0adba2f]));
              }

              jint SlopQueryNode::getValue() const
              {
                return env->callIntMethod(this$, mids$[mid_getValue_54c6a179]);
              }

              void SlopQueryNode::setField(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setField_a8afc64a], a0.this$);
              }

              ::java::lang::CharSequence SlopQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String SlopQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_SlopQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_SlopQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_SlopQueryNode_init_(t_SlopQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_SlopQueryNode_cloneTree(t_SlopQueryNode *self, PyObject *args);
              static PyObject *t_SlopQueryNode_getChild(t_SlopQueryNode *self);
              static PyObject *t_SlopQueryNode_getField(t_SlopQueryNode *self);
              static PyObject *t_SlopQueryNode_getValue(t_SlopQueryNode *self);
              static PyObject *t_SlopQueryNode_setField(t_SlopQueryNode *self, PyObject *arg);
              static PyObject *t_SlopQueryNode_toQueryString(t_SlopQueryNode *self, PyObject *args);
              static PyObject *t_SlopQueryNode_toString(t_SlopQueryNode *self, PyObject *args);
              static PyObject *t_SlopQueryNode_get__child(t_SlopQueryNode *self, void *data);
              static PyObject *t_SlopQueryNode_get__field(t_SlopQueryNode *self, void *data);
              static int t_SlopQueryNode_set__field(t_SlopQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_SlopQueryNode_get__value(t_SlopQueryNode *self, void *data);
              static PyGetSetDef t_SlopQueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_SlopQueryNode, child),
                DECLARE_GETSET_FIELD(t_SlopQueryNode, field),
                DECLARE_GET_FIELD(t_SlopQueryNode, value),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_SlopQueryNode__methods_[] = {
                DECLARE_METHOD(t_SlopQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_SlopQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_SlopQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_SlopQueryNode, getChild, METH_NOARGS),
                DECLARE_METHOD(t_SlopQueryNode, getField, METH_NOARGS),
                DECLARE_METHOD(t_SlopQueryNode, getValue, METH_NOARGS),
                DECLARE_METHOD(t_SlopQueryNode, setField, METH_O),
                DECLARE_METHOD(t_SlopQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_SlopQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(SlopQueryNode, t_SlopQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, SlopQueryNode, t_SlopQueryNode_init_, 0, 0, t_SlopQueryNode__fields_, 0, 0);

              void t_SlopQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(SlopQueryNode), module, "SlopQueryNode", 0);
              }

              void t_SlopQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(SlopQueryNode).tp_dict, "class_", make_descriptor(SlopQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(SlopQueryNode).tp_dict, "wrapfn_", make_descriptor(t_SlopQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(SlopQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_SlopQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, SlopQueryNode::initializeClass, 1)))
                  return NULL;
                return t_SlopQueryNode::wrap_Object(SlopQueryNode(((t_SlopQueryNode *) arg)->object.this$));
              }
              static PyObject *t_SlopQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, SlopQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_SlopQueryNode_init_(t_SlopQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                jint a1;
                SlopQueryNode object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = SlopQueryNode(a0, a1));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_SlopQueryNode_cloneTree(t_SlopQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(SlopQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_SlopQueryNode_getChild(t_SlopQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.getChild());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
              }

              static PyObject *t_SlopQueryNode_getField(t_SlopQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_SlopQueryNode_getValue(t_SlopQueryNode *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getValue());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_SlopQueryNode_setField(t_SlopQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setField(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setField", arg);
                return NULL;
              }

              static PyObject *t_SlopQueryNode_toQueryString(t_SlopQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(SlopQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_SlopQueryNode_toString(t_SlopQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(SlopQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_SlopQueryNode_get__child(t_SlopQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode value((jobject) NULL);
                OBJ_CALL(value = self->object.getChild());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(value);
              }

              static PyObject *t_SlopQueryNode_get__field(t_SlopQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_SlopQueryNode_set__field(t_SlopQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setField(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "field", arg);
                return -1;
              }

              static PyObject *t_SlopQueryNode_get__value(t_SlopQueryNode *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getValue());
                return PyInt_FromLong((long) value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *QueryNode::class$ = NULL;
              jmethodID *QueryNode::mids$ = NULL;
              bool QueryNode::live$ = false;

              jclass QueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/QueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_add_cc04aeef] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)V");
                  mids$[mid_add_1fde8fc3] = env->getMethodID(cls, "add", "(Ljava/util/List;)V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_containsTag_5fdc3f44] = env->getMethodID(cls, "containsTag", "(Ljava/lang/String;)Z");
                  mids$[mid_getChildren_87851566] = env->getMethodID(cls, "getChildren", "()Ljava/util/List;");
                  mids$[mid_getParent_b387c5e6] = env->getMethodID(cls, "getParent", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getTag_2a1c4d09] = env->getMethodID(cls, "getTag", "(Ljava/lang/String;)Ljava/lang/Object;");
                  mids$[mid_getTagMap_db60befd] = env->getMethodID(cls, "getTagMap", "()Ljava/util/Map;");
                  mids$[mid_isLeaf_54c6a16a] = env->getMethodID(cls, "isLeaf", "()Z");
                  mids$[mid_removeFromParent_54c6a166] = env->getMethodID(cls, "removeFromParent", "()V");
                  mids$[mid_set_1fde8fc3] = env->getMethodID(cls, "set", "(Ljava/util/List;)V");
                  mids$[mid_setTag_2da4da24] = env->getMethodID(cls, "setTag", "(Ljava/lang/String;Ljava/lang/Object;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                  mids$[mid_unsetTag_5fdc3f48] = env->getMethodID(cls, "unsetTag", "(Ljava/lang/String;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              void QueryNode::add(const QueryNode & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_add_cc04aeef], a0.this$);
              }

              void QueryNode::add(const ::java::util::List & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_add_1fde8fc3], a0.this$);
              }

              QueryNode QueryNode::cloneTree() const
              {
                return QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              jboolean QueryNode::containsTag(const ::java::lang::String & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_containsTag_5fdc3f44], a0.this$);
              }

              ::java::util::List QueryNode::getChildren() const
              {
                return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getChildren_87851566]));
              }

              QueryNode QueryNode::getParent() const
              {
                return QueryNode(env->callObjectMethod(this$, mids$[mid_getParent_b387c5e6]));
              }

              ::java::lang::Object QueryNode::getTag(const ::java::lang::String & a0) const
              {
                return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getTag_2a1c4d09], a0.this$));
              }

              ::java::util::Map QueryNode::getTagMap() const
              {
                return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getTagMap_db60befd]));
              }

              jboolean QueryNode::isLeaf() const
              {
                return env->callBooleanMethod(this$, mids$[mid_isLeaf_54c6a16a]);
              }

              void QueryNode::removeFromParent() const
              {
                env->callVoidMethod(this$, mids$[mid_removeFromParent_54c6a166]);
              }

              void QueryNode::set(const ::java::util::List & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_set_1fde8fc3], a0.this$);
              }

              void QueryNode::setTag(const ::java::lang::String & a0, const ::java::lang::Object & a1) const
              {
                env->callVoidMethod(this$, mids$[mid_setTag_2da4da24], a0.this$, a1.this$);
              }

              ::java::lang::CharSequence QueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String QueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }

              void QueryNode::unsetTag(const ::java::lang::String & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_unsetTag_5fdc3f48], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_QueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryNode_add(t_QueryNode *self, PyObject *args);
              static PyObject *t_QueryNode_cloneTree(t_QueryNode *self);
              static PyObject *t_QueryNode_containsTag(t_QueryNode *self, PyObject *arg);
              static PyObject *t_QueryNode_getChildren(t_QueryNode *self);
              static PyObject *t_QueryNode_getParent(t_QueryNode *self);
              static PyObject *t_QueryNode_getTag(t_QueryNode *self, PyObject *arg);
              static PyObject *t_QueryNode_getTagMap(t_QueryNode *self);
              static PyObject *t_QueryNode_isLeaf(t_QueryNode *self);
              static PyObject *t_QueryNode_removeFromParent(t_QueryNode *self);
              static PyObject *t_QueryNode_set(t_QueryNode *self, PyObject *arg);
              static PyObject *t_QueryNode_setTag(t_QueryNode *self, PyObject *args);
              static PyObject *t_QueryNode_toQueryString(t_QueryNode *self, PyObject *arg);
              static PyObject *t_QueryNode_toString(t_QueryNode *self, PyObject *args);
              static PyObject *t_QueryNode_unsetTag(t_QueryNode *self, PyObject *arg);
              static PyObject *t_QueryNode_get__children(t_QueryNode *self, void *data);
              static PyObject *t_QueryNode_get__leaf(t_QueryNode *self, void *data);
              static PyObject *t_QueryNode_get__parent(t_QueryNode *self, void *data);
              static PyObject *t_QueryNode_get__tagMap(t_QueryNode *self, void *data);
              static PyGetSetDef t_QueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_QueryNode, children),
                DECLARE_GET_FIELD(t_QueryNode, leaf),
                DECLARE_GET_FIELD(t_QueryNode, parent),
                DECLARE_GET_FIELD(t_QueryNode, tagMap),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_QueryNode__methods_[] = {
                DECLARE_METHOD(t_QueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNode, add, METH_VARARGS),
                DECLARE_METHOD(t_QueryNode, cloneTree, METH_NOARGS),
                DECLARE_METHOD(t_QueryNode, containsTag, METH_O),
                DECLARE_METHOD(t_QueryNode, getChildren, METH_NOARGS),
                DECLARE_METHOD(t_QueryNode, getParent, METH_NOARGS),
                DECLARE_METHOD(t_QueryNode, getTag, METH_O),
                DECLARE_METHOD(t_QueryNode, getTagMap, METH_NOARGS),
                DECLARE_METHOD(t_QueryNode, isLeaf, METH_NOARGS),
                DECLARE_METHOD(t_QueryNode, removeFromParent, METH_NOARGS),
                DECLARE_METHOD(t_QueryNode, set, METH_O),
                DECLARE_METHOD(t_QueryNode, setTag, METH_VARARGS),
                DECLARE_METHOD(t_QueryNode, toQueryString, METH_O),
                DECLARE_METHOD(t_QueryNode, toString, METH_VARARGS),
                DECLARE_METHOD(t_QueryNode, unsetTag, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(QueryNode, t_QueryNode, ::java::lang::Object, QueryNode, abstract_init, 0, 0, t_QueryNode__fields_, 0, 0);

              void t_QueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(QueryNode), module, "QueryNode", 0);
              }

              void t_QueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(QueryNode).tp_dict, "class_", make_descriptor(QueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(QueryNode).tp_dict, "wrapfn_", make_descriptor(t_QueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(QueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_QueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, QueryNode::initializeClass, 1)))
                  return NULL;
                return t_QueryNode::wrap_Object(QueryNode(((t_QueryNode *) arg)->object.this$));
              }
              static PyObject *t_QueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, QueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_QueryNode_add(t_QueryNode *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    QueryNode a0((jobject) NULL);

                    if (!parseArgs(args, "k", QueryNode::initializeClass, &a0))
                    {
                      OBJ_CALL(self->object.add(a0));
                      Py_RETURN_NONE;
                    }
                  }
                  {
                    ::java::util::List a0((jobject) NULL);
                    PyTypeObject **p0;

                    if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
                    {
                      OBJ_CALL(self->object.add(a0));
                      Py_RETURN_NONE;
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "add", args);
                return NULL;
              }

              static PyObject *t_QueryNode_cloneTree(t_QueryNode *self)
              {
                QueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.cloneTree());
                return t_QueryNode::wrap_Object(result);
              }

              static PyObject *t_QueryNode_containsTag(t_QueryNode *self, PyObject *arg)
              {
                ::java::lang::String a0((jobject) NULL);
                jboolean result;

                if (!parseArg(arg, "s", &a0))
                {
                  OBJ_CALL(result = self->object.containsTag(a0));
                  Py_RETURN_BOOL(result);
                }

                PyErr_SetArgsError((PyObject *) self, "containsTag", arg);
                return NULL;
              }

              static PyObject *t_QueryNode_getChildren(t_QueryNode *self)
              {
                ::java::util::List result((jobject) NULL);
                OBJ_CALL(result = self->object.getChildren());
                return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::queryparser::flexible::core::nodes::PY_TYPE(QueryNode));
              }

              static PyObject *t_QueryNode_getParent(t_QueryNode *self)
              {
                QueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.getParent());
                return t_QueryNode::wrap_Object(result);
              }

              static PyObject *t_QueryNode_getTag(t_QueryNode *self, PyObject *arg)
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::Object result((jobject) NULL);

                if (!parseArg(arg, "s", &a0))
                {
                  OBJ_CALL(result = self->object.getTag(a0));
                  return ::java::lang::t_Object::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "getTag", arg);
                return NULL;
              }

              static PyObject *t_QueryNode_getTagMap(t_QueryNode *self)
              {
                ::java::util::Map result((jobject) NULL);
                OBJ_CALL(result = self->object.getTagMap());
                return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(Object));
              }

              static PyObject *t_QueryNode_isLeaf(t_QueryNode *self)
              {
                jboolean result;
                OBJ_CALL(result = self->object.isLeaf());
                Py_RETURN_BOOL(result);
              }

              static PyObject *t_QueryNode_removeFromParent(t_QueryNode *self)
              {
                OBJ_CALL(self->object.removeFromParent());
                Py_RETURN_NONE;
              }

              static PyObject *t_QueryNode_set(t_QueryNode *self, PyObject *arg)
              {
                ::java::util::List a0((jobject) NULL);
                PyTypeObject **p0;

                if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
                {
                  OBJ_CALL(self->object.set(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "set", arg);
                return NULL;
              }

              static PyObject *t_QueryNode_setTag(t_QueryNode *self, PyObject *args)
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::Object a1((jobject) NULL);

                if (!parseArgs(args, "so", &a0, &a1))
                {
                  OBJ_CALL(self->object.setTag(a0, a1));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setTag", args);
                return NULL;
              }

              static PyObject *t_QueryNode_toQueryString(t_QueryNode *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "toQueryString", arg);
                return NULL;
              }

              static PyObject *t_QueryNode_toString(t_QueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(QueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_QueryNode_unsetTag(t_QueryNode *self, PyObject *arg)
              {
                ::java::lang::String a0((jobject) NULL);

                if (!parseArg(arg, "s", &a0))
                {
                  OBJ_CALL(self->object.unsetTag(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "unsetTag", arg);
                return NULL;
              }

              static PyObject *t_QueryNode_get__children(t_QueryNode *self, void *data)
              {
                ::java::util::List value((jobject) NULL);
                OBJ_CALL(value = self->object.getChildren());
                return ::java::util::t_List::wrap_Object(value);
              }

              static PyObject *t_QueryNode_get__leaf(t_QueryNode *self, void *data)
              {
                jboolean value;
                OBJ_CALL(value = self->object.isLeaf());
                Py_RETURN_BOOL(value);
              }

              static PyObject *t_QueryNode_get__parent(t_QueryNode *self, void *data)
              {
                QueryNode value((jobject) NULL);
                OBJ_CALL(value = self->object.getParent());
                return t_QueryNode::wrap_Object(value);
              }

              static PyObject *t_QueryNode_get__tagMap(t_QueryNode *self, void *data)
              {
                ::java::util::Map value((jobject) NULL);
                OBJ_CALL(value = self->object.getTagMap());
                return ::java::util::t_Map::wrap_Object(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilterFactory.h"
#include "org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilter.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *TypeAsPayloadTokenFilterFactory::class$ = NULL;
          jmethodID *TypeAsPayloadTokenFilterFactory::mids$ = NULL;
          bool TypeAsPayloadTokenFilterFactory::live$ = false;

          jclass TypeAsPayloadTokenFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_9819dee1] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TypeAsPayloadTokenFilterFactory::TypeAsPayloadTokenFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::payloads::TypeAsPayloadTokenFilter TypeAsPayloadTokenFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::payloads::TypeAsPayloadTokenFilter(env->callObjectMethod(this$, mids$[mid_create_9819dee1], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_TypeAsPayloadTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TypeAsPayloadTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TypeAsPayloadTokenFilterFactory_init_(t_TypeAsPayloadTokenFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TypeAsPayloadTokenFilterFactory_create(t_TypeAsPayloadTokenFilterFactory *self, PyObject *args);

          static PyMethodDef t_TypeAsPayloadTokenFilterFactory__methods_[] = {
            DECLARE_METHOD(t_TypeAsPayloadTokenFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeAsPayloadTokenFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeAsPayloadTokenFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TypeAsPayloadTokenFilterFactory, t_TypeAsPayloadTokenFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, TypeAsPayloadTokenFilterFactory, t_TypeAsPayloadTokenFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_TypeAsPayloadTokenFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(TypeAsPayloadTokenFilterFactory), module, "TypeAsPayloadTokenFilterFactory", 0);
          }

          void t_TypeAsPayloadTokenFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TypeAsPayloadTokenFilterFactory).tp_dict, "class_", make_descriptor(TypeAsPayloadTokenFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TypeAsPayloadTokenFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_TypeAsPayloadTokenFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TypeAsPayloadTokenFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TypeAsPayloadTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TypeAsPayloadTokenFilterFactory::initializeClass, 1)))
              return NULL;
            return t_TypeAsPayloadTokenFilterFactory::wrap_Object(TypeAsPayloadTokenFilterFactory(((t_TypeAsPayloadTokenFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_TypeAsPayloadTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TypeAsPayloadTokenFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TypeAsPayloadTokenFilterFactory_init_(t_TypeAsPayloadTokenFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            TypeAsPayloadTokenFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = TypeAsPayloadTokenFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TypeAsPayloadTokenFilterFactory_create(t_TypeAsPayloadTokenFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::payloads::TypeAsPayloadTokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::payloads::t_TypeAsPayloadTokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(TypeAsPayloadTokenFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Byte.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/Comparable.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Byte::class$ = NULL;
    jmethodID *Byte::mids$ = NULL;
    bool Byte::live$ = false;
    jbyte Byte::MAX_VALUE = (jbyte) 0;
    jbyte Byte::MIN_VALUE = (jbyte) 0;
    jint Byte::SIZE = (jint) 0;
    ::java::lang::Class *Byte::TYPE = NULL;

    jclass Byte::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Byte");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_b2271687] = env->getMethodID(cls, "<init>", "(B)V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_byteValue_54c6a172] = env->getMethodID(cls, "byteValue", "()B");
        mids$[mid_compare_1648a7cb] = env->getStaticMethodID(cls, "compare", "(BB)I");
        mids$[mid_compareTo_c2b89a9a] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Byte;)I");
        mids$[mid_decode_4a53f64a] = env->getStaticMethodID(cls, "decode", "(Ljava/lang/String;)Ljava/lang/Byte;");
        mids$[mid_doubleValue_54c6a174] = env->getMethodID(cls, "doubleValue", "()D");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_floatValue_54c6a176] = env->getMethodID(cls, "floatValue", "()F");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_intValue_54c6a179] = env->getMethodID(cls, "intValue", "()I");
        mids$[mid_longValue_54c6a17a] = env->getMethodID(cls, "longValue", "()J");
        mids$[mid_parseByte_5fdc3f5c] = env->getStaticMethodID(cls, "parseByte", "(Ljava/lang/String;)B");
        mids$[mid_parseByte_6e53ccd2] = env->getStaticMethodID(cls, "parseByte", "(Ljava/lang/String;I)B");
        mids$[mid_shortValue_54c6a163] = env->getMethodID(cls, "shortValue", "()S");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_toString_fce80606] = env->getStaticMethodID(cls, "toString", "(B)Ljava/lang/String;");
        mids$[mid_valueOf_f1e1a5a7] = env->getStaticMethodID(cls, "valueOf", "(B)Ljava/lang/Byte;");
        mids$[mid_valueOf_4a53f64a] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Ljava/lang/Byte;");
        mids$[mid_valueOf_83e30bb0] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;I)Ljava/lang/Byte;");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        MAX_VALUE = env->getStaticByteField(cls, "MAX_VALUE");
        MIN_VALUE = env->getStaticByteField(cls, "MIN_VALUE");
        SIZE = env->getStaticIntField(cls, "SIZE");
        TYPE = new ::java::lang::Class(env->getStaticObjectField(cls, "TYPE", "Ljava/lang/Class;"));
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Byte::Byte(jbyte a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_b2271687, a0)) {}

    Byte::Byte(const ::java::lang::String & a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    jbyte Byte::byteValue() const
    {
      return env->callByteMethod(this$, mids$[mid_byteValue_54c6a172]);
    }

    jint Byte::compare(jbyte a0, jbyte a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_compare_1648a7cb], a0, a1);
    }

    jint Byte::compareTo(const Byte & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareTo_c2b89a9a], a0.this$);
    }

    Byte Byte::decode(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Byte(env->callStaticObjectMethod(cls, mids$[mid_decode_4a53f64a], a0.this$));
    }

    jdouble Byte::doubleValue() const
    {
      return env->callDoubleMethod(this$, mids$[mid_doubleValue_54c6a174]);
    }

    jboolean Byte::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    jfloat Byte::floatValue() const
    {
      return env->callFloatMethod(this$, mids$[mid_floatValue_54c6a176]);
    }

    jint Byte::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jint Byte::intValue() const
    {
      return env->callIntMethod(this$, mids$[mid_intValue_54c6a179]);
    }

    jlong Byte::longValue() const
    {
      return env->callLongMethod(this$, mids$[mid_longValue_54c6a17a]);
    }

    jbyte Byte::parseByte(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticByteMethod(cls, mids$[mid_parseByte_5fdc3f5c], a0.this$);
    }

    jbyte Byte::parseByte(const ::java::lang::String & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticByteMethod(cls, mids$[mid_parseByte_6e53ccd2], a0.this$, a1);
    }

    jshort Byte::shortValue() const
    {
      return env->callShortMethod(this$, mids$[mid_shortValue_54c6a163]);
    }

    ::java::lang::String Byte::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    ::java::lang::String Byte::toString(jbyte a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_fce80606], a0));
    }

    Byte Byte::valueOf(jbyte a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Byte(env->callStaticObjectMethod(cls, mids$[mid_valueOf_f1e1a5a7], a0));
    }

    Byte Byte::valueOf(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Byte(env->callStaticObjectMethod(cls, mids$[mid_valueOf_4a53f64a], a0.this$));
    }

    Byte Byte::valueOf(const ::java::lang::String & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return Byte(env->callStaticObjectMethod(cls, mids$[mid_valueOf_83e30bb0], a0.this$, a1));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Byte_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Byte_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Byte_init_(t_Byte *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Byte_byteValue(t_Byte *self, PyObject *args);
    static PyObject *t_Byte_compare(PyTypeObject *type, PyObject *args);
    static PyObject *t_Byte_compareTo(t_Byte *self, PyObject *arg);
    static PyObject *t_Byte_decode(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Byte_doubleValue(t_Byte *self, PyObject *args);
    static PyObject *t_Byte_equals(t_Byte *self, PyObject *args);
    static PyObject *t_Byte_floatValue(t_Byte *self, PyObject *args);
    static PyObject *t_Byte_hashCode(t_Byte *self, PyObject *args);
    static PyObject *t_Byte_intValue(t_Byte *self, PyObject *args);
    static PyObject *t_Byte_longValue(t_Byte *self, PyObject *args);
    static PyObject *t_Byte_parseByte(PyTypeObject *type, PyObject *args);
    static PyObject *t_Byte_shortValue(t_Byte *self, PyObject *args);
    static PyObject *t_Byte_toString(t_Byte *self, PyObject *args);
    static PyObject *t_Byte_toString_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Byte_valueOf(PyTypeObject *type, PyObject *args);

    static PyMethodDef t_Byte__methods_[] = {
      DECLARE_METHOD(t_Byte, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Byte, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Byte, byteValue, METH_VARARGS),
      DECLARE_METHOD(t_Byte, compare, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Byte, compareTo, METH_O),
      DECLARE_METHOD(t_Byte, decode, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Byte, doubleValue, METH_VARARGS),
      DECLARE_METHOD(t_Byte, equals, METH_VARARGS),
      DECLARE_METHOD(t_Byte, floatValue, METH_VARARGS),
      DECLARE_METHOD(t_Byte, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Byte, intValue, METH_VARARGS),
      DECLARE_METHOD(t_Byte, longValue, METH_VARARGS),
      DECLARE_METHOD(t_Byte, parseByte, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Byte, shortValue, METH_VARARGS),
      DECLARE_METHOD(t_Byte, toString, METH_VARARGS),
      DECLARE_METHOD(t_Byte, toString_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Byte, valueOf, METH_VARARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Byte, t_Byte, ::java::lang::Number, Byte, t_Byte_init_, 0, 0, 0, 0, 0);

    void t_Byte::install(PyObject *module)
    {
      installType(&PY_TYPE(Byte), module, "Byte", 0);
    }

    void t_Byte::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Byte).tp_dict, "class_", make_descriptor(Byte::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Byte).tp_dict, "wrapfn_", make_descriptor(unboxByte));
      PyDict_SetItemString(PY_TYPE(Byte).tp_dict, "boxfn_", make_descriptor(boxByte));
      env->getClass(Byte::initializeClass);
      PyDict_SetItemString(PY_TYPE(Byte).tp_dict, "MAX_VALUE", make_descriptor(Byte::MAX_VALUE));
      PyDict_SetItemString(PY_TYPE(Byte).tp_dict, "MIN_VALUE", make_descriptor(Byte::MIN_VALUE));
      PyDict_SetItemString(PY_TYPE(Byte).tp_dict, "SIZE", make_descriptor(Byte::SIZE));
      PyDict_SetItemString(PY_TYPE(Byte).tp_dict, "TYPE", make_descriptor(::java::lang::t_Class::wrap_Object(*Byte::TYPE)));
    }

    static PyObject *t_Byte_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Byte::initializeClass, 1)))
        return NULL;
      return t_Byte::wrap_Object(Byte(((t_Byte *) arg)->object.this$));
    }
    static PyObject *t_Byte_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Byte::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Byte_init_(t_Byte *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jbyte a0;
          Byte object((jobject) NULL);

          if (!parseArgs(args, "B", &a0))
          {
            INT_CALL(object = Byte(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Byte object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Byte(a0));
            self->object = object;
            break;
          }
        }
       default:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_Byte_byteValue(t_Byte *self, PyObject *args)
    {
      jbyte result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.byteValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Byte), (PyObject *) self, "byteValue", args, 2);
    }

    static PyObject *t_Byte_compare(PyTypeObject *type, PyObject *args)
    {
      jbyte a0;
      jbyte a1;
      jint result;

      if (!parseArgs(args, "BB", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Byte::compare(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "compare", args);
      return NULL;
    }

    static PyObject *t_Byte_compareTo(t_Byte *self, PyObject *arg)
    {
      Byte a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Byte), &a0))
      {
        OBJ_CALL(result = self->object.compareTo(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
      return NULL;
    }

    static PyObject *t_Byte_decode(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      Byte result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = ::java::lang::Byte::decode(a0));
        return t_Byte::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "decode", arg);
      return NULL;
    }

    static PyObject *t_Byte_doubleValue(t_Byte *self, PyObject *args)
    {
      jdouble result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.doubleValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(&PY_TYPE(Byte), (PyObject *) self, "doubleValue", args, 2);
    }

    static PyObject *t_Byte_equals(t_Byte *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(Byte), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Byte_floatValue(t_Byte *self, PyObject *args)
    {
      jfloat result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.floatValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(&PY_TYPE(Byte), (PyObject *) self, "floatValue", args, 2);
    }

    static PyObject *t_Byte_hashCode(t_Byte *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Byte), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Byte_intValue(t_Byte *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.intValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Byte), (PyObject *) self, "intValue", args, 2);
    }

    static PyObject *t_Byte_longValue(t_Byte *self, PyObject *args)
    {
      jlong result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.longValue());
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      return callSuper(&PY_TYPE(Byte), (PyObject *) self, "longValue", args, 2);
    }

    static PyObject *t_Byte_parseByte(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          jbyte result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Byte::parseByte(a0));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          jbyte result;

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Byte::parseByte(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "parseByte", args);
      return NULL;
    }

    static PyObject *t_Byte_shortValue(t_Byte *self, PyObject *args)
    {
      jshort result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.shortValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Byte), (PyObject *) self, "shortValue", args, 2);
    }

    static PyObject *t_Byte_toString(t_Byte *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(Byte), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Byte_toString_(PyTypeObject *type, PyObject *args)
    {
      jbyte a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, "B", &a0))
      {
        OBJ_CALL(result = ::java::lang::Byte::toString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toString_", args);
      return NULL;
    }

    static PyObject *t_Byte_valueOf(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jbyte a0;
          Byte result((jobject) NULL);

          if (!parseArgs(args, "B", &a0))
          {
            OBJ_CALL(result = ::java::lang::Byte::valueOf(a0));
            return t_Byte::wrap_Object(result);
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Byte result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Byte::valueOf(a0));
            return t_Byte::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          Byte result((jobject) NULL);

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Byte::valueOf(a0, a1));
            return t_Byte::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "valueOf", args);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/Fields.h"
#include "java/lang/Iterable.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/Terms.h"
#include "java/io/IOException.h"
#include "java/util/Iterator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *Fields::class$ = NULL;
        jmethodID *Fields::mids$ = NULL;
        bool Fields::live$ = false;
        JArray< Fields > *Fields::EMPTY_ARRAY = NULL;

        jclass Fields::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/Fields");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getUniqueTermCount_54c6a17a] = env->getMethodID(cls, "getUniqueTermCount", "()J");
            mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
            mids$[mid_terms_ee262ab4] = env->getMethodID(cls, "terms", "(Ljava/lang/String;)Lorg/apache/lucene/index/Terms;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY_ARRAY = new JArray< Fields >(env->getStaticObjectField(cls, "EMPTY_ARRAY", "[Lorg/apache/lucene/index/Fields;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong Fields::getUniqueTermCount() const
        {
          return env->callLongMethod(this$, mids$[mid_getUniqueTermCount_54c6a17a]);
        }

        ::java::util::Iterator Fields::iterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
        }

        jint Fields::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
        }

        ::org::apache::lucene::index::Terms Fields::terms(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::Terms(env->callObjectMethod(this$, mids$[mid_terms_ee262ab4], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_Fields_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Fields_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Fields_getUniqueTermCount(t_Fields *self);
        static PyObject *t_Fields_iterator(t_Fields *self);
        static PyObject *t_Fields_size(t_Fields *self);
        static PyObject *t_Fields_terms(t_Fields *self, PyObject *arg);
        static PyObject *t_Fields_get__uniqueTermCount(t_Fields *self, void *data);
        static PyGetSetDef t_Fields__fields_[] = {
          DECLARE_GET_FIELD(t_Fields, uniqueTermCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Fields__methods_[] = {
          DECLARE_METHOD(t_Fields, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Fields, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Fields, getUniqueTermCount, METH_NOARGS),
          DECLARE_METHOD(t_Fields, iterator, METH_NOARGS),
          DECLARE_METHOD(t_Fields, size, METH_NOARGS),
          DECLARE_METHOD(t_Fields, terms, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Fields, t_Fields, ::java::lang::Object, Fields, abstract_init, ((PyObject *(*)(t_Fields *)) get_iterator< t_Fields >), 0, t_Fields__fields_, 0, 0);

        void t_Fields::install(PyObject *module)
        {
          installType(&PY_TYPE(Fields), module, "Fields", 0);
        }

        void t_Fields::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Fields).tp_dict, "class_", make_descriptor(Fields::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Fields).tp_dict, "wrapfn_", make_descriptor(t_Fields::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Fields).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(Fields::initializeClass);
          PyDict_SetItemString(PY_TYPE(Fields).tp_dict, "EMPTY_ARRAY", make_descriptor(JArray<jobject>(Fields::EMPTY_ARRAY->this$).wrap(t_Fields::wrap_jobject)));
        }

        static PyObject *t_Fields_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Fields::initializeClass, 1)))
            return NULL;
          return t_Fields::wrap_Object(Fields(((t_Fields *) arg)->object.this$));
        }
        static PyObject *t_Fields_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Fields::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Fields_getUniqueTermCount(t_Fields *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getUniqueTermCount());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_Fields_iterator(t_Fields *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.iterator());
          return ::java::util::t_Iterator::wrap_Object(result, &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_Fields_size(t_Fields *self)
        {
          jint result;
          OBJ_CALL(result = self->object.size());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_Fields_terms(t_Fields *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::Terms result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.terms(a0));
            return ::org::apache::lucene::index::t_Terms::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "terms", arg);
          return NULL;
        }

        static PyObject *t_Fields_get__uniqueTermCount(t_Fields *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getUniqueTermCount());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fa/PersianAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {

          ::java::lang::Class *PersianAnalyzer::class$ = NULL;
          jmethodID *PersianAnalyzer::mids$ = NULL;
          bool PersianAnalyzer::live$ = false;
          ::java::lang::String *PersianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;
          ::java::lang::String *PersianAnalyzer::STOPWORDS_COMMENT = NULL;

          jclass PersianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fa/PersianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_initReader_d8fb1c81] = env->getMethodID(cls, "initReader", "(Ljava/lang/String;Ljava/io/Reader;)Ljava/io/Reader;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              STOPWORDS_COMMENT = new ::java::lang::String(env->getStaticObjectField(cls, "STOPWORDS_COMMENT", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PersianAnalyzer::PersianAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          PersianAnalyzer::PersianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet PersianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {
          static PyObject *t_PersianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PersianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PersianAnalyzer_init_(t_PersianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PersianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_PersianAnalyzer_get__defaultStopSet(t_PersianAnalyzer *self, void *data);
          static PyGetSetDef t_PersianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_PersianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PersianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_PersianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PersianAnalyzer, t_PersianAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, PersianAnalyzer, t_PersianAnalyzer_init_, 0, 0, t_PersianAnalyzer__fields_, 0, 0);

          void t_PersianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(PersianAnalyzer), module, "PersianAnalyzer", 0);
          }

          void t_PersianAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PersianAnalyzer).tp_dict, "class_", make_descriptor(PersianAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PersianAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_PersianAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PersianAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(PersianAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(PersianAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*PersianAnalyzer::DEFAULT_STOPWORD_FILE)));
            PyDict_SetItemString(PY_TYPE(PersianAnalyzer).tp_dict, "STOPWORDS_COMMENT", make_descriptor(j2p(*PersianAnalyzer::STOPWORDS_COMMENT)));
          }

          static PyObject *t_PersianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PersianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_PersianAnalyzer::wrap_Object(PersianAnalyzer(((t_PersianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_PersianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PersianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PersianAnalyzer_init_(t_PersianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                PersianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = PersianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                PersianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = PersianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PersianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::fa::PersianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_PersianAnalyzer_get__defaultStopSet(t_PersianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/Analyzer$ReuseStrategy.h"
#include "java/io/IOException.h"
#include "java/io/Closeable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *Analyzer::class$ = NULL;
        jmethodID *Analyzer::mids$ = NULL;
        bool Analyzer::live$ = false;
        ::org::apache::lucene::analysis::Analyzer$ReuseStrategy *Analyzer::GLOBAL_REUSE_STRATEGY = NULL;
        ::org::apache::lucene::analysis::Analyzer$ReuseStrategy *Analyzer::PER_FIELD_REUSE_STRATEGY = NULL;

        jclass Analyzer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/Analyzer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_9d052de7] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer$ReuseStrategy;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_getOffsetGap_5fdc3f57] = env->getMethodID(cls, "getOffsetGap", "(Ljava/lang/String;)I");
            mids$[mid_getPositionIncrementGap_5fdc3f57] = env->getMethodID(cls, "getPositionIncrementGap", "(Ljava/lang/String;)I");
            mids$[mid_getReuseStrategy_723277fa] = env->getMethodID(cls, "getReuseStrategy", "()Lorg/apache/lucene/analysis/Analyzer$ReuseStrategy;");
            mids$[mid_tokenStream_b2e3f2ad] = env->getMethodID(cls, "tokenStream", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/analysis/TokenStream;");
            mids$[mid_tokenStream_f8551151] = env->getMethodID(cls, "tokenStream", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/TokenStream;");
            mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
            mids$[mid_initReader_d8fb1c81] = env->getMethodID(cls, "initReader", "(Ljava/lang/String;Ljava/io/Reader;)Ljava/io/Reader;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            GLOBAL_REUSE_STRATEGY = new ::org::apache::lucene::analysis::Analyzer$ReuseStrategy(env->getStaticObjectField(cls, "GLOBAL_REUSE_STRATEGY", "Lorg/apache/lucene/analysis/Analyzer$ReuseStrategy;"));
            PER_FIELD_REUSE_STRATEGY = new ::org::apache::lucene::analysis::Analyzer$ReuseStrategy(env->getStaticObjectField(cls, "PER_FIELD_REUSE_STRATEGY", "Lorg/apache/lucene/analysis/Analyzer$ReuseStrategy;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Analyzer::Analyzer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        Analyzer::Analyzer(const ::org::apache::lucene::analysis::Analyzer$ReuseStrategy & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9d052de7, a0.this$)) {}

        void Analyzer::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        jint Analyzer::getOffsetGap(const ::java::lang::String & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getOffsetGap_5fdc3f57], a0.this$);
        }

        jint Analyzer::getPositionIncrementGap(const ::java::lang::String & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getPositionIncrementGap_5fdc3f57], a0.this$);
        }

        ::org::apache::lucene::analysis::Analyzer$ReuseStrategy Analyzer::getReuseStrategy() const
        {
          return ::org::apache::lucene::analysis::Analyzer$ReuseStrategy(env->callObjectMethod(this$, mids$[mid_getReuseStrategy_723277fa]));
        }

        ::org::apache::lucene::analysis::TokenStream Analyzer::tokenStream(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_tokenStream_b2e3f2ad], a0.this$, a1.this$));
        }

        ::org::apache::lucene::analysis::TokenStream Analyzer::tokenStream(const ::java::lang::String & a0, const ::java::io::Reader & a1) const
        {
          return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_tokenStream_f8551151], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/analysis/Analyzer$PerFieldReuseStrategy.h"
#include "org/apache/lucene/analysis/Analyzer$GlobalReuseStrategy.h"
#include "org/apache/lucene/analysis/Analyzer$TokenStreamComponents.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_Analyzer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Analyzer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Analyzer_init_(t_Analyzer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Analyzer_close(t_Analyzer *self);
        static PyObject *t_Analyzer_getOffsetGap(t_Analyzer *self, PyObject *arg);
        static PyObject *t_Analyzer_getPositionIncrementGap(t_Analyzer *self, PyObject *arg);
        static PyObject *t_Analyzer_getReuseStrategy(t_Analyzer *self);
        static PyObject *t_Analyzer_tokenStream(t_Analyzer *self, PyObject *args);
        static PyObject *t_Analyzer_get__reuseStrategy(t_Analyzer *self, void *data);
        static PyGetSetDef t_Analyzer__fields_[] = {
          DECLARE_GET_FIELD(t_Analyzer, reuseStrategy),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Analyzer__methods_[] = {
          DECLARE_METHOD(t_Analyzer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Analyzer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Analyzer, close, METH_NOARGS),
          DECLARE_METHOD(t_Analyzer, getOffsetGap, METH_O),
          DECLARE_METHOD(t_Analyzer, getPositionIncrementGap, METH_O),
          DECLARE_METHOD(t_Analyzer, getReuseStrategy, METH_NOARGS),
          DECLARE_METHOD(t_Analyzer, tokenStream, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Analyzer, t_Analyzer, ::java::lang::Object, Analyzer, t_Analyzer_init_, 0, 0, t_Analyzer__fields_, 0, 0);

        void t_Analyzer::install(PyObject *module)
        {
          installType(&PY_TYPE(Analyzer), module, "Analyzer", 0);
          PyDict_SetItemString(PY_TYPE(Analyzer).tp_dict, "PerFieldReuseStrategy", make_descriptor(&PY_TYPE(Analyzer$PerFieldReuseStrategy)));
          PyDict_SetItemString(PY_TYPE(Analyzer).tp_dict, "GlobalReuseStrategy", make_descriptor(&PY_TYPE(Analyzer$GlobalReuseStrategy)));
          PyDict_SetItemString(PY_TYPE(Analyzer).tp_dict, "ReuseStrategy", make_descriptor(&PY_TYPE(Analyzer$ReuseStrategy)));
          PyDict_SetItemString(PY_TYPE(Analyzer).tp_dict, "TokenStreamComponents", make_descriptor(&PY_TYPE(Analyzer$TokenStreamComponents)));
        }

        void t_Analyzer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Analyzer).tp_dict, "class_", make_descriptor(Analyzer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Analyzer).tp_dict, "wrapfn_", make_descriptor(t_Analyzer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Analyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(Analyzer::initializeClass);
          PyDict_SetItemString(PY_TYPE(Analyzer).tp_dict, "GLOBAL_REUSE_STRATEGY", make_descriptor(::org::apache::lucene::analysis::t_Analyzer$ReuseStrategy::wrap_Object(*Analyzer::GLOBAL_REUSE_STRATEGY)));
          PyDict_SetItemString(PY_TYPE(Analyzer).tp_dict, "PER_FIELD_REUSE_STRATEGY", make_descriptor(::org::apache::lucene::analysis::t_Analyzer$ReuseStrategy::wrap_Object(*Analyzer::PER_FIELD_REUSE_STRATEGY)));
        }

        static PyObject *t_Analyzer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Analyzer::initializeClass, 1)))
            return NULL;
          return t_Analyzer::wrap_Object(Analyzer(((t_Analyzer *) arg)->object.this$));
        }
        static PyObject *t_Analyzer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Analyzer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Analyzer_init_(t_Analyzer *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              Analyzer object((jobject) NULL);

              INT_CALL(object = Analyzer());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              ::org::apache::lucene::analysis::Analyzer$ReuseStrategy a0((jobject) NULL);
              Analyzer object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer$ReuseStrategy::initializeClass, &a0))
              {
                INT_CALL(object = Analyzer(a0));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Analyzer_close(t_Analyzer *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_Analyzer_getOffsetGap(t_Analyzer *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getOffsetGap(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getOffsetGap", arg);
          return NULL;
        }

        static PyObject *t_Analyzer_getPositionIncrementGap(t_Analyzer *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getPositionIncrementGap(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getPositionIncrementGap", arg);
          return NULL;
        }

        static PyObject *t_Analyzer_getReuseStrategy(t_Analyzer *self)
        {
          ::org::apache::lucene::analysis::Analyzer$ReuseStrategy result((jobject) NULL);
          OBJ_CALL(result = self->object.getReuseStrategy());
          return ::org::apache::lucene::analysis::t_Analyzer$ReuseStrategy::wrap_Object(result);
        }

        static PyObject *t_Analyzer_tokenStream(t_Analyzer *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

              if (!parseArgs(args, "ss", &a0, &a1))
              {
                OBJ_CALL(result = self->object.tokenStream(a0, a1));
                return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::io::Reader a1((jobject) NULL);
              ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

              if (!parseArgs(args, "sk", ::java::io::Reader::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.tokenStream(a0, a1));
                return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "tokenStream", args);
          return NULL;
        }

        static PyObject *t_Analyzer_get__reuseStrategy(t_Analyzer *self, void *data)
        {
          ::org::apache::lucene::analysis::Analyzer$ReuseStrategy value((jobject) NULL);
          OBJ_CALL(value = self->object.getReuseStrategy());
          return ::org::apache::lucene::analysis::t_Analyzer$ReuseStrategy::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/analyzing/FuzzySuggester.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {

            ::java::lang::Class *FuzzySuggester::class$ = NULL;
            jmethodID *FuzzySuggester::mids$ = NULL;
            bool FuzzySuggester::live$ = false;
            jint FuzzySuggester::DEFAULT_MAX_EDITS = (jint) 0;
            jint FuzzySuggester::DEFAULT_MIN_FUZZY_LENGTH = (jint) 0;
            jint FuzzySuggester::DEFAULT_NON_FUZZY_PREFIX = (jint) 0;
            jboolean FuzzySuggester::DEFAULT_TRANSPOSITIONS = (jboolean) 0;
            jboolean FuzzySuggester::DEFAULT_UNICODE_AWARE = (jboolean) 0;

            jclass FuzzySuggester::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/analyzing/FuzzySuggester");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_31619410] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");
                mids$[mid_init$_6a3c5772] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/Analyzer;)V");
                mids$[mid_init$_ec63f0d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/Analyzer;IIIZIZIIZ)V");
                mids$[mid_convertAutomaton_7aca8e1f] = env->getMethodID(cls, "convertAutomaton", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");
                mids$[mid_getFullPrefixPaths_a9ea3855] = env->getMethodID(cls, "getFullPrefixPaths", "(Ljava/util/List;Lorg/apache/lucene/util/automaton/Automaton;Lorg/apache/lucene/util/fst/FST;)Ljava/util/List;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                DEFAULT_MAX_EDITS = env->getStaticIntField(cls, "DEFAULT_MAX_EDITS");
                DEFAULT_MIN_FUZZY_LENGTH = env->getStaticIntField(cls, "DEFAULT_MIN_FUZZY_LENGTH");
                DEFAULT_NON_FUZZY_PREFIX = env->getStaticIntField(cls, "DEFAULT_NON_FUZZY_PREFIX");
                DEFAULT_TRANSPOSITIONS = env->getStaticBooleanField(cls, "DEFAULT_TRANSPOSITIONS");
                DEFAULT_UNICODE_AWARE = env->getStaticBooleanField(cls, "DEFAULT_UNICODE_AWARE");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FuzzySuggester::FuzzySuggester(const ::org::apache::lucene::analysis::Analyzer & a0) : ::org::apache::lucene::search::suggest::analyzing::AnalyzingSuggester(env->newObject(initializeClass, &mids$, mid_init$_31619410, a0.this$)) {}

            FuzzySuggester::FuzzySuggester(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::org::apache::lucene::search::suggest::analyzing::AnalyzingSuggester(env->newObject(initializeClass, &mids$, mid_init$_6a3c5772, a0.this$, a1.this$)) {}

            FuzzySuggester::FuzzySuggester(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::analysis::Analyzer & a1, jint a2, jint a3, jint a4, jboolean a5, jint a6, jboolean a7, jint a8, jint a9, jboolean a10) : ::org::apache::lucene::search::suggest::analyzing::AnalyzingSuggester(env->newObject(initializeClass, &mids$, mid_init$_ec63f0d3, a0.this$, a1.this$, a2, a3, a4, a5, a6, a7, a8, a9, a10)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {
            static PyObject *t_FuzzySuggester_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FuzzySuggester_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FuzzySuggester_init_(t_FuzzySuggester *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_FuzzySuggester__methods_[] = {
              DECLARE_METHOD(t_FuzzySuggester, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FuzzySuggester, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FuzzySuggester, t_FuzzySuggester, ::org::apache::lucene::search::suggest::analyzing::AnalyzingSuggester, FuzzySuggester, t_FuzzySuggester_init_, 0, 0, 0, 0, 0);

            void t_FuzzySuggester::install(PyObject *module)
            {
              installType(&PY_TYPE(FuzzySuggester), module, "FuzzySuggester", 0);
            }

            void t_FuzzySuggester::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FuzzySuggester).tp_dict, "class_", make_descriptor(FuzzySuggester::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FuzzySuggester).tp_dict, "wrapfn_", make_descriptor(t_FuzzySuggester::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FuzzySuggester).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(FuzzySuggester::initializeClass);
              PyDict_SetItemString(PY_TYPE(FuzzySuggester).tp_dict, "DEFAULT_MAX_EDITS", make_descriptor(FuzzySuggester::DEFAULT_MAX_EDITS));
              PyDict_SetItemString(PY_TYPE(FuzzySuggester).tp_dict, "DEFAULT_MIN_FUZZY_LENGTH", make_descriptor(FuzzySuggester::DEFAULT_MIN_FUZZY_LENGTH));
              PyDict_SetItemString(PY_TYPE(FuzzySuggester).tp_dict, "DEFAULT_NON_FUZZY_PREFIX", make_descriptor(FuzzySuggester::DEFAULT_NON_FUZZY_PREFIX));
              PyDict_SetItemString(PY_TYPE(FuzzySuggester).tp_dict, "DEFAULT_TRANSPOSITIONS", make_descriptor(FuzzySuggester::DEFAULT_TRANSPOSITIONS));
              PyDict_SetItemString(PY_TYPE(FuzzySuggester).tp_dict, "DEFAULT_UNICODE_AWARE", make_descriptor(FuzzySuggester::DEFAULT_UNICODE_AWARE));
            }

            static PyObject *t_FuzzySuggester_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FuzzySuggester::initializeClass, 1)))
                return NULL;
              return t_FuzzySuggester::wrap_Object(FuzzySuggester(((t_FuzzySuggester *) arg)->object.this$));
            }
            static PyObject *t_FuzzySuggester_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FuzzySuggester::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FuzzySuggester_init_(t_FuzzySuggester *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  FuzzySuggester object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
                  {
                    INT_CALL(object = FuzzySuggester(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                  FuzzySuggester object((jobject) NULL);

                  if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = FuzzySuggester(a0, a1));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 11:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                  jint a2;
                  jint a3;
                  jint a4;
                  jboolean a5;
                  jint a6;
                  jboolean a7;
                  jint a8;
                  jint a9;
                  jboolean a10;
                  FuzzySuggester object((jobject) NULL);

                  if (!parseArgs(args, "kkIIIZIZIIZ", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10))
                  {
                    INT_CALL(object = FuzzySuggester(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FieldInfo$IndexOptions.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FieldInfo$IndexOptions::class$ = NULL;
        jmethodID *FieldInfo$IndexOptions::mids$ = NULL;
        bool FieldInfo$IndexOptions::live$ = false;
        FieldInfo$IndexOptions *FieldInfo$IndexOptions::DOCS_AND_FREQS = NULL;
        FieldInfo$IndexOptions *FieldInfo$IndexOptions::DOCS_AND_FREQS_AND_POSITIONS = NULL;
        FieldInfo$IndexOptions *FieldInfo$IndexOptions::DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS = NULL;
        FieldInfo$IndexOptions *FieldInfo$IndexOptions::DOCS_ONLY = NULL;

        jclass FieldInfo$IndexOptions::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FieldInfo$IndexOptions");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_20bf9e20] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/index/FieldInfo$IndexOptions;");
            mids$[mid_values_84108cce] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/index/FieldInfo$IndexOptions;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DOCS_AND_FREQS = new FieldInfo$IndexOptions(env->getStaticObjectField(cls, "DOCS_AND_FREQS", "Lorg/apache/lucene/index/FieldInfo$IndexOptions;"));
            DOCS_AND_FREQS_AND_POSITIONS = new FieldInfo$IndexOptions(env->getStaticObjectField(cls, "DOCS_AND_FREQS_AND_POSITIONS", "Lorg/apache/lucene/index/FieldInfo$IndexOptions;"));
            DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS = new FieldInfo$IndexOptions(env->getStaticObjectField(cls, "DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS", "Lorg/apache/lucene/index/FieldInfo$IndexOptions;"));
            DOCS_ONLY = new FieldInfo$IndexOptions(env->getStaticObjectField(cls, "DOCS_ONLY", "Lorg/apache/lucene/index/FieldInfo$IndexOptions;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldInfo$IndexOptions FieldInfo$IndexOptions::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldInfo$IndexOptions(env->callStaticObjectMethod(cls, mids$[mid_valueOf_20bf9e20], a0.this$));
        }

        JArray< FieldInfo$IndexOptions > FieldInfo$IndexOptions::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< FieldInfo$IndexOptions >(env->callStaticObjectMethod(cls, mids$[mid_values_84108cce]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FieldInfo$IndexOptions_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInfo$IndexOptions_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInfo$IndexOptions_of_(t_FieldInfo$IndexOptions *self, PyObject *args);
        static PyObject *t_FieldInfo$IndexOptions_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_FieldInfo$IndexOptions_values(PyTypeObject *type);
        static PyObject *t_FieldInfo$IndexOptions_get__parameters_(t_FieldInfo$IndexOptions *self, void *data);
        static PyGetSetDef t_FieldInfo$IndexOptions__fields_[] = {
          DECLARE_GET_FIELD(t_FieldInfo$IndexOptions, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldInfo$IndexOptions__methods_[] = {
          DECLARE_METHOD(t_FieldInfo$IndexOptions, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfo$IndexOptions, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfo$IndexOptions, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldInfo$IndexOptions, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FieldInfo$IndexOptions, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldInfo$IndexOptions, t_FieldInfo$IndexOptions, ::java::lang::Enum, FieldInfo$IndexOptions, abstract_init, 0, 0, t_FieldInfo$IndexOptions__fields_, 0, 0);
        PyObject *t_FieldInfo$IndexOptions::wrap_Object(const FieldInfo$IndexOptions& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldInfo$IndexOptions::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldInfo$IndexOptions *self = (t_FieldInfo$IndexOptions *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldInfo$IndexOptions::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldInfo$IndexOptions::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldInfo$IndexOptions *self = (t_FieldInfo$IndexOptions *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldInfo$IndexOptions::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldInfo$IndexOptions), module, "FieldInfo$IndexOptions", 0);
        }

        void t_FieldInfo$IndexOptions::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldInfo$IndexOptions).tp_dict, "class_", make_descriptor(FieldInfo$IndexOptions::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldInfo$IndexOptions).tp_dict, "wrapfn_", make_descriptor(t_FieldInfo$IndexOptions::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldInfo$IndexOptions).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FieldInfo$IndexOptions::initializeClass);
          PyDict_SetItemString(PY_TYPE(FieldInfo$IndexOptions).tp_dict, "DOCS_AND_FREQS", make_descriptor(t_FieldInfo$IndexOptions::wrap_Object(*FieldInfo$IndexOptions::DOCS_AND_FREQS)));
          PyDict_SetItemString(PY_TYPE(FieldInfo$IndexOptions).tp_dict, "DOCS_AND_FREQS_AND_POSITIONS", make_descriptor(t_FieldInfo$IndexOptions::wrap_Object(*FieldInfo$IndexOptions::DOCS_AND_FREQS_AND_POSITIONS)));
          PyDict_SetItemString(PY_TYPE(FieldInfo$IndexOptions).tp_dict, "DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS", make_descriptor(t_FieldInfo$IndexOptions::wrap_Object(*FieldInfo$IndexOptions::DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS)));
          PyDict_SetItemString(PY_TYPE(FieldInfo$IndexOptions).tp_dict, "DOCS_ONLY", make_descriptor(t_FieldInfo$IndexOptions::wrap_Object(*FieldInfo$IndexOptions::DOCS_ONLY)));
        }

        static PyObject *t_FieldInfo$IndexOptions_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldInfo$IndexOptions::initializeClass, 1)))
            return NULL;
          return t_FieldInfo$IndexOptions::wrap_Object(FieldInfo$IndexOptions(((t_FieldInfo$IndexOptions *) arg)->object.this$));
        }
        static PyObject *t_FieldInfo$IndexOptions_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldInfo$IndexOptions::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldInfo$IndexOptions_of_(t_FieldInfo$IndexOptions *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_FieldInfo$IndexOptions_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          FieldInfo$IndexOptions result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::FieldInfo$IndexOptions::valueOf(a0));
            return t_FieldInfo$IndexOptions::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_FieldInfo$IndexOptions_values(PyTypeObject *type)
        {
          JArray< FieldInfo$IndexOptions > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::FieldInfo$IndexOptions::values());
          return JArray<jobject>(result.this$).wrap(t_FieldInfo$IndexOptions::wrap_jobject);
        }
        static PyObject *t_FieldInfo$IndexOptions_get__parameters_(t_FieldInfo$IndexOptions *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/TrackingDirectoryWrapper.h"
#include "java/util/Set.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *TrackingDirectoryWrapper::class$ = NULL;
        jmethodID *TrackingDirectoryWrapper::mids$ = NULL;
        bool TrackingDirectoryWrapper::live$ = false;

        jclass TrackingDirectoryWrapper::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/TrackingDirectoryWrapper");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_2e261ef2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_copy_146bec62] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)V");
            mids$[mid_createOutput_5ad5358d] = env->getMethodID(cls, "createOutput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_deleteFile_5fdc3f48] = env->getMethodID(cls, "deleteFile", "(Ljava/lang/String;)V");
            mids$[mid_getCreatedFiles_03e99967] = env->getMethodID(cls, "getCreatedFiles", "()Ljava/util/Set;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TrackingDirectoryWrapper::TrackingDirectoryWrapper(const ::org::apache::lucene::store::Directory & a0) : ::org::apache::lucene::store::FilterDirectory(env->newObject(initializeClass, &mids$, mid_init$_2e261ef2, a0.this$)) {}

        void TrackingDirectoryWrapper::copy(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::org::apache::lucene::store::IOContext & a3) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_146bec62], a0.this$, a1.this$, a2.this$, a3.this$);
        }

        ::org::apache::lucene::store::IndexOutput TrackingDirectoryWrapper::createOutput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexOutput(env->callObjectMethod(this$, mids$[mid_createOutput_5ad5358d], a0.this$, a1.this$));
        }

        void TrackingDirectoryWrapper::deleteFile(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_deleteFile_5fdc3f48], a0.this$);
        }

        ::java::util::Set TrackingDirectoryWrapper::getCreatedFiles() const
        {
          return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_getCreatedFiles_03e99967]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_TrackingDirectoryWrapper_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TrackingDirectoryWrapper_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TrackingDirectoryWrapper_init_(t_TrackingDirectoryWrapper *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TrackingDirectoryWrapper_copy(t_TrackingDirectoryWrapper *self, PyObject *args);
        static PyObject *t_TrackingDirectoryWrapper_createOutput(t_TrackingDirectoryWrapper *self, PyObject *args);
        static PyObject *t_TrackingDirectoryWrapper_deleteFile(t_TrackingDirectoryWrapper *self, PyObject *args);
        static PyObject *t_TrackingDirectoryWrapper_getCreatedFiles(t_TrackingDirectoryWrapper *self);
        static PyObject *t_TrackingDirectoryWrapper_get__createdFiles(t_TrackingDirectoryWrapper *self, void *data);
        static PyGetSetDef t_TrackingDirectoryWrapper__fields_[] = {
          DECLARE_GET_FIELD(t_TrackingDirectoryWrapper, createdFiles),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TrackingDirectoryWrapper__methods_[] = {
          DECLARE_METHOD(t_TrackingDirectoryWrapper, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TrackingDirectoryWrapper, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TrackingDirectoryWrapper, copy, METH_VARARGS),
          DECLARE_METHOD(t_TrackingDirectoryWrapper, createOutput, METH_VARARGS),
          DECLARE_METHOD(t_TrackingDirectoryWrapper, deleteFile, METH_VARARGS),
          DECLARE_METHOD(t_TrackingDirectoryWrapper, getCreatedFiles, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TrackingDirectoryWrapper, t_TrackingDirectoryWrapper, ::org::apache::lucene::store::FilterDirectory, TrackingDirectoryWrapper, t_TrackingDirectoryWrapper_init_, 0, 0, t_TrackingDirectoryWrapper__fields_, 0, 0);

        void t_TrackingDirectoryWrapper::install(PyObject *module)
        {
          installType(&PY_TYPE(TrackingDirectoryWrapper), module, "TrackingDirectoryWrapper", 0);
        }

        void t_TrackingDirectoryWrapper::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TrackingDirectoryWrapper).tp_dict, "class_", make_descriptor(TrackingDirectoryWrapper::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TrackingDirectoryWrapper).tp_dict, "wrapfn_", make_descriptor(t_TrackingDirectoryWrapper::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TrackingDirectoryWrapper).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TrackingDirectoryWrapper_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TrackingDirectoryWrapper::initializeClass, 1)))
            return NULL;
          return t_TrackingDirectoryWrapper::wrap_Object(TrackingDirectoryWrapper(((t_TrackingDirectoryWrapper *) arg)->object.this$));
        }
        static PyObject *t_TrackingDirectoryWrapper_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TrackingDirectoryWrapper::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TrackingDirectoryWrapper_init_(t_TrackingDirectoryWrapper *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          TrackingDirectoryWrapper object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
          {
            INT_CALL(object = TrackingDirectoryWrapper(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TrackingDirectoryWrapper_copy(t_TrackingDirectoryWrapper *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          ::org::apache::lucene::store::IOContext a3((jobject) NULL);

          if (!parseArgs(args, "kssk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.copy(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TrackingDirectoryWrapper), (PyObject *) self, "copy", args, 2);
        }

        static PyObject *t_TrackingDirectoryWrapper_createOutput(t_TrackingDirectoryWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexOutput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.createOutput(a0, a1));
            return ::org::apache::lucene::store::t_IndexOutput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(TrackingDirectoryWrapper), (PyObject *) self, "createOutput", args, 2);
        }

        static PyObject *t_TrackingDirectoryWrapper_deleteFile(t_TrackingDirectoryWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.deleteFile(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TrackingDirectoryWrapper), (PyObject *) self, "deleteFile", args, 2);
        }

        static PyObject *t_TrackingDirectoryWrapper_getCreatedFiles(t_TrackingDirectoryWrapper *self)
        {
          ::java::util::Set result((jobject) NULL);
          OBJ_CALL(result = self->object.getCreatedFiles());
          return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_TrackingDirectoryWrapper_get__createdFiles(t_TrackingDirectoryWrapper *self, void *data)
        {
          ::java::util::Set value((jobject) NULL);
          OBJ_CALL(value = self->object.getCreatedFiles());
          return ::java::util::t_Set::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/BoostingQueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *BoostingQueryBuilder::class$ = NULL;
            jmethodID *BoostingQueryBuilder::mids$ = NULL;
            bool BoostingQueryBuilder::live$ = false;

            jclass BoostingQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/BoostingQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_6566a539] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/xml/QueryBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            BoostingQueryBuilder::BoostingQueryBuilder(const ::org::apache::lucene::queryparser::xml::QueryBuilder & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6566a539, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_BoostingQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BoostingQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_BoostingQueryBuilder_init_(t_BoostingQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_BoostingQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_BoostingQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BoostingQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(BoostingQueryBuilder, t_BoostingQueryBuilder, ::java::lang::Object, BoostingQueryBuilder, t_BoostingQueryBuilder_init_, 0, 0, 0, 0, 0);

            void t_BoostingQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(BoostingQueryBuilder), module, "BoostingQueryBuilder", 0);
            }

            void t_BoostingQueryBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(BoostingQueryBuilder).tp_dict, "class_", make_descriptor(BoostingQueryBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(BoostingQueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_BoostingQueryBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(BoostingQueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_BoostingQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BoostingQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_BoostingQueryBuilder::wrap_Object(BoostingQueryBuilder(((t_BoostingQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_BoostingQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BoostingQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_BoostingQueryBuilder_init_(t_BoostingQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queryparser::xml::QueryBuilder a0((jobject) NULL);
              BoostingQueryBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::xml::QueryBuilder::initializeClass, &a0))
              {
                INT_CALL(object = BoostingQueryBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/GradientFormatter.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/highlight/Formatter.h"
#include "org/apache/lucene/search/highlight/TokenGroup.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *GradientFormatter::class$ = NULL;
          jmethodID *GradientFormatter::mids$ = NULL;
          bool GradientFormatter::live$ = false;

          jclass GradientFormatter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/GradientFormatter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_ecfb0f33] = env->getMethodID(cls, "<init>", "(FLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_hexToInt_5fdc3f57] = env->getStaticMethodID(cls, "hexToInt", "(Ljava/lang/String;)I");
              mids$[mid_highlightTerm_8838cc58] = env->getMethodID(cls, "highlightTerm", "(Ljava/lang/String;Lorg/apache/lucene/search/highlight/TokenGroup;)Ljava/lang/String;");
              mids$[mid_getForegroundColorString_5ded254a] = env->getMethodID(cls, "getForegroundColorString", "(F)Ljava/lang/String;");
              mids$[mid_getBackgroundColorString_5ded254a] = env->getMethodID(cls, "getBackgroundColorString", "(F)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GradientFormatter::GradientFormatter(jfloat a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::java::lang::String & a3, const ::java::lang::String & a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ecfb0f33, a0, a1.this$, a2.this$, a3.this$, a4.this$)) {}

          jint GradientFormatter::hexToInt(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_hexToInt_5fdc3f57], a0.this$);
          }

          ::java::lang::String GradientFormatter::highlightTerm(const ::java::lang::String & a0, const ::org::apache::lucene::search::highlight::TokenGroup & a1) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_highlightTerm_8838cc58], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_GradientFormatter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GradientFormatter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GradientFormatter_init_(t_GradientFormatter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GradientFormatter_hexToInt(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GradientFormatter_highlightTerm(t_GradientFormatter *self, PyObject *args);

          static PyMethodDef t_GradientFormatter__methods_[] = {
            DECLARE_METHOD(t_GradientFormatter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GradientFormatter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GradientFormatter, hexToInt, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GradientFormatter, highlightTerm, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GradientFormatter, t_GradientFormatter, ::java::lang::Object, GradientFormatter, t_GradientFormatter_init_, 0, 0, 0, 0, 0);

          void t_GradientFormatter::install(PyObject *module)
          {
            installType(&PY_TYPE(GradientFormatter), module, "GradientFormatter", 0);
          }

          void t_GradientFormatter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GradientFormatter).tp_dict, "class_", make_descriptor(GradientFormatter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GradientFormatter).tp_dict, "wrapfn_", make_descriptor(t_GradientFormatter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GradientFormatter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GradientFormatter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GradientFormatter::initializeClass, 1)))
              return NULL;
            return t_GradientFormatter::wrap_Object(GradientFormatter(((t_GradientFormatter *) arg)->object.this$));
          }
          static PyObject *t_GradientFormatter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GradientFormatter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GradientFormatter_init_(t_GradientFormatter *self, PyObject *args, PyObject *kwds)
          {
            jfloat a0;
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            ::java::lang::String a3((jobject) NULL);
            ::java::lang::String a4((jobject) NULL);
            GradientFormatter object((jobject) NULL);

            if (!parseArgs(args, "Fssss", &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = GradientFormatter(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GradientFormatter_hexToInt(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::highlight::GradientFormatter::hexToInt(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "hexToInt", arg);
            return NULL;
          }

          static PyObject *t_GradientFormatter_highlightTerm(t_GradientFormatter *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::highlight::TokenGroup a1((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::search::highlight::TokenGroup::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.highlightTerm(a0, a1));
              return j2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "highlightTerm", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/SortField.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {

          ::java::lang::Class *ValueSource::class$ = NULL;
          jmethodID *ValueSource::mids$ = NULL;
          bool ValueSource::live$ = false;

          jclass ValueSource::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/ValueSource");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
              mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getSortField_6e3d2211] = env->getMethodID(cls, "getSortField", "(Z)Lorg/apache/lucene/search/SortField;");
              mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_newContext_f71e04af] = env->getStaticMethodID(cls, "newContext", "(Lorg/apache/lucene/search/IndexSearcher;)Ljava/util/Map;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ValueSource::ValueSource() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void ValueSource::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
          }

          ::java::lang::String ValueSource::description() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
          }

          jboolean ValueSource::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          ::org::apache::lucene::search::SortField ValueSource::getSortField(jboolean a0) const
          {
            return ::org::apache::lucene::search::SortField(env->callObjectMethod(this$, mids$[mid_getSortField_6e3d2211], a0));
          }

          ::org::apache::lucene::queries::function::FunctionValues ValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
          {
            return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
          }

          jint ValueSource::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::util::Map ValueSource::newContext(const ::org::apache::lucene::search::IndexSearcher & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::util::Map(env->callStaticObjectMethod(cls, mids$[mid_newContext_f71e04af], a0.this$));
          }

          ::java::lang::String ValueSource::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          static PyObject *t_ValueSource_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ValueSource_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ValueSource_init_(t_ValueSource *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ValueSource_createWeight(t_ValueSource *self, PyObject *args);
          static PyObject *t_ValueSource_description(t_ValueSource *self);
          static PyObject *t_ValueSource_equals(t_ValueSource *self, PyObject *args);
          static PyObject *t_ValueSource_getSortField(t_ValueSource *self, PyObject *arg);
          static PyObject *t_ValueSource_getValues(t_ValueSource *self, PyObject *args);
          static PyObject *t_ValueSource_hashCode(t_ValueSource *self, PyObject *args);
          static PyObject *t_ValueSource_newContext(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ValueSource_toString(t_ValueSource *self, PyObject *args);

          static PyMethodDef t_ValueSource__methods_[] = {
            DECLARE_METHOD(t_ValueSource, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ValueSource, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ValueSource, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_ValueSource, description, METH_NOARGS),
            DECLARE_METHOD(t_ValueSource, equals, METH_VARARGS),
            DECLARE_METHOD(t_ValueSource, getSortField, METH_O),
            DECLARE_METHOD(t_ValueSource, getValues, METH_VARARGS),
            DECLARE_METHOD(t_ValueSource, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_ValueSource, newContext, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ValueSource, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ValueSource, t_ValueSource, ::java::lang::Object, ValueSource, t_ValueSource_init_, 0, 0, 0, 0, 0);

          void t_ValueSource::install(PyObject *module)
          {
            installType(&PY_TYPE(ValueSource), module, "ValueSource", 0);
          }

          void t_ValueSource::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ValueSource).tp_dict, "class_", make_descriptor(ValueSource::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ValueSource).tp_dict, "wrapfn_", make_descriptor(t_ValueSource::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ValueSource_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ValueSource::initializeClass, 1)))
              return NULL;
            return t_ValueSource::wrap_Object(ValueSource(((t_ValueSource *) arg)->object.this$));
          }
          static PyObject *t_ValueSource_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ValueSource::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ValueSource_init_(t_ValueSource *self, PyObject *args, PyObject *kwds)
          {
            ValueSource object((jobject) NULL);

            INT_CALL(object = ValueSource());
            self->object = object;

            return 0;
          }

          static PyObject *t_ValueSource_createWeight(t_ValueSource *self, PyObject *args)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

            if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
            {
              OBJ_CALL(self->object.createWeight(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "createWeight", args);
            return NULL;
          }

          static PyObject *t_ValueSource_description(t_ValueSource *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.description());
            return j2p(result);
          }

          static PyObject *t_ValueSource_equals(t_ValueSource *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ValueSource), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_ValueSource_getSortField(t_ValueSource *self, PyObject *arg)
          {
            jboolean a0;
            ::org::apache::lucene::search::SortField result((jobject) NULL);

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(result = self->object.getSortField(a0));
              return ::org::apache::lucene::search::t_SortField::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getSortField", arg);
            return NULL;
          }

          static PyObject *t_ValueSource_getValues(t_ValueSource *self, PyObject *args)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
            ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

            if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
            {
              OBJ_CALL(result = self->object.getValues(a0, a1));
              return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getValues", args);
            return NULL;
          }

          static PyObject *t_ValueSource_hashCode(t_ValueSource *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(ValueSource), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_ValueSource_newContext(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::java::util::Map result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::queries::function::ValueSource::newContext(a0));
              return ::java::util::t_Map::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "newContext", arg);
            return NULL;
          }

          static PyObject *t_ValueSource_toString(t_ValueSource *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(ValueSource), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/CommonQueryParserConfiguration.h"
#include "java/util/Locale.h"
#include "java/util/TimeZone.h"
#include "org/apache/lucene/document/DateTools$Resolution.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/MultiTermQuery$RewriteMethod.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {

            ::java::lang::Class *CommonQueryParserConfiguration::class$ = NULL;
            jmethodID *CommonQueryParserConfiguration::mids$ = NULL;
            bool CommonQueryParserConfiguration::live$ = false;

            jclass CommonQueryParserConfiguration::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/CommonQueryParserConfiguration");

                mids$ = new jmethodID[max_mid];
                mids$[mid_getAllowLeadingWildcard_54c6a16a] = env->getMethodID(cls, "getAllowLeadingWildcard", "()Z");
                mids$[mid_getAnalyzer_347f60a9] = env->getMethodID(cls, "getAnalyzer", "()Lorg/apache/lucene/analysis/Analyzer;");
                mids$[mid_getEnablePositionIncrements_54c6a16a] = env->getMethodID(cls, "getEnablePositionIncrements", "()Z");
                mids$[mid_getFuzzyMinSim_54c6a176] = env->getMethodID(cls, "getFuzzyMinSim", "()F");
                mids$[mid_getFuzzyPrefixLength_54c6a179] = env->getMethodID(cls, "getFuzzyPrefixLength", "()I");
                mids$[mid_getLocale_8bb22876] = env->getMethodID(cls, "getLocale", "()Ljava/util/Locale;");
                mids$[mid_getLowercaseExpandedTerms_54c6a16a] = env->getMethodID(cls, "getLowercaseExpandedTerms", "()Z");
                mids$[mid_getMultiTermRewriteMethod_8919154b] = env->getMethodID(cls, "getMultiTermRewriteMethod", "()Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;");
                mids$[mid_getPhraseSlop_54c6a179] = env->getMethodID(cls, "getPhraseSlop", "()I");
                mids$[mid_getTimeZone_6cce40e5] = env->getMethodID(cls, "getTimeZone", "()Ljava/util/TimeZone;");
                mids$[mid_setAllowLeadingWildcard_bb0c767f] = env->getMethodID(cls, "setAllowLeadingWildcard", "(Z)V");
                mids$[mid_setDateResolution_285c1498] = env->getMethodID(cls, "setDateResolution", "(Lorg/apache/lucene/document/DateTools$Resolution;)V");
                mids$[mid_setEnablePositionIncrements_bb0c767f] = env->getMethodID(cls, "setEnablePositionIncrements", "(Z)V");
                mids$[mid_setFuzzyMinSim_06298cab] = env->getMethodID(cls, "setFuzzyMinSim", "(F)V");
                mids$[mid_setFuzzyPrefixLength_39c7bd3c] = env->getMethodID(cls, "setFuzzyPrefixLength", "(I)V");
                mids$[mid_setLocale_56b0e4b3] = env->getMethodID(cls, "setLocale", "(Ljava/util/Locale;)V");
                mids$[mid_setLowercaseExpandedTerms_bb0c767f] = env->getMethodID(cls, "setLowercaseExpandedTerms", "(Z)V");
                mids$[mid_setMultiTermRewriteMethod_c3c3909e] = env->getMethodID(cls, "setMultiTermRewriteMethod", "(Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;)V");
                mids$[mid_setPhraseSlop_39c7bd3c] = env->getMethodID(cls, "setPhraseSlop", "(I)V");
                mids$[mid_setTimeZone_f7b32d20] = env->getMethodID(cls, "setTimeZone", "(Ljava/util/TimeZone;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            jboolean CommonQueryParserConfiguration::getAllowLeadingWildcard() const
            {
              return env->callBooleanMethod(this$, mids$[mid_getAllowLeadingWildcard_54c6a16a]);
            }

            ::org::apache::lucene::analysis::Analyzer CommonQueryParserConfiguration::getAnalyzer() const
            {
              return ::org::apache::lucene::analysis::Analyzer(env->callObjectMethod(this$, mids$[mid_getAnalyzer_347f60a9]));
            }

            jboolean CommonQueryParserConfiguration::getEnablePositionIncrements() const
            {
              return env->callBooleanMethod(this$, mids$[mid_getEnablePositionIncrements_54c6a16a]);
            }

            jfloat CommonQueryParserConfiguration::getFuzzyMinSim() const
            {
              return env->callFloatMethod(this$, mids$[mid_getFuzzyMinSim_54c6a176]);
            }

            jint CommonQueryParserConfiguration::getFuzzyPrefixLength() const
            {
              return env->callIntMethod(this$, mids$[mid_getFuzzyPrefixLength_54c6a179]);
            }

            ::java::util::Locale CommonQueryParserConfiguration::getLocale() const
            {
              return ::java::util::Locale(env->callObjectMethod(this$, mids$[mid_getLocale_8bb22876]));
            }

            jboolean CommonQueryParserConfiguration::getLowercaseExpandedTerms() const
            {
              return env->callBooleanMethod(this$, mids$[mid_getLowercaseExpandedTerms_54c6a16a]);
            }

            ::org::apache::lucene::search::MultiTermQuery$RewriteMethod CommonQueryParserConfiguration::getMultiTermRewriteMethod() const
            {
              return ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->callObjectMethod(this$, mids$[mid_getMultiTermRewriteMethod_8919154b]));
            }

            jint CommonQueryParserConfiguration::getPhraseSlop() const
            {
              return env->callIntMethod(this$, mids$[mid_getPhraseSlop_54c6a179]);
            }

            ::java::util::TimeZone CommonQueryParserConfiguration::getTimeZone() const
            {
              return ::java::util::TimeZone(env->callObjectMethod(this$, mids$[mid_getTimeZone_6cce40e5]));
            }

            void CommonQueryParserConfiguration::setAllowLeadingWildcard(jboolean a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setAllowLeadingWildcard_bb0c767f], a0);
            }

            void CommonQueryParserConfiguration::setDateResolution(const ::org::apache::lucene::document::DateTools$Resolution & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setDateResolution_285c1498], a0.this$);
            }

            void CommonQueryParserConfiguration::setEnablePositionIncrements(jboolean a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setEnablePositionIncrements_bb0c767f], a0);
            }

            void CommonQueryParserConfiguration::setFuzzyMinSim(jfloat a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setFuzzyMinSim_06298cab], a0);
            }

            void CommonQueryParserConfiguration::setFuzzyPrefixLength(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setFuzzyPrefixLength_39c7bd3c], a0);
            }

            void CommonQueryParserConfiguration::setLocale(const ::java::util::Locale & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setLocale_56b0e4b3], a0.this$);
            }

            void CommonQueryParserConfiguration::setLowercaseExpandedTerms(jboolean a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setLowercaseExpandedTerms_bb0c767f], a0);
            }

            void CommonQueryParserConfiguration::setMultiTermRewriteMethod(const ::org::apache::lucene::search::MultiTermQuery$RewriteMethod & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setMultiTermRewriteMethod_c3c3909e], a0.this$);
            }

            void CommonQueryParserConfiguration::setPhraseSlop(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setPhraseSlop_39c7bd3c], a0);
            }

            void CommonQueryParserConfiguration::setTimeZone(const ::java::util::TimeZone & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setTimeZone_f7b32d20], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            static PyObject *t_CommonQueryParserConfiguration_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_getAllowLeadingWildcard(t_CommonQueryParserConfiguration *self);
            static PyObject *t_CommonQueryParserConfiguration_getAnalyzer(t_CommonQueryParserConfiguration *self);
            static PyObject *t_CommonQueryParserConfiguration_getEnablePositionIncrements(t_CommonQueryParserConfiguration *self);
            static PyObject *t_CommonQueryParserConfiguration_getFuzzyMinSim(t_CommonQueryParserConfiguration *self);
            static PyObject *t_CommonQueryParserConfiguration_getFuzzyPrefixLength(t_CommonQueryParserConfiguration *self);
            static PyObject *t_CommonQueryParserConfiguration_getLocale(t_CommonQueryParserConfiguration *self);
            static PyObject *t_CommonQueryParserConfiguration_getLowercaseExpandedTerms(t_CommonQueryParserConfiguration *self);
            static PyObject *t_CommonQueryParserConfiguration_getMultiTermRewriteMethod(t_CommonQueryParserConfiguration *self);
            static PyObject *t_CommonQueryParserConfiguration_getPhraseSlop(t_CommonQueryParserConfiguration *self);
            static PyObject *t_CommonQueryParserConfiguration_getTimeZone(t_CommonQueryParserConfiguration *self);
            static PyObject *t_CommonQueryParserConfiguration_setAllowLeadingWildcard(t_CommonQueryParserConfiguration *self, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_setDateResolution(t_CommonQueryParserConfiguration *self, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_setEnablePositionIncrements(t_CommonQueryParserConfiguration *self, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_setFuzzyMinSim(t_CommonQueryParserConfiguration *self, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_setFuzzyPrefixLength(t_CommonQueryParserConfiguration *self, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_setLocale(t_CommonQueryParserConfiguration *self, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_setLowercaseExpandedTerms(t_CommonQueryParserConfiguration *self, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_setMultiTermRewriteMethod(t_CommonQueryParserConfiguration *self, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_setPhraseSlop(t_CommonQueryParserConfiguration *self, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_setTimeZone(t_CommonQueryParserConfiguration *self, PyObject *arg);
            static PyObject *t_CommonQueryParserConfiguration_get__allowLeadingWildcard(t_CommonQueryParserConfiguration *self, void *data);
            static int t_CommonQueryParserConfiguration_set__allowLeadingWildcard(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data);
            static PyObject *t_CommonQueryParserConfiguration_get__analyzer(t_CommonQueryParserConfiguration *self, void *data);
            static int t_CommonQueryParserConfiguration_set__dateResolution(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data);
            static PyObject *t_CommonQueryParserConfiguration_get__enablePositionIncrements(t_CommonQueryParserConfiguration *self, void *data);
            static int t_CommonQueryParserConfiguration_set__enablePositionIncrements(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data);
            static PyObject *t_CommonQueryParserConfiguration_get__fuzzyMinSim(t_CommonQueryParserConfiguration *self, void *data);
            static int t_CommonQueryParserConfiguration_set__fuzzyMinSim(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data);
            static PyObject *t_CommonQueryParserConfiguration_get__fuzzyPrefixLength(t_CommonQueryParserConfiguration *self, void *data);
            static int t_CommonQueryParserConfiguration_set__fuzzyPrefixLength(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data);
            static PyObject *t_CommonQueryParserConfiguration_get__locale(t_CommonQueryParserConfiguration *self, void *data);
            static int t_CommonQueryParserConfiguration_set__locale(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data);
            static PyObject *t_CommonQueryParserConfiguration_get__lowercaseExpandedTerms(t_CommonQueryParserConfiguration *self, void *data);
            static int t_CommonQueryParserConfiguration_set__lowercaseExpandedTerms(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data);
            static PyObject *t_CommonQueryParserConfiguration_get__multiTermRewriteMethod(t_CommonQueryParserConfiguration *self, void *data);
            static int t_CommonQueryParserConfiguration_set__multiTermRewriteMethod(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data);
            static PyObject *t_CommonQueryParserConfiguration_get__phraseSlop(t_CommonQueryParserConfiguration *self, void *data);
            static int t_CommonQueryParserConfiguration_set__phraseSlop(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data);
            static PyObject *t_CommonQueryParserConfiguration_get__timeZone(t_CommonQueryParserConfiguration *self, void *data);
            static int t_CommonQueryParserConfiguration_set__timeZone(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data);
            static PyGetSetDef t_CommonQueryParserConfiguration__fields_[] = {
              DECLARE_GETSET_FIELD(t_CommonQueryParserConfiguration, allowLeadingWildcard),
              DECLARE_GET_FIELD(t_CommonQueryParserConfiguration, analyzer),
              DECLARE_SET_FIELD(t_CommonQueryParserConfiguration, dateResolution),
              DECLARE_GETSET_FIELD(t_CommonQueryParserConfiguration, enablePositionIncrements),
              DECLARE_GETSET_FIELD(t_CommonQueryParserConfiguration, fuzzyMinSim),
              DECLARE_GETSET_FIELD(t_CommonQueryParserConfiguration, fuzzyPrefixLength),
              DECLARE_GETSET_FIELD(t_CommonQueryParserConfiguration, locale),
              DECLARE_GETSET_FIELD(t_CommonQueryParserConfiguration, lowercaseExpandedTerms),
              DECLARE_GETSET_FIELD(t_CommonQueryParserConfiguration, multiTermRewriteMethod),
              DECLARE_GETSET_FIELD(t_CommonQueryParserConfiguration, phraseSlop),
              DECLARE_GETSET_FIELD(t_CommonQueryParserConfiguration, timeZone),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_CommonQueryParserConfiguration__methods_[] = {
              DECLARE_METHOD(t_CommonQueryParserConfiguration, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, getAllowLeadingWildcard, METH_NOARGS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, getAnalyzer, METH_NOARGS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, getEnablePositionIncrements, METH_NOARGS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, getFuzzyMinSim, METH_NOARGS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, getFuzzyPrefixLength, METH_NOARGS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, getLocale, METH_NOARGS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, getLowercaseExpandedTerms, METH_NOARGS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, getMultiTermRewriteMethod, METH_NOARGS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, getPhraseSlop, METH_NOARGS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, getTimeZone, METH_NOARGS),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, setAllowLeadingWildcard, METH_O),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, setDateResolution, METH_O),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, setEnablePositionIncrements, METH_O),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, setFuzzyMinSim, METH_O),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, setFuzzyPrefixLength, METH_O),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, setLocale, METH_O),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, setLowercaseExpandedTerms, METH_O),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, setMultiTermRewriteMethod, METH_O),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, setPhraseSlop, METH_O),
              DECLARE_METHOD(t_CommonQueryParserConfiguration, setTimeZone, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(CommonQueryParserConfiguration, t_CommonQueryParserConfiguration, ::java::lang::Object, CommonQueryParserConfiguration, abstract_init, 0, 0, t_CommonQueryParserConfiguration__fields_, 0, 0);

            void t_CommonQueryParserConfiguration::install(PyObject *module)
            {
              installType(&PY_TYPE(CommonQueryParserConfiguration), module, "CommonQueryParserConfiguration", 0);
            }

            void t_CommonQueryParserConfiguration::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(CommonQueryParserConfiguration).tp_dict, "class_", make_descriptor(CommonQueryParserConfiguration::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(CommonQueryParserConfiguration).tp_dict, "wrapfn_", make_descriptor(t_CommonQueryParserConfiguration::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(CommonQueryParserConfiguration).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_CommonQueryParserConfiguration_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, CommonQueryParserConfiguration::initializeClass, 1)))
                return NULL;
              return t_CommonQueryParserConfiguration::wrap_Object(CommonQueryParserConfiguration(((t_CommonQueryParserConfiguration *) arg)->object.this$));
            }
            static PyObject *t_CommonQueryParserConfiguration_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, CommonQueryParserConfiguration::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_CommonQueryParserConfiguration_getAllowLeadingWildcard(t_CommonQueryParserConfiguration *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.getAllowLeadingWildcard());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_CommonQueryParserConfiguration_getAnalyzer(t_CommonQueryParserConfiguration *self)
            {
              ::org::apache::lucene::analysis::Analyzer result((jobject) NULL);
              OBJ_CALL(result = self->object.getAnalyzer());
              return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(result);
            }

            static PyObject *t_CommonQueryParserConfiguration_getEnablePositionIncrements(t_CommonQueryParserConfiguration *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.getEnablePositionIncrements());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_CommonQueryParserConfiguration_getFuzzyMinSim(t_CommonQueryParserConfiguration *self)
            {
              jfloat result;
              OBJ_CALL(result = self->object.getFuzzyMinSim());
              return PyFloat_FromDouble((double) result);
            }

            static PyObject *t_CommonQueryParserConfiguration_getFuzzyPrefixLength(t_CommonQueryParserConfiguration *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getFuzzyPrefixLength());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_CommonQueryParserConfiguration_getLocale(t_CommonQueryParserConfiguration *self)
            {
              ::java::util::Locale result((jobject) NULL);
              OBJ_CALL(result = self->object.getLocale());
              return ::java::util::t_Locale::wrap_Object(result);
            }

            static PyObject *t_CommonQueryParserConfiguration_getLowercaseExpandedTerms(t_CommonQueryParserConfiguration *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.getLowercaseExpandedTerms());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_CommonQueryParserConfiguration_getMultiTermRewriteMethod(t_CommonQueryParserConfiguration *self)
            {
              ::org::apache::lucene::search::MultiTermQuery$RewriteMethod result((jobject) NULL);
              OBJ_CALL(result = self->object.getMultiTermRewriteMethod());
              return ::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(result);
            }

            static PyObject *t_CommonQueryParserConfiguration_getPhraseSlop(t_CommonQueryParserConfiguration *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getPhraseSlop());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_CommonQueryParserConfiguration_getTimeZone(t_CommonQueryParserConfiguration *self)
            {
              ::java::util::TimeZone result((jobject) NULL);
              OBJ_CALL(result = self->object.getTimeZone());
              return ::java::util::t_TimeZone::wrap_Object(result);
            }

            static PyObject *t_CommonQueryParserConfiguration_setAllowLeadingWildcard(t_CommonQueryParserConfiguration *self, PyObject *arg)
            {
              jboolean a0;

              if (!parseArg(arg, "Z", &a0))
              {
                OBJ_CALL(self->object.setAllowLeadingWildcard(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setAllowLeadingWildcard", arg);
              return NULL;
            }

            static PyObject *t_CommonQueryParserConfiguration_setDateResolution(t_CommonQueryParserConfiguration *self, PyObject *arg)
            {
              ::org::apache::lucene::document::DateTools$Resolution a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArg(arg, "K", ::org::apache::lucene::document::DateTools$Resolution::initializeClass, &a0, &p0, ::org::apache::lucene::document::t_DateTools$Resolution::parameters_))
              {
                OBJ_CALL(self->object.setDateResolution(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setDateResolution", arg);
              return NULL;
            }

            static PyObject *t_CommonQueryParserConfiguration_setEnablePositionIncrements(t_CommonQueryParserConfiguration *self, PyObject *arg)
            {
              jboolean a0;

              if (!parseArg(arg, "Z", &a0))
              {
                OBJ_CALL(self->object.setEnablePositionIncrements(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setEnablePositionIncrements", arg);
              return NULL;
            }

            static PyObject *t_CommonQueryParserConfiguration_setFuzzyMinSim(t_CommonQueryParserConfiguration *self, PyObject *arg)
            {
              jfloat a0;

              if (!parseArg(arg, "F", &a0))
              {
                OBJ_CALL(self->object.setFuzzyMinSim(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setFuzzyMinSim", arg);
              return NULL;
            }

            static PyObject *t_CommonQueryParserConfiguration_setFuzzyPrefixLength(t_CommonQueryParserConfiguration *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setFuzzyPrefixLength(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setFuzzyPrefixLength", arg);
              return NULL;
            }

            static PyObject *t_CommonQueryParserConfiguration_setLocale(t_CommonQueryParserConfiguration *self, PyObject *arg)
            {
              ::java::util::Locale a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::util::Locale::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setLocale(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setLocale", arg);
              return NULL;
            }

            static PyObject *t_CommonQueryParserConfiguration_setLowercaseExpandedTerms(t_CommonQueryParserConfiguration *self, PyObject *arg)
            {
              jboolean a0;

              if (!parseArg(arg, "Z", &a0))
              {
                OBJ_CALL(self->object.setLowercaseExpandedTerms(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setLowercaseExpandedTerms", arg);
              return NULL;
            }

            static PyObject *t_CommonQueryParserConfiguration_setMultiTermRewriteMethod(t_CommonQueryParserConfiguration *self, PyObject *arg)
            {
              ::org::apache::lucene::search::MultiTermQuery$RewriteMethod a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::search::MultiTermQuery$RewriteMethod::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setMultiTermRewriteMethod(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setMultiTermRewriteMethod", arg);
              return NULL;
            }

            static PyObject *t_CommonQueryParserConfiguration_setPhraseSlop(t_CommonQueryParserConfiguration *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setPhraseSlop(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setPhraseSlop", arg);
              return NULL;
            }

            static PyObject *t_CommonQueryParserConfiguration_setTimeZone(t_CommonQueryParserConfiguration *self, PyObject *arg)
            {
              ::java::util::TimeZone a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::util::TimeZone::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setTimeZone(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setTimeZone", arg);
              return NULL;
            }

            static PyObject *t_CommonQueryParserConfiguration_get__allowLeadingWildcard(t_CommonQueryParserConfiguration *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.getAllowLeadingWildcard());
              Py_RETURN_BOOL(value);
            }
            static int t_CommonQueryParserConfiguration_set__allowLeadingWildcard(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data)
            {
              {
                jboolean value;
                if (!parseArg(arg, "Z", &value))
                {
                  INT_CALL(self->object.setAllowLeadingWildcard(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "allowLeadingWildcard", arg);
              return -1;
            }

            static PyObject *t_CommonQueryParserConfiguration_get__analyzer(t_CommonQueryParserConfiguration *self, void *data)
            {
              ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
              OBJ_CALL(value = self->object.getAnalyzer());
              return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(value);
            }

            static int t_CommonQueryParserConfiguration_set__dateResolution(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::document::DateTools$Resolution value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::document::DateTools$Resolution::initializeClass, &value))
                {
                  INT_CALL(self->object.setDateResolution(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "dateResolution", arg);
              return -1;
            }

            static PyObject *t_CommonQueryParserConfiguration_get__enablePositionIncrements(t_CommonQueryParserConfiguration *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.getEnablePositionIncrements());
              Py_RETURN_BOOL(value);
            }
            static int t_CommonQueryParserConfiguration_set__enablePositionIncrements(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data)
            {
              {
                jboolean value;
                if (!parseArg(arg, "Z", &value))
                {
                  INT_CALL(self->object.setEnablePositionIncrements(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "enablePositionIncrements", arg);
              return -1;
            }

            static PyObject *t_CommonQueryParserConfiguration_get__fuzzyMinSim(t_CommonQueryParserConfiguration *self, void *data)
            {
              jfloat value;
              OBJ_CALL(value = self->object.getFuzzyMinSim());
              return PyFloat_FromDouble((double) value);
            }
            static int t_CommonQueryParserConfiguration_set__fuzzyMinSim(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data)
            {
              {
                jfloat value;
                if (!parseArg(arg, "F", &value))
                {
                  INT_CALL(self->object.setFuzzyMinSim(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "fuzzyMinSim", arg);
              return -1;
            }

            static PyObject *t_CommonQueryParserConfiguration_get__fuzzyPrefixLength(t_CommonQueryParserConfiguration *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getFuzzyPrefixLength());
              return PyInt_FromLong((long) value);
            }
            static int t_CommonQueryParserConfiguration_set__fuzzyPrefixLength(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setFuzzyPrefixLength(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "fuzzyPrefixLength", arg);
              return -1;
            }

            static PyObject *t_CommonQueryParserConfiguration_get__locale(t_CommonQueryParserConfiguration *self, void *data)
            {
              ::java::util::Locale value((jobject) NULL);
              OBJ_CALL(value = self->object.getLocale());
              return ::java::util::t_Locale::wrap_Object(value);
            }
            static int t_CommonQueryParserConfiguration_set__locale(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data)
            {
              {
                ::java::util::Locale value((jobject) NULL);
                if (!parseArg(arg, "k", ::java::util::Locale::initializeClass, &value))
                {
                  INT_CALL(self->object.setLocale(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "locale", arg);
              return -1;
            }

            static PyObject *t_CommonQueryParserConfiguration_get__lowercaseExpandedTerms(t_CommonQueryParserConfiguration *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.getLowercaseExpandedTerms());
              Py_RETURN_BOOL(value);
            }
            static int t_CommonQueryParserConfiguration_set__lowercaseExpandedTerms(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data)
            {
              {
                jboolean value;
                if (!parseArg(arg, "Z", &value))
                {
                  INT_CALL(self->object.setLowercaseExpandedTerms(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "lowercaseExpandedTerms", arg);
              return -1;
            }

            static PyObject *t_CommonQueryParserConfiguration_get__multiTermRewriteMethod(t_CommonQueryParserConfiguration *self, void *data)
            {
              ::org::apache::lucene::search::MultiTermQuery$RewriteMethod value((jobject) NULL);
              OBJ_CALL(value = self->object.getMultiTermRewriteMethod());
              return ::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(value);
            }
            static int t_CommonQueryParserConfiguration_set__multiTermRewriteMethod(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::search::MultiTermQuery$RewriteMethod value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::search::MultiTermQuery$RewriteMethod::initializeClass, &value))
                {
                  INT_CALL(self->object.setMultiTermRewriteMethod(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "multiTermRewriteMethod", arg);
              return -1;
            }

            static PyObject *t_CommonQueryParserConfiguration_get__phraseSlop(t_CommonQueryParserConfiguration *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getPhraseSlop());
              return PyInt_FromLong((long) value);
            }
            static int t_CommonQueryParserConfiguration_set__phraseSlop(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setPhraseSlop(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "phraseSlop", arg);
              return -1;
            }

            static PyObject *t_CommonQueryParserConfiguration_get__timeZone(t_CommonQueryParserConfiguration *self, void *data)
            {
              ::java::util::TimeZone value((jobject) NULL);
              OBJ_CALL(value = self->object.getTimeZone());
              return ::java::util::t_TimeZone::wrap_Object(value);
            }
            static int t_CommonQueryParserConfiguration_set__timeZone(t_CommonQueryParserConfiguration *self, PyObject *arg, void *data)
            {
              {
                ::java::util::TimeZone value((jobject) NULL);
                if (!parseArg(arg, "k", ::java::util::TimeZone::initializeClass, &value))
                {
                  INT_CALL(self->object.setTimeZone(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "timeZone", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/CharArrayMap.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArrayMap$EntrySet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *CharArrayMap::class$ = NULL;
          jmethodID *CharArrayMap::mids$ = NULL;
          bool CharArrayMap::live$ = false;

          jclass CharArrayMap::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/CharArrayMap");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_741c8a04] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/util/Map;Z)V");
              mids$[mid_init$_b3a872e4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;IZ)V");
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_containsKey_a8afc646] = env->getMethodID(cls, "containsKey", "(Ljava/lang/CharSequence;)Z");
              mids$[mid_containsKey_290588e2] = env->getMethodID(cls, "containsKey", "(Ljava/lang/Object;)Z");
              mids$[mid_containsKey_6f0bb35a] = env->getMethodID(cls, "containsKey", "([CII)Z");
              mids$[mid_copy_67ffa425] = env->getStaticMethodID(cls, "copy", "(Lorg/apache/lucene/util/Version;Ljava/util/Map;)Lorg/apache/lucene/analysis/util/CharArrayMap;");
              mids$[mid_emptyMap_31b01886] = env->getStaticMethodID(cls, "emptyMap", "()Lorg/apache/lucene/analysis/util/CharArrayMap;");
              mids$[mid_entrySet_9ca3e4b1] = env->getMethodID(cls, "entrySet", "()Lorg/apache/lucene/analysis/util/CharArrayMap$EntrySet;");
              mids$[mid_get_a932a95f] = env->getMethodID(cls, "get", "(Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_get_a739ccff] = env->getMethodID(cls, "get", "(Ljava/lang/CharSequence;)Ljava/lang/Object;");
              mids$[mid_get_c05993cb] = env->getMethodID(cls, "get", "([CII)Ljava/lang/Object;");
              mids$[mid_keySet_d2d3505c] = env->getMethodID(cls, "keySet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_put_b85c5dc7] = env->getMethodID(cls, "put", "([CLjava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_put_84c802ab] = env->getMethodID(cls, "put", "(Ljava/lang/CharSequence;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_put_80209419] = env->getMethodID(cls, "put", "(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_put_537d5bdf] = env->getMethodID(cls, "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_remove_a932a95f] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_unmodifiableMap_716215f5] = env->getStaticMethodID(cls, "unmodifiableMap", "(Lorg/apache/lucene/analysis/util/CharArrayMap;)Lorg/apache/lucene/analysis/util/CharArrayMap;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CharArrayMap::CharArrayMap(const ::org::apache::lucene::util::Version & a0, const ::java::util::Map & a1, jboolean a2) : ::java::util::AbstractMap(env->newObject(initializeClass, &mids$, mid_init$_741c8a04, a0.this$, a1.this$, a2)) {}

          CharArrayMap::CharArrayMap(const ::org::apache::lucene::util::Version & a0, jint a1, jboolean a2) : ::java::util::AbstractMap(env->newObject(initializeClass, &mids$, mid_init$_b3a872e4, a0.this$, a1, a2)) {}

          void CharArrayMap::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          jboolean CharArrayMap::containsKey(const ::java::lang::CharSequence & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_containsKey_a8afc646], a0.this$);
          }

          jboolean CharArrayMap::containsKey(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_containsKey_290588e2], a0.this$);
          }

          jboolean CharArrayMap::containsKey(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return env->callBooleanMethod(this$, mids$[mid_containsKey_6f0bb35a], a0.this$, a1, a2);
          }

          CharArrayMap CharArrayMap::copy(const ::org::apache::lucene::util::Version & a0, const ::java::util::Map & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return CharArrayMap(env->callStaticObjectMethod(cls, mids$[mid_copy_67ffa425], a0.this$, a1.this$));
          }

          CharArrayMap CharArrayMap::emptyMap()
          {
            jclass cls = env->getClass(initializeClass);
            return CharArrayMap(env->callStaticObjectMethod(cls, mids$[mid_emptyMap_31b01886]));
          }

          ::org::apache::lucene::analysis::util::CharArrayMap$EntrySet CharArrayMap::entrySet() const
          {
            return ::org::apache::lucene::analysis::util::CharArrayMap$EntrySet(env->callObjectMethod(this$, mids$[mid_entrySet_9ca3e4b1]));
          }

          ::java::lang::Object CharArrayMap::get(const ::java::lang::Object & a0) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_a932a95f], a0.this$));
          }

          ::java::lang::Object CharArrayMap::get(const ::java::lang::CharSequence & a0) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_a739ccff], a0.this$));
          }

          ::java::lang::Object CharArrayMap::get(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_c05993cb], a0.this$, a1, a2));
          }

          ::org::apache::lucene::analysis::util::CharArraySet CharArrayMap::keySet() const
          {
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callObjectMethod(this$, mids$[mid_keySet_d2d3505c]));
          }

          ::java::lang::Object CharArrayMap::put(const JArray< jchar > & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_put_b85c5dc7], a0.this$, a1.this$));
          }

          ::java::lang::Object CharArrayMap::put(const ::java::lang::CharSequence & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_put_84c802ab], a0.this$, a1.this$));
          }

          ::java::lang::Object CharArrayMap::put(const ::java::lang::String & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_put_80209419], a0.this$, a1.this$));
          }

          ::java::lang::Object CharArrayMap::put(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_put_537d5bdf], a0.this$, a1.this$));
          }

          ::java::lang::Object CharArrayMap::remove(const ::java::lang::Object & a0) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_remove_a932a95f], a0.this$));
          }

          jint CharArrayMap::size() const
          {
            return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
          }

          ::java::lang::String CharArrayMap::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          CharArrayMap CharArrayMap::unmodifiableMap(const CharArrayMap & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return CharArrayMap(env->callStaticObjectMethod(cls, mids$[mid_unmodifiableMap_716215f5], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_CharArrayMap_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharArrayMap_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharArrayMap_of_(t_CharArrayMap *self, PyObject *args);
          static int t_CharArrayMap_init_(t_CharArrayMap *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CharArrayMap_clear(t_CharArrayMap *self, PyObject *args);
          static PyObject *t_CharArrayMap_containsKey(t_CharArrayMap *self, PyObject *args);
          static PyObject *t_CharArrayMap_copy(PyTypeObject *type, PyObject *args);
          static PyObject *t_CharArrayMap_emptyMap(PyTypeObject *type);
          static PyObject *t_CharArrayMap_entrySet(t_CharArrayMap *self, PyObject *args);
          static PyObject *t_CharArrayMap_get(t_CharArrayMap *self, PyObject *args);
          static PyObject *t_CharArrayMap_keySet(t_CharArrayMap *self, PyObject *args);
          static PyObject *t_CharArrayMap_put(t_CharArrayMap *self, PyObject *args);
          static PyObject *t_CharArrayMap_remove(t_CharArrayMap *self, PyObject *args);
          static PyObject *t_CharArrayMap_size(t_CharArrayMap *self, PyObject *args);
          static PyObject *t_CharArrayMap_toString(t_CharArrayMap *self, PyObject *args);
          static PyObject *t_CharArrayMap_unmodifiableMap(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharArrayMap_get__parameters_(t_CharArrayMap *self, void *data);
          static PyGetSetDef t_CharArrayMap__fields_[] = {
            DECLARE_GET_FIELD(t_CharArrayMap, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CharArrayMap__methods_[] = {
            DECLARE_METHOD(t_CharArrayMap, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharArrayMap, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharArrayMap, of_, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap, clear, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap, containsKey, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap, copy, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_CharArrayMap, emptyMap, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_CharArrayMap, entrySet, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap, get, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap, keySet, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap, put, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap, remove, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap, size, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap, toString, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap, unmodifiableMap, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CharArrayMap, t_CharArrayMap, ::java::util::AbstractMap, CharArrayMap, t_CharArrayMap_init_, 0, 0, t_CharArrayMap__fields_, 0, 0);
          PyObject *t_CharArrayMap::wrap_Object(const CharArrayMap& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CharArrayMap::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CharArrayMap *self = (t_CharArrayMap *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_CharArrayMap::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CharArrayMap::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CharArrayMap *self = (t_CharArrayMap *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_CharArrayMap::install(PyObject *module)
          {
            installType(&PY_TYPE(CharArrayMap), module, "CharArrayMap", 0);
          }

          void t_CharArrayMap::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CharArrayMap).tp_dict, "class_", make_descriptor(CharArrayMap::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CharArrayMap).tp_dict, "wrapfn_", make_descriptor(t_CharArrayMap::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CharArrayMap).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CharArrayMap_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharArrayMap::initializeClass, 1)))
              return NULL;
            return t_CharArrayMap::wrap_Object(CharArrayMap(((t_CharArrayMap *) arg)->object.this$));
          }
          static PyObject *t_CharArrayMap_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharArrayMap::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CharArrayMap_of_(t_CharArrayMap *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_CharArrayMap_init_(t_CharArrayMap *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::util::Map a1((jobject) NULL);
                PyTypeObject **p1;
                jboolean a2;
                CharArrayMap object((jobject) NULL);

                if (!parseArgs(args, "KKZ", ::org::apache::lucene::util::Version::initializeClass, ::java::util::Map::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::java::util::t_Map::parameters_, &a2))
                {
                  INT_CALL(object = CharArrayMap(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                jint a1;
                jboolean a2;
                CharArrayMap object((jobject) NULL);

                if (!parseArgs(args, "KIZ", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = CharArrayMap(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CharArrayMap_clear(t_CharArrayMap *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CharArrayMap), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_CharArrayMap_containsKey(t_CharArrayMap *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.containsKey(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              {
                ::java::lang::Object a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "o", &a0))
                {
                  OBJ_CALL(result = self->object.containsKey(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;
                jboolean result;

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.containsKey(a0, a1, a2));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            return callSuper(&PY_TYPE(CharArrayMap), (PyObject *) self, "containsKey", args, 2);
          }

          static PyObject *t_CharArrayMap_copy(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::util::Map a1((jobject) NULL);
            PyTypeObject **p1;
            CharArrayMap result((jobject) NULL);

            if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::java::util::Map::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharArrayMap::copy(a0, a1));
              return t_CharArrayMap::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "copy", args);
            return NULL;
          }

          static PyObject *t_CharArrayMap_emptyMap(PyTypeObject *type)
          {
            CharArrayMap result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharArrayMap::emptyMap());
            return t_CharArrayMap::wrap_Object(result);
          }

          static PyObject *t_CharArrayMap_entrySet(t_CharArrayMap *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::util::CharArrayMap$EntrySet result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.entrySet());
              return ::org::apache::lucene::analysis::util::t_CharArrayMap$EntrySet::wrap_Object(result, self->parameters[0]);
            }

            return callSuper(&PY_TYPE(CharArrayMap), (PyObject *) self, "entrySet", args, 2);
          }

          static PyObject *t_CharArrayMap_get(t_CharArrayMap *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::Object a0((jobject) NULL);
                ::java::lang::Object result((jobject) NULL);

                if (!parseArgs(args, "o", &a0))
                {
                  OBJ_CALL(result = self->object.get(a0));
                  return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
                }
              }
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::Object result((jobject) NULL);

                if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.get(a0));
                  return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;
                ::java::lang::Object result((jobject) NULL);

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.get(a0, a1, a2));
                  return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
                }
              }
            }

            return callSuper(&PY_TYPE(CharArrayMap), (PyObject *) self, "get", args, 2);
          }

          static PyObject *t_CharArrayMap_keySet(t_CharArrayMap *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.keySet());
              return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CharArrayMap), (PyObject *) self, "keySet", args, 2);
          }

          static PyObject *t_CharArrayMap_put(t_CharArrayMap *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                JArray< jchar > a0((jobject) NULL);
                ::java::lang::Object a1((jobject) NULL);
                ::java::lang::Object result((jobject) NULL);

                if (!parseArgs(args, "[CO", self->parameters[0], &a0, &a1))
                {
                  OBJ_CALL(result = self->object.put(a0, a1));
                  return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
                }
              }
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::Object a1((jobject) NULL);
                ::java::lang::Object result((jobject) NULL);

                if (!parseArgs(args, "OO", &::java::lang::PY_TYPE(CharSequence), self->parameters[0], &a0, &a1))
                {
                  OBJ_CALL(result = self->object.put(a0, a1));
                  return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::Object a1((jobject) NULL);
                ::java::lang::Object result((jobject) NULL);

                if (!parseArgs(args, "sO", self->parameters[0], &a0, &a1))
                {
                  OBJ_CALL(result = self->object.put(a0, a1));
                  return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
                }
              }
              {
                ::java::lang::Object a0((jobject) NULL);
                ::java::lang::Object a1((jobject) NULL);
                ::java::lang::Object result((jobject) NULL);

                if (!parseArgs(args, "oO", self->parameters[0], &a0, &a1))
                {
                  OBJ_CALL(result = self->object.put(a0, a1));
                  return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
                }
              }
            }

            return callSuper(&PY_TYPE(CharArrayMap), (PyObject *) self, "put", args, 2);
          }

          static PyObject *t_CharArrayMap_remove(t_CharArrayMap *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.remove(a0));
              return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CharArrayMap), (PyObject *) self, "remove", args, 2);
          }

          static PyObject *t_CharArrayMap_size(t_CharArrayMap *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.size());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(CharArrayMap), (PyObject *) self, "size", args, 2);
          }

          static PyObject *t_CharArrayMap_toString(t_CharArrayMap *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(CharArrayMap), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_CharArrayMap_unmodifiableMap(PyTypeObject *type, PyObject *arg)
          {
            CharArrayMap a0((jobject) NULL);
            PyTypeObject **p0;
            CharArrayMap result((jobject) NULL);

            if (!parseArg(arg, "K", CharArrayMap::initializeClass, &a0, &p0, t_CharArrayMap::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharArrayMap::unmodifiableMap(a0));
              return t_CharArrayMap::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "unmodifiableMap", arg);
            return NULL;
          }
          static PyObject *t_CharArrayMap_get__parameters_(t_CharArrayMap *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiDocsEnum$EnumWithSlice.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/ReaderSlice.h"
#include "org/apache/lucene/index/DocsEnum.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiDocsEnum$EnumWithSlice::class$ = NULL;
        jmethodID *MultiDocsEnum$EnumWithSlice::mids$ = NULL;
        jfieldID *MultiDocsEnum$EnumWithSlice::fids$ = NULL;
        bool MultiDocsEnum$EnumWithSlice::live$ = false;

        jclass MultiDocsEnum$EnumWithSlice::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiDocsEnum$EnumWithSlice");

            mids$ = new jmethodID[max_mid];
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_docsEnum] = env->getFieldID(cls, "docsEnum", "Lorg/apache/lucene/index/DocsEnum;");
            fids$[fid_slice] = env->getFieldID(cls, "slice", "Lorg/apache/lucene/index/ReaderSlice;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::String MultiDocsEnum$EnumWithSlice::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::org::apache::lucene::index::DocsEnum MultiDocsEnum$EnumWithSlice::_get_docsEnum() const
        {
          return ::org::apache::lucene::index::DocsEnum(env->getObjectField(this$, fids$[fid_docsEnum]));
        }

        void MultiDocsEnum$EnumWithSlice::_set_docsEnum(const ::org::apache::lucene::index::DocsEnum & a0) const
        {
          env->setObjectField(this$, fids$[fid_docsEnum], a0.this$);
        }

        ::org::apache::lucene::index::ReaderSlice MultiDocsEnum$EnumWithSlice::_get_slice() const
        {
          return ::org::apache::lucene::index::ReaderSlice(env->getObjectField(this$, fids$[fid_slice]));
        }

        void MultiDocsEnum$EnumWithSlice::_set_slice(const ::org::apache::lucene::index::ReaderSlice & a0) const
        {
          env->setObjectField(this$, fids$[fid_slice], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiDocsEnum$EnumWithSlice_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiDocsEnum$EnumWithSlice_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiDocsEnum$EnumWithSlice_toString(t_MultiDocsEnum$EnumWithSlice *self, PyObject *args);
        static PyObject *t_MultiDocsEnum$EnumWithSlice_get__docsEnum(t_MultiDocsEnum$EnumWithSlice *self, void *data);
        static int t_MultiDocsEnum$EnumWithSlice_set__docsEnum(t_MultiDocsEnum$EnumWithSlice *self, PyObject *arg, void *data);
        static PyObject *t_MultiDocsEnum$EnumWithSlice_get__slice(t_MultiDocsEnum$EnumWithSlice *self, void *data);
        static int t_MultiDocsEnum$EnumWithSlice_set__slice(t_MultiDocsEnum$EnumWithSlice *self, PyObject *arg, void *data);

        static PyGetSetDef t_MultiDocsEnum$EnumWithSlice__fields_[] = {
          DECLARE_GETSET_FIELD(t_MultiDocsEnum$EnumWithSlice, docsEnum),
          DECLARE_GETSET_FIELD(t_MultiDocsEnum$EnumWithSlice, slice),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiDocsEnum$EnumWithSlice__methods_[] = {
          DECLARE_METHOD(t_MultiDocsEnum$EnumWithSlice, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocsEnum$EnumWithSlice, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocsEnum$EnumWithSlice, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiDocsEnum$EnumWithSlice, t_MultiDocsEnum$EnumWithSlice, ::java::lang::Object, MultiDocsEnum$EnumWithSlice, abstract_init, 0, 0, t_MultiDocsEnum$EnumWithSlice__fields_, 0, 0);

        void t_MultiDocsEnum$EnumWithSlice::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiDocsEnum$EnumWithSlice), module, "MultiDocsEnum$EnumWithSlice", 0);
        }

        void t_MultiDocsEnum$EnumWithSlice::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiDocsEnum$EnumWithSlice).tp_dict, "class_", make_descriptor(MultiDocsEnum$EnumWithSlice::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiDocsEnum$EnumWithSlice).tp_dict, "wrapfn_", make_descriptor(t_MultiDocsEnum$EnumWithSlice::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiDocsEnum$EnumWithSlice).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiDocsEnum$EnumWithSlice_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiDocsEnum$EnumWithSlice::initializeClass, 1)))
            return NULL;
          return t_MultiDocsEnum$EnumWithSlice::wrap_Object(MultiDocsEnum$EnumWithSlice(((t_MultiDocsEnum$EnumWithSlice *) arg)->object.this$));
        }
        static PyObject *t_MultiDocsEnum$EnumWithSlice_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiDocsEnum$EnumWithSlice::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiDocsEnum$EnumWithSlice_toString(t_MultiDocsEnum$EnumWithSlice *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(MultiDocsEnum$EnumWithSlice), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_MultiDocsEnum$EnumWithSlice_get__docsEnum(t_MultiDocsEnum$EnumWithSlice *self, void *data)
        {
          ::org::apache::lucene::index::DocsEnum value((jobject) NULL);
          OBJ_CALL(value = self->object._get_docsEnum());
          return ::org::apache::lucene::index::t_DocsEnum::wrap_Object(value);
        }
        static int t_MultiDocsEnum$EnumWithSlice_set__docsEnum(t_MultiDocsEnum$EnumWithSlice *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::index::DocsEnum value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::index::DocsEnum::initializeClass, &value))
          {
            INT_CALL(self->object._set_docsEnum(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "docsEnum", arg);
          return -1;
        }

        static PyObject *t_MultiDocsEnum$EnumWithSlice_get__slice(t_MultiDocsEnum$EnumWithSlice *self, void *data)
        {
          ::org::apache::lucene::index::ReaderSlice value((jobject) NULL);
          OBJ_CALL(value = self->object._get_slice());
          return ::org::apache::lucene::index::t_ReaderSlice::wrap_Object(value);
        }
        static int t_MultiDocsEnum$EnumWithSlice_set__slice(t_MultiDocsEnum$EnumWithSlice *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::index::ReaderSlice value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::index::ReaderSlice::initializeClass, &value))
          {
            INT_CALL(self->object._set_slice(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "slice", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/ParseException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/classic/Token.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *ParseException::class$ = NULL;
          jmethodID *ParseException::mids$ = NULL;
          jfieldID *ParseException::fids$ = NULL;
          bool ParseException::live$ = false;

          jclass ParseException::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/ParseException");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
              mids$[mid_init$_8f0beb0f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/classic/Token;[[I[Ljava/lang/String;)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_currentToken] = env->getFieldID(cls, "currentToken", "Lorg/apache/lucene/queryparser/classic/Token;");
              fids$[fid_expectedTokenSequences] = env->getFieldID(cls, "expectedTokenSequences", "[[I");
              fids$[fid_tokenImage] = env->getFieldID(cls, "tokenImage", "[Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ParseException::ParseException() : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ParseException::ParseException(const ::java::lang::String & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

          ParseException::ParseException(const ::org::apache::lucene::queryparser::classic::Token & a0, const JArray< JArray< jint > > & a1, const JArray< ::java::lang::String > & a2) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_8f0beb0f, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::queryparser::classic::Token ParseException::_get_currentToken() const
          {
            return ::org::apache::lucene::queryparser::classic::Token(env->getObjectField(this$, fids$[fid_currentToken]));
          }

          void ParseException::_set_currentToken(const ::org::apache::lucene::queryparser::classic::Token & a0) const
          {
            env->setObjectField(this$, fids$[fid_currentToken], a0.this$);
          }

          JArray< JArray< jint > > ParseException::_get_expectedTokenSequences() const
          {
            return JArray< JArray< jint > >(env->getObjectField(this$, fids$[fid_expectedTokenSequences]));
          }

          void ParseException::_set_expectedTokenSequences(const JArray< JArray< jint > > & a0) const
          {
            env->setObjectField(this$, fids$[fid_expectedTokenSequences], a0.this$);
          }

          JArray< ::java::lang::String > ParseException::_get_tokenImage() const
          {
            return JArray< ::java::lang::String >(env->getObjectField(this$, fids$[fid_tokenImage]));
          }

          void ParseException::_set_tokenImage(const JArray< ::java::lang::String > & a0) const
          {
            env->setObjectField(this$, fids$[fid_tokenImage], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_ParseException_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ParseException_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ParseException_init_(t_ParseException *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ParseException_get__currentToken(t_ParseException *self, void *data);
          static int t_ParseException_set__currentToken(t_ParseException *self, PyObject *arg, void *data);
          static PyObject *t_ParseException_get__expectedTokenSequences(t_ParseException *self, void *data);
          static int t_ParseException_set__expectedTokenSequences(t_ParseException *self, PyObject *arg, void *data);
          static PyObject *t_ParseException_get__tokenImage(t_ParseException *self, void *data);
          static int t_ParseException_set__tokenImage(t_ParseException *self, PyObject *arg, void *data);

          static PyGetSetDef t_ParseException__fields_[] = {
            DECLARE_GETSET_FIELD(t_ParseException, currentToken),
            DECLARE_GETSET_FIELD(t_ParseException, expectedTokenSequences),
            DECLARE_GETSET_FIELD(t_ParseException, tokenImage),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ParseException__methods_[] = {
            DECLARE_METHOD(t_ParseException, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ParseException, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ParseException, t_ParseException, ::java::lang::Exception, ParseException, t_ParseException_init_, 0, 0, t_ParseException__fields_, 0, 0);

          void t_ParseException::install(PyObject *module)
          {
            installType(&PY_TYPE(ParseException), module, "ParseException", 0);
          }

          void t_ParseException::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ParseException).tp_dict, "class_", make_descriptor(ParseException::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ParseException).tp_dict, "wrapfn_", make_descriptor(t_ParseException::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ParseException).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ParseException_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ParseException::initializeClass, 1)))
              return NULL;
            return t_ParseException::wrap_Object(ParseException(((t_ParseException *) arg)->object.this$));
          }
          static PyObject *t_ParseException_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ParseException::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ParseException_init_(t_ParseException *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ParseException object((jobject) NULL);

                INT_CALL(object = ParseException());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                ParseException object((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  INT_CALL(object = ParseException(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::queryparser::classic::Token a0((jobject) NULL);
                JArray< JArray< jint > > a1((jobject) NULL);
                JArray< ::java::lang::String > a2((jobject) NULL);
                ParseException object((jobject) NULL);

                if (!parseArgs(args, "k[[I[s", ::org::apache::lucene::queryparser::classic::Token::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = ParseException(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ParseException_get__currentToken(t_ParseException *self, void *data)
          {
            ::org::apache::lucene::queryparser::classic::Token value((jobject) NULL);
            OBJ_CALL(value = self->object._get_currentToken());
            return ::org::apache::lucene::queryparser::classic::t_Token::wrap_Object(value);
          }
          static int t_ParseException_set__currentToken(t_ParseException *self, PyObject *arg, void *data)
          {
            ::org::apache::lucene::queryparser::classic::Token value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::classic::Token::initializeClass, &value))
            {
              INT_CALL(self->object._set_currentToken(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "currentToken", arg);
            return -1;
          }

          static PyObject *t_ParseException_get__expectedTokenSequences(t_ParseException *self, void *data)
          {
            JArray< JArray< jint > > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_expectedTokenSequences());
            return JArray<jobject>(value.this$).wrap(NULL);
          }
          static int t_ParseException_set__expectedTokenSequences(t_ParseException *self, PyObject *arg, void *data)
          {
            JArray< JArray< jint > > value((jobject) NULL);
            if (!parseArg(arg, "[[I", &value))
            {
              INT_CALL(self->object._set_expectedTokenSequences(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "expectedTokenSequences", arg);
            return -1;
          }

          static PyObject *t_ParseException_get__tokenImage(t_ParseException *self, void *data)
          {
            JArray< ::java::lang::String > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_tokenImage());
            return JArray<jstring>(value.this$).wrap();
          }
          static int t_ParseException_set__tokenImage(t_ParseException *self, PyObject *arg, void *data)
          {
            JArray< ::java::lang::String > value((jobject) NULL);
            if (!parseArg(arg, "[s", &value))
            {
              INT_CALL(self->object._set_tokenImage(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "tokenImage", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::class$ = NULL;
        jmethodID *MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::mids$ = NULL;
        bool MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::live$ = false;

        jclass MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_getMaxSize_54c6a179] = env->getMethodID(cls, "getMaxSize", "()I");
            mids$[mid_addClause_82a56efb] = env->getMethodID(cls, "addClause", "(Lorg/apache/lucene/search/BooleanQuery;Lorg/apache/lucene/index/Term;IFLorg/apache/lucene/index/TermContext;)V");
            mids$[mid_getTopLevelQuery_6f9339e7] = env->getMethodID(cls, "getTopLevelQuery", "()Lorg/apache/lucene/search/BooleanQuery;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite(jint a0) : ::org::apache::lucene::search::TopTermsRewrite(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite_of_(t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite *self, PyObject *args);
        static int t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite_init_(t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite_get__parameters_(t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite *self, void *data);
        static PyGetSetDef t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite__fields_[] = {
          DECLARE_GET_FIELD(t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite__methods_[] = {
          DECLARE_METHOD(t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite, t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite, ::org::apache::lucene::search::TopTermsRewrite, MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite, t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite_init_, 0, 0, t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite__fields_, 0, 0);
        PyObject *t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::wrap_Object(const MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite *self = (t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite *self = (t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite), module, "MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite", 0);
        }

        void t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite).tp_dict, "class_", make_descriptor(MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite).tp_dict, "wrapfn_", make_descriptor(t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::initializeClass, 1)))
            return NULL;
          return t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::wrap_Object(MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite(((t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite *) arg)->object.this$));
        }
        static PyObject *t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite_of_(t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite_init_(t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite(a0));
            self->object = object;
            self->parameters[0] = &::org::apache::lucene::search::PY_TYPE(BooleanQuery);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
        static PyObject *t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite_get__parameters_(t_MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/Among.h"
#include "java/lang/String.h"
#include "org/tartarus/snowball/SnowballProgram.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {

      ::java::lang::Class *Among::class$ = NULL;
      jmethodID *Among::mids$ = NULL;
      jfieldID *Among::fids$ = NULL;
      bool Among::live$ = false;

      jclass Among::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/tartarus/snowball/Among");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_c253f9f9] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;IILjava/lang/String;Lorg/tartarus/snowball/SnowballProgram;)V");

          fids$ = new jfieldID[max_fid];
          fids$[fid_methodobject] = env->getFieldID(cls, "methodobject", "Lorg/tartarus/snowball/SnowballProgram;");
          fids$[fid_result] = env->getFieldID(cls, "result", "I");
          fids$[fid_s] = env->getFieldID(cls, "s", "[C");
          fids$[fid_s_size] = env->getFieldID(cls, "s_size", "I");
          fids$[fid_substring_i] = env->getFieldID(cls, "substring_i", "I");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      Among::Among(const ::java::lang::String & a0, jint a1, jint a2, const ::java::lang::String & a3, const ::org::tartarus::snowball::SnowballProgram & a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c253f9f9, a0.this$, a1, a2, a3.this$, a4.this$)) {}

      ::org::tartarus::snowball::SnowballProgram Among::_get_methodobject() const
      {
        return ::org::tartarus::snowball::SnowballProgram(env->getObjectField(this$, fids$[fid_methodobject]));
      }

      jint Among::_get_result() const
      {
        return env->getIntField(this$, fids$[fid_result]);
      }

      JArray< jchar > Among::_get_s() const
      {
        return JArray< jchar >(env->getObjectField(this$, fids$[fid_s]));
      }

      jint Among::_get_s_size() const
      {
        return env->getIntField(this$, fids$[fid_s_size]);
      }

      jint Among::_get_substring_i() const
      {
        return env->getIntField(this$, fids$[fid_substring_i]);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      static PyObject *t_Among_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Among_instance_(PyTypeObject *type, PyObject *arg);
      static int t_Among_init_(t_Among *self, PyObject *args, PyObject *kwds);
      static PyObject *t_Among_get__methodobject(t_Among *self, void *data);
      static PyObject *t_Among_get__result(t_Among *self, void *data);
      static PyObject *t_Among_get__s(t_Among *self, void *data);
      static PyObject *t_Among_get__s_size(t_Among *self, void *data);
      static PyObject *t_Among_get__substring_i(t_Among *self, void *data);

      static PyGetSetDef t_Among__fields_[] = {
        DECLARE_GET_FIELD(t_Among, methodobject),
        DECLARE_GET_FIELD(t_Among, result),
        DECLARE_GET_FIELD(t_Among, s),
        DECLARE_GET_FIELD(t_Among, s_size),
        DECLARE_GET_FIELD(t_Among, substring_i),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_Among__methods_[] = {
        DECLARE_METHOD(t_Among, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Among, instance_, METH_O | METH_CLASS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(Among, t_Among, ::java::lang::Object, Among, t_Among_init_, 0, 0, t_Among__fields_, 0, 0);

      void t_Among::install(PyObject *module)
      {
        installType(&PY_TYPE(Among), module, "Among", 0);
      }

      void t_Among::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(Among).tp_dict, "class_", make_descriptor(Among::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(Among).tp_dict, "wrapfn_", make_descriptor(t_Among::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(Among).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Among_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Among::initializeClass, 1)))
          return NULL;
        return t_Among::wrap_Object(Among(((t_Among *) arg)->object.this$));
      }
      static PyObject *t_Among_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Among::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_Among_init_(t_Among *self, PyObject *args, PyObject *kwds)
      {
        ::java::lang::String a0((jobject) NULL);
        jint a1;
        jint a2;
        ::java::lang::String a3((jobject) NULL);
        ::org::tartarus::snowball::SnowballProgram a4((jobject) NULL);
        Among object((jobject) NULL);

        if (!parseArgs(args, "sIIsk", ::org::tartarus::snowball::SnowballProgram::initializeClass, &a0, &a1, &a2, &a3, &a4))
        {
          INT_CALL(object = Among(a0, a1, a2, a3, a4));
          self->object = object;
        }
        else
        {
          PyErr_SetArgsError((PyObject *) self, "__init__", args);
          return -1;
        }

        return 0;
      }

      static PyObject *t_Among_get__methodobject(t_Among *self, void *data)
      {
        ::org::tartarus::snowball::SnowballProgram value((jobject) NULL);
        OBJ_CALL(value = self->object._get_methodobject());
        return ::org::tartarus::snowball::t_SnowballProgram::wrap_Object(value);
      }

      static PyObject *t_Among_get__result(t_Among *self, void *data)
      {
        jint value;
        OBJ_CALL(value = self->object._get_result());
        return PyInt_FromLong((long) value);
      }

      static PyObject *t_Among_get__s(t_Among *self, void *data)
      {
        JArray< jchar > value((jobject) NULL);
        OBJ_CALL(value = self->object._get_s());
        return value.wrap();
      }

      static PyObject *t_Among_get__s_size(t_Among *self, void *data)
      {
        jint value;
        OBJ_CALL(value = self->object._get_s_size());
        return PyInt_FromLong((long) value);
      }

      static PyObject *t_Among_get__substring_i(t_Among *self, void *data)
      {
        jint value;
        OBJ_CALL(value = self->object._get_substring_i());
        return PyInt_FromLong((long) value);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergePolicy$MergeSpecification.h"
#include "org/apache/lucene/index/MergePolicy$OneMerge.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergePolicy$MergeSpecification::class$ = NULL;
        jmethodID *MergePolicy$MergeSpecification::mids$ = NULL;
        jfieldID *MergePolicy$MergeSpecification::fids$ = NULL;
        bool MergePolicy$MergeSpecification::live$ = false;

        jclass MergePolicy$MergeSpecification::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergePolicy$MergeSpecification");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_54badd95] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/index/MergePolicy$OneMerge;)V");
            mids$[mid_segString_0451c495] = env->getMethodID(cls, "segString", "(Lorg/apache/lucene/store/Directory;)Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_merges] = env->getFieldID(cls, "merges", "Ljava/util/List;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MergePolicy$MergeSpecification::MergePolicy$MergeSpecification() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void MergePolicy$MergeSpecification::add(const ::org::apache::lucene::index::MergePolicy$OneMerge & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_54badd95], a0.this$);
        }

        ::java::lang::String MergePolicy$MergeSpecification::segString(const ::org::apache::lucene::store::Directory & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_segString_0451c495], a0.this$));
        }

        ::java::util::List MergePolicy$MergeSpecification::_get_merges() const
        {
          return ::java::util::List(env->getObjectField(this$, fids$[fid_merges]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergePolicy$MergeSpecification_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergePolicy$MergeSpecification_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MergePolicy$MergeSpecification_init_(t_MergePolicy$MergeSpecification *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MergePolicy$MergeSpecification_add(t_MergePolicy$MergeSpecification *self, PyObject *arg);
        static PyObject *t_MergePolicy$MergeSpecification_segString(t_MergePolicy$MergeSpecification *self, PyObject *arg);
        static PyObject *t_MergePolicy$MergeSpecification_get__merges(t_MergePolicy$MergeSpecification *self, void *data);

        static PyGetSetDef t_MergePolicy$MergeSpecification__fields_[] = {
          DECLARE_GET_FIELD(t_MergePolicy$MergeSpecification, merges),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MergePolicy$MergeSpecification__methods_[] = {
          DECLARE_METHOD(t_MergePolicy$MergeSpecification, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy$MergeSpecification, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy$MergeSpecification, add, METH_O),
          DECLARE_METHOD(t_MergePolicy$MergeSpecification, segString, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MergePolicy$MergeSpecification, t_MergePolicy$MergeSpecification, ::java::lang::Object, MergePolicy$MergeSpecification, t_MergePolicy$MergeSpecification_init_, 0, 0, t_MergePolicy$MergeSpecification__fields_, 0, 0);

        void t_MergePolicy$MergeSpecification::install(PyObject *module)
        {
          installType(&PY_TYPE(MergePolicy$MergeSpecification), module, "MergePolicy$MergeSpecification", 0);
        }

        void t_MergePolicy$MergeSpecification::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MergePolicy$MergeSpecification).tp_dict, "class_", make_descriptor(MergePolicy$MergeSpecification::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MergePolicy$MergeSpecification).tp_dict, "wrapfn_", make_descriptor(t_MergePolicy$MergeSpecification::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MergePolicy$MergeSpecification).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergePolicy$MergeSpecification_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergePolicy$MergeSpecification::initializeClass, 1)))
            return NULL;
          return t_MergePolicy$MergeSpecification::wrap_Object(MergePolicy$MergeSpecification(((t_MergePolicy$MergeSpecification *) arg)->object.this$));
        }
        static PyObject *t_MergePolicy$MergeSpecification_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergePolicy$MergeSpecification::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MergePolicy$MergeSpecification_init_(t_MergePolicy$MergeSpecification *self, PyObject *args, PyObject *kwds)
        {
          MergePolicy$MergeSpecification object((jobject) NULL);

          INT_CALL(object = MergePolicy$MergeSpecification());
          self->object = object;

          return 0;
        }

        static PyObject *t_MergePolicy$MergeSpecification_add(t_MergePolicy$MergeSpecification *self, PyObject *arg)
        {
          ::org::apache::lucene::index::MergePolicy$OneMerge a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::MergePolicy$OneMerge::initializeClass, &a0))
          {
            OBJ_CALL(self->object.add(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "add", arg);
          return NULL;
        }

        static PyObject *t_MergePolicy$MergeSpecification_segString(t_MergePolicy$MergeSpecification *self, PyObject *arg)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.segString(a0));
            return j2p(result);
          }

          PyErr_SetArgsError((PyObject *) self, "segString", arg);
          return NULL;
        }

        static PyObject *t_MergePolicy$MergeSpecification_get__merges(t_MergePolicy$MergeSpecification *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object._get_merges());
          return ::java::util::t_List::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/StopAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/io/File.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *StopAnalyzer::class$ = NULL;
          jmethodID *StopAnalyzer::mids$ = NULL;
          bool StopAnalyzer::live$ = false;
          ::org::apache::lucene::analysis::util::CharArraySet *StopAnalyzer::ENGLISH_STOP_WORDS_SET = NULL;

          jclass StopAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/StopAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_f88c7fb6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/File;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              ENGLISH_STOP_WORDS_SET = new ::org::apache::lucene::analysis::util::CharArraySet(env->getStaticObjectField(cls, "ENGLISH_STOP_WORDS_SET", "Lorg/apache/lucene/analysis/util/CharArraySet;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StopAnalyzer::StopAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          StopAnalyzer::StopAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          StopAnalyzer::StopAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::java::io::File & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_f88c7fb6, a0.this$, a1.this$)) {}

          StopAnalyzer::StopAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_StopAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StopAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StopAnalyzer_init_(t_StopAnalyzer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_StopAnalyzer__methods_[] = {
            DECLARE_METHOD(t_StopAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StopAnalyzer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StopAnalyzer, t_StopAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, StopAnalyzer, t_StopAnalyzer_init_, 0, 0, 0, 0, 0);

          void t_StopAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(StopAnalyzer), module, "StopAnalyzer", 0);
          }

          void t_StopAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StopAnalyzer).tp_dict, "class_", make_descriptor(StopAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StopAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_StopAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StopAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(StopAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(StopAnalyzer).tp_dict, "ENGLISH_STOP_WORDS_SET", make_descriptor(::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(*StopAnalyzer::ENGLISH_STOP_WORDS_SET)));
          }

          static PyObject *t_StopAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StopAnalyzer::initializeClass, 1)))
              return NULL;
            return t_StopAnalyzer::wrap_Object(StopAnalyzer(((t_StopAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_StopAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StopAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StopAnalyzer_init_(t_StopAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                StopAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = StopAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                StopAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = StopAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::File a1((jobject) NULL);
                StopAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::File::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = StopAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                StopAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = StopAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/sinks/TeeSinkTokenFilter$SinkFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sinks {

          ::java::lang::Class *TeeSinkTokenFilter$SinkFilter::class$ = NULL;
          jmethodID *TeeSinkTokenFilter$SinkFilter::mids$ = NULL;
          bool TeeSinkTokenFilter$SinkFilter::live$ = false;

          jclass TeeSinkTokenFilter$SinkFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/sinks/TeeSinkTokenFilter$SinkFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_accept_aea2d6e6] = env->getMethodID(cls, "accept", "(Lorg/apache/lucene/util/AttributeSource;)Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TeeSinkTokenFilter$SinkFilter::TeeSinkTokenFilter$SinkFilter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jboolean TeeSinkTokenFilter$SinkFilter::accept(const ::org::apache::lucene::util::AttributeSource & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_accept_aea2d6e6], a0.this$);
          }

          void TeeSinkTokenFilter$SinkFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sinks {
          static PyObject *t_TeeSinkTokenFilter$SinkFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TeeSinkTokenFilter$SinkFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TeeSinkTokenFilter$SinkFilter_init_(t_TeeSinkTokenFilter$SinkFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TeeSinkTokenFilter$SinkFilter_accept(t_TeeSinkTokenFilter$SinkFilter *self, PyObject *arg);
          static PyObject *t_TeeSinkTokenFilter$SinkFilter_reset(t_TeeSinkTokenFilter$SinkFilter *self);

          static PyMethodDef t_TeeSinkTokenFilter$SinkFilter__methods_[] = {
            DECLARE_METHOD(t_TeeSinkTokenFilter$SinkFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TeeSinkTokenFilter$SinkFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TeeSinkTokenFilter$SinkFilter, accept, METH_O),
            DECLARE_METHOD(t_TeeSinkTokenFilter$SinkFilter, reset, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TeeSinkTokenFilter$SinkFilter, t_TeeSinkTokenFilter$SinkFilter, ::java::lang::Object, TeeSinkTokenFilter$SinkFilter, t_TeeSinkTokenFilter$SinkFilter_init_, 0, 0, 0, 0, 0);

          void t_TeeSinkTokenFilter$SinkFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(TeeSinkTokenFilter$SinkFilter), module, "TeeSinkTokenFilter$SinkFilter", 0);
          }

          void t_TeeSinkTokenFilter$SinkFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TeeSinkTokenFilter$SinkFilter).tp_dict, "class_", make_descriptor(TeeSinkTokenFilter$SinkFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TeeSinkTokenFilter$SinkFilter).tp_dict, "wrapfn_", make_descriptor(t_TeeSinkTokenFilter$SinkFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TeeSinkTokenFilter$SinkFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TeeSinkTokenFilter$SinkFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TeeSinkTokenFilter$SinkFilter::initializeClass, 1)))
              return NULL;
            return t_TeeSinkTokenFilter$SinkFilter::wrap_Object(TeeSinkTokenFilter$SinkFilter(((t_TeeSinkTokenFilter$SinkFilter *) arg)->object.this$));
          }
          static PyObject *t_TeeSinkTokenFilter$SinkFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TeeSinkTokenFilter$SinkFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TeeSinkTokenFilter$SinkFilter_init_(t_TeeSinkTokenFilter$SinkFilter *self, PyObject *args, PyObject *kwds)
          {
            TeeSinkTokenFilter$SinkFilter object((jobject) NULL);

            INT_CALL(object = TeeSinkTokenFilter$SinkFilter());
            self->object = object;

            return 0;
          }

          static PyObject *t_TeeSinkTokenFilter$SinkFilter_accept(t_TeeSinkTokenFilter$SinkFilter *self, PyObject *arg)
          {
            ::org::apache::lucene::util::AttributeSource a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "k", ::org::apache::lucene::util::AttributeSource::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.accept(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "accept", arg);
            return NULL;
          }

          static PyObject *t_TeeSinkTokenFilter$SinkFilter_reset(t_TeeSinkTokenFilter$SinkFilter *self)
          {
            OBJ_CALL(self->object.reset());
            Py_RETURN_NONE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/UpperCaseFilterFactory.h"
#include "org/apache/lucene/analysis/core/UpperCaseFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *UpperCaseFilterFactory::class$ = NULL;
          jmethodID *UpperCaseFilterFactory::mids$ = NULL;
          bool UpperCaseFilterFactory::live$ = false;

          jclass UpperCaseFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/UpperCaseFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_da6c60eb] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/core/UpperCaseFilter;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          UpperCaseFilterFactory::UpperCaseFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::core::UpperCaseFilter UpperCaseFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::core::UpperCaseFilter(env->callObjectMethod(this$, mids$[mid_create_da6c60eb], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory UpperCaseFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_UpperCaseFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UpperCaseFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_UpperCaseFilterFactory_init_(t_UpperCaseFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_UpperCaseFilterFactory_create(t_UpperCaseFilterFactory *self, PyObject *args);
          static PyObject *t_UpperCaseFilterFactory_getMultiTermComponent(t_UpperCaseFilterFactory *self);
          static PyObject *t_UpperCaseFilterFactory_get__multiTermComponent(t_UpperCaseFilterFactory *self, void *data);
          static PyGetSetDef t_UpperCaseFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_UpperCaseFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_UpperCaseFilterFactory__methods_[] = {
            DECLARE_METHOD(t_UpperCaseFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UpperCaseFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UpperCaseFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_UpperCaseFilterFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(UpperCaseFilterFactory, t_UpperCaseFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, UpperCaseFilterFactory, t_UpperCaseFilterFactory_init_, 0, 0, t_UpperCaseFilterFactory__fields_, 0, 0);

          void t_UpperCaseFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(UpperCaseFilterFactory), module, "UpperCaseFilterFactory", 0);
          }

          void t_UpperCaseFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(UpperCaseFilterFactory).tp_dict, "class_", make_descriptor(UpperCaseFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(UpperCaseFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_UpperCaseFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(UpperCaseFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_UpperCaseFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, UpperCaseFilterFactory::initializeClass, 1)))
              return NULL;
            return t_UpperCaseFilterFactory::wrap_Object(UpperCaseFilterFactory(((t_UpperCaseFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_UpperCaseFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, UpperCaseFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_UpperCaseFilterFactory_init_(t_UpperCaseFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            UpperCaseFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = UpperCaseFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_UpperCaseFilterFactory_create(t_UpperCaseFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::core::UpperCaseFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::core::t_UpperCaseFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(UpperCaseFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_UpperCaseFilterFactory_getMultiTermComponent(t_UpperCaseFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_UpperCaseFilterFactory_get__multiTermComponent(t_UpperCaseFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FastVectorHighlighter.h"
#include "org/apache/lucene/search/Query.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/highlight/Encoder.h"
#include "org/apache/lucene/search/vectorhighlight/FieldQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/vectorhighlight/FragListBuilder.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/vectorhighlight/FragmentsBuilder.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FastVectorHighlighter::class$ = NULL;
          jmethodID *FastVectorHighlighter::mids$ = NULL;
          bool FastVectorHighlighter::live$ = false;
          jboolean FastVectorHighlighter::DEFAULT_FIELD_MATCH = (jboolean) 0;
          jboolean FastVectorHighlighter::DEFAULT_PHRASE_HIGHLIGHT = (jboolean) 0;

          jclass FastVectorHighlighter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FastVectorHighlighter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_46f2e2c4] = env->getMethodID(cls, "<init>", "(ZZ)V");
              mids$[mid_init$_35aba53c] = env->getMethodID(cls, "<init>", "(ZZLorg/apache/lucene/search/vectorhighlight/FragListBuilder;Lorg/apache/lucene/search/vectorhighlight/FragmentsBuilder;)V");
              mids$[mid_getBestFragment_dab3f1b2] = env->getMethodID(cls, "getBestFragment", "(Lorg/apache/lucene/search/vectorhighlight/FieldQuery;Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;I)Ljava/lang/String;");
              mids$[mid_getBestFragment_71cd1532] = env->getMethodID(cls, "getBestFragment", "(Lorg/apache/lucene/search/vectorhighlight/FieldQuery;Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;ILorg/apache/lucene/search/vectorhighlight/FragListBuilder;Lorg/apache/lucene/search/vectorhighlight/FragmentsBuilder;[Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/search/highlight/Encoder;)Ljava/lang/String;");
              mids$[mid_getBestFragments_f180a9d4] = env->getMethodID(cls, "getBestFragments", "(Lorg/apache/lucene/search/vectorhighlight/FieldQuery;Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;II)[Ljava/lang/String;");
              mids$[mid_getBestFragments_d3e90fd8] = env->getMethodID(cls, "getBestFragments", "(Lorg/apache/lucene/search/vectorhighlight/FieldQuery;Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;IILorg/apache/lucene/search/vectorhighlight/FragListBuilder;Lorg/apache/lucene/search/vectorhighlight/FragmentsBuilder;[Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/search/highlight/Encoder;)[Ljava/lang/String;");
              mids$[mid_getBestFragments_5366ca3a] = env->getMethodID(cls, "getBestFragments", "(Lorg/apache/lucene/search/vectorhighlight/FieldQuery;Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Ljava/util/Set;IILorg/apache/lucene/search/vectorhighlight/FragListBuilder;Lorg/apache/lucene/search/vectorhighlight/FragmentsBuilder;[Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/search/highlight/Encoder;)[Ljava/lang/String;");
              mids$[mid_getFieldQuery_b2d7cb3a] = env->getMethodID(cls, "getFieldQuery", "(Lorg/apache/lucene/search/Query;)Lorg/apache/lucene/search/vectorhighlight/FieldQuery;");
              mids$[mid_getFieldQuery_6934781b] = env->getMethodID(cls, "getFieldQuery", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/vectorhighlight/FieldQuery;");
              mids$[mid_getPhraseLimit_54c6a179] = env->getMethodID(cls, "getPhraseLimit", "()I");
              mids$[mid_isFieldMatch_54c6a16a] = env->getMethodID(cls, "isFieldMatch", "()Z");
              mids$[mid_isPhraseHighlight_54c6a16a] = env->getMethodID(cls, "isPhraseHighlight", "()Z");
              mids$[mid_setPhraseLimit_39c7bd3c] = env->getMethodID(cls, "setPhraseLimit", "(I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_FIELD_MATCH = env->getStaticBooleanField(cls, "DEFAULT_FIELD_MATCH");
              DEFAULT_PHRASE_HIGHLIGHT = env->getStaticBooleanField(cls, "DEFAULT_PHRASE_HIGHLIGHT");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FastVectorHighlighter::FastVectorHighlighter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          FastVectorHighlighter::FastVectorHighlighter(jboolean a0, jboolean a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_46f2e2c4, a0, a1)) {}

          FastVectorHighlighter::FastVectorHighlighter(jboolean a0, jboolean a1, const ::org::apache::lucene::search::vectorhighlight::FragListBuilder & a2, const ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_35aba53c, a0, a1, a2.this$, a3.this$)) {}

          ::java::lang::String FastVectorHighlighter::getBestFragment(const ::org::apache::lucene::search::vectorhighlight::FieldQuery & a0, const ::org::apache::lucene::index::IndexReader & a1, jint a2, const ::java::lang::String & a3, jint a4) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getBestFragment_dab3f1b2], a0.this$, a1.this$, a2, a3.this$, a4));
          }

          ::java::lang::String FastVectorHighlighter::getBestFragment(const ::org::apache::lucene::search::vectorhighlight::FieldQuery & a0, const ::org::apache::lucene::index::IndexReader & a1, jint a2, const ::java::lang::String & a3, jint a4, const ::org::apache::lucene::search::vectorhighlight::FragListBuilder & a5, const ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder & a6, const JArray< ::java::lang::String > & a7, const JArray< ::java::lang::String > & a8, const ::org::apache::lucene::search::highlight::Encoder & a9) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getBestFragment_71cd1532], a0.this$, a1.this$, a2, a3.this$, a4, a5.this$, a6.this$, a7.this$, a8.this$, a9.this$));
          }

          JArray< ::java::lang::String > FastVectorHighlighter::getBestFragments(const ::org::apache::lucene::search::vectorhighlight::FieldQuery & a0, const ::org::apache::lucene::index::IndexReader & a1, jint a2, const ::java::lang::String & a3, jint a4, jint a5) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_getBestFragments_f180a9d4], a0.this$, a1.this$, a2, a3.this$, a4, a5));
          }

          JArray< ::java::lang::String > FastVectorHighlighter::getBestFragments(const ::org::apache::lucene::search::vectorhighlight::FieldQuery & a0, const ::org::apache::lucene::index::IndexReader & a1, jint a2, const ::java::lang::String & a3, jint a4, jint a5, const ::org::apache::lucene::search::vectorhighlight::FragListBuilder & a6, const ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder & a7, const JArray< ::java::lang::String > & a8, const JArray< ::java::lang::String > & a9, const ::org::apache::lucene::search::highlight::Encoder & a10) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_getBestFragments_d3e90fd8], a0.this$, a1.this$, a2, a3.this$, a4, a5, a6.this$, a7.this$, a8.this$, a9.this$, a10.this$));
          }

          JArray< ::java::lang::String > FastVectorHighlighter::getBestFragments(const ::org::apache::lucene::search::vectorhighlight::FieldQuery & a0, const ::org::apache::lucene::index::IndexReader & a1, jint a2, const ::java::lang::String & a3, const ::java::util::Set & a4, jint a5, jint a6, const ::org::apache::lucene::search::vectorhighlight::FragListBuilder & a7, const ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder & a8, const JArray< ::java::lang::String > & a9, const JArray< ::java::lang::String > & a10, const ::org::apache::lucene::search::highlight::Encoder & a11) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_getBestFragments_5366ca3a], a0.this$, a1.this$, a2, a3.this$, a4.this$, a5, a6, a7.this$, a8.this$, a9.this$, a10.this$, a11.this$));
          }

          ::org::apache::lucene::search::vectorhighlight::FieldQuery FastVectorHighlighter::getFieldQuery(const ::org::apache::lucene::search::Query & a0) const
          {
            return ::org::apache::lucene::search::vectorhighlight::FieldQuery(env->callObjectMethod(this$, mids$[mid_getFieldQuery_b2d7cb3a], a0.this$));
          }

          ::org::apache::lucene::search::vectorhighlight::FieldQuery FastVectorHighlighter::getFieldQuery(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::index::IndexReader & a1) const
          {
            return ::org::apache::lucene::search::vectorhighlight::FieldQuery(env->callObjectMethod(this$, mids$[mid_getFieldQuery_6934781b], a0.this$, a1.this$));
          }

          jint FastVectorHighlighter::getPhraseLimit() const
          {
            return env->callIntMethod(this$, mids$[mid_getPhraseLimit_54c6a179]);
          }

          jboolean FastVectorHighlighter::isFieldMatch() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isFieldMatch_54c6a16a]);
          }

          jboolean FastVectorHighlighter::isPhraseHighlight() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isPhraseHighlight_54c6a16a]);
          }

          void FastVectorHighlighter::setPhraseLimit(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPhraseLimit_39c7bd3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FastVectorHighlighter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FastVectorHighlighter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FastVectorHighlighter_init_(t_FastVectorHighlighter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FastVectorHighlighter_getBestFragment(t_FastVectorHighlighter *self, PyObject *args);
          static PyObject *t_FastVectorHighlighter_getBestFragments(t_FastVectorHighlighter *self, PyObject *args);
          static PyObject *t_FastVectorHighlighter_getFieldQuery(t_FastVectorHighlighter *self, PyObject *args);
          static PyObject *t_FastVectorHighlighter_getPhraseLimit(t_FastVectorHighlighter *self);
          static PyObject *t_FastVectorHighlighter_isFieldMatch(t_FastVectorHighlighter *self);
          static PyObject *t_FastVectorHighlighter_isPhraseHighlight(t_FastVectorHighlighter *self);
          static PyObject *t_FastVectorHighlighter_setPhraseLimit(t_FastVectorHighlighter *self, PyObject *arg);
          static PyObject *t_FastVectorHighlighter_get__fieldMatch(t_FastVectorHighlighter *self, void *data);
          static PyObject *t_FastVectorHighlighter_get__phraseHighlight(t_FastVectorHighlighter *self, void *data);
          static PyObject *t_FastVectorHighlighter_get__phraseLimit(t_FastVectorHighlighter *self, void *data);
          static int t_FastVectorHighlighter_set__phraseLimit(t_FastVectorHighlighter *self, PyObject *arg, void *data);
          static PyGetSetDef t_FastVectorHighlighter__fields_[] = {
            DECLARE_GET_FIELD(t_FastVectorHighlighter, fieldMatch),
            DECLARE_GET_FIELD(t_FastVectorHighlighter, phraseHighlight),
            DECLARE_GETSET_FIELD(t_FastVectorHighlighter, phraseLimit),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FastVectorHighlighter__methods_[] = {
            DECLARE_METHOD(t_FastVectorHighlighter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FastVectorHighlighter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FastVectorHighlighter, getBestFragment, METH_VARARGS),
            DECLARE_METHOD(t_FastVectorHighlighter, getBestFragments, METH_VARARGS),
            DECLARE_METHOD(t_FastVectorHighlighter, getFieldQuery, METH_VARARGS),
            DECLARE_METHOD(t_FastVectorHighlighter, getPhraseLimit, METH_NOARGS),
            DECLARE_METHOD(t_FastVectorHighlighter, isFieldMatch, METH_NOARGS),
            DECLARE_METHOD(t_FastVectorHighlighter, isPhraseHighlight, METH_NOARGS),
            DECLARE_METHOD(t_FastVectorHighlighter, setPhraseLimit, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FastVectorHighlighter, t_FastVectorHighlighter, ::java::lang::Object, FastVectorHighlighter, t_FastVectorHighlighter_init_, 0, 0, t_FastVectorHighlighter__fields_, 0, 0);

          void t_FastVectorHighlighter::install(PyObject *module)
          {
            installType(&PY_TYPE(FastVectorHighlighter), module, "FastVectorHighlighter", 0);
          }

          void t_FastVectorHighlighter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FastVectorHighlighter).tp_dict, "class_", make_descriptor(FastVectorHighlighter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FastVectorHighlighter).tp_dict, "wrapfn_", make_descriptor(t_FastVectorHighlighter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FastVectorHighlighter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(FastVectorHighlighter::initializeClass);
            PyDict_SetItemString(PY_TYPE(FastVectorHighlighter).tp_dict, "DEFAULT_FIELD_MATCH", make_descriptor(FastVectorHighlighter::DEFAULT_FIELD_MATCH));
            PyDict_SetItemString(PY_TYPE(FastVectorHighlighter).tp_dict, "DEFAULT_PHRASE_HIGHLIGHT", make_descriptor(FastVectorHighlighter::DEFAULT_PHRASE_HIGHLIGHT));
          }

          static PyObject *t_FastVectorHighlighter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FastVectorHighlighter::initializeClass, 1)))
              return NULL;
            return t_FastVectorHighlighter::wrap_Object(FastVectorHighlighter(((t_FastVectorHighlighter *) arg)->object.this$));
          }
          static PyObject *t_FastVectorHighlighter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FastVectorHighlighter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FastVectorHighlighter_init_(t_FastVectorHighlighter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                FastVectorHighlighter object((jobject) NULL);

                INT_CALL(object = FastVectorHighlighter());
                self->object = object;
                break;
              }
              goto err;
             case 2:
              {
                jboolean a0;
                jboolean a1;
                FastVectorHighlighter object((jobject) NULL);

                if (!parseArgs(args, "ZZ", &a0, &a1))
                {
                  INT_CALL(object = FastVectorHighlighter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                jboolean a0;
                jboolean a1;
                ::org::apache::lucene::search::vectorhighlight::FragListBuilder a2((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder a3((jobject) NULL);
                FastVectorHighlighter object((jobject) NULL);

                if (!parseArgs(args, "ZZkk", ::org::apache::lucene::search::vectorhighlight::FragListBuilder::initializeClass, ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = FastVectorHighlighter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FastVectorHighlighter_getBestFragment(t_FastVectorHighlighter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 5:
              {
                ::org::apache::lucene::search::vectorhighlight::FieldQuery a0((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
                jint a2;
                ::java::lang::String a3((jobject) NULL);
                jint a4;
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "kkIsI", ::org::apache::lucene::search::vectorhighlight::FieldQuery::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(result = self->object.getBestFragment(a0, a1, a2, a3, a4));
                  return j2p(result);
                }
              }
              break;
             case 10:
              {
                ::org::apache::lucene::search::vectorhighlight::FieldQuery a0((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
                jint a2;
                ::java::lang::String a3((jobject) NULL);
                jint a4;
                ::org::apache::lucene::search::vectorhighlight::FragListBuilder a5((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder a6((jobject) NULL);
                JArray< ::java::lang::String > a7((jobject) NULL);
                JArray< ::java::lang::String > a8((jobject) NULL);
                ::org::apache::lucene::search::highlight::Encoder a9((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "kkIsIkk[s[sk", ::org::apache::lucene::search::vectorhighlight::FieldQuery::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::vectorhighlight::FragListBuilder::initializeClass, ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder::initializeClass, ::org::apache::lucene::search::highlight::Encoder::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9))
                {
                  OBJ_CALL(result = self->object.getBestFragment(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9));
                  return j2p(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getBestFragment", args);
            return NULL;
          }

          static PyObject *t_FastVectorHighlighter_getBestFragments(t_FastVectorHighlighter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 6:
              {
                ::org::apache::lucene::search::vectorhighlight::FieldQuery a0((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
                jint a2;
                ::java::lang::String a3((jobject) NULL);
                jint a4;
                jint a5;
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "kkIsII", ::org::apache::lucene::search::vectorhighlight::FieldQuery::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
                {
                  OBJ_CALL(result = self->object.getBestFragments(a0, a1, a2, a3, a4, a5));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
              break;
             case 11:
              {
                ::org::apache::lucene::search::vectorhighlight::FieldQuery a0((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
                jint a2;
                ::java::lang::String a3((jobject) NULL);
                jint a4;
                jint a5;
                ::org::apache::lucene::search::vectorhighlight::FragListBuilder a6((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder a7((jobject) NULL);
                JArray< ::java::lang::String > a8((jobject) NULL);
                JArray< ::java::lang::String > a9((jobject) NULL);
                ::org::apache::lucene::search::highlight::Encoder a10((jobject) NULL);
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "kkIsIIkk[s[sk", ::org::apache::lucene::search::vectorhighlight::FieldQuery::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::vectorhighlight::FragListBuilder::initializeClass, ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder::initializeClass, ::org::apache::lucene::search::highlight::Encoder::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10))
                {
                  OBJ_CALL(result = self->object.getBestFragments(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
              break;
             case 12:
              {
                ::org::apache::lucene::search::vectorhighlight::FieldQuery a0((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
                jint a2;
                ::java::lang::String a3((jobject) NULL);
                ::java::util::Set a4((jobject) NULL);
                PyTypeObject **p4;
                jint a5;
                jint a6;
                ::org::apache::lucene::search::vectorhighlight::FragListBuilder a7((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder a8((jobject) NULL);
                JArray< ::java::lang::String > a9((jobject) NULL);
                JArray< ::java::lang::String > a10((jobject) NULL);
                ::org::apache::lucene::search::highlight::Encoder a11((jobject) NULL);
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "kkIsKIIkk[s[sk", ::org::apache::lucene::search::vectorhighlight::FieldQuery::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, ::java::util::Set::initializeClass, ::org::apache::lucene::search::vectorhighlight::FragListBuilder::initializeClass, ::org::apache::lucene::search::vectorhighlight::FragmentsBuilder::initializeClass, ::org::apache::lucene::search::highlight::Encoder::initializeClass, &a0, &a1, &a2, &a3, &a4, &p4, ::java::util::t_Set::parameters_, &a5, &a6, &a7, &a8, &a9, &a10, &a11))
                {
                  OBJ_CALL(result = self->object.getBestFragments(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getBestFragments", args);
            return NULL;
          }

          static PyObject *t_FastVectorHighlighter_getFieldQuery(t_FastVectorHighlighter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldQuery result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.getFieldQuery(a0));
                  return ::org::apache::lucene::search::vectorhighlight::t_FieldQuery::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldQuery result((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.getFieldQuery(a0, a1));
                  return ::org::apache::lucene::search::vectorhighlight::t_FieldQuery::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getFieldQuery", args);
            return NULL;
          }

          static PyObject *t_FastVectorHighlighter_getPhraseLimit(t_FastVectorHighlighter *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getPhraseLimit());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FastVectorHighlighter_isFieldMatch(t_FastVectorHighlighter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isFieldMatch());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_FastVectorHighlighter_isPhraseHighlight(t_FastVectorHighlighter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isPhraseHighlight());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_FastVectorHighlighter_setPhraseLimit(t_FastVectorHighlighter *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setPhraseLimit(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPhraseLimit", arg);
            return NULL;
          }

          static PyObject *t_FastVectorHighlighter_get__fieldMatch(t_FastVectorHighlighter *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isFieldMatch());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_FastVectorHighlighter_get__phraseHighlight(t_FastVectorHighlighter *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isPhraseHighlight());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_FastVectorHighlighter_get__phraseLimit(t_FastVectorHighlighter *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getPhraseLimit());
            return PyInt_FromLong((long) value);
          }
          static int t_FastVectorHighlighter_set__phraseLimit(t_FastVectorHighlighter *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setPhraseLimit(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "phraseLimit", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/CharArrayMap$EntrySet.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/analysis/util/CharArrayMap$EntryIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *CharArrayMap$EntrySet::class$ = NULL;
          jmethodID *CharArrayMap$EntrySet::mids$ = NULL;
          bool CharArrayMap$EntrySet::live$ = false;

          jclass CharArrayMap$EntrySet::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/CharArrayMap$EntrySet");

              mids$ = new jmethodID[max_mid];
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_contains_290588e2] = env->getMethodID(cls, "contains", "(Ljava/lang/Object;)Z");
              mids$[mid_iterator_6e80333a] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/analysis/util/CharArrayMap$EntryIterator;");
              mids$[mid_remove_290588e2] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Z");
              mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void CharArrayMap$EntrySet::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          jboolean CharArrayMap$EntrySet::contains(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_contains_290588e2], a0.this$);
          }

          ::org::apache::lucene::analysis::util::CharArrayMap$EntryIterator CharArrayMap$EntrySet::iterator() const
          {
            return ::org::apache::lucene::analysis::util::CharArrayMap$EntryIterator(env->callObjectMethod(this$, mids$[mid_iterator_6e80333a]));
          }

          jboolean CharArrayMap$EntrySet::remove(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_remove_290588e2], a0.this$);
          }

          jint CharArrayMap$EntrySet::size() const
          {
            return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_CharArrayMap$EntrySet_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharArrayMap$EntrySet_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharArrayMap$EntrySet_of_(t_CharArrayMap$EntrySet *self, PyObject *args);
          static PyObject *t_CharArrayMap$EntrySet_clear(t_CharArrayMap$EntrySet *self, PyObject *args);
          static PyObject *t_CharArrayMap$EntrySet_contains(t_CharArrayMap$EntrySet *self, PyObject *args);
          static PyObject *t_CharArrayMap$EntrySet_iterator(t_CharArrayMap$EntrySet *self, PyObject *args);
          static PyObject *t_CharArrayMap$EntrySet_remove(t_CharArrayMap$EntrySet *self, PyObject *args);
          static PyObject *t_CharArrayMap$EntrySet_size(t_CharArrayMap$EntrySet *self, PyObject *args);
          static PyObject *t_CharArrayMap$EntrySet_get__parameters_(t_CharArrayMap$EntrySet *self, void *data);
          static PyGetSetDef t_CharArrayMap$EntrySet__fields_[] = {
            DECLARE_GET_FIELD(t_CharArrayMap$EntrySet, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CharArrayMap$EntrySet__methods_[] = {
            DECLARE_METHOD(t_CharArrayMap$EntrySet, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharArrayMap$EntrySet, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharArrayMap$EntrySet, of_, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap$EntrySet, clear, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap$EntrySet, contains, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap$EntrySet, iterator, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap$EntrySet, remove, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap$EntrySet, size, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CharArrayMap$EntrySet, t_CharArrayMap$EntrySet, ::java::util::AbstractSet, CharArrayMap$EntrySet, abstract_init, ((PyObject *(*)(t_CharArrayMap$EntrySet *)) get_generic_iterator< t_CharArrayMap$EntrySet >), 0, t_CharArrayMap$EntrySet__fields_, 0, 0);
          PyObject *t_CharArrayMap$EntrySet::wrap_Object(const CharArrayMap$EntrySet& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CharArrayMap$EntrySet::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CharArrayMap$EntrySet *self = (t_CharArrayMap$EntrySet *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_CharArrayMap$EntrySet::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CharArrayMap$EntrySet::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CharArrayMap$EntrySet *self = (t_CharArrayMap$EntrySet *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_CharArrayMap$EntrySet::install(PyObject *module)
          {
            installType(&PY_TYPE(CharArrayMap$EntrySet), module, "CharArrayMap$EntrySet", 0);
          }

          void t_CharArrayMap$EntrySet::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CharArrayMap$EntrySet).tp_dict, "class_", make_descriptor(CharArrayMap$EntrySet::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CharArrayMap$EntrySet).tp_dict, "wrapfn_", make_descriptor(t_CharArrayMap$EntrySet::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CharArrayMap$EntrySet).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CharArrayMap$EntrySet_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharArrayMap$EntrySet::initializeClass, 1)))
              return NULL;
            return t_CharArrayMap$EntrySet::wrap_Object(CharArrayMap$EntrySet(((t_CharArrayMap$EntrySet *) arg)->object.this$));
          }
          static PyObject *t_CharArrayMap$EntrySet_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharArrayMap$EntrySet::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CharArrayMap$EntrySet_of_(t_CharArrayMap$EntrySet *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_CharArrayMap$EntrySet_clear(t_CharArrayMap$EntrySet *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CharArrayMap$EntrySet), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_CharArrayMap$EntrySet_contains(t_CharArrayMap$EntrySet *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.contains(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(CharArrayMap$EntrySet), (PyObject *) self, "contains", args, 2);
          }

          static PyObject *t_CharArrayMap$EntrySet_iterator(t_CharArrayMap$EntrySet *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::util::CharArrayMap$EntryIterator result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.iterator());
              return ::org::apache::lucene::analysis::util::t_CharArrayMap$EntryIterator::wrap_Object(result, self->parameters[0]);
            }

            return callSuper(&PY_TYPE(CharArrayMap$EntrySet), (PyObject *) self, "iterator", args, 2);
          }

          static PyObject *t_CharArrayMap$EntrySet_remove(t_CharArrayMap$EntrySet *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.remove(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(CharArrayMap$EntrySet), (PyObject *) self, "remove", args, 2);
          }

          static PyObject *t_CharArrayMap$EntrySet_size(t_CharArrayMap$EntrySet *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.size());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(CharArrayMap$EntrySet), (PyObject *) self, "size", args, 2);
          }
          static PyObject *t_CharArrayMap$EntrySet_get__parameters_(t_CharArrayMap$EntrySet *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Sort.h"
#include "org/apache/lucene/search/Scorer.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/grouping/SearchGroup.h"
#include "org/apache/lucene/search/grouping/TopGroups.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *AbstractSecondPassGroupingCollector::class$ = NULL;
          jmethodID *AbstractSecondPassGroupingCollector::mids$ = NULL;
          bool AbstractSecondPassGroupingCollector::live$ = false;

          jclass AbstractSecondPassGroupingCollector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e70f2194] = env->getMethodID(cls, "<init>", "(Ljava/util/Collection;Lorg/apache/lucene/search/Sort;Lorg/apache/lucene/search/Sort;IZZZ)V");
              mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
              mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
              mids$[mid_getTopGroups_f6dd2ce2] = env->getMethodID(cls, "getTopGroups", "(I)Lorg/apache/lucene/search/grouping/TopGroups;");
              mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
              mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");
              mids$[mid_retrieveGroup_e4de8d52] = env->getMethodID(cls, "retrieveGroup", "(I)Lorg/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector$SearchGroupDocs;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AbstractSecondPassGroupingCollector::AbstractSecondPassGroupingCollector(const ::java::util::Collection & a0, const ::org::apache::lucene::search::Sort & a1, const ::org::apache::lucene::search::Sort & a2, jint a3, jboolean a4, jboolean a5, jboolean a6) : ::org::apache::lucene::search::Collector(env->newObject(initializeClass, &mids$, mid_init$_e70f2194, a0.this$, a1.this$, a2.this$, a3, a4, a5, a6)) {}

          jboolean AbstractSecondPassGroupingCollector::acceptsDocsOutOfOrder() const
          {
            return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
          }

          void AbstractSecondPassGroupingCollector::collect(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
          }

          ::org::apache::lucene::search::grouping::TopGroups AbstractSecondPassGroupingCollector::getTopGroups(jint a0) const
          {
            return ::org::apache::lucene::search::grouping::TopGroups(env->callObjectMethod(this$, mids$[mid_getTopGroups_f6dd2ce2], a0));
          }

          void AbstractSecondPassGroupingCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
          }

          void AbstractSecondPassGroupingCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_AbstractSecondPassGroupingCollector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractSecondPassGroupingCollector_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractSecondPassGroupingCollector_of_(t_AbstractSecondPassGroupingCollector *self, PyObject *args);
          static int t_AbstractSecondPassGroupingCollector_init_(t_AbstractSecondPassGroupingCollector *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AbstractSecondPassGroupingCollector_acceptsDocsOutOfOrder(t_AbstractSecondPassGroupingCollector *self, PyObject *args);
          static PyObject *t_AbstractSecondPassGroupingCollector_collect(t_AbstractSecondPassGroupingCollector *self, PyObject *args);
          static PyObject *t_AbstractSecondPassGroupingCollector_getTopGroups(t_AbstractSecondPassGroupingCollector *self, PyObject *arg);
          static PyObject *t_AbstractSecondPassGroupingCollector_setNextReader(t_AbstractSecondPassGroupingCollector *self, PyObject *args);
          static PyObject *t_AbstractSecondPassGroupingCollector_setScorer(t_AbstractSecondPassGroupingCollector *self, PyObject *args);
          static int t_AbstractSecondPassGroupingCollector_set__nextReader(t_AbstractSecondPassGroupingCollector *self, PyObject *arg, void *data);
          static int t_AbstractSecondPassGroupingCollector_set__scorer(t_AbstractSecondPassGroupingCollector *self, PyObject *arg, void *data);
          static PyObject *t_AbstractSecondPassGroupingCollector_get__parameters_(t_AbstractSecondPassGroupingCollector *self, void *data);
          static PyGetSetDef t_AbstractSecondPassGroupingCollector__fields_[] = {
            DECLARE_SET_FIELD(t_AbstractSecondPassGroupingCollector, nextReader),
            DECLARE_SET_FIELD(t_AbstractSecondPassGroupingCollector, scorer),
            DECLARE_GET_FIELD(t_AbstractSecondPassGroupingCollector, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AbstractSecondPassGroupingCollector__methods_[] = {
            DECLARE_METHOD(t_AbstractSecondPassGroupingCollector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractSecondPassGroupingCollector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractSecondPassGroupingCollector, of_, METH_VARARGS),
            DECLARE_METHOD(t_AbstractSecondPassGroupingCollector, acceptsDocsOutOfOrder, METH_VARARGS),
            DECLARE_METHOD(t_AbstractSecondPassGroupingCollector, collect, METH_VARARGS),
            DECLARE_METHOD(t_AbstractSecondPassGroupingCollector, getTopGroups, METH_O),
            DECLARE_METHOD(t_AbstractSecondPassGroupingCollector, setNextReader, METH_VARARGS),
            DECLARE_METHOD(t_AbstractSecondPassGroupingCollector, setScorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractSecondPassGroupingCollector, t_AbstractSecondPassGroupingCollector, ::org::apache::lucene::search::Collector, AbstractSecondPassGroupingCollector, t_AbstractSecondPassGroupingCollector_init_, 0, 0, t_AbstractSecondPassGroupingCollector__fields_, 0, 0);
          PyObject *t_AbstractSecondPassGroupingCollector::wrap_Object(const AbstractSecondPassGroupingCollector& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractSecondPassGroupingCollector::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractSecondPassGroupingCollector *self = (t_AbstractSecondPassGroupingCollector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_AbstractSecondPassGroupingCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractSecondPassGroupingCollector::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractSecondPassGroupingCollector *self = (t_AbstractSecondPassGroupingCollector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_AbstractSecondPassGroupingCollector::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractSecondPassGroupingCollector), module, "AbstractSecondPassGroupingCollector", 0);
          }

          void t_AbstractSecondPassGroupingCollector::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractSecondPassGroupingCollector).tp_dict, "class_", make_descriptor(AbstractSecondPassGroupingCollector::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractSecondPassGroupingCollector).tp_dict, "wrapfn_", make_descriptor(t_AbstractSecondPassGroupingCollector::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractSecondPassGroupingCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractSecondPassGroupingCollector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractSecondPassGroupingCollector::initializeClass, 1)))
              return NULL;
            return t_AbstractSecondPassGroupingCollector::wrap_Object(AbstractSecondPassGroupingCollector(((t_AbstractSecondPassGroupingCollector *) arg)->object.this$));
          }
          static PyObject *t_AbstractSecondPassGroupingCollector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractSecondPassGroupingCollector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AbstractSecondPassGroupingCollector_of_(t_AbstractSecondPassGroupingCollector *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_AbstractSecondPassGroupingCollector_init_(t_AbstractSecondPassGroupingCollector *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Collection a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::search::Sort a1((jobject) NULL);
            ::org::apache::lucene::search::Sort a2((jobject) NULL);
            jint a3;
            jboolean a4;
            jboolean a5;
            jboolean a6;
            AbstractSecondPassGroupingCollector object((jobject) NULL);

            if (!parseArgs(args, "KkkIZZZ", ::java::util::Collection::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1, &a2, &a3, &a4, &a5, &a6))
            {
              INT_CALL(object = AbstractSecondPassGroupingCollector(a0, a1, a2, a3, a4, a5, a6));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_AbstractSecondPassGroupingCollector_acceptsDocsOutOfOrder(t_AbstractSecondPassGroupingCollector *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(AbstractSecondPassGroupingCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
          }

          static PyObject *t_AbstractSecondPassGroupingCollector_collect(t_AbstractSecondPassGroupingCollector *self, PyObject *args)
          {
            jint a0;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(self->object.collect(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(AbstractSecondPassGroupingCollector), (PyObject *) self, "collect", args, 2);
          }

          static PyObject *t_AbstractSecondPassGroupingCollector_getTopGroups(t_AbstractSecondPassGroupingCollector *self, PyObject *arg)
          {
            jint a0;
            ::org::apache::lucene::search::grouping::TopGroups result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.getTopGroups(a0));
              return ::org::apache::lucene::search::grouping::t_TopGroups::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "getTopGroups", arg);
            return NULL;
          }

          static PyObject *t_AbstractSecondPassGroupingCollector_setNextReader(t_AbstractSecondPassGroupingCollector *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setNextReader(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(AbstractSecondPassGroupingCollector), (PyObject *) self, "setNextReader", args, 2);
          }

          static PyObject *t_AbstractSecondPassGroupingCollector_setScorer(t_AbstractSecondPassGroupingCollector *self, PyObject *args)
          {
            ::org::apache::lucene::search::Scorer a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setScorer(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(AbstractSecondPassGroupingCollector), (PyObject *) self, "setScorer", args, 2);
          }
          static PyObject *t_AbstractSecondPassGroupingCollector_get__parameters_(t_AbstractSecondPassGroupingCollector *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static int t_AbstractSecondPassGroupingCollector_set__nextReader(t_AbstractSecondPassGroupingCollector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
              {
                INT_CALL(self->object.setNextReader(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
            return -1;
          }

          static int t_AbstractSecondPassGroupingCollector_set__scorer(t_AbstractSecondPassGroupingCollector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::Scorer value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
              {
                INT_CALL(self->object.setScorer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "scorer", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/jaspell/JaspellLookup.h"
#include "java/util/Set.h"
#include "java/lang/CharSequence.h"
#include "java/util/List.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupResult.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace jaspell {

            ::java::lang::Class *JaspellLookup::class$ = NULL;
            jmethodID *JaspellLookup::mids$ = NULL;
            bool JaspellLookup::live$ = false;

            jclass JaspellLookup::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/jaspell/JaspellLookup");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_add_cb8bea96] = env->getMethodID(cls, "add", "(Ljava/lang/CharSequence;Ljava/lang/Object;)Z");
                mids$[mid_build_1754a234] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/search/suggest/InputIterator;)V");
                mids$[mid_get_a739ccff] = env->getMethodID(cls, "get", "(Ljava/lang/CharSequence;)Ljava/lang/Object;");
                mids$[mid_getCount_54c6a17a] = env->getMethodID(cls, "getCount", "()J");
                mids$[mid_load_f5d6a55d] = env->getMethodID(cls, "load", "(Lorg/apache/lucene/store/DataInput;)Z");
                mids$[mid_lookup_dd3e9f51] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;ZI)Ljava/util/List;");
                mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
                mids$[mid_store_27875f5b] = env->getMethodID(cls, "store", "(Lorg/apache/lucene/store/DataOutput;)Z");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            JaspellLookup::JaspellLookup() : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            jboolean JaspellLookup::add(const ::java::lang::CharSequence & a0, const ::java::lang::Object & a1) const
            {
              return env->callBooleanMethod(this$, mids$[mid_add_cb8bea96], a0.this$, a1.this$);
            }

            void JaspellLookup::build(const ::org::apache::lucene::search::suggest::InputIterator & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_build_1754a234], a0.this$);
            }

            ::java::lang::Object JaspellLookup::get(const ::java::lang::CharSequence & a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_a739ccff], a0.this$));
            }

            jlong JaspellLookup::getCount() const
            {
              return env->callLongMethod(this$, mids$[mid_getCount_54c6a17a]);
            }

            jboolean JaspellLookup::load(const ::org::apache::lucene::store::DataInput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_load_f5d6a55d], a0.this$);
            }

            ::java::util::List JaspellLookup::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jboolean a2, jint a3) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_dd3e9f51], a0.this$, a1.this$, a2, a3));
            }

            jlong JaspellLookup::ramBytesUsed() const
            {
              return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
            }

            jboolean JaspellLookup::store(const ::org::apache::lucene::store::DataOutput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_store_27875f5b], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace jaspell {
            static PyObject *t_JaspellLookup_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_JaspellLookup_instance_(PyTypeObject *type, PyObject *arg);
            static int t_JaspellLookup_init_(t_JaspellLookup *self, PyObject *args, PyObject *kwds);
            static PyObject *t_JaspellLookup_add(t_JaspellLookup *self, PyObject *args);
            static PyObject *t_JaspellLookup_build(t_JaspellLookup *self, PyObject *args);
            static PyObject *t_JaspellLookup_get(t_JaspellLookup *self, PyObject *arg);
            static PyObject *t_JaspellLookup_getCount(t_JaspellLookup *self, PyObject *args);
            static PyObject *t_JaspellLookup_load(t_JaspellLookup *self, PyObject *args);
            static PyObject *t_JaspellLookup_lookup(t_JaspellLookup *self, PyObject *args);
            static PyObject *t_JaspellLookup_ramBytesUsed(t_JaspellLookup *self, PyObject *args);
            static PyObject *t_JaspellLookup_store(t_JaspellLookup *self, PyObject *args);
            static PyObject *t_JaspellLookup_get__count(t_JaspellLookup *self, void *data);
            static PyGetSetDef t_JaspellLookup__fields_[] = {
              DECLARE_GET_FIELD(t_JaspellLookup, count),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_JaspellLookup__methods_[] = {
              DECLARE_METHOD(t_JaspellLookup, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_JaspellLookup, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_JaspellLookup, add, METH_VARARGS),
              DECLARE_METHOD(t_JaspellLookup, build, METH_VARARGS),
              DECLARE_METHOD(t_JaspellLookup, get, METH_O),
              DECLARE_METHOD(t_JaspellLookup, getCount, METH_VARARGS),
              DECLARE_METHOD(t_JaspellLookup, load, METH_VARARGS),
              DECLARE_METHOD(t_JaspellLookup, lookup, METH_VARARGS),
              DECLARE_METHOD(t_JaspellLookup, ramBytesUsed, METH_VARARGS),
              DECLARE_METHOD(t_JaspellLookup, store, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(JaspellLookup, t_JaspellLookup, ::org::apache::lucene::search::suggest::Lookup, JaspellLookup, t_JaspellLookup_init_, 0, 0, t_JaspellLookup__fields_, 0, 0);

            void t_JaspellLookup::install(PyObject *module)
            {
              installType(&PY_TYPE(JaspellLookup), module, "JaspellLookup", 0);
            }

            void t_JaspellLookup::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(JaspellLookup).tp_dict, "class_", make_descriptor(JaspellLookup::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(JaspellLookup).tp_dict, "wrapfn_", make_descriptor(t_JaspellLookup::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(JaspellLookup).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_JaspellLookup_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, JaspellLookup::initializeClass, 1)))
                return NULL;
              return t_JaspellLookup::wrap_Object(JaspellLookup(((t_JaspellLookup *) arg)->object.this$));
            }
            static PyObject *t_JaspellLookup_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, JaspellLookup::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_JaspellLookup_init_(t_JaspellLookup *self, PyObject *args, PyObject *kwds)
            {
              JaspellLookup object((jobject) NULL);

              INT_CALL(object = JaspellLookup());
              self->object = object;

              return 0;
            }

            static PyObject *t_JaspellLookup_add(t_JaspellLookup *self, PyObject *args)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::lang::Object a1((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "Oo", &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
              {
                OBJ_CALL(result = self->object.add(a0, a1));
                Py_RETURN_BOOL(result);
              }

              PyErr_SetArgsError((PyObject *) self, "add", args);
              return NULL;
            }

            static PyObject *t_JaspellLookup_build(t_JaspellLookup *self, PyObject *args)
            {
              ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0))
              {
                OBJ_CALL(self->object.build(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(JaspellLookup), (PyObject *) self, "build", args, 2);
            }

            static PyObject *t_JaspellLookup_get(t_JaspellLookup *self, PyObject *arg)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::lang::Object result((jobject) NULL);

              if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_JaspellLookup_getCount(t_JaspellLookup *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getCount());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(JaspellLookup), (PyObject *) self, "getCount", args, 2);
            }

            static PyObject *t_JaspellLookup_load(t_JaspellLookup *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataInput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.load(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(JaspellLookup), (PyObject *) self, "load", args, 2);
            }

            static PyObject *t_JaspellLookup_lookup(t_JaspellLookup *self, PyObject *args)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::util::Set a1((jobject) NULL);
              PyTypeObject **p1;
              jboolean a2;
              jint a3;
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, "OKZI", &::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3))
              {
                OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3));
                return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
              }

              return callSuper(&PY_TYPE(JaspellLookup), (PyObject *) self, "lookup", args, 2);
            }

            static PyObject *t_JaspellLookup_ramBytesUsed(t_JaspellLookup *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.ramBytesUsed());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(JaspellLookup), (PyObject *) self, "ramBytesUsed", args, 2);
            }

            static PyObject *t_JaspellLookup_store(t_JaspellLookup *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.store(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(JaspellLookup), (PyObject *) self, "store", args, 2);
            }

            static PyObject *t_JaspellLookup_get__count(t_JaspellLookup *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object.getCount());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/ItalianStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *ItalianStemmer::class$ = NULL;
        jmethodID *ItalianStemmer::mids$ = NULL;
        bool ItalianStemmer::live$ = false;

        jclass ItalianStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/ItalianStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ItalianStemmer::ItalianStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean ItalianStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint ItalianStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean ItalianStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_ItalianStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ItalianStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ItalianStemmer_init_(t_ItalianStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ItalianStemmer_equals(t_ItalianStemmer *self, PyObject *args);
        static PyObject *t_ItalianStemmer_hashCode(t_ItalianStemmer *self, PyObject *args);
        static PyObject *t_ItalianStemmer_stem(t_ItalianStemmer *self, PyObject *args);

        static PyMethodDef t_ItalianStemmer__methods_[] = {
          DECLARE_METHOD(t_ItalianStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ItalianStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ItalianStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_ItalianStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_ItalianStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ItalianStemmer, t_ItalianStemmer, ::org::tartarus::snowball::SnowballProgram, ItalianStemmer, t_ItalianStemmer_init_, 0, 0, 0, 0, 0);

        void t_ItalianStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(ItalianStemmer), module, "ItalianStemmer", 0);
        }

        void t_ItalianStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ItalianStemmer).tp_dict, "class_", make_descriptor(ItalianStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ItalianStemmer).tp_dict, "wrapfn_", make_descriptor(t_ItalianStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ItalianStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ItalianStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ItalianStemmer::initializeClass, 1)))
            return NULL;
          return t_ItalianStemmer::wrap_Object(ItalianStemmer(((t_ItalianStemmer *) arg)->object.this$));
        }
        static PyObject *t_ItalianStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ItalianStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ItalianStemmer_init_(t_ItalianStemmer *self, PyObject *args, PyObject *kwds)
        {
          ItalianStemmer object((jobject) NULL);

          INT_CALL(object = ItalianStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_ItalianStemmer_equals(t_ItalianStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(ItalianStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_ItalianStemmer_hashCode(t_ItalianStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(ItalianStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_ItalianStemmer_stem(t_ItalianStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(ItalianStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$Longs.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$Longs::class$ = NULL;
        jmethodID *FieldCache$Longs::mids$ = NULL;
        bool FieldCache$Longs::live$ = false;
        FieldCache$Longs *FieldCache$Longs::EMPTY = NULL;

        jclass FieldCache$Longs::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$Longs");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_get_39c7bd20] = env->getMethodID(cls, "get", "(I)J");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY = new FieldCache$Longs(env->getStaticObjectField(cls, "EMPTY", "Lorg/apache/lucene/search/FieldCache$Longs;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldCache$Longs::FieldCache$Longs() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jlong FieldCache$Longs::get(jint a0) const
        {
          return env->callLongMethod(this$, mids$[mid_get_39c7bd20], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$Longs_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$Longs_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldCache$Longs_init_(t_FieldCache$Longs *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldCache$Longs_get(t_FieldCache$Longs *self, PyObject *arg);

        static PyMethodDef t_FieldCache$Longs__methods_[] = {
          DECLARE_METHOD(t_FieldCache$Longs, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$Longs, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$Longs, get, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$Longs, t_FieldCache$Longs, ::java::lang::Object, FieldCache$Longs, t_FieldCache$Longs_init_, 0, 0, 0, 0, 0);

        void t_FieldCache$Longs::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$Longs), module, "FieldCache$Longs", 0);
        }

        void t_FieldCache$Longs::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$Longs).tp_dict, "class_", make_descriptor(FieldCache$Longs::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$Longs).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$Longs::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$Longs).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FieldCache$Longs::initializeClass);
          PyDict_SetItemString(PY_TYPE(FieldCache$Longs).tp_dict, "EMPTY", make_descriptor(t_FieldCache$Longs::wrap_Object(*FieldCache$Longs::EMPTY)));
        }

        static PyObject *t_FieldCache$Longs_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$Longs::initializeClass, 1)))
            return NULL;
          return t_FieldCache$Longs::wrap_Object(FieldCache$Longs(((t_FieldCache$Longs *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$Longs_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$Longs::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldCache$Longs_init_(t_FieldCache$Longs *self, PyObject *args, PyObject *kwds)
        {
          FieldCache$Longs object((jobject) NULL);

          INT_CALL(object = FieldCache$Longs());
          self->object = object;

          return 0;
        }

        static PyObject *t_FieldCache$Longs_get(t_FieldCache$Longs *self, PyObject *arg)
        {
          jint a0;
          jlong result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/util/PythonList.h"
#include "java/util/ListIterator.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "java/lang/Throwable.h"
#include "java/util/Collection.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/util/Iterator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {

        ::java::lang::Class *PythonList::class$ = NULL;
        jmethodID *PythonList::mids$ = NULL;
        bool PythonList::live$ = false;

        jclass PythonList::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/util/PythonList");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_290588e2] = env->getMethodID(cls, "add", "(Ljava/lang/Object;)Z");
            mids$[mid_add_f7cd74a4] = env->getMethodID(cls, "add", "(ILjava/lang/Object;)V");
            mids$[mid_addAll_9bfb3701] = env->getMethodID(cls, "addAll", "(Ljava/util/Collection;)Z");
            mids$[mid_addAll_006cd2b7] = env->getMethodID(cls, "addAll", "(ILjava/util/Collection;)Z");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_contains_290588e2] = env->getMethodID(cls, "contains", "(Ljava/lang/Object;)Z");
            mids$[mid_containsAll_9bfb3701] = env->getMethodID(cls, "containsAll", "(Ljava/util/Collection;)Z");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_get_29be6a55] = env->getMethodID(cls, "get", "(I)Ljava/lang/Object;");
            mids$[mid_indexOf_290588f1] = env->getMethodID(cls, "indexOf", "(Ljava/lang/Object;)I");
            mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
            mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_lastIndexOf_290588f1] = env->getMethodID(cls, "lastIndexOf", "(Ljava/lang/Object;)I");
            mids$[mid_listIterator_b5be4e14] = env->getMethodID(cls, "listIterator", "()Ljava/util/ListIterator;");
            mids$[mid_listIterator_4145ee6a] = env->getMethodID(cls, "listIterator", "(I)Ljava/util/ListIterator;");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_remove_29be6a55] = env->getMethodID(cls, "remove", "(I)Ljava/lang/Object;");
            mids$[mid_remove_290588e2] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Z");
            mids$[mid_removeAll_9bfb3701] = env->getMethodID(cls, "removeAll", "(Ljava/util/Collection;)Z");
            mids$[mid_retainAll_9bfb3701] = env->getMethodID(cls, "retainAll", "(Ljava/util/Collection;)Z");
            mids$[mid_set_211591b1] = env->getMethodID(cls, "set", "(ILjava/lang/Object;)Ljava/lang/Object;");
            mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
            mids$[mid_subList_6bc635fe] = env->getMethodID(cls, "subList", "(II)Ljava/util/List;");
            mids$[mid_toArray_94e49c77] = env->getMethodID(cls, "toArray", "()[Ljava/lang/Object;");
            mids$[mid_toArray_ae67dbcf] = env->getMethodID(cls, "toArray", "([Ljava/lang/Object;)[Ljava/lang/Object;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonList::PythonList() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean PythonList::equals(const ::java::lang::Object & a0) const
        {
          return env->callNonvirtualBooleanMethod(this$, (jclass) ::java::lang::Object::class$->this$, ::java::lang::Object::mids$[::java::lang::Object::mid_equals_290588e2], a0.this$);
        }

        void PythonList::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        ::java::util::ListIterator PythonList::listIterator() const
        {
          return ::java::util::ListIterator(env->callObjectMethod(this$, mids$[mid_listIterator_b5be4e14]));
        }

        jlong PythonList::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonList::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }

        ::java::lang::Object PythonList::remove(jint a0) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_remove_29be6a55], a0));
        }

        jboolean PythonList::remove(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_remove_290588e2], a0.this$);
        }

        ::java::util::List PythonList::subList(jint a0, jint a1) const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_subList_6bc635fe], a0, a1));
        }

        JArray< ::java::lang::Object > PythonList::toArray(const JArray< ::java::lang::Object > & a0) const
        {
          return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_toArray_ae67dbcf], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {
        static PyObject *t_PythonList_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonList_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonList_init_(t_PythonList *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonList_equals(t_PythonList *self, PyObject *args);
        static PyObject *t_PythonList_finalize(t_PythonList *self);
        static PyObject *t_PythonList_listIterator(t_PythonList *self);
        static PyObject *t_PythonList_pythonExtension(t_PythonList *self, PyObject *args);
        static PyObject *t_PythonList_remove(t_PythonList *self, PyObject *args);
        static PyObject *t_PythonList_subList(t_PythonList *self, PyObject *args);
        static PyObject *t_PythonList_toArray(t_PythonList *self, PyObject *arg);
        static jboolean JNICALL t_PythonList_add0(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonList_add1(JNIEnv *jenv, jobject jobj, jint a0, jobject a1);
        static jboolean JNICALL t_PythonList_addAll2(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonList_addAll3(JNIEnv *jenv, jobject jobj, jint a0, jobject a1);
        static void JNICALL t_PythonList_clear4(JNIEnv *jenv, jobject jobj);
        static jboolean JNICALL t_PythonList_contains5(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonList_containsAll6(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonList_equals7(JNIEnv *jenv, jobject jobj, jobject a0);
        static jobject JNICALL t_PythonList_get8(JNIEnv *jenv, jobject jobj, jint a0);
        static jint JNICALL t_PythonList_indexOf9(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonList_isEmpty10(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonList_iterator11(JNIEnv *jenv, jobject jobj);
        static jint JNICALL t_PythonList_lastIndexOf12(JNIEnv *jenv, jobject jobj, jobject a0);
        static jobject JNICALL t_PythonList_listIterator13(JNIEnv *jenv, jobject jobj, jint a0);
        static void JNICALL t_PythonList_pythonDecRef14(JNIEnv *jenv, jobject jobj);
        static jboolean JNICALL t_PythonList_removeAll15(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonList_retainAll16(JNIEnv *jenv, jobject jobj, jobject a0);
        static jobject JNICALL t_PythonList_set17(JNIEnv *jenv, jobject jobj, jint a0, jobject a1);
        static jint JNICALL t_PythonList_size18(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonList_toArray19(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonList_get__self(t_PythonList *self, void *data);
        static PyGetSetDef t_PythonList__fields_[] = {
          DECLARE_GET_FIELD(t_PythonList, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonList__methods_[] = {
          DECLARE_METHOD(t_PythonList, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonList, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonList, equals, METH_VARARGS),
          DECLARE_METHOD(t_PythonList, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonList, listIterator, METH_NOARGS),
          DECLARE_METHOD(t_PythonList, pythonExtension, METH_VARARGS),
          DECLARE_METHOD(t_PythonList, remove, METH_VARARGS),
          DECLARE_METHOD(t_PythonList, subList, METH_VARARGS),
          DECLARE_METHOD(t_PythonList, toArray, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonList, t_PythonList, ::java::lang::Object, PythonList, t_PythonList_init_, get_extension_iterator, 0, t_PythonList__fields_, 0, 0);

        void t_PythonList::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonList), module, "PythonList", 1);
        }

        void t_PythonList::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonList).tp_dict, "class_", make_descriptor(PythonList::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonList).tp_dict, "wrapfn_", make_descriptor(t_PythonList::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonList).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonList::initializeClass);
          JNINativeMethod methods[] = {
            { "add", "(Ljava/lang/Object;)Z", (void *) t_PythonList_add0 },
            { "add", "(ILjava/lang/Object;)V", (void *) t_PythonList_add1 },
            { "addAll", "(Ljava/util/Collection;)Z", (void *) t_PythonList_addAll2 },
            { "addAll", "(ILjava/util/Collection;)Z", (void *) t_PythonList_addAll3 },
            { "clear", "()V", (void *) t_PythonList_clear4 },
            { "contains", "(Ljava/lang/Object;)Z", (void *) t_PythonList_contains5 },
            { "containsAll", "(Ljava/util/Collection;)Z", (void *) t_PythonList_containsAll6 },
            { "equals", "(Ljava/lang/Object;)Z", (void *) t_PythonList_equals7 },
            { "get", "(I)Ljava/lang/Object;", (void *) t_PythonList_get8 },
            { "indexOf", "(Ljava/lang/Object;)I", (void *) t_PythonList_indexOf9 },
            { "isEmpty", "()Z", (void *) t_PythonList_isEmpty10 },
            { "iterator", "()Ljava/util/Iterator;", (void *) t_PythonList_iterator11 },
            { "lastIndexOf", "(Ljava/lang/Object;)I", (void *) t_PythonList_lastIndexOf12 },
            { "listIterator", "(I)Ljava/util/ListIterator;", (void *) t_PythonList_listIterator13 },
            { "pythonDecRef", "()V", (void *) t_PythonList_pythonDecRef14 },
            { "removeAll", "(Ljava/util/Collection;)Z", (void *) t_PythonList_removeAll15 },
            { "retainAll", "(Ljava/util/Collection;)Z", (void *) t_PythonList_retainAll16 },
            { "set", "(ILjava/lang/Object;)Ljava/lang/Object;", (void *) t_PythonList_set17 },
            { "size", "()I", (void *) t_PythonList_size18 },
            { "toArray", "()[Ljava/lang/Object;", (void *) t_PythonList_toArray19 },
          };
          env->registerNatives(cls, methods, 20);
        }

        static PyObject *t_PythonList_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonList::initializeClass, 1)))
            return NULL;
          return t_PythonList::wrap_Object(PythonList(((t_PythonList *) arg)->object.this$));
        }
        static PyObject *t_PythonList_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonList::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonList_init_(t_PythonList *self, PyObject *args, PyObject *kwds)
        {
          PythonList object((jobject) NULL);

          INT_CALL(object = PythonList());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonList_equals(t_PythonList *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(PythonList), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_PythonList_finalize(t_PythonList *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonList_listIterator(t_PythonList *self)
        {
          ::java::util::ListIterator result((jobject) NULL);
          OBJ_CALL(result = self->object.listIterator());
          return ::java::util::t_ListIterator::wrap_Object(result);
        }

        static PyObject *t_PythonList_pythonExtension(t_PythonList *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static PyObject *t_PythonList_remove(t_PythonList *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.remove(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }
            }
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.remove(a0));
                Py_RETURN_BOOL(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "remove", args);
          return NULL;
        }

        static PyObject *t_PythonList_subList(t_PythonList *self, PyObject *args)
        {
          jint a0;
          jint a1;
          ::java::util::List result((jobject) NULL);

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.subList(a0, a1));
            return ::java::util::t_List::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "subList", args);
          return NULL;
        }

        static PyObject *t_PythonList_toArray(t_PythonList *self, PyObject *arg)
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          JArray< ::java::lang::Object > result((jobject) NULL);

          if (!parseArg(arg, "[o", &a0))
          {
            OBJ_CALL(result = self->object.toArray(a0));
            return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
          }

          PyErr_SetArgsError((PyObject *) self, "toArray", arg);
          return NULL;
        }

        static jboolean JNICALL t_PythonList_add0(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "add", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("add", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static void JNICALL t_PythonList_add1(JNIEnv *jenv, jobject jobj, jint a0, jobject a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o1 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a1));
          PyObject *result = PyObject_CallMethod(obj, "add", "iO", (int) a0, o1);
          Py_DECREF(o1);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jboolean JNICALL t_PythonList_addAll2(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::util::t_Collection::wrap_Object(::java::util::Collection(a0));
          PyObject *result = PyObject_CallMethod(obj, "addAll", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("addAll", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jboolean JNICALL t_PythonList_addAll3(JNIEnv *jenv, jobject jobj, jint a0, jobject a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o1 = ::java::util::t_Collection::wrap_Object(::java::util::Collection(a1));
          PyObject *result = PyObject_CallMethod(obj, "addAll", "iO", (int) a0, o1);
          Py_DECREF(o1);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("addAll", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static void JNICALL t_PythonList_clear4(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "clear", "");
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jboolean JNICALL t_PythonList_contains5(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "contains", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("contains", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jboolean JNICALL t_PythonList_containsAll6(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::util::t_Collection::wrap_Object(::java::util::Collection(a0));
          PyObject *result = PyObject_CallMethod(obj, "containsAll", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("containsAll", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jboolean JNICALL t_PythonList_equals7(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "equals", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("equals", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jobject JNICALL t_PythonList_get8(JNIEnv *jenv, jobject jobj, jint a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::java::lang::Object value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "get", "i", (int) a0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "o", &value))
          {
            throwTypeError("get", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static jint JNICALL t_PythonList_indexOf9(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jint value;
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "indexOf", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "I", &value))
          {
            throwTypeError("indexOf", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jint) 0;
        }

        static jboolean JNICALL t_PythonList_isEmpty10(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *result = PyObject_CallMethod(obj, "isEmpty", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("isEmpty", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jobject JNICALL t_PythonList_iterator11(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::java::util::Iterator value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "iterator", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::java::util::Iterator::initializeClass, &value))
          {
            throwTypeError("iterator", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static jint JNICALL t_PythonList_lastIndexOf12(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jint value;
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "lastIndexOf", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "I", &value))
          {
            throwTypeError("lastIndexOf", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jint) 0;
        }

        static jobject JNICALL t_PythonList_listIterator13(JNIEnv *jenv, jobject jobj, jint a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::java::util::ListIterator value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "listIterator", "i", (int) a0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::java::util::ListIterator::initializeClass, &value))
          {
            throwTypeError("listIterator", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static void JNICALL t_PythonList_pythonDecRef14(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static jboolean JNICALL t_PythonList_removeAll15(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::util::t_Collection::wrap_Object(::java::util::Collection(a0));
          PyObject *result = PyObject_CallMethod(obj, "removeAll", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("removeAll", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jboolean JNICALL t_PythonList_retainAll16(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::util::t_Collection::wrap_Object(::java::util::Collection(a0));
          PyObject *result = PyObject_CallMethod(obj, "retainAll", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("retainAll", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jobject JNICALL t_PythonList_set17(JNIEnv *jenv, jobject jobj, jint a0, jobject a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::java::lang::Object value((jobject) NULL);
          PyObject *o1 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a1));
          PyObject *result = PyObject_CallMethod(obj, "set", "iO", (int) a0, o1);
          Py_DECREF(o1);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "o", &value))
          {
            throwTypeError("set", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static jint JNICALL t_PythonList_size18(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jint value;
          PyObject *result = PyObject_CallMethod(obj, "size", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "I", &value))
          {
            throwTypeError("size", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jint) 0;
        }

        static jobject JNICALL t_PythonList_toArray19(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          JArray< ::java::lang::Object > value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "toArray", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "[o", &value))
          {
            throwTypeError("toArray", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static PyObject *t_PythonList_get__self(t_PythonList *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/MultiTrie2.h"
#include "java/io/DataOutput.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/egothor/stemmer/Reduce.h"
#include "org/egothor/stemmer/Trie.h"
#include "java/io/DataInput.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *MultiTrie2::class$ = NULL;
      jmethodID *MultiTrie2::mids$ = NULL;
      bool MultiTrie2::live$ = false;

      jclass MultiTrie2::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/MultiTrie2");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_e051d6a6] = env->getMethodID(cls, "<init>", "(Ljava/io/DataInput;)V");
          mids$[mid_init$_bb0c767f] = env->getMethodID(cls, "<init>", "(Z)V");
          mids$[mid_add_db1d05ae] = env->getMethodID(cls, "add", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)V");
          mids$[mid_decompose_2fa560b3] = env->getMethodID(cls, "decompose", "(Ljava/lang/CharSequence;)[Ljava/lang/CharSequence;");
          mids$[mid_getFully_856f5013] = env->getMethodID(cls, "getFully", "(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;");
          mids$[mid_getLastOnPath_856f5013] = env->getMethodID(cls, "getLastOnPath", "(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;");
          mids$[mid_reduce_6ee87cd1] = env->getMethodID(cls, "reduce", "(Lorg/egothor/stemmer/Reduce;)Lorg/egothor/stemmer/Trie;");
          mids$[mid_store_cfb051e6] = env->getMethodID(cls, "store", "(Ljava/io/DataOutput;)V");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      MultiTrie2::MultiTrie2(const ::java::io::DataInput & a0) : ::org::egothor::stemmer::MultiTrie(env->newObject(initializeClass, &mids$, mid_init$_e051d6a6, a0.this$)) {}

      MultiTrie2::MultiTrie2(jboolean a0) : ::org::egothor::stemmer::MultiTrie(env->newObject(initializeClass, &mids$, mid_init$_bb0c767f, a0)) {}

      void MultiTrie2::add(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1) const
      {
        env->callVoidMethod(this$, mids$[mid_add_db1d05ae], a0.this$, a1.this$);
      }

      JArray< ::java::lang::CharSequence > MultiTrie2::decompose(const ::java::lang::CharSequence & a0) const
      {
        return JArray< ::java::lang::CharSequence >(env->callObjectMethod(this$, mids$[mid_decompose_2fa560b3], a0.this$));
      }

      ::java::lang::CharSequence MultiTrie2::getFully(const ::java::lang::CharSequence & a0) const
      {
        return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getFully_856f5013], a0.this$));
      }

      ::java::lang::CharSequence MultiTrie2::getLastOnPath(const ::java::lang::CharSequence & a0) const
      {
        return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getLastOnPath_856f5013], a0.this$));
      }

      ::org::egothor::stemmer::Trie MultiTrie2::reduce(const ::org::egothor::stemmer::Reduce & a0) const
      {
        return ::org::egothor::stemmer::Trie(env->callObjectMethod(this$, mids$[mid_reduce_6ee87cd1], a0.this$));
      }

      void MultiTrie2::store(const ::java::io::DataOutput & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_store_cfb051e6], a0.this$);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_MultiTrie2_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_MultiTrie2_instance_(PyTypeObject *type, PyObject *arg);
      static int t_MultiTrie2_init_(t_MultiTrie2 *self, PyObject *args, PyObject *kwds);
      static PyObject *t_MultiTrie2_add(t_MultiTrie2 *self, PyObject *args);
      static PyObject *t_MultiTrie2_decompose(t_MultiTrie2 *self, PyObject *arg);
      static PyObject *t_MultiTrie2_getFully(t_MultiTrie2 *self, PyObject *args);
      static PyObject *t_MultiTrie2_getLastOnPath(t_MultiTrie2 *self, PyObject *args);
      static PyObject *t_MultiTrie2_reduce(t_MultiTrie2 *self, PyObject *args);
      static PyObject *t_MultiTrie2_store(t_MultiTrie2 *self, PyObject *args);

      static PyMethodDef t_MultiTrie2__methods_[] = {
        DECLARE_METHOD(t_MultiTrie2, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_MultiTrie2, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_MultiTrie2, add, METH_VARARGS),
        DECLARE_METHOD(t_MultiTrie2, decompose, METH_O),
        DECLARE_METHOD(t_MultiTrie2, getFully, METH_VARARGS),
        DECLARE_METHOD(t_MultiTrie2, getLastOnPath, METH_VARARGS),
        DECLARE_METHOD(t_MultiTrie2, reduce, METH_VARARGS),
        DECLARE_METHOD(t_MultiTrie2, store, METH_VARARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(MultiTrie2, t_MultiTrie2, ::org::egothor::stemmer::MultiTrie, MultiTrie2, t_MultiTrie2_init_, 0, 0, 0, 0, 0);

      void t_MultiTrie2::install(PyObject *module)
      {
        installType(&PY_TYPE(MultiTrie2), module, "MultiTrie2", 0);
      }

      void t_MultiTrie2::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(MultiTrie2).tp_dict, "class_", make_descriptor(MultiTrie2::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(MultiTrie2).tp_dict, "wrapfn_", make_descriptor(t_MultiTrie2::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(MultiTrie2).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_MultiTrie2_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, MultiTrie2::initializeClass, 1)))
          return NULL;
        return t_MultiTrie2::wrap_Object(MultiTrie2(((t_MultiTrie2 *) arg)->object.this$));
      }
      static PyObject *t_MultiTrie2_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, MultiTrie2::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_MultiTrie2_init_(t_MultiTrie2 *self, PyObject *args, PyObject *kwds)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            ::java::io::DataInput a0((jobject) NULL);
            MultiTrie2 object((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::DataInput::initializeClass, &a0))
            {
              INT_CALL(object = MultiTrie2(a0));
              self->object = object;
              break;
            }
          }
          {
            jboolean a0;
            MultiTrie2 object((jobject) NULL);

            if (!parseArgs(args, "Z", &a0))
            {
              INT_CALL(object = MultiTrie2(a0));
              self->object = object;
              break;
            }
          }
         default:
          PyErr_SetArgsError((PyObject *) self, "__init__", args);
          return -1;
        }

        return 0;
      }

      static PyObject *t_MultiTrie2_add(t_MultiTrie2 *self, PyObject *args)
      {
        ::java::lang::CharSequence a0((jobject) NULL);
        ::java::lang::CharSequence a1((jobject) NULL);

        if (!parseArgs(args, "OO", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
        {
          OBJ_CALL(self->object.add(a0, a1));
          Py_RETURN_NONE;
        }

        return callSuper(&PY_TYPE(MultiTrie2), (PyObject *) self, "add", args, 2);
      }

      static PyObject *t_MultiTrie2_decompose(t_MultiTrie2 *self, PyObject *arg)
      {
        ::java::lang::CharSequence a0((jobject) NULL);
        JArray< ::java::lang::CharSequence > result((jobject) NULL);

        if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
        {
          OBJ_CALL(result = self->object.decompose(a0));
          return JArray<jobject>(result.this$).wrap(::java::lang::t_CharSequence::wrap_jobject);
        }

        PyErr_SetArgsError((PyObject *) self, "decompose", arg);
        return NULL;
      }

      static PyObject *t_MultiTrie2_getFully(t_MultiTrie2 *self, PyObject *args)
      {
        ::java::lang::CharSequence a0((jobject) NULL);
        ::java::lang::CharSequence result((jobject) NULL);

        if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
        {
          OBJ_CALL(result = self->object.getFully(a0));
          return ::java::lang::t_CharSequence::wrap_Object(result);
        }

        return callSuper(&PY_TYPE(MultiTrie2), (PyObject *) self, "getFully", args, 2);
      }

      static PyObject *t_MultiTrie2_getLastOnPath(t_MultiTrie2 *self, PyObject *args)
      {
        ::java::lang::CharSequence a0((jobject) NULL);
        ::java::lang::CharSequence result((jobject) NULL);

        if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
        {
          OBJ_CALL(result = self->object.getLastOnPath(a0));
          return ::java::lang::t_CharSequence::wrap_Object(result);
        }

        return callSuper(&PY_TYPE(MultiTrie2), (PyObject *) self, "getLastOnPath", args, 2);
      }

      static PyObject *t_MultiTrie2_reduce(t_MultiTrie2 *self, PyObject *args)
      {
        ::org::egothor::stemmer::Reduce a0((jobject) NULL);
        ::org::egothor::stemmer::Trie result((jobject) NULL);

        if (!parseArgs(args, "k", ::org::egothor::stemmer::Reduce::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.reduce(a0));
          return ::org::egothor::stemmer::t_Trie::wrap_Object(result);
        }

        return callSuper(&PY_TYPE(MultiTrie2), (PyObject *) self, "reduce", args, 2);
      }

      static PyObject *t_MultiTrie2_store(t_MultiTrie2 *self, PyObject *args)
      {
        ::java::io::DataOutput a0((jobject) NULL);

        if (!parseArgs(args, "k", ::java::io::DataOutput::initializeClass, &a0))
        {
          OBJ_CALL(self->object.store(a0));
          Py_RETURN_NONE;
        }

        return callSuper(&PY_TYPE(MultiTrie2), (PyObject *) self, "store", args, 2);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ca/CatalanAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ca {

          ::java::lang::Class *CatalanAnalyzer::class$ = NULL;
          jmethodID *CatalanAnalyzer::mids$ = NULL;
          bool CatalanAnalyzer::live$ = false;
          ::java::lang::String *CatalanAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass CatalanAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ca/CatalanAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CatalanAnalyzer::CatalanAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          CatalanAnalyzer::CatalanAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          CatalanAnalyzer::CatalanAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet CatalanAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ca {
          static PyObject *t_CatalanAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CatalanAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CatalanAnalyzer_init_(t_CatalanAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CatalanAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_CatalanAnalyzer_get__defaultStopSet(t_CatalanAnalyzer *self, void *data);
          static PyGetSetDef t_CatalanAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_CatalanAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CatalanAnalyzer__methods_[] = {
            DECLARE_METHOD(t_CatalanAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CatalanAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CatalanAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CatalanAnalyzer, t_CatalanAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, CatalanAnalyzer, t_CatalanAnalyzer_init_, 0, 0, t_CatalanAnalyzer__fields_, 0, 0);

          void t_CatalanAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(CatalanAnalyzer), module, "CatalanAnalyzer", 0);
          }

          void t_CatalanAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CatalanAnalyzer).tp_dict, "class_", make_descriptor(CatalanAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CatalanAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_CatalanAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CatalanAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CatalanAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(CatalanAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*CatalanAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_CatalanAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CatalanAnalyzer::initializeClass, 1)))
              return NULL;
            return t_CatalanAnalyzer::wrap_Object(CatalanAnalyzer(((t_CatalanAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_CatalanAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CatalanAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CatalanAnalyzer_init_(t_CatalanAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                CatalanAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = CatalanAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                CatalanAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = CatalanAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                CatalanAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = CatalanAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CatalanAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::ca::CatalanAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_CatalanAnalyzer_get__defaultStopSet(t_CatalanAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FilteredDocIdSetIterator.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FilteredDocIdSetIterator::class$ = NULL;
        jmethodID *FilteredDocIdSetIterator::mids$ = NULL;
        bool FilteredDocIdSetIterator::live$ = false;

        jclass FilteredDocIdSetIterator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FilteredDocIdSetIterator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c2b5607d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/DocIdSetIterator;)V");
            mids$[mid_advance_39c7bd23] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_54c6a179] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_nextDoc_54c6a179] = env->getMethodID(cls, "nextDoc", "()I");
            mids$[mid_match_39c7bd30] = env->getMethodID(cls, "match", "(I)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilteredDocIdSetIterator::FilteredDocIdSetIterator(const ::org::apache::lucene::search::DocIdSetIterator & a0) : ::org::apache::lucene::search::DocIdSetIterator(env->newObject(initializeClass, &mids$, mid_init$_c2b5607d, a0.this$)) {}

        jint FilteredDocIdSetIterator::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_39c7bd23], a0);
        }

        jlong FilteredDocIdSetIterator::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
        }

        jint FilteredDocIdSetIterator::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_54c6a179]);
        }

        jint FilteredDocIdSetIterator::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FilteredDocIdSetIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilteredDocIdSetIterator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilteredDocIdSetIterator_init_(t_FilteredDocIdSetIterator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilteredDocIdSetIterator_advance(t_FilteredDocIdSetIterator *self, PyObject *args);
        static PyObject *t_FilteredDocIdSetIterator_cost(t_FilteredDocIdSetIterator *self, PyObject *args);
        static PyObject *t_FilteredDocIdSetIterator_docID(t_FilteredDocIdSetIterator *self, PyObject *args);
        static PyObject *t_FilteredDocIdSetIterator_nextDoc(t_FilteredDocIdSetIterator *self, PyObject *args);

        static PyMethodDef t_FilteredDocIdSetIterator__methods_[] = {
          DECLARE_METHOD(t_FilteredDocIdSetIterator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilteredDocIdSetIterator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilteredDocIdSetIterator, advance, METH_VARARGS),
          DECLARE_METHOD(t_FilteredDocIdSetIterator, cost, METH_VARARGS),
          DECLARE_METHOD(t_FilteredDocIdSetIterator, docID, METH_VARARGS),
          DECLARE_METHOD(t_FilteredDocIdSetIterator, nextDoc, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilteredDocIdSetIterator, t_FilteredDocIdSetIterator, ::org::apache::lucene::search::DocIdSetIterator, FilteredDocIdSetIterator, t_FilteredDocIdSetIterator_init_, 0, 0, 0, 0, 0);

        void t_FilteredDocIdSetIterator::install(PyObject *module)
        {
          installType(&PY_TYPE(FilteredDocIdSetIterator), module, "FilteredDocIdSetIterator", 0);
        }

        void t_FilteredDocIdSetIterator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilteredDocIdSetIterator).tp_dict, "class_", make_descriptor(FilteredDocIdSetIterator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilteredDocIdSetIterator).tp_dict, "wrapfn_", make_descriptor(t_FilteredDocIdSetIterator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilteredDocIdSetIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilteredDocIdSetIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilteredDocIdSetIterator::initializeClass, 1)))
            return NULL;
          return t_FilteredDocIdSetIterator::wrap_Object(FilteredDocIdSetIterator(((t_FilteredDocIdSetIterator *) arg)->object.this$));
        }
        static PyObject *t_FilteredDocIdSetIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilteredDocIdSetIterator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilteredDocIdSetIterator_init_(t_FilteredDocIdSetIterator *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);
          FilteredDocIdSetIterator object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
          {
            INT_CALL(object = FilteredDocIdSetIterator(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilteredDocIdSetIterator_advance(t_FilteredDocIdSetIterator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilteredDocIdSetIterator), (PyObject *) self, "advance", args, 2);
        }

        static PyObject *t_FilteredDocIdSetIterator_cost(t_FilteredDocIdSetIterator *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FilteredDocIdSetIterator), (PyObject *) self, "cost", args, 2);
        }

        static PyObject *t_FilteredDocIdSetIterator_docID(t_FilteredDocIdSetIterator *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilteredDocIdSetIterator), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_FilteredDocIdSetIterator_nextDoc(t_FilteredDocIdSetIterator *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilteredDocIdSetIterator), (PyObject *) self, "nextDoc", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/AbstractMap.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "java/util/Map$Entry.h"
#include "java/util/Collection.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *AbstractMap::class$ = NULL;
    jmethodID *AbstractMap::mids$ = NULL;
    bool AbstractMap::live$ = false;

    jclass AbstractMap::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/AbstractMap");

        mids$ = new jmethodID[max_mid];
        mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
        mids$[mid_containsKey_290588e2] = env->getMethodID(cls, "containsKey", "(Ljava/lang/Object;)Z");
        mids$[mid_containsValue_290588e2] = env->getMethodID(cls, "containsValue", "(Ljava/lang/Object;)Z");
        mids$[mid_entrySet_03e99967] = env->getMethodID(cls, "entrySet", "()Ljava/util/Set;");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_get_a932a95f] = env->getMethodID(cls, "get", "(Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
        mids$[mid_keySet_03e99967] = env->getMethodID(cls, "keySet", "()Ljava/util/Set;");
        mids$[mid_put_537d5bdf] = env->getMethodID(cls, "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_putAll_4c9e2b1c] = env->getMethodID(cls, "putAll", "(Ljava/util/Map;)V");
        mids$[mid_remove_a932a95f] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_values_2d2d7de4] = env->getMethodID(cls, "values", "()Ljava/util/Collection;");
        mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    void AbstractMap::clear() const
    {
      env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
    }

    jboolean AbstractMap::containsKey(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_containsKey_290588e2], a0.this$);
    }

    jboolean AbstractMap::containsValue(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_containsValue_290588e2], a0.this$);
    }

    ::java::util::Set AbstractMap::entrySet() const
    {
      return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_entrySet_03e99967]));
    }

    jboolean AbstractMap::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    ::java::lang::Object AbstractMap::get(const ::java::lang::Object & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_a932a95f], a0.this$));
    }

    jint AbstractMap::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jboolean AbstractMap::isEmpty() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isEmpty_54c6a16a]);
    }

    ::java::util::Set AbstractMap::keySet() const
    {
      return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_keySet_03e99967]));
    }

    ::java::lang::Object AbstractMap::put(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_put_537d5bdf], a0.this$, a1.this$));
    }

    void AbstractMap::putAll(const ::java::util::Map & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_putAll_4c9e2b1c], a0.this$);
    }

    ::java::lang::Object AbstractMap::remove(const ::java::lang::Object & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_remove_a932a95f], a0.this$));
    }

    jint AbstractMap::size() const
    {
      return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
    }

    ::java::lang::String AbstractMap::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    ::java::util::Collection AbstractMap::values() const
    {
      return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_values_2d2d7de4]));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_AbstractMap_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_AbstractMap_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_AbstractMap_of_(t_AbstractMap *self, PyObject *args);
    static PyObject *t_AbstractMap_clear(t_AbstractMap *self);
    static PyObject *t_AbstractMap_containsKey(t_AbstractMap *self, PyObject *arg);
    static PyObject *t_AbstractMap_containsValue(t_AbstractMap *self, PyObject *arg);
    static PyObject *t_AbstractMap_entrySet(t_AbstractMap *self);
    static PyObject *t_AbstractMap_equals(t_AbstractMap *self, PyObject *args);
    static PyObject *t_AbstractMap_get(t_AbstractMap *self, PyObject *arg);
    static PyObject *t_AbstractMap_hashCode(t_AbstractMap *self, PyObject *args);
    static PyObject *t_AbstractMap_isEmpty(t_AbstractMap *self);
    static PyObject *t_AbstractMap_keySet(t_AbstractMap *self);
    static PyObject *t_AbstractMap_put(t_AbstractMap *self, PyObject *args);
    static PyObject *t_AbstractMap_putAll(t_AbstractMap *self, PyObject *arg);
    static PyObject *t_AbstractMap_remove(t_AbstractMap *self, PyObject *arg);
    static PyObject *t_AbstractMap_size(t_AbstractMap *self);
    static PyObject *t_AbstractMap_toString(t_AbstractMap *self, PyObject *args);
    static PyObject *t_AbstractMap_values(t_AbstractMap *self);
    static PyObject *t_AbstractMap_get__empty(t_AbstractMap *self, void *data);
    static PyObject *t_AbstractMap_get__parameters_(t_AbstractMap *self, void *data);
    static PyGetSetDef t_AbstractMap__fields_[] = {
      DECLARE_GET_FIELD(t_AbstractMap, empty),
      DECLARE_GET_FIELD(t_AbstractMap, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_AbstractMap__methods_[] = {
      DECLARE_METHOD(t_AbstractMap, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_AbstractMap, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_AbstractMap, of_, METH_VARARGS),
      DECLARE_METHOD(t_AbstractMap, clear, METH_NOARGS),
      DECLARE_METHOD(t_AbstractMap, containsKey, METH_O),
      DECLARE_METHOD(t_AbstractMap, containsValue, METH_O),
      DECLARE_METHOD(t_AbstractMap, entrySet, METH_NOARGS),
      DECLARE_METHOD(t_AbstractMap, equals, METH_VARARGS),
      DECLARE_METHOD(t_AbstractMap, get, METH_O),
      DECLARE_METHOD(t_AbstractMap, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_AbstractMap, isEmpty, METH_NOARGS),
      DECLARE_METHOD(t_AbstractMap, keySet, METH_NOARGS),
      DECLARE_METHOD(t_AbstractMap, put, METH_VARARGS),
      DECLARE_METHOD(t_AbstractMap, putAll, METH_O),
      DECLARE_METHOD(t_AbstractMap, remove, METH_O),
      DECLARE_METHOD(t_AbstractMap, size, METH_NOARGS),
      DECLARE_METHOD(t_AbstractMap, toString, METH_VARARGS),
      DECLARE_METHOD(t_AbstractMap, values, METH_NOARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(AbstractMap, t_AbstractMap, ::java::lang::Object, AbstractMap, abstract_init, 0, 0, t_AbstractMap__fields_, 0, 0);
    PyObject *t_AbstractMap::wrap_Object(const AbstractMap& object, PyTypeObject *p0, PyTypeObject *p1)
    {
      PyObject *obj = t_AbstractMap::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_AbstractMap *self = (t_AbstractMap *) obj;
        self->parameters[0] = p0;
        self->parameters[1] = p1;
      }
      return obj;
    }

    PyObject *t_AbstractMap::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
    {
      PyObject *obj = t_AbstractMap::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_AbstractMap *self = (t_AbstractMap *) obj;
        self->parameters[0] = p0;
        self->parameters[1] = p1;
      }
      return obj;
    }

    void t_AbstractMap::install(PyObject *module)
    {
      installType(&PY_TYPE(AbstractMap), module, "AbstractMap", 0);
    }

    void t_AbstractMap::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(AbstractMap).tp_dict, "class_", make_descriptor(AbstractMap::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(AbstractMap).tp_dict, "wrapfn_", make_descriptor(t_AbstractMap::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(AbstractMap).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_AbstractMap_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, AbstractMap::initializeClass, 1)))
        return NULL;
      return t_AbstractMap::wrap_Object(AbstractMap(((t_AbstractMap *) arg)->object.this$));
    }
    static PyObject *t_AbstractMap_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, AbstractMap::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_AbstractMap_of_(t_AbstractMap *self, PyObject *args)
    {
      if (!parseArg(args, "T", 2, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static PyObject *t_AbstractMap_clear(t_AbstractMap *self)
    {
      OBJ_CALL(self->object.clear());
      Py_RETURN_NONE;
    }

    static PyObject *t_AbstractMap_containsKey(t_AbstractMap *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = self->object.containsKey(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "containsKey", arg);
      return NULL;
    }

    static PyObject *t_AbstractMap_containsValue(t_AbstractMap *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = self->object.containsValue(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "containsValue", arg);
      return NULL;
    }

    static PyObject *t_AbstractMap_entrySet(t_AbstractMap *self)
    {
      ::java::util::Set result((jobject) NULL);
      OBJ_CALL(result = self->object.entrySet());
      return ::java::util::t_Set::wrap_Object(result);
    }

    static PyObject *t_AbstractMap_equals(t_AbstractMap *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(AbstractMap), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_AbstractMap_get(t_AbstractMap *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = self->object.get(a0));
        return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "get", arg);
      return NULL;
    }

    static PyObject *t_AbstractMap_hashCode(t_AbstractMap *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(AbstractMap), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_AbstractMap_isEmpty(t_AbstractMap *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isEmpty());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_AbstractMap_keySet(t_AbstractMap *self)
    {
      ::java::util::Set result((jobject) NULL);
      OBJ_CALL(result = self->object.keySet());
      return ::java::util::t_Set::wrap_Object(result, self->parameters[0]);
    }

    static PyObject *t_AbstractMap_put(t_AbstractMap *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object a1((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArgs(args, "OO", self->parameters[0], self->parameters[1], &a0, &a1))
      {
        OBJ_CALL(result = self->object.put(a0, a1));
        return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "put", args);
      return NULL;
    }

    static PyObject *t_AbstractMap_putAll(t_AbstractMap *self, PyObject *arg)
    {
      ::java::util::Map a0((jobject) NULL);
      PyTypeObject **p0;

      if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
      {
        OBJ_CALL(self->object.putAll(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "putAll", arg);
      return NULL;
    }

    static PyObject *t_AbstractMap_remove(t_AbstractMap *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = self->object.remove(a0));
        return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "remove", arg);
      return NULL;
    }

    static PyObject *t_AbstractMap_size(t_AbstractMap *self)
    {
      jint result;
      OBJ_CALL(result = self->object.size());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_AbstractMap_toString(t_AbstractMap *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(AbstractMap), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_AbstractMap_values(t_AbstractMap *self)
    {
      ::java::util::Collection result((jobject) NULL);
      OBJ_CALL(result = self->object.values());
      return ::java::util::t_Collection::wrap_Object(result, self->parameters[1]);
    }
    static PyObject *t_AbstractMap_get__parameters_(t_AbstractMap *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }

    static PyObject *t_AbstractMap_get__empty(t_AbstractMap *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isEmpty());
      Py_RETURN_BOOL(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/join/ToParentBlockJoinCollector.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Sort.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/grouping/TopGroups.h"
#include "org/apache/lucene/search/join/ToParentBlockJoinQuery.h"
#include "java/lang/Integer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {

          ::java::lang::Class *ToParentBlockJoinCollector::class$ = NULL;
          jmethodID *ToParentBlockJoinCollector::mids$ = NULL;
          bool ToParentBlockJoinCollector::live$ = false;

          jclass ToParentBlockJoinCollector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/join/ToParentBlockJoinCollector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e3369b2e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Sort;IZZ)V");
              mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
              mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
              mids$[mid_getMaxScore_54c6a176] = env->getMethodID(cls, "getMaxScore", "()F");
              mids$[mid_getTopGroups_aade7c1f] = env->getMethodID(cls, "getTopGroups", "(Lorg/apache/lucene/search/join/ToParentBlockJoinQuery;Lorg/apache/lucene/search/Sort;IIIZ)Lorg/apache/lucene/search/grouping/TopGroups;");
              mids$[mid_getTopGroupsWithAllChildDocs_2bbd93ad] = env->getMethodID(cls, "getTopGroupsWithAllChildDocs", "(Lorg/apache/lucene/search/join/ToParentBlockJoinQuery;Lorg/apache/lucene/search/Sort;IIZ)Lorg/apache/lucene/search/grouping/TopGroups;");
              mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
              mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ToParentBlockJoinCollector::ToParentBlockJoinCollector(const ::org::apache::lucene::search::Sort & a0, jint a1, jboolean a2, jboolean a3) : ::org::apache::lucene::search::Collector(env->newObject(initializeClass, &mids$, mid_init$_e3369b2e, a0.this$, a1, a2, a3)) {}

          jboolean ToParentBlockJoinCollector::acceptsDocsOutOfOrder() const
          {
            return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
          }

          void ToParentBlockJoinCollector::collect(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
          }

          jfloat ToParentBlockJoinCollector::getMaxScore() const
          {
            return env->callFloatMethod(this$, mids$[mid_getMaxScore_54c6a176]);
          }

          ::org::apache::lucene::search::grouping::TopGroups ToParentBlockJoinCollector::getTopGroups(const ::org::apache::lucene::search::join::ToParentBlockJoinQuery & a0, const ::org::apache::lucene::search::Sort & a1, jint a2, jint a3, jint a4, jboolean a5) const
          {
            return ::org::apache::lucene::search::grouping::TopGroups(env->callObjectMethod(this$, mids$[mid_getTopGroups_aade7c1f], a0.this$, a1.this$, a2, a3, a4, a5));
          }

          ::org::apache::lucene::search::grouping::TopGroups ToParentBlockJoinCollector::getTopGroupsWithAllChildDocs(const ::org::apache::lucene::search::join::ToParentBlockJoinQuery & a0, const ::org::apache::lucene::search::Sort & a1, jint a2, jint a3, jboolean a4) const
          {
            return ::org::apache::lucene::search::grouping::TopGroups(env->callObjectMethod(this$, mids$[mid_getTopGroupsWithAllChildDocs_2bbd93ad], a0.this$, a1.this$, a2, a3, a4));
          }

          void ToParentBlockJoinCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
          }

          void ToParentBlockJoinCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {
          static PyObject *t_ToParentBlockJoinCollector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ToParentBlockJoinCollector_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ToParentBlockJoinCollector_init_(t_ToParentBlockJoinCollector *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ToParentBlockJoinCollector_acceptsDocsOutOfOrder(t_ToParentBlockJoinCollector *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinCollector_collect(t_ToParentBlockJoinCollector *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinCollector_getMaxScore(t_ToParentBlockJoinCollector *self);
          static PyObject *t_ToParentBlockJoinCollector_getTopGroups(t_ToParentBlockJoinCollector *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinCollector_getTopGroupsWithAllChildDocs(t_ToParentBlockJoinCollector *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinCollector_setNextReader(t_ToParentBlockJoinCollector *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinCollector_setScorer(t_ToParentBlockJoinCollector *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinCollector_get__maxScore(t_ToParentBlockJoinCollector *self, void *data);
          static int t_ToParentBlockJoinCollector_set__nextReader(t_ToParentBlockJoinCollector *self, PyObject *arg, void *data);
          static int t_ToParentBlockJoinCollector_set__scorer(t_ToParentBlockJoinCollector *self, PyObject *arg, void *data);
          static PyGetSetDef t_ToParentBlockJoinCollector__fields_[] = {
            DECLARE_GET_FIELD(t_ToParentBlockJoinCollector, maxScore),
            DECLARE_SET_FIELD(t_ToParentBlockJoinCollector, nextReader),
            DECLARE_SET_FIELD(t_ToParentBlockJoinCollector, scorer),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ToParentBlockJoinCollector__methods_[] = {
            DECLARE_METHOD(t_ToParentBlockJoinCollector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToParentBlockJoinCollector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToParentBlockJoinCollector, acceptsDocsOutOfOrder, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinCollector, collect, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinCollector, getMaxScore, METH_NOARGS),
            DECLARE_METHOD(t_ToParentBlockJoinCollector, getTopGroups, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinCollector, getTopGroupsWithAllChildDocs, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinCollector, setNextReader, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinCollector, setScorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ToParentBlockJoinCollector, t_ToParentBlockJoinCollector, ::org::apache::lucene::search::Collector, ToParentBlockJoinCollector, t_ToParentBlockJoinCollector_init_, 0, 0, t_ToParentBlockJoinCollector__fields_, 0, 0);

          void t_ToParentBlockJoinCollector::install(PyObject *module)
          {
            installType(&PY_TYPE(ToParentBlockJoinCollector), module, "ToParentBlockJoinCollector", 0);
          }

          void t_ToParentBlockJoinCollector::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinCollector).tp_dict, "class_", make_descriptor(ToParentBlockJoinCollector::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinCollector).tp_dict, "wrapfn_", make_descriptor(t_ToParentBlockJoinCollector::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ToParentBlockJoinCollector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ToParentBlockJoinCollector::initializeClass, 1)))
              return NULL;
            return t_ToParentBlockJoinCollector::wrap_Object(ToParentBlockJoinCollector(((t_ToParentBlockJoinCollector *) arg)->object.this$));
          }
          static PyObject *t_ToParentBlockJoinCollector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ToParentBlockJoinCollector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ToParentBlockJoinCollector_init_(t_ToParentBlockJoinCollector *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::Sort a0((jobject) NULL);
            jint a1;
            jboolean a2;
            jboolean a3;
            ToParentBlockJoinCollector object((jobject) NULL);

            if (!parseArgs(args, "kIZZ", ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = ToParentBlockJoinCollector(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ToParentBlockJoinCollector_acceptsDocsOutOfOrder(t_ToParentBlockJoinCollector *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
          }

          static PyObject *t_ToParentBlockJoinCollector_collect(t_ToParentBlockJoinCollector *self, PyObject *args)
          {
            jint a0;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(self->object.collect(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinCollector), (PyObject *) self, "collect", args, 2);
          }

          static PyObject *t_ToParentBlockJoinCollector_getMaxScore(t_ToParentBlockJoinCollector *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getMaxScore());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_ToParentBlockJoinCollector_getTopGroups(t_ToParentBlockJoinCollector *self, PyObject *args)
          {
            ::org::apache::lucene::search::join::ToParentBlockJoinQuery a0((jobject) NULL);
            ::org::apache::lucene::search::Sort a1((jobject) NULL);
            jint a2;
            jint a3;
            jint a4;
            jboolean a5;
            ::org::apache::lucene::search::grouping::TopGroups result((jobject) NULL);

            if (!parseArgs(args, "kkIIIZ", ::org::apache::lucene::search::join::ToParentBlockJoinQuery::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
            {
              OBJ_CALL(result = self->object.getTopGroups(a0, a1, a2, a3, a4, a5));
              return ::org::apache::lucene::search::grouping::t_TopGroups::wrap_Object(result, &::java::lang::PY_TYPE(Integer));
            }

            PyErr_SetArgsError((PyObject *) self, "getTopGroups", args);
            return NULL;
          }

          static PyObject *t_ToParentBlockJoinCollector_getTopGroupsWithAllChildDocs(t_ToParentBlockJoinCollector *self, PyObject *args)
          {
            ::org::apache::lucene::search::join::ToParentBlockJoinQuery a0((jobject) NULL);
            ::org::apache::lucene::search::Sort a1((jobject) NULL);
            jint a2;
            jint a3;
            jboolean a4;
            ::org::apache::lucene::search::grouping::TopGroups result((jobject) NULL);

            if (!parseArgs(args, "kkIIZ", ::org::apache::lucene::search::join::ToParentBlockJoinQuery::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.getTopGroupsWithAllChildDocs(a0, a1, a2, a3, a4));
              return ::org::apache::lucene::search::grouping::t_TopGroups::wrap_Object(result, &::java::lang::PY_TYPE(Integer));
            }

            PyErr_SetArgsError((PyObject *) self, "getTopGroupsWithAllChildDocs", args);
            return NULL;
          }

          static PyObject *t_ToParentBlockJoinCollector_setNextReader(t_ToParentBlockJoinCollector *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setNextReader(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinCollector), (PyObject *) self, "setNextReader", args, 2);
          }

          static PyObject *t_ToParentBlockJoinCollector_setScorer(t_ToParentBlockJoinCollector *self, PyObject *args)
          {
            ::org::apache::lucene::search::Scorer a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setScorer(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinCollector), (PyObject *) self, "setScorer", args, 2);
          }

          static PyObject *t_ToParentBlockJoinCollector_get__maxScore(t_ToParentBlockJoinCollector *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getMaxScore());
            return PyFloat_FromDouble((double) value);
          }

          static int t_ToParentBlockJoinCollector_set__nextReader(t_ToParentBlockJoinCollector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
              {
                INT_CALL(self->object.setNextReader(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
            return -1;
          }

          static int t_ToParentBlockJoinCollector_set__scorer(t_ToParentBlockJoinCollector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::Scorer value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
              {
                INT_CALL(self->object.setScorer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "scorer", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/tst/TernaryTreeNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace tst {

            ::java::lang::Class *TernaryTreeNode::class$ = NULL;
            jmethodID *TernaryTreeNode::mids$ = NULL;
            bool TernaryTreeNode::live$ = false;

            jclass TernaryTreeNode::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/tst/TernaryTreeNode");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TernaryTreeNode::TernaryTreeNode() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace tst {
            static PyObject *t_TernaryTreeNode_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TernaryTreeNode_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TernaryTreeNode_init_(t_TernaryTreeNode *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_TernaryTreeNode__methods_[] = {
              DECLARE_METHOD(t_TernaryTreeNode, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TernaryTreeNode, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TernaryTreeNode, t_TernaryTreeNode, ::java::lang::Object, TernaryTreeNode, t_TernaryTreeNode_init_, 0, 0, 0, 0, 0);

            void t_TernaryTreeNode::install(PyObject *module)
            {
              installType(&PY_TYPE(TernaryTreeNode), module, "TernaryTreeNode", 0);
            }

            void t_TernaryTreeNode::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TernaryTreeNode).tp_dict, "class_", make_descriptor(TernaryTreeNode::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TernaryTreeNode).tp_dict, "wrapfn_", make_descriptor(t_TernaryTreeNode::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TernaryTreeNode).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TernaryTreeNode_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TernaryTreeNode::initializeClass, 1)))
                return NULL;
              return t_TernaryTreeNode::wrap_Object(TernaryTreeNode(((t_TernaryTreeNode *) arg)->object.this$));
            }
            static PyObject *t_TernaryTreeNode_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TernaryTreeNode::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TernaryTreeNode_init_(t_TernaryTreeNode *self, PyObject *args, PyObject *kwds)
            {
              TernaryTreeNode object((jobject) NULL);

              INT_CALL(object = TernaryTreeNode());
              self->object = object;

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/FieldInfosFormat.h"
#include "org/apache/lucene/codecs/FieldInfosWriter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/FieldInfosReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *FieldInfosFormat::class$ = NULL;
        jmethodID *FieldInfosFormat::mids$ = NULL;
        bool FieldInfosFormat::live$ = false;

        jclass FieldInfosFormat::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/FieldInfosFormat");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getFieldInfosReader_6ecd5494] = env->getMethodID(cls, "getFieldInfosReader", "()Lorg/apache/lucene/codecs/FieldInfosReader;");
            mids$[mid_getFieldInfosWriter_211ffa60] = env->getMethodID(cls, "getFieldInfosWriter", "()Lorg/apache/lucene/codecs/FieldInfosWriter;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::codecs::FieldInfosReader FieldInfosFormat::getFieldInfosReader() const
        {
          return ::org::apache::lucene::codecs::FieldInfosReader(env->callObjectMethod(this$, mids$[mid_getFieldInfosReader_6ecd5494]));
        }

        ::org::apache::lucene::codecs::FieldInfosWriter FieldInfosFormat::getFieldInfosWriter() const
        {
          return ::org::apache::lucene::codecs::FieldInfosWriter(env->callObjectMethod(this$, mids$[mid_getFieldInfosWriter_211ffa60]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_FieldInfosFormat_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInfosFormat_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInfosFormat_getFieldInfosReader(t_FieldInfosFormat *self);
        static PyObject *t_FieldInfosFormat_getFieldInfosWriter(t_FieldInfosFormat *self);
        static PyObject *t_FieldInfosFormat_get__fieldInfosReader(t_FieldInfosFormat *self, void *data);
        static PyObject *t_FieldInfosFormat_get__fieldInfosWriter(t_FieldInfosFormat *self, void *data);
        static PyGetSetDef t_FieldInfosFormat__fields_[] = {
          DECLARE_GET_FIELD(t_FieldInfosFormat, fieldInfosReader),
          DECLARE_GET_FIELD(t_FieldInfosFormat, fieldInfosWriter),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldInfosFormat__methods_[] = {
          DECLARE_METHOD(t_FieldInfosFormat, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfosFormat, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfosFormat, getFieldInfosReader, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfosFormat, getFieldInfosWriter, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldInfosFormat, t_FieldInfosFormat, ::java::lang::Object, FieldInfosFormat, abstract_init, 0, 0, t_FieldInfosFormat__fields_, 0, 0);

        void t_FieldInfosFormat::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldInfosFormat), module, "FieldInfosFormat", 0);
        }

        void t_FieldInfosFormat::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldInfosFormat).tp_dict, "class_", make_descriptor(FieldInfosFormat::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldInfosFormat).tp_dict, "wrapfn_", make_descriptor(t_FieldInfosFormat::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldInfosFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldInfosFormat_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldInfosFormat::initializeClass, 1)))
            return NULL;
          return t_FieldInfosFormat::wrap_Object(FieldInfosFormat(((t_FieldInfosFormat *) arg)->object.this$));
        }
        static PyObject *t_FieldInfosFormat_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldInfosFormat::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldInfosFormat_getFieldInfosReader(t_FieldInfosFormat *self)
        {
          ::org::apache::lucene::codecs::FieldInfosReader result((jobject) NULL);
          OBJ_CALL(result = self->object.getFieldInfosReader());
          return ::org::apache::lucene::codecs::t_FieldInfosReader::wrap_Object(result);
        }

        static PyObject *t_FieldInfosFormat_getFieldInfosWriter(t_FieldInfosFormat *self)
        {
          ::org::apache::lucene::codecs::FieldInfosWriter result((jobject) NULL);
          OBJ_CALL(result = self->object.getFieldInfosWriter());
          return ::org::apache::lucene::codecs::t_FieldInfosWriter::wrap_Object(result);
        }

        static PyObject *t_FieldInfosFormat_get__fieldInfosReader(t_FieldInfosFormat *self, void *data)
        {
          ::org::apache::lucene::codecs::FieldInfosReader value((jobject) NULL);
          OBJ_CALL(value = self->object.getFieldInfosReader());
          return ::org::apache::lucene::codecs::t_FieldInfosReader::wrap_Object(value);
        }

        static PyObject *t_FieldInfosFormat_get__fieldInfosWriter(t_FieldInfosFormat *self, void *data)
        {
          ::org::apache::lucene::codecs::FieldInfosWriter value((jobject) NULL);
          OBJ_CALL(value = self->object.getFieldInfosWriter());
          return ::org::apache::lucene::codecs::t_FieldInfosWriter::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizerInterface.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *StandardTokenizerInterface::class$ = NULL;
          jmethodID *StandardTokenizerInterface::mids$ = NULL;
          bool StandardTokenizerInterface::live$ = false;
          jint StandardTokenizerInterface::YYEOF = (jint) 0;

          jclass StandardTokenizerInterface::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/StandardTokenizerInterface");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getNextToken_54c6a179] = env->getMethodID(cls, "getNextToken", "()I");
              mids$[mid_getText_64c709f2] = env->getMethodID(cls, "getText", "(Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;)V");
              mids$[mid_yychar_54c6a179] = env->getMethodID(cls, "yychar", "()I");
              mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
              mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              YYEOF = env->getStaticIntField(cls, "YYEOF");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint StandardTokenizerInterface::getNextToken() const
          {
            return env->callIntMethod(this$, mids$[mid_getNextToken_54c6a179]);
          }

          void StandardTokenizerInterface::getText(const ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_getText_64c709f2], a0.this$);
          }

          jint StandardTokenizerInterface::yychar() const
          {
            return env->callIntMethod(this$, mids$[mid_yychar_54c6a179]);
          }

          jint StandardTokenizerInterface::yylength() const
          {
            return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
          }

          void StandardTokenizerInterface::yyreset(const ::java::io::Reader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_StandardTokenizerInterface_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StandardTokenizerInterface_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StandardTokenizerInterface_getNextToken(t_StandardTokenizerInterface *self);
          static PyObject *t_StandardTokenizerInterface_getText(t_StandardTokenizerInterface *self, PyObject *arg);
          static PyObject *t_StandardTokenizerInterface_yychar(t_StandardTokenizerInterface *self);
          static PyObject *t_StandardTokenizerInterface_yylength(t_StandardTokenizerInterface *self);
          static PyObject *t_StandardTokenizerInterface_yyreset(t_StandardTokenizerInterface *self, PyObject *arg);
          static PyObject *t_StandardTokenizerInterface_get__nextToken(t_StandardTokenizerInterface *self, void *data);
          static PyGetSetDef t_StandardTokenizerInterface__fields_[] = {
            DECLARE_GET_FIELD(t_StandardTokenizerInterface, nextToken),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_StandardTokenizerInterface__methods_[] = {
            DECLARE_METHOD(t_StandardTokenizerInterface, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardTokenizerInterface, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardTokenizerInterface, getNextToken, METH_NOARGS),
            DECLARE_METHOD(t_StandardTokenizerInterface, getText, METH_O),
            DECLARE_METHOD(t_StandardTokenizerInterface, yychar, METH_NOARGS),
            DECLARE_METHOD(t_StandardTokenizerInterface, yylength, METH_NOARGS),
            DECLARE_METHOD(t_StandardTokenizerInterface, yyreset, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StandardTokenizerInterface, t_StandardTokenizerInterface, ::java::lang::Object, StandardTokenizerInterface, abstract_init, 0, 0, t_StandardTokenizerInterface__fields_, 0, 0);

          void t_StandardTokenizerInterface::install(PyObject *module)
          {
            installType(&PY_TYPE(StandardTokenizerInterface), module, "StandardTokenizerInterface", 0);
          }

          void t_StandardTokenizerInterface::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StandardTokenizerInterface).tp_dict, "class_", make_descriptor(StandardTokenizerInterface::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StandardTokenizerInterface).tp_dict, "wrapfn_", make_descriptor(t_StandardTokenizerInterface::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StandardTokenizerInterface).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(StandardTokenizerInterface::initializeClass);
            PyDict_SetItemString(PY_TYPE(StandardTokenizerInterface).tp_dict, "YYEOF", make_descriptor(StandardTokenizerInterface::YYEOF));
          }

          static PyObject *t_StandardTokenizerInterface_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StandardTokenizerInterface::initializeClass, 1)))
              return NULL;
            return t_StandardTokenizerInterface::wrap_Object(StandardTokenizerInterface(((t_StandardTokenizerInterface *) arg)->object.this$));
          }
          static PyObject *t_StandardTokenizerInterface_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StandardTokenizerInterface::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_StandardTokenizerInterface_getNextToken(t_StandardTokenizerInterface *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getNextToken());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_StandardTokenizerInterface_getText(t_StandardTokenizerInterface *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute::initializeClass, &a0))
            {
              OBJ_CALL(self->object.getText(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "getText", arg);
            return NULL;
          }

          static PyObject *t_StandardTokenizerInterface_yychar(t_StandardTokenizerInterface *self)
          {
            jint result;
            OBJ_CALL(result = self->object.yychar());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_StandardTokenizerInterface_yylength(t_StandardTokenizerInterface *self)
          {
            jint result;
            OBJ_CALL(result = self->object.yylength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_StandardTokenizerInterface_yyreset(t_StandardTokenizerInterface *self, PyObject *arg)
          {
            ::java::io::Reader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.yyreset(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
            return NULL;
          }

          static PyObject *t_StandardTokenizerInterface_get__nextToken(t_StandardTokenizerInterface *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getNextToken());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene46/Lucene46Codec.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/FieldInfosFormat.h"
#include "org/apache/lucene/codecs/TermVectorsFormat.h"
#include "org/apache/lucene/codecs/StoredFieldsFormat.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/PostingsFormat.h"
#include "org/apache/lucene/codecs/DocValuesFormat.h"
#include "org/apache/lucene/codecs/SegmentInfoFormat.h"
#include "org/apache/lucene/codecs/LiveDocsFormat.h"
#include "org/apache/lucene/codecs/NormsFormat.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene46 {

          ::java::lang::Class *Lucene46Codec::class$ = NULL;
          jmethodID *Lucene46Codec::mids$ = NULL;
          bool Lucene46Codec::live$ = false;

          jclass Lucene46Codec::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene46/Lucene46Codec");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_docValuesFormat_9a259760] = env->getMethodID(cls, "docValuesFormat", "()Lorg/apache/lucene/codecs/DocValuesFormat;");
              mids$[mid_fieldInfosFormat_82160220] = env->getMethodID(cls, "fieldInfosFormat", "()Lorg/apache/lucene/codecs/FieldInfosFormat;");
              mids$[mid_getDocValuesFormatForField_36ef78ba] = env->getMethodID(cls, "getDocValuesFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/DocValuesFormat;");
              mids$[mid_getPostingsFormatForField_19d2f1c6] = env->getMethodID(cls, "getPostingsFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_liveDocsFormat_fcc69d9a] = env->getMethodID(cls, "liveDocsFormat", "()Lorg/apache/lucene/codecs/LiveDocsFormat;");
              mids$[mid_normsFormat_03b89e43] = env->getMethodID(cls, "normsFormat", "()Lorg/apache/lucene/codecs/NormsFormat;");
              mids$[mid_postingsFormat_d12d16c8] = env->getMethodID(cls, "postingsFormat", "()Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_segmentInfoFormat_c24d8633] = env->getMethodID(cls, "segmentInfoFormat", "()Lorg/apache/lucene/codecs/SegmentInfoFormat;");
              mids$[mid_storedFieldsFormat_2b977101] = env->getMethodID(cls, "storedFieldsFormat", "()Lorg/apache/lucene/codecs/StoredFieldsFormat;");
              mids$[mid_termVectorsFormat_bcd1d8b8] = env->getMethodID(cls, "termVectorsFormat", "()Lorg/apache/lucene/codecs/TermVectorsFormat;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene46Codec::Lucene46Codec() : ::org::apache::lucene::codecs::Codec(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::DocValuesFormat Lucene46Codec::docValuesFormat() const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_docValuesFormat_9a259760]));
          }

          ::org::apache::lucene::codecs::FieldInfosFormat Lucene46Codec::fieldInfosFormat() const
          {
            return ::org::apache::lucene::codecs::FieldInfosFormat(env->callObjectMethod(this$, mids$[mid_fieldInfosFormat_82160220]));
          }

          ::org::apache::lucene::codecs::DocValuesFormat Lucene46Codec::getDocValuesFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_getDocValuesFormatForField_36ef78ba], a0.this$));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene46Codec::getPostingsFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_getPostingsFormatForField_19d2f1c6], a0.this$));
          }

          ::org::apache::lucene::codecs::LiveDocsFormat Lucene46Codec::liveDocsFormat() const
          {
            return ::org::apache::lucene::codecs::LiveDocsFormat(env->callObjectMethod(this$, mids$[mid_liveDocsFormat_fcc69d9a]));
          }

          ::org::apache::lucene::codecs::NormsFormat Lucene46Codec::normsFormat() const
          {
            return ::org::apache::lucene::codecs::NormsFormat(env->callObjectMethod(this$, mids$[mid_normsFormat_03b89e43]));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene46Codec::postingsFormat() const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_postingsFormat_d12d16c8]));
          }

          ::org::apache::lucene::codecs::SegmentInfoFormat Lucene46Codec::segmentInfoFormat() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoFormat(env->callObjectMethod(this$, mids$[mid_segmentInfoFormat_c24d8633]));
          }

          ::org::apache::lucene::codecs::StoredFieldsFormat Lucene46Codec::storedFieldsFormat() const
          {
            return ::org::apache::lucene::codecs::StoredFieldsFormat(env->callObjectMethod(this$, mids$[mid_storedFieldsFormat_2b977101]));
          }

          ::org::apache::lucene::codecs::TermVectorsFormat Lucene46Codec::termVectorsFormat() const
          {
            return ::org::apache::lucene::codecs::TermVectorsFormat(env->callObjectMethod(this$, mids$[mid_termVectorsFormat_bcd1d8b8]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene46 {
          static PyObject *t_Lucene46Codec_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene46Codec_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene46Codec_init_(t_Lucene46Codec *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene46Codec_docValuesFormat(t_Lucene46Codec *self, PyObject *args);
          static PyObject *t_Lucene46Codec_fieldInfosFormat(t_Lucene46Codec *self, PyObject *args);
          static PyObject *t_Lucene46Codec_getDocValuesFormatForField(t_Lucene46Codec *self, PyObject *arg);
          static PyObject *t_Lucene46Codec_getPostingsFormatForField(t_Lucene46Codec *self, PyObject *arg);
          static PyObject *t_Lucene46Codec_liveDocsFormat(t_Lucene46Codec *self, PyObject *args);
          static PyObject *t_Lucene46Codec_normsFormat(t_Lucene46Codec *self, PyObject *args);
          static PyObject *t_Lucene46Codec_postingsFormat(t_Lucene46Codec *self, PyObject *args);
          static PyObject *t_Lucene46Codec_segmentInfoFormat(t_Lucene46Codec *self, PyObject *args);
          static PyObject *t_Lucene46Codec_storedFieldsFormat(t_Lucene46Codec *self, PyObject *args);
          static PyObject *t_Lucene46Codec_termVectorsFormat(t_Lucene46Codec *self, PyObject *args);

          static PyMethodDef t_Lucene46Codec__methods_[] = {
            DECLARE_METHOD(t_Lucene46Codec, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene46Codec, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene46Codec, docValuesFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene46Codec, fieldInfosFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene46Codec, getDocValuesFormatForField, METH_O),
            DECLARE_METHOD(t_Lucene46Codec, getPostingsFormatForField, METH_O),
            DECLARE_METHOD(t_Lucene46Codec, liveDocsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene46Codec, normsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene46Codec, postingsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene46Codec, segmentInfoFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene46Codec, storedFieldsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene46Codec, termVectorsFormat, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene46Codec, t_Lucene46Codec, ::org::apache::lucene::codecs::Codec, Lucene46Codec, t_Lucene46Codec_init_, 0, 0, 0, 0, 0);

          void t_Lucene46Codec::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene46Codec), module, "Lucene46Codec", 0);
          }

          void t_Lucene46Codec::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene46Codec).tp_dict, "class_", make_descriptor(Lucene46Codec::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene46Codec).tp_dict, "wrapfn_", make_descriptor(t_Lucene46Codec::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene46Codec).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene46Codec_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene46Codec::initializeClass, 1)))
              return NULL;
            return t_Lucene46Codec::wrap_Object(Lucene46Codec(((t_Lucene46Codec *) arg)->object.this$));
          }
          static PyObject *t_Lucene46Codec_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene46Codec::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene46Codec_init_(t_Lucene46Codec *self, PyObject *args, PyObject *kwds)
          {
            Lucene46Codec object((jobject) NULL);

            INT_CALL(object = Lucene46Codec());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene46Codec_docValuesFormat(t_Lucene46Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.docValuesFormat());
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene46Codec), (PyObject *) self, "docValuesFormat", args, 2);
          }

          static PyObject *t_Lucene46Codec_fieldInfosFormat(t_Lucene46Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.fieldInfosFormat());
              return ::org::apache::lucene::codecs::t_FieldInfosFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene46Codec), (PyObject *) self, "fieldInfosFormat", args, 2);
          }

          static PyObject *t_Lucene46Codec_getDocValuesFormatForField(t_Lucene46Codec *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getDocValuesFormatForField(a0));
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getDocValuesFormatForField", arg);
            return NULL;
          }

          static PyObject *t_Lucene46Codec_getPostingsFormatForField(t_Lucene46Codec *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getPostingsFormatForField(a0));
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getPostingsFormatForField", arg);
            return NULL;
          }

          static PyObject *t_Lucene46Codec_liveDocsFormat(t_Lucene46Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::LiveDocsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.liveDocsFormat());
              return ::org::apache::lucene::codecs::t_LiveDocsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene46Codec), (PyObject *) self, "liveDocsFormat", args, 2);
          }

          static PyObject *t_Lucene46Codec_normsFormat(t_Lucene46Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::NormsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.normsFormat());
              return ::org::apache::lucene::codecs::t_NormsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene46Codec), (PyObject *) self, "normsFormat", args, 2);
          }

          static PyObject *t_Lucene46Codec_postingsFormat(t_Lucene46Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.postingsFormat());
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene46Codec), (PyObject *) self, "postingsFormat", args, 2);
          }

          static PyObject *t_Lucene46Codec_segmentInfoFormat(t_Lucene46Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.segmentInfoFormat());
              return ::org::apache::lucene::codecs::t_SegmentInfoFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene46Codec), (PyObject *) self, "segmentInfoFormat", args, 2);
          }

          static PyObject *t_Lucene46Codec_storedFieldsFormat(t_Lucene46Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::StoredFieldsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.storedFieldsFormat());
              return ::org::apache::lucene::codecs::t_StoredFieldsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene46Codec), (PyObject *) self, "storedFieldsFormat", args, 2);
          }

          static PyObject *t_Lucene46Codec_termVectorsFormat(t_Lucene46Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::TermVectorsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.termVectorsFormat());
              return ::org::apache::lucene::codecs::t_TermVectorsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene46Codec), (PyObject *) self, "termVectorsFormat", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/PrefixAwareTokenFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/Token.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *PrefixAwareTokenFilter::class$ = NULL;
          jmethodID *PrefixAwareTokenFilter::mids$ = NULL;
          bool PrefixAwareTokenFilter::live$ = false;

          jclass PrefixAwareTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/PrefixAwareTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_74ceae3e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_getPrefix_71f550c9] = env->getMethodID(cls, "getPrefix", "()Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getSuffix_71f550c9] = env->getMethodID(cls, "getSuffix", "()Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_setPrefix_c7c794dc] = env->getMethodID(cls, "setPrefix", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_setSuffix_c7c794dc] = env->getMethodID(cls, "setSuffix", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_updateSuffixToken_a810a20b] = env->getMethodID(cls, "updateSuffixToken", "(Lorg/apache/lucene/analysis/Token;Lorg/apache/lucene/analysis/Token;)Lorg/apache/lucene/analysis/Token;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PrefixAwareTokenFilter::PrefixAwareTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::org::apache::lucene::analysis::TokenStream(env->newObject(initializeClass, &mids$, mid_init$_74ceae3e, a0.this$, a1.this$)) {}

          void PrefixAwareTokenFilter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          void PrefixAwareTokenFilter::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          ::org::apache::lucene::analysis::TokenStream PrefixAwareTokenFilter::getPrefix() const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_getPrefix_71f550c9]));
          }

          ::org::apache::lucene::analysis::TokenStream PrefixAwareTokenFilter::getSuffix() const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_getSuffix_71f550c9]));
          }

          jboolean PrefixAwareTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void PrefixAwareTokenFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }

          void PrefixAwareTokenFilter::setPrefix(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPrefix_c7c794dc], a0.this$);
          }

          void PrefixAwareTokenFilter::setSuffix(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setSuffix_c7c794dc], a0.this$);
          }

          ::org::apache::lucene::analysis::Token PrefixAwareTokenFilter::updateSuffixToken(const ::org::apache::lucene::analysis::Token & a0, const ::org::apache::lucene::analysis::Token & a1) const
          {
            return ::org::apache::lucene::analysis::Token(env->callObjectMethod(this$, mids$[mid_updateSuffixToken_a810a20b], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_PrefixAwareTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PrefixAwareTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PrefixAwareTokenFilter_init_(t_PrefixAwareTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PrefixAwareTokenFilter_close(t_PrefixAwareTokenFilter *self, PyObject *args);
          static PyObject *t_PrefixAwareTokenFilter_end(t_PrefixAwareTokenFilter *self, PyObject *args);
          static PyObject *t_PrefixAwareTokenFilter_getPrefix(t_PrefixAwareTokenFilter *self);
          static PyObject *t_PrefixAwareTokenFilter_getSuffix(t_PrefixAwareTokenFilter *self);
          static PyObject *t_PrefixAwareTokenFilter_incrementToken(t_PrefixAwareTokenFilter *self, PyObject *args);
          static PyObject *t_PrefixAwareTokenFilter_reset(t_PrefixAwareTokenFilter *self, PyObject *args);
          static PyObject *t_PrefixAwareTokenFilter_setPrefix(t_PrefixAwareTokenFilter *self, PyObject *arg);
          static PyObject *t_PrefixAwareTokenFilter_setSuffix(t_PrefixAwareTokenFilter *self, PyObject *arg);
          static PyObject *t_PrefixAwareTokenFilter_updateSuffixToken(t_PrefixAwareTokenFilter *self, PyObject *args);
          static PyObject *t_PrefixAwareTokenFilter_get__prefix(t_PrefixAwareTokenFilter *self, void *data);
          static int t_PrefixAwareTokenFilter_set__prefix(t_PrefixAwareTokenFilter *self, PyObject *arg, void *data);
          static PyObject *t_PrefixAwareTokenFilter_get__suffix(t_PrefixAwareTokenFilter *self, void *data);
          static int t_PrefixAwareTokenFilter_set__suffix(t_PrefixAwareTokenFilter *self, PyObject *arg, void *data);
          static PyGetSetDef t_PrefixAwareTokenFilter__fields_[] = {
            DECLARE_GETSET_FIELD(t_PrefixAwareTokenFilter, prefix),
            DECLARE_GETSET_FIELD(t_PrefixAwareTokenFilter, suffix),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PrefixAwareTokenFilter__methods_[] = {
            DECLARE_METHOD(t_PrefixAwareTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PrefixAwareTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PrefixAwareTokenFilter, close, METH_VARARGS),
            DECLARE_METHOD(t_PrefixAwareTokenFilter, end, METH_VARARGS),
            DECLARE_METHOD(t_PrefixAwareTokenFilter, getPrefix, METH_NOARGS),
            DECLARE_METHOD(t_PrefixAwareTokenFilter, getSuffix, METH_NOARGS),
            DECLARE_METHOD(t_PrefixAwareTokenFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_PrefixAwareTokenFilter, reset, METH_VARARGS),
            DECLARE_METHOD(t_PrefixAwareTokenFilter, setPrefix, METH_O),
            DECLARE_METHOD(t_PrefixAwareTokenFilter, setSuffix, METH_O),
            DECLARE_METHOD(t_PrefixAwareTokenFilter, updateSuffixToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PrefixAwareTokenFilter, t_PrefixAwareTokenFilter, ::org::apache::lucene::analysis::TokenStream, PrefixAwareTokenFilter, t_PrefixAwareTokenFilter_init_, 0, 0, t_PrefixAwareTokenFilter__fields_, 0, 0);

          void t_PrefixAwareTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PrefixAwareTokenFilter), module, "PrefixAwareTokenFilter", 0);
          }

          void t_PrefixAwareTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PrefixAwareTokenFilter).tp_dict, "class_", make_descriptor(PrefixAwareTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PrefixAwareTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_PrefixAwareTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PrefixAwareTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PrefixAwareTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PrefixAwareTokenFilter::initializeClass, 1)))
              return NULL;
            return t_PrefixAwareTokenFilter::wrap_Object(PrefixAwareTokenFilter(((t_PrefixAwareTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_PrefixAwareTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PrefixAwareTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PrefixAwareTokenFilter_init_(t_PrefixAwareTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
            PrefixAwareTokenFilter object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
            {
              INT_CALL(object = PrefixAwareTokenFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PrefixAwareTokenFilter_close(t_PrefixAwareTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PrefixAwareTokenFilter), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_PrefixAwareTokenFilter_end(t_PrefixAwareTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PrefixAwareTokenFilter), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_PrefixAwareTokenFilter_getPrefix(t_PrefixAwareTokenFilter *self)
          {
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);
            OBJ_CALL(result = self->object.getPrefix());
            return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
          }

          static PyObject *t_PrefixAwareTokenFilter_getSuffix(t_PrefixAwareTokenFilter *self)
          {
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);
            OBJ_CALL(result = self->object.getSuffix());
            return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
          }

          static PyObject *t_PrefixAwareTokenFilter_incrementToken(t_PrefixAwareTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PrefixAwareTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_PrefixAwareTokenFilter_reset(t_PrefixAwareTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PrefixAwareTokenFilter), (PyObject *) self, "reset", args, 2);
          }

          static PyObject *t_PrefixAwareTokenFilter_setPrefix(t_PrefixAwareTokenFilter *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setPrefix(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPrefix", arg);
            return NULL;
          }

          static PyObject *t_PrefixAwareTokenFilter_setSuffix(t_PrefixAwareTokenFilter *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setSuffix(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setSuffix", arg);
            return NULL;
          }

          static PyObject *t_PrefixAwareTokenFilter_updateSuffixToken(t_PrefixAwareTokenFilter *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::Token a0((jobject) NULL);
            ::org::apache::lucene::analysis::Token a1((jobject) NULL);
            ::org::apache::lucene::analysis::Token result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Token::initializeClass, ::org::apache::lucene::analysis::Token::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.updateSuffixToken(a0, a1));
              return ::org::apache::lucene::analysis::t_Token::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "updateSuffixToken", args);
            return NULL;
          }

          static PyObject *t_PrefixAwareTokenFilter_get__prefix(t_PrefixAwareTokenFilter *self, void *data)
          {
            ::org::apache::lucene::analysis::TokenStream value((jobject) NULL);
            OBJ_CALL(value = self->object.getPrefix());
            return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(value);
          }
          static int t_PrefixAwareTokenFilter_set__prefix(t_PrefixAwareTokenFilter *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::analysis::TokenStream value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &value))
              {
                INT_CALL(self->object.setPrefix(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "prefix", arg);
            return -1;
          }

          static PyObject *t_PrefixAwareTokenFilter_get__suffix(t_PrefixAwareTokenFilter *self, void *data)
          {
            ::org::apache::lucene::analysis::TokenStream value((jobject) NULL);
            OBJ_CALL(value = self->object.getSuffix());
            return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(value);
          }
          static int t_PrefixAwareTokenFilter_set__suffix(t_PrefixAwareTokenFilter *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::analysis::TokenStream value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &value))
              {
                INT_CALL(self->object.setSuffix(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "suffix", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/OrdinalsReader.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/facet/taxonomy/OrdinalsReader$OrdinalsSegmentReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *OrdinalsReader::class$ = NULL;
          jmethodID *OrdinalsReader::mids$ = NULL;
          bool OrdinalsReader::live$ = false;

          jclass OrdinalsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/OrdinalsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getIndexFieldName_14c7b5c5] = env->getMethodID(cls, "getIndexFieldName", "()Ljava/lang/String;");
              mids$[mid_getReader_7c7f912a] = env->getMethodID(cls, "getReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/facet/taxonomy/OrdinalsReader$OrdinalsSegmentReader;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          OrdinalsReader::OrdinalsReader() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::java::lang::String OrdinalsReader::getIndexFieldName() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getIndexFieldName_14c7b5c5]));
          }

          ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader OrdinalsReader::getReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
          {
            return ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader(env->callObjectMethod(this$, mids$[mid_getReader_7c7f912a], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_OrdinalsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_OrdinalsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_OrdinalsReader_init_(t_OrdinalsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_OrdinalsReader_getIndexFieldName(t_OrdinalsReader *self);
          static PyObject *t_OrdinalsReader_getReader(t_OrdinalsReader *self, PyObject *arg);
          static PyObject *t_OrdinalsReader_get__indexFieldName(t_OrdinalsReader *self, void *data);
          static PyGetSetDef t_OrdinalsReader__fields_[] = {
            DECLARE_GET_FIELD(t_OrdinalsReader, indexFieldName),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_OrdinalsReader__methods_[] = {
            DECLARE_METHOD(t_OrdinalsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OrdinalsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OrdinalsReader, getIndexFieldName, METH_NOARGS),
            DECLARE_METHOD(t_OrdinalsReader, getReader, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(OrdinalsReader, t_OrdinalsReader, ::java::lang::Object, OrdinalsReader, t_OrdinalsReader_init_, 0, 0, t_OrdinalsReader__fields_, 0, 0);

          void t_OrdinalsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(OrdinalsReader), module, "OrdinalsReader", 0);
            PyDict_SetItemString(PY_TYPE(OrdinalsReader).tp_dict, "OrdinalsSegmentReader", make_descriptor(&PY_TYPE(OrdinalsReader$OrdinalsSegmentReader)));
          }

          void t_OrdinalsReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(OrdinalsReader).tp_dict, "class_", make_descriptor(OrdinalsReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(OrdinalsReader).tp_dict, "wrapfn_", make_descriptor(t_OrdinalsReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(OrdinalsReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_OrdinalsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, OrdinalsReader::initializeClass, 1)))
              return NULL;
            return t_OrdinalsReader::wrap_Object(OrdinalsReader(((t_OrdinalsReader *) arg)->object.this$));
          }
          static PyObject *t_OrdinalsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, OrdinalsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_OrdinalsReader_init_(t_OrdinalsReader *self, PyObject *args, PyObject *kwds)
          {
            OrdinalsReader object((jobject) NULL);

            INT_CALL(object = OrdinalsReader());
            self->object = object;

            return 0;
          }

          static PyObject *t_OrdinalsReader_getIndexFieldName(t_OrdinalsReader *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getIndexFieldName());
            return j2p(result);
          }

          static PyObject *t_OrdinalsReader_getReader(t_OrdinalsReader *self, PyObject *arg)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.getReader(a0));
              return ::org::apache::lucene::facet::taxonomy::t_OrdinalsReader$OrdinalsSegmentReader::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getReader", arg);
            return NULL;
          }

          static PyObject *t_OrdinalsReader_get__indexFieldName(t_OrdinalsReader *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getIndexFieldName());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Enum.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/Comparable.h"
#include "java/io/Serializable.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Enum::class$ = NULL;
    jmethodID *Enum::mids$ = NULL;
    bool Enum::live$ = false;

    jclass Enum::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Enum");

        mids$ = new jmethodID[max_mid];
        mids$[mid_compareTo_618aa849] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Enum;)I");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_getDeclaringClass_44a5f2c9] = env->getMethodID(cls, "getDeclaringClass", "()Ljava/lang/Class;");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
        mids$[mid_ordinal_54c6a179] = env->getMethodID(cls, "ordinal", "()I");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_valueOf_46e8491f] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;");
        mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
        mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    jint Enum::compareTo(const Enum & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareTo_618aa849], a0.this$);
    }

    jboolean Enum::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    ::java::lang::Class Enum::getDeclaringClass() const
    {
      return ::java::lang::Class(env->callObjectMethod(this$, mids$[mid_getDeclaringClass_44a5f2c9]));
    }

    jint Enum::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    ::java::lang::String Enum::name() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
    }

    jint Enum::ordinal() const
    {
      return env->callIntMethod(this$, mids$[mid_ordinal_54c6a179]);
    }

    ::java::lang::String Enum::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    Enum Enum::valueOf(const ::java::lang::Class & a0, const ::java::lang::String & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return Enum(env->callStaticObjectMethod(cls, mids$[mid_valueOf_46e8491f], a0.this$, a1.this$));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Enum_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Enum_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Enum_of_(t_Enum *self, PyObject *args);
    static PyObject *t_Enum_compareTo(t_Enum *self, PyObject *arg);
    static PyObject *t_Enum_equals(t_Enum *self, PyObject *args);
    static PyObject *t_Enum_getDeclaringClass(t_Enum *self);
    static PyObject *t_Enum_hashCode(t_Enum *self, PyObject *args);
    static PyObject *t_Enum_name(t_Enum *self);
    static PyObject *t_Enum_ordinal(t_Enum *self);
    static PyObject *t_Enum_toString(t_Enum *self, PyObject *args);
    static PyObject *t_Enum_valueOf(PyTypeObject *type, PyObject *args);
    static PyObject *t_Enum_get__declaringClass(t_Enum *self, void *data);
    static PyObject *t_Enum_get__parameters_(t_Enum *self, void *data);
    static PyGetSetDef t_Enum__fields_[] = {
      DECLARE_GET_FIELD(t_Enum, declaringClass),
      DECLARE_GET_FIELD(t_Enum, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Enum__methods_[] = {
      DECLARE_METHOD(t_Enum, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Enum, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Enum, of_, METH_VARARGS),
      DECLARE_METHOD(t_Enum, compareTo, METH_O),
      DECLARE_METHOD(t_Enum, equals, METH_VARARGS),
      DECLARE_METHOD(t_Enum, getDeclaringClass, METH_NOARGS),
      DECLARE_METHOD(t_Enum, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Enum, name, METH_NOARGS),
      DECLARE_METHOD(t_Enum, ordinal, METH_NOARGS),
      DECLARE_METHOD(t_Enum, toString, METH_VARARGS),
      DECLARE_METHOD(t_Enum, valueOf, METH_VARARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Enum, t_Enum, ::java::lang::Object, Enum, abstract_init, 0, 0, t_Enum__fields_, 0, 0);
    PyObject *t_Enum::wrap_Object(const Enum& object, PyTypeObject *p0)
    {
      PyObject *obj = t_Enum::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_Enum *self = (t_Enum *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    PyObject *t_Enum::wrap_jobject(const jobject& object, PyTypeObject *p0)
    {
      PyObject *obj = t_Enum::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_Enum *self = (t_Enum *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    void t_Enum::install(PyObject *module)
    {
      installType(&PY_TYPE(Enum), module, "Enum", 0);
    }

    void t_Enum::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Enum).tp_dict, "class_", make_descriptor(Enum::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Enum).tp_dict, "wrapfn_", make_descriptor(t_Enum::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Enum).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Enum_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Enum::initializeClass, 1)))
        return NULL;
      return t_Enum::wrap_Object(Enum(((t_Enum *) arg)->object.this$));
    }
    static PyObject *t_Enum_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Enum::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Enum_of_(t_Enum *self, PyObject *args)
    {
      if (!parseArg(args, "T", 1, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static PyObject *t_Enum_compareTo(t_Enum *self, PyObject *arg)
    {
      Enum a0((jobject) NULL);
      PyTypeObject **p0;
      jint result;

      if (!parseArg(arg, "K", Enum::initializeClass, &a0, &p0, t_Enum::parameters_))
      {
        OBJ_CALL(result = self->object.compareTo(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
      return NULL;
    }

    static PyObject *t_Enum_equals(t_Enum *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(Enum), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Enum_getDeclaringClass(t_Enum *self)
    {
      ::java::lang::Class result((jobject) NULL);
      OBJ_CALL(result = self->object.getDeclaringClass());
      return ::java::lang::t_Class::wrap_Object(result, self->parameters[0]);
    }

    static PyObject *t_Enum_hashCode(t_Enum *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Enum), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Enum_name(t_Enum *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.name());
      return j2p(result);
    }

    static PyObject *t_Enum_ordinal(t_Enum *self)
    {
      jint result;
      OBJ_CALL(result = self->object.ordinal());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_Enum_toString(t_Enum *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(Enum), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Enum_valueOf(PyTypeObject *type, PyObject *args)
    {
      ::java::lang::Class a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::String a1((jobject) NULL);
      Enum result((jobject) NULL);

      if (!parseArgs(args, "Ks", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1))
      {
        OBJ_CALL(result = ::java::lang::Enum::valueOf(a0, a1));
        return p0 != NULL && p0[0] != NULL ? wrapType(p0[0], result.this$) : t_Enum::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "valueOf", args);
      return NULL;
    }
    static PyObject *t_Enum_get__parameters_(t_Enum *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }

    static PyObject *t_Enum_get__declaringClass(t_Enum *self, void *data)
    {
      ::java::lang::Class value((jobject) NULL);
      OBJ_CALL(value = self->object.getDeclaringClass());
      return ::java::lang::t_Class::wrap_Object(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QuotedFieldQueryNode.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/CloneNotSupportedException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *QuotedFieldQueryNode::class$ = NULL;
              jmethodID *QuotedFieldQueryNode::mids$ = NULL;
              bool QuotedFieldQueryNode::live$ = false;

              jclass QuotedFieldQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/QuotedFieldQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_ddd81d4e] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;II)V");
                  mids$[mid_cloneTree_e948922b] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QuotedFieldQueryNode;");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              QuotedFieldQueryNode::QuotedFieldQueryNode(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1, jint a2, jint a3) : ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode(env->newObject(initializeClass, &mids$, mid_init$_ddd81d4e, a0.this$, a1.this$, a2, a3)) {}

              QuotedFieldQueryNode QuotedFieldQueryNode::cloneTree() const
              {
                return QuotedFieldQueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_e948922b]));
              }

              ::java::lang::CharSequence QuotedFieldQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String QuotedFieldQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_QuotedFieldQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QuotedFieldQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_QuotedFieldQueryNode_init_(t_QuotedFieldQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_QuotedFieldQueryNode_cloneTree(t_QuotedFieldQueryNode *self, PyObject *args);
              static PyObject *t_QuotedFieldQueryNode_toQueryString(t_QuotedFieldQueryNode *self, PyObject *args);
              static PyObject *t_QuotedFieldQueryNode_toString(t_QuotedFieldQueryNode *self, PyObject *args);

              static PyMethodDef t_QuotedFieldQueryNode__methods_[] = {
                DECLARE_METHOD(t_QuotedFieldQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QuotedFieldQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QuotedFieldQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_QuotedFieldQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_QuotedFieldQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(QuotedFieldQueryNode, t_QuotedFieldQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode, QuotedFieldQueryNode, t_QuotedFieldQueryNode_init_, 0, 0, 0, 0, 0);

              void t_QuotedFieldQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(QuotedFieldQueryNode), module, "QuotedFieldQueryNode", 0);
              }

              void t_QuotedFieldQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(QuotedFieldQueryNode).tp_dict, "class_", make_descriptor(QuotedFieldQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(QuotedFieldQueryNode).tp_dict, "wrapfn_", make_descriptor(t_QuotedFieldQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(QuotedFieldQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_QuotedFieldQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, QuotedFieldQueryNode::initializeClass, 1)))
                  return NULL;
                return t_QuotedFieldQueryNode::wrap_Object(QuotedFieldQueryNode(((t_QuotedFieldQueryNode *) arg)->object.this$));
              }
              static PyObject *t_QuotedFieldQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, QuotedFieldQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_QuotedFieldQueryNode_init_(t_QuotedFieldQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::CharSequence a1((jobject) NULL);
                jint a2;
                jint a3;
                QuotedFieldQueryNode object((jobject) NULL);

                if (!parseArgs(args, "OOII", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = QuotedFieldQueryNode(a0, a1, a2, a3));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_QuotedFieldQueryNode_cloneTree(t_QuotedFieldQueryNode *self, PyObject *args)
              {
                QuotedFieldQueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return t_QuotedFieldQueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(QuotedFieldQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_QuotedFieldQueryNode_toQueryString(t_QuotedFieldQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(QuotedFieldQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_QuotedFieldQueryNode_toString(t_QuotedFieldQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(QuotedFieldQueryNode), (PyObject *) self, "toString", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/SegmentingTokenizerBase.h"
#include "java/text/BreakIterator.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *SegmentingTokenizerBase::class$ = NULL;
          jmethodID *SegmentingTokenizerBase::mids$ = NULL;
          bool SegmentingTokenizerBase::live$ = false;

          jclass SegmentingTokenizerBase::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/SegmentingTokenizerBase");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_42e90ef8] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;Ljava/text/BreakIterator;)V");
              mids$[mid_init$_441b2340] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;Ljava/text/BreakIterator;)V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_setNextSentence_d8d154a6] = env->getMethodID(cls, "setNextSentence", "(II)V");
              mids$[mid_incrementWord_54c6a16a] = env->getMethodID(cls, "incrementWord", "()Z");
              mids$[mid_isSafeEnd_87fd5456] = env->getMethodID(cls, "isSafeEnd", "(C)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SegmentingTokenizerBase::SegmentingTokenizerBase(const ::java::io::Reader & a0, const ::java::text::BreakIterator & a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_42e90ef8, a0.this$, a1.this$)) {}

          SegmentingTokenizerBase::SegmentingTokenizerBase(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1, const ::java::text::BreakIterator & a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_441b2340, a0.this$, a1.this$, a2.this$)) {}

          void SegmentingTokenizerBase::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean SegmentingTokenizerBase::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void SegmentingTokenizerBase::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_SegmentingTokenizerBase_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SegmentingTokenizerBase_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SegmentingTokenizerBase_init_(t_SegmentingTokenizerBase *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SegmentingTokenizerBase_end(t_SegmentingTokenizerBase *self, PyObject *args);
          static PyObject *t_SegmentingTokenizerBase_incrementToken(t_SegmentingTokenizerBase *self, PyObject *args);
          static PyObject *t_SegmentingTokenizerBase_reset(t_SegmentingTokenizerBase *self, PyObject *args);

          static PyMethodDef t_SegmentingTokenizerBase__methods_[] = {
            DECLARE_METHOD(t_SegmentingTokenizerBase, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SegmentingTokenizerBase, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SegmentingTokenizerBase, end, METH_VARARGS),
            DECLARE_METHOD(t_SegmentingTokenizerBase, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_SegmentingTokenizerBase, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SegmentingTokenizerBase, t_SegmentingTokenizerBase, ::org::apache::lucene::analysis::Tokenizer, SegmentingTokenizerBase, t_SegmentingTokenizerBase_init_, 0, 0, 0, 0, 0);

          void t_SegmentingTokenizerBase::install(PyObject *module)
          {
            installType(&PY_TYPE(SegmentingTokenizerBase), module, "SegmentingTokenizerBase", 0);
          }

          void t_SegmentingTokenizerBase::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SegmentingTokenizerBase).tp_dict, "class_", make_descriptor(SegmentingTokenizerBase::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SegmentingTokenizerBase).tp_dict, "wrapfn_", make_descriptor(t_SegmentingTokenizerBase::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SegmentingTokenizerBase).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SegmentingTokenizerBase_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SegmentingTokenizerBase::initializeClass, 1)))
              return NULL;
            return t_SegmentingTokenizerBase::wrap_Object(SegmentingTokenizerBase(((t_SegmentingTokenizerBase *) arg)->object.this$));
          }
          static PyObject *t_SegmentingTokenizerBase_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SegmentingTokenizerBase::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SegmentingTokenizerBase_init_(t_SegmentingTokenizerBase *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::io::Reader a0((jobject) NULL);
                ::java::text::BreakIterator a1((jobject) NULL);
                SegmentingTokenizerBase object((jobject) NULL);

                if (!parseArgs(args, "kk", ::java::io::Reader::initializeClass, ::java::text::BreakIterator::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = SegmentingTokenizerBase(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                ::java::text::BreakIterator a2((jobject) NULL);
                SegmentingTokenizerBase object((jobject) NULL);

                if (!parseArgs(args, "kkk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, ::java::text::BreakIterator::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = SegmentingTokenizerBase(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SegmentingTokenizerBase_end(t_SegmentingTokenizerBase *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SegmentingTokenizerBase), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_SegmentingTokenizerBase_incrementToken(t_SegmentingTokenizerBase *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SegmentingTokenizerBase), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_SegmentingTokenizerBase_reset(t_SegmentingTokenizerBase *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SegmentingTokenizerBase), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/LowerCaseTokenizer.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *LowerCaseTokenizer::class$ = NULL;
          jmethodID *LowerCaseTokenizer::mids$ = NULL;
          bool LowerCaseTokenizer::live$ = false;

          jclass LowerCaseTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/LowerCaseTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_be7a3ecf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_normalize_39c7bd23] = env->getMethodID(cls, "normalize", "(I)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LowerCaseTokenizer::LowerCaseTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::core::LetterTokenizer(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          LowerCaseTokenizer::LowerCaseTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2) : ::org::apache::lucene::analysis::core::LetterTokenizer(env->newObject(initializeClass, &mids$, mid_init$_be7a3ecf, a0.this$, a1.this$, a2.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_LowerCaseTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LowerCaseTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LowerCaseTokenizer_init_(t_LowerCaseTokenizer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_LowerCaseTokenizer__methods_[] = {
            DECLARE_METHOD(t_LowerCaseTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LowerCaseTokenizer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LowerCaseTokenizer, t_LowerCaseTokenizer, ::org::apache::lucene::analysis::core::LetterTokenizer, LowerCaseTokenizer, t_LowerCaseTokenizer_init_, 0, 0, 0, 0, 0);

          void t_LowerCaseTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(LowerCaseTokenizer), module, "LowerCaseTokenizer", 0);
          }

          void t_LowerCaseTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LowerCaseTokenizer).tp_dict, "class_", make_descriptor(LowerCaseTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LowerCaseTokenizer).tp_dict, "wrapfn_", make_descriptor(t_LowerCaseTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LowerCaseTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LowerCaseTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LowerCaseTokenizer::initializeClass, 1)))
              return NULL;
            return t_LowerCaseTokenizer::wrap_Object(LowerCaseTokenizer(((t_LowerCaseTokenizer *) arg)->object.this$));
          }
          static PyObject *t_LowerCaseTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LowerCaseTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LowerCaseTokenizer_init_(t_LowerCaseTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                LowerCaseTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = LowerCaseTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                LowerCaseTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kkk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = LowerCaseTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/BytesRefHash.h"
#include "org/apache/lucene/util/BytesRefHash$BytesStartArray.h"
#include "org/apache/lucene/util/ByteBlockPool.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/Comparator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *BytesRefHash::class$ = NULL;
        jmethodID *BytesRefHash::mids$ = NULL;
        bool BytesRefHash::live$ = false;
        jint BytesRefHash::DEFAULT_CAPACITY = (jint) 0;

        jclass BytesRefHash::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/BytesRefHash");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_ca821364] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/ByteBlockPool;)V");
            mids$[mid_init$_348f324e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/ByteBlockPool;ILorg/apache/lucene/util/BytesRefHash$BytesStartArray;)V");
            mids$[mid_add_7bc03ddb] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_addByPoolOffset_39c7bd23] = env->getMethodID(cls, "addByPoolOffset", "(I)I");
            mids$[mid_byteStart_39c7bd23] = env->getMethodID(cls, "byteStart", "(I)I");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_clear_bb0c767f] = env->getMethodID(cls, "clear", "(Z)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_find_7bc03ddb] = env->getMethodID(cls, "find", "(Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_get_ce5e2005] = env->getMethodID(cls, "get", "(ILorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_reinit_54c6a166] = env->getMethodID(cls, "reinit", "()V");
            mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
            mids$[mid_sort_402cb660] = env->getMethodID(cls, "sort", "(Ljava/util/Comparator;)[I");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_CAPACITY = env->getStaticIntField(cls, "DEFAULT_CAPACITY");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BytesRefHash::BytesRefHash() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        BytesRefHash::BytesRefHash(const ::org::apache::lucene::util::ByteBlockPool & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ca821364, a0.this$)) {}

        BytesRefHash::BytesRefHash(const ::org::apache::lucene::util::ByteBlockPool & a0, jint a1, const ::org::apache::lucene::util::BytesRefHash$BytesStartArray & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_348f324e, a0.this$, a1, a2.this$)) {}

        jint BytesRefHash::add(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_add_7bc03ddb], a0.this$);
        }

        jint BytesRefHash::addByPoolOffset(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_addByPoolOffset_39c7bd23], a0);
        }

        jint BytesRefHash::byteStart(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_byteStart_39c7bd23], a0);
        }

        void BytesRefHash::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        void BytesRefHash::clear(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clear_bb0c767f], a0);
        }

        void BytesRefHash::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        jint BytesRefHash::find(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_find_7bc03ddb], a0.this$);
        }

        ::org::apache::lucene::util::BytesRef BytesRefHash::get(jint a0, const ::org::apache::lucene::util::BytesRef & a1) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_get_ce5e2005], a0, a1.this$));
        }

        void BytesRefHash::reinit() const
        {
          env->callVoidMethod(this$, mids$[mid_reinit_54c6a166]);
        }

        jint BytesRefHash::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
        }

        JArray< jint > BytesRefHash::sort(const ::java::util::Comparator & a0) const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_sort_402cb660], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/BytesRefHash$DirectBytesStartArray.h"
#include "org/apache/lucene/util/BytesRefHash$MaxBytesLengthExceededException.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_BytesRefHash_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BytesRefHash_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BytesRefHash_init_(t_BytesRefHash *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BytesRefHash_add(t_BytesRefHash *self, PyObject *arg);
        static PyObject *t_BytesRefHash_addByPoolOffset(t_BytesRefHash *self, PyObject *arg);
        static PyObject *t_BytesRefHash_byteStart(t_BytesRefHash *self, PyObject *arg);
        static PyObject *t_BytesRefHash_clear(t_BytesRefHash *self, PyObject *args);
        static PyObject *t_BytesRefHash_close(t_BytesRefHash *self);
        static PyObject *t_BytesRefHash_find(t_BytesRefHash *self, PyObject *arg);
        static PyObject *t_BytesRefHash_get(t_BytesRefHash *self, PyObject *args);
        static PyObject *t_BytesRefHash_reinit(t_BytesRefHash *self);
        static PyObject *t_BytesRefHash_size(t_BytesRefHash *self);
        static PyObject *t_BytesRefHash_sort(t_BytesRefHash *self, PyObject *arg);

        static PyMethodDef t_BytesRefHash__methods_[] = {
          DECLARE_METHOD(t_BytesRefHash, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefHash, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefHash, add, METH_O),
          DECLARE_METHOD(t_BytesRefHash, addByPoolOffset, METH_O),
          DECLARE_METHOD(t_BytesRefHash, byteStart, METH_O),
          DECLARE_METHOD(t_BytesRefHash, clear, METH_VARARGS),
          DECLARE_METHOD(t_BytesRefHash, close, METH_NOARGS),
          DECLARE_METHOD(t_BytesRefHash, find, METH_O),
          DECLARE_METHOD(t_BytesRefHash, get, METH_VARARGS),
          DECLARE_METHOD(t_BytesRefHash, reinit, METH_NOARGS),
          DECLARE_METHOD(t_BytesRefHash, size, METH_NOARGS),
          DECLARE_METHOD(t_BytesRefHash, sort, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BytesRefHash, t_BytesRefHash, ::java::lang::Object, BytesRefHash, t_BytesRefHash_init_, 0, 0, 0, 0, 0);

        void t_BytesRefHash::install(PyObject *module)
        {
          installType(&PY_TYPE(BytesRefHash), module, "BytesRefHash", 0);
          PyDict_SetItemString(PY_TYPE(BytesRefHash).tp_dict, "DirectBytesStartArray", make_descriptor(&PY_TYPE(BytesRefHash$DirectBytesStartArray)));
          PyDict_SetItemString(PY_TYPE(BytesRefHash).tp_dict, "BytesStartArray", make_descriptor(&PY_TYPE(BytesRefHash$BytesStartArray)));
          PyDict_SetItemString(PY_TYPE(BytesRefHash).tp_dict, "MaxBytesLengthExceededException", make_descriptor(&PY_TYPE(BytesRefHash$MaxBytesLengthExceededException)));
        }

        void t_BytesRefHash::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BytesRefHash).tp_dict, "class_", make_descriptor(BytesRefHash::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BytesRefHash).tp_dict, "wrapfn_", make_descriptor(t_BytesRefHash::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BytesRefHash).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(BytesRefHash::initializeClass);
          PyDict_SetItemString(PY_TYPE(BytesRefHash).tp_dict, "DEFAULT_CAPACITY", make_descriptor(BytesRefHash::DEFAULT_CAPACITY));
        }

        static PyObject *t_BytesRefHash_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BytesRefHash::initializeClass, 1)))
            return NULL;
          return t_BytesRefHash::wrap_Object(BytesRefHash(((t_BytesRefHash *) arg)->object.this$));
        }
        static PyObject *t_BytesRefHash_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BytesRefHash::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BytesRefHash_init_(t_BytesRefHash *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              BytesRefHash object((jobject) NULL);

              INT_CALL(object = BytesRefHash());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              ::org::apache::lucene::util::ByteBlockPool a0((jobject) NULL);
              BytesRefHash object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::ByteBlockPool::initializeClass, &a0))
              {
                INT_CALL(object = BytesRefHash(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::org::apache::lucene::util::ByteBlockPool a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::util::BytesRefHash$BytesStartArray a2((jobject) NULL);
              BytesRefHash object((jobject) NULL);

              if (!parseArgs(args, "kIk", ::org::apache::lucene::util::ByteBlockPool::initializeClass, ::org::apache::lucene::util::BytesRefHash$BytesStartArray::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = BytesRefHash(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BytesRefHash_add(t_BytesRefHash *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.add(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "add", arg);
          return NULL;
        }

        static PyObject *t_BytesRefHash_addByPoolOffset(t_BytesRefHash *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.addByPoolOffset(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "addByPoolOffset", arg);
          return NULL;
        }

        static PyObject *t_BytesRefHash_byteStart(t_BytesRefHash *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.byteStart(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "byteStart", arg);
          return NULL;
        }

        static PyObject *t_BytesRefHash_clear(t_BytesRefHash *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }
            break;
           case 1:
            {
              jboolean a0;

              if (!parseArgs(args, "Z", &a0))
              {
                OBJ_CALL(self->object.clear(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "clear", args);
          return NULL;
        }

        static PyObject *t_BytesRefHash_close(t_BytesRefHash *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_BytesRefHash_find(t_BytesRefHash *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.find(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "find", arg);
          return NULL;
        }

        static PyObject *t_BytesRefHash_get(t_BytesRefHash *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, "Ik", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.get(a0, a1));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", args);
          return NULL;
        }

        static PyObject *t_BytesRefHash_reinit(t_BytesRefHash *self)
        {
          OBJ_CALL(self->object.reinit());
          Py_RETURN_NONE;
        }

        static PyObject *t_BytesRefHash_size(t_BytesRefHash *self)
        {
          jint result;
          OBJ_CALL(result = self->object.size());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_BytesRefHash_sort(t_BytesRefHash *self, PyObject *arg)
        {
          ::java::util::Comparator a0((jobject) NULL);
          PyTypeObject **p0;
          JArray< jint > result((jobject) NULL);

          if (!parseArg(arg, "K", ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(result = self->object.sort(a0));
            return result.wrap();
          }

          PyErr_SetArgsError((PyObject *) self, "sort", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/TermRangeQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldQueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {

              ::java::lang::Class *TermRangeQueryNode::class$ = NULL;
              jmethodID *TermRangeQueryNode::mids$ = NULL;
              bool TermRangeQueryNode::live$ = false;

              jclass TermRangeQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/nodes/TermRangeQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_b4afba80] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldQueryNode;Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldQueryNode;ZZ)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              TermRangeQueryNode::TermRangeQueryNode(const ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode & a0, const ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode & a1, jboolean a2, jboolean a3) : ::org::apache::lucene::queryparser::flexible::standard::nodes::AbstractRangeQueryNode(env->newObject(initializeClass, &mids$, mid_init$_b4afba80, a0.this$, a1.this$, a2, a3)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {
              static PyObject *t_TermRangeQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_TermRangeQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_TermRangeQueryNode_of_(t_TermRangeQueryNode *self, PyObject *args);
              static int t_TermRangeQueryNode_init_(t_TermRangeQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_TermRangeQueryNode_get__parameters_(t_TermRangeQueryNode *self, void *data);
              static PyGetSetDef t_TermRangeQueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_TermRangeQueryNode, parameters_),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_TermRangeQueryNode__methods_[] = {
                DECLARE_METHOD(t_TermRangeQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_TermRangeQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_TermRangeQueryNode, of_, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(TermRangeQueryNode, t_TermRangeQueryNode, ::org::apache::lucene::queryparser::flexible::standard::nodes::AbstractRangeQueryNode, TermRangeQueryNode, t_TermRangeQueryNode_init_, 0, 0, t_TermRangeQueryNode__fields_, 0, 0);
              PyObject *t_TermRangeQueryNode::wrap_Object(const TermRangeQueryNode& object, PyTypeObject *p0)
              {
                PyObject *obj = t_TermRangeQueryNode::wrap_Object(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_TermRangeQueryNode *self = (t_TermRangeQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              PyObject *t_TermRangeQueryNode::wrap_jobject(const jobject& object, PyTypeObject *p0)
              {
                PyObject *obj = t_TermRangeQueryNode::wrap_jobject(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_TermRangeQueryNode *self = (t_TermRangeQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              void t_TermRangeQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(TermRangeQueryNode), module, "TermRangeQueryNode", 0);
              }

              void t_TermRangeQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(TermRangeQueryNode).tp_dict, "class_", make_descriptor(TermRangeQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(TermRangeQueryNode).tp_dict, "wrapfn_", make_descriptor(t_TermRangeQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(TermRangeQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_TermRangeQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, TermRangeQueryNode::initializeClass, 1)))
                  return NULL;
                return t_TermRangeQueryNode::wrap_Object(TermRangeQueryNode(((t_TermRangeQueryNode *) arg)->object.this$));
              }
              static PyObject *t_TermRangeQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, TermRangeQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_TermRangeQueryNode_of_(t_TermRangeQueryNode *self, PyObject *args)
              {
                if (!parseArg(args, "T", 1, &(self->parameters)))
                  Py_RETURN_SELF;
                return PyErr_SetArgsError((PyObject *) self, "of_", args);
              }

              static int t_TermRangeQueryNode_init_(t_TermRangeQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode a1((jobject) NULL);
                jboolean a2;
                jboolean a3;
                TermRangeQueryNode object((jobject) NULL);

                if (!parseArgs(args, "kkZZ", ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode::initializeClass, ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = TermRangeQueryNode(a0, a1, a2, a3));
                  self->object = object;
                  self->parameters[0] = &::org::apache::lucene::queryparser::flexible::core::nodes::PY_TYPE(FieldQueryNode);
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }
              static PyObject *t_TermRangeQueryNode_get__parameters_(t_TermRangeQueryNode *self, void *data)
              {
                return typeParameters(self->parameters, sizeof(self->parameters));
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/FuzzyLikeThisQueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *FuzzyLikeThisQueryBuilder::class$ = NULL;
            jmethodID *FuzzyLikeThisQueryBuilder::mids$ = NULL;
            bool FuzzyLikeThisQueryBuilder::live$ = false;

            jclass FuzzyLikeThisQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/FuzzyLikeThisQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_31619410] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FuzzyLikeThisQueryBuilder::FuzzyLikeThisQueryBuilder(const ::org::apache::lucene::analysis::Analyzer & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_31619410, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_FuzzyLikeThisQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FuzzyLikeThisQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FuzzyLikeThisQueryBuilder_init_(t_FuzzyLikeThisQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_FuzzyLikeThisQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_FuzzyLikeThisQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FuzzyLikeThisQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FuzzyLikeThisQueryBuilder, t_FuzzyLikeThisQueryBuilder, ::java::lang::Object, FuzzyLikeThisQueryBuilder, t_FuzzyLikeThisQueryBuilder_init_, 0, 0, 0, 0, 0);

            void t_FuzzyLikeThisQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(FuzzyLikeThisQueryBuilder), module, "FuzzyLikeThisQueryBuilder", 0);
            }

            void t_FuzzyLikeThisQueryBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FuzzyLikeThisQueryBuilder).tp_dict, "class_", make_descriptor(FuzzyLikeThisQueryBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FuzzyLikeThisQueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_FuzzyLikeThisQueryBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FuzzyLikeThisQueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FuzzyLikeThisQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FuzzyLikeThisQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_FuzzyLikeThisQueryBuilder::wrap_Object(FuzzyLikeThisQueryBuilder(((t_FuzzyLikeThisQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_FuzzyLikeThisQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FuzzyLikeThisQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FuzzyLikeThisQueryBuilder_init_(t_FuzzyLikeThisQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
              FuzzyLikeThisQueryBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
              {
                INT_CALL(object = FuzzyLikeThisQueryBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/BooleanQueryNode.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/CloneNotSupportedException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *BooleanQueryNode::class$ = NULL;
              jmethodID *BooleanQueryNode::mids$ = NULL;
              bool BooleanQueryNode::live$ = false;

              jclass BooleanQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/BooleanQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_1fde8fc3] = env->getMethodID(cls, "<init>", "(Ljava/util/List;)V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              BooleanQueryNode::BooleanQueryNode(const ::java::util::List & a0) : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_1fde8fc3, a0.this$)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode BooleanQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              ::java::lang::CharSequence BooleanQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String BooleanQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_BooleanQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_BooleanQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_BooleanQueryNode_init_(t_BooleanQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_BooleanQueryNode_cloneTree(t_BooleanQueryNode *self, PyObject *args);
              static PyObject *t_BooleanQueryNode_toQueryString(t_BooleanQueryNode *self, PyObject *args);
              static PyObject *t_BooleanQueryNode_toString(t_BooleanQueryNode *self, PyObject *args);

              static PyMethodDef t_BooleanQueryNode__methods_[] = {
                DECLARE_METHOD(t_BooleanQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BooleanQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BooleanQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_BooleanQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_BooleanQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(BooleanQueryNode, t_BooleanQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, BooleanQueryNode, t_BooleanQueryNode_init_, 0, 0, 0, 0, 0);

              void t_BooleanQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(BooleanQueryNode), module, "BooleanQueryNode", 0);
              }

              void t_BooleanQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(BooleanQueryNode).tp_dict, "class_", make_descriptor(BooleanQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(BooleanQueryNode).tp_dict, "wrapfn_", make_descriptor(t_BooleanQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(BooleanQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_BooleanQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, BooleanQueryNode::initializeClass, 1)))
                  return NULL;
                return t_BooleanQueryNode::wrap_Object(BooleanQueryNode(((t_BooleanQueryNode *) arg)->object.this$));
              }
              static PyObject *t_BooleanQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, BooleanQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_BooleanQueryNode_init_(t_BooleanQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::util::List a0((jobject) NULL);
                PyTypeObject **p0;
                BooleanQueryNode object((jobject) NULL);

                if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
                {
                  INT_CALL(object = BooleanQueryNode(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_BooleanQueryNode_cloneTree(t_BooleanQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(BooleanQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_BooleanQueryNode_toQueryString(t_BooleanQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(BooleanQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_BooleanQueryNode_toString(t_BooleanQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(BooleanQueryNode), (PyObject *) self, "toString", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/TermRangeQueryNodeBuilder.h"
#include "org/apache/lucene/search/TermRangeQuery.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *TermRangeQueryNodeBuilder::class$ = NULL;
              jmethodID *TermRangeQueryNodeBuilder::mids$ = NULL;
              bool TermRangeQueryNodeBuilder::live$ = false;

              jclass TermRangeQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/TermRangeQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_fc6e9165] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/TermRangeQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              TermRangeQueryNodeBuilder::TermRangeQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::TermRangeQuery TermRangeQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::TermRangeQuery(env->callObjectMethod(this$, mids$[mid_build_fc6e9165], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_TermRangeQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_TermRangeQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_TermRangeQueryNodeBuilder_init_(t_TermRangeQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_TermRangeQueryNodeBuilder_build(t_TermRangeQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_TermRangeQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_TermRangeQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_TermRangeQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_TermRangeQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(TermRangeQueryNodeBuilder, t_TermRangeQueryNodeBuilder, ::java::lang::Object, TermRangeQueryNodeBuilder, t_TermRangeQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_TermRangeQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(TermRangeQueryNodeBuilder), module, "TermRangeQueryNodeBuilder", 0);
              }

              void t_TermRangeQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(TermRangeQueryNodeBuilder).tp_dict, "class_", make_descriptor(TermRangeQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(TermRangeQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_TermRangeQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(TermRangeQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_TermRangeQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, TermRangeQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_TermRangeQueryNodeBuilder::wrap_Object(TermRangeQueryNodeBuilder(((t_TermRangeQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_TermRangeQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, TermRangeQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_TermRangeQueryNodeBuilder_init_(t_TermRangeQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                TermRangeQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = TermRangeQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_TermRangeQueryNodeBuilder_build(t_TermRangeQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::TermRangeQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_TermRangeQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/FieldDateResolutionFCListener.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "org/apache/lucene/queryparser/flexible/core/config/FieldConfigListener.h"
#include "org/apache/lucene/queryparser/flexible/core/config/FieldConfig.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {

              ::java::lang::Class *FieldDateResolutionFCListener::class$ = NULL;
              jmethodID *FieldDateResolutionFCListener::mids$ = NULL;
              bool FieldDateResolutionFCListener::live$ = false;

              jclass FieldDateResolutionFCListener::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/config/FieldDateResolutionFCListener");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_0b1f7132] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");
                  mids$[mid_buildFieldConfig_aaab7c6b] = env->getMethodID(cls, "buildFieldConfig", "(Lorg/apache/lucene/queryparser/flexible/core/config/FieldConfig;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              FieldDateResolutionFCListener::FieldDateResolutionFCListener(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_0b1f7132, a0.this$)) {}

              void FieldDateResolutionFCListener::buildFieldConfig(const ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_buildFieldConfig_aaab7c6b], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {
              static PyObject *t_FieldDateResolutionFCListener_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FieldDateResolutionFCListener_instance_(PyTypeObject *type, PyObject *arg);
              static int t_FieldDateResolutionFCListener_init_(t_FieldDateResolutionFCListener *self, PyObject *args, PyObject *kwds);
              static PyObject *t_FieldDateResolutionFCListener_buildFieldConfig(t_FieldDateResolutionFCListener *self, PyObject *arg);

              static PyMethodDef t_FieldDateResolutionFCListener__methods_[] = {
                DECLARE_METHOD(t_FieldDateResolutionFCListener, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldDateResolutionFCListener, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldDateResolutionFCListener, buildFieldConfig, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(FieldDateResolutionFCListener, t_FieldDateResolutionFCListener, ::java::lang::Object, FieldDateResolutionFCListener, t_FieldDateResolutionFCListener_init_, 0, 0, 0, 0, 0);

              void t_FieldDateResolutionFCListener::install(PyObject *module)
              {
                installType(&PY_TYPE(FieldDateResolutionFCListener), module, "FieldDateResolutionFCListener", 0);
              }

              void t_FieldDateResolutionFCListener::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(FieldDateResolutionFCListener).tp_dict, "class_", make_descriptor(FieldDateResolutionFCListener::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(FieldDateResolutionFCListener).tp_dict, "wrapfn_", make_descriptor(t_FieldDateResolutionFCListener::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(FieldDateResolutionFCListener).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FieldDateResolutionFCListener_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FieldDateResolutionFCListener::initializeClass, 1)))
                  return NULL;
                return t_FieldDateResolutionFCListener::wrap_Object(FieldDateResolutionFCListener(((t_FieldDateResolutionFCListener *) arg)->object.this$));
              }
              static PyObject *t_FieldDateResolutionFCListener_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FieldDateResolutionFCListener::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_FieldDateResolutionFCListener_init_(t_FieldDateResolutionFCListener *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);
                FieldDateResolutionFCListener object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                {
                  INT_CALL(object = FieldDateResolutionFCListener(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_FieldDateResolutionFCListener_buildFieldConfig(t_FieldDateResolutionFCListener *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.buildFieldConfig(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "buildFieldConfig", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/WAH8DocIdSet.h"
#include "java/util/Collection.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *WAH8DocIdSet::class$ = NULL;
        jmethodID *WAH8DocIdSet::mids$ = NULL;
        bool WAH8DocIdSet::live$ = false;
        jint WAH8DocIdSet::DEFAULT_INDEX_INTERVAL = (jint) 0;

        jclass WAH8DocIdSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/WAH8DocIdSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_cardinality_54c6a179] = env->getMethodID(cls, "cardinality", "()I");
            mids$[mid_intersect_b06562c3] = env->getStaticMethodID(cls, "intersect", "(Ljava/util/Collection;)Lorg/apache/lucene/util/WAH8DocIdSet;");
            mids$[mid_intersect_8ad105f3] = env->getStaticMethodID(cls, "intersect", "(Ljava/util/Collection;I)Lorg/apache/lucene/util/WAH8DocIdSet;");
            mids$[mid_isCacheable_54c6a16a] = env->getMethodID(cls, "isCacheable", "()Z");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_union_b06562c3] = env->getStaticMethodID(cls, "union", "(Ljava/util/Collection;)Lorg/apache/lucene/util/WAH8DocIdSet;");
            mids$[mid_union_8ad105f3] = env->getStaticMethodID(cls, "union", "(Ljava/util/Collection;I)Lorg/apache/lucene/util/WAH8DocIdSet;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_INDEX_INTERVAL = env->getStaticIntField(cls, "DEFAULT_INDEX_INTERVAL");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint WAH8DocIdSet::cardinality() const
        {
          return env->callIntMethod(this$, mids$[mid_cardinality_54c6a179]);
        }

        WAH8DocIdSet WAH8DocIdSet::intersect(const ::java::util::Collection & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return WAH8DocIdSet(env->callStaticObjectMethod(cls, mids$[mid_intersect_b06562c3], a0.this$));
        }

        WAH8DocIdSet WAH8DocIdSet::intersect(const ::java::util::Collection & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return WAH8DocIdSet(env->callStaticObjectMethod(cls, mids$[mid_intersect_8ad105f3], a0.this$, a1));
        }

        jboolean WAH8DocIdSet::isCacheable() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCacheable_54c6a16a]);
        }

        jlong WAH8DocIdSet::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }

        WAH8DocIdSet WAH8DocIdSet::union$(const ::java::util::Collection & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return WAH8DocIdSet(env->callStaticObjectMethod(cls, mids$[mid_union_b06562c3], a0.this$));
        }

        WAH8DocIdSet WAH8DocIdSet::union$(const ::java::util::Collection & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return WAH8DocIdSet(env->callStaticObjectMethod(cls, mids$[mid_union_8ad105f3], a0.this$, a1));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/WAH8DocIdSet$Builder.h"
#include "org/apache/lucene/util/WAH8DocIdSet$WordBuilder.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_WAH8DocIdSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_WAH8DocIdSet_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_WAH8DocIdSet_cardinality(t_WAH8DocIdSet *self);
        static PyObject *t_WAH8DocIdSet_intersect(PyTypeObject *type, PyObject *args);
        static PyObject *t_WAH8DocIdSet_isCacheable(t_WAH8DocIdSet *self, PyObject *args);
        static PyObject *t_WAH8DocIdSet_ramBytesUsed(t_WAH8DocIdSet *self, PyObject *args);
        static PyObject *t_WAH8DocIdSet_union(PyTypeObject *type, PyObject *args);
        static PyObject *t_WAH8DocIdSet_get__cacheable(t_WAH8DocIdSet *self, void *data);
        static PyGetSetDef t_WAH8DocIdSet__fields_[] = {
          DECLARE_GET_FIELD(t_WAH8DocIdSet, cacheable),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_WAH8DocIdSet__methods_[] = {
          DECLARE_METHOD(t_WAH8DocIdSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_WAH8DocIdSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_WAH8DocIdSet, cardinality, METH_NOARGS),
          DECLARE_METHOD(t_WAH8DocIdSet, intersect, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_WAH8DocIdSet, isCacheable, METH_VARARGS),
          DECLARE_METHOD(t_WAH8DocIdSet, ramBytesUsed, METH_VARARGS),
          DECLARE_METHOD(t_WAH8DocIdSet, union, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(WAH8DocIdSet, t_WAH8DocIdSet, ::org::apache::lucene::search::DocIdSet, WAH8DocIdSet, abstract_init, 0, 0, t_WAH8DocIdSet__fields_, 0, 0);

        void t_WAH8DocIdSet::install(PyObject *module)
        {
          installType(&PY_TYPE(WAH8DocIdSet), module, "WAH8DocIdSet", 0);
          PyDict_SetItemString(PY_TYPE(WAH8DocIdSet).tp_dict, "Builder", make_descriptor(&PY_TYPE(WAH8DocIdSet$Builder)));
          PyDict_SetItemString(PY_TYPE(WAH8DocIdSet).tp_dict, "WordBuilder", make_descriptor(&PY_TYPE(WAH8DocIdSet$WordBuilder)));
        }

        void t_WAH8DocIdSet::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(WAH8DocIdSet).tp_dict, "class_", make_descriptor(WAH8DocIdSet::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(WAH8DocIdSet).tp_dict, "wrapfn_", make_descriptor(t_WAH8DocIdSet::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(WAH8DocIdSet).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(WAH8DocIdSet::initializeClass);
          PyDict_SetItemString(PY_TYPE(WAH8DocIdSet).tp_dict, "DEFAULT_INDEX_INTERVAL", make_descriptor(WAH8DocIdSet::DEFAULT_INDEX_INTERVAL));
        }

        static PyObject *t_WAH8DocIdSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, WAH8DocIdSet::initializeClass, 1)))
            return NULL;
          return t_WAH8DocIdSet::wrap_Object(WAH8DocIdSet(((t_WAH8DocIdSet *) arg)->object.this$));
        }
        static PyObject *t_WAH8DocIdSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, WAH8DocIdSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_WAH8DocIdSet_cardinality(t_WAH8DocIdSet *self)
        {
          jint result;
          OBJ_CALL(result = self->object.cardinality());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_WAH8DocIdSet_intersect(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::util::Collection a0((jobject) NULL);
              PyTypeObject **p0;
              WAH8DocIdSet result((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::WAH8DocIdSet::intersect(a0));
                return t_WAH8DocIdSet::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              ::java::util::Collection a0((jobject) NULL);
              PyTypeObject **p0;
              jint a1;
              WAH8DocIdSet result((jobject) NULL);

              if (!parseArgs(args, "KI", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::WAH8DocIdSet::intersect(a0, a1));
                return t_WAH8DocIdSet::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "intersect", args);
          return NULL;
        }

        static PyObject *t_WAH8DocIdSet_isCacheable(t_WAH8DocIdSet *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.isCacheable());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(WAH8DocIdSet), (PyObject *) self, "isCacheable", args, 2);
        }

        static PyObject *t_WAH8DocIdSet_ramBytesUsed(t_WAH8DocIdSet *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(WAH8DocIdSet), (PyObject *) self, "ramBytesUsed", args, 2);
        }

        static PyObject *t_WAH8DocIdSet_union(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::util::Collection a0((jobject) NULL);
              PyTypeObject **p0;
              WAH8DocIdSet result((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::WAH8DocIdSet::union$(a0));
                return t_WAH8DocIdSet::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              ::java::util::Collection a0((jobject) NULL);
              PyTypeObject **p0;
              jint a1;
              WAH8DocIdSet result((jobject) NULL);

              if (!parseArgs(args, "KI", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::WAH8DocIdSet::union$(a0, a1));
                return t_WAH8DocIdSet::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "union", args);
          return NULL;
        }

        static PyObject *t_WAH8DocIdSet_get__cacheable(t_WAH8DocIdSet *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isCacheable());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/synonym/WordnetSynonymParser.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {

          ::java::lang::Class *WordnetSynonymParser::class$ = NULL;
          jmethodID *WordnetSynonymParser::mids$ = NULL;
          bool WordnetSynonymParser::live$ = false;

          jclass WordnetSynonymParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/synonym/WordnetSynonymParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_702f1f56] = env->getMethodID(cls, "<init>", "(ZZLorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_parse_cf2e3c10] = env->getMethodID(cls, "parse", "(Ljava/io/Reader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WordnetSynonymParser::WordnetSynonymParser(jboolean a0, jboolean a1, const ::org::apache::lucene::analysis::Analyzer & a2) : ::org::apache::lucene::analysis::synonym::SynonymMap$Parser(env->newObject(initializeClass, &mids$, mid_init$_702f1f56, a0, a1, a2.this$)) {}

          void WordnetSynonymParser::parse(const ::java::io::Reader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_parse_cf2e3c10], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {
          static PyObject *t_WordnetSynonymParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WordnetSynonymParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WordnetSynonymParser_init_(t_WordnetSynonymParser *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WordnetSynonymParser_parse(t_WordnetSynonymParser *self, PyObject *args);

          static PyMethodDef t_WordnetSynonymParser__methods_[] = {
            DECLARE_METHOD(t_WordnetSynonymParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordnetSynonymParser, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordnetSynonymParser, parse, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WordnetSynonymParser, t_WordnetSynonymParser, ::org::apache::lucene::analysis::synonym::SynonymMap$Parser, WordnetSynonymParser, t_WordnetSynonymParser_init_, 0, 0, 0, 0, 0);

          void t_WordnetSynonymParser::install(PyObject *module)
          {
            installType(&PY_TYPE(WordnetSynonymParser), module, "WordnetSynonymParser", 0);
          }

          void t_WordnetSynonymParser::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WordnetSynonymParser).tp_dict, "class_", make_descriptor(WordnetSynonymParser::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WordnetSynonymParser).tp_dict, "wrapfn_", make_descriptor(t_WordnetSynonymParser::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WordnetSynonymParser).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_WordnetSynonymParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WordnetSynonymParser::initializeClass, 1)))
              return NULL;
            return t_WordnetSynonymParser::wrap_Object(WordnetSynonymParser(((t_WordnetSynonymParser *) arg)->object.this$));
          }
          static PyObject *t_WordnetSynonymParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WordnetSynonymParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WordnetSynonymParser_init_(t_WordnetSynonymParser *self, PyObject *args, PyObject *kwds)
          {
            jboolean a0;
            jboolean a1;
            ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
            WordnetSynonymParser object((jobject) NULL);

            if (!parseArgs(args, "ZZk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = WordnetSynonymParser(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_WordnetSynonymParser_parse(t_WordnetSynonymParser *self, PyObject *args)
          {
            ::java::io::Reader a0((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.parse(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(WordnetSynonymParser), (PyObject *) self, "parse", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/config/FieldConfigListener.h"
#include "org/apache/lucene/queryparser/flexible/core/config/FieldConfig.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace config {

              ::java::lang::Class *FieldConfigListener::class$ = NULL;
              jmethodID *FieldConfigListener::mids$ = NULL;
              bool FieldConfigListener::live$ = false;

              jclass FieldConfigListener::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/config/FieldConfigListener");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_buildFieldConfig_aaab7c6b] = env->getMethodID(cls, "buildFieldConfig", "(Lorg/apache/lucene/queryparser/flexible/core/config/FieldConfig;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              void FieldConfigListener::buildFieldConfig(const ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_buildFieldConfig_aaab7c6b], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace config {
              static PyObject *t_FieldConfigListener_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FieldConfigListener_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FieldConfigListener_buildFieldConfig(t_FieldConfigListener *self, PyObject *arg);

              static PyMethodDef t_FieldConfigListener__methods_[] = {
                DECLARE_METHOD(t_FieldConfigListener, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldConfigListener, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldConfigListener, buildFieldConfig, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(FieldConfigListener, t_FieldConfigListener, ::java::lang::Object, FieldConfigListener, abstract_init, 0, 0, 0, 0, 0);

              void t_FieldConfigListener::install(PyObject *module)
              {
                installType(&PY_TYPE(FieldConfigListener), module, "FieldConfigListener", 0);
              }

              void t_FieldConfigListener::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(FieldConfigListener).tp_dict, "class_", make_descriptor(FieldConfigListener::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(FieldConfigListener).tp_dict, "wrapfn_", make_descriptor(t_FieldConfigListener::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(FieldConfigListener).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FieldConfigListener_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FieldConfigListener::initializeClass, 1)))
                  return NULL;
                return t_FieldConfigListener::wrap_Object(FieldConfigListener(((t_FieldConfigListener *) arg)->object.this$));
              }
              static PyObject *t_FieldConfigListener_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FieldConfigListener::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_FieldConfigListener_buildFieldConfig(t_FieldConfigListener *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.buildFieldConfig(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "buildFieldConfig", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/payloads/PayloadTermQuery.h"
#include "org/apache/lucene/search/payloads/PayloadFunction.h"
#include "org/apache/lucene/search/Weight.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/index/Term.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {

          ::java::lang::Class *PayloadTermQuery::class$ = NULL;
          jmethodID *PayloadTermQuery::mids$ = NULL;
          bool PayloadTermQuery::live$ = false;

          jclass PayloadTermQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/payloads/PayloadTermQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c933262d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;Lorg/apache/lucene/search/payloads/PayloadFunction;)V");
              mids$[mid_init$_dc8be042] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;Lorg/apache/lucene/search/payloads/PayloadFunction;Z)V");
              mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PayloadTermQuery::PayloadTermQuery(const ::org::apache::lucene::index::Term & a0, const ::org::apache::lucene::search::payloads::PayloadFunction & a1) : ::org::apache::lucene::search::spans::SpanTermQuery(env->newObject(initializeClass, &mids$, mid_init$_c933262d, a0.this$, a1.this$)) {}

          PayloadTermQuery::PayloadTermQuery(const ::org::apache::lucene::index::Term & a0, const ::org::apache::lucene::search::payloads::PayloadFunction & a1, jboolean a2) : ::org::apache::lucene::search::spans::SpanTermQuery(env->newObject(initializeClass, &mids$, mid_init$_dc8be042, a0.this$, a1.this$, a2)) {}

          ::org::apache::lucene::search::Weight PayloadTermQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
          {
            return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
          }

          jboolean PayloadTermQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint PayloadTermQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {
          static PyObject *t_PayloadTermQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadTermQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PayloadTermQuery_init_(t_PayloadTermQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PayloadTermQuery_createWeight(t_PayloadTermQuery *self, PyObject *args);
          static PyObject *t_PayloadTermQuery_equals(t_PayloadTermQuery *self, PyObject *args);
          static PyObject *t_PayloadTermQuery_hashCode(t_PayloadTermQuery *self, PyObject *args);

          static PyMethodDef t_PayloadTermQuery__methods_[] = {
            DECLARE_METHOD(t_PayloadTermQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadTermQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadTermQuery, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_PayloadTermQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_PayloadTermQuery, hashCode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PayloadTermQuery, t_PayloadTermQuery, ::org::apache::lucene::search::spans::SpanTermQuery, PayloadTermQuery, t_PayloadTermQuery_init_, 0, 0, 0, 0, 0);

          void t_PayloadTermQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(PayloadTermQuery), module, "PayloadTermQuery", 0);
          }

          void t_PayloadTermQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PayloadTermQuery).tp_dict, "class_", make_descriptor(PayloadTermQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PayloadTermQuery).tp_dict, "wrapfn_", make_descriptor(t_PayloadTermQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PayloadTermQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PayloadTermQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PayloadTermQuery::initializeClass, 1)))
              return NULL;
            return t_PayloadTermQuery::wrap_Object(PayloadTermQuery(((t_PayloadTermQuery *) arg)->object.this$));
          }
          static PyObject *t_PayloadTermQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PayloadTermQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PayloadTermQuery_init_(t_PayloadTermQuery *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::index::Term a0((jobject) NULL);
                ::org::apache::lucene::search::payloads::PayloadFunction a1((jobject) NULL);
                PayloadTermQuery object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::search::payloads::PayloadFunction::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = PayloadTermQuery(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::index::Term a0((jobject) NULL);
                ::org::apache::lucene::search::payloads::PayloadFunction a1((jobject) NULL);
                jboolean a2;
                PayloadTermQuery object((jobject) NULL);

                if (!parseArgs(args, "kkZ", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::search::payloads::PayloadFunction::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = PayloadTermQuery(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PayloadTermQuery_createWeight(t_PayloadTermQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::search::Weight result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.createWeight(a0));
              return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PayloadTermQuery), (PyObject *) self, "createWeight", args, 2);
          }

          static PyObject *t_PayloadTermQuery_equals(t_PayloadTermQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PayloadTermQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_PayloadTermQuery_hashCode(t_PayloadTermQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(PayloadTermQuery), (PyObject *) self, "hashCode", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedInts$Reader.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedInts$Reader::class$ = NULL;
          jmethodID *PackedInts$Reader::mids$ = NULL;
          bool PackedInts$Reader::live$ = false;

          jclass PackedInts$Reader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedInts$Reader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_get_d80d4c9e] = env->getMethodID(cls, "get", "(I[JII)I");
              mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PackedInts$Reader::PackedInts$Reader() : ::org::apache::lucene::index::NumericDocValues(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint PackedInts$Reader::get(jint a0, const JArray< jlong > & a1, jint a2, jint a3) const
          {
            return env->callIntMethod(this$, mids$[mid_get_d80d4c9e], a0, a1.this$, a2, a3);
          }

          jint PackedInts$Reader::size() const
          {
            return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedInts$Reader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Reader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PackedInts$Reader_init_(t_PackedInts$Reader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PackedInts$Reader_get(t_PackedInts$Reader *self, PyObject *args);
          static PyObject *t_PackedInts$Reader_size(t_PackedInts$Reader *self);

          static PyMethodDef t_PackedInts$Reader__methods_[] = {
            DECLARE_METHOD(t_PackedInts$Reader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Reader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Reader, get, METH_VARARGS),
            DECLARE_METHOD(t_PackedInts$Reader, size, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedInts$Reader, t_PackedInts$Reader, ::org::apache::lucene::index::NumericDocValues, PackedInts$Reader, t_PackedInts$Reader_init_, 0, 0, 0, 0, 0);

          void t_PackedInts$Reader::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedInts$Reader), module, "PackedInts$Reader", 0);
          }

          void t_PackedInts$Reader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedInts$Reader).tp_dict, "class_", make_descriptor(PackedInts$Reader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedInts$Reader).tp_dict, "wrapfn_", make_descriptor(t_PackedInts$Reader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedInts$Reader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedInts$Reader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedInts$Reader::initializeClass, 1)))
              return NULL;
            return t_PackedInts$Reader::wrap_Object(PackedInts$Reader(((t_PackedInts$Reader *) arg)->object.this$));
          }
          static PyObject *t_PackedInts$Reader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedInts$Reader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PackedInts$Reader_init_(t_PackedInts$Reader *self, PyObject *args, PyObject *kwds)
          {
            PackedInts$Reader object((jobject) NULL);

            INT_CALL(object = PackedInts$Reader());
            self->object = object;

            return 0;
          }

          static PyObject *t_PackedInts$Reader_get(t_PackedInts$Reader *self, PyObject *args)
          {
            jint a0;
            JArray< jlong > a1((jobject) NULL);
            jint a2;
            jint a3;
            jint result;

            if (!parseArgs(args, "I[JII", &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.get(a0, a1, a2, a3));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(PackedInts$Reader), (PyObject *) self, "get", args, 2);
          }

          static PyObject *t_PackedInts$Reader_size(t_PackedInts$Reader *self)
          {
            jint result;
            OBJ_CALL(result = self->object.size());
            return PyInt_FromLong((long) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/ValueSourceScorer.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {

          ::java::lang::Class *ValueSourceScorer::class$ = NULL;
          jmethodID *ValueSourceScorer::mids$ = NULL;
          bool ValueSourceScorer::live$ = false;

          jclass ValueSourceScorer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/ValueSourceScorer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_advance_39c7bd23] = env->getMethodID(cls, "advance", "(I)I");
              mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
              mids$[mid_docID_54c6a179] = env->getMethodID(cls, "docID", "()I");
              mids$[mid_freq_54c6a179] = env->getMethodID(cls, "freq", "()I");
              mids$[mid_getReader_94bbd010] = env->getMethodID(cls, "getReader", "()Lorg/apache/lucene/index/IndexReader;");
              mids$[mid_matches_39c7bd30] = env->getMethodID(cls, "matches", "(I)Z");
              mids$[mid_matchesValue_39c7bd30] = env->getMethodID(cls, "matchesValue", "(I)Z");
              mids$[mid_nextDoc_54c6a179] = env->getMethodID(cls, "nextDoc", "()I");
              mids$[mid_score_54c6a176] = env->getMethodID(cls, "score", "()F");
              mids$[mid_setCheckDeletes_bb0c767f] = env->getMethodID(cls, "setCheckDeletes", "(Z)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint ValueSourceScorer::advance(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_advance_39c7bd23], a0);
          }

          jlong ValueSourceScorer::cost() const
          {
            return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
          }

          jint ValueSourceScorer::docID() const
          {
            return env->callIntMethod(this$, mids$[mid_docID_54c6a179]);
          }

          jint ValueSourceScorer::freq() const
          {
            return env->callIntMethod(this$, mids$[mid_freq_54c6a179]);
          }

          ::org::apache::lucene::index::IndexReader ValueSourceScorer::getReader() const
          {
            return ::org::apache::lucene::index::IndexReader(env->callObjectMethod(this$, mids$[mid_getReader_94bbd010]));
          }

          jboolean ValueSourceScorer::matches(jint a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_matches_39c7bd30], a0);
          }

          jboolean ValueSourceScorer::matchesValue(jint a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_matchesValue_39c7bd30], a0);
          }

          jint ValueSourceScorer::nextDoc() const
          {
            return env->callIntMethod(this$, mids$[mid_nextDoc_54c6a179]);
          }

          jfloat ValueSourceScorer::score() const
          {
            return env->callFloatMethod(this$, mids$[mid_score_54c6a176]);
          }

          void ValueSourceScorer::setCheckDeletes(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setCheckDeletes_bb0c767f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          static PyObject *t_ValueSourceScorer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ValueSourceScorer_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ValueSourceScorer_advance(t_ValueSourceScorer *self, PyObject *args);
          static PyObject *t_ValueSourceScorer_cost(t_ValueSourceScorer *self, PyObject *args);
          static PyObject *t_ValueSourceScorer_docID(t_ValueSourceScorer *self, PyObject *args);
          static PyObject *t_ValueSourceScorer_freq(t_ValueSourceScorer *self, PyObject *args);
          static PyObject *t_ValueSourceScorer_getReader(t_ValueSourceScorer *self);
          static PyObject *t_ValueSourceScorer_matches(t_ValueSourceScorer *self, PyObject *arg);
          static PyObject *t_ValueSourceScorer_matchesValue(t_ValueSourceScorer *self, PyObject *arg);
          static PyObject *t_ValueSourceScorer_nextDoc(t_ValueSourceScorer *self, PyObject *args);
          static PyObject *t_ValueSourceScorer_score(t_ValueSourceScorer *self, PyObject *args);
          static PyObject *t_ValueSourceScorer_setCheckDeletes(t_ValueSourceScorer *self, PyObject *arg);
          static int t_ValueSourceScorer_set__checkDeletes(t_ValueSourceScorer *self, PyObject *arg, void *data);
          static PyObject *t_ValueSourceScorer_get__reader(t_ValueSourceScorer *self, void *data);
          static PyGetSetDef t_ValueSourceScorer__fields_[] = {
            DECLARE_SET_FIELD(t_ValueSourceScorer, checkDeletes),
            DECLARE_GET_FIELD(t_ValueSourceScorer, reader),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ValueSourceScorer__methods_[] = {
            DECLARE_METHOD(t_ValueSourceScorer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ValueSourceScorer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ValueSourceScorer, advance, METH_VARARGS),
            DECLARE_METHOD(t_ValueSourceScorer, cost, METH_VARARGS),
            DECLARE_METHOD(t_ValueSourceScorer, docID, METH_VARARGS),
            DECLARE_METHOD(t_ValueSourceScorer, freq, METH_VARARGS),
            DECLARE_METHOD(t_ValueSourceScorer, getReader, METH_NOARGS),
            DECLARE_METHOD(t_ValueSourceScorer, matches, METH_O),
            DECLARE_METHOD(t_ValueSourceScorer, matchesValue, METH_O),
            DECLARE_METHOD(t_ValueSourceScorer, nextDoc, METH_VARARGS),
            DECLARE_METHOD(t_ValueSourceScorer, score, METH_VARARGS),
            DECLARE_METHOD(t_ValueSourceScorer, setCheckDeletes, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ValueSourceScorer, t_ValueSourceScorer, ::org::apache::lucene::search::Scorer, ValueSourceScorer, abstract_init, 0, 0, t_ValueSourceScorer__fields_, 0, 0);

          void t_ValueSourceScorer::install(PyObject *module)
          {
            installType(&PY_TYPE(ValueSourceScorer), module, "ValueSourceScorer", 0);
          }

          void t_ValueSourceScorer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ValueSourceScorer).tp_dict, "class_", make_descriptor(ValueSourceScorer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ValueSourceScorer).tp_dict, "wrapfn_", make_descriptor(t_ValueSourceScorer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ValueSourceScorer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ValueSourceScorer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ValueSourceScorer::initializeClass, 1)))
              return NULL;
            return t_ValueSourceScorer::wrap_Object(ValueSourceScorer(((t_ValueSourceScorer *) arg)->object.this$));
          }
          static PyObject *t_ValueSourceScorer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ValueSourceScorer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_ValueSourceScorer_advance(t_ValueSourceScorer *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.advance(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(ValueSourceScorer), (PyObject *) self, "advance", args, 2);
          }

          static PyObject *t_ValueSourceScorer_cost(t_ValueSourceScorer *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.cost());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(ValueSourceScorer), (PyObject *) self, "cost", args, 2);
          }

          static PyObject *t_ValueSourceScorer_docID(t_ValueSourceScorer *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.docID());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(ValueSourceScorer), (PyObject *) self, "docID", args, 2);
          }

          static PyObject *t_ValueSourceScorer_freq(t_ValueSourceScorer *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.freq());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(ValueSourceScorer), (PyObject *) self, "freq", args, 2);
          }

          static PyObject *t_ValueSourceScorer_getReader(t_ValueSourceScorer *self)
          {
            ::org::apache::lucene::index::IndexReader result((jobject) NULL);
            OBJ_CALL(result = self->object.getReader());
            return ::org::apache::lucene::index::t_IndexReader::wrap_Object(result);
          }

          static PyObject *t_ValueSourceScorer_matches(t_ValueSourceScorer *self, PyObject *arg)
          {
            jint a0;
            jboolean result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.matches(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "matches", arg);
            return NULL;
          }

          static PyObject *t_ValueSourceScorer_matchesValue(t_ValueSourceScorer *self, PyObject *arg)
          {
            jint a0;
            jboolean result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.matchesValue(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "matchesValue", arg);
            return NULL;
          }

          static PyObject *t_ValueSourceScorer_nextDoc(t_ValueSourceScorer *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.nextDoc());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(ValueSourceScorer), (PyObject *) self, "nextDoc", args, 2);
          }

          static PyObject *t_ValueSourceScorer_score(t_ValueSourceScorer *self, PyObject *args)
          {
            jfloat result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.score());
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(ValueSourceScorer), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_ValueSourceScorer_setCheckDeletes(t_ValueSourceScorer *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setCheckDeletes(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setCheckDeletes", arg);
            return NULL;
          }

          static int t_ValueSourceScorer_set__checkDeletes(t_ValueSourceScorer *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setCheckDeletes(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "checkDeletes", arg);
            return -1;
          }

          static PyObject *t_ValueSourceScorer_get__reader(t_ValueSourceScorer *self, void *data)
          {
            ::org::apache::lucene::index::IndexReader value((jobject) NULL);
            OBJ_CALL(value = self->object.getReader());
            return ::org::apache::lucene::index::t_IndexReader::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/PrintWriter.h"
#include "java/util/Locale.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/io/FileNotFoundException.h"
#include "java/io/File.h"
#include "java/io/OutputStream.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace java {
  namespace io {

    ::java::lang::Class *PrintWriter::class$ = NULL;
    jmethodID *PrintWriter::mids$ = NULL;
    bool PrintWriter::live$ = false;

    jclass PrintWriter::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/io/PrintWriter");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_c3dacf57] = env->getMethodID(cls, "<init>", "(Ljava/io/File;)V");
        mids$[mid_init$_5bcd5850] = env->getMethodID(cls, "<init>", "(Ljava/io/Writer;)V");
        mids$[mid_init$_82d865f8] = env->getMethodID(cls, "<init>", "(Ljava/io/OutputStream;)V");
        mids$[mid_init$_a0fd6605] = env->getMethodID(cls, "<init>", "(Ljava/io/OutputStream;Z)V");
        mids$[mid_init$_b8789389] = env->getMethodID(cls, "<init>", "(Ljava/io/File;Ljava/lang/String;)V");
        mids$[mid_init$_4a264742] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;)V");
        mids$[mid_init$_53203e9d] = env->getMethodID(cls, "<init>", "(Ljava/io/Writer;Z)V");
        mids$[mid_append_4ea4b69d] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;)Ljava/io/PrintWriter;");
        mids$[mid_append_6cdbddb5] = env->getMethodID(cls, "append", "(C)Ljava/io/PrintWriter;");
        mids$[mid_append_19a20159] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;II)Ljava/io/PrintWriter;");
        mids$[mid_checkError_54c6a16a] = env->getMethodID(cls, "checkError", "()Z");
        mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
        mids$[mid_flush_54c6a166] = env->getMethodID(cls, "flush", "()V");
        mids$[mid_format_d515d1d7] = env->getMethodID(cls, "format", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintWriter;");
        mids$[mid_format_0bde164c] = env->getMethodID(cls, "format", "(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintWriter;");
        mids$[mid_print_290588ee] = env->getMethodID(cls, "print", "(Ljava/lang/Object;)V");
        mids$[mid_print_5d1c7645] = env->getMethodID(cls, "print", "(D)V");
        mids$[mid_print_87fd545a] = env->getMethodID(cls, "print", "(C)V");
        mids$[mid_print_700e23d6] = env->getMethodID(cls, "print", "([C)V");
        mids$[mid_print_bb0c767f] = env->getMethodID(cls, "print", "(Z)V");
        mids$[mid_print_39c7bd3c] = env->getMethodID(cls, "print", "(I)V");
        mids$[mid_print_5fdc3f48] = env->getMethodID(cls, "print", "(Ljava/lang/String;)V");
        mids$[mid_print_06298cab] = env->getMethodID(cls, "print", "(F)V");
        mids$[mid_print_0ee6df2f] = env->getMethodID(cls, "print", "(J)V");
        mids$[mid_printf_d515d1d7] = env->getMethodID(cls, "printf", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintWriter;");
        mids$[mid_printf_0bde164c] = env->getMethodID(cls, "printf", "(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintWriter;");
        mids$[mid_println_54c6a166] = env->getMethodID(cls, "println", "()V");
        mids$[mid_println_5fdc3f48] = env->getMethodID(cls, "println", "(Ljava/lang/String;)V");
        mids$[mid_println_0ee6df2f] = env->getMethodID(cls, "println", "(J)V");
        mids$[mid_println_bb0c767f] = env->getMethodID(cls, "println", "(Z)V");
        mids$[mid_println_06298cab] = env->getMethodID(cls, "println", "(F)V");
        mids$[mid_println_5d1c7645] = env->getMethodID(cls, "println", "(D)V");
        mids$[mid_println_39c7bd3c] = env->getMethodID(cls, "println", "(I)V");
        mids$[mid_println_700e23d6] = env->getMethodID(cls, "println", "([C)V");
        mids$[mid_println_290588ee] = env->getMethodID(cls, "println", "(Ljava/lang/Object;)V");
        mids$[mid_println_87fd545a] = env->getMethodID(cls, "println", "(C)V");
        mids$[mid_write_5fdc3f48] = env->getMethodID(cls, "write", "(Ljava/lang/String;)V");
        mids$[mid_write_700e23d6] = env->getMethodID(cls, "write", "([C)V");
        mids$[mid_write_39c7bd3c] = env->getMethodID(cls, "write", "(I)V");
        mids$[mid_write_6f0bb356] = env->getMethodID(cls, "write", "([CII)V");
        mids$[mid_write_555f322c] = env->getMethodID(cls, "write", "(Ljava/lang/String;II)V");
        mids$[mid_setError_54c6a166] = env->getMethodID(cls, "setError", "()V");
        mids$[mid_clearError_54c6a166] = env->getMethodID(cls, "clearError", "()V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    PrintWriter::PrintWriter(const ::java::lang::String & a0) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    PrintWriter::PrintWriter(const ::java::io::File & a0) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_c3dacf57, a0.this$)) {}

    PrintWriter::PrintWriter(const ::java::io::Writer & a0) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_5bcd5850, a0.this$)) {}

    PrintWriter::PrintWriter(const ::java::io::OutputStream & a0) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_82d865f8, a0.this$)) {}

    PrintWriter::PrintWriter(const ::java::io::OutputStream & a0, jboolean a1) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_a0fd6605, a0.this$, a1)) {}

    PrintWriter::PrintWriter(const ::java::io::File & a0, const ::java::lang::String & a1) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_b8789389, a0.this$, a1.this$)) {}

    PrintWriter::PrintWriter(const ::java::lang::String & a0, const ::java::lang::String & a1) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_4a264742, a0.this$, a1.this$)) {}

    PrintWriter::PrintWriter(const ::java::io::Writer & a0, jboolean a1) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_53203e9d, a0.this$, a1)) {}

    PrintWriter PrintWriter::append(const ::java::lang::CharSequence & a0) const
    {
      return PrintWriter(env->callObjectMethod(this$, mids$[mid_append_4ea4b69d], a0.this$));
    }

    PrintWriter PrintWriter::append(jchar a0) const
    {
      return PrintWriter(env->callObjectMethod(this$, mids$[mid_append_6cdbddb5], a0));
    }

    PrintWriter PrintWriter::append(const ::java::lang::CharSequence & a0, jint a1, jint a2) const
    {
      return PrintWriter(env->callObjectMethod(this$, mids$[mid_append_19a20159], a0.this$, a1, a2));
    }

    jboolean PrintWriter::checkError() const
    {
      return env->callBooleanMethod(this$, mids$[mid_checkError_54c6a16a]);
    }

    void PrintWriter::close() const
    {
      env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
    }

    void PrintWriter::flush() const
    {
      env->callVoidMethod(this$, mids$[mid_flush_54c6a166]);
    }

    PrintWriter PrintWriter::format(const ::java::lang::String & a0, const JArray< ::java::lang::Object > & a1) const
    {
      return PrintWriter(env->callObjectMethod(this$, mids$[mid_format_d515d1d7], a0.this$, a1.this$));
    }

    PrintWriter PrintWriter::format(const ::java::util::Locale & a0, const ::java::lang::String & a1, const JArray< ::java::lang::Object > & a2) const
    {
      return PrintWriter(env->callObjectMethod(this$, mids$[mid_format_0bde164c], a0.this$, a1.this$, a2.this$));
    }

    void PrintWriter::print(const ::java::lang::Object & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_print_290588ee], a0.this$);
    }

    void PrintWriter::print(jdouble a0) const
    {
      env->callVoidMethod(this$, mids$[mid_print_5d1c7645], a0);
    }

    void PrintWriter::print(jchar a0) const
    {
      env->callVoidMethod(this$, mids$[mid_print_87fd545a], a0);
    }

    void PrintWriter::print(const JArray< jchar > & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_print_700e23d6], a0.this$);
    }

    void PrintWriter::print(jboolean a0) const
    {
      env->callVoidMethod(this$, mids$[mid_print_bb0c767f], a0);
    }

    void PrintWriter::print(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_print_39c7bd3c], a0);
    }

    void PrintWriter::print(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_print_5fdc3f48], a0.this$);
    }

    void PrintWriter::print(jfloat a0) const
    {
      env->callVoidMethod(this$, mids$[mid_print_06298cab], a0);
    }

    void PrintWriter::print(jlong a0) const
    {
      env->callVoidMethod(this$, mids$[mid_print_0ee6df2f], a0);
    }

    PrintWriter PrintWriter::printf(const ::java::lang::String & a0, const JArray< ::java::lang::Object > & a1) const
    {
      return PrintWriter(env->callObjectMethod(this$, mids$[mid_printf_d515d1d7], a0.this$, a1.this$));
    }

    PrintWriter PrintWriter::printf(const ::java::util::Locale & a0, const ::java::lang::String & a1, const JArray< ::java::lang::Object > & a2) const
    {
      return PrintWriter(env->callObjectMethod(this$, mids$[mid_printf_0bde164c], a0.this$, a1.this$, a2.this$));
    }

    void PrintWriter::println() const
    {
      env->callVoidMethod(this$, mids$[mid_println_54c6a166]);
    }

    void PrintWriter::println(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_println_5fdc3f48], a0.this$);
    }

    void PrintWriter::println(jlong a0) const
    {
      env->callVoidMethod(this$, mids$[mid_println_0ee6df2f], a0);
    }

    void PrintWriter::println(jboolean a0) const
    {
      env->callVoidMethod(this$, mids$[mid_println_bb0c767f], a0);
    }

    void PrintWriter::println(jfloat a0) const
    {
      env->callVoidMethod(this$, mids$[mid_println_06298cab], a0);
    }

    void PrintWriter::println(jdouble a0) const
    {
      env->callVoidMethod(this$, mids$[mid_println_5d1c7645], a0);
    }

    void PrintWriter::println(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_println_39c7bd3c], a0);
    }

    void PrintWriter::println(const JArray< jchar > & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_println_700e23d6], a0.this$);
    }

    void PrintWriter::println(const ::java::lang::Object & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_println_290588ee], a0.this$);
    }

    void PrintWriter::println(jchar a0) const
    {
      env->callVoidMethod(this$, mids$[mid_println_87fd545a], a0);
    }

    void PrintWriter::write(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_write_5fdc3f48], a0.this$);
    }

    void PrintWriter::write(const JArray< jchar > & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_write_700e23d6], a0.this$);
    }

    void PrintWriter::write(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_write_39c7bd3c], a0);
    }

    void PrintWriter::write(const JArray< jchar > & a0, jint a1, jint a2) const
    {
      env->callVoidMethod(this$, mids$[mid_write_6f0bb356], a0.this$, a1, a2);
    }

    void PrintWriter::write(const ::java::lang::String & a0, jint a1, jint a2) const
    {
      env->callVoidMethod(this$, mids$[mid_write_555f322c], a0.this$, a1, a2);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace io {
    static PyObject *t_PrintWriter_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_PrintWriter_instance_(PyTypeObject *type, PyObject *arg);
    static int t_PrintWriter_init_(t_PrintWriter *self, PyObject *args, PyObject *kwds);
    static PyObject *t_PrintWriter_append(t_PrintWriter *self, PyObject *args);
    static PyObject *t_PrintWriter_checkError(t_PrintWriter *self);
    static PyObject *t_PrintWriter_close(t_PrintWriter *self, PyObject *args);
    static PyObject *t_PrintWriter_flush(t_PrintWriter *self, PyObject *args);
    static PyObject *t_PrintWriter_format(t_PrintWriter *self, PyObject *args);
    static PyObject *t_PrintWriter_print(t_PrintWriter *self, PyObject *args);
    static PyObject *t_PrintWriter_printf(t_PrintWriter *self, PyObject *args);
    static PyObject *t_PrintWriter_println(t_PrintWriter *self, PyObject *args);
    static PyObject *t_PrintWriter_write(t_PrintWriter *self, PyObject *args);

    static PyMethodDef t_PrintWriter__methods_[] = {
      DECLARE_METHOD(t_PrintWriter, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_PrintWriter, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_PrintWriter, append, METH_VARARGS),
      DECLARE_METHOD(t_PrintWriter, checkError, METH_NOARGS),
      DECLARE_METHOD(t_PrintWriter, close, METH_VARARGS),
      DECLARE_METHOD(t_PrintWriter, flush, METH_VARARGS),
      DECLARE_METHOD(t_PrintWriter, format, METH_VARARGS),
      DECLARE_METHOD(t_PrintWriter, print, METH_VARARGS),
      DECLARE_METHOD(t_PrintWriter, printf, METH_VARARGS),
      DECLARE_METHOD(t_PrintWriter, println, METH_VARARGS),
      DECLARE_METHOD(t_PrintWriter, write, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(PrintWriter, t_PrintWriter, ::java::io::Writer, PrintWriter, t_PrintWriter_init_, 0, 0, 0, 0, 0);

    void t_PrintWriter::install(PyObject *module)
    {
      installType(&PY_TYPE(PrintWriter), module, "PrintWriter", 0);
    }

    void t_PrintWriter::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(PrintWriter).tp_dict, "class_", make_descriptor(PrintWriter::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(PrintWriter).tp_dict, "wrapfn_", make_descriptor(t_PrintWriter::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(PrintWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_PrintWriter_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, PrintWriter::initializeClass, 1)))
        return NULL;
      return t_PrintWriter::wrap_Object(PrintWriter(((t_PrintWriter *) arg)->object.this$));
    }
    static PyObject *t_PrintWriter_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, PrintWriter::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_PrintWriter_init_(t_PrintWriter *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          PrintWriter object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = PrintWriter(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::io::File a0((jobject) NULL);
          PrintWriter object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
          {
            INT_CALL(object = PrintWriter(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::io::Writer a0((jobject) NULL);
          PrintWriter object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::Writer::initializeClass, &a0))
          {
            INT_CALL(object = PrintWriter(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::io::OutputStream a0((jobject) NULL);
          PrintWriter object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::OutputStream::initializeClass, &a0))
          {
            INT_CALL(object = PrintWriter(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          ::java::io::OutputStream a0((jobject) NULL);
          jboolean a1;
          PrintWriter object((jobject) NULL);

          if (!parseArgs(args, "kZ", ::java::io::OutputStream::initializeClass, &a0, &a1))
          {
            INT_CALL(object = PrintWriter(a0, a1));
            self->object = object;
            break;
          }
        }
        {
          ::java::io::File a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          PrintWriter object((jobject) NULL);

          if (!parseArgs(args, "ks", ::java::io::File::initializeClass, &a0, &a1))
          {
            INT_CALL(object = PrintWriter(a0, a1));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          PrintWriter object((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            INT_CALL(object = PrintWriter(a0, a1));
            self->object = object;
            break;
          }
        }
        {
          ::java::io::Writer a0((jobject) NULL);
          jboolean a1;
          PrintWriter object((jobject) NULL);

          if (!parseArgs(args, "kZ", ::java::io::Writer::initializeClass, &a0, &a1))
          {
            INT_CALL(object = PrintWriter(a0, a1));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_PrintWriter_append(t_PrintWriter *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          PrintWriter result((jobject) NULL);

          if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
          {
            OBJ_CALL(result = self->object.append(a0));
            return t_PrintWriter::wrap_Object(result);
          }
        }
        {
          jchar a0;
          PrintWriter result((jobject) NULL);

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = self->object.append(a0));
            return t_PrintWriter::wrap_Object(result);
          }
        }
        break;
       case 3:
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          jint a1;
          jint a2;
          PrintWriter result((jobject) NULL);

          if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.append(a0, a1, a2));
            return t_PrintWriter::wrap_Object(result);
          }
        }
      }

      return callSuper(&PY_TYPE(PrintWriter), (PyObject *) self, "append", args, 2);
    }

    static PyObject *t_PrintWriter_checkError(t_PrintWriter *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.checkError());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_PrintWriter_close(t_PrintWriter *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.close());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(PrintWriter), (PyObject *) self, "close", args, 2);
    }

    static PyObject *t_PrintWriter_flush(t_PrintWriter *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.flush());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(PrintWriter), (PyObject *) self, "flush", args, 2);
    }

    static PyObject *t_PrintWriter_format(t_PrintWriter *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::java::lang::Object > a1((jobject) NULL);
          PrintWriter result((jobject) NULL);

          if (!parseArgs(args, "s[o", &a0, &a1))
          {
            OBJ_CALL(result = self->object.format(a0, a1));
            return t_PrintWriter::wrap_Object(result);
          }
        }
        break;
       case 3:
        {
          ::java::util::Locale a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          JArray< ::java::lang::Object > a2((jobject) NULL);
          PrintWriter result((jobject) NULL);

          if (!parseArgs(args, "ks[o", ::java::util::Locale::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.format(a0, a1, a2));
            return t_PrintWriter::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "format", args);
      return NULL;
    }

    static PyObject *t_PrintWriter_print(t_PrintWriter *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(self->object.print(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jdouble a0;

          if (!parseArgs(args, "D", &a0))
          {
            OBJ_CALL(self->object.print(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jchar a0;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(self->object.print(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(self->object.print(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jboolean a0;

          if (!parseArgs(args, "Z", &a0))
          {
            OBJ_CALL(self->object.print(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.print(a0));
            Py_RETURN_NONE;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.print(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jfloat a0;

          if (!parseArgs(args, "F", &a0))
          {
            OBJ_CALL(self->object.print(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.print(a0));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "print", args);
      return NULL;
    }

    static PyObject *t_PrintWriter_printf(t_PrintWriter *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::java::lang::Object > a1((jobject) NULL);
          PrintWriter result((jobject) NULL);

          if (!parseArgs(args, "s[o", &a0, &a1))
          {
            OBJ_CALL(result = self->object.printf(a0, a1));
            return t_PrintWriter::wrap_Object(result);
          }
        }
        break;
       case 3:
        {
          ::java::util::Locale a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          JArray< ::java::lang::Object > a2((jobject) NULL);
          PrintWriter result((jobject) NULL);

          if (!parseArgs(args, "ks[o", ::java::util::Locale::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.printf(a0, a1, a2));
            return t_PrintWriter::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "printf", args);
      return NULL;
    }

    static PyObject *t_PrintWriter_println(t_PrintWriter *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          OBJ_CALL(self->object.println());
          Py_RETURN_NONE;
        }
        break;
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.println(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.println(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jboolean a0;

          if (!parseArgs(args, "Z", &a0))
          {
            OBJ_CALL(self->object.println(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jfloat a0;

          if (!parseArgs(args, "F", &a0))
          {
            OBJ_CALL(self->object.println(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jdouble a0;

          if (!parseArgs(args, "D", &a0))
          {
            OBJ_CALL(self->object.println(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.println(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(self->object.println(a0));
            Py_RETURN_NONE;
          }
        }
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(self->object.println(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jchar a0;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(self->object.println(a0));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "println", args);
      return NULL;
    }

    static PyObject *t_PrintWriter_write(t_PrintWriter *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.write(a0));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(self->object.write(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.write(a0));
            Py_RETURN_NONE;
          }
        }
        break;
       case 3:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.write(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "sII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.write(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
      }

      return callSuper(&PY_TYPE(PrintWriter), (PyObject *) self, "write", args, 2);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/CollectionStatistics.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *CollectionStatistics::class$ = NULL;
        jmethodID *CollectionStatistics::mids$ = NULL;
        bool CollectionStatistics::live$ = false;

        jclass CollectionStatistics::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/CollectionStatistics");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_2d72e40c] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;JJJJ)V");
            mids$[mid_docCount_54c6a17a] = env->getMethodID(cls, "docCount", "()J");
            mids$[mid_field_14c7b5c5] = env->getMethodID(cls, "field", "()Ljava/lang/String;");
            mids$[mid_maxDoc_54c6a17a] = env->getMethodID(cls, "maxDoc", "()J");
            mids$[mid_sumDocFreq_54c6a17a] = env->getMethodID(cls, "sumDocFreq", "()J");
            mids$[mid_sumTotalTermFreq_54c6a17a] = env->getMethodID(cls, "sumTotalTermFreq", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CollectionStatistics::CollectionStatistics(const ::java::lang::String & a0, jlong a1, jlong a2, jlong a3, jlong a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_2d72e40c, a0.this$, a1, a2, a3, a4)) {}

        jlong CollectionStatistics::docCount() const
        {
          return env->callLongMethod(this$, mids$[mid_docCount_54c6a17a]);
        }

        ::java::lang::String CollectionStatistics::field() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_field_14c7b5c5]));
        }

        jlong CollectionStatistics::maxDoc() const
        {
          return env->callLongMethod(this$, mids$[mid_maxDoc_54c6a17a]);
        }

        jlong CollectionStatistics::sumDocFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_sumDocFreq_54c6a17a]);
        }

        jlong CollectionStatistics::sumTotalTermFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_sumTotalTermFreq_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_CollectionStatistics_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CollectionStatistics_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CollectionStatistics_init_(t_CollectionStatistics *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CollectionStatistics_docCount(t_CollectionStatistics *self);
        static PyObject *t_CollectionStatistics_field(t_CollectionStatistics *self);
        static PyObject *t_CollectionStatistics_maxDoc(t_CollectionStatistics *self);
        static PyObject *t_CollectionStatistics_sumDocFreq(t_CollectionStatistics *self);
        static PyObject *t_CollectionStatistics_sumTotalTermFreq(t_CollectionStatistics *self);

        static PyMethodDef t_CollectionStatistics__methods_[] = {
          DECLARE_METHOD(t_CollectionStatistics, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollectionStatistics, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollectionStatistics, docCount, METH_NOARGS),
          DECLARE_METHOD(t_CollectionStatistics, field, METH_NOARGS),
          DECLARE_METHOD(t_CollectionStatistics, maxDoc, METH_NOARGS),
          DECLARE_METHOD(t_CollectionStatistics, sumDocFreq, METH_NOARGS),
          DECLARE_METHOD(t_CollectionStatistics, sumTotalTermFreq, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CollectionStatistics, t_CollectionStatistics, ::java::lang::Object, CollectionStatistics, t_CollectionStatistics_init_, 0, 0, 0, 0, 0);

        void t_CollectionStatistics::install(PyObject *module)
        {
          installType(&PY_TYPE(CollectionStatistics), module, "CollectionStatistics", 0);
        }

        void t_CollectionStatistics::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CollectionStatistics).tp_dict, "class_", make_descriptor(CollectionStatistics::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CollectionStatistics).tp_dict, "wrapfn_", make_descriptor(t_CollectionStatistics::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CollectionStatistics).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CollectionStatistics_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CollectionStatistics::initializeClass, 1)))
            return NULL;
          return t_CollectionStatistics::wrap_Object(CollectionStatistics(((t_CollectionStatistics *) arg)->object.this$));
        }
        static PyObject *t_CollectionStatistics_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CollectionStatistics::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CollectionStatistics_init_(t_CollectionStatistics *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong a1;
          jlong a2;
          jlong a3;
          jlong a4;
          CollectionStatistics object((jobject) NULL);

          if (!parseArgs(args, "sJJJJ", &a0, &a1, &a2, &a3, &a4))
          {
            INT_CALL(object = CollectionStatistics(a0, a1, a2, a3, a4));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CollectionStatistics_docCount(t_CollectionStatistics *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.docCount());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_CollectionStatistics_field(t_CollectionStatistics *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.field());
          return j2p(result);
        }

        static PyObject *t_CollectionStatistics_maxDoc(t_CollectionStatistics *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.maxDoc());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_CollectionStatistics_sumDocFreq(t_CollectionStatistics *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.sumDocFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_CollectionStatistics_sumTotalTermFreq(t_CollectionStatistics *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.sumTotalTermFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/LongsRef.h"
#include "java/lang/Class.h"
#include "java/lang/Comparable.h"
#include "java/lang/Cloneable.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *LongsRef::class$ = NULL;
        jmethodID *LongsRef::mids$ = NULL;
        jfieldID *LongsRef::fids$ = NULL;
        bool LongsRef::live$ = false;
        JArray< jlong > *LongsRef::EMPTY_LONGS = NULL;

        jclass LongsRef::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/LongsRef");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_init$_6ae021e7] = env->getMethodID(cls, "<init>", "([JII)V");
            mids$[mid_clone_3dcbb725] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/LongsRef;");
            mids$[mid_compareTo_ec8421f7] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/util/LongsRef;)I");
            mids$[mid_copyLongs_ec8421e8] = env->getMethodID(cls, "copyLongs", "(Lorg/apache/lucene/util/LongsRef;)V");
            mids$[mid_deepCopyOf_2075e53f] = env->getStaticMethodID(cls, "deepCopyOf", "(Lorg/apache/lucene/util/LongsRef;)Lorg/apache/lucene/util/LongsRef;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_grow_39c7bd3c] = env->getMethodID(cls, "grow", "(I)V");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_isValid_54c6a16a] = env->getMethodID(cls, "isValid", "()Z");
            mids$[mid_longsEquals_ec8421e4] = env->getMethodID(cls, "longsEquals", "(Lorg/apache/lucene/util/LongsRef;)Z");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_length] = env->getFieldID(cls, "length", "I");
            fids$[fid_longs] = env->getFieldID(cls, "longs", "[J");
            fids$[fid_offset] = env->getFieldID(cls, "offset", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY_LONGS = new JArray< jlong >(env->getStaticObjectField(cls, "EMPTY_LONGS", "[J"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LongsRef::LongsRef() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        LongsRef::LongsRef(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        LongsRef::LongsRef(const JArray< jlong > & a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6ae021e7, a0.this$, a1, a2)) {}

        LongsRef LongsRef::clone() const
        {
          return LongsRef(env->callObjectMethod(this$, mids$[mid_clone_3dcbb725]));
        }

        jint LongsRef::compareTo(const LongsRef & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTo_ec8421f7], a0.this$);
        }

        void LongsRef::copyLongs(const LongsRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyLongs_ec8421e8], a0.this$);
        }

        LongsRef LongsRef::deepCopyOf(const LongsRef & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return LongsRef(env->callStaticObjectMethod(cls, mids$[mid_deepCopyOf_2075e53f], a0.this$));
        }

        jboolean LongsRef::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void LongsRef::grow(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_grow_39c7bd3c], a0);
        }

        jint LongsRef::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean LongsRef::isValid() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isValid_54c6a16a]);
        }

        jboolean LongsRef::longsEquals(const LongsRef & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_longsEquals_ec8421e4], a0.this$);
        }

        ::java::lang::String LongsRef::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        jint LongsRef::_get_length() const
        {
          return env->getIntField(this$, fids$[fid_length]);
        }

        void LongsRef::_set_length(jint a0) const
        {
          env->setIntField(this$, fids$[fid_length], a0);
        }

        JArray< jlong > LongsRef::_get_longs() const
        {
          return JArray< jlong >(env->getObjectField(this$, fids$[fid_longs]));
        }

        void LongsRef::_set_longs(const JArray< jlong > & a0) const
        {
          env->setObjectField(this$, fids$[fid_longs], a0.this$);
        }

        jint LongsRef::_get_offset() const
        {
          return env->getIntField(this$, fids$[fid_offset]);
        }

        void LongsRef::_set_offset(jint a0) const
        {
          env->setIntField(this$, fids$[fid_offset], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_LongsRef_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LongsRef_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LongsRef_init_(t_LongsRef *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LongsRef_clone(t_LongsRef *self);
        static PyObject *t_LongsRef_compareTo(t_LongsRef *self, PyObject *arg);
        static PyObject *t_LongsRef_copyLongs(t_LongsRef *self, PyObject *arg);
        static PyObject *t_LongsRef_deepCopyOf(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LongsRef_equals(t_LongsRef *self, PyObject *args);
        static PyObject *t_LongsRef_grow(t_LongsRef *self, PyObject *arg);
        static PyObject *t_LongsRef_hashCode(t_LongsRef *self, PyObject *args);
        static PyObject *t_LongsRef_isValid(t_LongsRef *self);
        static PyObject *t_LongsRef_longsEquals(t_LongsRef *self, PyObject *arg);
        static PyObject *t_LongsRef_toString(t_LongsRef *self, PyObject *args);
        static PyObject *t_LongsRef_get__length(t_LongsRef *self, void *data);
        static int t_LongsRef_set__length(t_LongsRef *self, PyObject *arg, void *data);
        static PyObject *t_LongsRef_get__longs(t_LongsRef *self, void *data);
        static int t_LongsRef_set__longs(t_LongsRef *self, PyObject *arg, void *data);
        static PyObject *t_LongsRef_get__offset(t_LongsRef *self, void *data);
        static int t_LongsRef_set__offset(t_LongsRef *self, PyObject *arg, void *data);

        static PyObject *t_LongsRef_get__valid(t_LongsRef *self, void *data);
        static PyGetSetDef t_LongsRef__fields_[] = {
          DECLARE_GETSET_FIELD(t_LongsRef, length),
          DECLARE_GETSET_FIELD(t_LongsRef, longs),
          DECLARE_GETSET_FIELD(t_LongsRef, offset),
          DECLARE_GET_FIELD(t_LongsRef, valid),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_LongsRef__methods_[] = {
          DECLARE_METHOD(t_LongsRef, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongsRef, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongsRef, clone, METH_NOARGS),
          DECLARE_METHOD(t_LongsRef, compareTo, METH_O),
          DECLARE_METHOD(t_LongsRef, copyLongs, METH_O),
          DECLARE_METHOD(t_LongsRef, deepCopyOf, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongsRef, equals, METH_VARARGS),
          DECLARE_METHOD(t_LongsRef, grow, METH_O),
          DECLARE_METHOD(t_LongsRef, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_LongsRef, isValid, METH_NOARGS),
          DECLARE_METHOD(t_LongsRef, longsEquals, METH_O),
          DECLARE_METHOD(t_LongsRef, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LongsRef, t_LongsRef, ::java::lang::Object, LongsRef, t_LongsRef_init_, 0, 0, t_LongsRef__fields_, 0, 0);

        void t_LongsRef::install(PyObject *module)
        {
          installType(&PY_TYPE(LongsRef), module, "LongsRef", 0);
        }

        void t_LongsRef::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LongsRef).tp_dict, "class_", make_descriptor(LongsRef::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LongsRef).tp_dict, "wrapfn_", make_descriptor(t_LongsRef::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LongsRef).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(LongsRef::initializeClass);
          PyDict_SetItemString(PY_TYPE(LongsRef).tp_dict, "EMPTY_LONGS", make_descriptor(LongsRef::EMPTY_LONGS->wrap()));
        }

        static PyObject *t_LongsRef_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LongsRef::initializeClass, 1)))
            return NULL;
          return t_LongsRef::wrap_Object(LongsRef(((t_LongsRef *) arg)->object.this$));
        }
        static PyObject *t_LongsRef_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LongsRef::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LongsRef_init_(t_LongsRef *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              LongsRef object((jobject) NULL);

              INT_CALL(object = LongsRef());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              jint a0;
              LongsRef object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = LongsRef(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              JArray< jlong > a0((jobject) NULL);
              jint a1;
              jint a2;
              LongsRef object((jobject) NULL);

              if (!parseArgs(args, "[JII", &a0, &a1, &a2))
              {
                INT_CALL(object = LongsRef(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_LongsRef_clone(t_LongsRef *self)
        {
          LongsRef result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_LongsRef::wrap_Object(result);
        }

        static PyObject *t_LongsRef_compareTo(t_LongsRef *self, PyObject *arg)
        {
          LongsRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", LongsRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.compareTo(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
          return NULL;
        }

        static PyObject *t_LongsRef_copyLongs(t_LongsRef *self, PyObject *arg)
        {
          LongsRef a0((jobject) NULL);

          if (!parseArg(arg, "k", LongsRef::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyLongs(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "copyLongs", arg);
          return NULL;
        }

        static PyObject *t_LongsRef_deepCopyOf(PyTypeObject *type, PyObject *arg)
        {
          LongsRef a0((jobject) NULL);
          LongsRef result((jobject) NULL);

          if (!parseArg(arg, "k", LongsRef::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::LongsRef::deepCopyOf(a0));
            return t_LongsRef::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "deepCopyOf", arg);
          return NULL;
        }

        static PyObject *t_LongsRef_equals(t_LongsRef *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(LongsRef), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_LongsRef_grow(t_LongsRef *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.grow(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "grow", arg);
          return NULL;
        }

        static PyObject *t_LongsRef_hashCode(t_LongsRef *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(LongsRef), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_LongsRef_isValid(t_LongsRef *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isValid());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_LongsRef_longsEquals(t_LongsRef *self, PyObject *arg)
        {
          LongsRef a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", LongsRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.longsEquals(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "longsEquals", arg);
          return NULL;
        }

        static PyObject *t_LongsRef_toString(t_LongsRef *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(LongsRef), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_LongsRef_get__length(t_LongsRef *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_length());
          return PyInt_FromLong((long) value);
        }
        static int t_LongsRef_set__length(t_LongsRef *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_length(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "length", arg);
          return -1;
        }

        static PyObject *t_LongsRef_get__longs(t_LongsRef *self, void *data)
        {
          JArray< jlong > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_longs());
          return value.wrap();
        }
        static int t_LongsRef_set__longs(t_LongsRef *self, PyObject *arg, void *data)
        {
          JArray< jlong > value((jobject) NULL);
          if (!parseArg(arg, "[J", &value))
          {
            INT_CALL(self->object._set_longs(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "longs", arg);
          return -1;
        }

        static PyObject *t_LongsRef_get__offset(t_LongsRef *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_offset());
          return PyInt_FromLong((long) value);
        }
        static int t_LongsRef_set__offset(t_LongsRef *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_offset(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "offset", arg);
          return -1;
        }

        static PyObject *t_LongsRef_get__valid(t_LongsRef *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isValid());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hi/HindiStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {

          ::java::lang::Class *HindiStemFilter::class$ = NULL;
          jmethodID *HindiStemFilter::mids$ = NULL;
          bool HindiStemFilter::live$ = false;

          jclass HindiStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hi/HindiStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HindiStemFilter::HindiStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean HindiStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {
          static PyObject *t_HindiStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HindiStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HindiStemFilter_init_(t_HindiStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HindiStemFilter_incrementToken(t_HindiStemFilter *self, PyObject *args);

          static PyMethodDef t_HindiStemFilter__methods_[] = {
            DECLARE_METHOD(t_HindiStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HindiStemFilter, t_HindiStemFilter, ::org::apache::lucene::analysis::TokenFilter, HindiStemFilter, t_HindiStemFilter_init_, 0, 0, 0, 0, 0);

          void t_HindiStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(HindiStemFilter), module, "HindiStemFilter", 0);
          }

          void t_HindiStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HindiStemFilter).tp_dict, "class_", make_descriptor(HindiStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HindiStemFilter).tp_dict, "wrapfn_", make_descriptor(t_HindiStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HindiStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HindiStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HindiStemFilter::initializeClass, 1)))
              return NULL;
            return t_HindiStemFilter::wrap_Object(HindiStemFilter(((t_HindiStemFilter *) arg)->object.this$));
          }
          static PyObject *t_HindiStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HindiStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HindiStemFilter_init_(t_HindiStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            HindiStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = HindiStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HindiStemFilter_incrementToken(t_HindiStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(HindiStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/commongrams/CommonGramsQueryFilterFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace commongrams {

          ::java::lang::Class *CommonGramsQueryFilterFactory::class$ = NULL;
          jmethodID *CommonGramsQueryFilterFactory::mids$ = NULL;
          bool CommonGramsQueryFilterFactory::live$ = false;

          jclass CommonGramsQueryFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/commongrams/CommonGramsQueryFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_2969f76d] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CommonGramsQueryFilterFactory::CommonGramsQueryFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::commongrams::CommonGramsFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenFilter CommonGramsQueryFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenFilter(env->callObjectMethod(this$, mids$[mid_create_2969f76d], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace commongrams {
          static PyObject *t_CommonGramsQueryFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CommonGramsQueryFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CommonGramsQueryFilterFactory_init_(t_CommonGramsQueryFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CommonGramsQueryFilterFactory_create(t_CommonGramsQueryFilterFactory *self, PyObject *args);

          static PyMethodDef t_CommonGramsQueryFilterFactory__methods_[] = {
            DECLARE_METHOD(t_CommonGramsQueryFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CommonGramsQueryFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CommonGramsQueryFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CommonGramsQueryFilterFactory, t_CommonGramsQueryFilterFactory, ::org::apache::lucene::analysis::commongrams::CommonGramsFilterFactory, CommonGramsQueryFilterFactory, t_CommonGramsQueryFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_CommonGramsQueryFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(CommonGramsQueryFilterFactory), module, "CommonGramsQueryFilterFactory", 0);
          }

          void t_CommonGramsQueryFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CommonGramsQueryFilterFactory).tp_dict, "class_", make_descriptor(CommonGramsQueryFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CommonGramsQueryFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_CommonGramsQueryFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CommonGramsQueryFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CommonGramsQueryFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CommonGramsQueryFilterFactory::initializeClass, 1)))
              return NULL;
            return t_CommonGramsQueryFilterFactory::wrap_Object(CommonGramsQueryFilterFactory(((t_CommonGramsQueryFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_CommonGramsQueryFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CommonGramsQueryFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CommonGramsQueryFilterFactory_init_(t_CommonGramsQueryFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            CommonGramsQueryFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = CommonGramsQueryFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CommonGramsQueryFilterFactory_create(t_CommonGramsQueryFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CommonGramsQueryFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/DocTermOrds.h"
#include "org/apache/lucene/util/Accountable.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *DocTermOrds::class$ = NULL;
        jmethodID *DocTermOrds::mids$ = NULL;
        bool DocTermOrds::live$ = false;
        jint DocTermOrds::DEFAULT_INDEX_INTERVAL_BITS = (jint) 0;

        jclass DocTermOrds::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/DocTermOrds");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5230fbcf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/AtomicReader;Lorg/apache/lucene/util/Bits;Ljava/lang/String;)V");
            mids$[mid_init$_ba2c6033] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/AtomicReader;Lorg/apache/lucene/util/Bits;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_init$_69c8f813] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/AtomicReader;Lorg/apache/lucene/util/Bits;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;I)V");
            mids$[mid_init$_6c95794f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/AtomicReader;Lorg/apache/lucene/util/Bits;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;II)V");
            mids$[mid_getOrdTermsEnum_e7b033b0] = env->getMethodID(cls, "getOrdTermsEnum", "(Lorg/apache/lucene/index/AtomicReader;)Lorg/apache/lucene/index/TermsEnum;");
            mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
            mids$[mid_iterator_e09eae6c] = env->getMethodID(cls, "iterator", "(Lorg/apache/lucene/index/AtomicReader;)Lorg/apache/lucene/index/SortedSetDocValues;");
            mids$[mid_lookupTerm_fc839edf] = env->getMethodID(cls, "lookupTerm", "(Lorg/apache/lucene/index/TermsEnum;I)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_numTerms_54c6a179] = env->getMethodID(cls, "numTerms", "()I");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_visitTerm_619ad8a4] = env->getMethodID(cls, "visitTerm", "(Lorg/apache/lucene/index/TermsEnum;I)V");
            mids$[mid_uninvert_728f7de9] = env->getMethodID(cls, "uninvert", "(Lorg/apache/lucene/index/AtomicReader;Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_setActualDocFreq_d8d154a6] = env->getMethodID(cls, "setActualDocFreq", "(II)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_INDEX_INTERVAL_BITS = env->getStaticIntField(cls, "DEFAULT_INDEX_INTERVAL_BITS");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DocTermOrds::DocTermOrds(const ::org::apache::lucene::index::AtomicReader & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::lang::String & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5230fbcf, a0.this$, a1.this$, a2.this$)) {}

        DocTermOrds::DocTermOrds(const ::org::apache::lucene::index::AtomicReader & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::lang::String & a2, const ::org::apache::lucene::util::BytesRef & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ba2c6033, a0.this$, a1.this$, a2.this$, a3.this$)) {}

        DocTermOrds::DocTermOrds(const ::org::apache::lucene::index::AtomicReader & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::lang::String & a2, const ::org::apache::lucene::util::BytesRef & a3, jint a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_69c8f813, a0.this$, a1.this$, a2.this$, a3.this$, a4)) {}

        DocTermOrds::DocTermOrds(const ::org::apache::lucene::index::AtomicReader & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::lang::String & a2, const ::org::apache::lucene::util::BytesRef & a3, jint a4, jint a5) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6c95794f, a0.this$, a1.this$, a2.this$, a3.this$, a4, a5)) {}

        ::org::apache::lucene::index::TermsEnum DocTermOrds::getOrdTermsEnum(const ::org::apache::lucene::index::AtomicReader & a0) const
        {
          return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_getOrdTermsEnum_e7b033b0], a0.this$));
        }

        jboolean DocTermOrds::isEmpty() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isEmpty_54c6a16a]);
        }

        ::org::apache::lucene::index::SortedSetDocValues DocTermOrds::iterator(const ::org::apache::lucene::index::AtomicReader & a0) const
        {
          return ::org::apache::lucene::index::SortedSetDocValues(env->callObjectMethod(this$, mids$[mid_iterator_e09eae6c], a0.this$));
        }

        ::org::apache::lucene::util::BytesRef DocTermOrds::lookupTerm(const ::org::apache::lucene::index::TermsEnum & a0, jint a1) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_lookupTerm_fc839edf], a0.this$, a1));
        }

        jint DocTermOrds::numTerms() const
        {
          return env->callIntMethod(this$, mids$[mid_numTerms_54c6a179]);
        }

        jlong DocTermOrds::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_DocTermOrds_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocTermOrds_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DocTermOrds_init_(t_DocTermOrds *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DocTermOrds_getOrdTermsEnum(t_DocTermOrds *self, PyObject *arg);
        static PyObject *t_DocTermOrds_isEmpty(t_DocTermOrds *self);
        static PyObject *t_DocTermOrds_iterator(t_DocTermOrds *self, PyObject *arg);
        static PyObject *t_DocTermOrds_lookupTerm(t_DocTermOrds *self, PyObject *args);
        static PyObject *t_DocTermOrds_numTerms(t_DocTermOrds *self);
        static PyObject *t_DocTermOrds_ramBytesUsed(t_DocTermOrds *self);
        static PyObject *t_DocTermOrds_get__empty(t_DocTermOrds *self, void *data);
        static PyGetSetDef t_DocTermOrds__fields_[] = {
          DECLARE_GET_FIELD(t_DocTermOrds, empty),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DocTermOrds__methods_[] = {
          DECLARE_METHOD(t_DocTermOrds, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocTermOrds, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocTermOrds, getOrdTermsEnum, METH_O),
          DECLARE_METHOD(t_DocTermOrds, isEmpty, METH_NOARGS),
          DECLARE_METHOD(t_DocTermOrds, iterator, METH_O),
          DECLARE_METHOD(t_DocTermOrds, lookupTerm, METH_VARARGS),
          DECLARE_METHOD(t_DocTermOrds, numTerms, METH_NOARGS),
          DECLARE_METHOD(t_DocTermOrds, ramBytesUsed, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DocTermOrds, t_DocTermOrds, ::java::lang::Object, DocTermOrds, t_DocTermOrds_init_, 0, 0, t_DocTermOrds__fields_, 0, 0);

        void t_DocTermOrds::install(PyObject *module)
        {
          installType(&PY_TYPE(DocTermOrds), module, "DocTermOrds", 0);
        }

        void t_DocTermOrds::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DocTermOrds).tp_dict, "class_", make_descriptor(DocTermOrds::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DocTermOrds).tp_dict, "wrapfn_", make_descriptor(t_DocTermOrds::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DocTermOrds).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(DocTermOrds::initializeClass);
          PyDict_SetItemString(PY_TYPE(DocTermOrds).tp_dict, "DEFAULT_INDEX_INTERVAL_BITS", make_descriptor(DocTermOrds::DEFAULT_INDEX_INTERVAL_BITS));
        }

        static PyObject *t_DocTermOrds_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocTermOrds::initializeClass, 1)))
            return NULL;
          return t_DocTermOrds::wrap_Object(DocTermOrds(((t_DocTermOrds *) arg)->object.this$));
        }
        static PyObject *t_DocTermOrds_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocTermOrds::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DocTermOrds_init_(t_DocTermOrds *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::org::apache::lucene::util::Bits a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              DocTermOrds object((jobject) NULL);

              if (!parseArgs(args, "kks", ::org::apache::lucene::index::AtomicReader::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = DocTermOrds(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            goto err;
           case 4:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::org::apache::lucene::util::Bits a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
              DocTermOrds object((jobject) NULL);

              if (!parseArgs(args, "kksk", ::org::apache::lucene::index::AtomicReader::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = DocTermOrds(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
            goto err;
           case 5:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::org::apache::lucene::util::Bits a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
              jint a4;
              DocTermOrds object((jobject) NULL);

              if (!parseArgs(args, "kkskI", ::org::apache::lucene::index::AtomicReader::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                INT_CALL(object = DocTermOrds(a0, a1, a2, a3, a4));
                self->object = object;
                break;
              }
            }
            goto err;
           case 6:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::org::apache::lucene::util::Bits a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
              jint a4;
              jint a5;
              DocTermOrds object((jobject) NULL);

              if (!parseArgs(args, "kkskII", ::org::apache::lucene::index::AtomicReader::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
              {
                INT_CALL(object = DocTermOrds(a0, a1, a2, a3, a4, a5));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DocTermOrds_getOrdTermsEnum(t_DocTermOrds *self, PyObject *arg)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getOrdTermsEnum(a0));
            return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getOrdTermsEnum", arg);
          return NULL;
        }

        static PyObject *t_DocTermOrds_isEmpty(t_DocTermOrds *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isEmpty());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_DocTermOrds_iterator(t_DocTermOrds *self, PyObject *arg)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.iterator(a0));
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "iterator", arg);
          return NULL;
        }

        static PyObject *t_DocTermOrds_lookupTerm(t_DocTermOrds *self, PyObject *args)
        {
          ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
          jint a1;
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::TermsEnum::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.lookupTerm(a0, a1));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "lookupTerm", args);
          return NULL;
        }

        static PyObject *t_DocTermOrds_numTerms(t_DocTermOrds *self)
        {
          jint result;
          OBJ_CALL(result = self->object.numTerms());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_DocTermOrds_ramBytesUsed(t_DocTermOrds *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_DocTermOrds_get__empty(t_DocTermOrds *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isEmpty());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FieldFragList::class$ = NULL;
          jmethodID *FieldFragList::mids$ = NULL;
          bool FieldFragList::live$ = false;

          jclass FieldFragList::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FieldFragList");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_add_21fbeb2b] = env->getMethodID(cls, "add", "(IILjava/util/List;)V");
              mids$[mid_getFragInfos_87851566] = env->getMethodID(cls, "getFragInfos", "()Ljava/util/List;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FieldFragList::FieldFragList(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          void FieldFragList::add(jint a0, jint a1, const ::java::util::List & a2) const
          {
            env->callVoidMethod(this$, mids$[mid_add_21fbeb2b], a0, a1, a2.this$);
          }

          ::java::util::List FieldFragList::getFragInfos() const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getFragInfos_87851566]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FieldFragList_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldFragList_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FieldFragList_init_(t_FieldFragList *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FieldFragList_add(t_FieldFragList *self, PyObject *args);
          static PyObject *t_FieldFragList_getFragInfos(t_FieldFragList *self);
          static PyObject *t_FieldFragList_get__fragInfos(t_FieldFragList *self, void *data);
          static PyGetSetDef t_FieldFragList__fields_[] = {
            DECLARE_GET_FIELD(t_FieldFragList, fragInfos),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldFragList__methods_[] = {
            DECLARE_METHOD(t_FieldFragList, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldFragList, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldFragList, add, METH_VARARGS),
            DECLARE_METHOD(t_FieldFragList, getFragInfos, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FieldFragList, t_FieldFragList, ::java::lang::Object, FieldFragList, t_FieldFragList_init_, 0, 0, t_FieldFragList__fields_, 0, 0);

          void t_FieldFragList::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldFragList), module, "FieldFragList", 0);
            PyDict_SetItemString(PY_TYPE(FieldFragList).tp_dict, "WeightedFragInfo", make_descriptor(&PY_TYPE(FieldFragList$WeightedFragInfo)));
          }

          void t_FieldFragList::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FieldFragList).tp_dict, "class_", make_descriptor(FieldFragList::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FieldFragList).tp_dict, "wrapfn_", make_descriptor(t_FieldFragList::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FieldFragList).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldFragList_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldFragList::initializeClass, 1)))
              return NULL;
            return t_FieldFragList::wrap_Object(FieldFragList(((t_FieldFragList *) arg)->object.this$));
          }
          static PyObject *t_FieldFragList_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldFragList::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FieldFragList_init_(t_FieldFragList *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            FieldFragList object((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              INT_CALL(object = FieldFragList(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FieldFragList_add(t_FieldFragList *self, PyObject *args)
          {
            jint a0;
            jint a1;
            ::java::util::List a2((jobject) NULL);
            PyTypeObject **p2;

            if (!parseArgs(args, "IIK", ::java::util::List::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(self->object.add(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "add", args);
            return NULL;
          }

          static PyObject *t_FieldFragList_getFragInfos(t_FieldFragList *self)
          {
            ::java::util::List result((jobject) NULL);
            OBJ_CALL(result = self->object.getFragInfos());
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::vectorhighlight::PY_TYPE(FieldFragList$WeightedFragInfo));
          }

          static PyObject *t_FieldFragList_get__fragInfos(t_FieldFragList *self, void *data)
          {
            ::java::util::List value((jobject) NULL);
            OBJ_CALL(value = self->object.getFragInfos());
            return ::java::util::t_List::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/MaxFloatFunction.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *MaxFloatFunction::class$ = NULL;
            jmethodID *MaxFloatFunction::mids$ = NULL;
            bool MaxFloatFunction::live$ = false;

            jclass MaxFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/MaxFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ee9922ca] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
                mids$[mid_func_d2e34bb9] = env->getMethodID(cls, "func", "(I[Lorg/apache/lucene/queries/function/FunctionValues;)F");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            MaxFloatFunction::MaxFloatFunction(const JArray< ::org::apache::lucene::queries::function::ValueSource > & a0) : ::org::apache::lucene::queries::function::valuesource::MultiFloatFunction(env->newObject(initializeClass, &mids$, mid_init$_ee9922ca, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_MaxFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_MaxFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_MaxFloatFunction_init_(t_MaxFloatFunction *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_MaxFloatFunction__methods_[] = {
              DECLARE_METHOD(t_MaxFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MaxFloatFunction, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(MaxFloatFunction, t_MaxFloatFunction, ::org::apache::lucene::queries::function::valuesource::MultiFloatFunction, MaxFloatFunction, t_MaxFloatFunction_init_, 0, 0, 0, 0, 0);

            void t_MaxFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(MaxFloatFunction), module, "MaxFloatFunction", 0);
            }

            void t_MaxFloatFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(MaxFloatFunction).tp_dict, "class_", make_descriptor(MaxFloatFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(MaxFloatFunction).tp_dict, "wrapfn_", make_descriptor(t_MaxFloatFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(MaxFloatFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_MaxFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, MaxFloatFunction::initializeClass, 1)))
                return NULL;
              return t_MaxFloatFunction::wrap_Object(MaxFloatFunction(((t_MaxFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_MaxFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, MaxFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_MaxFloatFunction_init_(t_MaxFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              JArray< ::org::apache::lucene::queries::function::ValueSource > a0((jobject) NULL);
              MaxFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = MaxFloatFunction(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/join/ToParentBlockJoinQuery.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Weight.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/util/Set.h"
#include "org/apache/lucene/search/Filter.h"
#include "org/apache/lucene/search/join/ScoreMode.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {

          ::java::lang::Class *ToParentBlockJoinQuery::class$ = NULL;
          jmethodID *ToParentBlockJoinQuery::mids$ = NULL;
          bool ToParentBlockJoinQuery::live$ = false;

          jclass ToParentBlockJoinQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/join/ToParentBlockJoinQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_196d5feb] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/search/join/ScoreMode;)V");
              mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ToParentBlockJoinQuery::ToParentBlockJoinQuery(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::Filter & a1, const ::org::apache::lucene::search::join::ScoreMode & a2) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_196d5feb, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::search::Weight ToParentBlockJoinQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
          {
            return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
          }

          jboolean ToParentBlockJoinQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          void ToParentBlockJoinQuery::extractTerms(const ::java::util::Set & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
          }

          jint ToParentBlockJoinQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::org::apache::lucene::search::Query ToParentBlockJoinQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
          }

          ::java::lang::String ToParentBlockJoinQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {
          static PyObject *t_ToParentBlockJoinQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ToParentBlockJoinQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ToParentBlockJoinQuery_init_(t_ToParentBlockJoinQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ToParentBlockJoinQuery_createWeight(t_ToParentBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinQuery_equals(t_ToParentBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinQuery_extractTerms(t_ToParentBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinQuery_hashCode(t_ToParentBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinQuery_rewrite(t_ToParentBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinQuery_toString(t_ToParentBlockJoinQuery *self, PyObject *args);

          static PyMethodDef t_ToParentBlockJoinQuery__methods_[] = {
            DECLARE_METHOD(t_ToParentBlockJoinQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToParentBlockJoinQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToParentBlockJoinQuery, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinQuery, extractTerms, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinQuery, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ToParentBlockJoinQuery, t_ToParentBlockJoinQuery, ::org::apache::lucene::search::Query, ToParentBlockJoinQuery, t_ToParentBlockJoinQuery_init_, 0, 0, 0, 0, 0);

          void t_ToParentBlockJoinQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(ToParentBlockJoinQuery), module, "ToParentBlockJoinQuery", 0);
          }

          void t_ToParentBlockJoinQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinQuery).tp_dict, "class_", make_descriptor(ToParentBlockJoinQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinQuery).tp_dict, "wrapfn_", make_descriptor(t_ToParentBlockJoinQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ToParentBlockJoinQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ToParentBlockJoinQuery::initializeClass, 1)))
              return NULL;
            return t_ToParentBlockJoinQuery::wrap_Object(ToParentBlockJoinQuery(((t_ToParentBlockJoinQuery *) arg)->object.this$));
          }
          static PyObject *t_ToParentBlockJoinQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ToParentBlockJoinQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ToParentBlockJoinQuery_init_(t_ToParentBlockJoinQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::Query a0((jobject) NULL);
            ::org::apache::lucene::search::Filter a1((jobject) NULL);
            ::org::apache::lucene::search::join::ScoreMode a2((jobject) NULL);
            PyTypeObject **p2;
            ToParentBlockJoinQuery object((jobject) NULL);

            if (!parseArgs(args, "kkK", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::join::ScoreMode::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::search::join::t_ScoreMode::parameters_))
            {
              INT_CALL(object = ToParentBlockJoinQuery(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ToParentBlockJoinQuery_createWeight(t_ToParentBlockJoinQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::search::Weight result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.createWeight(a0));
              return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinQuery), (PyObject *) self, "createWeight", args, 2);
          }

          static PyObject *t_ToParentBlockJoinQuery_equals(t_ToParentBlockJoinQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_ToParentBlockJoinQuery_extractTerms(t_ToParentBlockJoinQuery *self, PyObject *args)
          {
            ::java::util::Set a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(self->object.extractTerms(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinQuery), (PyObject *) self, "extractTerms", args, 2);
          }

          static PyObject *t_ToParentBlockJoinQuery_hashCode(t_ToParentBlockJoinQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_ToParentBlockJoinQuery_rewrite(t_ToParentBlockJoinQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_ToParentBlockJoinQuery_toString(t_ToParentBlockJoinQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinQuery), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/BlockPackedReaderIterator.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/LongsRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *BlockPackedReaderIterator::class$ = NULL;
          jmethodID *BlockPackedReaderIterator::mids$ = NULL;
          bool BlockPackedReaderIterator::live$ = false;

          jclass BlockPackedReaderIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/BlockPackedReaderIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_71304522] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/DataInput;IIJ)V");
              mids$[mid_next_54c6a17a] = env->getMethodID(cls, "next", "()J");
              mids$[mid_next_a3d07a9b] = env->getMethodID(cls, "next", "(I)Lorg/apache/lucene/util/LongsRef;");
              mids$[mid_ord_54c6a17a] = env->getMethodID(cls, "ord", "()J");
              mids$[mid_reset_394617c2] = env->getMethodID(cls, "reset", "(Lorg/apache/lucene/store/DataInput;J)V");
              mids$[mid_skip_0ee6df2f] = env->getMethodID(cls, "skip", "(J)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BlockPackedReaderIterator::BlockPackedReaderIterator(const ::org::apache::lucene::store::DataInput & a0, jint a1, jint a2, jlong a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_71304522, a0.this$, a1, a2, a3)) {}

          jlong BlockPackedReaderIterator::next() const
          {
            return env->callLongMethod(this$, mids$[mid_next_54c6a17a]);
          }

          ::org::apache::lucene::util::LongsRef BlockPackedReaderIterator::next(jint a0) const
          {
            return ::org::apache::lucene::util::LongsRef(env->callObjectMethod(this$, mids$[mid_next_a3d07a9b], a0));
          }

          jlong BlockPackedReaderIterator::ord() const
          {
            return env->callLongMethod(this$, mids$[mid_ord_54c6a17a]);
          }

          void BlockPackedReaderIterator::reset(const ::org::apache::lucene::store::DataInput & a0, jlong a1) const
          {
            env->callVoidMethod(this$, mids$[mid_reset_394617c2], a0.this$, a1);
          }

          void BlockPackedReaderIterator::skip(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_skip_0ee6df2f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_BlockPackedReaderIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BlockPackedReaderIterator_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BlockPackedReaderIterator_init_(t_BlockPackedReaderIterator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BlockPackedReaderIterator_next(t_BlockPackedReaderIterator *self, PyObject *args);
          static PyObject *t_BlockPackedReaderIterator_ord(t_BlockPackedReaderIterator *self);
          static PyObject *t_BlockPackedReaderIterator_reset(t_BlockPackedReaderIterator *self, PyObject *args);
          static PyObject *t_BlockPackedReaderIterator_skip(t_BlockPackedReaderIterator *self, PyObject *arg);

          static PyMethodDef t_BlockPackedReaderIterator__methods_[] = {
            DECLARE_METHOD(t_BlockPackedReaderIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockPackedReaderIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockPackedReaderIterator, next, METH_VARARGS),
            DECLARE_METHOD(t_BlockPackedReaderIterator, ord, METH_NOARGS),
            DECLARE_METHOD(t_BlockPackedReaderIterator, reset, METH_VARARGS),
            DECLARE_METHOD(t_BlockPackedReaderIterator, skip, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BlockPackedReaderIterator, t_BlockPackedReaderIterator, ::java::lang::Object, BlockPackedReaderIterator, t_BlockPackedReaderIterator_init_, 0, 0, 0, 0, 0);

          void t_BlockPackedReaderIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(BlockPackedReaderIterator), module, "BlockPackedReaderIterator", 0);
          }

          void t_BlockPackedReaderIterator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BlockPackedReaderIterator).tp_dict, "class_", make_descriptor(BlockPackedReaderIterator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BlockPackedReaderIterator).tp_dict, "wrapfn_", make_descriptor(t_BlockPackedReaderIterator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BlockPackedReaderIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BlockPackedReaderIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BlockPackedReaderIterator::initializeClass, 1)))
              return NULL;
            return t_BlockPackedReaderIterator::wrap_Object(BlockPackedReaderIterator(((t_BlockPackedReaderIterator *) arg)->object.this$));
          }
          static PyObject *t_BlockPackedReaderIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BlockPackedReaderIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BlockPackedReaderIterator_init_(t_BlockPackedReaderIterator *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            jint a1;
            jint a2;
            jlong a3;
            BlockPackedReaderIterator object((jobject) NULL);

            if (!parseArgs(args, "kIIJ", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = BlockPackedReaderIterator(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BlockPackedReaderIterator_next(t_BlockPackedReaderIterator *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jlong result;
                OBJ_CALL(result = self->object.next());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
              break;
             case 1:
              {
                jint a0;
                ::org::apache::lucene::util::LongsRef result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.next(a0));
                  return ::org::apache::lucene::util::t_LongsRef::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "next", args);
            return NULL;
          }

          static PyObject *t_BlockPackedReaderIterator_ord(t_BlockPackedReaderIterator *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ord());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_BlockPackedReaderIterator_reset(t_BlockPackedReaderIterator *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            jlong a1;

            if (!parseArgs(args, "kJ", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.reset(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "reset", args);
            return NULL;
          }

          static PyObject *t_BlockPackedReaderIterator_skip(t_BlockPackedReaderIterator *self, PyObject *arg)
          {
            jlong a0;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(self->object.skip(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "skip", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/QueryParserTokenManager.h"
#include "java/io/PrintStream.h"
#include "org/apache/lucene/queryparser/classic/CharStream.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/classic/QueryParserConstants.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/classic/Token.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *QueryParserTokenManager::class$ = NULL;
          jmethodID *QueryParserTokenManager::mids$ = NULL;
          jfieldID *QueryParserTokenManager::fids$ = NULL;
          bool QueryParserTokenManager::live$ = false;
          JArray< jint > *QueryParserTokenManager::jjnewLexState = NULL;
          JArray< ::java::lang::String > *QueryParserTokenManager::jjstrLiteralImages = NULL;
          JArray< ::java::lang::String > *QueryParserTokenManager::lexStateNames = NULL;

          jclass QueryParserTokenManager::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/QueryParserTokenManager");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_24bde9d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/classic/CharStream;)V");
              mids$[mid_init$_27f0394b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/classic/CharStream;I)V");
              mids$[mid_ReInit_24bde9d3] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/classic/CharStream;)V");
              mids$[mid_ReInit_27f0394b] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/classic/CharStream;I)V");
              mids$[mid_SwitchTo_39c7bd3c] = env->getMethodID(cls, "SwitchTo", "(I)V");
              mids$[mid_getNextToken_1983cf96] = env->getMethodID(cls, "getNextToken", "()Lorg/apache/lucene/queryparser/classic/Token;");
              mids$[mid_setDebugStream_1b7c898b] = env->getMethodID(cls, "setDebugStream", "(Ljava/io/PrintStream;)V");
              mids$[mid_jjFillToken_1983cf96] = env->getMethodID(cls, "jjFillToken", "()Lorg/apache/lucene/queryparser/classic/Token;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_debugStream] = env->getFieldID(cls, "debugStream", "Ljava/io/PrintStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              jjnewLexState = new JArray< jint >(env->getStaticObjectField(cls, "jjnewLexState", "[I"));
              jjstrLiteralImages = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "jjstrLiteralImages", "[Ljava/lang/String;"));
              lexStateNames = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "lexStateNames", "[Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          QueryParserTokenManager::QueryParserTokenManager(const ::org::apache::lucene::queryparser::classic::CharStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_24bde9d3, a0.this$)) {}

          QueryParserTokenManager::QueryParserTokenManager(const ::org::apache::lucene::queryparser::classic::CharStream & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_27f0394b, a0.this$, a1)) {}

          void QueryParserTokenManager::ReInit(const ::org::apache::lucene::queryparser::classic::CharStream & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_ReInit_24bde9d3], a0.this$);
          }

          void QueryParserTokenManager::ReInit(const ::org::apache::lucene::queryparser::classic::CharStream & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_ReInit_27f0394b], a0.this$, a1);
          }

          void QueryParserTokenManager::SwitchTo(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_SwitchTo_39c7bd3c], a0);
          }

          ::org::apache::lucene::queryparser::classic::Token QueryParserTokenManager::getNextToken() const
          {
            return ::org::apache::lucene::queryparser::classic::Token(env->callObjectMethod(this$, mids$[mid_getNextToken_1983cf96]));
          }

          void QueryParserTokenManager::setDebugStream(const ::java::io::PrintStream & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setDebugStream_1b7c898b], a0.this$);
          }

          ::java::io::PrintStream QueryParserTokenManager::_get_debugStream() const
          {
            return ::java::io::PrintStream(env->getObjectField(this$, fids$[fid_debugStream]));
          }

          void QueryParserTokenManager::_set_debugStream(const ::java::io::PrintStream & a0) const
          {
            env->setObjectField(this$, fids$[fid_debugStream], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_QueryParserTokenManager_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryParserTokenManager_instance_(PyTypeObject *type, PyObject *arg);
          static int t_QueryParserTokenManager_init_(t_QueryParserTokenManager *self, PyObject *args, PyObject *kwds);
          static PyObject *t_QueryParserTokenManager_ReInit(t_QueryParserTokenManager *self, PyObject *args);
          static PyObject *t_QueryParserTokenManager_SwitchTo(t_QueryParserTokenManager *self, PyObject *arg);
          static PyObject *t_QueryParserTokenManager_getNextToken(t_QueryParserTokenManager *self);
          static PyObject *t_QueryParserTokenManager_setDebugStream(t_QueryParserTokenManager *self, PyObject *arg);

          static int t_QueryParserTokenManager_set__debugStream(t_QueryParserTokenManager *self, PyObject *arg, void *data);
          static PyObject *t_QueryParserTokenManager_get__nextToken(t_QueryParserTokenManager *self, void *data);
          static PyGetSetDef t_QueryParserTokenManager__fields_[] = {
            DECLARE_SET_FIELD(t_QueryParserTokenManager, debugStream),
            DECLARE_GET_FIELD(t_QueryParserTokenManager, nextToken),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_QueryParserTokenManager__methods_[] = {
            DECLARE_METHOD(t_QueryParserTokenManager, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryParserTokenManager, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryParserTokenManager, ReInit, METH_VARARGS),
            DECLARE_METHOD(t_QueryParserTokenManager, SwitchTo, METH_O),
            DECLARE_METHOD(t_QueryParserTokenManager, getNextToken, METH_NOARGS),
            DECLARE_METHOD(t_QueryParserTokenManager, setDebugStream, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(QueryParserTokenManager, t_QueryParserTokenManager, ::java::lang::Object, QueryParserTokenManager, t_QueryParserTokenManager_init_, 0, 0, t_QueryParserTokenManager__fields_, 0, 0);

          void t_QueryParserTokenManager::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryParserTokenManager), module, "QueryParserTokenManager", 0);
          }

          void t_QueryParserTokenManager::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(QueryParserTokenManager).tp_dict, "class_", make_descriptor(QueryParserTokenManager::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(QueryParserTokenManager).tp_dict, "wrapfn_", make_descriptor(t_QueryParserTokenManager::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(QueryParserTokenManager).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(QueryParserTokenManager::initializeClass);
            PyDict_SetItemString(PY_TYPE(QueryParserTokenManager).tp_dict, "jjnewLexState", make_descriptor(QueryParserTokenManager::jjnewLexState->wrap()));
            PyDict_SetItemString(PY_TYPE(QueryParserTokenManager).tp_dict, "jjstrLiteralImages", make_descriptor(JArray<jstring>(QueryParserTokenManager::jjstrLiteralImages->this$).wrap()));
            PyDict_SetItemString(PY_TYPE(QueryParserTokenManager).tp_dict, "lexStateNames", make_descriptor(JArray<jstring>(QueryParserTokenManager::lexStateNames->this$).wrap()));
          }

          static PyObject *t_QueryParserTokenManager_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryParserTokenManager::initializeClass, 1)))
              return NULL;
            return t_QueryParserTokenManager::wrap_Object(QueryParserTokenManager(((t_QueryParserTokenManager *) arg)->object.this$));
          }
          static PyObject *t_QueryParserTokenManager_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryParserTokenManager::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_QueryParserTokenManager_init_(t_QueryParserTokenManager *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::queryparser::classic::CharStream a0((jobject) NULL);
                QueryParserTokenManager object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::classic::CharStream::initializeClass, &a0))
                {
                  INT_CALL(object = QueryParserTokenManager(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::queryparser::classic::CharStream a0((jobject) NULL);
                jint a1;
                QueryParserTokenManager object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::queryparser::classic::CharStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = QueryParserTokenManager(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_QueryParserTokenManager_ReInit(t_QueryParserTokenManager *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::queryparser::classic::CharStream a0((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::classic::CharStream::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.ReInit(a0));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::queryparser::classic::CharStream a0((jobject) NULL);
                jint a1;

                if (!parseArgs(args, "kI", ::org::apache::lucene::queryparser::classic::CharStream::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(self->object.ReInit(a0, a1));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "ReInit", args);
            return NULL;
          }

          static PyObject *t_QueryParserTokenManager_SwitchTo(t_QueryParserTokenManager *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.SwitchTo(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "SwitchTo", arg);
            return NULL;
          }

          static PyObject *t_QueryParserTokenManager_getNextToken(t_QueryParserTokenManager *self)
          {
            ::org::apache::lucene::queryparser::classic::Token result((jobject) NULL);
            OBJ_CALL(result = self->object.getNextToken());
            return ::org::apache::lucene::queryparser::classic::t_Token::wrap_Object(result);
          }

          static PyObject *t_QueryParserTokenManager_setDebugStream(t_QueryParserTokenManager *self, PyObject *arg)
          {
            ::java::io::PrintStream a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setDebugStream(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setDebugStream", arg);
            return NULL;
          }

          static int t_QueryParserTokenManager_set__debugStream(t_QueryParserTokenManager *self, PyObject *arg, void *data)
          {
            {
              ::java::io::PrintStream value((jobject) NULL);
              if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &value))
              {
                INT_CALL(self->object.setDebugStream(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "debugStream", arg);
            return -1;
          }

          static PyObject *t_QueryParserTokenManager_get__nextToken(t_QueryParserTokenManager *self, void *data)
          {
            ::org::apache::lucene::queryparser::classic::Token value((jobject) NULL);
            OBJ_CALL(value = self->object.getNextToken());
            return ::org::apache::lucene::queryparser::classic::t_Token::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter.h"
#include "org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter$StemmerOverrideMap.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *StemmerOverrideFilter::class$ = NULL;
          jmethodID *StemmerOverrideFilter::mids$ = NULL;
          bool StemmerOverrideFilter::live$ = false;

          jclass StemmerOverrideFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d4e7ec87] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter$StemmerOverrideMap;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StemmerOverrideFilter::StemmerOverrideFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::miscellaneous::StemmerOverrideFilter$StemmerOverrideMap & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_d4e7ec87, a0.this$, a1.this$)) {}

          jboolean StemmerOverrideFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter$Builder.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_StemmerOverrideFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StemmerOverrideFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StemmerOverrideFilter_init_(t_StemmerOverrideFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StemmerOverrideFilter_incrementToken(t_StemmerOverrideFilter *self, PyObject *args);

          static PyMethodDef t_StemmerOverrideFilter__methods_[] = {
            DECLARE_METHOD(t_StemmerOverrideFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StemmerOverrideFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StemmerOverrideFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StemmerOverrideFilter, t_StemmerOverrideFilter, ::org::apache::lucene::analysis::TokenFilter, StemmerOverrideFilter, t_StemmerOverrideFilter_init_, 0, 0, 0, 0, 0);

          void t_StemmerOverrideFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(StemmerOverrideFilter), module, "StemmerOverrideFilter", 0);
            PyDict_SetItemString(PY_TYPE(StemmerOverrideFilter).tp_dict, "Builder", make_descriptor(&PY_TYPE(StemmerOverrideFilter$Builder)));
            PyDict_SetItemString(PY_TYPE(StemmerOverrideFilter).tp_dict, "StemmerOverrideMap", make_descriptor(&PY_TYPE(StemmerOverrideFilter$StemmerOverrideMap)));
          }

          void t_StemmerOverrideFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StemmerOverrideFilter).tp_dict, "class_", make_descriptor(StemmerOverrideFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StemmerOverrideFilter).tp_dict, "wrapfn_", make_descriptor(t_StemmerOverrideFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StemmerOverrideFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StemmerOverrideFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StemmerOverrideFilter::initializeClass, 1)))
              return NULL;
            return t_StemmerOverrideFilter::wrap_Object(StemmerOverrideFilter(((t_StemmerOverrideFilter *) arg)->object.this$));
          }
          static PyObject *t_StemmerOverrideFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StemmerOverrideFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StemmerOverrideFilter_init_(t_StemmerOverrideFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::miscellaneous::StemmerOverrideFilter$StemmerOverrideMap a1((jobject) NULL);
            StemmerOverrideFilter object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::miscellaneous::StemmerOverrideFilter$StemmerOverrideMap::initializeClass, &a0, &a1))
            {
              INT_CALL(object = StemmerOverrideFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StemmerOverrideFilter_incrementToken(t_StemmerOverrideFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(StemmerOverrideFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ga/IrishLowerCaseFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ga {

          ::java::lang::Class *IrishLowerCaseFilter::class$ = NULL;
          jmethodID *IrishLowerCaseFilter::mids$ = NULL;
          bool IrishLowerCaseFilter::live$ = false;

          jclass IrishLowerCaseFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ga/IrishLowerCaseFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IrishLowerCaseFilter::IrishLowerCaseFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean IrishLowerCaseFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ga {
          static PyObject *t_IrishLowerCaseFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IrishLowerCaseFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IrishLowerCaseFilter_init_(t_IrishLowerCaseFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IrishLowerCaseFilter_incrementToken(t_IrishLowerCaseFilter *self, PyObject *args);

          static PyMethodDef t_IrishLowerCaseFilter__methods_[] = {
            DECLARE_METHOD(t_IrishLowerCaseFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IrishLowerCaseFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IrishLowerCaseFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IrishLowerCaseFilter, t_IrishLowerCaseFilter, ::org::apache::lucene::analysis::TokenFilter, IrishLowerCaseFilter, t_IrishLowerCaseFilter_init_, 0, 0, 0, 0, 0);

          void t_IrishLowerCaseFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(IrishLowerCaseFilter), module, "IrishLowerCaseFilter", 0);
          }

          void t_IrishLowerCaseFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IrishLowerCaseFilter).tp_dict, "class_", make_descriptor(IrishLowerCaseFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IrishLowerCaseFilter).tp_dict, "wrapfn_", make_descriptor(t_IrishLowerCaseFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IrishLowerCaseFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IrishLowerCaseFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IrishLowerCaseFilter::initializeClass, 1)))
              return NULL;
            return t_IrishLowerCaseFilter::wrap_Object(IrishLowerCaseFilter(((t_IrishLowerCaseFilter *) arg)->object.this$));
          }
          static PyObject *t_IrishLowerCaseFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IrishLowerCaseFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IrishLowerCaseFilter_init_(t_IrishLowerCaseFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            IrishLowerCaseFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = IrishLowerCaseFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IrishLowerCaseFilter_incrementToken(t_IrishLowerCaseFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(IrishLowerCaseFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/Lucene43NGramTokenizer.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *Lucene43NGramTokenizer::class$ = NULL;
          jmethodID *Lucene43NGramTokenizer::mids$ = NULL;
          bool Lucene43NGramTokenizer::live$ = false;
          jint Lucene43NGramTokenizer::DEFAULT_MAX_NGRAM_SIZE = (jint) 0;
          jint Lucene43NGramTokenizer::DEFAULT_MIN_NGRAM_SIZE = (jint) 0;

          jclass Lucene43NGramTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/Lucene43NGramTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_92513554] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;II)V");
              mids$[mid_init$_fb18a8f8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;II)V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_NGRAM_SIZE = env->getStaticIntField(cls, "DEFAULT_MAX_NGRAM_SIZE");
              DEFAULT_MIN_NGRAM_SIZE = env->getStaticIntField(cls, "DEFAULT_MIN_NGRAM_SIZE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene43NGramTokenizer::Lucene43NGramTokenizer(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          Lucene43NGramTokenizer::Lucene43NGramTokenizer(const ::java::io::Reader & a0, jint a1, jint a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_92513554, a0.this$, a1, a2)) {}

          Lucene43NGramTokenizer::Lucene43NGramTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1, jint a2, jint a3) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_fb18a8f8, a0.this$, a1.this$, a2, a3)) {}

          void Lucene43NGramTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean Lucene43NGramTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void Lucene43NGramTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_Lucene43NGramTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene43NGramTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene43NGramTokenizer_init_(t_Lucene43NGramTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene43NGramTokenizer_end(t_Lucene43NGramTokenizer *self, PyObject *args);
          static PyObject *t_Lucene43NGramTokenizer_incrementToken(t_Lucene43NGramTokenizer *self, PyObject *args);
          static PyObject *t_Lucene43NGramTokenizer_reset(t_Lucene43NGramTokenizer *self, PyObject *args);

          static PyMethodDef t_Lucene43NGramTokenizer__methods_[] = {
            DECLARE_METHOD(t_Lucene43NGramTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene43NGramTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene43NGramTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_Lucene43NGramTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_Lucene43NGramTokenizer, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene43NGramTokenizer, t_Lucene43NGramTokenizer, ::org::apache::lucene::analysis::Tokenizer, Lucene43NGramTokenizer, t_Lucene43NGramTokenizer_init_, 0, 0, 0, 0, 0);

          void t_Lucene43NGramTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene43NGramTokenizer), module, "Lucene43NGramTokenizer", 0);
          }

          void t_Lucene43NGramTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene43NGramTokenizer).tp_dict, "class_", make_descriptor(Lucene43NGramTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene43NGramTokenizer).tp_dict, "wrapfn_", make_descriptor(t_Lucene43NGramTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene43NGramTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene43NGramTokenizer::initializeClass);
            PyDict_SetItemString(PY_TYPE(Lucene43NGramTokenizer).tp_dict, "DEFAULT_MAX_NGRAM_SIZE", make_descriptor(Lucene43NGramTokenizer::DEFAULT_MAX_NGRAM_SIZE));
            PyDict_SetItemString(PY_TYPE(Lucene43NGramTokenizer).tp_dict, "DEFAULT_MIN_NGRAM_SIZE", make_descriptor(Lucene43NGramTokenizer::DEFAULT_MIN_NGRAM_SIZE));
          }

          static PyObject *t_Lucene43NGramTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene43NGramTokenizer::initializeClass, 1)))
              return NULL;
            return t_Lucene43NGramTokenizer::wrap_Object(Lucene43NGramTokenizer(((t_Lucene43NGramTokenizer *) arg)->object.this$));
          }
          static PyObject *t_Lucene43NGramTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene43NGramTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene43NGramTokenizer_init_(t_Lucene43NGramTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                Lucene43NGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = Lucene43NGramTokenizer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::java::io::Reader a0((jobject) NULL);
                jint a1;
                jint a2;
                Lucene43NGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kII", ::java::io::Reader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = Lucene43NGramTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                jint a2;
                jint a3;
                Lucene43NGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkII", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = Lucene43NGramTokenizer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene43NGramTokenizer_end(t_Lucene43NGramTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene43NGramTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_Lucene43NGramTokenizer_incrementToken(t_Lucene43NGramTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(Lucene43NGramTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_Lucene43NGramTokenizer_reset(t_Lucene43NGramTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene43NGramTokenizer), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/AllowLeadingWildcardProcessor.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *AllowLeadingWildcardProcessor::class$ = NULL;
              jmethodID *AllowLeadingWildcardProcessor::mids$ = NULL;
              bool AllowLeadingWildcardProcessor::live$ = false;

              jclass AllowLeadingWildcardProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/AllowLeadingWildcardProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_process_6705aed7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              AllowLeadingWildcardProcessor::AllowLeadingWildcardProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode AllowLeadingWildcardProcessor::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_6705aed7], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_AllowLeadingWildcardProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_AllowLeadingWildcardProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_AllowLeadingWildcardProcessor_init_(t_AllowLeadingWildcardProcessor *self, PyObject *args, PyObject *kwds);
              static PyObject *t_AllowLeadingWildcardProcessor_process(t_AllowLeadingWildcardProcessor *self, PyObject *args);

              static PyMethodDef t_AllowLeadingWildcardProcessor__methods_[] = {
                DECLARE_METHOD(t_AllowLeadingWildcardProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AllowLeadingWildcardProcessor, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AllowLeadingWildcardProcessor, process, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(AllowLeadingWildcardProcessor, t_AllowLeadingWildcardProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, AllowLeadingWildcardProcessor, t_AllowLeadingWildcardProcessor_init_, 0, 0, 0, 0, 0);

              void t_AllowLeadingWildcardProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(AllowLeadingWildcardProcessor), module, "AllowLeadingWildcardProcessor", 0);
              }

              void t_AllowLeadingWildcardProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(AllowLeadingWildcardProcessor).tp_dict, "class_", make_descriptor(AllowLeadingWildcardProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(AllowLeadingWildcardProcessor).tp_dict, "wrapfn_", make_descriptor(t_AllowLeadingWildcardProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(AllowLeadingWildcardProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_AllowLeadingWildcardProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, AllowLeadingWildcardProcessor::initializeClass, 1)))
                  return NULL;
                return t_AllowLeadingWildcardProcessor::wrap_Object(AllowLeadingWildcardProcessor(((t_AllowLeadingWildcardProcessor *) arg)->object.this$));
              }
              static PyObject *t_AllowLeadingWildcardProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, AllowLeadingWildcardProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_AllowLeadingWildcardProcessor_init_(t_AllowLeadingWildcardProcessor *self, PyObject *args, PyObject *kwds)
              {
                AllowLeadingWildcardProcessor object((jobject) NULL);

                INT_CALL(object = AllowLeadingWildcardProcessor());
                self->object = object;

                return 0;
              }

              static PyObject *t_AllowLeadingWildcardProcessor_process(t_AllowLeadingWildcardProcessor *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(AllowLeadingWildcardProcessor), (PyObject *) self, "process", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$ByteParser.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$ByteParser::class$ = NULL;
        jmethodID *FieldCache$ByteParser::mids$ = NULL;
        bool FieldCache$ByteParser::live$ = false;

        jclass FieldCache$ByteParser::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$ByteParser");

            mids$ = new jmethodID[max_mid];
            mids$[mid_parseByte_7bc03dd0] = env->getMethodID(cls, "parseByte", "(Lorg/apache/lucene/util/BytesRef;)B");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jbyte FieldCache$ByteParser::parseByte(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callByteMethod(this$, mids$[mid_parseByte_7bc03dd0], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$ByteParser_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$ByteParser_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$ByteParser_parseByte(t_FieldCache$ByteParser *self, PyObject *arg);

        static PyMethodDef t_FieldCache$ByteParser__methods_[] = {
          DECLARE_METHOD(t_FieldCache$ByteParser, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$ByteParser, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$ByteParser, parseByte, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$ByteParser, t_FieldCache$ByteParser, ::org::apache::lucene::search::FieldCache$Parser, FieldCache$ByteParser, abstract_init, 0, 0, 0, 0, 0);

        void t_FieldCache$ByteParser::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$ByteParser), module, "FieldCache$ByteParser", 0);
        }

        void t_FieldCache$ByteParser::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$ByteParser).tp_dict, "class_", make_descriptor(FieldCache$ByteParser::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$ByteParser).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$ByteParser::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$ByteParser).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCache$ByteParser_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$ByteParser::initializeClass, 1)))
            return NULL;
          return t_FieldCache$ByteParser::wrap_Object(FieldCache$ByteParser(((t_FieldCache$ByteParser *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$ByteParser_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$ByteParser::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldCache$ByteParser_parseByte(t_FieldCache$ByteParser *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jbyte result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.parseByte(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "parseByte", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ar/ArabicNormalizationFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {

          ::java::lang::Class *ArabicNormalizationFilter::class$ = NULL;
          jmethodID *ArabicNormalizationFilter::mids$ = NULL;
          bool ArabicNormalizationFilter::live$ = false;

          jclass ArabicNormalizationFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ar/ArabicNormalizationFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ArabicNormalizationFilter::ArabicNormalizationFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean ArabicNormalizationFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {
          static PyObject *t_ArabicNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ArabicNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ArabicNormalizationFilter_init_(t_ArabicNormalizationFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ArabicNormalizationFilter_incrementToken(t_ArabicNormalizationFilter *self, PyObject *args);

          static PyMethodDef t_ArabicNormalizationFilter__methods_[] = {
            DECLARE_METHOD(t_ArabicNormalizationFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicNormalizationFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicNormalizationFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ArabicNormalizationFilter, t_ArabicNormalizationFilter, ::org::apache::lucene::analysis::TokenFilter, ArabicNormalizationFilter, t_ArabicNormalizationFilter_init_, 0, 0, 0, 0, 0);

          void t_ArabicNormalizationFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ArabicNormalizationFilter), module, "ArabicNormalizationFilter", 0);
          }

          void t_ArabicNormalizationFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ArabicNormalizationFilter).tp_dict, "class_", make_descriptor(ArabicNormalizationFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizationFilter).tp_dict, "wrapfn_", make_descriptor(t_ArabicNormalizationFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizationFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ArabicNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ArabicNormalizationFilter::initializeClass, 1)))
              return NULL;
            return t_ArabicNormalizationFilter::wrap_Object(ArabicNormalizationFilter(((t_ArabicNormalizationFilter *) arg)->object.this$));
          }
          static PyObject *t_ArabicNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ArabicNormalizationFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ArabicNormalizationFilter_init_(t_ArabicNormalizationFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ArabicNormalizationFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = ArabicNormalizationFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ArabicNormalizationFilter_incrementToken(t_ArabicNormalizationFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ArabicNormalizationFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/TreeSet.h"
#include "java/util/NavigableSet.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/util/SortedSet.h"
#include "java/util/Comparator.h"
#include "java/util/Collection.h"
#include "java/io/Serializable.h"
#include "java/lang/Cloneable.h"
#include "java/util/Iterator.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *TreeSet::class$ = NULL;
    jmethodID *TreeSet::mids$ = NULL;
    bool TreeSet::live$ = false;

    jclass TreeSet::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/TreeSet");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_0c3f2ecf] = env->getMethodID(cls, "<init>", "(Ljava/util/SortedSet;)V");
        mids$[mid_init$_9bfb370d] = env->getMethodID(cls, "<init>", "(Ljava/util/Collection;)V");
        mids$[mid_init$_6ffdd545] = env->getMethodID(cls, "<init>", "(Ljava/util/Comparator;)V");
        mids$[mid_add_290588e2] = env->getMethodID(cls, "add", "(Ljava/lang/Object;)Z");
        mids$[mid_addAll_9bfb3701] = env->getMethodID(cls, "addAll", "(Ljava/util/Collection;)Z");
        mids$[mid_ceiling_a932a95f] = env->getMethodID(cls, "ceiling", "(Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
        mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");
        mids$[mid_comparator_5a7ff2fc] = env->getMethodID(cls, "comparator", "()Ljava/util/Comparator;");
        mids$[mid_contains_290588e2] = env->getMethodID(cls, "contains", "(Ljava/lang/Object;)Z");
        mids$[mid_descendingIterator_40858c90] = env->getMethodID(cls, "descendingIterator", "()Ljava/util/Iterator;");
        mids$[mid_descendingSet_1d81e42d] = env->getMethodID(cls, "descendingSet", "()Ljava/util/NavigableSet;");
        mids$[mid_first_846352c3] = env->getMethodID(cls, "first", "()Ljava/lang/Object;");
        mids$[mid_floor_a932a95f] = env->getMethodID(cls, "floor", "(Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_headSet_39f27c22] = env->getMethodID(cls, "headSet", "(Ljava/lang/Object;)Ljava/util/SortedSet;");
        mids$[mid_headSet_a72e541e] = env->getMethodID(cls, "headSet", "(Ljava/lang/Object;Z)Ljava/util/NavigableSet;");
        mids$[mid_higher_a932a95f] = env->getMethodID(cls, "higher", "(Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
        mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
        mids$[mid_last_846352c3] = env->getMethodID(cls, "last", "()Ljava/lang/Object;");
        mids$[mid_lower_a932a95f] = env->getMethodID(cls, "lower", "(Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_pollFirst_846352c3] = env->getMethodID(cls, "pollFirst", "()Ljava/lang/Object;");
        mids$[mid_pollLast_846352c3] = env->getMethodID(cls, "pollLast", "()Ljava/lang/Object;");
        mids$[mid_remove_290588e2] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Z");
        mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
        mids$[mid_subSet_cf2accb6] = env->getMethodID(cls, "subSet", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedSet;");
        mids$[mid_subSet_34a398b7] = env->getMethodID(cls, "subSet", "(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/NavigableSet;");
        mids$[mid_tailSet_39f27c22] = env->getMethodID(cls, "tailSet", "(Ljava/lang/Object;)Ljava/util/SortedSet;");
        mids$[mid_tailSet_a72e541e] = env->getMethodID(cls, "tailSet", "(Ljava/lang/Object;Z)Ljava/util/NavigableSet;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    TreeSet::TreeSet() : ::java::util::AbstractSet(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    TreeSet::TreeSet(const ::java::util::SortedSet & a0) : ::java::util::AbstractSet(env->newObject(initializeClass, &mids$, mid_init$_0c3f2ecf, a0.this$)) {}

    TreeSet::TreeSet(const ::java::util::Collection & a0) : ::java::util::AbstractSet(env->newObject(initializeClass, &mids$, mid_init$_9bfb370d, a0.this$)) {}

    TreeSet::TreeSet(const ::java::util::Comparator & a0) : ::java::util::AbstractSet(env->newObject(initializeClass, &mids$, mid_init$_6ffdd545, a0.this$)) {}

    jboolean TreeSet::add(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_add_290588e2], a0.this$);
    }

    jboolean TreeSet::addAll(const ::java::util::Collection & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_addAll_9bfb3701], a0.this$);
    }

    ::java::lang::Object TreeSet::ceiling(const ::java::lang::Object & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_ceiling_a932a95f], a0.this$));
    }

    void TreeSet::clear() const
    {
      env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
    }

    ::java::lang::Object TreeSet::clone() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_clone_846352c3]));
    }

    ::java::util::Comparator TreeSet::comparator() const
    {
      return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_comparator_5a7ff2fc]));
    }

    jboolean TreeSet::contains(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_contains_290588e2], a0.this$);
    }

    ::java::util::Iterator TreeSet::descendingIterator() const
    {
      return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_descendingIterator_40858c90]));
    }

    ::java::util::NavigableSet TreeSet::descendingSet() const
    {
      return ::java::util::NavigableSet(env->callObjectMethod(this$, mids$[mid_descendingSet_1d81e42d]));
    }

    ::java::lang::Object TreeSet::first() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_first_846352c3]));
    }

    ::java::lang::Object TreeSet::floor(const ::java::lang::Object & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_floor_a932a95f], a0.this$));
    }

    ::java::util::SortedSet TreeSet::headSet(const ::java::lang::Object & a0) const
    {
      return ::java::util::SortedSet(env->callObjectMethod(this$, mids$[mid_headSet_39f27c22], a0.this$));
    }

    ::java::util::NavigableSet TreeSet::headSet(const ::java::lang::Object & a0, jboolean a1) const
    {
      return ::java::util::NavigableSet(env->callObjectMethod(this$, mids$[mid_headSet_a72e541e], a0.this$, a1));
    }

    ::java::lang::Object TreeSet::higher(const ::java::lang::Object & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_higher_a932a95f], a0.this$));
    }

    jboolean TreeSet::isEmpty() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isEmpty_54c6a16a]);
    }

    ::java::util::Iterator TreeSet::iterator() const
    {
      return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
    }

    ::java::lang::Object TreeSet::last() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_last_846352c3]));
    }

    ::java::lang::Object TreeSet::lower(const ::java::lang::Object & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_lower_a932a95f], a0.this$));
    }

    ::java::lang::Object TreeSet::pollFirst() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_pollFirst_846352c3]));
    }

    ::java::lang::Object TreeSet::pollLast() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_pollLast_846352c3]));
    }

    jboolean TreeSet::remove(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_remove_290588e2], a0.this$);
    }

    jint TreeSet::size() const
    {
      return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
    }

    ::java::util::SortedSet TreeSet::subSet(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
    {
      return ::java::util::SortedSet(env->callObjectMethod(this$, mids$[mid_subSet_cf2accb6], a0.this$, a1.this$));
    }

    ::java::util::NavigableSet TreeSet::subSet(const ::java::lang::Object & a0, jboolean a1, const ::java::lang::Object & a2, jboolean a3) const
    {
      return ::java::util::NavigableSet(env->callObjectMethod(this$, mids$[mid_subSet_34a398b7], a0.this$, a1, a2.this$, a3));
    }

    ::java::util::SortedSet TreeSet::tailSet(const ::java::lang::Object & a0) const
    {
      return ::java::util::SortedSet(env->callObjectMethod(this$, mids$[mid_tailSet_39f27c22], a0.this$));
    }

    ::java::util::NavigableSet TreeSet::tailSet(const ::java::lang::Object & a0, jboolean a1) const
    {
      return ::java::util::NavigableSet(env->callObjectMethod(this$, mids$[mid_tailSet_a72e541e], a0.this$, a1));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_TreeSet_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_TreeSet_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_TreeSet_of_(t_TreeSet *self, PyObject *args);
    static int t_TreeSet_init_(t_TreeSet *self, PyObject *args, PyObject *kwds);
    static PyObject *t_TreeSet_add(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_addAll(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_ceiling(t_TreeSet *self, PyObject *arg);
    static PyObject *t_TreeSet_clear(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_clone(t_TreeSet *self);
    static PyObject *t_TreeSet_comparator(t_TreeSet *self);
    static PyObject *t_TreeSet_contains(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_descendingIterator(t_TreeSet *self);
    static PyObject *t_TreeSet_descendingSet(t_TreeSet *self);
    static PyObject *t_TreeSet_first(t_TreeSet *self);
    static PyObject *t_TreeSet_floor(t_TreeSet *self, PyObject *arg);
    static PyObject *t_TreeSet_headSet(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_higher(t_TreeSet *self, PyObject *arg);
    static PyObject *t_TreeSet_isEmpty(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_iterator(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_last(t_TreeSet *self);
    static PyObject *t_TreeSet_lower(t_TreeSet *self, PyObject *arg);
    static PyObject *t_TreeSet_pollFirst(t_TreeSet *self);
    static PyObject *t_TreeSet_pollLast(t_TreeSet *self);
    static PyObject *t_TreeSet_remove(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_size(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_subSet(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_tailSet(t_TreeSet *self, PyObject *args);
    static PyObject *t_TreeSet_get__empty(t_TreeSet *self, void *data);
    static PyObject *t_TreeSet_get__parameters_(t_TreeSet *self, void *data);
    static PyGetSetDef t_TreeSet__fields_[] = {
      DECLARE_GET_FIELD(t_TreeSet, empty),
      DECLARE_GET_FIELD(t_TreeSet, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_TreeSet__methods_[] = {
      DECLARE_METHOD(t_TreeSet, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_TreeSet, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_TreeSet, of_, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, add, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, addAll, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, ceiling, METH_O),
      DECLARE_METHOD(t_TreeSet, clear, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, clone, METH_NOARGS),
      DECLARE_METHOD(t_TreeSet, comparator, METH_NOARGS),
      DECLARE_METHOD(t_TreeSet, contains, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, descendingIterator, METH_NOARGS),
      DECLARE_METHOD(t_TreeSet, descendingSet, METH_NOARGS),
      DECLARE_METHOD(t_TreeSet, first, METH_NOARGS),
      DECLARE_METHOD(t_TreeSet, floor, METH_O),
      DECLARE_METHOD(t_TreeSet, headSet, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, higher, METH_O),
      DECLARE_METHOD(t_TreeSet, isEmpty, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, iterator, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, last, METH_NOARGS),
      DECLARE_METHOD(t_TreeSet, lower, METH_O),
      DECLARE_METHOD(t_TreeSet, pollFirst, METH_NOARGS),
      DECLARE_METHOD(t_TreeSet, pollLast, METH_NOARGS),
      DECLARE_METHOD(t_TreeSet, remove, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, size, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, subSet, METH_VARARGS),
      DECLARE_METHOD(t_TreeSet, tailSet, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(TreeSet, t_TreeSet, ::java::util::AbstractSet, TreeSet, t_TreeSet_init_, ((PyObject *(*)(t_TreeSet *)) get_generic_iterator< t_TreeSet >), 0, t_TreeSet__fields_, 0, 0);
    PyObject *t_TreeSet::wrap_Object(const TreeSet& object, PyTypeObject *p0)
    {
      PyObject *obj = t_TreeSet::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_TreeSet *self = (t_TreeSet *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    PyObject *t_TreeSet::wrap_jobject(const jobject& object, PyTypeObject *p0)
    {
      PyObject *obj = t_TreeSet::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_TreeSet *self = (t_TreeSet *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    void t_TreeSet::install(PyObject *module)
    {
      installType(&PY_TYPE(TreeSet), module, "TreeSet", 0);
    }

    void t_TreeSet::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(TreeSet).tp_dict, "class_", make_descriptor(TreeSet::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(TreeSet).tp_dict, "wrapfn_", make_descriptor(t_TreeSet::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(TreeSet).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_TreeSet_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, TreeSet::initializeClass, 1)))
        return NULL;
      return t_TreeSet::wrap_Object(TreeSet(((t_TreeSet *) arg)->object.this$));
    }
    static PyObject *t_TreeSet_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, TreeSet::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_TreeSet_of_(t_TreeSet *self, PyObject *args)
    {
      if (!parseArg(args, "T", 1, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static int t_TreeSet_init_(t_TreeSet *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          TreeSet object((jobject) NULL);

          INT_CALL(object = TreeSet());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::util::SortedSet a0((jobject) NULL);
          PyTypeObject **p0;
          TreeSet object((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::SortedSet::initializeClass, &a0, &p0, ::java::util::t_SortedSet::parameters_))
          {
            INT_CALL(object = TreeSet(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;
          TreeSet object((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            INT_CALL(object = TreeSet(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::util::Comparator a0((jobject) NULL);
          PyTypeObject **p0;
          TreeSet object((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_))
          {
            INT_CALL(object = TreeSet(a0));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_TreeSet_add(t_TreeSet *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "O", self->parameters[0], &a0))
      {
        OBJ_CALL(result = self->object.add(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(TreeSet), (PyObject *) self, "add", args, 2);
    }

    static PyObject *t_TreeSet_addAll(t_TreeSet *self, PyObject *args)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      jboolean result;

      if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
      {
        OBJ_CALL(result = self->object.addAll(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(TreeSet), (PyObject *) self, "addAll", args, 2);
    }

    static PyObject *t_TreeSet_ceiling(t_TreeSet *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArg(arg, "O", self->parameters[0], &a0))
      {
        OBJ_CALL(result = self->object.ceiling(a0));
        return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "ceiling", arg);
      return NULL;
    }

    static PyObject *t_TreeSet_clear(t_TreeSet *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.clear());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(TreeSet), (PyObject *) self, "clear", args, 2);
    }

    static PyObject *t_TreeSet_clone(t_TreeSet *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.clone());
      return ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_TreeSet_comparator(t_TreeSet *self)
    {
      ::java::util::Comparator result((jobject) NULL);
      OBJ_CALL(result = self->object.comparator());
      return ::java::util::t_Comparator::wrap_Object(result);
    }

    static PyObject *t_TreeSet_contains(t_TreeSet *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.contains(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(TreeSet), (PyObject *) self, "contains", args, 2);
    }

    static PyObject *t_TreeSet_descendingIterator(t_TreeSet *self)
    {
      ::java::util::Iterator result((jobject) NULL);
      OBJ_CALL(result = self->object.descendingIterator());
      return ::java::util::t_Iterator::wrap_Object(result, self->parameters[0]);
    }

    static PyObject *t_TreeSet_descendingSet(t_TreeSet *self)
    {
      ::java::util::NavigableSet result((jobject) NULL);
      OBJ_CALL(result = self->object.descendingSet());
      return ::java::util::t_NavigableSet::wrap_Object(result, self->parameters[0]);
    }

    static PyObject *t_TreeSet_first(t_TreeSet *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.first());
      return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_TreeSet_floor(t_TreeSet *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArg(arg, "O", self->parameters[0], &a0))
      {
        OBJ_CALL(result = self->object.floor(a0));
        return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "floor", arg);
      return NULL;
    }

    static PyObject *t_TreeSet_headSet(t_TreeSet *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::util::SortedSet result((jobject) NULL);

          if (!parseArgs(args, "O", self->parameters[0], &a0))
          {
            OBJ_CALL(result = self->object.headSet(a0));
            return ::java::util::t_SortedSet::wrap_Object(result, self->parameters[0]);
          }
        }
        break;
       case 2:
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean a1;
          ::java::util::NavigableSet result((jobject) NULL);

          if (!parseArgs(args, "OZ", self->parameters[0], &a0, &a1))
          {
            OBJ_CALL(result = self->object.headSet(a0, a1));
            return ::java::util::t_NavigableSet::wrap_Object(result, self->parameters[0]);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "headSet", args);
      return NULL;
    }

    static PyObject *t_TreeSet_higher(t_TreeSet *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArg(arg, "O", self->parameters[0], &a0))
      {
        OBJ_CALL(result = self->object.higher(a0));
        return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "higher", arg);
      return NULL;
    }

    static PyObject *t_TreeSet_isEmpty(t_TreeSet *self, PyObject *args)
    {
      jboolean result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.isEmpty());
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(TreeSet), (PyObject *) self, "isEmpty", args, 2);
    }

    static PyObject *t_TreeSet_iterator(t_TreeSet *self, PyObject *args)
    {
      ::java::util::Iterator result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.iterator());
        return ::java::util::t_Iterator::wrap_Object(result, self->parameters[0]);
      }

      return callSuper(&PY_TYPE(TreeSet), (PyObject *) self, "iterator", args, 2);
    }

    static PyObject *t_TreeSet_last(t_TreeSet *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.last());
      return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_TreeSet_lower(t_TreeSet *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArg(arg, "O", self->parameters[0], &a0))
      {
        OBJ_CALL(result = self->object.lower(a0));
        return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "lower", arg);
      return NULL;
    }

    static PyObject *t_TreeSet_pollFirst(t_TreeSet *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.pollFirst());
      return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_TreeSet_pollLast(t_TreeSet *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.pollLast());
      return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_TreeSet_remove(t_TreeSet *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.remove(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(TreeSet), (PyObject *) self, "remove", args, 2);
    }

    static PyObject *t_TreeSet_size(t_TreeSet *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.size());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(TreeSet), (PyObject *) self, "size", args, 2);
    }

    static PyObject *t_TreeSet_subSet(t_TreeSet *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::Object a1((jobject) NULL);
          ::java::util::SortedSet result((jobject) NULL);

          if (!parseArgs(args, "OO", self->parameters[0], self->parameters[0], &a0, &a1))
          {
            OBJ_CALL(result = self->object.subSet(a0, a1));
            return ::java::util::t_SortedSet::wrap_Object(result, self->parameters[0]);
          }
        }
        break;
       case 4:
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean a1;
          ::java::lang::Object a2((jobject) NULL);
          jboolean a3;
          ::java::util::NavigableSet result((jobject) NULL);

          if (!parseArgs(args, "OZOZ", self->parameters[0], self->parameters[0], &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = self->object.subSet(a0, a1, a2, a3));
            return ::java::util::t_NavigableSet::wrap_Object(result, self->parameters[0]);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "subSet", args);
      return NULL;
    }

    static PyObject *t_TreeSet_tailSet(t_TreeSet *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::util::SortedSet result((jobject) NULL);

          if (!parseArgs(args, "O", self->parameters[0], &a0))
          {
            OBJ_CALL(result = self->object.tailSet(a0));
            return ::java::util::t_SortedSet::wrap_Object(result, self->parameters[0]);
          }
        }
        break;
       case 2:
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean a1;
          ::java::util::NavigableSet result((jobject) NULL);

          if (!parseArgs(args, "OZ", self->parameters[0], &a0, &a1))
          {
            OBJ_CALL(result = self->object.tailSet(a0, a1));
            return ::java::util::t_NavigableSet::wrap_Object(result, self->parameters[0]);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "tailSet", args);
      return NULL;
    }
    static PyObject *t_TreeSet_get__parameters_(t_TreeSet *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }

    static PyObject *t_TreeSet_get__empty(t_TreeSet *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isEmpty());
      Py_RETURN_BOOL(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/mutable/MutableValueBool.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {

          ::java::lang::Class *MutableValueBool::class$ = NULL;
          jmethodID *MutableValueBool::mids$ = NULL;
          jfieldID *MutableValueBool::fids$ = NULL;
          bool MutableValueBool::live$ = false;

          jclass MutableValueBool::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/mutable/MutableValueBool");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_compareSameType_290588f1] = env->getMethodID(cls, "compareSameType", "(Ljava/lang/Object;)I");
              mids$[mid_copy_d590ce7c] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/util/mutable/MutableValue;)V");
              mids$[mid_duplicate_15ab3811] = env->getMethodID(cls, "duplicate", "()Lorg/apache/lucene/util/mutable/MutableValue;");
              mids$[mid_equalsSameType_290588e2] = env->getMethodID(cls, "equalsSameType", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toObject_846352c3] = env->getMethodID(cls, "toObject", "()Ljava/lang/Object;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_value] = env->getFieldID(cls, "value", "Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MutableValueBool::MutableValueBool() : ::org::apache::lucene::util::mutable$::MutableValue(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint MutableValueBool::compareSameType(const ::java::lang::Object & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareSameType_290588f1], a0.this$);
          }

          void MutableValueBool::copy(const ::org::apache::lucene::util::mutable$::MutableValue & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copy_d590ce7c], a0.this$);
          }

          ::org::apache::lucene::util::mutable$::MutableValue MutableValueBool::duplicate() const
          {
            return ::org::apache::lucene::util::mutable$::MutableValue(env->callObjectMethod(this$, mids$[mid_duplicate_15ab3811]));
          }

          jboolean MutableValueBool::equalsSameType(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equalsSameType_290588e2], a0.this$);
          }

          jint MutableValueBool::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::Object MutableValueBool::toObject() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_toObject_846352c3]));
          }

          jboolean MutableValueBool::_get_value() const
          {
            return env->getBooleanField(this$, fids$[fid_value]);
          }

          void MutableValueBool::_set_value(jboolean a0) const
          {
            env->setBooleanField(this$, fids$[fid_value], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {
          static PyObject *t_MutableValueBool_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MutableValueBool_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MutableValueBool_init_(t_MutableValueBool *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MutableValueBool_compareSameType(t_MutableValueBool *self, PyObject *args);
          static PyObject *t_MutableValueBool_copy(t_MutableValueBool *self, PyObject *args);
          static PyObject *t_MutableValueBool_duplicate(t_MutableValueBool *self, PyObject *args);
          static PyObject *t_MutableValueBool_equalsSameType(t_MutableValueBool *self, PyObject *args);
          static PyObject *t_MutableValueBool_hashCode(t_MutableValueBool *self, PyObject *args);
          static PyObject *t_MutableValueBool_toObject(t_MutableValueBool *self, PyObject *args);
          static PyObject *t_MutableValueBool_get__value(t_MutableValueBool *self, void *data);
          static int t_MutableValueBool_set__value(t_MutableValueBool *self, PyObject *arg, void *data);

          static PyGetSetDef t_MutableValueBool__fields_[] = {
            DECLARE_GETSET_FIELD(t_MutableValueBool, value),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_MutableValueBool__methods_[] = {
            DECLARE_METHOD(t_MutableValueBool, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueBool, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueBool, compareSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueBool, copy, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueBool, duplicate, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueBool, equalsSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueBool, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueBool, toObject, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MutableValueBool, t_MutableValueBool, ::org::apache::lucene::util::mutable$::MutableValue, MutableValueBool, t_MutableValueBool_init_, 0, 0, t_MutableValueBool__fields_, 0, 0);

          void t_MutableValueBool::install(PyObject *module)
          {
            installType(&PY_TYPE(MutableValueBool), module, "MutableValueBool", 0);
          }

          void t_MutableValueBool::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MutableValueBool).tp_dict, "class_", make_descriptor(MutableValueBool::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MutableValueBool).tp_dict, "wrapfn_", make_descriptor(t_MutableValueBool::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MutableValueBool).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MutableValueBool_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MutableValueBool::initializeClass, 1)))
              return NULL;
            return t_MutableValueBool::wrap_Object(MutableValueBool(((t_MutableValueBool *) arg)->object.this$));
          }
          static PyObject *t_MutableValueBool_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MutableValueBool::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MutableValueBool_init_(t_MutableValueBool *self, PyObject *args, PyObject *kwds)
          {
            MutableValueBool object((jobject) NULL);

            INT_CALL(object = MutableValueBool());
            self->object = object;

            return 0;
          }

          static PyObject *t_MutableValueBool_compareSameType(t_MutableValueBool *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.compareSameType(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MutableValueBool), (PyObject *) self, "compareSameType", args, 2);
          }

          static PyObject *t_MutableValueBool_copy(t_MutableValueBool *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::mutable$::MutableValue::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copy(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(MutableValueBool), (PyObject *) self, "copy", args, 2);
          }

          static PyObject *t_MutableValueBool_duplicate(t_MutableValueBool *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.duplicate());
              return ::org::apache::lucene::util::mutable$::t_MutableValue::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MutableValueBool), (PyObject *) self, "duplicate", args, 2);
          }

          static PyObject *t_MutableValueBool_equalsSameType(t_MutableValueBool *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equalsSameType(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(MutableValueBool), (PyObject *) self, "equalsSameType", args, 2);
          }

          static PyObject *t_MutableValueBool_hashCode(t_MutableValueBool *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MutableValueBool), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_MutableValueBool_toObject(t_MutableValueBool *self, PyObject *args)
          {
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toObject());
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MutableValueBool), (PyObject *) self, "toObject", args, 2);
          }

          static PyObject *t_MutableValueBool_get__value(t_MutableValueBool *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object._get_value());
            Py_RETURN_BOOL(value);
          }
          static int t_MutableValueBool_set__value(t_MutableValueBool *self, PyObject *arg, void *data)
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object._set_value(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "value", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tr/ApostropheFilterFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tr {

          ::java::lang::Class *ApostropheFilterFactory::class$ = NULL;
          jmethodID *ApostropheFilterFactory::mids$ = NULL;
          bool ApostropheFilterFactory::live$ = false;

          jclass ApostropheFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tr/ApostropheFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ApostropheFilterFactory::ApostropheFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream ApostropheFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tr {
          static PyObject *t_ApostropheFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ApostropheFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ApostropheFilterFactory_init_(t_ApostropheFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ApostropheFilterFactory_create(t_ApostropheFilterFactory *self, PyObject *args);

          static PyMethodDef t_ApostropheFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ApostropheFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ApostropheFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ApostropheFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ApostropheFilterFactory, t_ApostropheFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, ApostropheFilterFactory, t_ApostropheFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_ApostropheFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ApostropheFilterFactory), module, "ApostropheFilterFactory", 0);
          }

          void t_ApostropheFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ApostropheFilterFactory).tp_dict, "class_", make_descriptor(ApostropheFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ApostropheFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_ApostropheFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ApostropheFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ApostropheFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ApostropheFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ApostropheFilterFactory::wrap_Object(ApostropheFilterFactory(((t_ApostropheFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ApostropheFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ApostropheFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ApostropheFilterFactory_init_(t_ApostropheFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ApostropheFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ApostropheFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ApostropheFilterFactory_create(t_ApostropheFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ApostropheFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cn/ChineseFilterFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/cn/ChineseFilter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cn {

          ::java::lang::Class *ChineseFilterFactory::class$ = NULL;
          jmethodID *ChineseFilterFactory::mids$ = NULL;
          bool ChineseFilterFactory::live$ = false;

          jclass ChineseFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cn/ChineseFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_08dbb372] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/cn/ChineseFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ChineseFilterFactory::ChineseFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::cn::ChineseFilter ChineseFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::cn::ChineseFilter(env->callObjectMethod(this$, mids$[mid_create_08dbb372], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cn {
          static PyObject *t_ChineseFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ChineseFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ChineseFilterFactory_init_(t_ChineseFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ChineseFilterFactory_create(t_ChineseFilterFactory *self, PyObject *args);

          static PyMethodDef t_ChineseFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ChineseFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ChineseFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ChineseFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ChineseFilterFactory, t_ChineseFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, ChineseFilterFactory, t_ChineseFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_ChineseFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ChineseFilterFactory), module, "ChineseFilterFactory", 0);
          }

          void t_ChineseFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ChineseFilterFactory).tp_dict, "class_", make_descriptor(ChineseFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ChineseFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_ChineseFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ChineseFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ChineseFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ChineseFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ChineseFilterFactory::wrap_Object(ChineseFilterFactory(((t_ChineseFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ChineseFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ChineseFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ChineseFilterFactory_init_(t_ChineseFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ChineseFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ChineseFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ChineseFilterFactory_create(t_ChineseFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::cn::ChineseFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::cn::t_ChineseFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ChineseFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40SkipListReader.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40SkipListReader::class$ = NULL;
          jmethodID *Lucene40SkipListReader::mids$ = NULL;
          bool Lucene40SkipListReader::live$ = false;

          jclass Lucene40SkipListReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40SkipListReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_949015ba] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/IndexInput;II)V");
              mids$[mid_getFreqPointer_54c6a17a] = env->getMethodID(cls, "getFreqPointer", "()J");
              mids$[mid_getOffsetLength_54c6a179] = env->getMethodID(cls, "getOffsetLength", "()I");
              mids$[mid_getPayloadLength_54c6a179] = env->getMethodID(cls, "getPayloadLength", "()I");
              mids$[mid_getProxPointer_54c6a17a] = env->getMethodID(cls, "getProxPointer", "()J");
              mids$[mid_init_05c5678f] = env->getMethodID(cls, "init", "(JJJIZZ)V");
              mids$[mid_seekChild_39c7bd3c] = env->getMethodID(cls, "seekChild", "(I)V");
              mids$[mid_setLastSkipData_39c7bd3c] = env->getMethodID(cls, "setLastSkipData", "(I)V");
              mids$[mid_readSkipData_5203bb2b] = env->getMethodID(cls, "readSkipData", "(ILorg/apache/lucene/store/IndexInput;)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40SkipListReader::Lucene40SkipListReader(const ::org::apache::lucene::store::IndexInput & a0, jint a1, jint a2) : ::org::apache::lucene::codecs::MultiLevelSkipListReader(env->newObject(initializeClass, &mids$, mid_init$_949015ba, a0.this$, a1, a2)) {}

          jlong Lucene40SkipListReader::getFreqPointer() const
          {
            return env->callLongMethod(this$, mids$[mid_getFreqPointer_54c6a17a]);
          }

          jint Lucene40SkipListReader::getOffsetLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getOffsetLength_54c6a179]);
          }

          jint Lucene40SkipListReader::getPayloadLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getPayloadLength_54c6a179]);
          }

          jlong Lucene40SkipListReader::getProxPointer() const
          {
            return env->callLongMethod(this$, mids$[mid_getProxPointer_54c6a17a]);
          }

          void Lucene40SkipListReader::init(jlong a0, jlong a1, jlong a2, jint a3, jboolean a4, jboolean a5) const
          {
            env->callVoidMethod(this$, mids$[mid_init_05c5678f], a0, a1, a2, a3, a4, a5);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40SkipListReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40SkipListReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40SkipListReader_init_(t_Lucene40SkipListReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40SkipListReader_getFreqPointer(t_Lucene40SkipListReader *self);
          static PyObject *t_Lucene40SkipListReader_getOffsetLength(t_Lucene40SkipListReader *self);
          static PyObject *t_Lucene40SkipListReader_getPayloadLength(t_Lucene40SkipListReader *self);
          static PyObject *t_Lucene40SkipListReader_getProxPointer(t_Lucene40SkipListReader *self);
          static PyObject *t_Lucene40SkipListReader_init(t_Lucene40SkipListReader *self, PyObject *args);
          static PyObject *t_Lucene40SkipListReader_get__freqPointer(t_Lucene40SkipListReader *self, void *data);
          static PyObject *t_Lucene40SkipListReader_get__offsetLength(t_Lucene40SkipListReader *self, void *data);
          static PyObject *t_Lucene40SkipListReader_get__payloadLength(t_Lucene40SkipListReader *self, void *data);
          static PyObject *t_Lucene40SkipListReader_get__proxPointer(t_Lucene40SkipListReader *self, void *data);
          static PyGetSetDef t_Lucene40SkipListReader__fields_[] = {
            DECLARE_GET_FIELD(t_Lucene40SkipListReader, freqPointer),
            DECLARE_GET_FIELD(t_Lucene40SkipListReader, offsetLength),
            DECLARE_GET_FIELD(t_Lucene40SkipListReader, payloadLength),
            DECLARE_GET_FIELD(t_Lucene40SkipListReader, proxPointer),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lucene40SkipListReader__methods_[] = {
            DECLARE_METHOD(t_Lucene40SkipListReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40SkipListReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40SkipListReader, getFreqPointer, METH_NOARGS),
            DECLARE_METHOD(t_Lucene40SkipListReader, getOffsetLength, METH_NOARGS),
            DECLARE_METHOD(t_Lucene40SkipListReader, getPayloadLength, METH_NOARGS),
            DECLARE_METHOD(t_Lucene40SkipListReader, getProxPointer, METH_NOARGS),
            DECLARE_METHOD(t_Lucene40SkipListReader, init, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40SkipListReader, t_Lucene40SkipListReader, ::org::apache::lucene::codecs::MultiLevelSkipListReader, Lucene40SkipListReader, t_Lucene40SkipListReader_init_, 0, 0, t_Lucene40SkipListReader__fields_, 0, 0);

          void t_Lucene40SkipListReader::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40SkipListReader), module, "Lucene40SkipListReader", 0);
          }

          void t_Lucene40SkipListReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40SkipListReader).tp_dict, "class_", make_descriptor(Lucene40SkipListReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40SkipListReader).tp_dict, "wrapfn_", make_descriptor(t_Lucene40SkipListReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40SkipListReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40SkipListReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40SkipListReader::initializeClass, 1)))
              return NULL;
            return t_Lucene40SkipListReader::wrap_Object(Lucene40SkipListReader(((t_Lucene40SkipListReader *) arg)->object.this$));
          }
          static PyObject *t_Lucene40SkipListReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40SkipListReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40SkipListReader_init_(t_Lucene40SkipListReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
            jint a1;
            jint a2;
            Lucene40SkipListReader object((jobject) NULL);

            if (!parseArgs(args, "kII", ::org::apache::lucene::store::IndexInput::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = Lucene40SkipListReader(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene40SkipListReader_getFreqPointer(t_Lucene40SkipListReader *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getFreqPointer());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_Lucene40SkipListReader_getOffsetLength(t_Lucene40SkipListReader *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getOffsetLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_Lucene40SkipListReader_getPayloadLength(t_Lucene40SkipListReader *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getPayloadLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_Lucene40SkipListReader_getProxPointer(t_Lucene40SkipListReader *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getProxPointer());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_Lucene40SkipListReader_init(t_Lucene40SkipListReader *self, PyObject *args)
          {
            jlong a0;
            jlong a1;
            jlong a2;
            jint a3;
            jboolean a4;
            jboolean a5;

            if (!parseArgs(args, "JJJIZZ", &a0, &a1, &a2, &a3, &a4, &a5))
            {
              OBJ_CALL(self->object.init(a0, a1, a2, a3, a4, a5));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40SkipListReader), (PyObject *) self, "init", args, 2);
          }

          static PyObject *t_Lucene40SkipListReader_get__freqPointer(t_Lucene40SkipListReader *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getFreqPointer());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }

          static PyObject *t_Lucene40SkipListReader_get__offsetLength(t_Lucene40SkipListReader *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getOffsetLength());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_Lucene40SkipListReader_get__payloadLength(t_Lucene40SkipListReader *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getPayloadLength());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_Lucene40SkipListReader_get__proxPointer(t_Lucene40SkipListReader *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getProxPointer());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/FST$BytesReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *FST$BytesReader::class$ = NULL;
          jmethodID *FST$BytesReader::mids$ = NULL;
          bool FST$BytesReader::live$ = false;

          jclass FST$BytesReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/FST$BytesReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getPosition_54c6a17a] = env->getMethodID(cls, "getPosition", "()J");
              mids$[mid_reversed_54c6a16a] = env->getMethodID(cls, "reversed", "()Z");
              mids$[mid_setPosition_0ee6df2f] = env->getMethodID(cls, "setPosition", "(J)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FST$BytesReader::FST$BytesReader() : ::org::apache::lucene::store::DataInput(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jlong FST$BytesReader::getPosition() const
          {
            return env->callLongMethod(this$, mids$[mid_getPosition_54c6a17a]);
          }

          jboolean FST$BytesReader::reversed() const
          {
            return env->callBooleanMethod(this$, mids$[mid_reversed_54c6a16a]);
          }

          void FST$BytesReader::setPosition(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPosition_0ee6df2f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_FST$BytesReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FST$BytesReader_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FST$BytesReader_of_(t_FST$BytesReader *self, PyObject *args);
          static int t_FST$BytesReader_init_(t_FST$BytesReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FST$BytesReader_getPosition(t_FST$BytesReader *self);
          static PyObject *t_FST$BytesReader_reversed(t_FST$BytesReader *self);
          static PyObject *t_FST$BytesReader_setPosition(t_FST$BytesReader *self, PyObject *arg);
          static PyObject *t_FST$BytesReader_get__position(t_FST$BytesReader *self, void *data);
          static int t_FST$BytesReader_set__position(t_FST$BytesReader *self, PyObject *arg, void *data);
          static PyObject *t_FST$BytesReader_get__parameters_(t_FST$BytesReader *self, void *data);
          static PyGetSetDef t_FST$BytesReader__fields_[] = {
            DECLARE_GETSET_FIELD(t_FST$BytesReader, position),
            DECLARE_GET_FIELD(t_FST$BytesReader, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FST$BytesReader__methods_[] = {
            DECLARE_METHOD(t_FST$BytesReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FST$BytesReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FST$BytesReader, of_, METH_VARARGS),
            DECLARE_METHOD(t_FST$BytesReader, getPosition, METH_NOARGS),
            DECLARE_METHOD(t_FST$BytesReader, reversed, METH_NOARGS),
            DECLARE_METHOD(t_FST$BytesReader, setPosition, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FST$BytesReader, t_FST$BytesReader, ::org::apache::lucene::store::DataInput, FST$BytesReader, t_FST$BytesReader_init_, 0, 0, t_FST$BytesReader__fields_, 0, 0);
          PyObject *t_FST$BytesReader::wrap_Object(const FST$BytesReader& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FST$BytesReader::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FST$BytesReader *self = (t_FST$BytesReader *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_FST$BytesReader::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FST$BytesReader::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FST$BytesReader *self = (t_FST$BytesReader *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_FST$BytesReader::install(PyObject *module)
          {
            installType(&PY_TYPE(FST$BytesReader), module, "FST$BytesReader", 0);
          }

          void t_FST$BytesReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FST$BytesReader).tp_dict, "class_", make_descriptor(FST$BytesReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FST$BytesReader).tp_dict, "wrapfn_", make_descriptor(t_FST$BytesReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FST$BytesReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FST$BytesReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FST$BytesReader::initializeClass, 1)))
              return NULL;
            return t_FST$BytesReader::wrap_Object(FST$BytesReader(((t_FST$BytesReader *) arg)->object.this$));
          }
          static PyObject *t_FST$BytesReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FST$BytesReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FST$BytesReader_of_(t_FST$BytesReader *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_FST$BytesReader_init_(t_FST$BytesReader *self, PyObject *args, PyObject *kwds)
          {
            FST$BytesReader object((jobject) NULL);

            INT_CALL(object = FST$BytesReader());
            self->object = object;

            return 0;
          }

          static PyObject *t_FST$BytesReader_getPosition(t_FST$BytesReader *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getPosition());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_FST$BytesReader_reversed(t_FST$BytesReader *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.reversed());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_FST$BytesReader_setPosition(t_FST$BytesReader *self, PyObject *arg)
          {
            jlong a0;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(self->object.setPosition(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPosition", arg);
            return NULL;
          }
          static PyObject *t_FST$BytesReader_get__parameters_(t_FST$BytesReader *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_FST$BytesReader_get__position(t_FST$BytesReader *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getPosition());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_FST$BytesReader_set__position(t_FST$BytesReader *self, PyObject *arg, void *data)
          {
            {
              jlong value;
              if (!parseArg(arg, "J", &value))
              {
                INT_CALL(self->object.setPosition(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "position", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/IntBlockPool$DirectAllocator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *IntBlockPool$DirectAllocator::class$ = NULL;
        jmethodID *IntBlockPool$DirectAllocator::mids$ = NULL;
        bool IntBlockPool$DirectAllocator::live$ = false;

        jclass IntBlockPool$DirectAllocator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/IntBlockPool$DirectAllocator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_recycleIntBlocks_9f62f13c] = env->getMethodID(cls, "recycleIntBlocks", "([[III)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IntBlockPool$DirectAllocator::IntBlockPool$DirectAllocator() : ::org::apache::lucene::util::IntBlockPool$Allocator(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void IntBlockPool$DirectAllocator::recycleIntBlocks(const JArray< JArray< jint > > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_recycleIntBlocks_9f62f13c], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_IntBlockPool$DirectAllocator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IntBlockPool$DirectAllocator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IntBlockPool$DirectAllocator_init_(t_IntBlockPool$DirectAllocator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IntBlockPool$DirectAllocator_recycleIntBlocks(t_IntBlockPool$DirectAllocator *self, PyObject *args);

        static PyMethodDef t_IntBlockPool$DirectAllocator__methods_[] = {
          DECLARE_METHOD(t_IntBlockPool$DirectAllocator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntBlockPool$DirectAllocator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntBlockPool$DirectAllocator, recycleIntBlocks, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IntBlockPool$DirectAllocator, t_IntBlockPool$DirectAllocator, ::org::apache::lucene::util::IntBlockPool$Allocator, IntBlockPool$DirectAllocator, t_IntBlockPool$DirectAllocator_init_, 0, 0, 0, 0, 0);

        void t_IntBlockPool$DirectAllocator::install(PyObject *module)
        {
          installType(&PY_TYPE(IntBlockPool$DirectAllocator), module, "IntBlockPool$DirectAllocator", 0);
        }

        void t_IntBlockPool$DirectAllocator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IntBlockPool$DirectAllocator).tp_dict, "class_", make_descriptor(IntBlockPool$DirectAllocator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IntBlockPool$DirectAllocator).tp_dict, "wrapfn_", make_descriptor(t_IntBlockPool$DirectAllocator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IntBlockPool$DirectAllocator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IntBlockPool$DirectAllocator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IntBlockPool$DirectAllocator::initializeClass, 1)))
            return NULL;
          return t_IntBlockPool$DirectAllocator::wrap_Object(IntBlockPool$DirectAllocator(((t_IntBlockPool$DirectAllocator *) arg)->object.this$));
        }
        static PyObject *t_IntBlockPool$DirectAllocator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IntBlockPool$DirectAllocator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IntBlockPool$DirectAllocator_init_(t_IntBlockPool$DirectAllocator *self, PyObject *args, PyObject *kwds)
        {
          IntBlockPool$DirectAllocator object((jobject) NULL);

          INT_CALL(object = IntBlockPool$DirectAllocator());
          self->object = object;

          return 0;
        }

        static PyObject *t_IntBlockPool$DirectAllocator_recycleIntBlocks(t_IntBlockPool$DirectAllocator *self, PyObject *args)
        {
          JArray< JArray< jint > > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[[III", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.recycleIntBlocks(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(IntBlockPool$DirectAllocator), (PyObject *) self, "recycleIntBlocks", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/WeakIdentityMap.h"
#include "java/util/Iterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *WeakIdentityMap::class$ = NULL;
        jmethodID *WeakIdentityMap::mids$ = NULL;
        bool WeakIdentityMap::live$ = false;

        jclass WeakIdentityMap::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/WeakIdentityMap");

            mids$ = new jmethodID[max_mid];
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_containsKey_290588e2] = env->getMethodID(cls, "containsKey", "(Ljava/lang/Object;)Z");
            mids$[mid_get_a932a95f] = env->getMethodID(cls, "get", "(Ljava/lang/Object;)Ljava/lang/Object;");
            mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
            mids$[mid_keyIterator_40858c90] = env->getMethodID(cls, "keyIterator", "()Ljava/util/Iterator;");
            mids$[mid_newConcurrentHashMap_0c924cc6] = env->getStaticMethodID(cls, "newConcurrentHashMap", "()Lorg/apache/lucene/util/WeakIdentityMap;");
            mids$[mid_newConcurrentHashMap_8f638b79] = env->getStaticMethodID(cls, "newConcurrentHashMap", "(Z)Lorg/apache/lucene/util/WeakIdentityMap;");
            mids$[mid_newHashMap_0c924cc6] = env->getStaticMethodID(cls, "newHashMap", "()Lorg/apache/lucene/util/WeakIdentityMap;");
            mids$[mid_newHashMap_8f638b79] = env->getStaticMethodID(cls, "newHashMap", "(Z)Lorg/apache/lucene/util/WeakIdentityMap;");
            mids$[mid_put_537d5bdf] = env->getMethodID(cls, "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
            mids$[mid_reap_54c6a166] = env->getMethodID(cls, "reap", "()V");
            mids$[mid_remove_a932a95f] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Ljava/lang/Object;");
            mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
            mids$[mid_valueIterator_40858c90] = env->getMethodID(cls, "valueIterator", "()Ljava/util/Iterator;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void WeakIdentityMap::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        jboolean WeakIdentityMap::containsKey(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_containsKey_290588e2], a0.this$);
        }

        ::java::lang::Object WeakIdentityMap::get(const ::java::lang::Object & a0) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_a932a95f], a0.this$));
        }

        jboolean WeakIdentityMap::isEmpty() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isEmpty_54c6a16a]);
        }

        ::java::util::Iterator WeakIdentityMap::keyIterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_keyIterator_40858c90]));
        }

        WeakIdentityMap WeakIdentityMap::newConcurrentHashMap()
        {
          jclass cls = env->getClass(initializeClass);
          return WeakIdentityMap(env->callStaticObjectMethod(cls, mids$[mid_newConcurrentHashMap_0c924cc6]));
        }

        WeakIdentityMap WeakIdentityMap::newConcurrentHashMap(jboolean a0)
        {
          jclass cls = env->getClass(initializeClass);
          return WeakIdentityMap(env->callStaticObjectMethod(cls, mids$[mid_newConcurrentHashMap_8f638b79], a0));
        }

        WeakIdentityMap WeakIdentityMap::newHashMap()
        {
          jclass cls = env->getClass(initializeClass);
          return WeakIdentityMap(env->callStaticObjectMethod(cls, mids$[mid_newHashMap_0c924cc6]));
        }

        WeakIdentityMap WeakIdentityMap::newHashMap(jboolean a0)
        {
          jclass cls = env->getClass(initializeClass);
          return WeakIdentityMap(env->callStaticObjectMethod(cls, mids$[mid_newHashMap_8f638b79], a0));
        }

        ::java::lang::Object WeakIdentityMap::put(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_put_537d5bdf], a0.this$, a1.this$));
        }

        void WeakIdentityMap::reap() const
        {
          env->callVoidMethod(this$, mids$[mid_reap_54c6a166]);
        }

        ::java::lang::Object WeakIdentityMap::remove(const ::java::lang::Object & a0) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_remove_a932a95f], a0.this$));
        }

        jint WeakIdentityMap::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
        }

        ::java::util::Iterator WeakIdentityMap::valueIterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_valueIterator_40858c90]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_WeakIdentityMap_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_WeakIdentityMap_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_WeakIdentityMap_of_(t_WeakIdentityMap *self, PyObject *args);
        static PyObject *t_WeakIdentityMap_clear(t_WeakIdentityMap *self);
        static PyObject *t_WeakIdentityMap_containsKey(t_WeakIdentityMap *self, PyObject *arg);
        static PyObject *t_WeakIdentityMap_get(t_WeakIdentityMap *self, PyObject *arg);
        static PyObject *t_WeakIdentityMap_isEmpty(t_WeakIdentityMap *self);
        static PyObject *t_WeakIdentityMap_keyIterator(t_WeakIdentityMap *self);
        static PyObject *t_WeakIdentityMap_newConcurrentHashMap(PyTypeObject *type, PyObject *args);
        static PyObject *t_WeakIdentityMap_newHashMap(PyTypeObject *type, PyObject *args);
        static PyObject *t_WeakIdentityMap_put(t_WeakIdentityMap *self, PyObject *args);
        static PyObject *t_WeakIdentityMap_reap(t_WeakIdentityMap *self);
        static PyObject *t_WeakIdentityMap_remove(t_WeakIdentityMap *self, PyObject *arg);
        static PyObject *t_WeakIdentityMap_size(t_WeakIdentityMap *self);
        static PyObject *t_WeakIdentityMap_valueIterator(t_WeakIdentityMap *self);
        static PyObject *t_WeakIdentityMap_get__empty(t_WeakIdentityMap *self, void *data);
        static PyObject *t_WeakIdentityMap_get__parameters_(t_WeakIdentityMap *self, void *data);
        static PyGetSetDef t_WeakIdentityMap__fields_[] = {
          DECLARE_GET_FIELD(t_WeakIdentityMap, empty),
          DECLARE_GET_FIELD(t_WeakIdentityMap, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_WeakIdentityMap__methods_[] = {
          DECLARE_METHOD(t_WeakIdentityMap, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_WeakIdentityMap, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_WeakIdentityMap, of_, METH_VARARGS),
          DECLARE_METHOD(t_WeakIdentityMap, clear, METH_NOARGS),
          DECLARE_METHOD(t_WeakIdentityMap, containsKey, METH_O),
          DECLARE_METHOD(t_WeakIdentityMap, get, METH_O),
          DECLARE_METHOD(t_WeakIdentityMap, isEmpty, METH_NOARGS),
          DECLARE_METHOD(t_WeakIdentityMap, keyIterator, METH_NOARGS),
          DECLARE_METHOD(t_WeakIdentityMap, newConcurrentHashMap, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_WeakIdentityMap, newHashMap, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_WeakIdentityMap, put, METH_VARARGS),
          DECLARE_METHOD(t_WeakIdentityMap, reap, METH_NOARGS),
          DECLARE_METHOD(t_WeakIdentityMap, remove, METH_O),
          DECLARE_METHOD(t_WeakIdentityMap, size, METH_NOARGS),
          DECLARE_METHOD(t_WeakIdentityMap, valueIterator, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(WeakIdentityMap, t_WeakIdentityMap, ::java::lang::Object, WeakIdentityMap, abstract_init, 0, 0, t_WeakIdentityMap__fields_, 0, 0);
        PyObject *t_WeakIdentityMap::wrap_Object(const WeakIdentityMap& object, PyTypeObject *p0, PyTypeObject *p1)
        {
          PyObject *obj = t_WeakIdentityMap::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_WeakIdentityMap *self = (t_WeakIdentityMap *) obj;
            self->parameters[0] = p0;
            self->parameters[1] = p1;
          }
          return obj;
        }

        PyObject *t_WeakIdentityMap::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
        {
          PyObject *obj = t_WeakIdentityMap::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_WeakIdentityMap *self = (t_WeakIdentityMap *) obj;
            self->parameters[0] = p0;
            self->parameters[1] = p1;
          }
          return obj;
        }

        void t_WeakIdentityMap::install(PyObject *module)
        {
          installType(&PY_TYPE(WeakIdentityMap), module, "WeakIdentityMap", 0);
        }

        void t_WeakIdentityMap::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(WeakIdentityMap).tp_dict, "class_", make_descriptor(WeakIdentityMap::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(WeakIdentityMap).tp_dict, "wrapfn_", make_descriptor(t_WeakIdentityMap::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(WeakIdentityMap).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_WeakIdentityMap_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, WeakIdentityMap::initializeClass, 1)))
            return NULL;
          return t_WeakIdentityMap::wrap_Object(WeakIdentityMap(((t_WeakIdentityMap *) arg)->object.this$));
        }
        static PyObject *t_WeakIdentityMap_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, WeakIdentityMap::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_WeakIdentityMap_of_(t_WeakIdentityMap *self, PyObject *args)
        {
          if (!parseArg(args, "T", 2, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_WeakIdentityMap_clear(t_WeakIdentityMap *self)
        {
          OBJ_CALL(self->object.clear());
          Py_RETURN_NONE;
        }

        static PyObject *t_WeakIdentityMap_containsKey(t_WeakIdentityMap *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "o", &a0))
          {
            OBJ_CALL(result = self->object.containsKey(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "containsKey", arg);
          return NULL;
        }

        static PyObject *t_WeakIdentityMap_get(t_WeakIdentityMap *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::Object result((jobject) NULL);

          if (!parseArg(arg, "o", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_WeakIdentityMap_isEmpty(t_WeakIdentityMap *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isEmpty());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_WeakIdentityMap_keyIterator(t_WeakIdentityMap *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.keyIterator());
          return ::java::util::t_Iterator::wrap_Object(result, self->parameters[0]);
        }

        static PyObject *t_WeakIdentityMap_newConcurrentHashMap(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              WeakIdentityMap result((jobject) NULL);
              OBJ_CALL(result = ::org::apache::lucene::util::WeakIdentityMap::newConcurrentHashMap());
              return t_WeakIdentityMap::wrap_Object(result);
            }
            break;
           case 1:
            {
              jboolean a0;
              WeakIdentityMap result((jobject) NULL);

              if (!parseArgs(args, "Z", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::WeakIdentityMap::newConcurrentHashMap(a0));
                return t_WeakIdentityMap::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "newConcurrentHashMap", args);
          return NULL;
        }

        static PyObject *t_WeakIdentityMap_newHashMap(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              WeakIdentityMap result((jobject) NULL);
              OBJ_CALL(result = ::org::apache::lucene::util::WeakIdentityMap::newHashMap());
              return t_WeakIdentityMap::wrap_Object(result);
            }
            break;
           case 1:
            {
              jboolean a0;
              WeakIdentityMap result((jobject) NULL);

              if (!parseArgs(args, "Z", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::WeakIdentityMap::newHashMap(a0));
                return t_WeakIdentityMap::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "newHashMap", args);
          return NULL;
        }

        static PyObject *t_WeakIdentityMap_put(t_WeakIdentityMap *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::Object a1((jobject) NULL);
          ::java::lang::Object result((jobject) NULL);

          if (!parseArgs(args, "OO", self->parameters[0], self->parameters[1], &a0, &a1))
          {
            OBJ_CALL(result = self->object.put(a0, a1));
            return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "put", args);
          return NULL;
        }

        static PyObject *t_WeakIdentityMap_reap(t_WeakIdentityMap *self)
        {
          OBJ_CALL(self->object.reap());
          Py_RETURN_NONE;
        }

        static PyObject *t_WeakIdentityMap_remove(t_WeakIdentityMap *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::Object result((jobject) NULL);

          if (!parseArg(arg, "o", &a0))
          {
            OBJ_CALL(result = self->object.remove(a0));
            return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "remove", arg);
          return NULL;
        }

        static PyObject *t_WeakIdentityMap_size(t_WeakIdentityMap *self)
        {
          jint result;
          OBJ_CALL(result = self->object.size());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_WeakIdentityMap_valueIterator(t_WeakIdentityMap *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.valueIterator());
          return ::java::util::t_Iterator::wrap_Object(result, self->parameters[1]);
        }
        static PyObject *t_WeakIdentityMap_get__parameters_(t_WeakIdentityMap *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_WeakIdentityMap_get__empty(t_WeakIdentityMap *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isEmpty());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/text/DateFormat.h"
#include "java/util/Locale.h"
#include "java/util/TimeZone.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/StringBuffer.h"
#include "java/util/Date.h"
#include "java/text/NumberFormat.h"
#include "java/util/Calendar.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
  namespace text {

    ::java::lang::Class *DateFormat::class$ = NULL;
    jmethodID *DateFormat::mids$ = NULL;
    bool DateFormat::live$ = false;
    jint DateFormat::AM_PM_FIELD = (jint) 0;
    jint DateFormat::DATE_FIELD = (jint) 0;
    jint DateFormat::DAY_OF_WEEK_FIELD = (jint) 0;
    jint DateFormat::DAY_OF_WEEK_IN_MONTH_FIELD = (jint) 0;
    jint DateFormat::DAY_OF_YEAR_FIELD = (jint) 0;
    jint DateFormat::DEFAULT = (jint) 0;
    jint DateFormat::ERA_FIELD = (jint) 0;
    jint DateFormat::FULL = (jint) 0;
    jint DateFormat::HOUR0_FIELD = (jint) 0;
    jint DateFormat::HOUR1_FIELD = (jint) 0;
    jint DateFormat::HOUR_OF_DAY0_FIELD = (jint) 0;
    jint DateFormat::HOUR_OF_DAY1_FIELD = (jint) 0;
    jint DateFormat::LONG = (jint) 0;
    jint DateFormat::MEDIUM = (jint) 0;
    jint DateFormat::MILLISECOND_FIELD = (jint) 0;
    jint DateFormat::MINUTE_FIELD = (jint) 0;
    jint DateFormat::MONTH_FIELD = (jint) 0;
    jint DateFormat::SECOND_FIELD = (jint) 0;
    jint DateFormat::SHORT = (jint) 0;
    jint DateFormat::TIMEZONE_FIELD = (jint) 0;
    jint DateFormat::WEEK_OF_MONTH_FIELD = (jint) 0;
    jint DateFormat::WEEK_OF_YEAR_FIELD = (jint) 0;
    jint DateFormat::YEAR_FIELD = (jint) 0;

    jclass DateFormat::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/text/DateFormat");

        mids$ = new jmethodID[max_mid];
        mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_format_60ff0f6a] = env->getMethodID(cls, "format", "(Ljava/util/Date;)Ljava/lang/String;");
        mids$[mid_getAvailableLocales_59cb5b46] = env->getStaticMethodID(cls, "getAvailableLocales", "()[Ljava/util/Locale;");
        mids$[mid_getCalendar_5a365c68] = env->getMethodID(cls, "getCalendar", "()Ljava/util/Calendar;");
        mids$[mid_getDateInstance_5b76e92a] = env->getStaticMethodID(cls, "getDateInstance", "()Ljava/text/DateFormat;");
        mids$[mid_getDateInstance_f487f948] = env->getStaticMethodID(cls, "getDateInstance", "(I)Ljava/text/DateFormat;");
        mids$[mid_getDateInstance_0c1a225b] = env->getStaticMethodID(cls, "getDateInstance", "(ILjava/util/Locale;)Ljava/text/DateFormat;");
        mids$[mid_getDateTimeInstance_5b76e92a] = env->getStaticMethodID(cls, "getDateTimeInstance", "()Ljava/text/DateFormat;");
        mids$[mid_getDateTimeInstance_47ab2552] = env->getStaticMethodID(cls, "getDateTimeInstance", "(II)Ljava/text/DateFormat;");
        mids$[mid_getDateTimeInstance_32c76395] = env->getStaticMethodID(cls, "getDateTimeInstance", "(IILjava/util/Locale;)Ljava/text/DateFormat;");
        mids$[mid_getInstance_5b76e92a] = env->getStaticMethodID(cls, "getInstance", "()Ljava/text/DateFormat;");
        mids$[mid_getNumberFormat_6b701965] = env->getMethodID(cls, "getNumberFormat", "()Ljava/text/NumberFormat;");
        mids$[mid_getTimeInstance_5b76e92a] = env->getStaticMethodID(cls, "getTimeInstance", "()Ljava/text/DateFormat;");
        mids$[mid_getTimeInstance_f487f948] = env->getStaticMethodID(cls, "getTimeInstance", "(I)Ljava/text/DateFormat;");
        mids$[mid_getTimeInstance_0c1a225b] = env->getStaticMethodID(cls, "getTimeInstance", "(ILjava/util/Locale;)Ljava/text/DateFormat;");
        mids$[mid_getTimeZone_6cce40e5] = env->getMethodID(cls, "getTimeZone", "()Ljava/util/TimeZone;");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_isLenient_54c6a16a] = env->getMethodID(cls, "isLenient", "()Z");
        mids$[mid_parse_e1ca31a4] = env->getMethodID(cls, "parse", "(Ljava/lang/String;)Ljava/util/Date;");
        mids$[mid_setCalendar_3b3fa6b1] = env->getMethodID(cls, "setCalendar", "(Ljava/util/Calendar;)V");
        mids$[mid_setLenient_bb0c767f] = env->getMethodID(cls, "setLenient", "(Z)V");
        mids$[mid_setNumberFormat_d2d1ba24] = env->getMethodID(cls, "setNumberFormat", "(Ljava/text/NumberFormat;)V");
        mids$[mid_setTimeZone_f7b32d20] = env->getMethodID(cls, "setTimeZone", "(Ljava/util/TimeZone;)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        AM_PM_FIELD = env->getStaticIntField(cls, "AM_PM_FIELD");
        DATE_FIELD = env->getStaticIntField(cls, "DATE_FIELD");
        DAY_OF_WEEK_FIELD = env->getStaticIntField(cls, "DAY_OF_WEEK_FIELD");
        DAY_OF_WEEK_IN_MONTH_FIELD = env->getStaticIntField(cls, "DAY_OF_WEEK_IN_MONTH_FIELD");
        DAY_OF_YEAR_FIELD = env->getStaticIntField(cls, "DAY_OF_YEAR_FIELD");
        DEFAULT = env->getStaticIntField(cls, "DEFAULT");
        ERA_FIELD = env->getStaticIntField(cls, "ERA_FIELD");
        FULL = env->getStaticIntField(cls, "FULL");
        HOUR0_FIELD = env->getStaticIntField(cls, "HOUR0_FIELD");
        HOUR1_FIELD = env->getStaticIntField(cls, "HOUR1_FIELD");
        HOUR_OF_DAY0_FIELD = env->getStaticIntField(cls, "HOUR_OF_DAY0_FIELD");
        HOUR_OF_DAY1_FIELD = env->getStaticIntField(cls, "HOUR_OF_DAY1_FIELD");
        LONG = env->getStaticIntField(cls, "LONG");
        MEDIUM = env->getStaticIntField(cls, "MEDIUM");
        MILLISECOND_FIELD = env->getStaticIntField(cls, "MILLISECOND_FIELD");
        MINUTE_FIELD = env->getStaticIntField(cls, "MINUTE_FIELD");
        MONTH_FIELD = env->getStaticIntField(cls, "MONTH_FIELD");
        SECOND_FIELD = env->getStaticIntField(cls, "SECOND_FIELD");
        SHORT = env->getStaticIntField(cls, "SHORT");
        TIMEZONE_FIELD = env->getStaticIntField(cls, "TIMEZONE_FIELD");
        WEEK_OF_MONTH_FIELD = env->getStaticIntField(cls, "WEEK_OF_MONTH_FIELD");
        WEEK_OF_YEAR_FIELD = env->getStaticIntField(cls, "WEEK_OF_YEAR_FIELD");
        YEAR_FIELD = env->getStaticIntField(cls, "YEAR_FIELD");
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    ::java::lang::Object DateFormat::clone() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_clone_846352c3]));
    }

    jboolean DateFormat::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    ::java::lang::String DateFormat::format(const ::java::util::Date & a0) const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_format_60ff0f6a], a0.this$));
    }

    JArray< ::java::util::Locale > DateFormat::getAvailableLocales()
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< ::java::util::Locale >(env->callStaticObjectMethod(cls, mids$[mid_getAvailableLocales_59cb5b46]));
    }

    ::java::util::Calendar DateFormat::getCalendar() const
    {
      return ::java::util::Calendar(env->callObjectMethod(this$, mids$[mid_getCalendar_5a365c68]));
    }

    DateFormat DateFormat::getDateInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return DateFormat(env->callStaticObjectMethod(cls, mids$[mid_getDateInstance_5b76e92a]));
    }

    DateFormat DateFormat::getDateInstance(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return DateFormat(env->callStaticObjectMethod(cls, mids$[mid_getDateInstance_f487f948], a0));
    }

    DateFormat DateFormat::getDateInstance(jint a0, const ::java::util::Locale & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return DateFormat(env->callStaticObjectMethod(cls, mids$[mid_getDateInstance_0c1a225b], a0, a1.this$));
    }

    DateFormat DateFormat::getDateTimeInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return DateFormat(env->callStaticObjectMethod(cls, mids$[mid_getDateTimeInstance_5b76e92a]));
    }

    DateFormat DateFormat::getDateTimeInstance(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return DateFormat(env->callStaticObjectMethod(cls, mids$[mid_getDateTimeInstance_47ab2552], a0, a1));
    }

    DateFormat DateFormat::getDateTimeInstance(jint a0, jint a1, const ::java::util::Locale & a2)
    {
      jclass cls = env->getClass(initializeClass);
      return DateFormat(env->callStaticObjectMethod(cls, mids$[mid_getDateTimeInstance_32c76395], a0, a1, a2.this$));
    }

    DateFormat DateFormat::getInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return DateFormat(env->callStaticObjectMethod(cls, mids$[mid_getInstance_5b76e92a]));
    }

    ::java::text::NumberFormat DateFormat::getNumberFormat() const
    {
      return ::java::text::NumberFormat(env->callObjectMethod(this$, mids$[mid_getNumberFormat_6b701965]));
    }

    DateFormat DateFormat::getTimeInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return DateFormat(env->callStaticObjectMethod(cls, mids$[mid_getTimeInstance_5b76e92a]));
    }

    DateFormat DateFormat::getTimeInstance(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return DateFormat(env->callStaticObjectMethod(cls, mids$[mid_getTimeInstance_f487f948], a0));
    }

    DateFormat DateFormat::getTimeInstance(jint a0, const ::java::util::Locale & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return DateFormat(env->callStaticObjectMethod(cls, mids$[mid_getTimeInstance_0c1a225b], a0, a1.this$));
    }

    ::java::util::TimeZone DateFormat::getTimeZone() const
    {
      return ::java::util::TimeZone(env->callObjectMethod(this$, mids$[mid_getTimeZone_6cce40e5]));
    }

    jint DateFormat::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jboolean DateFormat::isLenient() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isLenient_54c6a16a]);
    }

    ::java::util::Date DateFormat::parse(const ::java::lang::String & a0) const
    {
      return ::java::util::Date(env->callObjectMethod(this$, mids$[mid_parse_e1ca31a4], a0.this$));
    }

    void DateFormat::setCalendar(const ::java::util::Calendar & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setCalendar_3b3fa6b1], a0.this$);
    }

    void DateFormat::setLenient(jboolean a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setLenient_bb0c767f], a0);
    }

    void DateFormat::setNumberFormat(const ::java::text::NumberFormat & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setNumberFormat_d2d1ba24], a0.this$);
    }

    void DateFormat::setTimeZone(const ::java::util::TimeZone & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setTimeZone_f7b32d20], a0.this$);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace text {
    static PyObject *t_DateFormat_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_DateFormat_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_DateFormat_clone(t_DateFormat *self, PyObject *args);
    static PyObject *t_DateFormat_equals(t_DateFormat *self, PyObject *args);
    static PyObject *t_DateFormat_format(t_DateFormat *self, PyObject *args);
    static PyObject *t_DateFormat_getAvailableLocales(PyTypeObject *type);
    static PyObject *t_DateFormat_getCalendar(t_DateFormat *self);
    static PyObject *t_DateFormat_getDateInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_DateFormat_getDateTimeInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_DateFormat_getInstance(PyTypeObject *type);
    static PyObject *t_DateFormat_getNumberFormat(t_DateFormat *self);
    static PyObject *t_DateFormat_getTimeInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_DateFormat_getTimeZone(t_DateFormat *self);
    static PyObject *t_DateFormat_hashCode(t_DateFormat *self, PyObject *args);
    static PyObject *t_DateFormat_isLenient(t_DateFormat *self);
    static PyObject *t_DateFormat_parse(t_DateFormat *self, PyObject *arg);
    static PyObject *t_DateFormat_setCalendar(t_DateFormat *self, PyObject *arg);
    static PyObject *t_DateFormat_setLenient(t_DateFormat *self, PyObject *arg);
    static PyObject *t_DateFormat_setNumberFormat(t_DateFormat *self, PyObject *arg);
    static PyObject *t_DateFormat_setTimeZone(t_DateFormat *self, PyObject *arg);
    static PyObject *t_DateFormat_get__availableLocales(t_DateFormat *self, void *data);
    static PyObject *t_DateFormat_get__calendar(t_DateFormat *self, void *data);
    static int t_DateFormat_set__calendar(t_DateFormat *self, PyObject *arg, void *data);
    static PyObject *t_DateFormat_get__dateInstance(t_DateFormat *self, void *data);
    static PyObject *t_DateFormat_get__dateTimeInstance(t_DateFormat *self, void *data);
    static PyObject *t_DateFormat_get__instance(t_DateFormat *self, void *data);
    static PyObject *t_DateFormat_get__lenient(t_DateFormat *self, void *data);
    static int t_DateFormat_set__lenient(t_DateFormat *self, PyObject *arg, void *data);
    static PyObject *t_DateFormat_get__numberFormat(t_DateFormat *self, void *data);
    static int t_DateFormat_set__numberFormat(t_DateFormat *self, PyObject *arg, void *data);
    static PyObject *t_DateFormat_get__timeInstance(t_DateFormat *self, void *data);
    static PyObject *t_DateFormat_get__timeZone(t_DateFormat *self, void *data);
    static int t_DateFormat_set__timeZone(t_DateFormat *self, PyObject *arg, void *data);
    static PyGetSetDef t_DateFormat__fields_[] = {
      DECLARE_GET_FIELD(t_DateFormat, availableLocales),
      DECLARE_GETSET_FIELD(t_DateFormat, calendar),
      DECLARE_GET_FIELD(t_DateFormat, dateInstance),
      DECLARE_GET_FIELD(t_DateFormat, dateTimeInstance),
      DECLARE_GET_FIELD(t_DateFormat, instance),
      DECLARE_GETSET_FIELD(t_DateFormat, lenient),
      DECLARE_GETSET_FIELD(t_DateFormat, numberFormat),
      DECLARE_GET_FIELD(t_DateFormat, timeInstance),
      DECLARE_GETSET_FIELD(t_DateFormat, timeZone),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_DateFormat__methods_[] = {
      DECLARE_METHOD(t_DateFormat, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_DateFormat, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_DateFormat, clone, METH_VARARGS),
      DECLARE_METHOD(t_DateFormat, equals, METH_VARARGS),
      DECLARE_METHOD(t_DateFormat, format, METH_VARARGS),
      DECLARE_METHOD(t_DateFormat, getAvailableLocales, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_DateFormat, getCalendar, METH_NOARGS),
      DECLARE_METHOD(t_DateFormat, getDateInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_DateFormat, getDateTimeInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_DateFormat, getInstance, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_DateFormat, getNumberFormat, METH_NOARGS),
      DECLARE_METHOD(t_DateFormat, getTimeInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_DateFormat, getTimeZone, METH_NOARGS),
      DECLARE_METHOD(t_DateFormat, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_DateFormat, isLenient, METH_NOARGS),
      DECLARE_METHOD(t_DateFormat, parse, METH_O),
      DECLARE_METHOD(t_DateFormat, setCalendar, METH_O),
      DECLARE_METHOD(t_DateFormat, setLenient, METH_O),
      DECLARE_METHOD(t_DateFormat, setNumberFormat, METH_O),
      DECLARE_METHOD(t_DateFormat, setTimeZone, METH_O),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(DateFormat, t_DateFormat, ::java::text::Format, DateFormat, abstract_init, 0, 0, t_DateFormat__fields_, 0, 0);

    void t_DateFormat::install(PyObject *module)
    {
      installType(&PY_TYPE(DateFormat), module, "DateFormat", 0);
    }

    void t_DateFormat::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "class_", make_descriptor(DateFormat::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "wrapfn_", make_descriptor(t_DateFormat::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
      env->getClass(DateFormat::initializeClass);
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "AM_PM_FIELD", make_descriptor(DateFormat::AM_PM_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "DATE_FIELD", make_descriptor(DateFormat::DATE_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "DAY_OF_WEEK_FIELD", make_descriptor(DateFormat::DAY_OF_WEEK_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "DAY_OF_WEEK_IN_MONTH_FIELD", make_descriptor(DateFormat::DAY_OF_WEEK_IN_MONTH_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "DAY_OF_YEAR_FIELD", make_descriptor(DateFormat::DAY_OF_YEAR_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "DEFAULT", make_descriptor(DateFormat::DEFAULT));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "ERA_FIELD", make_descriptor(DateFormat::ERA_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "FULL", make_descriptor(DateFormat::FULL));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "HOUR0_FIELD", make_descriptor(DateFormat::HOUR0_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "HOUR1_FIELD", make_descriptor(DateFormat::HOUR1_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "HOUR_OF_DAY0_FIELD", make_descriptor(DateFormat::HOUR_OF_DAY0_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "HOUR_OF_DAY1_FIELD", make_descriptor(DateFormat::HOUR_OF_DAY1_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "LONG", make_descriptor(DateFormat::LONG));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "MEDIUM", make_descriptor(DateFormat::MEDIUM));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "MILLISECOND_FIELD", make_descriptor(DateFormat::MILLISECOND_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "MINUTE_FIELD", make_descriptor(DateFormat::MINUTE_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "MONTH_FIELD", make_descriptor(DateFormat::MONTH_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "SECOND_FIELD", make_descriptor(DateFormat::SECOND_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "SHORT", make_descriptor(DateFormat::SHORT));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "TIMEZONE_FIELD", make_descriptor(DateFormat::TIMEZONE_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "WEEK_OF_MONTH_FIELD", make_descriptor(DateFormat::WEEK_OF_MONTH_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "WEEK_OF_YEAR_FIELD", make_descriptor(DateFormat::WEEK_OF_YEAR_FIELD));
      PyDict_SetItemString(PY_TYPE(DateFormat).tp_dict, "YEAR_FIELD", make_descriptor(DateFormat::YEAR_FIELD));
    }

    static PyObject *t_DateFormat_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, DateFormat::initializeClass, 1)))
        return NULL;
      return t_DateFormat::wrap_Object(DateFormat(((t_DateFormat *) arg)->object.this$));
    }
    static PyObject *t_DateFormat_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, DateFormat::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_DateFormat_clone(t_DateFormat *self, PyObject *args)
    {
      ::java::lang::Object result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.clone());
        return ::java::lang::t_Object::wrap_Object(result);
      }

      return callSuper(&PY_TYPE(DateFormat), (PyObject *) self, "clone", args, 2);
    }

    static PyObject *t_DateFormat_equals(t_DateFormat *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(DateFormat), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_DateFormat_format(t_DateFormat *self, PyObject *args)
    {
      ::java::util::Date a0((jobject) NULL);
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, "k", ::java::util::Date::initializeClass, &a0))
      {
        OBJ_CALL(result = self->object.format(a0));
        return j2p(result);
      }

      return callSuper(&PY_TYPE(DateFormat), (PyObject *) self, "format", args, 2);
    }

    static PyObject *t_DateFormat_getAvailableLocales(PyTypeObject *type)
    {
      JArray< ::java::util::Locale > result((jobject) NULL);
      OBJ_CALL(result = ::java::text::DateFormat::getAvailableLocales());
      return JArray<jobject>(result.this$).wrap(::java::util::t_Locale::wrap_jobject);
    }

    static PyObject *t_DateFormat_getCalendar(t_DateFormat *self)
    {
      ::java::util::Calendar result((jobject) NULL);
      OBJ_CALL(result = self->object.getCalendar());
      return ::java::util::t_Calendar::wrap_Object(result);
    }

    static PyObject *t_DateFormat_getDateInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          DateFormat result((jobject) NULL);
          OBJ_CALL(result = ::java::text::DateFormat::getDateInstance());
          return t_DateFormat::wrap_Object(result);
        }
        break;
       case 1:
        {
          jint a0;
          DateFormat result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::text::DateFormat::getDateInstance(a0));
            return t_DateFormat::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          jint a0;
          ::java::util::Locale a1((jobject) NULL);
          DateFormat result((jobject) NULL);

          if (!parseArgs(args, "Ik", ::java::util::Locale::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::java::text::DateFormat::getDateInstance(a0, a1));
            return t_DateFormat::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getDateInstance", args);
      return NULL;
    }

    static PyObject *t_DateFormat_getDateTimeInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          DateFormat result((jobject) NULL);
          OBJ_CALL(result = ::java::text::DateFormat::getDateTimeInstance());
          return t_DateFormat::wrap_Object(result);
        }
        break;
       case 2:
        {
          jint a0;
          jint a1;
          DateFormat result((jobject) NULL);

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = ::java::text::DateFormat::getDateTimeInstance(a0, a1));
            return t_DateFormat::wrap_Object(result);
          }
        }
        break;
       case 3:
        {
          jint a0;
          jint a1;
          ::java::util::Locale a2((jobject) NULL);
          DateFormat result((jobject) NULL);

          if (!parseArgs(args, "IIk", ::java::util::Locale::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::text::DateFormat::getDateTimeInstance(a0, a1, a2));
            return t_DateFormat::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getDateTimeInstance", args);
      return NULL;
    }

    static PyObject *t_DateFormat_getInstance(PyTypeObject *type)
    {
      DateFormat result((jobject) NULL);
      OBJ_CALL(result = ::java::text::DateFormat::getInstance());
      return t_DateFormat::wrap_Object(result);
    }

    static PyObject *t_DateFormat_getNumberFormat(t_DateFormat *self)
    {
      ::java::text::NumberFormat result((jobject) NULL);
      OBJ_CALL(result = self->object.getNumberFormat());
      return ::java::text::t_NumberFormat::wrap_Object(result);
    }

    static PyObject *t_DateFormat_getTimeInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          DateFormat result((jobject) NULL);
          OBJ_CALL(result = ::java::text::DateFormat::getTimeInstance());
          return t_DateFormat::wrap_Object(result);
        }
        break;
       case 1:
        {
          jint a0;
          DateFormat result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::text::DateFormat::getTimeInstance(a0));
            return t_DateFormat::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          jint a0;
          ::java::util::Locale a1((jobject) NULL);
          DateFormat result((jobject) NULL);

          if (!parseArgs(args, "Ik", ::java::util::Locale::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::java::text::DateFormat::getTimeInstance(a0, a1));
            return t_DateFormat::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getTimeInstance", args);
      return NULL;
    }

    static PyObject *t_DateFormat_getTimeZone(t_DateFormat *self)
    {
      ::java::util::TimeZone result((jobject) NULL);
      OBJ_CALL(result = self->object.getTimeZone());
      return ::java::util::t_TimeZone::wrap_Object(result);
    }

    static PyObject *t_DateFormat_hashCode(t_DateFormat *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(DateFormat), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_DateFormat_isLenient(t_DateFormat *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isLenient());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_DateFormat_parse(t_DateFormat *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      ::java::util::Date result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = self->object.parse(a0));
        return ::java::util::t_Date::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "parse", arg);
      return NULL;
    }

    static PyObject *t_DateFormat_setCalendar(t_DateFormat *self, PyObject *arg)
    {
      ::java::util::Calendar a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::util::Calendar::initializeClass, &a0))
      {
        OBJ_CALL(self->object.setCalendar(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setCalendar", arg);
      return NULL;
    }

    static PyObject *t_DateFormat_setLenient(t_DateFormat *self, PyObject *arg)
    {
      jboolean a0;

      if (!parseArg(arg, "Z", &a0))
      {
        OBJ_CALL(self->object.setLenient(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setLenient", arg);
      return NULL;
    }

    static PyObject *t_DateFormat_setNumberFormat(t_DateFormat *self, PyObject *arg)
    {
      ::java::text::NumberFormat a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::text::NumberFormat::initializeClass, &a0))
      {
        OBJ_CALL(self->object.setNumberFormat(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setNumberFormat", arg);
      return NULL;
    }

    static PyObject *t_DateFormat_setTimeZone(t_DateFormat *self, PyObject *arg)
    {
      ::java::util::TimeZone a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::util::TimeZone::initializeClass, &a0))
      {
        OBJ_CALL(self->object.setTimeZone(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setTimeZone", arg);
      return NULL;
    }

    static PyObject *t_DateFormat_get__availableLocales(t_DateFormat *self, void *data)
    {
      JArray< ::java::util::Locale > value((jobject) NULL);
      OBJ_CALL(value = self->object.getAvailableLocales());
      return JArray<jobject>(value.this$).wrap(::java::util::t_Locale::wrap_jobject);
    }

    static PyObject *t_DateFormat_get__calendar(t_DateFormat *self, void *data)
    {
      ::java::util::Calendar value((jobject) NULL);
      OBJ_CALL(value = self->object.getCalendar());
      return ::java::util::t_Calendar::wrap_Object(value);
    }
    static int t_DateFormat_set__calendar(t_DateFormat *self, PyObject *arg, void *data)
    {
      {
        ::java::util::Calendar value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::util::Calendar::initializeClass, &value))
        {
          INT_CALL(self->object.setCalendar(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "calendar", arg);
      return -1;
    }

    static PyObject *t_DateFormat_get__dateInstance(t_DateFormat *self, void *data)
    {
      DateFormat value((jobject) NULL);
      OBJ_CALL(value = self->object.getDateInstance());
      return t_DateFormat::wrap_Object(value);
    }

    static PyObject *t_DateFormat_get__dateTimeInstance(t_DateFormat *self, void *data)
    {
      DateFormat value((jobject) NULL);
      OBJ_CALL(value = self->object.getDateTimeInstance());
      return t_DateFormat::wrap_Object(value);
    }

    static PyObject *t_DateFormat_get__instance(t_DateFormat *self, void *data)
    {
      DateFormat value((jobject) NULL);
      OBJ_CALL(value = self->object.getInstance());
      return t_DateFormat::wrap_Object(value);
    }

    static PyObject *t_DateFormat_get__lenient(t_DateFormat *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isLenient());
      Py_RETURN_BOOL(value);
    }
    static int t_DateFormat_set__lenient(t_DateFormat *self, PyObject *arg, void *data)
    {
      {
        jboolean value;
        if (!parseArg(arg, "Z", &value))
        {
          INT_CALL(self->object.setLenient(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "lenient", arg);
      return -1;
    }

    static PyObject *t_DateFormat_get__numberFormat(t_DateFormat *self, void *data)
    {
      ::java::text::NumberFormat value((jobject) NULL);
      OBJ_CALL(value = self->object.getNumberFormat());
      return ::java::text::t_NumberFormat::wrap_Object(value);
    }
    static int t_DateFormat_set__numberFormat(t_DateFormat *self, PyObject *arg, void *data)
    {
      {
        ::java::text::NumberFormat value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::text::NumberFormat::initializeClass, &value))
        {
          INT_CALL(self->object.setNumberFormat(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "numberFormat", arg);
      return -1;
    }

    static PyObject *t_DateFormat_get__timeInstance(t_DateFormat *self, void *data)
    {
      DateFormat value((jobject) NULL);
      OBJ_CALL(value = self->object.getTimeInstance());
      return t_DateFormat::wrap_Object(value);
    }

    static PyObject *t_DateFormat_get__timeZone(t_DateFormat *self, void *data)
    {
      ::java::util::TimeZone value((jobject) NULL);
      OBJ_CALL(value = self->object.getTimeZone());
      return ::java::util::t_TimeZone::wrap_Object(value);
    }
    static int t_DateFormat_set__timeZone(t_DateFormat *self, PyObject *arg, void *data)
    {
      {
        ::java::util::TimeZone value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::util::TimeZone::initializeClass, &value))
        {
          INT_CALL(self->object.setTimeZone(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "timeZone", arg);
      return -1;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$bitwise_and_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$bitwise_and_return::class$ = NULL;
          jmethodID *JavascriptParser$bitwise_and_return::mids$ = NULL;
          bool JavascriptParser$bitwise_and_return::live$ = false;

          jclass JavascriptParser$bitwise_and_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$bitwise_and_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$bitwise_and_return::JavascriptParser$bitwise_and_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$bitwise_and_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$bitwise_and_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$bitwise_and_return_init_(t_JavascriptParser$bitwise_and_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$bitwise_and_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$bitwise_and_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$bitwise_and_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$bitwise_and_return, t_JavascriptParser$bitwise_and_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$bitwise_and_return, t_JavascriptParser$bitwise_and_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$bitwise_and_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$bitwise_and_return), module, "JavascriptParser$bitwise_and_return", 0);
          }

          void t_JavascriptParser$bitwise_and_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$bitwise_and_return).tp_dict, "class_", make_descriptor(JavascriptParser$bitwise_and_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$bitwise_and_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$bitwise_and_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$bitwise_and_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$bitwise_and_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$bitwise_and_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$bitwise_and_return::wrap_Object(JavascriptParser$bitwise_and_return(((t_JavascriptParser$bitwise_and_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$bitwise_and_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$bitwise_and_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$bitwise_and_return_init_(t_JavascriptParser$bitwise_and_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$bitwise_and_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$bitwise_and_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pt/PortugueseStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {

          ::java::lang::Class *PortugueseStemFilter::class$ = NULL;
          jmethodID *PortugueseStemFilter::mids$ = NULL;
          bool PortugueseStemFilter::live$ = false;

          jclass PortugueseStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pt/PortugueseStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PortugueseStemFilter::PortugueseStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean PortugueseStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {
          static PyObject *t_PortugueseStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PortugueseStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PortugueseStemFilter_init_(t_PortugueseStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PortugueseStemFilter_incrementToken(t_PortugueseStemFilter *self, PyObject *args);

          static PyMethodDef t_PortugueseStemFilter__methods_[] = {
            DECLARE_METHOD(t_PortugueseStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PortugueseStemFilter, t_PortugueseStemFilter, ::org::apache::lucene::analysis::TokenFilter, PortugueseStemFilter, t_PortugueseStemFilter_init_, 0, 0, 0, 0, 0);

          void t_PortugueseStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PortugueseStemFilter), module, "PortugueseStemFilter", 0);
          }

          void t_PortugueseStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PortugueseStemFilter).tp_dict, "class_", make_descriptor(PortugueseStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PortugueseStemFilter).tp_dict, "wrapfn_", make_descriptor(t_PortugueseStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PortugueseStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PortugueseStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PortugueseStemFilter::initializeClass, 1)))
              return NULL;
            return t_PortugueseStemFilter::wrap_Object(PortugueseStemFilter(((t_PortugueseStemFilter *) arg)->object.this$));
          }
          static PyObject *t_PortugueseStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PortugueseStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PortugueseStemFilter_init_(t_PortugueseStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            PortugueseStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = PortugueseStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PortugueseStemFilter_incrementToken(t_PortugueseStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PortugueseStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/LambdaDF.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *LambdaDF::class$ = NULL;
          jmethodID *LambdaDF::mids$ = NULL;
          bool LambdaDF::live$ = false;

          jclass LambdaDF::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/LambdaDF");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_eddc6641] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_lambda_cb225ea0] = env->getMethodID(cls, "lambda", "(Lorg/apache/lucene/search/similarities/BasicStats;)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LambdaDF::LambdaDF() : ::org::apache::lucene::search::similarities::Lambda(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::Explanation LambdaDF::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_eddc6641], a0.this$));
          }

          jfloat LambdaDF::lambda(const ::org::apache::lucene::search::similarities::BasicStats & a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_lambda_cb225ea0], a0.this$);
          }

          ::java::lang::String LambdaDF::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_LambdaDF_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LambdaDF_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LambdaDF_init_(t_LambdaDF *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LambdaDF_explain(t_LambdaDF *self, PyObject *args);
          static PyObject *t_LambdaDF_lambda(t_LambdaDF *self, PyObject *args);
          static PyObject *t_LambdaDF_toString(t_LambdaDF *self, PyObject *args);

          static PyMethodDef t_LambdaDF__methods_[] = {
            DECLARE_METHOD(t_LambdaDF, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LambdaDF, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LambdaDF, explain, METH_VARARGS),
            DECLARE_METHOD(t_LambdaDF, lambda, METH_VARARGS),
            DECLARE_METHOD(t_LambdaDF, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LambdaDF, t_LambdaDF, ::org::apache::lucene::search::similarities::Lambda, LambdaDF, t_LambdaDF_init_, 0, 0, 0, 0, 0);

          void t_LambdaDF::install(PyObject *module)
          {
            installType(&PY_TYPE(LambdaDF), module, "LambdaDF", 0);
          }

          void t_LambdaDF::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LambdaDF).tp_dict, "class_", make_descriptor(LambdaDF::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LambdaDF).tp_dict, "wrapfn_", make_descriptor(t_LambdaDF::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LambdaDF).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LambdaDF_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LambdaDF::initializeClass, 1)))
              return NULL;
            return t_LambdaDF::wrap_Object(LambdaDF(((t_LambdaDF *) arg)->object.this$));
          }
          static PyObject *t_LambdaDF_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LambdaDF::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LambdaDF_init_(t_LambdaDF *self, PyObject *args, PyObject *kwds)
          {
            LambdaDF object((jobject) NULL);

            INT_CALL(object = LambdaDF());
            self->object = object;

            return 0;
          }

          static PyObject *t_LambdaDF_explain(t_LambdaDF *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.explain(a0));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(LambdaDF), (PyObject *) self, "explain", args, 2);
          }

          static PyObject *t_LambdaDF_lambda(t_LambdaDF *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat result;

            if (!parseArgs(args, "k", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.lambda(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(LambdaDF), (PyObject *) self, "lambda", args, 2);
          }

          static PyObject *t_LambdaDF_toString(t_LambdaDF *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(LambdaDF), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/SlowCollatedStringComparator.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/text/Collator.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {

          ::java::lang::Class *SlowCollatedStringComparator::class$ = NULL;
          jmethodID *SlowCollatedStringComparator::mids$ = NULL;
          bool SlowCollatedStringComparator::live$ = false;

          jclass SlowCollatedStringComparator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/SlowCollatedStringComparator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f4353060] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;Ljava/text/Collator;)V");
              mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
              mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
              mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
              mids$[mid_compareValues_4a26475d] = env->getMethodID(cls, "compareValues", "(Ljava/lang/String;Ljava/lang/String;)I");
              mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");
              mids$[mid_setBottom_39c7bd3c] = env->getMethodID(cls, "setBottom", "(I)V");
              mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");
              mids$[mid_setTopValue_5fdc3f48] = env->getMethodID(cls, "setTopValue", "(Ljava/lang/String;)V");
              mids$[mid_value_141401b3] = env->getMethodID(cls, "value", "(I)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SlowCollatedStringComparator::SlowCollatedStringComparator(jint a0, const ::java::lang::String & a1, const ::java::text::Collator & a2) : ::org::apache::lucene::search::FieldComparator(env->newObject(initializeClass, &mids$, mid_init$_f4353060, a0, a1.this$, a2.this$)) {}

          jint SlowCollatedStringComparator::compare(jint a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_compare_d8d154b9], a0, a1);
          }

          jint SlowCollatedStringComparator::compareBottom(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareBottom_39c7bd23], a0);
          }

          jint SlowCollatedStringComparator::compareTop(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareTop_39c7bd23], a0);
          }

          jint SlowCollatedStringComparator::compareValues(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return env->callIntMethod(this$, mids$[mid_compareValues_4a26475d], a0.this$, a1.this$);
          }

          void SlowCollatedStringComparator::copy(jint a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_copy_d8d154a6], a0, a1);
          }

          void SlowCollatedStringComparator::setBottom(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setBottom_39c7bd3c], a0);
          }

          ::org::apache::lucene::search::FieldComparator SlowCollatedStringComparator::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
          {
            return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_setNextReader_6329aed7], a0.this$));
          }

          void SlowCollatedStringComparator::setTopValue(const ::java::lang::String & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setTopValue_5fdc3f48], a0.this$);
          }

          ::java::lang::String SlowCollatedStringComparator::value(jint a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_value_141401b3], a0));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          static PyObject *t_SlowCollatedStringComparator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SlowCollatedStringComparator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SlowCollatedStringComparator_of_(t_SlowCollatedStringComparator *self, PyObject *args);
          static int t_SlowCollatedStringComparator_init_(t_SlowCollatedStringComparator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SlowCollatedStringComparator_compare(t_SlowCollatedStringComparator *self, PyObject *args);
          static PyObject *t_SlowCollatedStringComparator_compareBottom(t_SlowCollatedStringComparator *self, PyObject *args);
          static PyObject *t_SlowCollatedStringComparator_compareTop(t_SlowCollatedStringComparator *self, PyObject *args);
          static PyObject *t_SlowCollatedStringComparator_compareValues(t_SlowCollatedStringComparator *self, PyObject *args);
          static PyObject *t_SlowCollatedStringComparator_copy(t_SlowCollatedStringComparator *self, PyObject *args);
          static PyObject *t_SlowCollatedStringComparator_setBottom(t_SlowCollatedStringComparator *self, PyObject *args);
          static PyObject *t_SlowCollatedStringComparator_setNextReader(t_SlowCollatedStringComparator *self, PyObject *args);
          static PyObject *t_SlowCollatedStringComparator_setTopValue(t_SlowCollatedStringComparator *self, PyObject *args);
          static PyObject *t_SlowCollatedStringComparator_value(t_SlowCollatedStringComparator *self, PyObject *args);
          static int t_SlowCollatedStringComparator_set__bottom(t_SlowCollatedStringComparator *self, PyObject *arg, void *data);
          static int t_SlowCollatedStringComparator_set__nextReader(t_SlowCollatedStringComparator *self, PyObject *arg, void *data);
          static int t_SlowCollatedStringComparator_set__topValue(t_SlowCollatedStringComparator *self, PyObject *arg, void *data);
          static PyObject *t_SlowCollatedStringComparator_get__parameters_(t_SlowCollatedStringComparator *self, void *data);
          static PyGetSetDef t_SlowCollatedStringComparator__fields_[] = {
            DECLARE_SET_FIELD(t_SlowCollatedStringComparator, bottom),
            DECLARE_SET_FIELD(t_SlowCollatedStringComparator, nextReader),
            DECLARE_SET_FIELD(t_SlowCollatedStringComparator, topValue),
            DECLARE_GET_FIELD(t_SlowCollatedStringComparator, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SlowCollatedStringComparator__methods_[] = {
            DECLARE_METHOD(t_SlowCollatedStringComparator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SlowCollatedStringComparator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SlowCollatedStringComparator, of_, METH_VARARGS),
            DECLARE_METHOD(t_SlowCollatedStringComparator, compare, METH_VARARGS),
            DECLARE_METHOD(t_SlowCollatedStringComparator, compareBottom, METH_VARARGS),
            DECLARE_METHOD(t_SlowCollatedStringComparator, compareTop, METH_VARARGS),
            DECLARE_METHOD(t_SlowCollatedStringComparator, compareValues, METH_VARARGS),
            DECLARE_METHOD(t_SlowCollatedStringComparator, copy, METH_VARARGS),
            DECLARE_METHOD(t_SlowCollatedStringComparator, setBottom, METH_VARARGS),
            DECLARE_METHOD(t_SlowCollatedStringComparator, setNextReader, METH_VARARGS),
            DECLARE_METHOD(t_SlowCollatedStringComparator, setTopValue, METH_VARARGS),
            DECLARE_METHOD(t_SlowCollatedStringComparator, value, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SlowCollatedStringComparator, t_SlowCollatedStringComparator, ::org::apache::lucene::search::FieldComparator, SlowCollatedStringComparator, t_SlowCollatedStringComparator_init_, 0, 0, t_SlowCollatedStringComparator__fields_, 0, 0);
          PyObject *t_SlowCollatedStringComparator::wrap_Object(const SlowCollatedStringComparator& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SlowCollatedStringComparator::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SlowCollatedStringComparator *self = (t_SlowCollatedStringComparator *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_SlowCollatedStringComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SlowCollatedStringComparator::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SlowCollatedStringComparator *self = (t_SlowCollatedStringComparator *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_SlowCollatedStringComparator::install(PyObject *module)
          {
            installType(&PY_TYPE(SlowCollatedStringComparator), module, "SlowCollatedStringComparator", 0);
          }

          void t_SlowCollatedStringComparator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SlowCollatedStringComparator).tp_dict, "class_", make_descriptor(SlowCollatedStringComparator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SlowCollatedStringComparator).tp_dict, "wrapfn_", make_descriptor(t_SlowCollatedStringComparator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SlowCollatedStringComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SlowCollatedStringComparator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SlowCollatedStringComparator::initializeClass, 1)))
              return NULL;
            return t_SlowCollatedStringComparator::wrap_Object(SlowCollatedStringComparator(((t_SlowCollatedStringComparator *) arg)->object.this$));
          }
          static PyObject *t_SlowCollatedStringComparator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SlowCollatedStringComparator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SlowCollatedStringComparator_of_(t_SlowCollatedStringComparator *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_SlowCollatedStringComparator_init_(t_SlowCollatedStringComparator *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            ::java::text::Collator a2((jobject) NULL);
            SlowCollatedStringComparator object((jobject) NULL);

            if (!parseArgs(args, "Isk", ::java::text::Collator::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = SlowCollatedStringComparator(a0, a1, a2));
              self->object = object;
              self->parameters[0] = &::java::lang::PY_TYPE(String);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SlowCollatedStringComparator_compare(t_SlowCollatedStringComparator *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jint result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.compare(a0, a1));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SlowCollatedStringComparator), (PyObject *) self, "compare", args, 2);
          }

          static PyObject *t_SlowCollatedStringComparator_compareBottom(t_SlowCollatedStringComparator *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.compareBottom(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SlowCollatedStringComparator), (PyObject *) self, "compareBottom", args, 2);
          }

          static PyObject *t_SlowCollatedStringComparator_compareTop(t_SlowCollatedStringComparator *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.compareTop(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SlowCollatedStringComparator), (PyObject *) self, "compareTop", args, 2);
          }

          static PyObject *t_SlowCollatedStringComparator_compareValues(t_SlowCollatedStringComparator *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jint result;

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.compareValues(a0, a1));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SlowCollatedStringComparator), (PyObject *) self, "compareValues", args, 2);
          }

          static PyObject *t_SlowCollatedStringComparator_copy(t_SlowCollatedStringComparator *self, PyObject *args)
          {
            jint a0;
            jint a1;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(self->object.copy(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SlowCollatedStringComparator), (PyObject *) self, "copy", args, 2);
          }

          static PyObject *t_SlowCollatedStringComparator_setBottom(t_SlowCollatedStringComparator *self, PyObject *args)
          {
            jint a0;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(self->object.setBottom(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SlowCollatedStringComparator), (PyObject *) self, "setBottom", args, 2);
          }

          static PyObject *t_SlowCollatedStringComparator_setNextReader(t_SlowCollatedStringComparator *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.setNextReader(a0));
              return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result, &::java::lang::PY_TYPE(String));
            }

            return callSuper(&PY_TYPE(SlowCollatedStringComparator), (PyObject *) self, "setNextReader", args, 2);
          }

          static PyObject *t_SlowCollatedStringComparator_setTopValue(t_SlowCollatedStringComparator *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(self->object.setTopValue(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SlowCollatedStringComparator), (PyObject *) self, "setTopValue", args, 2);
          }

          static PyObject *t_SlowCollatedStringComparator_value(t_SlowCollatedStringComparator *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.value(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SlowCollatedStringComparator), (PyObject *) self, "value", args, 2);
          }
          static PyObject *t_SlowCollatedStringComparator_get__parameters_(t_SlowCollatedStringComparator *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static int t_SlowCollatedStringComparator_set__bottom(t_SlowCollatedStringComparator *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setBottom(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "bottom", arg);
            return -1;
          }

          static int t_SlowCollatedStringComparator_set__nextReader(t_SlowCollatedStringComparator *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
              {
                INT_CALL(self->object.setNextReader(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
            return -1;
          }

          static int t_SlowCollatedStringComparator_set__topValue(t_SlowCollatedStringComparator *self, PyObject *arg, void *data)
          {
            {
              ::java::lang::String value((jobject) NULL);
              if (!parseArg(arg, "s", &value))
              {
                INT_CALL(self->object.setTopValue(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "topValue", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cjk/CJKBigramFilterFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {

          ::java::lang::Class *CJKBigramFilterFactory::class$ = NULL;
          jmethodID *CJKBigramFilterFactory::mids$ = NULL;
          bool CJKBigramFilterFactory::live$ = false;

          jclass CJKBigramFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cjk/CJKBigramFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CJKBigramFilterFactory::CJKBigramFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream CJKBigramFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {
          static PyObject *t_CJKBigramFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CJKBigramFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CJKBigramFilterFactory_init_(t_CJKBigramFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CJKBigramFilterFactory_create(t_CJKBigramFilterFactory *self, PyObject *args);

          static PyMethodDef t_CJKBigramFilterFactory__methods_[] = {
            DECLARE_METHOD(t_CJKBigramFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKBigramFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKBigramFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CJKBigramFilterFactory, t_CJKBigramFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, CJKBigramFilterFactory, t_CJKBigramFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_CJKBigramFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(CJKBigramFilterFactory), module, "CJKBigramFilterFactory", 0);
          }

          void t_CJKBigramFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CJKBigramFilterFactory).tp_dict, "class_", make_descriptor(CJKBigramFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CJKBigramFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_CJKBigramFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CJKBigramFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CJKBigramFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CJKBigramFilterFactory::initializeClass, 1)))
              return NULL;
            return t_CJKBigramFilterFactory::wrap_Object(CJKBigramFilterFactory(((t_CJKBigramFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_CJKBigramFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CJKBigramFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CJKBigramFilterFactory_init_(t_CJKBigramFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            CJKBigramFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = CJKBigramFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CJKBigramFilterFactory_create(t_CJKBigramFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CJKBigramFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/CachingTokenFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *CachingTokenFilter::class$ = NULL;
        jmethodID *CachingTokenFilter::mids$ = NULL;
        bool CachingTokenFilter::live$ = false;

        jclass CachingTokenFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/CachingTokenFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
            mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
            mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
            mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CachingTokenFilter::CachingTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

        void CachingTokenFilter::end() const
        {
          env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
        }

        jboolean CachingTokenFilter::incrementToken() const
        {
          return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
        }

        void CachingTokenFilter::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_CachingTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CachingTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CachingTokenFilter_init_(t_CachingTokenFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CachingTokenFilter_end(t_CachingTokenFilter *self, PyObject *args);
        static PyObject *t_CachingTokenFilter_incrementToken(t_CachingTokenFilter *self, PyObject *args);
        static PyObject *t_CachingTokenFilter_reset(t_CachingTokenFilter *self, PyObject *args);

        static PyMethodDef t_CachingTokenFilter__methods_[] = {
          DECLARE_METHOD(t_CachingTokenFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CachingTokenFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CachingTokenFilter, end, METH_VARARGS),
          DECLARE_METHOD(t_CachingTokenFilter, incrementToken, METH_VARARGS),
          DECLARE_METHOD(t_CachingTokenFilter, reset, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CachingTokenFilter, t_CachingTokenFilter, ::org::apache::lucene::analysis::TokenFilter, CachingTokenFilter, t_CachingTokenFilter_init_, 0, 0, 0, 0, 0);

        void t_CachingTokenFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(CachingTokenFilter), module, "CachingTokenFilter", 0);
        }

        void t_CachingTokenFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CachingTokenFilter).tp_dict, "class_", make_descriptor(CachingTokenFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CachingTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_CachingTokenFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CachingTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CachingTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CachingTokenFilter::initializeClass, 1)))
            return NULL;
          return t_CachingTokenFilter::wrap_Object(CachingTokenFilter(((t_CachingTokenFilter *) arg)->object.this$));
        }
        static PyObject *t_CachingTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CachingTokenFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CachingTokenFilter_init_(t_CachingTokenFilter *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
          CachingTokenFilter object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
          {
            INT_CALL(object = CachingTokenFilter(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CachingTokenFilter_end(t_CachingTokenFilter *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.end());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(CachingTokenFilter), (PyObject *) self, "end", args, 2);
        }

        static PyObject *t_CachingTokenFilter_incrementToken(t_CachingTokenFilter *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.incrementToken());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(CachingTokenFilter), (PyObject *) self, "incrementToken", args, 2);
        }

        static PyObject *t_CachingTokenFilter_reset(t_CachingTokenFilter *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.reset());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(CachingTokenFilter), (PyObject *) self, "reset", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$numeric_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$numeric_return::class$ = NULL;
          jmethodID *JavascriptParser$numeric_return::mids$ = NULL;
          bool JavascriptParser$numeric_return::live$ = false;

          jclass JavascriptParser$numeric_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$numeric_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$numeric_return::JavascriptParser$numeric_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$numeric_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$numeric_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$numeric_return_init_(t_JavascriptParser$numeric_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$numeric_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$numeric_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$numeric_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$numeric_return, t_JavascriptParser$numeric_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$numeric_return, t_JavascriptParser$numeric_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$numeric_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$numeric_return), module, "JavascriptParser$numeric_return", 0);
          }

          void t_JavascriptParser$numeric_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$numeric_return).tp_dict, "class_", make_descriptor(JavascriptParser$numeric_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$numeric_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$numeric_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$numeric_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$numeric_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$numeric_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$numeric_return::wrap_Object(JavascriptParser$numeric_return(((t_JavascriptParser$numeric_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$numeric_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$numeric_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$numeric_return_init_(t_JavascriptParser$numeric_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$numeric_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$numeric_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$DiskOrdinalMap.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "java/io/FileNotFoundException.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$OrdinalMap.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace directory {

            ::java::lang::Class *DirectoryTaxonomyWriter$DiskOrdinalMap::class$ = NULL;
            jmethodID *DirectoryTaxonomyWriter$DiskOrdinalMap::mids$ = NULL;
            bool DirectoryTaxonomyWriter$DiskOrdinalMap::live$ = false;

            jclass DirectoryTaxonomyWriter$DiskOrdinalMap::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$DiskOrdinalMap");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_c3dacf57] = env->getMethodID(cls, "<init>", "(Ljava/io/File;)V");
                mids$[mid_addDone_54c6a166] = env->getMethodID(cls, "addDone", "()V");
                mids$[mid_addMapping_d8d154a6] = env->getMethodID(cls, "addMapping", "(II)V");
                mids$[mid_getMap_dab10e75] = env->getMethodID(cls, "getMap", "()[I");
                mids$[mid_setSize_39c7bd3c] = env->getMethodID(cls, "setSize", "(I)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DirectoryTaxonomyWriter$DiskOrdinalMap::DirectoryTaxonomyWriter$DiskOrdinalMap(const ::java::io::File & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c3dacf57, a0.this$)) {}

            void DirectoryTaxonomyWriter$DiskOrdinalMap::addDone() const
            {
              env->callVoidMethod(this$, mids$[mid_addDone_54c6a166]);
            }

            void DirectoryTaxonomyWriter$DiskOrdinalMap::addMapping(jint a0, jint a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addMapping_d8d154a6], a0, a1);
            }

            JArray< jint > DirectoryTaxonomyWriter$DiskOrdinalMap::getMap() const
            {
              return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getMap_dab10e75]));
            }

            void DirectoryTaxonomyWriter$DiskOrdinalMap::setSize(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setSize_39c7bd3c], a0);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace directory {
            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DirectoryTaxonomyWriter$DiskOrdinalMap_init_(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_addDone(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self);
            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_addMapping(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self, PyObject *args);
            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_getMap(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self);
            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_setSize(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_get__map(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self, void *data);
            static int t_DirectoryTaxonomyWriter$DiskOrdinalMap_set__size(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self, PyObject *arg, void *data);
            static PyGetSetDef t_DirectoryTaxonomyWriter$DiskOrdinalMap__fields_[] = {
              DECLARE_GET_FIELD(t_DirectoryTaxonomyWriter$DiskOrdinalMap, map),
              DECLARE_SET_FIELD(t_DirectoryTaxonomyWriter$DiskOrdinalMap, size),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_DirectoryTaxonomyWriter$DiskOrdinalMap__methods_[] = {
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$DiskOrdinalMap, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$DiskOrdinalMap, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$DiskOrdinalMap, addDone, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$DiskOrdinalMap, addMapping, METH_VARARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$DiskOrdinalMap, getMap, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$DiskOrdinalMap, setSize, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DirectoryTaxonomyWriter$DiskOrdinalMap, t_DirectoryTaxonomyWriter$DiskOrdinalMap, ::java::lang::Object, DirectoryTaxonomyWriter$DiskOrdinalMap, t_DirectoryTaxonomyWriter$DiskOrdinalMap_init_, 0, 0, t_DirectoryTaxonomyWriter$DiskOrdinalMap__fields_, 0, 0);

            void t_DirectoryTaxonomyWriter$DiskOrdinalMap::install(PyObject *module)
            {
              installType(&PY_TYPE(DirectoryTaxonomyWriter$DiskOrdinalMap), module, "DirectoryTaxonomyWriter$DiskOrdinalMap", 0);
            }

            void t_DirectoryTaxonomyWriter$DiskOrdinalMap::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter$DiskOrdinalMap).tp_dict, "class_", make_descriptor(DirectoryTaxonomyWriter$DiskOrdinalMap::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter$DiskOrdinalMap).tp_dict, "wrapfn_", make_descriptor(t_DirectoryTaxonomyWriter$DiskOrdinalMap::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter$DiskOrdinalMap).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DirectoryTaxonomyWriter$DiskOrdinalMap::initializeClass, 1)))
                return NULL;
              return t_DirectoryTaxonomyWriter$DiskOrdinalMap::wrap_Object(DirectoryTaxonomyWriter$DiskOrdinalMap(((t_DirectoryTaxonomyWriter$DiskOrdinalMap *) arg)->object.this$));
            }
            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DirectoryTaxonomyWriter$DiskOrdinalMap::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DirectoryTaxonomyWriter$DiskOrdinalMap_init_(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self, PyObject *args, PyObject *kwds)
            {
              ::java::io::File a0((jobject) NULL);
              DirectoryTaxonomyWriter$DiskOrdinalMap object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
              {
                INT_CALL(object = DirectoryTaxonomyWriter$DiskOrdinalMap(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_addDone(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self)
            {
              OBJ_CALL(self->object.addDone());
              Py_RETURN_NONE;
            }

            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_addMapping(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self, PyObject *args)
            {
              jint a0;
              jint a1;

              if (!parseArgs(args, "II", &a0, &a1))
              {
                OBJ_CALL(self->object.addMapping(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addMapping", args);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_getMap(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self)
            {
              JArray< jint > result((jobject) NULL);
              OBJ_CALL(result = self->object.getMap());
              return result.wrap();
            }

            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_setSize(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setSize(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setSize", arg);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter$DiskOrdinalMap_get__map(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self, void *data)
            {
              JArray< jint > value((jobject) NULL);
              OBJ_CALL(value = self->object.getMap());
              return value.wrap();
            }

            static int t_DirectoryTaxonomyWriter$DiskOrdinalMap_set__size(t_DirectoryTaxonomyWriter$DiskOrdinalMap *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setSize(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "size", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanWeight.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/search/Scorer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanWeight::class$ = NULL;
          jmethodID *SpanWeight::mids$ = NULL;
          bool SpanWeight::live$ = false;

          jclass SpanWeight::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanWeight");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_917aaae1] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanQuery;Lorg/apache/lucene/search/IndexSearcher;)V");
              mids$[mid_explain_6ad94adc] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/index/AtomicReaderContext;I)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_getQuery_97e3851a] = env->getMethodID(cls, "getQuery", "()Lorg/apache/lucene/search/Query;");
              mids$[mid_getValueForNormalization_54c6a176] = env->getMethodID(cls, "getValueForNormalization", "()F");
              mids$[mid_normalize_f1b0c004] = env->getMethodID(cls, "normalize", "(FF)V");
              mids$[mid_scorer_3869ad24] = env->getMethodID(cls, "scorer", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/Scorer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanWeight::SpanWeight(const ::org::apache::lucene::search::spans::SpanQuery & a0, const ::org::apache::lucene::search::IndexSearcher & a1) : ::org::apache::lucene::search::Weight(env->newObject(initializeClass, &mids$, mid_init$_917aaae1, a0.this$, a1.this$)) {}

          ::org::apache::lucene::search::Explanation SpanWeight::explain(const ::org::apache::lucene::index::AtomicReaderContext & a0, jint a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_6ad94adc], a0.this$, a1));
          }

          ::org::apache::lucene::search::Query SpanWeight::getQuery() const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getQuery_97e3851a]));
          }

          jfloat SpanWeight::getValueForNormalization() const
          {
            return env->callFloatMethod(this$, mids$[mid_getValueForNormalization_54c6a176]);
          }

          void SpanWeight::normalize(jfloat a0, jfloat a1) const
          {
            env->callVoidMethod(this$, mids$[mid_normalize_f1b0c004], a0, a1);
          }

          ::org::apache::lucene::search::Scorer SpanWeight::scorer(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
          {
            return ::org::apache::lucene::search::Scorer(env->callObjectMethod(this$, mids$[mid_scorer_3869ad24], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanWeight_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanWeight_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanWeight_init_(t_SpanWeight *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanWeight_explain(t_SpanWeight *self, PyObject *args);
          static PyObject *t_SpanWeight_getQuery(t_SpanWeight *self, PyObject *args);
          static PyObject *t_SpanWeight_getValueForNormalization(t_SpanWeight *self, PyObject *args);
          static PyObject *t_SpanWeight_normalize(t_SpanWeight *self, PyObject *args);
          static PyObject *t_SpanWeight_scorer(t_SpanWeight *self, PyObject *args);
          static PyObject *t_SpanWeight_get__query(t_SpanWeight *self, void *data);
          static PyObject *t_SpanWeight_get__valueForNormalization(t_SpanWeight *self, void *data);
          static PyGetSetDef t_SpanWeight__fields_[] = {
            DECLARE_GET_FIELD(t_SpanWeight, query),
            DECLARE_GET_FIELD(t_SpanWeight, valueForNormalization),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanWeight__methods_[] = {
            DECLARE_METHOD(t_SpanWeight, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanWeight, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanWeight, explain, METH_VARARGS),
            DECLARE_METHOD(t_SpanWeight, getQuery, METH_VARARGS),
            DECLARE_METHOD(t_SpanWeight, getValueForNormalization, METH_VARARGS),
            DECLARE_METHOD(t_SpanWeight, normalize, METH_VARARGS),
            DECLARE_METHOD(t_SpanWeight, scorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanWeight, t_SpanWeight, ::org::apache::lucene::search::Weight, SpanWeight, t_SpanWeight_init_, 0, 0, t_SpanWeight__fields_, 0, 0);

          void t_SpanWeight::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanWeight), module, "SpanWeight", 0);
          }

          void t_SpanWeight::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanWeight).tp_dict, "class_", make_descriptor(SpanWeight::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanWeight).tp_dict, "wrapfn_", make_descriptor(t_SpanWeight::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanWeight).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanWeight_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanWeight::initializeClass, 1)))
              return NULL;
            return t_SpanWeight::wrap_Object(SpanWeight(((t_SpanWeight *) arg)->object.this$));
          }
          static PyObject *t_SpanWeight_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanWeight::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanWeight_init_(t_SpanWeight *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spans::SpanQuery a0((jobject) NULL);
            ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);
            SpanWeight object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &a1))
            {
              INT_CALL(object = SpanWeight(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanWeight_explain(t_SpanWeight *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.explain(a0, a1));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanWeight), (PyObject *) self, "explain", args, 2);
          }

          static PyObject *t_SpanWeight_getQuery(t_SpanWeight *self, PyObject *args)
          {
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getQuery());
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanWeight), (PyObject *) self, "getQuery", args, 2);
          }

          static PyObject *t_SpanWeight_getValueForNormalization(t_SpanWeight *self, PyObject *args)
          {
            jfloat result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getValueForNormalization());
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(SpanWeight), (PyObject *) self, "getValueForNormalization", args, 2);
          }

          static PyObject *t_SpanWeight_normalize(t_SpanWeight *self, PyObject *args)
          {
            jfloat a0;
            jfloat a1;

            if (!parseArgs(args, "FF", &a0, &a1))
            {
              OBJ_CALL(self->object.normalize(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SpanWeight), (PyObject *) self, "normalize", args, 2);
          }

          static PyObject *t_SpanWeight_scorer(t_SpanWeight *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::util::Bits a1((jobject) NULL);
            ::org::apache::lucene::search::Scorer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.scorer(a0, a1));
              return ::org::apache::lucene::search::t_Scorer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanWeight), (PyObject *) self, "scorer", args, 2);
          }

          static PyObject *t_SpanWeight_get__query(t_SpanWeight *self, void *data)
          {
            ::org::apache::lucene::search::Query value((jobject) NULL);
            OBJ_CALL(value = self->object.getQuery());
            return ::org::apache::lucene::search::t_Query::wrap_Object(value);
          }

          static PyObject *t_SpanWeight_get__valueForNormalization(t_SpanWeight *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getValueForNormalization());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/Collections.h"
#include "java/util/Set.h"
#include "java/util/Random.h"
#include "java/util/List.h"
#include "java/util/Enumeration.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "java/util/Deque.h"
#include "java/util/Comparator.h"
#include "java/lang/Boolean.h"
#include "java/util/Collection.h"
#include "java/util/Map.h"
#include "java/util/SortedMap.h"
#include "java/util/ArrayList.h"
#include "java/util/ListIterator.h"
#include "java/util/SortedSet.h"
#include "java/util/Iterator.h"
#include "java/util/Queue.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *Collections::class$ = NULL;
    jmethodID *Collections::mids$ = NULL;
    bool Collections::live$ = false;
    ::java::util::List *Collections::EMPTY_LIST = NULL;
    ::java::util::Map *Collections::EMPTY_MAP = NULL;
    ::java::util::Set *Collections::EMPTY_SET = NULL;

    jclass Collections::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/Collections");

        mids$ = new jmethodID[max_mid];
        mids$[mid_addAll_7d28570f] = env->getStaticMethodID(cls, "addAll", "(Ljava/util/Collection;[Ljava/lang/Object;)Z");
        mids$[mid_asLifoQueue_69ff1ef4] = env->getStaticMethodID(cls, "asLifoQueue", "(Ljava/util/Deque;)Ljava/util/Queue;");
        mids$[mid_binarySearch_632fb920] = env->getStaticMethodID(cls, "binarySearch", "(Ljava/util/List;Ljava/lang/Object;)I");
        mids$[mid_binarySearch_b1262297] = env->getStaticMethodID(cls, "binarySearch", "(Ljava/util/List;Ljava/lang/Object;Ljava/util/Comparator;)I");
        mids$[mid_checkedCollection_cdb515a1] = env->getStaticMethodID(cls, "checkedCollection", "(Ljava/util/Collection;Ljava/lang/Class;)Ljava/util/Collection;");
        mids$[mid_checkedList_8575df61] = env->getStaticMethodID(cls, "checkedList", "(Ljava/util/List;Ljava/lang/Class;)Ljava/util/List;");
        mids$[mid_checkedMap_92913187] = env->getStaticMethodID(cls, "checkedMap", "(Ljava/util/Map;Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/Map;");
        mids$[mid_checkedSet_0862698d] = env->getStaticMethodID(cls, "checkedSet", "(Ljava/util/Set;Ljava/lang/Class;)Ljava/util/Set;");
        mids$[mid_checkedSortedMap_5e4bff0f] = env->getStaticMethodID(cls, "checkedSortedMap", "(Ljava/util/SortedMap;Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/SortedMap;");
        mids$[mid_checkedSortedSet_342d53e3] = env->getStaticMethodID(cls, "checkedSortedSet", "(Ljava/util/SortedSet;Ljava/lang/Class;)Ljava/util/SortedSet;");
        mids$[mid_copy_cbe63a12] = env->getStaticMethodID(cls, "copy", "(Ljava/util/List;Ljava/util/List;)V");
        mids$[mid_disjoint_05108b4e] = env->getStaticMethodID(cls, "disjoint", "(Ljava/util/Collection;Ljava/util/Collection;)Z");
        mids$[mid_emptyEnumeration_39f88070] = env->getStaticMethodID(cls, "emptyEnumeration", "()Ljava/util/Enumeration;");
        mids$[mid_emptyIterator_40858c90] = env->getStaticMethodID(cls, "emptyIterator", "()Ljava/util/Iterator;");
        mids$[mid_emptyList_87851566] = env->getStaticMethodID(cls, "emptyList", "()Ljava/util/List;");
        mids$[mid_emptyListIterator_b5be4e14] = env->getStaticMethodID(cls, "emptyListIterator", "()Ljava/util/ListIterator;");
        mids$[mid_emptyMap_db60befd] = env->getStaticMethodID(cls, "emptyMap", "()Ljava/util/Map;");
        mids$[mid_emptySet_03e99967] = env->getStaticMethodID(cls, "emptySet", "()Ljava/util/Set;");
        mids$[mid_enumeration_8f4c58e7] = env->getStaticMethodID(cls, "enumeration", "(Ljava/util/Collection;)Ljava/util/Enumeration;");
        mids$[mid_fill_632fb93f] = env->getStaticMethodID(cls, "fill", "(Ljava/util/List;Ljava/lang/Object;)V");
        mids$[mid_frequency_6b08c59a] = env->getStaticMethodID(cls, "frequency", "(Ljava/util/Collection;Ljava/lang/Object;)I");
        mids$[mid_indexOfSubList_cbe63a0d] = env->getStaticMethodID(cls, "indexOfSubList", "(Ljava/util/List;Ljava/util/List;)I");
        mids$[mid_lastIndexOfSubList_cbe63a0d] = env->getStaticMethodID(cls, "lastIndexOfSubList", "(Ljava/util/List;Ljava/util/List;)I");
        mids$[mid_list_0729353f] = env->getStaticMethodID(cls, "list", "(Ljava/util/Enumeration;)Ljava/util/ArrayList;");
        mids$[mid_max_abd1a366] = env->getStaticMethodID(cls, "max", "(Ljava/util/Collection;)Ljava/lang/Object;");
        mids$[mid_max_24cad27f] = env->getStaticMethodID(cls, "max", "(Ljava/util/Collection;Ljava/util/Comparator;)Ljava/lang/Object;");
        mids$[mid_min_abd1a366] = env->getStaticMethodID(cls, "min", "(Ljava/util/Collection;)Ljava/lang/Object;");
        mids$[mid_min_24cad27f] = env->getStaticMethodID(cls, "min", "(Ljava/util/Collection;Ljava/util/Comparator;)Ljava/lang/Object;");
        mids$[mid_nCopies_a26611d0] = env->getStaticMethodID(cls, "nCopies", "(ILjava/lang/Object;)Ljava/util/List;");
        mids$[mid_newSetFromMap_d56f8575] = env->getStaticMethodID(cls, "newSetFromMap", "(Ljava/util/Map;)Ljava/util/Set;");
        mids$[mid_replaceAll_37ceb42b] = env->getStaticMethodID(cls, "replaceAll", "(Ljava/util/List;Ljava/lang/Object;Ljava/lang/Object;)Z");
        mids$[mid_reverse_1fde8fc3] = env->getStaticMethodID(cls, "reverse", "(Ljava/util/List;)V");
        mids$[mid_reverseOrder_5a7ff2fc] = env->getStaticMethodID(cls, "reverseOrder", "()Ljava/util/Comparator;");
        mids$[mid_reverseOrder_4ed2c59d] = env->getStaticMethodID(cls, "reverseOrder", "(Ljava/util/Comparator;)Ljava/util/Comparator;");
        mids$[mid_rotate_fff63b2f] = env->getStaticMethodID(cls, "rotate", "(Ljava/util/List;I)V");
        mids$[mid_shuffle_1fde8fc3] = env->getStaticMethodID(cls, "shuffle", "(Ljava/util/List;)V");
        mids$[mid_shuffle_06ba5e4b] = env->getStaticMethodID(cls, "shuffle", "(Ljava/util/List;Ljava/util/Random;)V");
        mids$[mid_singleton_4c6d62c3] = env->getStaticMethodID(cls, "singleton", "(Ljava/lang/Object;)Ljava/util/Set;");
        mids$[mid_singletonList_71371966] = env->getStaticMethodID(cls, "singletonList", "(Ljava/lang/Object;)Ljava/util/List;");
        mids$[mid_singletonMap_65580ae9] = env->getStaticMethodID(cls, "singletonMap", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;");
        mids$[mid_sort_1fde8fc3] = env->getStaticMethodID(cls, "sort", "(Ljava/util/List;)V");
        mids$[mid_sort_b59215b8] = env->getStaticMethodID(cls, "sort", "(Ljava/util/List;Ljava/util/Comparator;)V");
        mids$[mid_swap_d5c0aeaf] = env->getStaticMethodID(cls, "swap", "(Ljava/util/List;II)V");
        mids$[mid_synchronizedCollection_55c0b625] = env->getStaticMethodID(cls, "synchronizedCollection", "(Ljava/util/Collection;)Ljava/util/Collection;");
        mids$[mid_synchronizedList_4f378251] = env->getStaticMethodID(cls, "synchronizedList", "(Ljava/util/List;)Ljava/util/List;");
        mids$[mid_synchronizedMap_c606628b] = env->getStaticMethodID(cls, "synchronizedMap", "(Ljava/util/Map;)Ljava/util/Map;");
        mids$[mid_synchronizedSet_390c573f] = env->getStaticMethodID(cls, "synchronizedSet", "(Ljava/util/Set;)Ljava/util/Set;");
        mids$[mid_synchronizedSortedMap_93ac548b] = env->getStaticMethodID(cls, "synchronizedSortedMap", "(Ljava/util/SortedMap;)Ljava/util/SortedMap;");
        mids$[mid_synchronizedSortedSet_b705ec3b] = env->getStaticMethodID(cls, "synchronizedSortedSet", "(Ljava/util/SortedSet;)Ljava/util/SortedSet;");
        mids$[mid_unmodifiableCollection_55c0b625] = env->getStaticMethodID(cls, "unmodifiableCollection", "(Ljava/util/Collection;)Ljava/util/Collection;");
        mids$[mid_unmodifiableList_4f378251] = env->getStaticMethodID(cls, "unmodifiableList", "(Ljava/util/List;)Ljava/util/List;");
        mids$[mid_unmodifiableMap_c606628b] = env->getStaticMethodID(cls, "unmodifiableMap", "(Ljava/util/Map;)Ljava/util/Map;");
        mids$[mid_unmodifiableSet_390c573f] = env->getStaticMethodID(cls, "unmodifiableSet", "(Ljava/util/Set;)Ljava/util/Set;");
        mids$[mid_unmodifiableSortedMap_93ac548b] = env->getStaticMethodID(cls, "unmodifiableSortedMap", "(Ljava/util/SortedMap;)Ljava/util/SortedMap;");
        mids$[mid_unmodifiableSortedSet_b705ec3b] = env->getStaticMethodID(cls, "unmodifiableSortedSet", "(Ljava/util/SortedSet;)Ljava/util/SortedSet;");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        EMPTY_LIST = new ::java::util::List(env->getStaticObjectField(cls, "EMPTY_LIST", "Ljava/util/List;"));
        EMPTY_MAP = new ::java::util::Map(env->getStaticObjectField(cls, "EMPTY_MAP", "Ljava/util/Map;"));
        EMPTY_SET = new ::java::util::Set(env->getStaticObjectField(cls, "EMPTY_SET", "Ljava/util/Set;"));
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    jboolean Collections::addAll(const ::java::util::Collection & a0, const JArray< ::java::lang::Object > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_addAll_7d28570f], a0.this$, a1.this$);
    }

    ::java::util::Queue Collections::asLifoQueue(const ::java::util::Deque & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Queue(env->callStaticObjectMethod(cls, mids$[mid_asLifoQueue_69ff1ef4], a0.this$));
    }

    jint Collections::binarySearch(const ::java::util::List & a0, const ::java::lang::Object & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_632fb920], a0.this$, a1.this$);
    }

    jint Collections::binarySearch(const ::java::util::List & a0, const ::java::lang::Object & a1, const ::java::util::Comparator & a2)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_b1262297], a0.this$, a1.this$, a2.this$);
    }

    ::java::util::Collection Collections::checkedCollection(const ::java::util::Collection & a0, const ::java::lang::Class & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Collection(env->callStaticObjectMethod(cls, mids$[mid_checkedCollection_cdb515a1], a0.this$, a1.this$));
    }

    ::java::util::List Collections::checkedList(const ::java::util::List & a0, const ::java::lang::Class & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::List(env->callStaticObjectMethod(cls, mids$[mid_checkedList_8575df61], a0.this$, a1.this$));
    }

    ::java::util::Map Collections::checkedMap(const ::java::util::Map & a0, const ::java::lang::Class & a1, const ::java::lang::Class & a2)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Map(env->callStaticObjectMethod(cls, mids$[mid_checkedMap_92913187], a0.this$, a1.this$, a2.this$));
    }

    ::java::util::Set Collections::checkedSet(const ::java::util::Set & a0, const ::java::lang::Class & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_checkedSet_0862698d], a0.this$, a1.this$));
    }

    ::java::util::SortedMap Collections::checkedSortedMap(const ::java::util::SortedMap & a0, const ::java::lang::Class & a1, const ::java::lang::Class & a2)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::SortedMap(env->callStaticObjectMethod(cls, mids$[mid_checkedSortedMap_5e4bff0f], a0.this$, a1.this$, a2.this$));
    }

    ::java::util::SortedSet Collections::checkedSortedSet(const ::java::util::SortedSet & a0, const ::java::lang::Class & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::SortedSet(env->callStaticObjectMethod(cls, mids$[mid_checkedSortedSet_342d53e3], a0.this$, a1.this$));
    }

    void Collections::copy(const ::java::util::List & a0, const ::java::util::List & a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_copy_cbe63a12], a0.this$, a1.this$);
    }

    jboolean Collections::disjoint(const ::java::util::Collection & a0, const ::java::util::Collection & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_disjoint_05108b4e], a0.this$, a1.this$);
    }

    ::java::util::Enumeration Collections::emptyEnumeration()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Enumeration(env->callStaticObjectMethod(cls, mids$[mid_emptyEnumeration_39f88070]));
    }

    ::java::util::Iterator Collections::emptyIterator()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Iterator(env->callStaticObjectMethod(cls, mids$[mid_emptyIterator_40858c90]));
    }

    ::java::util::List Collections::emptyList()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::List(env->callStaticObjectMethod(cls, mids$[mid_emptyList_87851566]));
    }

    ::java::util::ListIterator Collections::emptyListIterator()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::ListIterator(env->callStaticObjectMethod(cls, mids$[mid_emptyListIterator_b5be4e14]));
    }

    ::java::util::Map Collections::emptyMap()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Map(env->callStaticObjectMethod(cls, mids$[mid_emptyMap_db60befd]));
    }

    ::java::util::Set Collections::emptySet()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_emptySet_03e99967]));
    }

    ::java::util::Enumeration Collections::enumeration(const ::java::util::Collection & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Enumeration(env->callStaticObjectMethod(cls, mids$[mid_enumeration_8f4c58e7], a0.this$));
    }

    void Collections::fill(const ::java::util::List & a0, const ::java::lang::Object & a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_632fb93f], a0.this$, a1.this$);
    }

    jint Collections::frequency(const ::java::util::Collection & a0, const ::java::lang::Object & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_frequency_6b08c59a], a0.this$, a1.this$);
    }

    jint Collections::indexOfSubList(const ::java::util::List & a0, const ::java::util::List & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_indexOfSubList_cbe63a0d], a0.this$, a1.this$);
    }

    jint Collections::lastIndexOfSubList(const ::java::util::List & a0, const ::java::util::List & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_lastIndexOfSubList_cbe63a0d], a0.this$, a1.this$);
    }

    ::java::util::ArrayList Collections::list(const ::java::util::Enumeration & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::ArrayList(env->callStaticObjectMethod(cls, mids$[mid_list_0729353f], a0.this$));
    }

    ::java::lang::Object Collections::max$(const ::java::util::Collection & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::Object(env->callStaticObjectMethod(cls, mids$[mid_max_abd1a366], a0.this$));
    }

    ::java::lang::Object Collections::max$(const ::java::util::Collection & a0, const ::java::util::Comparator & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::Object(env->callStaticObjectMethod(cls, mids$[mid_max_24cad27f], a0.this$, a1.this$));
    }

    ::java::lang::Object Collections::min$(const ::java::util::Collection & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::Object(env->callStaticObjectMethod(cls, mids$[mid_min_abd1a366], a0.this$));
    }

    ::java::lang::Object Collections::min$(const ::java::util::Collection & a0, const ::java::util::Comparator & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::Object(env->callStaticObjectMethod(cls, mids$[mid_min_24cad27f], a0.this$, a1.this$));
    }

    ::java::util::List Collections::nCopies(jint a0, const ::java::lang::Object & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::List(env->callStaticObjectMethod(cls, mids$[mid_nCopies_a26611d0], a0, a1.this$));
    }

    ::java::util::Set Collections::newSetFromMap(const ::java::util::Map & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_newSetFromMap_d56f8575], a0.this$));
    }

    jboolean Collections::replaceAll(const ::java::util::List & a0, const ::java::lang::Object & a1, const ::java::lang::Object & a2)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_replaceAll_37ceb42b], a0.this$, a1.this$, a2.this$);
    }

    void Collections::reverse(const ::java::util::List & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_reverse_1fde8fc3], a0.this$);
    }

    ::java::util::Comparator Collections::reverseOrder()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Comparator(env->callStaticObjectMethod(cls, mids$[mid_reverseOrder_5a7ff2fc]));
    }

    ::java::util::Comparator Collections::reverseOrder(const ::java::util::Comparator & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Comparator(env->callStaticObjectMethod(cls, mids$[mid_reverseOrder_4ed2c59d], a0.this$));
    }

    void Collections::rotate(const ::java::util::List & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_rotate_fff63b2f], a0.this$, a1);
    }

    void Collections::shuffle(const ::java::util::List & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_shuffle_1fde8fc3], a0.this$);
    }

    void Collections::shuffle(const ::java::util::List & a0, const ::java::util::Random & a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_shuffle_06ba5e4b], a0.this$, a1.this$);
    }

    ::java::util::Set Collections::singleton(const ::java::lang::Object & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_singleton_4c6d62c3], a0.this$));
    }

    ::java::util::List Collections::singletonList(const ::java::lang::Object & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::List(env->callStaticObjectMethod(cls, mids$[mid_singletonList_71371966], a0.this$));
    }

    ::java::util::Map Collections::singletonMap(const ::java::lang::Object & a0, const ::java::lang::Object & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Map(env->callStaticObjectMethod(cls, mids$[mid_singletonMap_65580ae9], a0.this$, a1.this$));
    }

    void Collections::sort(const ::java::util::List & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_1fde8fc3], a0.this$);
    }

    void Collections::sort(const ::java::util::List & a0, const ::java::util::Comparator & a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_b59215b8], a0.this$, a1.this$);
    }

    void Collections::swap(const ::java::util::List & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_swap_d5c0aeaf], a0.this$, a1, a2);
    }

    ::java::util::Collection Collections::synchronizedCollection(const ::java::util::Collection & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Collection(env->callStaticObjectMethod(cls, mids$[mid_synchronizedCollection_55c0b625], a0.this$));
    }

    ::java::util::List Collections::synchronizedList(const ::java::util::List & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::List(env->callStaticObjectMethod(cls, mids$[mid_synchronizedList_4f378251], a0.this$));
    }

    ::java::util::Map Collections::synchronizedMap(const ::java::util::Map & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Map(env->callStaticObjectMethod(cls, mids$[mid_synchronizedMap_c606628b], a0.this$));
    }

    ::java::util::Set Collections::synchronizedSet(const ::java::util::Set & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_synchronizedSet_390c573f], a0.this$));
    }

    ::java::util::SortedMap Collections::synchronizedSortedMap(const ::java::util::SortedMap & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::SortedMap(env->callStaticObjectMethod(cls, mids$[mid_synchronizedSortedMap_93ac548b], a0.this$));
    }

    ::java::util::SortedSet Collections::synchronizedSortedSet(const ::java::util::SortedSet & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::SortedSet(env->callStaticObjectMethod(cls, mids$[mid_synchronizedSortedSet_b705ec3b], a0.this$));
    }

    ::java::util::Collection Collections::unmodifiableCollection(const ::java::util::Collection & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Collection(env->callStaticObjectMethod(cls, mids$[mid_unmodifiableCollection_55c0b625], a0.this$));
    }

    ::java::util::List Collections::unmodifiableList(const ::java::util::List & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::List(env->callStaticObjectMethod(cls, mids$[mid_unmodifiableList_4f378251], a0.this$));
    }

    ::java::util::Map Collections::unmodifiableMap(const ::java::util::Map & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Map(env->callStaticObjectMethod(cls, mids$[mid_unmodifiableMap_c606628b], a0.this$));
    }

    ::java::util::Set Collections::unmodifiableSet(const ::java::util::Set & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_unmodifiableSet_390c573f], a0.this$));
    }

    ::java::util::SortedMap Collections::unmodifiableSortedMap(const ::java::util::SortedMap & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::SortedMap(env->callStaticObjectMethod(cls, mids$[mid_unmodifiableSortedMap_93ac548b], a0.this$));
    }

    ::java::util::SortedSet Collections::unmodifiableSortedSet(const ::java::util::SortedSet & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::SortedSet(env->callStaticObjectMethod(cls, mids$[mid_unmodifiableSortedSet_b705ec3b], a0.this$));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_Collections_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_addAll(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_asLifoQueue(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_binarySearch(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_checkedCollection(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_checkedList(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_checkedMap(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_checkedSet(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_checkedSortedMap(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_checkedSortedSet(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_copy(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_disjoint(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_emptyEnumeration(PyTypeObject *type);
    static PyObject *t_Collections_emptyIterator(PyTypeObject *type);
    static PyObject *t_Collections_emptyList(PyTypeObject *type);
    static PyObject *t_Collections_emptyListIterator(PyTypeObject *type);
    static PyObject *t_Collections_emptyMap(PyTypeObject *type);
    static PyObject *t_Collections_emptySet(PyTypeObject *type);
    static PyObject *t_Collections_enumeration(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_fill(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_frequency(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_indexOfSubList(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_lastIndexOfSubList(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_list(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_max(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_min(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_nCopies(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_newSetFromMap(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_replaceAll(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_reverse(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_reverseOrder(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_rotate(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_shuffle(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_singleton(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_singletonList(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_singletonMap(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_sort(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_swap(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_synchronizedCollection(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_synchronizedList(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_synchronizedMap(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_synchronizedSet(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_synchronizedSortedMap(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_synchronizedSortedSet(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_unmodifiableCollection(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_unmodifiableList(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_unmodifiableMap(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_unmodifiableSet(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_unmodifiableSortedMap(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_unmodifiableSortedSet(PyTypeObject *type, PyObject *arg);

    static PyMethodDef t_Collections__methods_[] = {
      DECLARE_METHOD(t_Collections, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, addAll, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, asLifoQueue, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, binarySearch, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, checkedCollection, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, checkedList, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, checkedMap, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, checkedSet, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, checkedSortedMap, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, checkedSortedSet, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, copy, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, disjoint, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, emptyEnumeration, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, emptyIterator, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, emptyList, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, emptyListIterator, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, emptyMap, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, emptySet, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, enumeration, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, fill, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, frequency, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, indexOfSubList, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, lastIndexOfSubList, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, list, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, max, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, min, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, nCopies, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, newSetFromMap, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, replaceAll, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, reverse, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, reverseOrder, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, rotate, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, shuffle, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, singleton, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, singletonList, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, singletonMap, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, sort, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, swap, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, synchronizedCollection, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, synchronizedList, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, synchronizedMap, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, synchronizedSet, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, synchronizedSortedMap, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, synchronizedSortedSet, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, unmodifiableCollection, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, unmodifiableList, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, unmodifiableMap, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, unmodifiableSet, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, unmodifiableSortedMap, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, unmodifiableSortedSet, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Collections, t_Collections, ::java::lang::Object, Collections, abstract_init, 0, 0, 0, 0, 0);

    void t_Collections::install(PyObject *module)
    {
      installType(&PY_TYPE(Collections), module, "Collections", 0);
    }

    void t_Collections::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Collections).tp_dict, "class_", make_descriptor(Collections::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Collections).tp_dict, "wrapfn_", make_descriptor(t_Collections::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Collections).tp_dict, "boxfn_", make_descriptor(boxObject));
      env->getClass(Collections::initializeClass);
      PyDict_SetItemString(PY_TYPE(Collections).tp_dict, "EMPTY_LIST", make_descriptor(::java::util::t_List::wrap_Object(*Collections::EMPTY_LIST)));
      PyDict_SetItemString(PY_TYPE(Collections).tp_dict, "EMPTY_MAP", make_descriptor(::java::util::t_Map::wrap_Object(*Collections::EMPTY_MAP)));
      PyDict_SetItemString(PY_TYPE(Collections).tp_dict, "EMPTY_SET", make_descriptor(::java::util::t_Set::wrap_Object(*Collections::EMPTY_SET)));
    }

    static PyObject *t_Collections_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Collections::initializeClass, 1)))
        return NULL;
      return t_Collections::wrap_Object(Collections(((t_Collections *) arg)->object.this$));
    }
    static PyObject *t_Collections_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Collections::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Collections_addAll(PyTypeObject *type, PyObject *args)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      JArray< ::java::lang::Object > a1((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "K[o", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1))
      {
        OBJ_CALL(result = ::java::util::Collections::addAll(a0, a1));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "addAll", args);
      return NULL;
    }

    static PyObject *t_Collections_asLifoQueue(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::Deque a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::Queue result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::Deque::initializeClass, &a0, &p0, ::java::util::t_Deque::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::asLifoQueue(a0));
        return ::java::util::t_Queue::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "asLifoQueue", arg);
      return NULL;
    }

    static PyObject *t_Collections_binarySearch(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::lang::Object a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "Ko", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1))
          {
            OBJ_CALL(result = ::java::util::Collections::binarySearch(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 3:
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::lang::Object a1((jobject) NULL);
          ::java::util::Comparator a2((jobject) NULL);
          PyTypeObject **p2;
          jint result;

          if (!parseArgs(args, "KoK", ::java::util::List::initializeClass, ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &a2, &p2, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(result = ::java::util::Collections::binarySearch(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "binarySearch", args);
      return NULL;
    }

    static PyObject *t_Collections_checkedCollection(PyTypeObject *type, PyObject *args)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::Class a1((jobject) NULL);
      PyTypeObject **p1;
      ::java::util::Collection result((jobject) NULL);

      if (!parseArgs(args, "KK", ::java::util::Collection::initializeClass, ::java::lang::Class::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1, &p1, ::java::lang::t_Class::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::checkedCollection(a0, a1));
        return ::java::util::t_Collection::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "checkedCollection", args);
      return NULL;
    }

    static PyObject *t_Collections_checkedList(PyTypeObject *type, PyObject *args)
    {
      ::java::util::List a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::Class a1((jobject) NULL);
      PyTypeObject **p1;
      ::java::util::List result((jobject) NULL);

      if (!parseArgs(args, "KK", ::java::util::List::initializeClass, ::java::lang::Class::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &p1, ::java::lang::t_Class::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::checkedList(a0, a1));
        return ::java::util::t_List::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "checkedList", args);
      return NULL;
    }

    static PyObject *t_Collections_checkedMap(PyTypeObject *type, PyObject *args)
    {
      ::java::util::Map a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::Class a1((jobject) NULL);
      PyTypeObject **p1;
      ::java::lang::Class a2((jobject) NULL);
      PyTypeObject **p2;
      ::java::util::Map result((jobject) NULL);

      if (!parseArgs(args, "KKK", ::java::util::Map::initializeClass, ::java::lang::Class::initializeClass, ::java::lang::Class::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1, &p1, ::java::lang::t_Class::parameters_, &a2, &p2, ::java::lang::t_Class::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::checkedMap(a0, a1, a2));
        return ::java::util::t_Map::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "checkedMap", args);
      return NULL;
    }

    static PyObject *t_Collections_checkedSet(PyTypeObject *type, PyObject *args)
    {
      ::java::util::Set a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::Class a1((jobject) NULL);
      PyTypeObject **p1;
      ::java::util::Set result((jobject) NULL);

      if (!parseArgs(args, "KK", ::java::util::Set::initializeClass, ::java::lang::Class::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_, &a1, &p1, ::java::lang::t_Class::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::checkedSet(a0, a1));
        return ::java::util::t_Set::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "checkedSet", args);
      return NULL;
    }

    static PyObject *t_Collections_checkedSortedMap(PyTypeObject *type, PyObject *args)
    {
      ::java::util::SortedMap a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::Class a1((jobject) NULL);
      PyTypeObject **p1;
      ::java::lang::Class a2((jobject) NULL);
      PyTypeObject **p2;
      ::java::util::SortedMap result((jobject) NULL);

      if (!parseArgs(args, "KKK", ::java::util::SortedMap::initializeClass, ::java::lang::Class::initializeClass, ::java::lang::Class::initializeClass, &a0, &p0, ::java::util::t_SortedMap::parameters_, &a1, &p1, ::java::lang::t_Class::parameters_, &a2, &p2, ::java::lang::t_Class::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::checkedSortedMap(a0, a1, a2));
        return ::java::util::t_SortedMap::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "checkedSortedMap", args);
      return NULL;
    }

    static PyObject *t_Collections_checkedSortedSet(PyTypeObject *type, PyObject *args)
    {
      ::java::util::SortedSet a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::Class a1((jobject) NULL);
      PyTypeObject **p1;
      ::java::util::SortedSet result((jobject) NULL);

      if (!parseArgs(args, "KK", ::java::util::SortedSet::initializeClass, ::java::lang::Class::initializeClass, &a0, &p0, ::java::util::t_SortedSet::parameters_, &a1, &p1, ::java::lang::t_Class::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::checkedSortedSet(a0, a1));
        return ::java::util::t_SortedSet::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "checkedSortedSet", args);
      return NULL;
    }

    static PyObject *t_Collections_copy(PyTypeObject *type, PyObject *args)
    {
      ::java::util::List a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::List a1((jobject) NULL);
      PyTypeObject **p1;

      if (!parseArgs(args, "KK", ::java::util::List::initializeClass, ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &p1, ::java::util::t_List::parameters_))
      {
        OBJ_CALL(::java::util::Collections::copy(a0, a1));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "copy", args);
      return NULL;
    }

    static PyObject *t_Collections_disjoint(PyTypeObject *type, PyObject *args)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::Collection a1((jobject) NULL);
      PyTypeObject **p1;
      jboolean result;

      if (!parseArgs(args, "KK", ::java::util::Collection::initializeClass, ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1, &p1, ::java::util::t_Collection::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::disjoint(a0, a1));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "disjoint", args);
      return NULL;
    }

    static PyObject *t_Collections_emptyEnumeration(PyTypeObject *type)
    {
      ::java::util::Enumeration result((jobject) NULL);
      OBJ_CALL(result = ::java::util::Collections::emptyEnumeration());
      return ::java::util::t_Enumeration::wrap_Object(result);
    }

    static PyObject *t_Collections_emptyIterator(PyTypeObject *type)
    {
      ::java::util::Iterator result((jobject) NULL);
      OBJ_CALL(result = ::java::util::Collections::emptyIterator());
      return ::java::util::t_Iterator::wrap_Object(result);
    }

    static PyObject *t_Collections_emptyList(PyTypeObject *type)
    {
      ::java::util::List result((jobject) NULL);
      OBJ_CALL(result = ::java::util::Collections::emptyList());
      return ::java::util::t_List::wrap_Object(result);
    }

    static PyObject *t_Collections_emptyListIterator(PyTypeObject *type)
    {
      ::java::util::ListIterator result((jobject) NULL);
      OBJ_CALL(result = ::java::util::Collections::emptyListIterator());
      return ::java::util::t_ListIterator::wrap_Object(result);
    }

    static PyObject *t_Collections_emptyMap(PyTypeObject *type)
    {
      ::java::util::Map result((jobject) NULL);
      OBJ_CALL(result = ::java::util::Collections::emptyMap());
      return ::java::util::t_Map::wrap_Object(result);
    }

    static PyObject *t_Collections_emptySet(PyTypeObject *type)
    {
      ::java::util::Set result((jobject) NULL);
      OBJ_CALL(result = ::java::util::Collections::emptySet());
      return ::java::util::t_Set::wrap_Object(result);
    }

    static PyObject *t_Collections_enumeration(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::Enumeration result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::enumeration(a0));
        return ::java::util::t_Enumeration::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "enumeration", arg);
      return NULL;
    }

    static PyObject *t_Collections_fill(PyTypeObject *type, PyObject *args)
    {
      ::java::util::List a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::Object a1((jobject) NULL);

      if (!parseArgs(args, "Ko", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1))
      {
        OBJ_CALL(::java::util::Collections::fill(a0, a1));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "fill", args);
      return NULL;
    }

    static PyObject *t_Collections_frequency(PyTypeObject *type, PyObject *args)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::Object a1((jobject) NULL);
      jint result;

      if (!parseArgs(args, "Ko", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1))
      {
        OBJ_CALL(result = ::java::util::Collections::frequency(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "frequency", args);
      return NULL;
    }

    static PyObject *t_Collections_indexOfSubList(PyTypeObject *type, PyObject *args)
    {
      ::java::util::List a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::List a1((jobject) NULL);
      PyTypeObject **p1;
      jint result;

      if (!parseArgs(args, "KK", ::java::util::List::initializeClass, ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &p1, ::java::util::t_List::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::indexOfSubList(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "indexOfSubList", args);
      return NULL;
    }

    static PyObject *t_Collections_lastIndexOfSubList(PyTypeObject *type, PyObject *args)
    {
      ::java::util::List a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::List a1((jobject) NULL);
      PyTypeObject **p1;
      jint result;

      if (!parseArgs(args, "KK", ::java::util::List::initializeClass, ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &p1, ::java::util::t_List::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::lastIndexOfSubList(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "lastIndexOfSubList", args);
      return NULL;
    }

    static PyObject *t_Collections_list(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::Enumeration a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::ArrayList result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::Enumeration::initializeClass, &a0, &p0, ::java::util::t_Enumeration::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::list(a0));
        return ::java::util::t_ArrayList::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "list", arg);
      return NULL;
    }

    static PyObject *t_Collections_max(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::lang::Object result((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(result = ::java::util::Collections::max$(a0));
            return p0 != NULL && p0[0] != NULL ? wrapType(p0[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::util::Comparator a1((jobject) NULL);
          PyTypeObject **p1;
          ::java::lang::Object result((jobject) NULL);

          if (!parseArgs(args, "KK", ::java::util::Collection::initializeClass, ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1, &p1, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(result = ::java::util::Collections::max$(a0, a1));
            return p0 != NULL && p0[0] != NULL ? wrapType(p0[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "max", args);
      return NULL;
    }

    static PyObject *t_Collections_min(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::lang::Object result((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(result = ::java::util::Collections::min$(a0));
            return p0 != NULL && p0[0] != NULL ? wrapType(p0[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::util::Comparator a1((jobject) NULL);
          PyTypeObject **p1;
          ::java::lang::Object result((jobject) NULL);

          if (!parseArgs(args, "KK", ::java::util::Collection::initializeClass, ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1, &p1, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(result = ::java::util::Collections::min$(a0, a1));
            return p0 != NULL && p0[0] != NULL ? wrapType(p0[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "min", args);
      return NULL;
    }

    static PyObject *t_Collections_nCopies(PyTypeObject *type, PyObject *args)
    {
      jint a0;
      ::java::lang::Object a1((jobject) NULL);
      ::java::util::List result((jobject) NULL);

      if (!parseArgs(args, "Io", &a0, &a1))
      {
        OBJ_CALL(result = ::java::util::Collections::nCopies(a0, a1));
        return ::java::util::t_List::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "nCopies", args);
      return NULL;
    }

    static PyObject *t_Collections_newSetFromMap(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::Map a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::Set result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::newSetFromMap(a0));
        return ::java::util::t_Set::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "newSetFromMap", arg);
      return NULL;
    }

    static PyObject *t_Collections_replaceAll(PyTypeObject *type, PyObject *args)
    {
      ::java::util::List a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::Object a1((jobject) NULL);
      ::java::lang::Object a2((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "Koo", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &a2))
      {
        OBJ_CALL(result = ::java::util::Collections::replaceAll(a0, a1, a2));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "replaceAll", args);
      return NULL;
    }

    static PyObject *t_Collections_reverse(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::List a0((jobject) NULL);
      PyTypeObject **p0;

      if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
      {
        OBJ_CALL(::java::util::Collections::reverse(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "reverse", arg);
      return NULL;
    }

    static PyObject *t_Collections_reverseOrder(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = ::java::util::Collections::reverseOrder());
          return ::java::util::t_Comparator::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Comparator a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::util::Comparator result((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(result = ::java::util::Collections::reverseOrder(a0));
            return ::java::util::t_Comparator::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "reverseOrder", args);
      return NULL;
    }

    static PyObject *t_Collections_rotate(PyTypeObject *type, PyObject *args)
    {
      ::java::util::List a0((jobject) NULL);
      PyTypeObject **p0;
      jint a1;

      if (!parseArgs(args, "KI", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1))
      {
        OBJ_CALL(::java::util::Collections::rotate(a0, a1));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "rotate", args);
      return NULL;
    }

    static PyObject *t_Collections_shuffle(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(::java::util::Collections::shuffle(a0));
            Py_RETURN_NONE;
          }
        }
        break;
       case 2:
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::util::Random a1((jobject) NULL);

          if (!parseArgs(args, "Kk", ::java::util::List::initializeClass, ::java::util::Random::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1))
          {
            OBJ_CALL(::java::util::Collections::shuffle(a0, a1));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError(type, "shuffle", args);
      return NULL;
    }

    static PyObject *t_Collections_singleton(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::util::Set result((jobject) NULL);

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = ::java::util::Collections::singleton(a0));
        return ::java::util::t_Set::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "singleton", arg);
      return NULL;
    }

    static PyObject *t_Collections_singletonList(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::util::List result((jobject) NULL);

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = ::java::util::Collections::singletonList(a0));
        return ::java::util::t_List::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "singletonList", arg);
      return NULL;
    }

    static PyObject *t_Collections_singletonMap(PyTypeObject *type, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object a1((jobject) NULL);
      ::java::util::Map result((jobject) NULL);

      if (!parseArgs(args, "oo", &a0, &a1))
      {
        OBJ_CALL(result = ::java::util::Collections::singletonMap(a0, a1));
        return ::java::util::t_Map::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "singletonMap", args);
      return NULL;
    }

    static PyObject *t_Collections_sort(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(::java::util::Collections::sort(a0));
            Py_RETURN_NONE;
          }
        }
        break;
       case 2:
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::util::Comparator a1((jobject) NULL);
          PyTypeObject **p1;

          if (!parseArgs(args, "KK", ::java::util::List::initializeClass, ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &p1, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(::java::util::Collections::sort(a0, a1));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError(type, "sort", args);
      return NULL;
    }

    static PyObject *t_Collections_swap(PyTypeObject *type, PyObject *args)
    {
      ::java::util::List a0((jobject) NULL);
      PyTypeObject **p0;
      jint a1;
      jint a2;

      if (!parseArgs(args, "KII", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &a2))
      {
        OBJ_CALL(::java::util::Collections::swap(a0, a1, a2));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "swap", args);
      return NULL;
    }

    static PyObject *t_Collections_synchronizedCollection(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::Collection result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::synchronizedCollection(a0));
        return ::java::util::t_Collection::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "synchronizedCollection", arg);
      return NULL;
    }

    static PyObject *t_Collections_synchronizedList(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::List a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::List result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::synchronizedList(a0));
        return ::java::util::t_List::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "synchronizedList", arg);
      return NULL;
    }

    static PyObject *t_Collections_synchronizedMap(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::Map a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::Map result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::synchronizedMap(a0));
        return ::java::util::t_Map::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "synchronizedMap", arg);
      return NULL;
    }

    static PyObject *t_Collections_synchronizedSet(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::Set a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::Set result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::synchronizedSet(a0));
        return ::java::util::t_Set::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "synchronizedSet", arg);
      return NULL;
    }

    static PyObject *t_Collections_synchronizedSortedMap(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::SortedMap a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::SortedMap result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::SortedMap::initializeClass, &a0, &p0, ::java::util::t_SortedMap::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::synchronizedSortedMap(a0));
        return ::java::util::t_SortedMap::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "synchronizedSortedMap", arg);
      return NULL;
    }

    static PyObject *t_Collections_synchronizedSortedSet(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::SortedSet a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::SortedSet result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::SortedSet::initializeClass, &a0, &p0, ::java::util::t_SortedSet::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::synchronizedSortedSet(a0));
        return ::java::util::t_SortedSet::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "synchronizedSortedSet", arg);
      return NULL;
    }

    static PyObject *t_Collections_unmodifiableCollection(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::Collection result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::unmodifiableCollection(a0));
        return ::java::util::t_Collection::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "unmodifiableCollection", arg);
      return NULL;
    }

    static PyObject *t_Collections_unmodifiableList(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::List a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::List result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::unmodifiableList(a0));
        return ::java::util::t_List::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "unmodifiableList", arg);
      return NULL;
    }

    static PyObject *t_Collections_unmodifiableMap(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::Map a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::Map result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::unmodifiableMap(a0));
        return ::java::util::t_Map::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "unmodifiableMap", arg);
      return NULL;
    }

    static PyObject *t_Collections_unmodifiableSet(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::Set a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::Set result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::unmodifiableSet(a0));
        return ::java::util::t_Set::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "unmodifiableSet", arg);
      return NULL;
    }

    static PyObject *t_Collections_unmodifiableSortedMap(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::SortedMap a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::SortedMap result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::SortedMap::initializeClass, &a0, &p0, ::java::util::t_SortedMap::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::unmodifiableSortedMap(a0));
        return ::java::util::t_SortedMap::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "unmodifiableSortedMap", arg);
      return NULL;
    }

    static PyObject *t_Collections_unmodifiableSortedSet(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::SortedSet a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::SortedSet result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::SortedSet::initializeClass, &a0, &p0, ::java::util::t_SortedSet::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::unmodifiableSortedSet(a0));
        return ::java::util::t_SortedSet::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "unmodifiableSortedSet", arg);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiReader.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiReader::class$ = NULL;
        jmethodID *MultiReader::mids$ = NULL;
        bool MultiReader::live$ = false;

        jclass MultiReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a20f8ee9] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/index/IndexReader;)V");
            mids$[mid_init$_44fb5002] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/index/IndexReader;Z)V");
            mids$[mid_doClose_54c6a166] = env->getMethodID(cls, "doClose", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiReader::MultiReader(const JArray< ::org::apache::lucene::index::IndexReader > & a0) : ::org::apache::lucene::index::BaseCompositeReader(env->newObject(initializeClass, &mids$, mid_init$_a20f8ee9, a0.this$)) {}

        MultiReader::MultiReader(const JArray< ::org::apache::lucene::index::IndexReader > & a0, jboolean a1) : ::org::apache::lucene::index::BaseCompositeReader(env->newObject(initializeClass, &mids$, mid_init$_44fb5002, a0.this$, a1)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiReader_of_(t_MultiReader *self, PyObject *args);
        static int t_MultiReader_init_(t_MultiReader *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiReader_get__parameters_(t_MultiReader *self, void *data);
        static PyGetSetDef t_MultiReader__fields_[] = {
          DECLARE_GET_FIELD(t_MultiReader, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiReader__methods_[] = {
          DECLARE_METHOD(t_MultiReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiReader, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiReader, t_MultiReader, ::org::apache::lucene::index::BaseCompositeReader, MultiReader, t_MultiReader_init_, 0, 0, t_MultiReader__fields_, 0, 0);
        PyObject *t_MultiReader::wrap_Object(const MultiReader& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MultiReader::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MultiReader *self = (t_MultiReader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_MultiReader::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MultiReader::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MultiReader *self = (t_MultiReader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_MultiReader::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiReader), module, "MultiReader", 0);
        }

        void t_MultiReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiReader).tp_dict, "class_", make_descriptor(MultiReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiReader).tp_dict, "wrapfn_", make_descriptor(t_MultiReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiReader::initializeClass, 1)))
            return NULL;
          return t_MultiReader::wrap_Object(MultiReader(((t_MultiReader *) arg)->object.this$));
        }
        static PyObject *t_MultiReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiReader_of_(t_MultiReader *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_MultiReader_init_(t_MultiReader *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::org::apache::lucene::index::IndexReader > a0((jobject) NULL);
              MultiReader object((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
              {
                INT_CALL(object = MultiReader(a0));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::index::PY_TYPE(IndexReader);
                break;
              }
            }
            goto err;
           case 2:
            {
              JArray< ::org::apache::lucene::index::IndexReader > a0((jobject) NULL);
              jboolean a1;
              MultiReader object((jobject) NULL);

              if (!parseArgs(args, "[kZ", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
              {
                INT_CALL(object = MultiReader(a0, a1));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::index::PY_TYPE(IndexReader);
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
        static PyObject *t_MultiReader_get__parameters_(t_MultiReader *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo$SubInfo.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FieldFragList$WeightedFragInfo::class$ = NULL;
          jmethodID *FieldFragList$WeightedFragInfo::mids$ = NULL;
          bool FieldFragList$WeightedFragInfo::live$ = false;

          jclass FieldFragList$WeightedFragInfo::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_efced3c4] = env->getMethodID(cls, "<init>", "(IILjava/util/List;F)V");
              mids$[mid_getEndOffset_54c6a179] = env->getMethodID(cls, "getEndOffset", "()I");
              mids$[mid_getStartOffset_54c6a179] = env->getMethodID(cls, "getStartOffset", "()I");
              mids$[mid_getSubInfos_87851566] = env->getMethodID(cls, "getSubInfos", "()Ljava/util/List;");
              mids$[mid_getTotalBoost_54c6a176] = env->getMethodID(cls, "getTotalBoost", "()F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FieldFragList$WeightedFragInfo::FieldFragList$WeightedFragInfo(jint a0, jint a1, const ::java::util::List & a2, jfloat a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_efced3c4, a0, a1, a2.this$, a3)) {}

          jint FieldFragList$WeightedFragInfo::getEndOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getEndOffset_54c6a179]);
          }

          jint FieldFragList$WeightedFragInfo::getStartOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getStartOffset_54c6a179]);
          }

          ::java::util::List FieldFragList$WeightedFragInfo::getSubInfos() const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getSubInfos_87851566]));
          }

          jfloat FieldFragList$WeightedFragInfo::getTotalBoost() const
          {
            return env->callFloatMethod(this$, mids$[mid_getTotalBoost_54c6a176]);
          }

          ::java::lang::String FieldFragList$WeightedFragInfo::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FieldFragList$WeightedFragInfo_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldFragList$WeightedFragInfo_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FieldFragList$WeightedFragInfo_init_(t_FieldFragList$WeightedFragInfo *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FieldFragList$WeightedFragInfo_getEndOffset(t_FieldFragList$WeightedFragInfo *self);
          static PyObject *t_FieldFragList$WeightedFragInfo_getStartOffset(t_FieldFragList$WeightedFragInfo *self);
          static PyObject *t_FieldFragList$WeightedFragInfo_getSubInfos(t_FieldFragList$WeightedFragInfo *self);
          static PyObject *t_FieldFragList$WeightedFragInfo_getTotalBoost(t_FieldFragList$WeightedFragInfo *self);
          static PyObject *t_FieldFragList$WeightedFragInfo_toString(t_FieldFragList$WeightedFragInfo *self, PyObject *args);
          static PyObject *t_FieldFragList$WeightedFragInfo_get__endOffset(t_FieldFragList$WeightedFragInfo *self, void *data);
          static PyObject *t_FieldFragList$WeightedFragInfo_get__startOffset(t_FieldFragList$WeightedFragInfo *self, void *data);
          static PyObject *t_FieldFragList$WeightedFragInfo_get__subInfos(t_FieldFragList$WeightedFragInfo *self, void *data);
          static PyObject *t_FieldFragList$WeightedFragInfo_get__totalBoost(t_FieldFragList$WeightedFragInfo *self, void *data);
          static PyGetSetDef t_FieldFragList$WeightedFragInfo__fields_[] = {
            DECLARE_GET_FIELD(t_FieldFragList$WeightedFragInfo, endOffset),
            DECLARE_GET_FIELD(t_FieldFragList$WeightedFragInfo, startOffset),
            DECLARE_GET_FIELD(t_FieldFragList$WeightedFragInfo, subInfos),
            DECLARE_GET_FIELD(t_FieldFragList$WeightedFragInfo, totalBoost),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldFragList$WeightedFragInfo__methods_[] = {
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo, getEndOffset, METH_NOARGS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo, getStartOffset, METH_NOARGS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo, getSubInfos, METH_NOARGS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo, getTotalBoost, METH_NOARGS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FieldFragList$WeightedFragInfo, t_FieldFragList$WeightedFragInfo, ::java::lang::Object, FieldFragList$WeightedFragInfo, t_FieldFragList$WeightedFragInfo_init_, 0, 0, t_FieldFragList$WeightedFragInfo__fields_, 0, 0);

          void t_FieldFragList$WeightedFragInfo::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldFragList$WeightedFragInfo), module, "FieldFragList$WeightedFragInfo", 0);
            PyDict_SetItemString(PY_TYPE(FieldFragList$WeightedFragInfo).tp_dict, "SubInfo", make_descriptor(&PY_TYPE(FieldFragList$WeightedFragInfo$SubInfo)));
          }

          void t_FieldFragList$WeightedFragInfo::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FieldFragList$WeightedFragInfo).tp_dict, "class_", make_descriptor(FieldFragList$WeightedFragInfo::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FieldFragList$WeightedFragInfo).tp_dict, "wrapfn_", make_descriptor(t_FieldFragList$WeightedFragInfo::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FieldFragList$WeightedFragInfo).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldFragList$WeightedFragInfo_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldFragList$WeightedFragInfo::initializeClass, 1)))
              return NULL;
            return t_FieldFragList$WeightedFragInfo::wrap_Object(FieldFragList$WeightedFragInfo(((t_FieldFragList$WeightedFragInfo *) arg)->object.this$));
          }
          static PyObject *t_FieldFragList$WeightedFragInfo_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldFragList$WeightedFragInfo::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FieldFragList$WeightedFragInfo_init_(t_FieldFragList$WeightedFragInfo *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            jint a1;
            ::java::util::List a2((jobject) NULL);
            PyTypeObject **p2;
            jfloat a3;
            FieldFragList$WeightedFragInfo object((jobject) NULL);

            if (!parseArgs(args, "IIKF", ::java::util::List::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_List::parameters_, &a3))
            {
              INT_CALL(object = FieldFragList$WeightedFragInfo(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FieldFragList$WeightedFragInfo_getEndOffset(t_FieldFragList$WeightedFragInfo *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEndOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo_getStartOffset(t_FieldFragList$WeightedFragInfo *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getStartOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo_getSubInfos(t_FieldFragList$WeightedFragInfo *self)
          {
            ::java::util::List result((jobject) NULL);
            OBJ_CALL(result = self->object.getSubInfos());
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::vectorhighlight::PY_TYPE(FieldFragList$WeightedFragInfo$SubInfo));
          }

          static PyObject *t_FieldFragList$WeightedFragInfo_getTotalBoost(t_FieldFragList$WeightedFragInfo *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getTotalBoost());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo_toString(t_FieldFragList$WeightedFragInfo *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(FieldFragList$WeightedFragInfo), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo_get__endOffset(t_FieldFragList$WeightedFragInfo *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEndOffset());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo_get__startOffset(t_FieldFragList$WeightedFragInfo *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getStartOffset());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo_get__subInfos(t_FieldFragList$WeightedFragInfo *self, void *data)
          {
            ::java::util::List value((jobject) NULL);
            OBJ_CALL(value = self->object.getSubInfos());
            return ::java::util::t_List::wrap_Object(value);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo_get__totalBoost(t_FieldFragList$WeightedFragInfo *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getTotalBoost());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/LogByteSizeMergePolicy.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *LogByteSizeMergePolicy::class$ = NULL;
        jmethodID *LogByteSizeMergePolicy::mids$ = NULL;
        bool LogByteSizeMergePolicy::live$ = false;
        jdouble LogByteSizeMergePolicy::DEFAULT_MAX_MERGE_MB = (jdouble) 0;
        jdouble LogByteSizeMergePolicy::DEFAULT_MAX_MERGE_MB_FOR_FORCED_MERGE = (jdouble) 0;
        jdouble LogByteSizeMergePolicy::DEFAULT_MIN_MERGE_MB = (jdouble) 0;

        jclass LogByteSizeMergePolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/LogByteSizeMergePolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_getMaxMergeMB_54c6a174] = env->getMethodID(cls, "getMaxMergeMB", "()D");
            mids$[mid_getMaxMergeMBForForcedMerge_54c6a174] = env->getMethodID(cls, "getMaxMergeMBForForcedMerge", "()D");
            mids$[mid_getMinMergeMB_54c6a174] = env->getMethodID(cls, "getMinMergeMB", "()D");
            mids$[mid_setMaxMergeMB_5d1c7645] = env->getMethodID(cls, "setMaxMergeMB", "(D)V");
            mids$[mid_setMaxMergeMBForForcedMerge_5d1c7645] = env->getMethodID(cls, "setMaxMergeMBForForcedMerge", "(D)V");
            mids$[mid_setMinMergeMB_5d1c7645] = env->getMethodID(cls, "setMinMergeMB", "(D)V");
            mids$[mid_size_5454cb07] = env->getMethodID(cls, "size", "(Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/index/IndexWriter;)J");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_MAX_MERGE_MB = env->getStaticDoubleField(cls, "DEFAULT_MAX_MERGE_MB");
            DEFAULT_MAX_MERGE_MB_FOR_FORCED_MERGE = env->getStaticDoubleField(cls, "DEFAULT_MAX_MERGE_MB_FOR_FORCED_MERGE");
            DEFAULT_MIN_MERGE_MB = env->getStaticDoubleField(cls, "DEFAULT_MIN_MERGE_MB");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LogByteSizeMergePolicy::LogByteSizeMergePolicy() : ::org::apache::lucene::index::LogMergePolicy(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jdouble LogByteSizeMergePolicy::getMaxMergeMB() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getMaxMergeMB_54c6a174]);
        }

        jdouble LogByteSizeMergePolicy::getMaxMergeMBForForcedMerge() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getMaxMergeMBForForcedMerge_54c6a174]);
        }

        jdouble LogByteSizeMergePolicy::getMinMergeMB() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getMinMergeMB_54c6a174]);
        }

        void LogByteSizeMergePolicy::setMaxMergeMB(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMaxMergeMB_5d1c7645], a0);
        }

        void LogByteSizeMergePolicy::setMaxMergeMBForForcedMerge(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMaxMergeMBForForcedMerge_5d1c7645], a0);
        }

        void LogByteSizeMergePolicy::setMinMergeMB(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMinMergeMB_5d1c7645], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_LogByteSizeMergePolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LogByteSizeMergePolicy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LogByteSizeMergePolicy_init_(t_LogByteSizeMergePolicy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LogByteSizeMergePolicy_getMaxMergeMB(t_LogByteSizeMergePolicy *self);
        static PyObject *t_LogByteSizeMergePolicy_getMaxMergeMBForForcedMerge(t_LogByteSizeMergePolicy *self);
        static PyObject *t_LogByteSizeMergePolicy_getMinMergeMB(t_LogByteSizeMergePolicy *self);
        static PyObject *t_LogByteSizeMergePolicy_setMaxMergeMB(t_LogByteSizeMergePolicy *self, PyObject *arg);
        static PyObject *t_LogByteSizeMergePolicy_setMaxMergeMBForForcedMerge(t_LogByteSizeMergePolicy *self, PyObject *arg);
        static PyObject *t_LogByteSizeMergePolicy_setMinMergeMB(t_LogByteSizeMergePolicy *self, PyObject *arg);
        static PyObject *t_LogByteSizeMergePolicy_get__maxMergeMB(t_LogByteSizeMergePolicy *self, void *data);
        static int t_LogByteSizeMergePolicy_set__maxMergeMB(t_LogByteSizeMergePolicy *self, PyObject *arg, void *data);
        static PyObject *t_LogByteSizeMergePolicy_get__maxMergeMBForForcedMerge(t_LogByteSizeMergePolicy *self, void *data);
        static int t_LogByteSizeMergePolicy_set__maxMergeMBForForcedMerge(t_LogByteSizeMergePolicy *self, PyObject *arg, void *data);
        static PyObject *t_LogByteSizeMergePolicy_get__minMergeMB(t_LogByteSizeMergePolicy *self, void *data);
        static int t_LogByteSizeMergePolicy_set__minMergeMB(t_LogByteSizeMergePolicy *self, PyObject *arg, void *data);
        static PyGetSetDef t_LogByteSizeMergePolicy__fields_[] = {
          DECLARE_GETSET_FIELD(t_LogByteSizeMergePolicy, maxMergeMB),
          DECLARE_GETSET_FIELD(t_LogByteSizeMergePolicy, maxMergeMBForForcedMerge),
          DECLARE_GETSET_FIELD(t_LogByteSizeMergePolicy, minMergeMB),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_LogByteSizeMergePolicy__methods_[] = {
          DECLARE_METHOD(t_LogByteSizeMergePolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LogByteSizeMergePolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LogByteSizeMergePolicy, getMaxMergeMB, METH_NOARGS),
          DECLARE_METHOD(t_LogByteSizeMergePolicy, getMaxMergeMBForForcedMerge, METH_NOARGS),
          DECLARE_METHOD(t_LogByteSizeMergePolicy, getMinMergeMB, METH_NOARGS),
          DECLARE_METHOD(t_LogByteSizeMergePolicy, setMaxMergeMB, METH_O),
          DECLARE_METHOD(t_LogByteSizeMergePolicy, setMaxMergeMBForForcedMerge, METH_O),
          DECLARE_METHOD(t_LogByteSizeMergePolicy, setMinMergeMB, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LogByteSizeMergePolicy, t_LogByteSizeMergePolicy, ::org::apache::lucene::index::LogMergePolicy, LogByteSizeMergePolicy, t_LogByteSizeMergePolicy_init_, 0, 0, t_LogByteSizeMergePolicy__fields_, 0, 0);

        void t_LogByteSizeMergePolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(LogByteSizeMergePolicy), module, "LogByteSizeMergePolicy", 0);
        }

        void t_LogByteSizeMergePolicy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LogByteSizeMergePolicy).tp_dict, "class_", make_descriptor(LogByteSizeMergePolicy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LogByteSizeMergePolicy).tp_dict, "wrapfn_", make_descriptor(t_LogByteSizeMergePolicy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LogByteSizeMergePolicy).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(LogByteSizeMergePolicy::initializeClass);
          PyDict_SetItemString(PY_TYPE(LogByteSizeMergePolicy).tp_dict, "DEFAULT_MAX_MERGE_MB", make_descriptor(LogByteSizeMergePolicy::DEFAULT_MAX_MERGE_MB));
          PyDict_SetItemString(PY_TYPE(LogByteSizeMergePolicy).tp_dict, "DEFAULT_MAX_MERGE_MB_FOR_FORCED_MERGE", make_descriptor(LogByteSizeMergePolicy::DEFAULT_MAX_MERGE_MB_FOR_FORCED_MERGE));
          PyDict_SetItemString(PY_TYPE(LogByteSizeMergePolicy).tp_dict, "DEFAULT_MIN_MERGE_MB", make_descriptor(LogByteSizeMergePolicy::DEFAULT_MIN_MERGE_MB));
        }

        static PyObject *t_LogByteSizeMergePolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LogByteSizeMergePolicy::initializeClass, 1)))
            return NULL;
          return t_LogByteSizeMergePolicy::wrap_Object(LogByteSizeMergePolicy(((t_LogByteSizeMergePolicy *) arg)->object.this$));
        }
        static PyObject *t_LogByteSizeMergePolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LogByteSizeMergePolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LogByteSizeMergePolicy_init_(t_LogByteSizeMergePolicy *self, PyObject *args, PyObject *kwds)
        {
          LogByteSizeMergePolicy object((jobject) NULL);

          INT_CALL(object = LogByteSizeMergePolicy());
          self->object = object;

          return 0;
        }

        static PyObject *t_LogByteSizeMergePolicy_getMaxMergeMB(t_LogByteSizeMergePolicy *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getMaxMergeMB());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_LogByteSizeMergePolicy_getMaxMergeMBForForcedMerge(t_LogByteSizeMergePolicy *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getMaxMergeMBForForcedMerge());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_LogByteSizeMergePolicy_getMinMergeMB(t_LogByteSizeMergePolicy *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getMinMergeMB());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_LogByteSizeMergePolicy_setMaxMergeMB(t_LogByteSizeMergePolicy *self, PyObject *arg)
        {
          jdouble a0;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(self->object.setMaxMergeMB(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxMergeMB", arg);
          return NULL;
        }

        static PyObject *t_LogByteSizeMergePolicy_setMaxMergeMBForForcedMerge(t_LogByteSizeMergePolicy *self, PyObject *arg)
        {
          jdouble a0;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(self->object.setMaxMergeMBForForcedMerge(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxMergeMBForForcedMerge", arg);
          return NULL;
        }

        static PyObject *t_LogByteSizeMergePolicy_setMinMergeMB(t_LogByteSizeMergePolicy *self, PyObject *arg)
        {
          jdouble a0;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(self->object.setMinMergeMB(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMinMergeMB", arg);
          return NULL;
        }

        static PyObject *t_LogByteSizeMergePolicy_get__maxMergeMB(t_LogByteSizeMergePolicy *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getMaxMergeMB());
          return PyFloat_FromDouble((double) value);
        }
        static int t_LogByteSizeMergePolicy_set__maxMergeMB(t_LogByteSizeMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setMaxMergeMB(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxMergeMB", arg);
          return -1;
        }

        static PyObject *t_LogByteSizeMergePolicy_get__maxMergeMBForForcedMerge(t_LogByteSizeMergePolicy *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getMaxMergeMBForForcedMerge());
          return PyFloat_FromDouble((double) value);
        }
        static int t_LogByteSizeMergePolicy_set__maxMergeMBForForcedMerge(t_LogByteSizeMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setMaxMergeMBForForcedMerge(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxMergeMBForForcedMerge", arg);
          return -1;
        }

        static PyObject *t_LogByteSizeMergePolicy_get__minMergeMB(t_LogByteSizeMergePolicy *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getMinMergeMB());
          return PyFloat_FromDouble((double) value);
        }
        static int t_LogByteSizeMergePolicy_set__minMergeMB(t_LogByteSizeMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setMinMergeMB(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "minMergeMB", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergeState$DocMap.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergeState$DocMap::class$ = NULL;
        jmethodID *MergeState$DocMap::mids$ = NULL;
        bool MergeState$DocMap::live$ = false;

        jclass MergeState$DocMap::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergeState$DocMap");

            mids$ = new jmethodID[max_mid];
            mids$[mid_build_a4668aa1] = env->getStaticMethodID(cls, "build", "(Lorg/apache/lucene/index/AtomicReader;)Lorg/apache/lucene/index/MergeState$DocMap;");
            mids$[mid_get_39c7bd23] = env->getMethodID(cls, "get", "(I)I");
            mids$[mid_hasDeletions_54c6a16a] = env->getMethodID(cls, "hasDeletions", "()Z");
            mids$[mid_maxDoc_54c6a179] = env->getMethodID(cls, "maxDoc", "()I");
            mids$[mid_numDeletedDocs_54c6a179] = env->getMethodID(cls, "numDeletedDocs", "()I");
            mids$[mid_numDocs_54c6a179] = env->getMethodID(cls, "numDocs", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MergeState$DocMap MergeState$DocMap::build(const ::org::apache::lucene::index::AtomicReader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return MergeState$DocMap(env->callStaticObjectMethod(cls, mids$[mid_build_a4668aa1], a0.this$));
        }

        jint MergeState$DocMap::get(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_get_39c7bd23], a0);
        }

        jboolean MergeState$DocMap::hasDeletions() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasDeletions_54c6a16a]);
        }

        jint MergeState$DocMap::maxDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_maxDoc_54c6a179]);
        }

        jint MergeState$DocMap::numDeletedDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_numDeletedDocs_54c6a179]);
        }

        jint MergeState$DocMap::numDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_numDocs_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergeState$DocMap_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergeState$DocMap_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergeState$DocMap_build(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergeState$DocMap_get(t_MergeState$DocMap *self, PyObject *arg);
        static PyObject *t_MergeState$DocMap_hasDeletions(t_MergeState$DocMap *self);
        static PyObject *t_MergeState$DocMap_maxDoc(t_MergeState$DocMap *self);
        static PyObject *t_MergeState$DocMap_numDeletedDocs(t_MergeState$DocMap *self);
        static PyObject *t_MergeState$DocMap_numDocs(t_MergeState$DocMap *self);

        static PyMethodDef t_MergeState$DocMap__methods_[] = {
          DECLARE_METHOD(t_MergeState$DocMap, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeState$DocMap, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeState$DocMap, build, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeState$DocMap, get, METH_O),
          DECLARE_METHOD(t_MergeState$DocMap, hasDeletions, METH_NOARGS),
          DECLARE_METHOD(t_MergeState$DocMap, maxDoc, METH_NOARGS),
          DECLARE_METHOD(t_MergeState$DocMap, numDeletedDocs, METH_NOARGS),
          DECLARE_METHOD(t_MergeState$DocMap, numDocs, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MergeState$DocMap, t_MergeState$DocMap, ::java::lang::Object, MergeState$DocMap, abstract_init, 0, 0, 0, 0, 0);

        void t_MergeState$DocMap::install(PyObject *module)
        {
          installType(&PY_TYPE(MergeState$DocMap), module, "MergeState$DocMap", 0);
        }

        void t_MergeState$DocMap::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MergeState$DocMap).tp_dict, "class_", make_descriptor(MergeState$DocMap::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MergeState$DocMap).tp_dict, "wrapfn_", make_descriptor(t_MergeState$DocMap::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MergeState$DocMap).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergeState$DocMap_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergeState$DocMap::initializeClass, 1)))
            return NULL;
          return t_MergeState$DocMap::wrap_Object(MergeState$DocMap(((t_MergeState$DocMap *) arg)->object.this$));
        }
        static PyObject *t_MergeState$DocMap_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergeState$DocMap::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MergeState$DocMap_build(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          MergeState$DocMap result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MergeState$DocMap::build(a0));
            return t_MergeState$DocMap::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "build", arg);
          return NULL;
        }

        static PyObject *t_MergeState$DocMap_get(t_MergeState$DocMap *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_MergeState$DocMap_hasDeletions(t_MergeState$DocMap *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasDeletions());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_MergeState$DocMap_maxDoc(t_MergeState$DocMap *self)
        {
          jint result;
          OBJ_CALL(result = self->object.maxDoc());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_MergeState$DocMap_numDeletedDocs(t_MergeState$DocMap *self)
        {
          jint result;
          OBJ_CALL(result = self->object.numDeletedDocs());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_MergeState$DocMap_numDocs(t_MergeState$DocMap *self)
        {
          jint result;
          OBJ_CALL(result = self->object.numDocs());
          return PyInt_FromLong((long) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/RangeMapFloatFunction.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/Float.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *RangeMapFloatFunction::class$ = NULL;
            jmethodID *RangeMapFloatFunction::mids$ = NULL;
            bool RangeMapFloatFunction::live$ = false;

            jclass RangeMapFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/RangeMapFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_6ddf6b07] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;FFFLjava/lang/Float;)V");
                mids$[mid_init$_e1b244a8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;FFLorg/apache/lucene/queries/function/ValueSource;Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            RangeMapFloatFunction::RangeMapFloatFunction(const ::org::apache::lucene::queries::function::ValueSource & a0, jfloat a1, jfloat a2, jfloat a3, const ::java::lang::Float & a4) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_6ddf6b07, a0.this$, a1, a2, a3, a4.this$)) {}

            RangeMapFloatFunction::RangeMapFloatFunction(const ::org::apache::lucene::queries::function::ValueSource & a0, jfloat a1, jfloat a2, const ::org::apache::lucene::queries::function::ValueSource & a3, const ::org::apache::lucene::queries::function::ValueSource & a4) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_e1b244a8, a0.this$, a1, a2, a3.this$, a4.this$)) {}

            void RangeMapFloatFunction::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String RangeMapFloatFunction::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean RangeMapFloatFunction::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues RangeMapFloatFunction::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint RangeMapFloatFunction::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_RangeMapFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_RangeMapFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_RangeMapFloatFunction_init_(t_RangeMapFloatFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_RangeMapFloatFunction_createWeight(t_RangeMapFloatFunction *self, PyObject *args);
            static PyObject *t_RangeMapFloatFunction_description(t_RangeMapFloatFunction *self, PyObject *args);
            static PyObject *t_RangeMapFloatFunction_equals(t_RangeMapFloatFunction *self, PyObject *args);
            static PyObject *t_RangeMapFloatFunction_getValues(t_RangeMapFloatFunction *self, PyObject *args);
            static PyObject *t_RangeMapFloatFunction_hashCode(t_RangeMapFloatFunction *self, PyObject *args);

            static PyMethodDef t_RangeMapFloatFunction__methods_[] = {
              DECLARE_METHOD(t_RangeMapFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_RangeMapFloatFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_RangeMapFloatFunction, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_RangeMapFloatFunction, description, METH_VARARGS),
              DECLARE_METHOD(t_RangeMapFloatFunction, equals, METH_VARARGS),
              DECLARE_METHOD(t_RangeMapFloatFunction, getValues, METH_VARARGS),
              DECLARE_METHOD(t_RangeMapFloatFunction, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(RangeMapFloatFunction, t_RangeMapFloatFunction, ::org::apache::lucene::queries::function::ValueSource, RangeMapFloatFunction, t_RangeMapFloatFunction_init_, 0, 0, 0, 0, 0);

            void t_RangeMapFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(RangeMapFloatFunction), module, "RangeMapFloatFunction", 0);
            }

            void t_RangeMapFloatFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(RangeMapFloatFunction).tp_dict, "class_", make_descriptor(RangeMapFloatFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(RangeMapFloatFunction).tp_dict, "wrapfn_", make_descriptor(t_RangeMapFloatFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(RangeMapFloatFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_RangeMapFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, RangeMapFloatFunction::initializeClass, 1)))
                return NULL;
              return t_RangeMapFloatFunction::wrap_Object(RangeMapFloatFunction(((t_RangeMapFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_RangeMapFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, RangeMapFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_RangeMapFloatFunction_init_(t_RangeMapFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 5:
                {
                  ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
                  jfloat a1;
                  jfloat a2;
                  jfloat a3;
                  ::java::lang::Float a4((jobject) NULL);
                  RangeMapFloatFunction object((jobject) NULL);

                  if (!parseArgs(args, "kFFFO", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &::java::lang::PY_TYPE(Float), &a0, &a1, &a2, &a3, &a4))
                  {
                    INT_CALL(object = RangeMapFloatFunction(a0, a1, a2, a3, a4));
                    self->object = object;
                    break;
                  }
                }
                {
                  ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
                  jfloat a1;
                  jfloat a2;
                  ::org::apache::lucene::queries::function::ValueSource a3((jobject) NULL);
                  ::org::apache::lucene::queries::function::ValueSource a4((jobject) NULL);
                  RangeMapFloatFunction object((jobject) NULL);

                  if (!parseArgs(args, "kFFkk", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1, &a2, &a3, &a4))
                  {
                    INT_CALL(object = RangeMapFloatFunction(a0, a1, a2, a3, a4));
                    self->object = object;
                    break;
                  }
                }
               default:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_RangeMapFloatFunction_createWeight(t_RangeMapFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(RangeMapFloatFunction), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_RangeMapFloatFunction_description(t_RangeMapFloatFunction *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(RangeMapFloatFunction), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_RangeMapFloatFunction_equals(t_RangeMapFloatFunction *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(RangeMapFloatFunction), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_RangeMapFloatFunction_getValues(t_RangeMapFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(RangeMapFloatFunction), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_RangeMapFloatFunction_hashCode(t_RangeMapFloatFunction *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(RangeMapFloatFunction), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyReader.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/facet/taxonomy/FacetLabel.h"
#include "java/util/Map.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyReader$ChildrenIterator.h"
#include "org/apache/lucene/facet/taxonomy/ParallelTaxonomyArrays.h"
#include "java/io/Closeable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *TaxonomyReader::class$ = NULL;
          jmethodID *TaxonomyReader::mids$ = NULL;
          bool TaxonomyReader::live$ = false;
          jint TaxonomyReader::INVALID_ORDINAL = (jint) 0;
          jint TaxonomyReader::ROOT_ORDINAL = (jint) 0;

          jclass TaxonomyReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/TaxonomyReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_decRef_54c6a166] = env->getMethodID(cls, "decRef", "()V");
              mids$[mid_getChildren_0efef1b4] = env->getMethodID(cls, "getChildren", "(I)Lorg/apache/lucene/facet/taxonomy/TaxonomyReader$ChildrenIterator;");
              mids$[mid_getCommitUserData_db60befd] = env->getMethodID(cls, "getCommitUserData", "()Ljava/util/Map;");
              mids$[mid_getOrdinal_283f83f5] = env->getMethodID(cls, "getOrdinal", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;)I");
              mids$[mid_getOrdinal_ba45d675] = env->getMethodID(cls, "getOrdinal", "(Ljava/lang/String;[Ljava/lang/String;)I");
              mids$[mid_getParallelTaxonomyArrays_306e748e] = env->getMethodID(cls, "getParallelTaxonomyArrays", "()Lorg/apache/lucene/facet/taxonomy/ParallelTaxonomyArrays;");
              mids$[mid_getPath_38cf071d] = env->getMethodID(cls, "getPath", "(I)Lorg/apache/lucene/facet/taxonomy/FacetLabel;");
              mids$[mid_getRefCount_54c6a179] = env->getMethodID(cls, "getRefCount", "()I");
              mids$[mid_getSize_54c6a179] = env->getMethodID(cls, "getSize", "()I");
              mids$[mid_incRef_54c6a166] = env->getMethodID(cls, "incRef", "()V");
              mids$[mid_openIfChanged_aed3bb6f] = env->getStaticMethodID(cls, "openIfChanged", "(Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;)Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;");
              mids$[mid_tryIncRef_54c6a16a] = env->getMethodID(cls, "tryIncRef", "()Z");
              mids$[mid_ensureOpen_54c6a166] = env->getMethodID(cls, "ensureOpen", "()V");
              mids$[mid_doClose_54c6a166] = env->getMethodID(cls, "doClose", "()V");
              mids$[mid_doOpenIfChanged_f67f5c74] = env->getMethodID(cls, "doOpenIfChanged", "()Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              INVALID_ORDINAL = env->getStaticIntField(cls, "INVALID_ORDINAL");
              ROOT_ORDINAL = env->getStaticIntField(cls, "ROOT_ORDINAL");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TaxonomyReader::TaxonomyReader() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void TaxonomyReader::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          void TaxonomyReader::decRef() const
          {
            env->callVoidMethod(this$, mids$[mid_decRef_54c6a166]);
          }

          ::org::apache::lucene::facet::taxonomy::TaxonomyReader$ChildrenIterator TaxonomyReader::getChildren(jint a0) const
          {
            return ::org::apache::lucene::facet::taxonomy::TaxonomyReader$ChildrenIterator(env->callObjectMethod(this$, mids$[mid_getChildren_0efef1b4], a0));
          }

          ::java::util::Map TaxonomyReader::getCommitUserData() const
          {
            return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getCommitUserData_db60befd]));
          }

          jint TaxonomyReader::getOrdinal(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_getOrdinal_283f83f5], a0.this$);
          }

          jint TaxonomyReader::getOrdinal(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) const
          {
            return env->callIntMethod(this$, mids$[mid_getOrdinal_ba45d675], a0.this$, a1.this$);
          }

          ::org::apache::lucene::facet::taxonomy::ParallelTaxonomyArrays TaxonomyReader::getParallelTaxonomyArrays() const
          {
            return ::org::apache::lucene::facet::taxonomy::ParallelTaxonomyArrays(env->callObjectMethod(this$, mids$[mid_getParallelTaxonomyArrays_306e748e]));
          }

          ::org::apache::lucene::facet::taxonomy::FacetLabel TaxonomyReader::getPath(jint a0) const
          {
            return ::org::apache::lucene::facet::taxonomy::FacetLabel(env->callObjectMethod(this$, mids$[mid_getPath_38cf071d], a0));
          }

          jint TaxonomyReader::getRefCount() const
          {
            return env->callIntMethod(this$, mids$[mid_getRefCount_54c6a179]);
          }

          jint TaxonomyReader::getSize() const
          {
            return env->callIntMethod(this$, mids$[mid_getSize_54c6a179]);
          }

          void TaxonomyReader::incRef() const
          {
            env->callVoidMethod(this$, mids$[mid_incRef_54c6a166]);
          }

          TaxonomyReader TaxonomyReader::openIfChanged(const TaxonomyReader & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return TaxonomyReader(env->callStaticObjectMethod(cls, mids$[mid_openIfChanged_aed3bb6f], a0.this$));
          }

          jboolean TaxonomyReader::tryIncRef() const
          {
            return env->callBooleanMethod(this$, mids$[mid_tryIncRef_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_TaxonomyReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TaxonomyReader_init_(t_TaxonomyReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TaxonomyReader_close(t_TaxonomyReader *self);
          static PyObject *t_TaxonomyReader_decRef(t_TaxonomyReader *self);
          static PyObject *t_TaxonomyReader_getChildren(t_TaxonomyReader *self, PyObject *arg);
          static PyObject *t_TaxonomyReader_getCommitUserData(t_TaxonomyReader *self);
          static PyObject *t_TaxonomyReader_getOrdinal(t_TaxonomyReader *self, PyObject *args);
          static PyObject *t_TaxonomyReader_getParallelTaxonomyArrays(t_TaxonomyReader *self);
          static PyObject *t_TaxonomyReader_getPath(t_TaxonomyReader *self, PyObject *arg);
          static PyObject *t_TaxonomyReader_getRefCount(t_TaxonomyReader *self);
          static PyObject *t_TaxonomyReader_getSize(t_TaxonomyReader *self);
          static PyObject *t_TaxonomyReader_incRef(t_TaxonomyReader *self);
          static PyObject *t_TaxonomyReader_openIfChanged(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyReader_tryIncRef(t_TaxonomyReader *self);
          static PyObject *t_TaxonomyReader_get__commitUserData(t_TaxonomyReader *self, void *data);
          static PyObject *t_TaxonomyReader_get__parallelTaxonomyArrays(t_TaxonomyReader *self, void *data);
          static PyObject *t_TaxonomyReader_get__refCount(t_TaxonomyReader *self, void *data);
          static PyObject *t_TaxonomyReader_get__size(t_TaxonomyReader *self, void *data);
          static PyGetSetDef t_TaxonomyReader__fields_[] = {
            DECLARE_GET_FIELD(t_TaxonomyReader, commitUserData),
            DECLARE_GET_FIELD(t_TaxonomyReader, parallelTaxonomyArrays),
            DECLARE_GET_FIELD(t_TaxonomyReader, refCount),
            DECLARE_GET_FIELD(t_TaxonomyReader, size),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TaxonomyReader__methods_[] = {
            DECLARE_METHOD(t_TaxonomyReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyReader, close, METH_NOARGS),
            DECLARE_METHOD(t_TaxonomyReader, decRef, METH_NOARGS),
            DECLARE_METHOD(t_TaxonomyReader, getChildren, METH_O),
            DECLARE_METHOD(t_TaxonomyReader, getCommitUserData, METH_NOARGS),
            DECLARE_METHOD(t_TaxonomyReader, getOrdinal, METH_VARARGS),
            DECLARE_METHOD(t_TaxonomyReader, getParallelTaxonomyArrays, METH_NOARGS),
            DECLARE_METHOD(t_TaxonomyReader, getPath, METH_O),
            DECLARE_METHOD(t_TaxonomyReader, getRefCount, METH_NOARGS),
            DECLARE_METHOD(t_TaxonomyReader, getSize, METH_NOARGS),
            DECLARE_METHOD(t_TaxonomyReader, incRef, METH_NOARGS),
            DECLARE_METHOD(t_TaxonomyReader, openIfChanged, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyReader, tryIncRef, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TaxonomyReader, t_TaxonomyReader, ::java::lang::Object, TaxonomyReader, t_TaxonomyReader_init_, 0, 0, t_TaxonomyReader__fields_, 0, 0);

          void t_TaxonomyReader::install(PyObject *module)
          {
            installType(&PY_TYPE(TaxonomyReader), module, "TaxonomyReader", 0);
            PyDict_SetItemString(PY_TYPE(TaxonomyReader).tp_dict, "ChildrenIterator", make_descriptor(&PY_TYPE(TaxonomyReader$ChildrenIterator)));
          }

          void t_TaxonomyReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TaxonomyReader).tp_dict, "class_", make_descriptor(TaxonomyReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TaxonomyReader).tp_dict, "wrapfn_", make_descriptor(t_TaxonomyReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TaxonomyReader).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(TaxonomyReader::initializeClass);
            PyDict_SetItemString(PY_TYPE(TaxonomyReader).tp_dict, "INVALID_ORDINAL", make_descriptor(TaxonomyReader::INVALID_ORDINAL));
            PyDict_SetItemString(PY_TYPE(TaxonomyReader).tp_dict, "ROOT_ORDINAL", make_descriptor(TaxonomyReader::ROOT_ORDINAL));
          }

          static PyObject *t_TaxonomyReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TaxonomyReader::initializeClass, 1)))
              return NULL;
            return t_TaxonomyReader::wrap_Object(TaxonomyReader(((t_TaxonomyReader *) arg)->object.this$));
          }
          static PyObject *t_TaxonomyReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TaxonomyReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TaxonomyReader_init_(t_TaxonomyReader *self, PyObject *args, PyObject *kwds)
          {
            TaxonomyReader object((jobject) NULL);

            INT_CALL(object = TaxonomyReader());
            self->object = object;

            return 0;
          }

          static PyObject *t_TaxonomyReader_close(t_TaxonomyReader *self)
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          static PyObject *t_TaxonomyReader_decRef(t_TaxonomyReader *self)
          {
            OBJ_CALL(self->object.decRef());
            Py_RETURN_NONE;
          }

          static PyObject *t_TaxonomyReader_getChildren(t_TaxonomyReader *self, PyObject *arg)
          {
            jint a0;
            ::org::apache::lucene::facet::taxonomy::TaxonomyReader$ChildrenIterator result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.getChildren(a0));
              return ::org::apache::lucene::facet::taxonomy::t_TaxonomyReader$ChildrenIterator::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getChildren", arg);
            return NULL;
          }

          static PyObject *t_TaxonomyReader_getCommitUserData(t_TaxonomyReader *self)
          {
            ::java::util::Map result((jobject) NULL);
            OBJ_CALL(result = self->object.getCommitUserData());
            return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
          }

          static PyObject *t_TaxonomyReader_getOrdinal(t_TaxonomyReader *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
                jint result;

                if (!parseArgs(args, "k", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.getOrdinal(a0));
                  return PyInt_FromLong((long) result);
                }
              }
              break;
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                JArray< ::java::lang::String > a1((jobject) NULL);
                jint result;

                if (!parseArgs(args, "s[s", &a0, &a1))
                {
                  OBJ_CALL(result = self->object.getOrdinal(a0, a1));
                  return PyInt_FromLong((long) result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getOrdinal", args);
            return NULL;
          }

          static PyObject *t_TaxonomyReader_getParallelTaxonomyArrays(t_TaxonomyReader *self)
          {
            ::org::apache::lucene::facet::taxonomy::ParallelTaxonomyArrays result((jobject) NULL);
            OBJ_CALL(result = self->object.getParallelTaxonomyArrays());
            return ::org::apache::lucene::facet::taxonomy::t_ParallelTaxonomyArrays::wrap_Object(result);
          }

          static PyObject *t_TaxonomyReader_getPath(t_TaxonomyReader *self, PyObject *arg)
          {
            jint a0;
            ::org::apache::lucene::facet::taxonomy::FacetLabel result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.getPath(a0));
              return ::org::apache::lucene::facet::taxonomy::t_FacetLabel::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getPath", arg);
            return NULL;
          }

          static PyObject *t_TaxonomyReader_getRefCount(t_TaxonomyReader *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getRefCount());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_TaxonomyReader_getSize(t_TaxonomyReader *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getSize());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_TaxonomyReader_incRef(t_TaxonomyReader *self)
          {
            OBJ_CALL(self->object.incRef());
            Py_RETURN_NONE;
          }

          static PyObject *t_TaxonomyReader_openIfChanged(PyTypeObject *type, PyObject *arg)
          {
            TaxonomyReader a0((jobject) NULL);
            TaxonomyReader result((jobject) NULL);

            if (!parseArg(arg, "k", TaxonomyReader::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::facet::taxonomy::TaxonomyReader::openIfChanged(a0));
              return t_TaxonomyReader::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "openIfChanged", arg);
            return NULL;
          }

          static PyObject *t_TaxonomyReader_tryIncRef(t_TaxonomyReader *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.tryIncRef());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_TaxonomyReader_get__commitUserData(t_TaxonomyReader *self, void *data)
          {
            ::java::util::Map value((jobject) NULL);
            OBJ_CALL(value = self->object.getCommitUserData());
            return ::java::util::t_Map::wrap_Object(value);
          }

          static PyObject *t_TaxonomyReader_get__parallelTaxonomyArrays(t_TaxonomyReader *self, void *data)
          {
            ::org::apache::lucene::facet::taxonomy::ParallelTaxonomyArrays value((jobject) NULL);
            OBJ_CALL(value = self->object.getParallelTaxonomyArrays());
            return ::org::apache::lucene::facet::taxonomy::t_ParallelTaxonomyArrays::wrap_Object(value);
          }

          static PyObject *t_TaxonomyReader_get__refCount(t_TaxonomyReader *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getRefCount());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_TaxonomyReader_get__size(t_TaxonomyReader *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getSize());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/Constants.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *Constants::class$ = NULL;
        jmethodID *Constants::mids$ = NULL;
        bool Constants::live$ = false;
        jboolean Constants::FREE_BSD = (jboolean) 0;
        ::java::lang::String *Constants::JAVA_VENDOR = NULL;
        ::java::lang::String *Constants::JAVA_VERSION = NULL;
        jboolean Constants::JRE_IS_64BIT = (jboolean) 0;
        jboolean Constants::JRE_IS_MINIMUM_JAVA6 = (jboolean) 0;
        jboolean Constants::JRE_IS_MINIMUM_JAVA7 = (jboolean) 0;
        jboolean Constants::JRE_IS_MINIMUM_JAVA8 = (jboolean) 0;
        ::java::lang::String *Constants::JVM_NAME = NULL;
        ::java::lang::String *Constants::JVM_VENDOR = NULL;
        ::java::lang::String *Constants::JVM_VERSION = NULL;
        jboolean Constants::LINUX = (jboolean) 0;
        ::java::lang::String *Constants::LUCENE_MAIN_VERSION = NULL;
        ::java::lang::String *Constants::LUCENE_VERSION = NULL;
        jboolean Constants::MAC_OS_X = (jboolean) 0;
        ::java::lang::String *Constants::OS_ARCH = NULL;
        ::java::lang::String *Constants::OS_NAME = NULL;
        ::java::lang::String *Constants::OS_VERSION = NULL;
        jboolean Constants::SUN_OS = (jboolean) 0;
        jboolean Constants::WINDOWS = (jboolean) 0;

        jclass Constants::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/Constants");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            FREE_BSD = env->getStaticBooleanField(cls, "FREE_BSD");
            JAVA_VENDOR = new ::java::lang::String(env->getStaticObjectField(cls, "JAVA_VENDOR", "Ljava/lang/String;"));
            JAVA_VERSION = new ::java::lang::String(env->getStaticObjectField(cls, "JAVA_VERSION", "Ljava/lang/String;"));
            JRE_IS_64BIT = env->getStaticBooleanField(cls, "JRE_IS_64BIT");
            JRE_IS_MINIMUM_JAVA6 = env->getStaticBooleanField(cls, "JRE_IS_MINIMUM_JAVA6");
            JRE_IS_MINIMUM_JAVA7 = env->getStaticBooleanField(cls, "JRE_IS_MINIMUM_JAVA7");
            JRE_IS_MINIMUM_JAVA8 = env->getStaticBooleanField(cls, "JRE_IS_MINIMUM_JAVA8");
            JVM_NAME = new ::java::lang::String(env->getStaticObjectField(cls, "JVM_NAME", "Ljava/lang/String;"));
            JVM_VENDOR = new ::java::lang::String(env->getStaticObjectField(cls, "JVM_VENDOR", "Ljava/lang/String;"));
            JVM_VERSION = new ::java::lang::String(env->getStaticObjectField(cls, "JVM_VERSION", "Ljava/lang/String;"));
            LINUX = env->getStaticBooleanField(cls, "LINUX");
            LUCENE_MAIN_VERSION = new ::java::lang::String(env->getStaticObjectField(cls, "LUCENE_MAIN_VERSION", "Ljava/lang/String;"));
            LUCENE_VERSION = new ::java::lang::String(env->getStaticObjectField(cls, "LUCENE_VERSION", "Ljava/lang/String;"));
            MAC_OS_X = env->getStaticBooleanField(cls, "MAC_OS_X");
            OS_ARCH = new ::java::lang::String(env->getStaticObjectField(cls, "OS_ARCH", "Ljava/lang/String;"));
            OS_NAME = new ::java::lang::String(env->getStaticObjectField(cls, "OS_NAME", "Ljava/lang/String;"));
            OS_VERSION = new ::java::lang::String(env->getStaticObjectField(cls, "OS_VERSION", "Ljava/lang/String;"));
            SUN_OS = env->getStaticBooleanField(cls, "SUN_OS");
            WINDOWS = env->getStaticBooleanField(cls, "WINDOWS");
            live$ = true;
          }
          return (jclass) class$->this$;
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_Constants_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Constants_instance_(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_Constants__methods_[] = {
          DECLARE_METHOD(t_Constants, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Constants, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Constants, t_Constants, ::java::lang::Object, Constants, abstract_init, 0, 0, 0, 0, 0);

        void t_Constants::install(PyObject *module)
        {
          installType(&PY_TYPE(Constants), module, "Constants", 0);
        }

        void t_Constants::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "class_", make_descriptor(Constants::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "wrapfn_", make_descriptor(t_Constants::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(Constants::initializeClass);
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "FREE_BSD", make_descriptor(Constants::FREE_BSD));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "JAVA_VENDOR", make_descriptor(j2p(*Constants::JAVA_VENDOR)));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "JAVA_VERSION", make_descriptor(j2p(*Constants::JAVA_VERSION)));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "JRE_IS_64BIT", make_descriptor(Constants::JRE_IS_64BIT));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "JRE_IS_MINIMUM_JAVA6", make_descriptor(Constants::JRE_IS_MINIMUM_JAVA6));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "JRE_IS_MINIMUM_JAVA7", make_descriptor(Constants::JRE_IS_MINIMUM_JAVA7));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "JRE_IS_MINIMUM_JAVA8", make_descriptor(Constants::JRE_IS_MINIMUM_JAVA8));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "JVM_NAME", make_descriptor(j2p(*Constants::JVM_NAME)));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "JVM_VENDOR", make_descriptor(j2p(*Constants::JVM_VENDOR)));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "JVM_VERSION", make_descriptor(j2p(*Constants::JVM_VERSION)));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "LINUX", make_descriptor(Constants::LINUX));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "LUCENE_MAIN_VERSION", make_descriptor(j2p(*Constants::LUCENE_MAIN_VERSION)));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "LUCENE_VERSION", make_descriptor(j2p(*Constants::LUCENE_VERSION)));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "MAC_OS_X", make_descriptor(Constants::MAC_OS_X));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "OS_ARCH", make_descriptor(j2p(*Constants::OS_ARCH)));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "OS_NAME", make_descriptor(j2p(*Constants::OS_NAME)));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "OS_VERSION", make_descriptor(j2p(*Constants::OS_VERSION)));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "SUN_OS", make_descriptor(Constants::SUN_OS));
          PyDict_SetItemString(PY_TYPE(Constants).tp_dict, "WINDOWS", make_descriptor(Constants::WINDOWS));
        }

        static PyObject *t_Constants_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Constants::initializeClass, 1)))
            return NULL;
          return t_Constants::wrap_Object(Constants(((t_Constants *) arg)->object.this$));
        }
        static PyObject *t_Constants_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Constants::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$expression_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$expression_return::class$ = NULL;
          jmethodID *JavascriptParser$expression_return::mids$ = NULL;
          bool JavascriptParser$expression_return::live$ = false;

          jclass JavascriptParser$expression_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$expression_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$expression_return::JavascriptParser$expression_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$expression_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$expression_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$expression_return_init_(t_JavascriptParser$expression_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$expression_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$expression_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$expression_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$expression_return, t_JavascriptParser$expression_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$expression_return, t_JavascriptParser$expression_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$expression_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$expression_return), module, "JavascriptParser$expression_return", 0);
          }

          void t_JavascriptParser$expression_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$expression_return).tp_dict, "class_", make_descriptor(JavascriptParser$expression_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$expression_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$expression_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$expression_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$expression_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$expression_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$expression_return::wrap_Object(JavascriptParser$expression_return(((t_JavascriptParser$expression_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$expression_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$expression_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$expression_return_init_(t_JavascriptParser$expression_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$expression_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$expression_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FieldTermStack.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/vectorhighlight/FieldTermStack$TermInfo.h"
#include "org/apache/lucene/search/vectorhighlight/FieldQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FieldTermStack::class$ = NULL;
          jmethodID *FieldTermStack::mids$ = NULL;
          bool FieldTermStack::live$ = false;

          jclass FieldTermStack::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FieldTermStack");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e3cbed11] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/search/vectorhighlight/FieldQuery;)V");
              mids$[mid_getFieldName_14c7b5c5] = env->getMethodID(cls, "getFieldName", "()Ljava/lang/String;");
              mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
              mids$[mid_pop_9d9e3d4a] = env->getMethodID(cls, "pop", "()Lorg/apache/lucene/search/vectorhighlight/FieldTermStack$TermInfo;");
              mids$[mid_push_a7ece36b] = env->getMethodID(cls, "push", "(Lorg/apache/lucene/search/vectorhighlight/FieldTermStack$TermInfo;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FieldTermStack::FieldTermStack(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::search::vectorhighlight::FieldQuery & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e3cbed11, a0.this$, a1, a2.this$, a3.this$)) {}

          ::java::lang::String FieldTermStack::getFieldName() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getFieldName_14c7b5c5]));
          }

          jboolean FieldTermStack::isEmpty() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isEmpty_54c6a16a]);
          }

          ::org::apache::lucene::search::vectorhighlight::FieldTermStack$TermInfo FieldTermStack::pop() const
          {
            return ::org::apache::lucene::search::vectorhighlight::FieldTermStack$TermInfo(env->callObjectMethod(this$, mids$[mid_pop_9d9e3d4a]));
          }

          void FieldTermStack::push(const ::org::apache::lucene::search::vectorhighlight::FieldTermStack$TermInfo & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_push_a7ece36b], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FieldTermStack_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldTermStack_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FieldTermStack_init_(t_FieldTermStack *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FieldTermStack_getFieldName(t_FieldTermStack *self);
          static PyObject *t_FieldTermStack_isEmpty(t_FieldTermStack *self);
          static PyObject *t_FieldTermStack_pop(t_FieldTermStack *self);
          static PyObject *t_FieldTermStack_push(t_FieldTermStack *self, PyObject *arg);
          static PyObject *t_FieldTermStack_get__empty(t_FieldTermStack *self, void *data);
          static PyObject *t_FieldTermStack_get__fieldName(t_FieldTermStack *self, void *data);
          static PyGetSetDef t_FieldTermStack__fields_[] = {
            DECLARE_GET_FIELD(t_FieldTermStack, empty),
            DECLARE_GET_FIELD(t_FieldTermStack, fieldName),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldTermStack__methods_[] = {
            DECLARE_METHOD(t_FieldTermStack, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldTermStack, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldTermStack, getFieldName, METH_NOARGS),
            DECLARE_METHOD(t_FieldTermStack, isEmpty, METH_NOARGS),
            DECLARE_METHOD(t_FieldTermStack, pop, METH_NOARGS),
            DECLARE_METHOD(t_FieldTermStack, push, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FieldTermStack, t_FieldTermStack, ::java::lang::Object, FieldTermStack, t_FieldTermStack_init_, 0, 0, t_FieldTermStack__fields_, 0, 0);

          void t_FieldTermStack::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldTermStack), module, "FieldTermStack", 0);
            PyDict_SetItemString(PY_TYPE(FieldTermStack).tp_dict, "TermInfo", make_descriptor(&PY_TYPE(FieldTermStack$TermInfo)));
          }

          void t_FieldTermStack::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FieldTermStack).tp_dict, "class_", make_descriptor(FieldTermStack::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FieldTermStack).tp_dict, "wrapfn_", make_descriptor(t_FieldTermStack::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FieldTermStack).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldTermStack_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldTermStack::initializeClass, 1)))
              return NULL;
            return t_FieldTermStack::wrap_Object(FieldTermStack(((t_FieldTermStack *) arg)->object.this$));
          }
          static PyObject *t_FieldTermStack_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldTermStack::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FieldTermStack_init_(t_FieldTermStack *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            jint a1;
            ::java::lang::String a2((jobject) NULL);
            ::org::apache::lucene::search::vectorhighlight::FieldQuery a3((jobject) NULL);
            FieldTermStack object((jobject) NULL);

            if (!parseArgs(args, "kIsk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldQuery::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = FieldTermStack(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FieldTermStack_getFieldName(t_FieldTermStack *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getFieldName());
            return j2p(result);
          }

          static PyObject *t_FieldTermStack_isEmpty(t_FieldTermStack *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isEmpty());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_FieldTermStack_pop(t_FieldTermStack *self)
          {
            ::org::apache::lucene::search::vectorhighlight::FieldTermStack$TermInfo result((jobject) NULL);
            OBJ_CALL(result = self->object.pop());
            return ::org::apache::lucene::search::vectorhighlight::t_FieldTermStack$TermInfo::wrap_Object(result);
          }

          static PyObject *t_FieldTermStack_push(t_FieldTermStack *self, PyObject *arg)
          {
            ::org::apache::lucene::search::vectorhighlight::FieldTermStack$TermInfo a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::vectorhighlight::FieldTermStack$TermInfo::initializeClass, &a0))
            {
              OBJ_CALL(self->object.push(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "push", arg);
            return NULL;
          }

          static PyObject *t_FieldTermStack_get__empty(t_FieldTermStack *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isEmpty());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_FieldTermStack_get__fieldName(t_FieldTermStack *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getFieldName());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/ReverseOrdFieldSource.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *ReverseOrdFieldSource::class$ = NULL;
            jmethodID *ReverseOrdFieldSource::mids$ = NULL;
            jfieldID *ReverseOrdFieldSource::fids$ = NULL;
            bool ReverseOrdFieldSource::live$ = false;

            jclass ReverseOrdFieldSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/ReverseOrdFieldSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                fids$ = new jfieldID[max_fid];
                fids$[fid_field] = env->getFieldID(cls, "field", "Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ReverseOrdFieldSource::ReverseOrdFieldSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            ::java::lang::String ReverseOrdFieldSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean ReverseOrdFieldSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues ReverseOrdFieldSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint ReverseOrdFieldSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }

            ::java::lang::String ReverseOrdFieldSource::_get_field() const
            {
              return ::java::lang::String(env->getObjectField(this$, fids$[fid_field]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_ReverseOrdFieldSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ReverseOrdFieldSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ReverseOrdFieldSource_init_(t_ReverseOrdFieldSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ReverseOrdFieldSource_description(t_ReverseOrdFieldSource *self, PyObject *args);
            static PyObject *t_ReverseOrdFieldSource_equals(t_ReverseOrdFieldSource *self, PyObject *args);
            static PyObject *t_ReverseOrdFieldSource_getValues(t_ReverseOrdFieldSource *self, PyObject *args);
            static PyObject *t_ReverseOrdFieldSource_hashCode(t_ReverseOrdFieldSource *self, PyObject *args);
            static PyObject *t_ReverseOrdFieldSource_get__field(t_ReverseOrdFieldSource *self, void *data);

            static PyGetSetDef t_ReverseOrdFieldSource__fields_[] = {
              DECLARE_GET_FIELD(t_ReverseOrdFieldSource, field),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_ReverseOrdFieldSource__methods_[] = {
              DECLARE_METHOD(t_ReverseOrdFieldSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ReverseOrdFieldSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ReverseOrdFieldSource, description, METH_VARARGS),
              DECLARE_METHOD(t_ReverseOrdFieldSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_ReverseOrdFieldSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_ReverseOrdFieldSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(ReverseOrdFieldSource, t_ReverseOrdFieldSource, ::org::apache::lucene::queries::function::ValueSource, ReverseOrdFieldSource, t_ReverseOrdFieldSource_init_, 0, 0, t_ReverseOrdFieldSource__fields_, 0, 0);

            void t_ReverseOrdFieldSource::install(PyObject *module)
            {
              installType(&PY_TYPE(ReverseOrdFieldSource), module, "ReverseOrdFieldSource", 0);
            }

            void t_ReverseOrdFieldSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(ReverseOrdFieldSource).tp_dict, "class_", make_descriptor(ReverseOrdFieldSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(ReverseOrdFieldSource).tp_dict, "wrapfn_", make_descriptor(t_ReverseOrdFieldSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(ReverseOrdFieldSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ReverseOrdFieldSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ReverseOrdFieldSource::initializeClass, 1)))
                return NULL;
              return t_ReverseOrdFieldSource::wrap_Object(ReverseOrdFieldSource(((t_ReverseOrdFieldSource *) arg)->object.this$));
            }
            static PyObject *t_ReverseOrdFieldSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ReverseOrdFieldSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ReverseOrdFieldSource_init_(t_ReverseOrdFieldSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ReverseOrdFieldSource object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = ReverseOrdFieldSource(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_ReverseOrdFieldSource_description(t_ReverseOrdFieldSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(ReverseOrdFieldSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_ReverseOrdFieldSource_equals(t_ReverseOrdFieldSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(ReverseOrdFieldSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_ReverseOrdFieldSource_getValues(t_ReverseOrdFieldSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(ReverseOrdFieldSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_ReverseOrdFieldSource_hashCode(t_ReverseOrdFieldSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(ReverseOrdFieldSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_ReverseOrdFieldSource_get__field(t_ReverseOrdFieldSource *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object._get_field());
              return j2p(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiDocValues.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiDocValues::class$ = NULL;
        jmethodID *MultiDocValues::mids$ = NULL;
        bool MultiDocValues::live$ = false;

        jclass MultiDocValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiDocValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getBinaryValues_03a34e9d] = env->getStaticMethodID(cls, "getBinaryValues", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)Lorg/apache/lucene/index/BinaryDocValues;");
            mids$[mid_getDocsWithField_cb5a3ee0] = env->getStaticMethodID(cls, "getDocsWithField", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)Lorg/apache/lucene/util/Bits;");
            mids$[mid_getNormValues_e37a26c0] = env->getStaticMethodID(cls, "getNormValues", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getNumericValues_e37a26c0] = env->getStaticMethodID(cls, "getNumericValues", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getSortedNumericValues_21f7b92b] = env->getStaticMethodID(cls, "getSortedNumericValues", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)Lorg/apache/lucene/index/SortedNumericDocValues;");
            mids$[mid_getSortedSetValues_0b5c63b6] = env->getStaticMethodID(cls, "getSortedSetValues", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)Lorg/apache/lucene/index/SortedSetDocValues;");
            mids$[mid_getSortedValues_af349b19] = env->getStaticMethodID(cls, "getSortedValues", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)Lorg/apache/lucene/index/SortedDocValues;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::BinaryDocValues MultiDocValues::getBinaryValues(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::BinaryDocValues(env->callStaticObjectMethod(cls, mids$[mid_getBinaryValues_03a34e9d], a0.this$, a1.this$));
        }

        ::org::apache::lucene::util::Bits MultiDocValues::getDocsWithField(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::util::Bits(env->callStaticObjectMethod(cls, mids$[mid_getDocsWithField_cb5a3ee0], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::NumericDocValues MultiDocValues::getNormValues(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::NumericDocValues(env->callStaticObjectMethod(cls, mids$[mid_getNormValues_e37a26c0], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::NumericDocValues MultiDocValues::getNumericValues(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::NumericDocValues(env->callStaticObjectMethod(cls, mids$[mid_getNumericValues_e37a26c0], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::SortedNumericDocValues MultiDocValues::getSortedNumericValues(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedNumericDocValues(env->callStaticObjectMethod(cls, mids$[mid_getSortedNumericValues_21f7b92b], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::SortedSetDocValues MultiDocValues::getSortedSetValues(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedSetDocValues(env->callStaticObjectMethod(cls, mids$[mid_getSortedSetValues_0b5c63b6], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::SortedDocValues MultiDocValues::getSortedValues(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedDocValues(env->callStaticObjectMethod(cls, mids$[mid_getSortedValues_af349b19], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/index/MultiDocValues$MultiSortedSetDocValues.h"
#include "org/apache/lucene/index/MultiDocValues$MultiSortedDocValues.h"
#include "org/apache/lucene/index/MultiDocValues$OrdinalMap.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiDocValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiDocValues_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiDocValues_getBinaryValues(PyTypeObject *type, PyObject *args);
        static PyObject *t_MultiDocValues_getDocsWithField(PyTypeObject *type, PyObject *args);
        static PyObject *t_MultiDocValues_getNormValues(PyTypeObject *type, PyObject *args);
        static PyObject *t_MultiDocValues_getNumericValues(PyTypeObject *type, PyObject *args);
        static PyObject *t_MultiDocValues_getSortedNumericValues(PyTypeObject *type, PyObject *args);
        static PyObject *t_MultiDocValues_getSortedSetValues(PyTypeObject *type, PyObject *args);
        static PyObject *t_MultiDocValues_getSortedValues(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_MultiDocValues__methods_[] = {
          DECLARE_METHOD(t_MultiDocValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues, getBinaryValues, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues, getDocsWithField, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues, getNormValues, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues, getNumericValues, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues, getSortedNumericValues, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues, getSortedSetValues, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues, getSortedValues, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiDocValues, t_MultiDocValues, ::java::lang::Object, MultiDocValues, abstract_init, 0, 0, 0, 0, 0);

        void t_MultiDocValues::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiDocValues), module, "MultiDocValues", 0);
          PyDict_SetItemString(PY_TYPE(MultiDocValues).tp_dict, "MultiSortedSetDocValues", make_descriptor(&PY_TYPE(MultiDocValues$MultiSortedSetDocValues)));
          PyDict_SetItemString(PY_TYPE(MultiDocValues).tp_dict, "MultiSortedDocValues", make_descriptor(&PY_TYPE(MultiDocValues$MultiSortedDocValues)));
          PyDict_SetItemString(PY_TYPE(MultiDocValues).tp_dict, "OrdinalMap", make_descriptor(&PY_TYPE(MultiDocValues$OrdinalMap)));
        }

        void t_MultiDocValues::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiDocValues).tp_dict, "class_", make_descriptor(MultiDocValues::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiDocValues).tp_dict, "wrapfn_", make_descriptor(t_MultiDocValues::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiDocValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiDocValues::initializeClass, 1)))
            return NULL;
          return t_MultiDocValues::wrap_Object(MultiDocValues(((t_MultiDocValues *) arg)->object.this$));
        }
        static PyObject *t_MultiDocValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiDocValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiDocValues_getBinaryValues(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::BinaryDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MultiDocValues::getBinaryValues(a0, a1));
            return ::org::apache::lucene::index::t_BinaryDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getBinaryValues", args);
          return NULL;
        }

        static PyObject *t_MultiDocValues_getDocsWithField(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MultiDocValues::getDocsWithField(a0, a1));
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getDocsWithField", args);
          return NULL;
        }

        static PyObject *t_MultiDocValues_getNormValues(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MultiDocValues::getNormValues(a0, a1));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getNormValues", args);
          return NULL;
        }

        static PyObject *t_MultiDocValues_getNumericValues(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MultiDocValues::getNumericValues(a0, a1));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getNumericValues", args);
          return NULL;
        }

        static PyObject *t_MultiDocValues_getSortedNumericValues(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::SortedNumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MultiDocValues::getSortedNumericValues(a0, a1));
            return ::org::apache::lucene::index::t_SortedNumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getSortedNumericValues", args);
          return NULL;
        }

        static PyObject *t_MultiDocValues_getSortedSetValues(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MultiDocValues::getSortedSetValues(a0, a1));
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getSortedSetValues", args);
          return NULL;
        }

        static PyObject *t_MultiDocValues_getSortedValues(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MultiDocValues::getSortedValues(a0, a1));
            return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getSortedValues", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanMultiTermQueryWrapper.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/index/TermContext.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/spans/SpanMultiTermQueryWrapper$SpanRewriteMethod.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanMultiTermQueryWrapper::class$ = NULL;
          jmethodID *SpanMultiTermQueryWrapper::mids$ = NULL;
          bool SpanMultiTermQueryWrapper::live$ = false;
          ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod *SpanMultiTermQueryWrapper::SCORING_SPAN_QUERY_REWRITE = NULL;

          jclass SpanMultiTermQueryWrapper::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanMultiTermQueryWrapper");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_3bf60bd1] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/MultiTermQuery;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getRewriteMethod_5bc9fda5] = env->getMethodID(cls, "getRewriteMethod", "()Lorg/apache/lucene/search/spans/SpanMultiTermQueryWrapper$SpanRewriteMethod;");
              mids$[mid_getSpans_f003cb44] = env->getMethodID(cls, "getSpans", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;Ljava/util/Map;)Lorg/apache/lucene/search/spans/Spans;");
              mids$[mid_getWrappedQuery_97e3851a] = env->getMethodID(cls, "getWrappedQuery", "()Lorg/apache/lucene/search/Query;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_setRewriteMethod_89abf2c4] = env->getMethodID(cls, "setRewriteMethod", "(Lorg/apache/lucene/search/spans/SpanMultiTermQueryWrapper$SpanRewriteMethod;)V");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              SCORING_SPAN_QUERY_REWRITE = new ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod(env->getStaticObjectField(cls, "SCORING_SPAN_QUERY_REWRITE", "Lorg/apache/lucene/search/spans/SpanMultiTermQueryWrapper$SpanRewriteMethod;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanMultiTermQueryWrapper::SpanMultiTermQueryWrapper(const ::org::apache::lucene::search::MultiTermQuery & a0) : ::org::apache::lucene::search::spans::SpanQuery(env->newObject(initializeClass, &mids$, mid_init$_3bf60bd1, a0.this$)) {}

          jboolean SpanMultiTermQueryWrapper::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          ::java::lang::String SpanMultiTermQueryWrapper::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
          }

          ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod SpanMultiTermQueryWrapper::getRewriteMethod() const
          {
            return ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod(env->callObjectMethod(this$, mids$[mid_getRewriteMethod_5bc9fda5]));
          }

          ::org::apache::lucene::search::spans::Spans SpanMultiTermQueryWrapper::getSpans(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::util::Map & a2) const
          {
            return ::org::apache::lucene::search::spans::Spans(env->callObjectMethod(this$, mids$[mid_getSpans_f003cb44], a0.this$, a1.this$, a2.this$));
          }

          ::org::apache::lucene::search::Query SpanMultiTermQueryWrapper::getWrappedQuery() const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getWrappedQuery_97e3851a]));
          }

          jint SpanMultiTermQueryWrapper::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::org::apache::lucene::search::Query SpanMultiTermQueryWrapper::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
          }

          void SpanMultiTermQueryWrapper::setRewriteMethod(const ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setRewriteMethod_89abf2c4], a0.this$);
          }

          ::java::lang::String SpanMultiTermQueryWrapper::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/spans/SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanMultiTermQueryWrapper_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanMultiTermQueryWrapper_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanMultiTermQueryWrapper_of_(t_SpanMultiTermQueryWrapper *self, PyObject *args);
          static int t_SpanMultiTermQueryWrapper_init_(t_SpanMultiTermQueryWrapper *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanMultiTermQueryWrapper_equals(t_SpanMultiTermQueryWrapper *self, PyObject *args);
          static PyObject *t_SpanMultiTermQueryWrapper_getField(t_SpanMultiTermQueryWrapper *self, PyObject *args);
          static PyObject *t_SpanMultiTermQueryWrapper_getRewriteMethod(t_SpanMultiTermQueryWrapper *self);
          static PyObject *t_SpanMultiTermQueryWrapper_getSpans(t_SpanMultiTermQueryWrapper *self, PyObject *args);
          static PyObject *t_SpanMultiTermQueryWrapper_getWrappedQuery(t_SpanMultiTermQueryWrapper *self);
          static PyObject *t_SpanMultiTermQueryWrapper_hashCode(t_SpanMultiTermQueryWrapper *self, PyObject *args);
          static PyObject *t_SpanMultiTermQueryWrapper_rewrite(t_SpanMultiTermQueryWrapper *self, PyObject *args);
          static PyObject *t_SpanMultiTermQueryWrapper_setRewriteMethod(t_SpanMultiTermQueryWrapper *self, PyObject *arg);
          static PyObject *t_SpanMultiTermQueryWrapper_toString(t_SpanMultiTermQueryWrapper *self, PyObject *args);
          static PyObject *t_SpanMultiTermQueryWrapper_get__field(t_SpanMultiTermQueryWrapper *self, void *data);
          static PyObject *t_SpanMultiTermQueryWrapper_get__rewriteMethod(t_SpanMultiTermQueryWrapper *self, void *data);
          static int t_SpanMultiTermQueryWrapper_set__rewriteMethod(t_SpanMultiTermQueryWrapper *self, PyObject *arg, void *data);
          static PyObject *t_SpanMultiTermQueryWrapper_get__wrappedQuery(t_SpanMultiTermQueryWrapper *self, void *data);
          static PyObject *t_SpanMultiTermQueryWrapper_get__parameters_(t_SpanMultiTermQueryWrapper *self, void *data);
          static PyGetSetDef t_SpanMultiTermQueryWrapper__fields_[] = {
            DECLARE_GET_FIELD(t_SpanMultiTermQueryWrapper, field),
            DECLARE_GETSET_FIELD(t_SpanMultiTermQueryWrapper, rewriteMethod),
            DECLARE_GET_FIELD(t_SpanMultiTermQueryWrapper, wrappedQuery),
            DECLARE_GET_FIELD(t_SpanMultiTermQueryWrapper, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanMultiTermQueryWrapper__methods_[] = {
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, of_, METH_VARARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, equals, METH_VARARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, getField, METH_VARARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, getRewriteMethod, METH_NOARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, getSpans, METH_VARARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, getWrappedQuery, METH_NOARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, setRewriteMethod, METH_O),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanMultiTermQueryWrapper, t_SpanMultiTermQueryWrapper, ::org::apache::lucene::search::spans::SpanQuery, SpanMultiTermQueryWrapper, t_SpanMultiTermQueryWrapper_init_, 0, 0, t_SpanMultiTermQueryWrapper__fields_, 0, 0);
          PyObject *t_SpanMultiTermQueryWrapper::wrap_Object(const SpanMultiTermQueryWrapper& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SpanMultiTermQueryWrapper::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SpanMultiTermQueryWrapper *self = (t_SpanMultiTermQueryWrapper *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_SpanMultiTermQueryWrapper::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SpanMultiTermQueryWrapper::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SpanMultiTermQueryWrapper *self = (t_SpanMultiTermQueryWrapper *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_SpanMultiTermQueryWrapper::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanMultiTermQueryWrapper), module, "SpanMultiTermQueryWrapper", 0);
            PyDict_SetItemString(PY_TYPE(SpanMultiTermQueryWrapper).tp_dict, "TopTermsSpanBooleanQueryRewrite", make_descriptor(&PY_TYPE(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite)));
            PyDict_SetItemString(PY_TYPE(SpanMultiTermQueryWrapper).tp_dict, "SpanRewriteMethod", make_descriptor(&PY_TYPE(SpanMultiTermQueryWrapper$SpanRewriteMethod)));
          }

          void t_SpanMultiTermQueryWrapper::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanMultiTermQueryWrapper).tp_dict, "class_", make_descriptor(SpanMultiTermQueryWrapper::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanMultiTermQueryWrapper).tp_dict, "wrapfn_", make_descriptor(t_SpanMultiTermQueryWrapper::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanMultiTermQueryWrapper).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SpanMultiTermQueryWrapper::initializeClass);
            PyDict_SetItemString(PY_TYPE(SpanMultiTermQueryWrapper).tp_dict, "SCORING_SPAN_QUERY_REWRITE", make_descriptor(::org::apache::lucene::search::spans::t_SpanMultiTermQueryWrapper$SpanRewriteMethod::wrap_Object(*SpanMultiTermQueryWrapper::SCORING_SPAN_QUERY_REWRITE)));
          }

          static PyObject *t_SpanMultiTermQueryWrapper_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanMultiTermQueryWrapper::initializeClass, 1)))
              return NULL;
            return t_SpanMultiTermQueryWrapper::wrap_Object(SpanMultiTermQueryWrapper(((t_SpanMultiTermQueryWrapper *) arg)->object.this$));
          }
          static PyObject *t_SpanMultiTermQueryWrapper_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanMultiTermQueryWrapper::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SpanMultiTermQueryWrapper_of_(t_SpanMultiTermQueryWrapper *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_SpanMultiTermQueryWrapper_init_(t_SpanMultiTermQueryWrapper *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::MultiTermQuery a0((jobject) NULL);
            SpanMultiTermQueryWrapper object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::MultiTermQuery::initializeClass, &a0))
            {
              INT_CALL(object = SpanMultiTermQueryWrapper(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanMultiTermQueryWrapper_equals(t_SpanMultiTermQueryWrapper *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SpanMultiTermQueryWrapper), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SpanMultiTermQueryWrapper_getField(t_SpanMultiTermQueryWrapper *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getField());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanMultiTermQueryWrapper), (PyObject *) self, "getField", args, 2);
          }

          static PyObject *t_SpanMultiTermQueryWrapper_getRewriteMethod(t_SpanMultiTermQueryWrapper *self)
          {
            ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod result((jobject) NULL);
            OBJ_CALL(result = self->object.getRewriteMethod());
            return ::org::apache::lucene::search::spans::t_SpanMultiTermQueryWrapper$SpanRewriteMethod::wrap_Object(result);
          }

          static PyObject *t_SpanMultiTermQueryWrapper_getSpans(t_SpanMultiTermQueryWrapper *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::util::Bits a1((jobject) NULL);
            ::java::util::Map a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::search::spans::Spans result((jobject) NULL);

            if (!parseArgs(args, "kkK", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(result = self->object.getSpans(a0, a1, a2));
              return ::org::apache::lucene::search::spans::t_Spans::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanMultiTermQueryWrapper), (PyObject *) self, "getSpans", args, 2);
          }

          static PyObject *t_SpanMultiTermQueryWrapper_getWrappedQuery(t_SpanMultiTermQueryWrapper *self)
          {
            ::org::apache::lucene::search::Query result((jobject) NULL);
            OBJ_CALL(result = self->object.getWrappedQuery());
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          static PyObject *t_SpanMultiTermQueryWrapper_hashCode(t_SpanMultiTermQueryWrapper *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SpanMultiTermQueryWrapper), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SpanMultiTermQueryWrapper_rewrite(t_SpanMultiTermQueryWrapper *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanMultiTermQueryWrapper), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_SpanMultiTermQueryWrapper_setRewriteMethod(t_SpanMultiTermQueryWrapper *self, PyObject *arg)
          {
            ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod::initializeClass, &a0, &p0, ::org::apache::lucene::search::spans::t_SpanMultiTermQueryWrapper$SpanRewriteMethod::parameters_))
            {
              OBJ_CALL(self->object.setRewriteMethod(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setRewriteMethod", arg);
            return NULL;
          }

          static PyObject *t_SpanMultiTermQueryWrapper_toString(t_SpanMultiTermQueryWrapper *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanMultiTermQueryWrapper), (PyObject *) self, "toString", args, 2);
          }
          static PyObject *t_SpanMultiTermQueryWrapper_get__parameters_(t_SpanMultiTermQueryWrapper *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_SpanMultiTermQueryWrapper_get__field(t_SpanMultiTermQueryWrapper *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }

          static PyObject *t_SpanMultiTermQueryWrapper_get__rewriteMethod(t_SpanMultiTermQueryWrapper *self, void *data)
          {
            ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod value((jobject) NULL);
            OBJ_CALL(value = self->object.getRewriteMethod());
            return ::org::apache::lucene::search::spans::t_SpanMultiTermQueryWrapper$SpanRewriteMethod::wrap_Object(value);
          }
          static int t_SpanMultiTermQueryWrapper_set__rewriteMethod(t_SpanMultiTermQueryWrapper *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod::initializeClass, &value))
              {
                INT_CALL(self->object.setRewriteMethod(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "rewriteMethod", arg);
            return -1;
          }

          static PyObject *t_SpanMultiTermQueryWrapper_get__wrappedQuery(t_SpanMultiTermQueryWrapper *self, void *data)
          {
            ::org::apache::lucene::search::Query value((jobject) NULL);
            OBJ_CALL(value = self->object.getWrappedQuery());
            return ::org::apache::lucene::search::t_Query::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/BytesRefHash$BytesStartArray.h"
#include "org/apache/lucene/util/Counter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *BytesRefHash$BytesStartArray::class$ = NULL;
        jmethodID *BytesRefHash$BytesStartArray::mids$ = NULL;
        bool BytesRefHash$BytesStartArray::live$ = false;

        jclass BytesRefHash$BytesStartArray::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/BytesRefHash$BytesStartArray");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_bytesUsed_781dd30a] = env->getMethodID(cls, "bytesUsed", "()Lorg/apache/lucene/util/Counter;");
            mids$[mid_clear_dab10e75] = env->getMethodID(cls, "clear", "()[I");
            mids$[mid_grow_dab10e75] = env->getMethodID(cls, "grow", "()[I");
            mids$[mid_init_dab10e75] = env->getMethodID(cls, "init", "()[I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BytesRefHash$BytesStartArray::BytesRefHash$BytesStartArray() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::util::Counter BytesRefHash$BytesStartArray::bytesUsed() const
        {
          return ::org::apache::lucene::util::Counter(env->callObjectMethod(this$, mids$[mid_bytesUsed_781dd30a]));
        }

        JArray< jint > BytesRefHash$BytesStartArray::clear() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_clear_dab10e75]));
        }

        JArray< jint > BytesRefHash$BytesStartArray::grow() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_grow_dab10e75]));
        }

        JArray< jint > BytesRefHash$BytesStartArray::init() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_init_dab10e75]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_BytesRefHash$BytesStartArray_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BytesRefHash$BytesStartArray_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BytesRefHash$BytesStartArray_init_(t_BytesRefHash$BytesStartArray *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BytesRefHash$BytesStartArray_bytesUsed(t_BytesRefHash$BytesStartArray *self);
        static PyObject *t_BytesRefHash$BytesStartArray_clear(t_BytesRefHash$BytesStartArray *self);
        static PyObject *t_BytesRefHash$BytesStartArray_grow(t_BytesRefHash$BytesStartArray *self);
        static PyObject *t_BytesRefHash$BytesStartArray_init(t_BytesRefHash$BytesStartArray *self);

        static PyMethodDef t_BytesRefHash$BytesStartArray__methods_[] = {
          DECLARE_METHOD(t_BytesRefHash$BytesStartArray, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefHash$BytesStartArray, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefHash$BytesStartArray, bytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_BytesRefHash$BytesStartArray, clear, METH_NOARGS),
          DECLARE_METHOD(t_BytesRefHash$BytesStartArray, grow, METH_NOARGS),
          DECLARE_METHOD(t_BytesRefHash$BytesStartArray, init, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BytesRefHash$BytesStartArray, t_BytesRefHash$BytesStartArray, ::java::lang::Object, BytesRefHash$BytesStartArray, t_BytesRefHash$BytesStartArray_init_, 0, 0, 0, 0, 0);

        void t_BytesRefHash$BytesStartArray::install(PyObject *module)
        {
          installType(&PY_TYPE(BytesRefHash$BytesStartArray), module, "BytesRefHash$BytesStartArray", 0);
        }

        void t_BytesRefHash$BytesStartArray::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BytesRefHash$BytesStartArray).tp_dict, "class_", make_descriptor(BytesRefHash$BytesStartArray::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BytesRefHash$BytesStartArray).tp_dict, "wrapfn_", make_descriptor(t_BytesRefHash$BytesStartArray::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BytesRefHash$BytesStartArray).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BytesRefHash$BytesStartArray_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BytesRefHash$BytesStartArray::initializeClass, 1)))
            return NULL;
          return t_BytesRefHash$BytesStartArray::wrap_Object(BytesRefHash$BytesStartArray(((t_BytesRefHash$BytesStartArray *) arg)->object.this$));
        }
        static PyObject *t_BytesRefHash$BytesStartArray_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BytesRefHash$BytesStartArray::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BytesRefHash$BytesStartArray_init_(t_BytesRefHash$BytesStartArray *self, PyObject *args, PyObject *kwds)
        {
          BytesRefHash$BytesStartArray object((jobject) NULL);

          INT_CALL(object = BytesRefHash$BytesStartArray());
          self->object = object;

          return 0;
        }

        static PyObject *t_BytesRefHash$BytesStartArray_bytesUsed(t_BytesRefHash$BytesStartArray *self)
        {
          ::org::apache::lucene::util::Counter result((jobject) NULL);
          OBJ_CALL(result = self->object.bytesUsed());
          return ::org::apache::lucene::util::t_Counter::wrap_Object(result);
        }

        static PyObject *t_BytesRefHash$BytesStartArray_clear(t_BytesRefHash$BytesStartArray *self)
        {
          JArray< jint > result((jobject) NULL);
          OBJ_CALL(result = self->object.clear());
          return result.wrap();
        }

        static PyObject *t_BytesRefHash$BytesStartArray_grow(t_BytesRefHash$BytesStartArray *self)
        {
          JArray< jint > result((jobject) NULL);
          OBJ_CALL(result = self->object.grow());
          return result.wrap();
        }

        static PyObject *t_BytesRefHash$BytesStartArray_init(t_BytesRefHash$BytesStartArray *self)
        {
          JArray< jint > result((jobject) NULL);
          OBJ_CALL(result = self->object.init());
          return result.wrap();
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/parser/QueryParserConstants.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {

            ::java::lang::Class *QueryParserConstants::class$ = NULL;
            jmethodID *QueryParserConstants::mids$ = NULL;
            bool QueryParserConstants::live$ = false;
            jint QueryParserConstants::AND = (jint) 0;
            jint QueryParserConstants::Boost = (jint) 0;
            jint QueryParserConstants::CARAT = (jint) 0;
            jint QueryParserConstants::COLON = (jint) 0;
            jint QueryParserConstants::COMMA = (jint) 0;
            jint QueryParserConstants::DEFAULT = (jint) 0;
            jint QueryParserConstants::EOF = (jint) 0;
            jint QueryParserConstants::LPAREN = (jint) 0;
            jint QueryParserConstants::N = (jint) 0;
            jint QueryParserConstants::NOT = (jint) 0;
            jint QueryParserConstants::NUMBER = (jint) 0;
            jint QueryParserConstants::OR = (jint) 0;
            jint QueryParserConstants::QUOTED = (jint) 0;
            jint QueryParserConstants::RPAREN = (jint) 0;
            jint QueryParserConstants::SUFFIXTERM = (jint) 0;
            jint QueryParserConstants::TERM = (jint) 0;
            jint QueryParserConstants::TRUNCQUOTED = (jint) 0;
            jint QueryParserConstants::TRUNCTERM = (jint) 0;
            jint QueryParserConstants::W = (jint) 0;
            jint QueryParserConstants::_DISTOP_NUM = (jint) 0;
            jint QueryParserConstants::_NUM_CHAR = (jint) 0;
            jint QueryParserConstants::_ONE_CHAR = (jint) 0;
            jint QueryParserConstants::_STAR = (jint) 0;
            jint QueryParserConstants::_TERM_CHAR = (jint) 0;
            jint QueryParserConstants::_WHITESPACE = (jint) 0;
            JArray< ::java::lang::String > *QueryParserConstants::tokenImage = NULL;

            jclass QueryParserConstants::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/parser/QueryParserConstants");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                AND = env->getStaticIntField(cls, "AND");
                Boost = env->getStaticIntField(cls, "Boost");
                CARAT = env->getStaticIntField(cls, "CARAT");
                COLON = env->getStaticIntField(cls, "COLON");
                COMMA = env->getStaticIntField(cls, "COMMA");
                DEFAULT = env->getStaticIntField(cls, "DEFAULT");
                EOF = env->getStaticIntField(cls, "EOF");
                LPAREN = env->getStaticIntField(cls, "LPAREN");
                N = env->getStaticIntField(cls, "N");
                NOT = env->getStaticIntField(cls, "NOT");
                NUMBER = env->getStaticIntField(cls, "NUMBER");
                OR = env->getStaticIntField(cls, "OR");
                QUOTED = env->getStaticIntField(cls, "QUOTED");
                RPAREN = env->getStaticIntField(cls, "RPAREN");
                SUFFIXTERM = env->getStaticIntField(cls, "SUFFIXTERM");
                TERM = env->getStaticIntField(cls, "TERM");
                TRUNCQUOTED = env->getStaticIntField(cls, "TRUNCQUOTED");
                TRUNCTERM = env->getStaticIntField(cls, "TRUNCTERM");
                W = env->getStaticIntField(cls, "W");
                _DISTOP_NUM = env->getStaticIntField(cls, "_DISTOP_NUM");
                _NUM_CHAR = env->getStaticIntField(cls, "_NUM_CHAR");
                _ONE_CHAR = env->getStaticIntField(cls, "_ONE_CHAR");
                _STAR = env->getStaticIntField(cls, "_STAR");
                _TERM_CHAR = env->getStaticIntField(cls, "_TERM_CHAR");
                _WHITESPACE = env->getStaticIntField(cls, "_WHITESPACE");
                tokenImage = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "tokenImage", "[Ljava/lang/String;"));
                live$ = true;
              }
              return (jclass) class$->this$;
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {
            static PyObject *t_QueryParserConstants_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_QueryParserConstants_instance_(PyTypeObject *type, PyObject *arg);

            static PyMethodDef t_QueryParserConstants__methods_[] = {
              DECLARE_METHOD(t_QueryParserConstants, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryParserConstants, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(QueryParserConstants, t_QueryParserConstants, ::java::lang::Object, QueryParserConstants, abstract_init, 0, 0, 0, 0, 0);

            void t_QueryParserConstants::install(PyObject *module)
            {
              installType(&PY_TYPE(QueryParserConstants), module, "QueryParserConstants", 0);
            }

            void t_QueryParserConstants::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "class_", make_descriptor(QueryParserConstants::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "wrapfn_", make_descriptor(t_QueryParserConstants::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(QueryParserConstants::initializeClass);
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "AND", make_descriptor(QueryParserConstants::AND));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "Boost", make_descriptor(QueryParserConstants::Boost));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "CARAT", make_descriptor(QueryParserConstants::CARAT));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "COLON", make_descriptor(QueryParserConstants::COLON));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "COMMA", make_descriptor(QueryParserConstants::COMMA));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "DEFAULT", make_descriptor(QueryParserConstants::DEFAULT));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "EOF", make_descriptor(QueryParserConstants::EOF));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "LPAREN", make_descriptor(QueryParserConstants::LPAREN));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "N", make_descriptor(QueryParserConstants::N));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "NOT", make_descriptor(QueryParserConstants::NOT));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "NUMBER", make_descriptor(QueryParserConstants::NUMBER));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "OR", make_descriptor(QueryParserConstants::OR));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "QUOTED", make_descriptor(QueryParserConstants::QUOTED));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "RPAREN", make_descriptor(QueryParserConstants::RPAREN));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "SUFFIXTERM", make_descriptor(QueryParserConstants::SUFFIXTERM));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "TERM", make_descriptor(QueryParserConstants::TERM));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "TRUNCQUOTED", make_descriptor(QueryParserConstants::TRUNCQUOTED));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "TRUNCTERM", make_descriptor(QueryParserConstants::TRUNCTERM));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "W", make_descriptor(QueryParserConstants::W));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "_DISTOP_NUM", make_descriptor(QueryParserConstants::_DISTOP_NUM));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "_NUM_CHAR", make_descriptor(QueryParserConstants::_NUM_CHAR));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "_ONE_CHAR", make_descriptor(QueryParserConstants::_ONE_CHAR));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "_STAR", make_descriptor(QueryParserConstants::_STAR));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "_TERM_CHAR", make_descriptor(QueryParserConstants::_TERM_CHAR));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "_WHITESPACE", make_descriptor(QueryParserConstants::_WHITESPACE));
              PyDict_SetItemString(PY_TYPE(QueryParserConstants).tp_dict, "tokenImage", make_descriptor(JArray<jstring>(QueryParserConstants::tokenImage->this$).wrap()));
            }

            static PyObject *t_QueryParserConstants_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, QueryParserConstants::initializeClass, 1)))
                return NULL;
              return t_QueryParserConstants::wrap_Object(QueryParserConstants(((t_QueryParserConstants *) arg)->object.this$));
            }
            static PyObject *t_QueryParserConstants_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, QueryParserConstants::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/Token.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/AttributeReflector.h"
#include "org/apache/lucene/util/AttributeImpl.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/analysis/tokenattributes/PayloadAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/FlagsAttribute.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *Token::class$ = NULL;
        jmethodID *Token::mids$ = NULL;
        bool Token::live$ = false;
        ::org::apache::lucene::util::AttributeFactory *Token::TOKEN_ATTRIBUTE_FACTORY = NULL;

        jclass Token::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/Token");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_d8d154a6] = env->getMethodID(cls, "<init>", "(II)V");
            mids$[mid_init$_6cc8d7e2] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;II)V");
            mids$[mid_init$_490a7ef0] = env->getMethodID(cls, "<init>", "(IILjava/lang/String;)V");
            mids$[mid_init$_d3236aa4] = env->getMethodID(cls, "<init>", "(III)V");
            mids$[mid_init$_734c49c6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;IILjava/lang/String;)V");
            mids$[mid_init$_b8e753a2] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;III)V");
            mids$[mid_init$_f453acf6] = env->getMethodID(cls, "<init>", "([CIIII)V");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_clone_55852c17] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/analysis/Token;");
            mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getFlags_54c6a179] = env->getMethodID(cls, "getFlags", "()I");
            mids$[mid_getPayload_4ae19461] = env->getMethodID(cls, "getPayload", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_reflectWith_5f3f5102] = env->getMethodID(cls, "reflectWith", "(Lorg/apache/lucene/util/AttributeReflector;)V");
            mids$[mid_reinit_4f6e7002] = env->getMethodID(cls, "reinit", "(Lorg/apache/lucene/analysis/Token;)V");
            mids$[mid_reinit_4b41519c] = env->getMethodID(cls, "reinit", "(Lorg/apache/lucene/analysis/Token;Ljava/lang/String;)V");
            mids$[mid_reinit_fca163e5] = env->getMethodID(cls, "reinit", "(Ljava/lang/String;II)Lorg/apache/lucene/analysis/Token;");
            mids$[mid_reinit_9e1b3a5a] = env->getMethodID(cls, "reinit", "(Lorg/apache/lucene/analysis/Token;[CII)V");
            mids$[mid_reinit_ca2a1773] = env->getMethodID(cls, "reinit", "(Ljava/lang/String;IILjava/lang/String;)Lorg/apache/lucene/analysis/Token;");
            mids$[mid_reinit_53bb4fe3] = env->getMethodID(cls, "reinit", "([CIIII)Lorg/apache/lucene/analysis/Token;");
            mids$[mid_reinit_d4354d15] = env->getMethodID(cls, "reinit", "(Ljava/lang/String;IIII)Lorg/apache/lucene/analysis/Token;");
            mids$[mid_reinit_4c56913b] = env->getMethodID(cls, "reinit", "(Ljava/lang/String;IIIILjava/lang/String;)Lorg/apache/lucene/analysis/Token;");
            mids$[mid_reinit_6aec2009] = env->getMethodID(cls, "reinit", "([CIIIILjava/lang/String;)Lorg/apache/lucene/analysis/Token;");
            mids$[mid_setFlags_39c7bd3c] = env->getMethodID(cls, "setFlags", "(I)V");
            mids$[mid_setPayload_7bc03dc4] = env->getMethodID(cls, "setPayload", "(Lorg/apache/lucene/util/BytesRef;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TOKEN_ATTRIBUTE_FACTORY = new ::org::apache::lucene::util::AttributeFactory(env->getStaticObjectField(cls, "TOKEN_ATTRIBUTE_FACTORY", "Lorg/apache/lucene/util/AttributeFactory;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Token::Token() : ::org::apache::lucene::analysis::tokenattributes::PackedTokenAttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        Token::Token(jint a0, jint a1) : ::org::apache::lucene::analysis::tokenattributes::PackedTokenAttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_d8d154a6, a0, a1)) {}

        Token::Token(const ::java::lang::CharSequence & a0, jint a1, jint a2) : ::org::apache::lucene::analysis::tokenattributes::PackedTokenAttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_6cc8d7e2, a0.this$, a1, a2)) {}

        Token::Token(jint a0, jint a1, const ::java::lang::String & a2) : ::org::apache::lucene::analysis::tokenattributes::PackedTokenAttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_490a7ef0, a0, a1, a2.this$)) {}

        Token::Token(jint a0, jint a1, jint a2) : ::org::apache::lucene::analysis::tokenattributes::PackedTokenAttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_d3236aa4, a0, a1, a2)) {}

        Token::Token(const ::java::lang::String & a0, jint a1, jint a2, const ::java::lang::String & a3) : ::org::apache::lucene::analysis::tokenattributes::PackedTokenAttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_734c49c6, a0.this$, a1, a2, a3.this$)) {}

        Token::Token(const ::java::lang::String & a0, jint a1, jint a2, jint a3) : ::org::apache::lucene::analysis::tokenattributes::PackedTokenAttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_b8e753a2, a0.this$, a1, a2, a3)) {}

        Token::Token(const JArray< jchar > & a0, jint a1, jint a2, jint a3, jint a4) : ::org::apache::lucene::analysis::tokenattributes::PackedTokenAttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_f453acf6, a0.this$, a1, a2, a3, a4)) {}

        void Token::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        Token Token::clone() const
        {
          return Token(env->callObjectMethod(this$, mids$[mid_clone_55852c17]));
        }

        void Token::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
        }

        jboolean Token::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint Token::getFlags() const
        {
          return env->callIntMethod(this$, mids$[mid_getFlags_54c6a179]);
        }

        ::org::apache::lucene::util::BytesRef Token::getPayload() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getPayload_4ae19461]));
        }

        jint Token::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        void Token::reflectWith(const ::org::apache::lucene::util::AttributeReflector & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_reflectWith_5f3f5102], a0.this$);
        }

        void Token::reinit(const Token & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_reinit_4f6e7002], a0.this$);
        }

        void Token::reinit(const Token & a0, const ::java::lang::String & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_reinit_4b41519c], a0.this$, a1.this$);
        }

        Token Token::reinit(const ::java::lang::String & a0, jint a1, jint a2) const
        {
          return Token(env->callObjectMethod(this$, mids$[mid_reinit_fca163e5], a0.this$, a1, a2));
        }

        void Token::reinit(const Token & a0, const JArray< jchar > & a1, jint a2, jint a3) const
        {
          env->callVoidMethod(this$, mids$[mid_reinit_9e1b3a5a], a0.this$, a1.this$, a2, a3);
        }

        Token Token::reinit(const ::java::lang::String & a0, jint a1, jint a2, const ::java::lang::String & a3) const
        {
          return Token(env->callObjectMethod(this$, mids$[mid_reinit_ca2a1773], a0.this$, a1, a2, a3.this$));
        }

        Token Token::reinit(const JArray< jchar > & a0, jint a1, jint a2, jint a3, jint a4) const
        {
          return Token(env->callObjectMethod(this$, mids$[mid_reinit_53bb4fe3], a0.this$, a1, a2, a3, a4));
        }

        Token Token::reinit(const ::java::lang::String & a0, jint a1, jint a2, jint a3, jint a4) const
        {
          return Token(env->callObjectMethod(this$, mids$[mid_reinit_d4354d15], a0.this$, a1, a2, a3, a4));
        }

        Token Token::reinit(const ::java::lang::String & a0, jint a1, jint a2, jint a3, jint a4, const ::java::lang::String & a5) const
        {
          return Token(env->callObjectMethod(this$, mids$[mid_reinit_4c56913b], a0.this$, a1, a2, a3, a4, a5.this$));
        }

        Token Token::reinit(const JArray< jchar > & a0, jint a1, jint a2, jint a3, jint a4, const ::java::lang::String & a5) const
        {
          return Token(env->callObjectMethod(this$, mids$[mid_reinit_6aec2009], a0.this$, a1, a2, a3, a4, a5.this$));
        }

        void Token::setFlags(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setFlags_39c7bd3c], a0);
        }

        void Token::setPayload(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setPayload_7bc03dc4], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_Token_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Token_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Token_init_(t_Token *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Token_clear(t_Token *self, PyObject *args);
        static PyObject *t_Token_clone(t_Token *self, PyObject *args);
        static PyObject *t_Token_copyTo(t_Token *self, PyObject *args);
        static PyObject *t_Token_equals(t_Token *self, PyObject *args);
        static PyObject *t_Token_getFlags(t_Token *self);
        static PyObject *t_Token_getPayload(t_Token *self);
        static PyObject *t_Token_hashCode(t_Token *self, PyObject *args);
        static PyObject *t_Token_reflectWith(t_Token *self, PyObject *args);
        static PyObject *t_Token_reinit(t_Token *self, PyObject *args);
        static PyObject *t_Token_setFlags(t_Token *self, PyObject *arg);
        static PyObject *t_Token_setPayload(t_Token *self, PyObject *arg);
        static PyObject *t_Token_get__flags(t_Token *self, void *data);
        static int t_Token_set__flags(t_Token *self, PyObject *arg, void *data);
        static PyObject *t_Token_get__payload(t_Token *self, void *data);
        static int t_Token_set__payload(t_Token *self, PyObject *arg, void *data);
        static PyGetSetDef t_Token__fields_[] = {
          DECLARE_GETSET_FIELD(t_Token, flags),
          DECLARE_GETSET_FIELD(t_Token, payload),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Token__methods_[] = {
          DECLARE_METHOD(t_Token, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Token, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Token, clear, METH_VARARGS),
          DECLARE_METHOD(t_Token, clone, METH_VARARGS),
          DECLARE_METHOD(t_Token, copyTo, METH_VARARGS),
          DECLARE_METHOD(t_Token, equals, METH_VARARGS),
          DECLARE_METHOD(t_Token, getFlags, METH_NOARGS),
          DECLARE_METHOD(t_Token, getPayload, METH_NOARGS),
          DECLARE_METHOD(t_Token, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_Token, reflectWith, METH_VARARGS),
          DECLARE_METHOD(t_Token, reinit, METH_VARARGS),
          DECLARE_METHOD(t_Token, setFlags, METH_O),
          DECLARE_METHOD(t_Token, setPayload, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Token, t_Token, ::org::apache::lucene::analysis::tokenattributes::PackedTokenAttributeImpl, Token, t_Token_init_, 0, 0, t_Token__fields_, 0, 0);

        void t_Token::install(PyObject *module)
        {
          installType(&PY_TYPE(Token), module, "Token", 0);
        }

        void t_Token::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Token).tp_dict, "class_", make_descriptor(Token::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Token).tp_dict, "wrapfn_", make_descriptor(t_Token::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Token).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(Token::initializeClass);
          PyDict_SetItemString(PY_TYPE(Token).tp_dict, "TOKEN_ATTRIBUTE_FACTORY", make_descriptor(::org::apache::lucene::util::t_AttributeFactory::wrap_Object(*Token::TOKEN_ATTRIBUTE_FACTORY)));
        }

        static PyObject *t_Token_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Token::initializeClass, 1)))
            return NULL;
          return t_Token::wrap_Object(Token(((t_Token *) arg)->object.this$));
        }
        static PyObject *t_Token_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Token::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Token_init_(t_Token *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              Token object((jobject) NULL);

              INT_CALL(object = Token());
              self->object = object;
              break;
            }
            goto err;
           case 2:
            {
              jint a0;
              jint a1;
              Token object((jobject) NULL);

              if (!parseArgs(args, "II", &a0, &a1))
              {
                INT_CALL(object = Token(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              jint a1;
              jint a2;
              Token object((jobject) NULL);

              if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
              {
                INT_CALL(object = Token(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              jint a0;
              jint a1;
              ::java::lang::String a2((jobject) NULL);
              Token object((jobject) NULL);

              if (!parseArgs(args, "IIs", &a0, &a1, &a2))
              {
                INT_CALL(object = Token(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              jint a0;
              jint a1;
              jint a2;
              Token object((jobject) NULL);

              if (!parseArgs(args, "III", &a0, &a1, &a2))
              {
                INT_CALL(object = Token(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            goto err;
           case 4:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              jint a2;
              ::java::lang::String a3((jobject) NULL);
              Token object((jobject) NULL);

              if (!parseArgs(args, "sIIs", &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = Token(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              Token object((jobject) NULL);

              if (!parseArgs(args, "sIII", &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = Token(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
            goto err;
           case 5:
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              jint a4;
              Token object((jobject) NULL);

              if (!parseArgs(args, "[CIIII", &a0, &a1, &a2, &a3, &a4))
              {
                INT_CALL(object = Token(a0, a1, a2, a3, a4));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Token_clear(t_Token *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.clear());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(Token), (PyObject *) self, "clear", args, 2);
        }

        static PyObject *t_Token_clone(t_Token *self, PyObject *args)
        {
          Token result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.clone());
            return t_Token::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(Token), (PyObject *) self, "clone", args, 2);
        }

        static PyObject *t_Token_copyTo(t_Token *self, PyObject *args)
        {
          ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyTo(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(Token), (PyObject *) self, "copyTo", args, 2);
        }

        static PyObject *t_Token_equals(t_Token *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(Token), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_Token_getFlags(t_Token *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getFlags());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_Token_getPayload(t_Token *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getPayload());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_Token_hashCode(t_Token *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(Token), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_Token_reflectWith(t_Token *self, PyObject *args)
        {
          ::org::apache::lucene::util::AttributeReflector a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeReflector::initializeClass, &a0))
          {
            OBJ_CALL(self->object.reflectWith(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(Token), (PyObject *) self, "reflectWith", args, 2);
        }

        static PyObject *t_Token_reinit(t_Token *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              Token a0((jobject) NULL);

              if (!parseArgs(args, "k", Token::initializeClass, &a0))
              {
                OBJ_CALL(self->object.reinit(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              Token a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);

              if (!parseArgs(args, "ks", Token::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.reinit(a0, a1));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              jint a2;
              Token result((jobject) NULL);

              if (!parseArgs(args, "sII", &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.reinit(a0, a1, a2));
                return t_Token::wrap_Object(result);
              }
            }
            break;
           case 4:
            {
              Token a0((jobject) NULL);
              JArray< jchar > a1((jobject) NULL);
              jint a2;
              jint a3;

              if (!parseArgs(args, "k[CII", Token::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(self->object.reinit(a0, a1, a2, a3));
                Py_RETURN_NONE;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              jint a2;
              ::java::lang::String a3((jobject) NULL);
              Token result((jobject) NULL);

              if (!parseArgs(args, "sIIs", &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.reinit(a0, a1, a2, a3));
                return t_Token::wrap_Object(result);
              }
            }
            break;
           case 5:
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              jint a4;
              Token result((jobject) NULL);

              if (!parseArgs(args, "[CIIII", &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = self->object.reinit(a0, a1, a2, a3, a4));
                return t_Token::wrap_Object(result);
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              jint a4;
              Token result((jobject) NULL);

              if (!parseArgs(args, "sIIII", &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = self->object.reinit(a0, a1, a2, a3, a4));
                return t_Token::wrap_Object(result);
              }
            }
            break;
           case 6:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              jint a4;
              ::java::lang::String a5((jobject) NULL);
              Token result((jobject) NULL);

              if (!parseArgs(args, "sIIIIs", &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = self->object.reinit(a0, a1, a2, a3, a4, a5));
                return t_Token::wrap_Object(result);
              }
            }
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              jint a4;
              ::java::lang::String a5((jobject) NULL);
              Token result((jobject) NULL);

              if (!parseArgs(args, "[CIIIIs", &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = self->object.reinit(a0, a1, a2, a3, a4, a5));
                return t_Token::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "reinit", args);
          return NULL;
        }

        static PyObject *t_Token_setFlags(t_Token *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setFlags(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setFlags", arg);
          return NULL;
        }

        static PyObject *t_Token_setPayload(t_Token *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setPayload(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setPayload", arg);
          return NULL;
        }

        static PyObject *t_Token_get__flags(t_Token *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getFlags());
          return PyInt_FromLong((long) value);
        }
        static int t_Token_set__flags(t_Token *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setFlags(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "flags", arg);
          return -1;
        }

        static PyObject *t_Token_get__payload(t_Token *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getPayload());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }
        static int t_Token_set__payload(t_Token *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
            {
              INT_CALL(self->object.setPayload(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "payload", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/SloppyMath.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *SloppyMath::class$ = NULL;
        jmethodID *SloppyMath::mids$ = NULL;
        bool SloppyMath::live$ = false;

        jclass SloppyMath::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/SloppyMath");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_asin_5d1c7657] = env->getStaticMethodID(cls, "asin", "(D)D");
            mids$[mid_cos_5d1c7657] = env->getStaticMethodID(cls, "cos", "(D)D");
            mids$[mid_earthDiameter_5d1c7657] = env->getStaticMethodID(cls, "earthDiameter", "(D)D");
            mids$[mid_haversin_143b6dc0] = env->getStaticMethodID(cls, "haversin", "(DDDD)D");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SloppyMath::SloppyMath() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jdouble SloppyMath::asin(jdouble a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_asin_5d1c7657], a0);
        }

        jdouble SloppyMath::cos(jdouble a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_cos_5d1c7657], a0);
        }

        jdouble SloppyMath::earthDiameter(jdouble a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_earthDiameter_5d1c7657], a0);
        }

        jdouble SloppyMath::haversin(jdouble a0, jdouble a1, jdouble a2, jdouble a3)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_haversin_143b6dc0], a0, a1, a2, a3);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_SloppyMath_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SloppyMath_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SloppyMath_init_(t_SloppyMath *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SloppyMath_asin(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SloppyMath_cos(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SloppyMath_earthDiameter(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SloppyMath_haversin(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_SloppyMath__methods_[] = {
          DECLARE_METHOD(t_SloppyMath, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SloppyMath, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SloppyMath, asin, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SloppyMath, cos, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SloppyMath, earthDiameter, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SloppyMath, haversin, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SloppyMath, t_SloppyMath, ::java::lang::Object, SloppyMath, t_SloppyMath_init_, 0, 0, 0, 0, 0);

        void t_SloppyMath::install(PyObject *module)
        {
          installType(&PY_TYPE(SloppyMath), module, "SloppyMath", 0);
        }

        void t_SloppyMath::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SloppyMath).tp_dict, "class_", make_descriptor(SloppyMath::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SloppyMath).tp_dict, "wrapfn_", make_descriptor(t_SloppyMath::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SloppyMath).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SloppyMath_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SloppyMath::initializeClass, 1)))
            return NULL;
          return t_SloppyMath::wrap_Object(SloppyMath(((t_SloppyMath *) arg)->object.this$));
        }
        static PyObject *t_SloppyMath_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SloppyMath::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SloppyMath_init_(t_SloppyMath *self, PyObject *args, PyObject *kwds)
        {
          SloppyMath object((jobject) NULL);

          INT_CALL(object = SloppyMath());
          self->object = object;

          return 0;
        }

        static PyObject *t_SloppyMath_asin(PyTypeObject *type, PyObject *arg)
        {
          jdouble a0;
          jdouble result;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SloppyMath::asin(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "asin", arg);
          return NULL;
        }

        static PyObject *t_SloppyMath_cos(PyTypeObject *type, PyObject *arg)
        {
          jdouble a0;
          jdouble result;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SloppyMath::cos(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "cos", arg);
          return NULL;
        }

        static PyObject *t_SloppyMath_earthDiameter(PyTypeObject *type, PyObject *arg)
        {
          jdouble a0;
          jdouble result;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SloppyMath::earthDiameter(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "earthDiameter", arg);
          return NULL;
        }

        static PyObject *t_SloppyMath_haversin(PyTypeObject *type, PyObject *args)
        {
          jdouble a0;
          jdouble a1;
          jdouble a2;
          jdouble a3;
          jdouble result;

          if (!parseArgs(args, "DDDD", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::SloppyMath::haversin(a0, a1, a2, a3));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "haversin", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiDocsAndPositionsEnum.h"
#include "org/apache/lucene/index/MultiDocsAndPositionsEnum$EnumWithSlice.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/MultiTermsEnum.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiDocsAndPositionsEnum::class$ = NULL;
        jmethodID *MultiDocsAndPositionsEnum::mids$ = NULL;
        bool MultiDocsAndPositionsEnum::live$ = false;

        jclass MultiDocsAndPositionsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiDocsAndPositionsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7d44bb06] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/MultiTermsEnum;I)V");
            mids$[mid_advance_39c7bd23] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_canReuse_4fe73d2c] = env->getMethodID(cls, "canReuse", "(Lorg/apache/lucene/index/MultiTermsEnum;)Z");
            mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_54c6a179] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_endOffset_54c6a179] = env->getMethodID(cls, "endOffset", "()I");
            mids$[mid_freq_54c6a179] = env->getMethodID(cls, "freq", "()I");
            mids$[mid_getNumSubs_54c6a179] = env->getMethodID(cls, "getNumSubs", "()I");
            mids$[mid_getPayload_4ae19461] = env->getMethodID(cls, "getPayload", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getSubs_451af4aa] = env->getMethodID(cls, "getSubs", "()[Lorg/apache/lucene/index/MultiDocsAndPositionsEnum$EnumWithSlice;");
            mids$[mid_nextDoc_54c6a179] = env->getMethodID(cls, "nextDoc", "()I");
            mids$[mid_nextPosition_54c6a179] = env->getMethodID(cls, "nextPosition", "()I");
            mids$[mid_reset_7ce62fbc] = env->getMethodID(cls, "reset", "([Lorg/apache/lucene/index/MultiDocsAndPositionsEnum$EnumWithSlice;I)Lorg/apache/lucene/index/MultiDocsAndPositionsEnum;");
            mids$[mid_startOffset_54c6a179] = env->getMethodID(cls, "startOffset", "()I");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiDocsAndPositionsEnum::MultiDocsAndPositionsEnum(const ::org::apache::lucene::index::MultiTermsEnum & a0, jint a1) : ::org::apache::lucene::index::DocsAndPositionsEnum(env->newObject(initializeClass, &mids$, mid_init$_7d44bb06, a0.this$, a1)) {}

        jint MultiDocsAndPositionsEnum::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_39c7bd23], a0);
        }

        jboolean MultiDocsAndPositionsEnum::canReuse(const ::org::apache::lucene::index::MultiTermsEnum & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_canReuse_4fe73d2c], a0.this$);
        }

        jlong MultiDocsAndPositionsEnum::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
        }

        jint MultiDocsAndPositionsEnum::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_54c6a179]);
        }

        jint MultiDocsAndPositionsEnum::endOffset() const
        {
          return env->callIntMethod(this$, mids$[mid_endOffset_54c6a179]);
        }

        jint MultiDocsAndPositionsEnum::freq() const
        {
          return env->callIntMethod(this$, mids$[mid_freq_54c6a179]);
        }

        jint MultiDocsAndPositionsEnum::getNumSubs() const
        {
          return env->callIntMethod(this$, mids$[mid_getNumSubs_54c6a179]);
        }

        ::org::apache::lucene::util::BytesRef MultiDocsAndPositionsEnum::getPayload() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getPayload_4ae19461]));
        }

        JArray< ::org::apache::lucene::index::MultiDocsAndPositionsEnum$EnumWithSlice > MultiDocsAndPositionsEnum::getSubs() const
        {
          return JArray< ::org::apache::lucene::index::MultiDocsAndPositionsEnum$EnumWithSlice >(env->callObjectMethod(this$, mids$[mid_getSubs_451af4aa]));
        }

        jint MultiDocsAndPositionsEnum::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_54c6a179]);
        }

        jint MultiDocsAndPositionsEnum::nextPosition() const
        {
          return env->callIntMethod(this$, mids$[mid_nextPosition_54c6a179]);
        }

        MultiDocsAndPositionsEnum MultiDocsAndPositionsEnum::reset(const JArray< ::org::apache::lucene::index::MultiDocsAndPositionsEnum$EnumWithSlice > & a0, jint a1) const
        {
          return MultiDocsAndPositionsEnum(env->callObjectMethod(this$, mids$[mid_reset_7ce62fbc], a0.this$, a1));
        }

        jint MultiDocsAndPositionsEnum::startOffset() const
        {
          return env->callIntMethod(this$, mids$[mid_startOffset_54c6a179]);
        }

        ::java::lang::String MultiDocsAndPositionsEnum::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiDocsAndPositionsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiDocsAndPositionsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiDocsAndPositionsEnum_init_(t_MultiDocsAndPositionsEnum *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiDocsAndPositionsEnum_advance(t_MultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsAndPositionsEnum_canReuse(t_MultiDocsAndPositionsEnum *self, PyObject *arg);
        static PyObject *t_MultiDocsAndPositionsEnum_cost(t_MultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsAndPositionsEnum_docID(t_MultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsAndPositionsEnum_endOffset(t_MultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsAndPositionsEnum_freq(t_MultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsAndPositionsEnum_getNumSubs(t_MultiDocsAndPositionsEnum *self);
        static PyObject *t_MultiDocsAndPositionsEnum_getPayload(t_MultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsAndPositionsEnum_getSubs(t_MultiDocsAndPositionsEnum *self);
        static PyObject *t_MultiDocsAndPositionsEnum_nextDoc(t_MultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsAndPositionsEnum_nextPosition(t_MultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsAndPositionsEnum_reset(t_MultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsAndPositionsEnum_startOffset(t_MultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsAndPositionsEnum_toString(t_MultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsAndPositionsEnum_get__numSubs(t_MultiDocsAndPositionsEnum *self, void *data);
        static PyObject *t_MultiDocsAndPositionsEnum_get__payload(t_MultiDocsAndPositionsEnum *self, void *data);
        static PyObject *t_MultiDocsAndPositionsEnum_get__subs(t_MultiDocsAndPositionsEnum *self, void *data);
        static PyGetSetDef t_MultiDocsAndPositionsEnum__fields_[] = {
          DECLARE_GET_FIELD(t_MultiDocsAndPositionsEnum, numSubs),
          DECLARE_GET_FIELD(t_MultiDocsAndPositionsEnum, payload),
          DECLARE_GET_FIELD(t_MultiDocsAndPositionsEnum, subs),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiDocsAndPositionsEnum__methods_[] = {
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, advance, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, canReuse, METH_O),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, cost, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, docID, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, endOffset, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, freq, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, getNumSubs, METH_NOARGS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, getPayload, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, getSubs, METH_NOARGS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, nextDoc, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, nextPosition, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, reset, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, startOffset, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiDocsAndPositionsEnum, t_MultiDocsAndPositionsEnum, ::org::apache::lucene::index::DocsAndPositionsEnum, MultiDocsAndPositionsEnum, t_MultiDocsAndPositionsEnum_init_, 0, 0, t_MultiDocsAndPositionsEnum__fields_, 0, 0);

        void t_MultiDocsAndPositionsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiDocsAndPositionsEnum), module, "MultiDocsAndPositionsEnum", 0);
          PyDict_SetItemString(PY_TYPE(MultiDocsAndPositionsEnum).tp_dict, "EnumWithSlice", make_descriptor(&PY_TYPE(MultiDocsAndPositionsEnum$EnumWithSlice)));
        }

        void t_MultiDocsAndPositionsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiDocsAndPositionsEnum).tp_dict, "class_", make_descriptor(MultiDocsAndPositionsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiDocsAndPositionsEnum).tp_dict, "wrapfn_", make_descriptor(t_MultiDocsAndPositionsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiDocsAndPositionsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiDocsAndPositionsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiDocsAndPositionsEnum::initializeClass, 1)))
            return NULL;
          return t_MultiDocsAndPositionsEnum::wrap_Object(MultiDocsAndPositionsEnum(((t_MultiDocsAndPositionsEnum *) arg)->object.this$));
        }
        static PyObject *t_MultiDocsAndPositionsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiDocsAndPositionsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiDocsAndPositionsEnum_init_(t_MultiDocsAndPositionsEnum *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::MultiTermsEnum a0((jobject) NULL);
          jint a1;
          MultiDocsAndPositionsEnum object((jobject) NULL);

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::MultiTermsEnum::initializeClass, &a0, &a1))
          {
            INT_CALL(object = MultiDocsAndPositionsEnum(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MultiDocsAndPositionsEnum_advance(t_MultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiDocsAndPositionsEnum), (PyObject *) self, "advance", args, 2);
        }

        static PyObject *t_MultiDocsAndPositionsEnum_canReuse(t_MultiDocsAndPositionsEnum *self, PyObject *arg)
        {
          ::org::apache::lucene::index::MultiTermsEnum a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::MultiTermsEnum::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.canReuse(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "canReuse", arg);
          return NULL;
        }

        static PyObject *t_MultiDocsAndPositionsEnum_cost(t_MultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(MultiDocsAndPositionsEnum), (PyObject *) self, "cost", args, 2);
        }

        static PyObject *t_MultiDocsAndPositionsEnum_docID(t_MultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiDocsAndPositionsEnum), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_MultiDocsAndPositionsEnum_endOffset(t_MultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.endOffset());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiDocsAndPositionsEnum), (PyObject *) self, "endOffset", args, 2);
        }

        static PyObject *t_MultiDocsAndPositionsEnum_freq(t_MultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.freq());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiDocsAndPositionsEnum), (PyObject *) self, "freq", args, 2);
        }

        static PyObject *t_MultiDocsAndPositionsEnum_getNumSubs(t_MultiDocsAndPositionsEnum *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getNumSubs());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_MultiDocsAndPositionsEnum_getPayload(t_MultiDocsAndPositionsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getPayload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiDocsAndPositionsEnum), (PyObject *) self, "getPayload", args, 2);
        }

        static PyObject *t_MultiDocsAndPositionsEnum_getSubs(t_MultiDocsAndPositionsEnum *self)
        {
          JArray< ::org::apache::lucene::index::MultiDocsAndPositionsEnum$EnumWithSlice > result((jobject) NULL);
          OBJ_CALL(result = self->object.getSubs());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::index::t_MultiDocsAndPositionsEnum$EnumWithSlice::wrap_jobject);
        }

        static PyObject *t_MultiDocsAndPositionsEnum_nextDoc(t_MultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiDocsAndPositionsEnum), (PyObject *) self, "nextDoc", args, 2);
        }

        static PyObject *t_MultiDocsAndPositionsEnum_nextPosition(t_MultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextPosition());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiDocsAndPositionsEnum), (PyObject *) self, "nextPosition", args, 2);
        }

        static PyObject *t_MultiDocsAndPositionsEnum_reset(t_MultiDocsAndPositionsEnum *self, PyObject *args)
        {
          JArray< ::org::apache::lucene::index::MultiDocsAndPositionsEnum$EnumWithSlice > a0((jobject) NULL);
          jint a1;
          MultiDocsAndPositionsEnum result((jobject) NULL);

          if (!parseArgs(args, "[kI", ::org::apache::lucene::index::MultiDocsAndPositionsEnum$EnumWithSlice::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.reset(a0, a1));
            return t_MultiDocsAndPositionsEnum::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "reset", args);
          return NULL;
        }

        static PyObject *t_MultiDocsAndPositionsEnum_startOffset(t_MultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.startOffset());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiDocsAndPositionsEnum), (PyObject *) self, "startOffset", args, 2);
        }

        static PyObject *t_MultiDocsAndPositionsEnum_toString(t_MultiDocsAndPositionsEnum *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(MultiDocsAndPositionsEnum), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_MultiDocsAndPositionsEnum_get__numSubs(t_MultiDocsAndPositionsEnum *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getNumSubs());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_MultiDocsAndPositionsEnum_get__payload(t_MultiDocsAndPositionsEnum *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getPayload());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }

        static PyObject *t_MultiDocsAndPositionsEnum_get__subs(t_MultiDocsAndPositionsEnum *self, void *data)
        {
          JArray< ::org::apache::lucene::index::MultiDocsAndPositionsEnum$EnumWithSlice > value((jobject) NULL);
          OBJ_CALL(value = self->object.getSubs());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_MultiDocsAndPositionsEnum$EnumWithSlice::wrap_jobject);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/th/ThaiTokenizer.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace th {

          ::java::lang::Class *ThaiTokenizer::class$ = NULL;
          jmethodID *ThaiTokenizer::mids$ = NULL;
          bool ThaiTokenizer::live$ = false;
          jboolean ThaiTokenizer::DBBI_AVAILABLE = (jboolean) 0;

          jclass ThaiTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/th/ThaiTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_5877b8f0] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_setNextSentence_d8d154a6] = env->getMethodID(cls, "setNextSentence", "(II)V");
              mids$[mid_incrementWord_54c6a16a] = env->getMethodID(cls, "incrementWord", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DBBI_AVAILABLE = env->getStaticBooleanField(cls, "DBBI_AVAILABLE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ThaiTokenizer::ThaiTokenizer(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::util::SegmentingTokenizerBase(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          ThaiTokenizer::ThaiTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::util::SegmentingTokenizerBase(env->newObject(initializeClass, &mids$, mid_init$_5877b8f0, a0.this$, a1.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace th {
          static PyObject *t_ThaiTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ThaiTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ThaiTokenizer_init_(t_ThaiTokenizer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_ThaiTokenizer__methods_[] = {
            DECLARE_METHOD(t_ThaiTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ThaiTokenizer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ThaiTokenizer, t_ThaiTokenizer, ::org::apache::lucene::analysis::util::SegmentingTokenizerBase, ThaiTokenizer, t_ThaiTokenizer_init_, 0, 0, 0, 0, 0);

          void t_ThaiTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(ThaiTokenizer), module, "ThaiTokenizer", 0);
          }

          void t_ThaiTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ThaiTokenizer).tp_dict, "class_", make_descriptor(ThaiTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ThaiTokenizer).tp_dict, "wrapfn_", make_descriptor(t_ThaiTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ThaiTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ThaiTokenizer::initializeClass);
            PyDict_SetItemString(PY_TYPE(ThaiTokenizer).tp_dict, "DBBI_AVAILABLE", make_descriptor(ThaiTokenizer::DBBI_AVAILABLE));
          }

          static PyObject *t_ThaiTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ThaiTokenizer::initializeClass, 1)))
              return NULL;
            return t_ThaiTokenizer::wrap_Object(ThaiTokenizer(((t_ThaiTokenizer *) arg)->object.this$));
          }
          static PyObject *t_ThaiTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ThaiTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ThaiTokenizer_init_(t_ThaiTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                ThaiTokenizer object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = ThaiTokenizer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                ThaiTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = ThaiTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/CharStream.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {

              ::java::lang::Class *CharStream::class$ = NULL;
              jmethodID *CharStream::mids$ = NULL;
              bool CharStream::live$ = false;

              jclass CharStream::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/parser/CharStream");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_BeginToken_54c6a173] = env->getMethodID(cls, "BeginToken", "()C");
                  mids$[mid_Done_54c6a166] = env->getMethodID(cls, "Done", "()V");
                  mids$[mid_GetImage_14c7b5c5] = env->getMethodID(cls, "GetImage", "()Ljava/lang/String;");
                  mids$[mid_GetSuffix_b4292e99] = env->getMethodID(cls, "GetSuffix", "(I)[C");
                  mids$[mid_backup_39c7bd3c] = env->getMethodID(cls, "backup", "(I)V");
                  mids$[mid_getBeginColumn_54c6a179] = env->getMethodID(cls, "getBeginColumn", "()I");
                  mids$[mid_getBeginLine_54c6a179] = env->getMethodID(cls, "getBeginLine", "()I");
                  mids$[mid_getColumn_54c6a179] = env->getMethodID(cls, "getColumn", "()I");
                  mids$[mid_getEndColumn_54c6a179] = env->getMethodID(cls, "getEndColumn", "()I");
                  mids$[mid_getEndLine_54c6a179] = env->getMethodID(cls, "getEndLine", "()I");
                  mids$[mid_getLine_54c6a179] = env->getMethodID(cls, "getLine", "()I");
                  mids$[mid_readChar_54c6a173] = env->getMethodID(cls, "readChar", "()C");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              jchar CharStream::BeginToken() const
              {
                return env->callCharMethod(this$, mids$[mid_BeginToken_54c6a173]);
              }

              void CharStream::Done() const
              {
                env->callVoidMethod(this$, mids$[mid_Done_54c6a166]);
              }

              ::java::lang::String CharStream::GetImage() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_GetImage_14c7b5c5]));
              }

              JArray< jchar > CharStream::GetSuffix(jint a0) const
              {
                return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_GetSuffix_b4292e99], a0));
              }

              void CharStream::backup(jint a0) const
              {
                env->callVoidMethod(this$, mids$[mid_backup_39c7bd3c], a0);
              }

              jint CharStream::getBeginColumn() const
              {
                return env->callIntMethod(this$, mids$[mid_getBeginColumn_54c6a179]);
              }

              jint CharStream::getBeginLine() const
              {
                return env->callIntMethod(this$, mids$[mid_getBeginLine_54c6a179]);
              }

              jint CharStream::getColumn() const
              {
                return env->callIntMethod(this$, mids$[mid_getColumn_54c6a179]);
              }

              jint CharStream::getEndColumn() const
              {
                return env->callIntMethod(this$, mids$[mid_getEndColumn_54c6a179]);
              }

              jint CharStream::getEndLine() const
              {
                return env->callIntMethod(this$, mids$[mid_getEndLine_54c6a179]);
              }

              jint CharStream::getLine() const
              {
                return env->callIntMethod(this$, mids$[mid_getLine_54c6a179]);
              }

              jchar CharStream::readChar() const
              {
                return env->callCharMethod(this$, mids$[mid_readChar_54c6a173]);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {
              static PyObject *t_CharStream_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_CharStream_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_CharStream_BeginToken(t_CharStream *self);
              static PyObject *t_CharStream_Done(t_CharStream *self);
              static PyObject *t_CharStream_GetImage(t_CharStream *self);
              static PyObject *t_CharStream_GetSuffix(t_CharStream *self, PyObject *arg);
              static PyObject *t_CharStream_backup(t_CharStream *self, PyObject *arg);
              static PyObject *t_CharStream_getBeginColumn(t_CharStream *self);
              static PyObject *t_CharStream_getBeginLine(t_CharStream *self);
              static PyObject *t_CharStream_getColumn(t_CharStream *self);
              static PyObject *t_CharStream_getEndColumn(t_CharStream *self);
              static PyObject *t_CharStream_getEndLine(t_CharStream *self);
              static PyObject *t_CharStream_getLine(t_CharStream *self);
              static PyObject *t_CharStream_readChar(t_CharStream *self);
              static PyObject *t_CharStream_get__beginColumn(t_CharStream *self, void *data);
              static PyObject *t_CharStream_get__beginLine(t_CharStream *self, void *data);
              static PyObject *t_CharStream_get__column(t_CharStream *self, void *data);
              static PyObject *t_CharStream_get__endColumn(t_CharStream *self, void *data);
              static PyObject *t_CharStream_get__endLine(t_CharStream *self, void *data);
              static PyObject *t_CharStream_get__line(t_CharStream *self, void *data);
              static PyGetSetDef t_CharStream__fields_[] = {
                DECLARE_GET_FIELD(t_CharStream, beginColumn),
                DECLARE_GET_FIELD(t_CharStream, beginLine),
                DECLARE_GET_FIELD(t_CharStream, column),
                DECLARE_GET_FIELD(t_CharStream, endColumn),
                DECLARE_GET_FIELD(t_CharStream, endLine),
                DECLARE_GET_FIELD(t_CharStream, line),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_CharStream__methods_[] = {
                DECLARE_METHOD(t_CharStream, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_CharStream, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_CharStream, BeginToken, METH_NOARGS),
                DECLARE_METHOD(t_CharStream, Done, METH_NOARGS),
                DECLARE_METHOD(t_CharStream, GetImage, METH_NOARGS),
                DECLARE_METHOD(t_CharStream, GetSuffix, METH_O),
                DECLARE_METHOD(t_CharStream, backup, METH_O),
                DECLARE_METHOD(t_CharStream, getBeginColumn, METH_NOARGS),
                DECLARE_METHOD(t_CharStream, getBeginLine, METH_NOARGS),
                DECLARE_METHOD(t_CharStream, getColumn, METH_NOARGS),
                DECLARE_METHOD(t_CharStream, getEndColumn, METH_NOARGS),
                DECLARE_METHOD(t_CharStream, getEndLine, METH_NOARGS),
                DECLARE_METHOD(t_CharStream, getLine, METH_NOARGS),
                DECLARE_METHOD(t_CharStream, readChar, METH_NOARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(CharStream, t_CharStream, ::java::lang::Object, CharStream, abstract_init, 0, 0, t_CharStream__fields_, 0, 0);

              void t_CharStream::install(PyObject *module)
              {
                installType(&PY_TYPE(CharStream), module, "CharStream", 0);
              }

              void t_CharStream::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(CharStream).tp_dict, "class_", make_descriptor(CharStream::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(CharStream).tp_dict, "wrapfn_", make_descriptor(t_CharStream::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(CharStream).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_CharStream_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, CharStream::initializeClass, 1)))
                  return NULL;
                return t_CharStream::wrap_Object(CharStream(((t_CharStream *) arg)->object.this$));
              }
              static PyObject *t_CharStream_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, CharStream::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_CharStream_BeginToken(t_CharStream *self)
              {
                jchar result;
                OBJ_CALL(result = self->object.BeginToken());
                return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
              }

              static PyObject *t_CharStream_Done(t_CharStream *self)
              {
                OBJ_CALL(self->object.Done());
                Py_RETURN_NONE;
              }

              static PyObject *t_CharStream_GetImage(t_CharStream *self)
              {
                ::java::lang::String result((jobject) NULL);
                OBJ_CALL(result = self->object.GetImage());
                return j2p(result);
              }

              static PyObject *t_CharStream_GetSuffix(t_CharStream *self, PyObject *arg)
              {
                jint a0;
                JArray< jchar > result((jobject) NULL);

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(result = self->object.GetSuffix(a0));
                  return result.wrap();
                }

                PyErr_SetArgsError((PyObject *) self, "GetSuffix", arg);
                return NULL;
              }

              static PyObject *t_CharStream_backup(t_CharStream *self, PyObject *arg)
              {
                jint a0;

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(self->object.backup(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "backup", arg);
                return NULL;
              }

              static PyObject *t_CharStream_getBeginColumn(t_CharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getBeginColumn());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_CharStream_getBeginLine(t_CharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getBeginLine());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_CharStream_getColumn(t_CharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getColumn());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_CharStream_getEndColumn(t_CharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getEndColumn());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_CharStream_getEndLine(t_CharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getEndLine());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_CharStream_getLine(t_CharStream *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getLine());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_CharStream_readChar(t_CharStream *self)
              {
                jchar result;
                OBJ_CALL(result = self->object.readChar());
                return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
              }

              static PyObject *t_CharStream_get__beginColumn(t_CharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getBeginColumn());
                return PyInt_FromLong((long) value);
              }

              static PyObject *t_CharStream_get__beginLine(t_CharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getBeginLine());
                return PyInt_FromLong((long) value);
              }

              static PyObject *t_CharStream_get__column(t_CharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getColumn());
                return PyInt_FromLong((long) value);
              }

              static PyObject *t_CharStream_get__endColumn(t_CharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getEndColumn());
                return PyInt_FromLong((long) value);
              }

              static PyObject *t_CharStream_get__endLine(t_CharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getEndLine());
                return PyInt_FromLong((long) value);
              }

              static PyObject *t_CharStream_get__line(t_CharStream *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getLine());
                return PyInt_FromLong((long) value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/LiveDocsFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/util/MutableBits.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *LiveDocsFormat::class$ = NULL;
        jmethodID *LiveDocsFormat::mids$ = NULL;
        bool LiveDocsFormat::live$ = false;

        jclass LiveDocsFormat::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/LiveDocsFormat");

            mids$ = new jmethodID[max_mid];
            mids$[mid_files_cb8dcbcf] = env->getMethodID(cls, "files", "(Lorg/apache/lucene/index/SegmentCommitInfo;Ljava/util/Collection;)V");
            mids$[mid_newLiveDocs_f311e97a] = env->getMethodID(cls, "newLiveDocs", "(I)Lorg/apache/lucene/util/MutableBits;");
            mids$[mid_newLiveDocs_e3a7ca1a] = env->getMethodID(cls, "newLiveDocs", "(Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/util/MutableBits;");
            mids$[mid_readLiveDocs_60c7b77b] = env->getMethodID(cls, "readLiveDocs", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/util/Bits;");
            mids$[mid_writeLiveDocs_37123b35] = env->getMethodID(cls, "writeLiveDocs", "(Lorg/apache/lucene/util/MutableBits;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentCommitInfo;ILorg/apache/lucene/store/IOContext;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void LiveDocsFormat::files(const ::org::apache::lucene::index::SegmentCommitInfo & a0, const ::java::util::Collection & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_files_cb8dcbcf], a0.this$, a1.this$);
        }

        ::org::apache::lucene::util::MutableBits LiveDocsFormat::newLiveDocs(jint a0) const
        {
          return ::org::apache::lucene::util::MutableBits(env->callObjectMethod(this$, mids$[mid_newLiveDocs_f311e97a], a0));
        }

        ::org::apache::lucene::util::MutableBits LiveDocsFormat::newLiveDocs(const ::org::apache::lucene::util::Bits & a0) const
        {
          return ::org::apache::lucene::util::MutableBits(env->callObjectMethod(this$, mids$[mid_newLiveDocs_e3a7ca1a], a0.this$));
        }

        ::org::apache::lucene::util::Bits LiveDocsFormat::readLiveDocs(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentCommitInfo & a1, const ::org::apache::lucene::store::IOContext & a2) const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_readLiveDocs_60c7b77b], a0.this$, a1.this$, a2.this$));
        }

        void LiveDocsFormat::writeLiveDocs(const ::org::apache::lucene::util::MutableBits & a0, const ::org::apache::lucene::store::Directory & a1, const ::org::apache::lucene::index::SegmentCommitInfo & a2, jint a3, const ::org::apache::lucene::store::IOContext & a4) const
        {
          env->callVoidMethod(this$, mids$[mid_writeLiveDocs_37123b35], a0.this$, a1.this$, a2.this$, a3, a4.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_LiveDocsFormat_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LiveDocsFormat_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LiveDocsFormat_files(t_LiveDocsFormat *self, PyObject *args);
        static PyObject *t_LiveDocsFormat_newLiveDocs(t_LiveDocsFormat *self, PyObject *args);
        static PyObject *t_LiveDocsFormat_readLiveDocs(t_LiveDocsFormat *self, PyObject *args);
        static PyObject *t_LiveDocsFormat_writeLiveDocs(t_LiveDocsFormat *self, PyObject *args);

        static PyMethodDef t_LiveDocsFormat__methods_[] = {
          DECLARE_METHOD(t_LiveDocsFormat, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LiveDocsFormat, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LiveDocsFormat, files, METH_VARARGS),
          DECLARE_METHOD(t_LiveDocsFormat, newLiveDocs, METH_VARARGS),
          DECLARE_METHOD(t_LiveDocsFormat, readLiveDocs, METH_VARARGS),
          DECLARE_METHOD(t_LiveDocsFormat, writeLiveDocs, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LiveDocsFormat, t_LiveDocsFormat, ::java::lang::Object, LiveDocsFormat, abstract_init, 0, 0, 0, 0, 0);

        void t_LiveDocsFormat::install(PyObject *module)
        {
          installType(&PY_TYPE(LiveDocsFormat), module, "LiveDocsFormat", 0);
        }

        void t_LiveDocsFormat::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LiveDocsFormat).tp_dict, "class_", make_descriptor(LiveDocsFormat::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LiveDocsFormat).tp_dict, "wrapfn_", make_descriptor(t_LiveDocsFormat::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LiveDocsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LiveDocsFormat_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LiveDocsFormat::initializeClass, 1)))
            return NULL;
          return t_LiveDocsFormat::wrap_Object(LiveDocsFormat(((t_LiveDocsFormat *) arg)->object.this$));
        }
        static PyObject *t_LiveDocsFormat_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LiveDocsFormat::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_LiveDocsFormat_files(t_LiveDocsFormat *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentCommitInfo a0((jobject) NULL);
          ::java::util::Collection a1((jobject) NULL);
          PyTypeObject **p1;

          if (!parseArgs(args, "kK", ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, ::java::util::Collection::initializeClass, &a0, &a1, &p1, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(self->object.files(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "files", args);
          return NULL;
        }

        static PyObject *t_LiveDocsFormat_newLiveDocs(t_LiveDocsFormat *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              ::org::apache::lucene::util::MutableBits result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.newLiveDocs(a0));
                return ::org::apache::lucene::util::t_MutableBits::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::util::Bits a0((jobject) NULL);
              ::org::apache::lucene::util::MutableBits result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::Bits::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.newLiveDocs(a0));
                return ::org::apache::lucene::util::t_MutableBits::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "newLiveDocs", args);
          return NULL;
        }

        static PyObject *t_LiveDocsFormat_readLiveDocs(t_LiveDocsFormat *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::org::apache::lucene::index::SegmentCommitInfo a1((jobject) NULL);
          ::org::apache::lucene::store::IOContext a2((jobject) NULL);
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.readLiveDocs(a0, a1, a2));
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "readLiveDocs", args);
          return NULL;
        }

        static PyObject *t_LiveDocsFormat_writeLiveDocs(t_LiveDocsFormat *self, PyObject *args)
        {
          ::org::apache::lucene::util::MutableBits a0((jobject) NULL);
          ::org::apache::lucene::store::Directory a1((jobject) NULL);
          ::org::apache::lucene::index::SegmentCommitInfo a2((jobject) NULL);
          jint a3;
          ::org::apache::lucene::store::IOContext a4((jobject) NULL);

          if (!parseArgs(args, "kkkIk", ::org::apache::lucene::util::MutableBits::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(self->object.writeLiveDocs(a0, a1, a2, a3, a4));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeLiveDocs", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/Trie.h"
#include "java/io/DataOutput.h"
#include "java/lang/CharSequence.h"
#include "java/util/List.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/egothor/stemmer/Reduce.h"
#include "java/io/PrintStream.h"
#include "java/io/DataInput.h"
#include "org/egothor/stemmer/Row.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *Trie::class$ = NULL;
      jmethodID *Trie::mids$ = NULL;
      bool Trie::live$ = false;

      jclass Trie::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/Trie");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_e051d6a6] = env->getMethodID(cls, "<init>", "(Ljava/io/DataInput;)V");
          mids$[mid_init$_bb0c767f] = env->getMethodID(cls, "<init>", "(Z)V");
          mids$[mid_init$_ed85fe83] = env->getMethodID(cls, "<init>", "(ZILjava/util/List;Ljava/util/List;)V");
          mids$[mid_getAll_2fa560b3] = env->getMethodID(cls, "getAll", "(Ljava/lang/CharSequence;)[Ljava/lang/CharSequence;");
          mids$[mid_getCells_54c6a179] = env->getMethodID(cls, "getCells", "()I");
          mids$[mid_getCellsPnt_54c6a179] = env->getMethodID(cls, "getCellsPnt", "()I");
          mids$[mid_getCellsVal_54c6a179] = env->getMethodID(cls, "getCellsVal", "()I");
          mids$[mid_getFully_856f5013] = env->getMethodID(cls, "getFully", "(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;");
          mids$[mid_getLastOnPath_856f5013] = env->getMethodID(cls, "getLastOnPath", "(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;");
          mids$[mid_printInfo_bd6af9ff] = env->getMethodID(cls, "printInfo", "(Ljava/io/PrintStream;Ljava/lang/CharSequence;)V");
          mids$[mid_reduce_6ee87cd1] = env->getMethodID(cls, "reduce", "(Lorg/egothor/stemmer/Reduce;)Lorg/egothor/stemmer/Trie;");
          mids$[mid_store_cfb051e6] = env->getMethodID(cls, "store", "(Ljava/io/DataOutput;)V");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      Trie::Trie(const ::java::io::DataInput & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e051d6a6, a0.this$)) {}

      Trie::Trie(jboolean a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_bb0c767f, a0)) {}

      Trie::Trie(jboolean a0, jint a1, const ::java::util::List & a2, const ::java::util::List & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ed85fe83, a0, a1, a2.this$, a3.this$)) {}

      JArray< ::java::lang::CharSequence > Trie::getAll(const ::java::lang::CharSequence & a0) const
      {
        return JArray< ::java::lang::CharSequence >(env->callObjectMethod(this$, mids$[mid_getAll_2fa560b3], a0.this$));
      }

      jint Trie::getCells() const
      {
        return env->callIntMethod(this$, mids$[mid_getCells_54c6a179]);
      }

      jint Trie::getCellsPnt() const
      {
        return env->callIntMethod(this$, mids$[mid_getCellsPnt_54c6a179]);
      }

      jint Trie::getCellsVal() const
      {
        return env->callIntMethod(this$, mids$[mid_getCellsVal_54c6a179]);
      }

      ::java::lang::CharSequence Trie::getFully(const ::java::lang::CharSequence & a0) const
      {
        return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getFully_856f5013], a0.this$));
      }

      ::java::lang::CharSequence Trie::getLastOnPath(const ::java::lang::CharSequence & a0) const
      {
        return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getLastOnPath_856f5013], a0.this$));
      }

      void Trie::printInfo(const ::java::io::PrintStream & a0, const ::java::lang::CharSequence & a1) const
      {
        env->callVoidMethod(this$, mids$[mid_printInfo_bd6af9ff], a0.this$, a1.this$);
      }

      Trie Trie::reduce(const ::org::egothor::stemmer::Reduce & a0) const
      {
        return Trie(env->callObjectMethod(this$, mids$[mid_reduce_6ee87cd1], a0.this$));
      }

      void Trie::store(const ::java::io::DataOutput & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_store_cfb051e6], a0.this$);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_Trie_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Trie_instance_(PyTypeObject *type, PyObject *arg);
      static int t_Trie_init_(t_Trie *self, PyObject *args, PyObject *kwds);
      static PyObject *t_Trie_getAll(t_Trie *self, PyObject *arg);
      static PyObject *t_Trie_getCells(t_Trie *self);
      static PyObject *t_Trie_getCellsPnt(t_Trie *self);
      static PyObject *t_Trie_getCellsVal(t_Trie *self);
      static PyObject *t_Trie_getFully(t_Trie *self, PyObject *arg);
      static PyObject *t_Trie_getLastOnPath(t_Trie *self, PyObject *arg);
      static PyObject *t_Trie_printInfo(t_Trie *self, PyObject *args);
      static PyObject *t_Trie_reduce(t_Trie *self, PyObject *arg);
      static PyObject *t_Trie_store(t_Trie *self, PyObject *arg);
      static PyObject *t_Trie_get__cells(t_Trie *self, void *data);
      static PyObject *t_Trie_get__cellsPnt(t_Trie *self, void *data);
      static PyObject *t_Trie_get__cellsVal(t_Trie *self, void *data);
      static PyGetSetDef t_Trie__fields_[] = {
        DECLARE_GET_FIELD(t_Trie, cells),
        DECLARE_GET_FIELD(t_Trie, cellsPnt),
        DECLARE_GET_FIELD(t_Trie, cellsVal),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_Trie__methods_[] = {
        DECLARE_METHOD(t_Trie, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Trie, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Trie, getAll, METH_O),
        DECLARE_METHOD(t_Trie, getCells, METH_NOARGS),
        DECLARE_METHOD(t_Trie, getCellsPnt, METH_NOARGS),
        DECLARE_METHOD(t_Trie, getCellsVal, METH_NOARGS),
        DECLARE_METHOD(t_Trie, getFully, METH_O),
        DECLARE_METHOD(t_Trie, getLastOnPath, METH_O),
        DECLARE_METHOD(t_Trie, printInfo, METH_VARARGS),
        DECLARE_METHOD(t_Trie, reduce, METH_O),
        DECLARE_METHOD(t_Trie, store, METH_O),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(Trie, t_Trie, ::java::lang::Object, Trie, t_Trie_init_, 0, 0, t_Trie__fields_, 0, 0);

      void t_Trie::install(PyObject *module)
      {
        installType(&PY_TYPE(Trie), module, "Trie", 0);
      }

      void t_Trie::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(Trie).tp_dict, "class_", make_descriptor(Trie::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(Trie).tp_dict, "wrapfn_", make_descriptor(t_Trie::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(Trie).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Trie_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Trie::initializeClass, 1)))
          return NULL;
        return t_Trie::wrap_Object(Trie(((t_Trie *) arg)->object.this$));
      }
      static PyObject *t_Trie_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Trie::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_Trie_init_(t_Trie *self, PyObject *args, PyObject *kwds)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            ::java::io::DataInput a0((jobject) NULL);
            Trie object((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::DataInput::initializeClass, &a0))
            {
              INT_CALL(object = Trie(a0));
              self->object = object;
              break;
            }
          }
          {
            jboolean a0;
            Trie object((jobject) NULL);

            if (!parseArgs(args, "Z", &a0))
            {
              INT_CALL(object = Trie(a0));
              self->object = object;
              break;
            }
          }
          goto err;
         case 4:
          {
            jboolean a0;
            jint a1;
            ::java::util::List a2((jobject) NULL);
            PyTypeObject **p2;
            ::java::util::List a3((jobject) NULL);
            PyTypeObject **p3;
            Trie object((jobject) NULL);

            if (!parseArgs(args, "ZIKK", ::java::util::List::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_List::parameters_, &a3, &p3, ::java::util::t_List::parameters_))
            {
              INT_CALL(object = Trie(a0, a1, a2, a3));
              self->object = object;
              break;
            }
          }
         default:
         err:
          PyErr_SetArgsError((PyObject *) self, "__init__", args);
          return -1;
        }

        return 0;
      }

      static PyObject *t_Trie_getAll(t_Trie *self, PyObject *arg)
      {
        ::java::lang::CharSequence a0((jobject) NULL);
        JArray< ::java::lang::CharSequence > result((jobject) NULL);

        if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
        {
          OBJ_CALL(result = self->object.getAll(a0));
          return JArray<jobject>(result.this$).wrap(::java::lang::t_CharSequence::wrap_jobject);
        }

        PyErr_SetArgsError((PyObject *) self, "getAll", arg);
        return NULL;
      }

      static PyObject *t_Trie_getCells(t_Trie *self)
      {
        jint result;
        OBJ_CALL(result = self->object.getCells());
        return PyInt_FromLong((long) result);
      }

      static PyObject *t_Trie_getCellsPnt(t_Trie *self)
      {
        jint result;
        OBJ_CALL(result = self->object.getCellsPnt());
        return PyInt_FromLong((long) result);
      }

      static PyObject *t_Trie_getCellsVal(t_Trie *self)
      {
        jint result;
        OBJ_CALL(result = self->object.getCellsVal());
        return PyInt_FromLong((long) result);
      }

      static PyObject *t_Trie_getFully(t_Trie *self, PyObject *arg)
      {
        ::java::lang::CharSequence a0((jobject) NULL);
        ::java::lang::CharSequence result((jobject) NULL);

        if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
        {
          OBJ_CALL(result = self->object.getFully(a0));
          return ::java::lang::t_CharSequence::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "getFully", arg);
        return NULL;
      }

      static PyObject *t_Trie_getLastOnPath(t_Trie *self, PyObject *arg)
      {
        ::java::lang::CharSequence a0((jobject) NULL);
        ::java::lang::CharSequence result((jobject) NULL);

        if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
        {
          OBJ_CALL(result = self->object.getLastOnPath(a0));
          return ::java::lang::t_CharSequence::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "getLastOnPath", arg);
        return NULL;
      }

      static PyObject *t_Trie_printInfo(t_Trie *self, PyObject *args)
      {
        ::java::io::PrintStream a0((jobject) NULL);
        ::java::lang::CharSequence a1((jobject) NULL);

        if (!parseArgs(args, "kO", ::java::io::PrintStream::initializeClass, &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
        {
          OBJ_CALL(self->object.printInfo(a0, a1));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "printInfo", args);
        return NULL;
      }

      static PyObject *t_Trie_reduce(t_Trie *self, PyObject *arg)
      {
        ::org::egothor::stemmer::Reduce a0((jobject) NULL);
        Trie result((jobject) NULL);

        if (!parseArg(arg, "k", ::org::egothor::stemmer::Reduce::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.reduce(a0));
          return t_Trie::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "reduce", arg);
        return NULL;
      }

      static PyObject *t_Trie_store(t_Trie *self, PyObject *arg)
      {
        ::java::io::DataOutput a0((jobject) NULL);

        if (!parseArg(arg, "k", ::java::io::DataOutput::initializeClass, &a0))
        {
          OBJ_CALL(self->object.store(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "store", arg);
        return NULL;
      }

      static PyObject *t_Trie_get__cells(t_Trie *self, void *data)
      {
        jint value;
        OBJ_CALL(value = self->object.getCells());
        return PyInt_FromLong((long) value);
      }

      static PyObject *t_Trie_get__cellsPnt(t_Trie *self, void *data)
      {
        jint value;
        OBJ_CALL(value = self->object.getCellsPnt());
        return PyInt_FromLong((long) value);
      }

      static PyObject *t_Trie_get__cellsVal(t_Trie *self, void *data)
      {
        jint value;
        OBJ_CALL(value = self->object.getCellsVal());
        return PyInt_FromLong((long) value);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/antlr/runtime/ParserRuleReturnScope.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace antlr {
    namespace runtime {

      ::java::lang::Class *ParserRuleReturnScope::class$ = NULL;
      jmethodID *ParserRuleReturnScope::mids$ = NULL;
      bool ParserRuleReturnScope::live$ = false;

      jclass ParserRuleReturnScope::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/antlr/runtime/ParserRuleReturnScope");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
          mids$[mid_getStart_846352c3] = env->getMethodID(cls, "getStart", "()Ljava/lang/Object;");
          mids$[mid_getStop_846352c3] = env->getMethodID(cls, "getStop", "()Ljava/lang/Object;");
          mids$[mid_getTree_846352c3] = env->getMethodID(cls, "getTree", "()Ljava/lang/Object;");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      ParserRuleReturnScope::ParserRuleReturnScope() : ::org::antlr::runtime::RuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

      ::java::lang::Object ParserRuleReturnScope::getStart() const
      {
        return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getStart_846352c3]));
      }

      ::java::lang::Object ParserRuleReturnScope::getStop() const
      {
        return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getStop_846352c3]));
      }

      ::java::lang::Object ParserRuleReturnScope::getTree() const
      {
        return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getTree_846352c3]));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace antlr {
    namespace runtime {
      static PyObject *t_ParserRuleReturnScope_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_ParserRuleReturnScope_instance_(PyTypeObject *type, PyObject *arg);
      static int t_ParserRuleReturnScope_init_(t_ParserRuleReturnScope *self, PyObject *args, PyObject *kwds);
      static PyObject *t_ParserRuleReturnScope_getStart(t_ParserRuleReturnScope *self, PyObject *args);
      static PyObject *t_ParserRuleReturnScope_getStop(t_ParserRuleReturnScope *self, PyObject *args);
      static PyObject *t_ParserRuleReturnScope_getTree(t_ParserRuleReturnScope *self, PyObject *args);
      static PyObject *t_ParserRuleReturnScope_get__start(t_ParserRuleReturnScope *self, void *data);
      static PyObject *t_ParserRuleReturnScope_get__stop(t_ParserRuleReturnScope *self, void *data);
      static PyObject *t_ParserRuleReturnScope_get__tree(t_ParserRuleReturnScope *self, void *data);
      static PyGetSetDef t_ParserRuleReturnScope__fields_[] = {
        DECLARE_GET_FIELD(t_ParserRuleReturnScope, start),
        DECLARE_GET_FIELD(t_ParserRuleReturnScope, stop),
        DECLARE_GET_FIELD(t_ParserRuleReturnScope, tree),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_ParserRuleReturnScope__methods_[] = {
        DECLARE_METHOD(t_ParserRuleReturnScope, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_ParserRuleReturnScope, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_ParserRuleReturnScope, getStart, METH_VARARGS),
        DECLARE_METHOD(t_ParserRuleReturnScope, getStop, METH_VARARGS),
        DECLARE_METHOD(t_ParserRuleReturnScope, getTree, METH_VARARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(ParserRuleReturnScope, t_ParserRuleReturnScope, ::org::antlr::runtime::RuleReturnScope, ParserRuleReturnScope, t_ParserRuleReturnScope_init_, 0, 0, t_ParserRuleReturnScope__fields_, 0, 0);

      void t_ParserRuleReturnScope::install(PyObject *module)
      {
        installType(&PY_TYPE(ParserRuleReturnScope), module, "ParserRuleReturnScope", 0);
      }

      void t_ParserRuleReturnScope::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(ParserRuleReturnScope).tp_dict, "class_", make_descriptor(ParserRuleReturnScope::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(ParserRuleReturnScope).tp_dict, "wrapfn_", make_descriptor(t_ParserRuleReturnScope::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(ParserRuleReturnScope).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_ParserRuleReturnScope_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, ParserRuleReturnScope::initializeClass, 1)))
          return NULL;
        return t_ParserRuleReturnScope::wrap_Object(ParserRuleReturnScope(((t_ParserRuleReturnScope *) arg)->object.this$));
      }
      static PyObject *t_ParserRuleReturnScope_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, ParserRuleReturnScope::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_ParserRuleReturnScope_init_(t_ParserRuleReturnScope *self, PyObject *args, PyObject *kwds)
      {
        ParserRuleReturnScope object((jobject) NULL);

        INT_CALL(object = ParserRuleReturnScope());
        self->object = object;

        return 0;
      }

      static PyObject *t_ParserRuleReturnScope_getStart(t_ParserRuleReturnScope *self, PyObject *args)
      {
        ::java::lang::Object result((jobject) NULL);

        if (!parseArgs(args, ""))
        {
          OBJ_CALL(result = self->object.getStart());
          return ::java::lang::t_Object::wrap_Object(result);
        }

        return callSuper(&PY_TYPE(ParserRuleReturnScope), (PyObject *) self, "getStart", args, 2);
      }

      static PyObject *t_ParserRuleReturnScope_getStop(t_ParserRuleReturnScope *self, PyObject *args)
      {
        ::java::lang::Object result((jobject) NULL);

        if (!parseArgs(args, ""))
        {
          OBJ_CALL(result = self->object.getStop());
          return ::java::lang::t_Object::wrap_Object(result);
        }

        return callSuper(&PY_TYPE(ParserRuleReturnScope), (PyObject *) self, "getStop", args, 2);
      }

      static PyObject *t_ParserRuleReturnScope_getTree(t_ParserRuleReturnScope *self, PyObject *args)
      {
        ::java::lang::Object result((jobject) NULL);

        if (!parseArgs(args, ""))
        {
          OBJ_CALL(result = self->object.getTree());
          return ::java::lang::t_Object::wrap_Object(result);
        }

        return callSuper(&PY_TYPE(ParserRuleReturnScope), (PyObject *) self, "getTree", args, 2);
      }

      static PyObject *t_ParserRuleReturnScope_get__start(t_ParserRuleReturnScope *self, void *data)
      {
        ::java::lang::Object value((jobject) NULL);
        OBJ_CALL(value = self->object.getStart());
        return ::java::lang::t_Object::wrap_Object(value);
      }

      static PyObject *t_ParserRuleReturnScope_get__stop(t_ParserRuleReturnScope *self, void *data)
      {
        ::java::lang::Object value((jobject) NULL);
        OBJ_CALL(value = self->object.getStop());
        return ::java::lang::t_Object::wrap_Object(value);
      }

      static PyObject *t_ParserRuleReturnScope_get__tree(t_ParserRuleReturnScope *self, void *data)
      {
        ::java::lang::Object value((jobject) NULL);
        OBJ_CALL(value = self->object.getTree());
        return ::java::lang::t_Object::wrap_Object(value);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/postingshighlight/PassageFormatter.h"
#include "org/apache/lucene/search/postingshighlight/Passage.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace postingshighlight {

          ::java::lang::Class *PassageFormatter::class$ = NULL;
          jmethodID *PassageFormatter::mids$ = NULL;
          bool PassageFormatter::live$ = false;

          jclass PassageFormatter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/postingshighlight/PassageFormatter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_format_2ef5b250] = env->getMethodID(cls, "format", "([Lorg/apache/lucene/search/postingshighlight/Passage;Ljava/lang/String;)Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PassageFormatter::PassageFormatter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::java::lang::Object PassageFormatter::format(const JArray< ::org::apache::lucene::search::postingshighlight::Passage > & a0, const ::java::lang::String & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_format_2ef5b250], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace postingshighlight {
          static PyObject *t_PassageFormatter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PassageFormatter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PassageFormatter_init_(t_PassageFormatter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PassageFormatter_format(t_PassageFormatter *self, PyObject *args);

          static PyMethodDef t_PassageFormatter__methods_[] = {
            DECLARE_METHOD(t_PassageFormatter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PassageFormatter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PassageFormatter, format, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PassageFormatter, t_PassageFormatter, ::java::lang::Object, PassageFormatter, t_PassageFormatter_init_, 0, 0, 0, 0, 0);

          void t_PassageFormatter::install(PyObject *module)
          {
            installType(&PY_TYPE(PassageFormatter), module, "PassageFormatter", 0);
          }

          void t_PassageFormatter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PassageFormatter).tp_dict, "class_", make_descriptor(PassageFormatter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PassageFormatter).tp_dict, "wrapfn_", make_descriptor(t_PassageFormatter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PassageFormatter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PassageFormatter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PassageFormatter::initializeClass, 1)))
              return NULL;
            return t_PassageFormatter::wrap_Object(PassageFormatter(((t_PassageFormatter *) arg)->object.this$));
          }
          static PyObject *t_PassageFormatter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PassageFormatter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PassageFormatter_init_(t_PassageFormatter *self, PyObject *args, PyObject *kwds)
          {
            PassageFormatter object((jobject) NULL);

            INT_CALL(object = PassageFormatter());
            self->object = object;

            return 0;
          }

          static PyObject *t_PassageFormatter_format(t_PassageFormatter *self, PyObject *args)
          {
            JArray< ::org::apache::lucene::search::postingshighlight::Passage > a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "[ks", ::org::apache::lucene::search::postingshighlight::Passage::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.format(a0, a1));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "format", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/ConstNumberSource.h"
#include "java/lang/Number.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *ConstNumberSource::class$ = NULL;
            jmethodID *ConstNumberSource::mids$ = NULL;
            bool ConstNumberSource::live$ = false;

            jclass ConstNumberSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/ConstNumberSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_getBool_54c6a16a] = env->getMethodID(cls, "getBool", "()Z");
                mids$[mid_getDouble_54c6a174] = env->getMethodID(cls, "getDouble", "()D");
                mids$[mid_getFloat_54c6a176] = env->getMethodID(cls, "getFloat", "()F");
                mids$[mid_getInt_54c6a179] = env->getMethodID(cls, "getInt", "()I");
                mids$[mid_getLong_54c6a17a] = env->getMethodID(cls, "getLong", "()J");
                mids$[mid_getNumber_ee47e3e1] = env->getMethodID(cls, "getNumber", "()Ljava/lang/Number;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ConstNumberSource::ConstNumberSource() : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            jboolean ConstNumberSource::getBool() const
            {
              return env->callBooleanMethod(this$, mids$[mid_getBool_54c6a16a]);
            }

            jdouble ConstNumberSource::getDouble() const
            {
              return env->callDoubleMethod(this$, mids$[mid_getDouble_54c6a174]);
            }

            jfloat ConstNumberSource::getFloat() const
            {
              return env->callFloatMethod(this$, mids$[mid_getFloat_54c6a176]);
            }

            jint ConstNumberSource::getInt() const
            {
              return env->callIntMethod(this$, mids$[mid_getInt_54c6a179]);
            }

            jlong ConstNumberSource::getLong() const
            {
              return env->callLongMethod(this$, mids$[mid_getLong_54c6a17a]);
            }

            ::java::lang::Number ConstNumberSource::getNumber() const
            {
              return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getNumber_ee47e3e1]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_ConstNumberSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ConstNumberSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ConstNumberSource_init_(t_ConstNumberSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ConstNumberSource_getBool(t_ConstNumberSource *self);
            static PyObject *t_ConstNumberSource_getDouble(t_ConstNumberSource *self);
            static PyObject *t_ConstNumberSource_getFloat(t_ConstNumberSource *self);
            static PyObject *t_ConstNumberSource_getInt(t_ConstNumberSource *self);
            static PyObject *t_ConstNumberSource_getLong(t_ConstNumberSource *self);
            static PyObject *t_ConstNumberSource_getNumber(t_ConstNumberSource *self);
            static PyObject *t_ConstNumberSource_get__bool(t_ConstNumberSource *self, void *data);
            static PyObject *t_ConstNumberSource_get__double(t_ConstNumberSource *self, void *data);
            static PyObject *t_ConstNumberSource_get__float(t_ConstNumberSource *self, void *data);
            static PyObject *t_ConstNumberSource_get__int(t_ConstNumberSource *self, void *data);
            static PyObject *t_ConstNumberSource_get__long(t_ConstNumberSource *self, void *data);
            static PyObject *t_ConstNumberSource_get__number(t_ConstNumberSource *self, void *data);
            static PyGetSetDef t_ConstNumberSource__fields_[] = {
              DECLARE_GET_FIELD(t_ConstNumberSource, bool),
              DECLARE_GET_FIELD(t_ConstNumberSource, double),
              DECLARE_GET_FIELD(t_ConstNumberSource, float),
              DECLARE_GET_FIELD(t_ConstNumberSource, int),
              DECLARE_GET_FIELD(t_ConstNumberSource, long),
              DECLARE_GET_FIELD(t_ConstNumberSource, number),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_ConstNumberSource__methods_[] = {
              DECLARE_METHOD(t_ConstNumberSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ConstNumberSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ConstNumberSource, getBool, METH_NOARGS),
              DECLARE_METHOD(t_ConstNumberSource, getDouble, METH_NOARGS),
              DECLARE_METHOD(t_ConstNumberSource, getFloat, METH_NOARGS),
              DECLARE_METHOD(t_ConstNumberSource, getInt, METH_NOARGS),
              DECLARE_METHOD(t_ConstNumberSource, getLong, METH_NOARGS),
              DECLARE_METHOD(t_ConstNumberSource, getNumber, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(ConstNumberSource, t_ConstNumberSource, ::org::apache::lucene::queries::function::ValueSource, ConstNumberSource, t_ConstNumberSource_init_, 0, 0, t_ConstNumberSource__fields_, 0, 0);

            void t_ConstNumberSource::install(PyObject *module)
            {
              installType(&PY_TYPE(ConstNumberSource), module, "ConstNumberSource", 0);
            }

            void t_ConstNumberSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(ConstNumberSource).tp_dict, "class_", make_descriptor(ConstNumberSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(ConstNumberSource).tp_dict, "wrapfn_", make_descriptor(t_ConstNumberSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(ConstNumberSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ConstNumberSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ConstNumberSource::initializeClass, 1)))
                return NULL;
              return t_ConstNumberSource::wrap_Object(ConstNumberSource(((t_ConstNumberSource *) arg)->object.this$));
            }
            static PyObject *t_ConstNumberSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ConstNumberSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ConstNumberSource_init_(t_ConstNumberSource *self, PyObject *args, PyObject *kwds)
            {
              ConstNumberSource object((jobject) NULL);

              INT_CALL(object = ConstNumberSource());
              self->object = object;

              return 0;
            }

            static PyObject *t_ConstNumberSource_getBool(t_ConstNumberSource *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.getBool());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_ConstNumberSource_getDouble(t_ConstNumberSource *self)
            {
              jdouble result;
              OBJ_CALL(result = self->object.getDouble());
              return PyFloat_FromDouble((double) result);
            }

            static PyObject *t_ConstNumberSource_getFloat(t_ConstNumberSource *self)
            {
              jfloat result;
              OBJ_CALL(result = self->object.getFloat());
              return PyFloat_FromDouble((double) result);
            }

            static PyObject *t_ConstNumberSource_getInt(t_ConstNumberSource *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getInt());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_ConstNumberSource_getLong(t_ConstNumberSource *self)
            {
              jlong result;
              OBJ_CALL(result = self->object.getLong());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            static PyObject *t_ConstNumberSource_getNumber(t_ConstNumberSource *self)
            {
              ::java::lang::Number result((jobject) NULL);
              OBJ_CALL(result = self->object.getNumber());
              return ::java::lang::t_Number::wrap_Object(result);
            }

            static PyObject *t_ConstNumberSource_get__bool(t_ConstNumberSource *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.getBool());
              Py_RETURN_BOOL(value);
            }

            static PyObject *t_ConstNumberSource_get__double(t_ConstNumberSource *self, void *data)
            {
              jdouble value;
              OBJ_CALL(value = self->object.getDouble());
              return PyFloat_FromDouble((double) value);
            }

            static PyObject *t_ConstNumberSource_get__float(t_ConstNumberSource *self, void *data)
            {
              jfloat value;
              OBJ_CALL(value = self->object.getFloat());
              return PyFloat_FromDouble((double) value);
            }

            static PyObject *t_ConstNumberSource_get__int(t_ConstNumberSource *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getInt());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_ConstNumberSource_get__long(t_ConstNumberSource *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object.getLong());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }

            static PyObject *t_ConstNumberSource_get__number(t_ConstNumberSource *self, void *data)
            {
              ::java::lang::Number value((jobject) NULL);
              OBJ_CALL(value = self->object.getNumber());
              return ::java::lang::t_Number::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/analyzing/AnalyzingQueryParser.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace analyzing {

          ::java::lang::Class *AnalyzingQueryParser::class$ = NULL;
          jmethodID *AnalyzingQueryParser::mids$ = NULL;
          bool AnalyzingQueryParser::live$ = false;

          jclass AnalyzingQueryParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/analyzing/AnalyzingQueryParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_504c192d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_getFuzzyQuery_45995161] = env->getMethodID(cls, "getFuzzyQuery", "(Ljava/lang/String;Ljava/lang/String;F)Lorg/apache/lucene/search/Query;");
              mids$[mid_getWildcardQuery_38d6e77e] = env->getMethodID(cls, "getWildcardQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_getPrefixQuery_38d6e77e] = env->getMethodID(cls, "getPrefixQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_analyzeSingleChunk_af6d27e3] = env->getMethodID(cls, "analyzeSingleChunk", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AnalyzingQueryParser::AnalyzingQueryParser(const ::org::apache::lucene::util::Version & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer & a2) : ::org::apache::lucene::queryparser::classic::QueryParser(env->newObject(initializeClass, &mids$, mid_init$_504c192d, a0.this$, a1.this$, a2.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace analyzing {
          static PyObject *t_AnalyzingQueryParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AnalyzingQueryParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AnalyzingQueryParser_init_(t_AnalyzingQueryParser *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_AnalyzingQueryParser__methods_[] = {
            DECLARE_METHOD(t_AnalyzingQueryParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AnalyzingQueryParser, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AnalyzingQueryParser, t_AnalyzingQueryParser, ::org::apache::lucene::queryparser::classic::QueryParser, AnalyzingQueryParser, t_AnalyzingQueryParser_init_, 0, 0, 0, 0, 0);

          void t_AnalyzingQueryParser::install(PyObject *module)
          {
            installType(&PY_TYPE(AnalyzingQueryParser), module, "AnalyzingQueryParser", 0);
          }

          void t_AnalyzingQueryParser::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AnalyzingQueryParser).tp_dict, "class_", make_descriptor(AnalyzingQueryParser::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AnalyzingQueryParser).tp_dict, "wrapfn_", make_descriptor(t_AnalyzingQueryParser::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AnalyzingQueryParser).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AnalyzingQueryParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AnalyzingQueryParser::initializeClass, 1)))
              return NULL;
            return t_AnalyzingQueryParser::wrap_Object(AnalyzingQueryParser(((t_AnalyzingQueryParser *) arg)->object.this$));
          }
          static PyObject *t_AnalyzingQueryParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AnalyzingQueryParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AnalyzingQueryParser_init_(t_AnalyzingQueryParser *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
            AnalyzingQueryParser object((jobject) NULL);

            if (!parseArgs(args, "Ksk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
            {
              INT_CALL(object = AnalyzingQueryParser(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanFirstQuery.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanFirstQuery::class$ = NULL;
          jmethodID *SpanFirstQuery::mids$ = NULL;
          bool SpanFirstQuery::live$ = false;

          jclass SpanFirstQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanFirstQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_611c8717] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanQuery;I)V");
              mids$[mid_clone_cf87c9b3] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/search/spans/SpanFirstQuery;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_acceptPosition_5342f73f] = env->getMethodID(cls, "acceptPosition", "(Lorg/apache/lucene/search/spans/Spans;)Lorg/apache/lucene/search/spans/SpanPositionCheckQuery$AcceptStatus;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanFirstQuery::SpanFirstQuery(const ::org::apache::lucene::search::spans::SpanQuery & a0, jint a1) : ::org::apache::lucene::search::spans::SpanPositionRangeQuery(env->newObject(initializeClass, &mids$, mid_init$_611c8717, a0.this$, a1)) {}

          SpanFirstQuery SpanFirstQuery::clone() const
          {
            return SpanFirstQuery(env->callObjectMethod(this$, mids$[mid_clone_cf87c9b3]));
          }

          jboolean SpanFirstQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint SpanFirstQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String SpanFirstQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanFirstQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanFirstQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanFirstQuery_init_(t_SpanFirstQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanFirstQuery_clone(t_SpanFirstQuery *self, PyObject *args);
          static PyObject *t_SpanFirstQuery_equals(t_SpanFirstQuery *self, PyObject *args);
          static PyObject *t_SpanFirstQuery_hashCode(t_SpanFirstQuery *self, PyObject *args);
          static PyObject *t_SpanFirstQuery_toString(t_SpanFirstQuery *self, PyObject *args);

          static PyMethodDef t_SpanFirstQuery__methods_[] = {
            DECLARE_METHOD(t_SpanFirstQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanFirstQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanFirstQuery, clone, METH_VARARGS),
            DECLARE_METHOD(t_SpanFirstQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_SpanFirstQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SpanFirstQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanFirstQuery, t_SpanFirstQuery, ::org::apache::lucene::search::spans::SpanPositionRangeQuery, SpanFirstQuery, t_SpanFirstQuery_init_, 0, 0, 0, 0, 0);

          void t_SpanFirstQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanFirstQuery), module, "SpanFirstQuery", 0);
          }

          void t_SpanFirstQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanFirstQuery).tp_dict, "class_", make_descriptor(SpanFirstQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanFirstQuery).tp_dict, "wrapfn_", make_descriptor(t_SpanFirstQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanFirstQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanFirstQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanFirstQuery::initializeClass, 1)))
              return NULL;
            return t_SpanFirstQuery::wrap_Object(SpanFirstQuery(((t_SpanFirstQuery *) arg)->object.this$));
          }
          static PyObject *t_SpanFirstQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanFirstQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanFirstQuery_init_(t_SpanFirstQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spans::SpanQuery a0((jobject) NULL);
            jint a1;
            SpanFirstQuery object((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0, &a1))
            {
              INT_CALL(object = SpanFirstQuery(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanFirstQuery_clone(t_SpanFirstQuery *self, PyObject *args)
          {
            SpanFirstQuery result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_SpanFirstQuery::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanFirstQuery), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_SpanFirstQuery_equals(t_SpanFirstQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SpanFirstQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SpanFirstQuery_hashCode(t_SpanFirstQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SpanFirstQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SpanFirstQuery_toString(t_SpanFirstQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanFirstQuery), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/CharStream.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *CharStream::class$ = NULL;
          jmethodID *CharStream::mids$ = NULL;
          bool CharStream::live$ = false;

          jclass CharStream::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/CharStream");

              mids$ = new jmethodID[max_mid];
              mids$[mid_BeginToken_54c6a173] = env->getMethodID(cls, "BeginToken", "()C");
              mids$[mid_Done_54c6a166] = env->getMethodID(cls, "Done", "()V");
              mids$[mid_GetImage_14c7b5c5] = env->getMethodID(cls, "GetImage", "()Ljava/lang/String;");
              mids$[mid_GetSuffix_b4292e99] = env->getMethodID(cls, "GetSuffix", "(I)[C");
              mids$[mid_backup_39c7bd3c] = env->getMethodID(cls, "backup", "(I)V");
              mids$[mid_getBeginColumn_54c6a179] = env->getMethodID(cls, "getBeginColumn", "()I");
              mids$[mid_getBeginLine_54c6a179] = env->getMethodID(cls, "getBeginLine", "()I");
              mids$[mid_getColumn_54c6a179] = env->getMethodID(cls, "getColumn", "()I");
              mids$[mid_getEndColumn_54c6a179] = env->getMethodID(cls, "getEndColumn", "()I");
              mids$[mid_getEndLine_54c6a179] = env->getMethodID(cls, "getEndLine", "()I");
              mids$[mid_getLine_54c6a179] = env->getMethodID(cls, "getLine", "()I");
              mids$[mid_readChar_54c6a173] = env->getMethodID(cls, "readChar", "()C");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jchar CharStream::BeginToken() const
          {
            return env->callCharMethod(this$, mids$[mid_BeginToken_54c6a173]);
          }

          void CharStream::Done() const
          {
            env->callVoidMethod(this$, mids$[mid_Done_54c6a166]);
          }

          ::java::lang::String CharStream::GetImage() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_GetImage_14c7b5c5]));
          }

          JArray< jchar > CharStream::GetSuffix(jint a0) const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_GetSuffix_b4292e99], a0));
          }

          void CharStream::backup(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_backup_39c7bd3c], a0);
          }

          jint CharStream::getBeginColumn() const
          {
            return env->callIntMethod(this$, mids$[mid_getBeginColumn_54c6a179]);
          }

          jint CharStream::getBeginLine() const
          {
            return env->callIntMethod(this$, mids$[mid_getBeginLine_54c6a179]);
          }

          jint CharStream::getColumn() const
          {
            return env->callIntMethod(this$, mids$[mid_getColumn_54c6a179]);
          }

          jint CharStream::getEndColumn() const
          {
            return env->callIntMethod(this$, mids$[mid_getEndColumn_54c6a179]);
          }

          jint CharStream::getEndLine() const
          {
            return env->callIntMethod(this$, mids$[mid_getEndLine_54c6a179]);
          }

          jint CharStream::getLine() const
          {
            return env->callIntMethod(this$, mids$[mid_getLine_54c6a179]);
          }

          jchar CharStream::readChar() const
          {
            return env->callCharMethod(this$, mids$[mid_readChar_54c6a173]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_CharStream_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharStream_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharStream_BeginToken(t_CharStream *self);
          static PyObject *t_CharStream_Done(t_CharStream *self);
          static PyObject *t_CharStream_GetImage(t_CharStream *self);
          static PyObject *t_CharStream_GetSuffix(t_CharStream *self, PyObject *arg);
          static PyObject *t_CharStream_backup(t_CharStream *self, PyObject *arg);
          static PyObject *t_CharStream_getBeginColumn(t_CharStream *self);
          static PyObject *t_CharStream_getBeginLine(t_CharStream *self);
          static PyObject *t_CharStream_getColumn(t_CharStream *self);
          static PyObject *t_CharStream_getEndColumn(t_CharStream *self);
          static PyObject *t_CharStream_getEndLine(t_CharStream *self);
          static PyObject *t_CharStream_getLine(t_CharStream *self);
          static PyObject *t_CharStream_readChar(t_CharStream *self);
          static PyObject *t_CharStream_get__beginColumn(t_CharStream *self, void *data);
          static PyObject *t_CharStream_get__beginLine(t_CharStream *self, void *data);
          static PyObject *t_CharStream_get__column(t_CharStream *self, void *data);
          static PyObject *t_CharStream_get__endColumn(t_CharStream *self, void *data);
          static PyObject *t_CharStream_get__endLine(t_CharStream *self, void *data);
          static PyObject *t_CharStream_get__line(t_CharStream *self, void *data);
          static PyGetSetDef t_CharStream__fields_[] = {
            DECLARE_GET_FIELD(t_CharStream, beginColumn),
            DECLARE_GET_FIELD(t_CharStream, beginLine),
            DECLARE_GET_FIELD(t_CharStream, column),
            DECLARE_GET_FIELD(t_CharStream, endColumn),
            DECLARE_GET_FIELD(t_CharStream, endLine),
            DECLARE_GET_FIELD(t_CharStream, line),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CharStream__methods_[] = {
            DECLARE_METHOD(t_CharStream, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharStream, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharStream, BeginToken, METH_NOARGS),
            DECLARE_METHOD(t_CharStream, Done, METH_NOARGS),
            DECLARE_METHOD(t_CharStream, GetImage, METH_NOARGS),
            DECLARE_METHOD(t_CharStream, GetSuffix, METH_O),
            DECLARE_METHOD(t_CharStream, backup, METH_O),
            DECLARE_METHOD(t_CharStream, getBeginColumn, METH_NOARGS),
            DECLARE_METHOD(t_CharStream, getBeginLine, METH_NOARGS),
            DECLARE_METHOD(t_CharStream, getColumn, METH_NOARGS),
            DECLARE_METHOD(t_CharStream, getEndColumn, METH_NOARGS),
            DECLARE_METHOD(t_CharStream, getEndLine, METH_NOARGS),
            DECLARE_METHOD(t_CharStream, getLine, METH_NOARGS),
            DECLARE_METHOD(t_CharStream, readChar, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CharStream, t_CharStream, ::java::lang::Object, CharStream, abstract_init, 0, 0, t_CharStream__fields_, 0, 0);

          void t_CharStream::install(PyObject *module)
          {
            installType(&PY_TYPE(CharStream), module, "CharStream", 0);
          }

          void t_CharStream::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CharStream).tp_dict, "class_", make_descriptor(CharStream::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CharStream).tp_dict, "wrapfn_", make_descriptor(t_CharStream::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CharStream).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CharStream_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharStream::initializeClass, 1)))
              return NULL;
            return t_CharStream::wrap_Object(CharStream(((t_CharStream *) arg)->object.this$));
          }
          static PyObject *t_CharStream_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharStream::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CharStream_BeginToken(t_CharStream *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.BeginToken());
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }

          static PyObject *t_CharStream_Done(t_CharStream *self)
          {
            OBJ_CALL(self->object.Done());
            Py_RETURN_NONE;
          }

          static PyObject *t_CharStream_GetImage(t_CharStream *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.GetImage());
            return j2p(result);
          }

          static PyObject *t_CharStream_GetSuffix(t_CharStream *self, PyObject *arg)
          {
            jint a0;
            JArray< jchar > result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.GetSuffix(a0));
              return result.wrap();
            }

            PyErr_SetArgsError((PyObject *) self, "GetSuffix", arg);
            return NULL;
          }

          static PyObject *t_CharStream_backup(t_CharStream *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.backup(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "backup", arg);
            return NULL;
          }

          static PyObject *t_CharStream_getBeginColumn(t_CharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getBeginColumn());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CharStream_getBeginLine(t_CharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getBeginLine());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CharStream_getColumn(t_CharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getColumn());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CharStream_getEndColumn(t_CharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEndColumn());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CharStream_getEndLine(t_CharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEndLine());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CharStream_getLine(t_CharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getLine());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CharStream_readChar(t_CharStream *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.readChar());
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }

          static PyObject *t_CharStream_get__beginColumn(t_CharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getBeginColumn());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_CharStream_get__beginLine(t_CharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getBeginLine());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_CharStream_get__column(t_CharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getColumn());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_CharStream_get__endColumn(t_CharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEndColumn());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_CharStream_get__endLine(t_CharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEndLine());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_CharStream_get__line(t_CharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getLine());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/TermFilter.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {

        ::java::lang::Class *TermFilter::class$ = NULL;
        jmethodID *TermFilter::mids$ = NULL;
        bool TermFilter::live$ = false;

        jclass TermFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/queries/TermFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7eca6a81] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getDocIdSet_ccce0897] = env->getMethodID(cls, "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_getTerm_0f71f314] = env->getMethodID(cls, "getTerm", "()Lorg/apache/lucene/index/Term;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TermFilter::TermFilter(const ::org::apache::lucene::index::Term & a0) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_7eca6a81, a0.this$)) {}

        jboolean TermFilter::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::search::DocIdSet TermFilter::getDocIdSet(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
        {
          return ::org::apache::lucene::search::DocIdSet(env->callObjectMethod(this$, mids$[mid_getDocIdSet_ccce0897], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::Term TermFilter::getTerm() const
        {
          return ::org::apache::lucene::index::Term(env->callObjectMethod(this$, mids$[mid_getTerm_0f71f314]));
        }

        jint TermFilter::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String TermFilter::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        static PyObject *t_TermFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TermFilter_init_(t_TermFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TermFilter_equals(t_TermFilter *self, PyObject *args);
        static PyObject *t_TermFilter_getDocIdSet(t_TermFilter *self, PyObject *args);
        static PyObject *t_TermFilter_getTerm(t_TermFilter *self);
        static PyObject *t_TermFilter_hashCode(t_TermFilter *self, PyObject *args);
        static PyObject *t_TermFilter_toString(t_TermFilter *self, PyObject *args);
        static PyObject *t_TermFilter_get__term(t_TermFilter *self, void *data);
        static PyGetSetDef t_TermFilter__fields_[] = {
          DECLARE_GET_FIELD(t_TermFilter, term),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TermFilter__methods_[] = {
          DECLARE_METHOD(t_TermFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermFilter, equals, METH_VARARGS),
          DECLARE_METHOD(t_TermFilter, getDocIdSet, METH_VARARGS),
          DECLARE_METHOD(t_TermFilter, getTerm, METH_NOARGS),
          DECLARE_METHOD(t_TermFilter, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_TermFilter, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermFilter, t_TermFilter, ::org::apache::lucene::search::Filter, TermFilter, t_TermFilter_init_, 0, 0, t_TermFilter__fields_, 0, 0);

        void t_TermFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(TermFilter), module, "TermFilter", 0);
        }

        void t_TermFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermFilter).tp_dict, "class_", make_descriptor(TermFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermFilter).tp_dict, "wrapfn_", make_descriptor(t_TermFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermFilter::initializeClass, 1)))
            return NULL;
          return t_TermFilter::wrap_Object(TermFilter(((t_TermFilter *) arg)->object.this$));
        }
        static PyObject *t_TermFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TermFilter_init_(t_TermFilter *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          TermFilter object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            INT_CALL(object = TermFilter(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TermFilter_equals(t_TermFilter *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(TermFilter), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_TermFilter_getDocIdSet(t_TermFilter *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocIdSet(a0, a1));
            return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(TermFilter), (PyObject *) self, "getDocIdSet", args, 2);
        }

        static PyObject *t_TermFilter_getTerm(t_TermFilter *self)
        {
          ::org::apache::lucene::index::Term result((jobject) NULL);
          OBJ_CALL(result = self->object.getTerm());
          return ::org::apache::lucene::index::t_Term::wrap_Object(result);
        }

        static PyObject *t_TermFilter_hashCode(t_TermFilter *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(TermFilter), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_TermFilter_toString(t_TermFilter *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(TermFilter), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_TermFilter_get__term(t_TermFilter *self, void *data)
        {
          ::org::apache::lucene::index::Term value((jobject) NULL);
          OBJ_CALL(value = self->object.getTerm());
          return ::org::apache::lucene::index::t_Term::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$ConfigurationKeys.h"
#include "java/util/Locale.h"
#include "java/util/TimeZone.h"
#include "org/apache/lucene/document/DateTools$Resolution.h"
#include "org/apache/lucene/queryparser/flexible/core/config/ConfigurationKey.h"
#include "java/lang/Class.h"
#include "java/lang/Float.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/NumericConfig.h"
#include "org/apache/lucene/search/MultiTermQuery$RewriteMethod.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/util/Map.h"
#include "java/lang/Boolean.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$Operator.h"
#include "java/lang/Integer.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/FuzzyConfig.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {

              ::java::lang::Class *StandardQueryConfigHandler$ConfigurationKeys::class$ = NULL;
              jmethodID *StandardQueryConfigHandler$ConfigurationKeys::mids$ = NULL;
              bool StandardQueryConfigHandler$ConfigurationKeys::live$ = false;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::ALLOW_LEADING_WILDCARD = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::ANALYZER = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::BOOST = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::DATE_RESOLUTION = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::DEFAULT_OPERATOR = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::ENABLE_POSITION_INCREMENTS = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::FIELD_BOOST_MAP = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::FIELD_DATE_RESOLUTION_MAP = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::FUZZY_CONFIG = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::LOCALE = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::LOWERCASE_EXPANDED_TERMS = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::MULTI_FIELDS = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::MULTI_TERM_REWRITE_METHOD = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::NUMERIC_CONFIG = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::NUMERIC_CONFIG_MAP = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::PHRASE_SLOP = NULL;
              ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey *StandardQueryConfigHandler$ConfigurationKeys::TIMEZONE = NULL;

              jclass StandardQueryConfigHandler$ConfigurationKeys::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$ConfigurationKeys");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  cls = (jclass) class$->this$;

                  ALLOW_LEADING_WILDCARD = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "ALLOW_LEADING_WILDCARD", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  ANALYZER = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "ANALYZER", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  BOOST = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "BOOST", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  DATE_RESOLUTION = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "DATE_RESOLUTION", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  DEFAULT_OPERATOR = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "DEFAULT_OPERATOR", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  ENABLE_POSITION_INCREMENTS = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "ENABLE_POSITION_INCREMENTS", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  FIELD_BOOST_MAP = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "FIELD_BOOST_MAP", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  FIELD_DATE_RESOLUTION_MAP = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "FIELD_DATE_RESOLUTION_MAP", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  FUZZY_CONFIG = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "FUZZY_CONFIG", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  LOCALE = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "LOCALE", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  LOWERCASE_EXPANDED_TERMS = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "LOWERCASE_EXPANDED_TERMS", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  MULTI_FIELDS = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "MULTI_FIELDS", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  MULTI_TERM_REWRITE_METHOD = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "MULTI_TERM_REWRITE_METHOD", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  NUMERIC_CONFIG = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "NUMERIC_CONFIG", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  NUMERIC_CONFIG_MAP = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "NUMERIC_CONFIG_MAP", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  PHRASE_SLOP = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "PHRASE_SLOP", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  TIMEZONE = new ::org::apache::lucene::queryparser::flexible::core::config::ConfigurationKey(env->getStaticObjectField(cls, "TIMEZONE", "Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              StandardQueryConfigHandler$ConfigurationKeys::StandardQueryConfigHandler$ConfigurationKeys() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {
              static PyObject *t_StandardQueryConfigHandler$ConfigurationKeys_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardQueryConfigHandler$ConfigurationKeys_instance_(PyTypeObject *type, PyObject *arg);
              static int t_StandardQueryConfigHandler$ConfigurationKeys_init_(t_StandardQueryConfigHandler$ConfigurationKeys *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_StandardQueryConfigHandler$ConfigurationKeys__methods_[] = {
                DECLARE_METHOD(t_StandardQueryConfigHandler$ConfigurationKeys, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardQueryConfigHandler$ConfigurationKeys, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(StandardQueryConfigHandler$ConfigurationKeys, t_StandardQueryConfigHandler$ConfigurationKeys, ::java::lang::Object, StandardQueryConfigHandler$ConfigurationKeys, t_StandardQueryConfigHandler$ConfigurationKeys_init_, 0, 0, 0, 0, 0);

              void t_StandardQueryConfigHandler$ConfigurationKeys::install(PyObject *module)
              {
                installType(&PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys), module, "StandardQueryConfigHandler$ConfigurationKeys", 0);
              }

              void t_StandardQueryConfigHandler$ConfigurationKeys::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "class_", make_descriptor(StandardQueryConfigHandler$ConfigurationKeys::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "wrapfn_", make_descriptor(t_StandardQueryConfigHandler$ConfigurationKeys::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "boxfn_", make_descriptor(boxObject));
                env->getClass(StandardQueryConfigHandler$ConfigurationKeys::initializeClass);
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "ALLOW_LEADING_WILDCARD", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::ALLOW_LEADING_WILDCARD)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "ANALYZER", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::ANALYZER)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "BOOST", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::BOOST)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "DATE_RESOLUTION", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::DATE_RESOLUTION)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "DEFAULT_OPERATOR", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::DEFAULT_OPERATOR)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "ENABLE_POSITION_INCREMENTS", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::ENABLE_POSITION_INCREMENTS)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "FIELD_BOOST_MAP", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::FIELD_BOOST_MAP)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "FIELD_DATE_RESOLUTION_MAP", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::FIELD_DATE_RESOLUTION_MAP)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "FUZZY_CONFIG", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::FUZZY_CONFIG)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "LOCALE", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::LOCALE)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "LOWERCASE_EXPANDED_TERMS", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::LOWERCASE_EXPANDED_TERMS)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "MULTI_FIELDS", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::MULTI_FIELDS)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "MULTI_TERM_REWRITE_METHOD", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::MULTI_TERM_REWRITE_METHOD)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "NUMERIC_CONFIG", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::NUMERIC_CONFIG)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "NUMERIC_CONFIG_MAP", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::NUMERIC_CONFIG_MAP)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "PHRASE_SLOP", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::PHRASE_SLOP)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$ConfigurationKeys).tp_dict, "TIMEZONE", make_descriptor(::org::apache::lucene::queryparser::flexible::core::config::t_ConfigurationKey::wrap_Object(*StandardQueryConfigHandler$ConfigurationKeys::TIMEZONE)));
              }

              static PyObject *t_StandardQueryConfigHandler$ConfigurationKeys_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StandardQueryConfigHandler$ConfigurationKeys::initializeClass, 1)))
                  return NULL;
                return t_StandardQueryConfigHandler$ConfigurationKeys::wrap_Object(StandardQueryConfigHandler$ConfigurationKeys(((t_StandardQueryConfigHandler$ConfigurationKeys *) arg)->object.this$));
              }
              static PyObject *t_StandardQueryConfigHandler$ConfigurationKeys_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StandardQueryConfigHandler$ConfigurationKeys::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_StandardQueryConfigHandler$ConfigurationKeys_init_(t_StandardQueryConfigHandler$ConfigurationKeys *self, PyObject *args, PyObject *kwds)
              {
                StandardQueryConfigHandler$ConfigurationKeys object((jobject) NULL);

                INT_CALL(object = StandardQueryConfigHandler$ConfigurationKeys());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fr/FrenchMinimalStemFilterFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {

          ::java::lang::Class *FrenchMinimalStemFilterFactory::class$ = NULL;
          jmethodID *FrenchMinimalStemFilterFactory::mids$ = NULL;
          bool FrenchMinimalStemFilterFactory::live$ = false;

          jclass FrenchMinimalStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fr/FrenchMinimalStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FrenchMinimalStemFilterFactory::FrenchMinimalStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream FrenchMinimalStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {
          static PyObject *t_FrenchMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FrenchMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FrenchMinimalStemFilterFactory_init_(t_FrenchMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FrenchMinimalStemFilterFactory_create(t_FrenchMinimalStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_FrenchMinimalStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_FrenchMinimalStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchMinimalStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchMinimalStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FrenchMinimalStemFilterFactory, t_FrenchMinimalStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, FrenchMinimalStemFilterFactory, t_FrenchMinimalStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_FrenchMinimalStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(FrenchMinimalStemFilterFactory), module, "FrenchMinimalStemFilterFactory", 0);
          }

          void t_FrenchMinimalStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FrenchMinimalStemFilterFactory).tp_dict, "class_", make_descriptor(FrenchMinimalStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FrenchMinimalStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_FrenchMinimalStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FrenchMinimalStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FrenchMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FrenchMinimalStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_FrenchMinimalStemFilterFactory::wrap_Object(FrenchMinimalStemFilterFactory(((t_FrenchMinimalStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_FrenchMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FrenchMinimalStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FrenchMinimalStemFilterFactory_init_(t_FrenchMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            FrenchMinimalStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = FrenchMinimalStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FrenchMinimalStemFilterFactory_create(t_FrenchMinimalStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FrenchMinimalStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/FilterDirectory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/LockFactory.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/store/Lock.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *FilterDirectory::class$ = NULL;
        jmethodID *FilterDirectory::mids$ = NULL;
        bool FilterDirectory::live$ = false;

        jclass FilterDirectory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/FilterDirectory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_clearLock_5fdc3f48] = env->getMethodID(cls, "clearLock", "(Ljava/lang/String;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_createOutput_5ad5358d] = env->getMethodID(cls, "createOutput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_deleteFile_5fdc3f48] = env->getMethodID(cls, "deleteFile", "(Ljava/lang/String;)V");
            mids$[mid_fileExists_5fdc3f44] = env->getMethodID(cls, "fileExists", "(Ljava/lang/String;)Z");
            mids$[mid_fileLength_5fdc3f54] = env->getMethodID(cls, "fileLength", "(Ljava/lang/String;)J");
            mids$[mid_getDelegate_1f3934bb] = env->getMethodID(cls, "getDelegate", "()Lorg/apache/lucene/store/Directory;");
            mids$[mid_getLockFactory_e4e9c36d] = env->getMethodID(cls, "getLockFactory", "()Lorg/apache/lucene/store/LockFactory;");
            mids$[mid_getLockID_14c7b5c5] = env->getMethodID(cls, "getLockID", "()Ljava/lang/String;");
            mids$[mid_listAll_2e6d5245] = env->getMethodID(cls, "listAll", "()[Ljava/lang/String;");
            mids$[mid_makeLock_f26bb9a8] = env->getMethodID(cls, "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");
            mids$[mid_openInput_3e1b5375] = env->getMethodID(cls, "openInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_setLockFactory_9892eb8c] = env->getMethodID(cls, "setLockFactory", "(Lorg/apache/lucene/store/LockFactory;)V");
            mids$[mid_sync_9bfb370d] = env->getMethodID(cls, "sync", "(Ljava/util/Collection;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void FilterDirectory::clearLock(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clearLock_5fdc3f48], a0.this$);
        }

        void FilterDirectory::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        ::org::apache::lucene::store::IndexOutput FilterDirectory::createOutput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexOutput(env->callObjectMethod(this$, mids$[mid_createOutput_5ad5358d], a0.this$, a1.this$));
        }

        void FilterDirectory::deleteFile(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_deleteFile_5fdc3f48], a0.this$);
        }

        jboolean FilterDirectory::fileExists(const ::java::lang::String & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_fileExists_5fdc3f44], a0.this$);
        }

        jlong FilterDirectory::fileLength(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_fileLength_5fdc3f54], a0.this$);
        }

        ::org::apache::lucene::store::Directory FilterDirectory::getDelegate() const
        {
          return ::org::apache::lucene::store::Directory(env->callObjectMethod(this$, mids$[mid_getDelegate_1f3934bb]));
        }

        ::org::apache::lucene::store::LockFactory FilterDirectory::getLockFactory() const
        {
          return ::org::apache::lucene::store::LockFactory(env->callObjectMethod(this$, mids$[mid_getLockFactory_e4e9c36d]));
        }

        ::java::lang::String FilterDirectory::getLockID() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLockID_14c7b5c5]));
        }

        JArray< ::java::lang::String > FilterDirectory::listAll() const
        {
          return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_listAll_2e6d5245]));
        }

        ::org::apache::lucene::store::Lock FilterDirectory::makeLock(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::store::Lock(env->callObjectMethod(this$, mids$[mid_makeLock_f26bb9a8], a0.this$));
        }

        ::org::apache::lucene::store::IndexInput FilterDirectory::openInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_openInput_3e1b5375], a0.this$, a1.this$));
        }

        void FilterDirectory::setLockFactory(const ::org::apache::lucene::store::LockFactory & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setLockFactory_9892eb8c], a0.this$);
        }

        void FilterDirectory::sync(const ::java::util::Collection & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_sync_9bfb370d], a0.this$);
        }

        ::java::lang::String FilterDirectory::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_FilterDirectory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterDirectory_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterDirectory_clearLock(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_close(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_createOutput(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_deleteFile(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_fileExists(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_fileLength(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_getDelegate(t_FilterDirectory *self);
        static PyObject *t_FilterDirectory_getLockFactory(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_getLockID(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_listAll(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_makeLock(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_openInput(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_setLockFactory(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_sync(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_toString(t_FilterDirectory *self, PyObject *args);
        static PyObject *t_FilterDirectory_get__delegate(t_FilterDirectory *self, void *data);
        static PyObject *t_FilterDirectory_get__lockFactory(t_FilterDirectory *self, void *data);
        static int t_FilterDirectory_set__lockFactory(t_FilterDirectory *self, PyObject *arg, void *data);
        static PyObject *t_FilterDirectory_get__lockID(t_FilterDirectory *self, void *data);
        static PyGetSetDef t_FilterDirectory__fields_[] = {
          DECLARE_GET_FIELD(t_FilterDirectory, delegate),
          DECLARE_GETSET_FIELD(t_FilterDirectory, lockFactory),
          DECLARE_GET_FIELD(t_FilterDirectory, lockID),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilterDirectory__methods_[] = {
          DECLARE_METHOD(t_FilterDirectory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterDirectory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterDirectory, clearLock, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, close, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, createOutput, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, deleteFile, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, fileExists, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, fileLength, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, getDelegate, METH_NOARGS),
          DECLARE_METHOD(t_FilterDirectory, getLockFactory, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, getLockID, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, listAll, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, makeLock, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, openInput, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, setLockFactory, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, sync, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectory, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilterDirectory, t_FilterDirectory, ::org::apache::lucene::store::Directory, FilterDirectory, abstract_init, 0, 0, t_FilterDirectory__fields_, 0, 0);

        void t_FilterDirectory::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterDirectory), module, "FilterDirectory", 0);
        }

        void t_FilterDirectory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilterDirectory).tp_dict, "class_", make_descriptor(FilterDirectory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilterDirectory).tp_dict, "wrapfn_", make_descriptor(t_FilterDirectory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilterDirectory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterDirectory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterDirectory::initializeClass, 1)))
            return NULL;
          return t_FilterDirectory::wrap_Object(FilterDirectory(((t_FilterDirectory *) arg)->object.this$));
        }
        static PyObject *t_FilterDirectory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterDirectory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FilterDirectory_clearLock(t_FilterDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.clearLock(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FilterDirectory), (PyObject *) self, "clearLock", args, 2);
        }

        static PyObject *t_FilterDirectory_close(t_FilterDirectory *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FilterDirectory), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_FilterDirectory_createOutput(t_FilterDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexOutput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.createOutput(a0, a1));
            return ::org::apache::lucene::store::t_IndexOutput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterDirectory), (PyObject *) self, "createOutput", args, 2);
        }

        static PyObject *t_FilterDirectory_deleteFile(t_FilterDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.deleteFile(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FilterDirectory), (PyObject *) self, "deleteFile", args, 2);
        }

        static PyObject *t_FilterDirectory_fileExists(t_FilterDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileExists(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FilterDirectory), (PyObject *) self, "fileExists", args, 2);
        }

        static PyObject *t_FilterDirectory_fileLength(t_FilterDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileLength(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FilterDirectory), (PyObject *) self, "fileLength", args, 2);
        }

        static PyObject *t_FilterDirectory_getDelegate(t_FilterDirectory *self)
        {
          ::org::apache::lucene::store::Directory result((jobject) NULL);
          OBJ_CALL(result = self->object.getDelegate());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(result);
        }

        static PyObject *t_FilterDirectory_getLockFactory(t_FilterDirectory *self, PyObject *args)
        {
          ::org::apache::lucene::store::LockFactory result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getLockFactory());
            return ::org::apache::lucene::store::t_LockFactory::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterDirectory), (PyObject *) self, "getLockFactory", args, 2);
        }

        static PyObject *t_FilterDirectory_getLockID(t_FilterDirectory *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getLockID());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FilterDirectory), (PyObject *) self, "getLockID", args, 2);
        }

        static PyObject *t_FilterDirectory_listAll(t_FilterDirectory *self, PyObject *args)
        {
          JArray< ::java::lang::String > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.listAll());
            return JArray<jstring>(result.this$).wrap();
          }

          return callSuper(&PY_TYPE(FilterDirectory), (PyObject *) self, "listAll", args, 2);
        }

        static PyObject *t_FilterDirectory_makeLock(t_FilterDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::Lock result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.makeLock(a0));
            return ::org::apache::lucene::store::t_Lock::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterDirectory), (PyObject *) self, "makeLock", args, 2);
        }

        static PyObject *t_FilterDirectory_openInput(t_FilterDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.openInput(a0, a1));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterDirectory), (PyObject *) self, "openInput", args, 2);
        }

        static PyObject *t_FilterDirectory_setLockFactory(t_FilterDirectory *self, PyObject *args)
        {
          ::org::apache::lucene::store::LockFactory a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::store::LockFactory::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setLockFactory(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FilterDirectory), (PyObject *) self, "setLockFactory", args, 2);
        }

        static PyObject *t_FilterDirectory_sync(t_FilterDirectory *self, PyObject *args)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(self->object.sync(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FilterDirectory), (PyObject *) self, "sync", args, 2);
        }

        static PyObject *t_FilterDirectory_toString(t_FilterDirectory *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FilterDirectory), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FilterDirectory_get__delegate(t_FilterDirectory *self, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          OBJ_CALL(value = self->object.getDelegate());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
        }

        static PyObject *t_FilterDirectory_get__lockFactory(t_FilterDirectory *self, void *data)
        {
          ::org::apache::lucene::store::LockFactory value((jobject) NULL);
          OBJ_CALL(value = self->object.getLockFactory());
          return ::org::apache::lucene::store::t_LockFactory::wrap_Object(value);
        }
        static int t_FilterDirectory_set__lockFactory(t_FilterDirectory *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::store::LockFactory value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::store::LockFactory::initializeClass, &value))
            {
              INT_CALL(self->object.setLockFactory(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "lockFactory", arg);
          return -1;
        }

        static PyObject *t_FilterDirectory_get__lockID(t_FilterDirectory *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getLockID());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/Formatter.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/highlight/TokenGroup.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *Formatter::class$ = NULL;
          jmethodID *Formatter::mids$ = NULL;
          bool Formatter::live$ = false;

          jclass Formatter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/Formatter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_highlightTerm_8838cc58] = env->getMethodID(cls, "highlightTerm", "(Ljava/lang/String;Lorg/apache/lucene/search/highlight/TokenGroup;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::String Formatter::highlightTerm(const ::java::lang::String & a0, const ::org::apache::lucene::search::highlight::TokenGroup & a1) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_highlightTerm_8838cc58], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_Formatter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Formatter_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Formatter_highlightTerm(t_Formatter *self, PyObject *args);

          static PyMethodDef t_Formatter__methods_[] = {
            DECLARE_METHOD(t_Formatter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Formatter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Formatter, highlightTerm, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Formatter, t_Formatter, ::java::lang::Object, Formatter, abstract_init, 0, 0, 0, 0, 0);

          void t_Formatter::install(PyObject *module)
          {
            installType(&PY_TYPE(Formatter), module, "Formatter", 0);
          }

          void t_Formatter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Formatter).tp_dict, "class_", make_descriptor(Formatter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Formatter).tp_dict, "wrapfn_", make_descriptor(t_Formatter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Formatter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Formatter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Formatter::initializeClass, 1)))
              return NULL;
            return t_Formatter::wrap_Object(Formatter(((t_Formatter *) arg)->object.this$));
          }
          static PyObject *t_Formatter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Formatter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Formatter_highlightTerm(t_Formatter *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::highlight::TokenGroup a1((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::search::highlight::TokenGroup::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.highlightTerm(a0, a1));
              return j2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "highlightTerm", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *HyphenatedWordsFilter::class$ = NULL;
          jmethodID *HyphenatedWordsFilter::mids$ = NULL;
          bool HyphenatedWordsFilter::live$ = false;

          jclass HyphenatedWordsFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HyphenatedWordsFilter::HyphenatedWordsFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean HyphenatedWordsFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void HyphenatedWordsFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_HyphenatedWordsFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HyphenatedWordsFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HyphenatedWordsFilter_init_(t_HyphenatedWordsFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HyphenatedWordsFilter_incrementToken(t_HyphenatedWordsFilter *self, PyObject *args);
          static PyObject *t_HyphenatedWordsFilter_reset(t_HyphenatedWordsFilter *self, PyObject *args);

          static PyMethodDef t_HyphenatedWordsFilter__methods_[] = {
            DECLARE_METHOD(t_HyphenatedWordsFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HyphenatedWordsFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HyphenatedWordsFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_HyphenatedWordsFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HyphenatedWordsFilter, t_HyphenatedWordsFilter, ::org::apache::lucene::analysis::TokenFilter, HyphenatedWordsFilter, t_HyphenatedWordsFilter_init_, 0, 0, 0, 0, 0);

          void t_HyphenatedWordsFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(HyphenatedWordsFilter), module, "HyphenatedWordsFilter", 0);
          }

          void t_HyphenatedWordsFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HyphenatedWordsFilter).tp_dict, "class_", make_descriptor(HyphenatedWordsFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HyphenatedWordsFilter).tp_dict, "wrapfn_", make_descriptor(t_HyphenatedWordsFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HyphenatedWordsFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HyphenatedWordsFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HyphenatedWordsFilter::initializeClass, 1)))
              return NULL;
            return t_HyphenatedWordsFilter::wrap_Object(HyphenatedWordsFilter(((t_HyphenatedWordsFilter *) arg)->object.this$));
          }
          static PyObject *t_HyphenatedWordsFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HyphenatedWordsFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HyphenatedWordsFilter_init_(t_HyphenatedWordsFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            HyphenatedWordsFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = HyphenatedWordsFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HyphenatedWordsFilter_incrementToken(t_HyphenatedWordsFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(HyphenatedWordsFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_HyphenatedWordsFilter_reset(t_HyphenatedWordsFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(HyphenatedWordsFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/Analyzer$ReuseStrategy.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/Analyzer$TokenStreamComponents.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *Analyzer$ReuseStrategy::class$ = NULL;
        jmethodID *Analyzer$ReuseStrategy::mids$ = NULL;
        bool Analyzer$ReuseStrategy::live$ = false;

        jclass Analyzer$ReuseStrategy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/Analyzer$ReuseStrategy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_getReusableComponents_19769f4a] = env->getMethodID(cls, "getReusableComponents", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
            mids$[mid_setReusableComponents_66577a3f] = env->getMethodID(cls, "setReusableComponents", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;)V");
            mids$[mid_getStoredValue_166fef79] = env->getMethodID(cls, "getStoredValue", "(Lorg/apache/lucene/analysis/Analyzer;)Ljava/lang/Object;");
            mids$[mid_setStoredValue_798d4388] = env->getMethodID(cls, "setStoredValue", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/lang/Object;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Analyzer$ReuseStrategy::Analyzer$ReuseStrategy() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents Analyzer$ReuseStrategy::getReusableComponents(const ::org::apache::lucene::analysis::Analyzer & a0, const ::java::lang::String & a1) const
        {
          return ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents(env->callObjectMethod(this$, mids$[mid_getReusableComponents_19769f4a], a0.this$, a1.this$));
        }

        void Analyzer$ReuseStrategy::setReusableComponents(const ::org::apache::lucene::analysis::Analyzer & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_setReusableComponents_66577a3f], a0.this$, a1.this$, a2.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_Analyzer$ReuseStrategy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Analyzer$ReuseStrategy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Analyzer$ReuseStrategy_init_(t_Analyzer$ReuseStrategy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Analyzer$ReuseStrategy_getReusableComponents(t_Analyzer$ReuseStrategy *self, PyObject *args);
        static PyObject *t_Analyzer$ReuseStrategy_setReusableComponents(t_Analyzer$ReuseStrategy *self, PyObject *args);

        static PyMethodDef t_Analyzer$ReuseStrategy__methods_[] = {
          DECLARE_METHOD(t_Analyzer$ReuseStrategy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Analyzer$ReuseStrategy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Analyzer$ReuseStrategy, getReusableComponents, METH_VARARGS),
          DECLARE_METHOD(t_Analyzer$ReuseStrategy, setReusableComponents, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Analyzer$ReuseStrategy, t_Analyzer$ReuseStrategy, ::java::lang::Object, Analyzer$ReuseStrategy, t_Analyzer$ReuseStrategy_init_, 0, 0, 0, 0, 0);

        void t_Analyzer$ReuseStrategy::install(PyObject *module)
        {
          installType(&PY_TYPE(Analyzer$ReuseStrategy), module, "Analyzer$ReuseStrategy", 0);
        }

        void t_Analyzer$ReuseStrategy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Analyzer$ReuseStrategy).tp_dict, "class_", make_descriptor(Analyzer$ReuseStrategy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Analyzer$ReuseStrategy).tp_dict, "wrapfn_", make_descriptor(t_Analyzer$ReuseStrategy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Analyzer$ReuseStrategy).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Analyzer$ReuseStrategy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Analyzer$ReuseStrategy::initializeClass, 1)))
            return NULL;
          return t_Analyzer$ReuseStrategy::wrap_Object(Analyzer$ReuseStrategy(((t_Analyzer$ReuseStrategy *) arg)->object.this$));
        }
        static PyObject *t_Analyzer$ReuseStrategy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Analyzer$ReuseStrategy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Analyzer$ReuseStrategy_init_(t_Analyzer$ReuseStrategy *self, PyObject *args, PyObject *kwds)
        {
          Analyzer$ReuseStrategy object((jobject) NULL);

          INT_CALL(object = Analyzer$ReuseStrategy());
          self->object = object;

          return 0;
        }

        static PyObject *t_Analyzer$ReuseStrategy_getReusableComponents(t_Analyzer$ReuseStrategy *self, PyObject *args)
        {
          ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getReusableComponents(a0, a1));
            return ::org::apache::lucene::analysis::t_Analyzer$TokenStreamComponents::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getReusableComponents", args);
          return NULL;
        }

        static PyObject *t_Analyzer$ReuseStrategy_setReusableComponents(t_Analyzer$ReuseStrategy *self, PyObject *args)
        {
          ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents a2((jobject) NULL);

          if (!parseArgs(args, "ksk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.setReusableComponents(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setReusableComponents", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/Optimizer.h"
#include "org/egothor/stemmer/Trie.h"
#include "org/egothor/stemmer/Row.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *Optimizer::class$ = NULL;
      jmethodID *Optimizer::mids$ = NULL;
      bool Optimizer::live$ = false;

      jclass Optimizer::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/Optimizer");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
          mids$[mid_merge_4f5b02a1] = env->getMethodID(cls, "merge", "(Lorg/egothor/stemmer/Row;Lorg/egothor/stemmer/Row;)Lorg/egothor/stemmer/Row;");
          mids$[mid_optimize_c26c0475] = env->getMethodID(cls, "optimize", "(Lorg/egothor/stemmer/Trie;)Lorg/egothor/stemmer/Trie;");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      Optimizer::Optimizer() : ::org::egothor::stemmer::Reduce(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

      ::org::egothor::stemmer::Row Optimizer::merge(const ::org::egothor::stemmer::Row & a0, const ::org::egothor::stemmer::Row & a1) const
      {
        return ::org::egothor::stemmer::Row(env->callObjectMethod(this$, mids$[mid_merge_4f5b02a1], a0.this$, a1.this$));
      }

      ::org::egothor::stemmer::Trie Optimizer::optimize(const ::org::egothor::stemmer::Trie & a0) const
      {
        return ::org::egothor::stemmer::Trie(env->callObjectMethod(this$, mids$[mid_optimize_c26c0475], a0.this$));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_Optimizer_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Optimizer_instance_(PyTypeObject *type, PyObject *arg);
      static int t_Optimizer_init_(t_Optimizer *self, PyObject *args, PyObject *kwds);
      static PyObject *t_Optimizer_merge(t_Optimizer *self, PyObject *args);
      static PyObject *t_Optimizer_optimize(t_Optimizer *self, PyObject *args);

      static PyMethodDef t_Optimizer__methods_[] = {
        DECLARE_METHOD(t_Optimizer, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Optimizer, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Optimizer, merge, METH_VARARGS),
        DECLARE_METHOD(t_Optimizer, optimize, METH_VARARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(Optimizer, t_Optimizer, ::org::egothor::stemmer::Reduce, Optimizer, t_Optimizer_init_, 0, 0, 0, 0, 0);

      void t_Optimizer::install(PyObject *module)
      {
        installType(&PY_TYPE(Optimizer), module, "Optimizer", 0);
      }

      void t_Optimizer::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(Optimizer).tp_dict, "class_", make_descriptor(Optimizer::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(Optimizer).tp_dict, "wrapfn_", make_descriptor(t_Optimizer::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(Optimizer).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Optimizer_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Optimizer::initializeClass, 1)))
          return NULL;
        return t_Optimizer::wrap_Object(Optimizer(((t_Optimizer *) arg)->object.this$));
      }
      static PyObject *t_Optimizer_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Optimizer::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_Optimizer_init_(t_Optimizer *self, PyObject *args, PyObject *kwds)
      {
        Optimizer object((jobject) NULL);

        INT_CALL(object = Optimizer());
        self->object = object;

        return 0;
      }

      static PyObject *t_Optimizer_merge(t_Optimizer *self, PyObject *args)
      {
        ::org::egothor::stemmer::Row a0((jobject) NULL);
        ::org::egothor::stemmer::Row a1((jobject) NULL);
        ::org::egothor::stemmer::Row result((jobject) NULL);

        if (!parseArgs(args, "kk", ::org::egothor::stemmer::Row::initializeClass, ::org::egothor::stemmer::Row::initializeClass, &a0, &a1))
        {
          OBJ_CALL(result = self->object.merge(a0, a1));
          return ::org::egothor::stemmer::t_Row::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "merge", args);
        return NULL;
      }

      static PyObject *t_Optimizer_optimize(t_Optimizer *self, PyObject *args)
      {
        ::org::egothor::stemmer::Trie a0((jobject) NULL);
        ::org::egothor::stemmer::Trie result((jobject) NULL);

        if (!parseArgs(args, "k", ::org::egothor::stemmer::Trie::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.optimize(a0));
          return ::org::egothor::stemmer::t_Trie::wrap_Object(result);
        }

        return callSuper(&PY_TYPE(Optimizer), (PyObject *) self, "optimize", args, 2);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/BytesRefIterator.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/Comparator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *BytesRefIterator::class$ = NULL;
        jmethodID *BytesRefIterator::mids$ = NULL;
        bool BytesRefIterator::live$ = false;
        BytesRefIterator *BytesRefIterator::EMPTY = NULL;

        jclass BytesRefIterator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/BytesRefIterator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
            mids$[mid_next_4ae19461] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY = new BytesRefIterator(env->getStaticObjectField(cls, "EMPTY", "Lorg/apache/lucene/util/BytesRefIterator;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::Comparator BytesRefIterator::getComparator() const
        {
          return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
        }

        ::org::apache::lucene::util::BytesRef BytesRefIterator::next() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_4ae19461]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_BytesRefIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BytesRefIterator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BytesRefIterator_getComparator(t_BytesRefIterator *self);
        static PyObject *t_BytesRefIterator_next(t_BytesRefIterator *self);
        static PyObject *t_BytesRefIterator_get__comparator(t_BytesRefIterator *self, void *data);
        static PyGetSetDef t_BytesRefIterator__fields_[] = {
          DECLARE_GET_FIELD(t_BytesRefIterator, comparator),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BytesRefIterator__methods_[] = {
          DECLARE_METHOD(t_BytesRefIterator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefIterator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefIterator, getComparator, METH_NOARGS),
          DECLARE_METHOD(t_BytesRefIterator, next, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BytesRefIterator, t_BytesRefIterator, ::java::lang::Object, BytesRefIterator, abstract_init, PyObject_SelfIter, ((PyObject *(*)(t_BytesRefIterator *)) get_next< t_BytesRefIterator,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >), t_BytesRefIterator__fields_, 0, 0);

        void t_BytesRefIterator::install(PyObject *module)
        {
          installType(&PY_TYPE(BytesRefIterator), module, "BytesRefIterator", 0);
        }

        void t_BytesRefIterator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BytesRefIterator).tp_dict, "class_", make_descriptor(BytesRefIterator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BytesRefIterator).tp_dict, "wrapfn_", make_descriptor(t_BytesRefIterator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BytesRefIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(BytesRefIterator::initializeClass);
          PyDict_SetItemString(PY_TYPE(BytesRefIterator).tp_dict, "EMPTY", make_descriptor(t_BytesRefIterator::wrap_Object(*BytesRefIterator::EMPTY)));
        }

        static PyObject *t_BytesRefIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BytesRefIterator::initializeClass, 1)))
            return NULL;
          return t_BytesRefIterator::wrap_Object(BytesRefIterator(((t_BytesRefIterator *) arg)->object.this$));
        }
        static PyObject *t_BytesRefIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BytesRefIterator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BytesRefIterator_getComparator(t_BytesRefIterator *self)
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
        }

        static PyObject *t_BytesRefIterator_next(t_BytesRefIterator *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.next());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_BytesRefIterator_get__comparator(t_BytesRefIterator *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/SuggestWord.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *SuggestWord::class$ = NULL;
          jmethodID *SuggestWord::mids$ = NULL;
          jfieldID *SuggestWord::fids$ = NULL;
          bool SuggestWord::live$ = false;

          jclass SuggestWord::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/SuggestWord");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_freq] = env->getFieldID(cls, "freq", "I");
              fids$[fid_score] = env->getFieldID(cls, "score", "F");
              fids$[fid_string] = env->getFieldID(cls, "string", "Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SuggestWord::SuggestWord() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint SuggestWord::_get_freq() const
          {
            return env->getIntField(this$, fids$[fid_freq]);
          }

          void SuggestWord::_set_freq(jint a0) const
          {
            env->setIntField(this$, fids$[fid_freq], a0);
          }

          jfloat SuggestWord::_get_score() const
          {
            return env->getFloatField(this$, fids$[fid_score]);
          }

          void SuggestWord::_set_score(jfloat a0) const
          {
            env->setFloatField(this$, fids$[fid_score], a0);
          }

          ::java::lang::String SuggestWord::_get_string() const
          {
            return ::java::lang::String(env->getObjectField(this$, fids$[fid_string]));
          }

          void SuggestWord::_set_string(const ::java::lang::String & a0) const
          {
            env->setObjectField(this$, fids$[fid_string], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_SuggestWord_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SuggestWord_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SuggestWord_init_(t_SuggestWord *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SuggestWord_get__freq(t_SuggestWord *self, void *data);
          static int t_SuggestWord_set__freq(t_SuggestWord *self, PyObject *arg, void *data);
          static PyObject *t_SuggestWord_get__score(t_SuggestWord *self, void *data);
          static int t_SuggestWord_set__score(t_SuggestWord *self, PyObject *arg, void *data);
          static PyObject *t_SuggestWord_get__string(t_SuggestWord *self, void *data);
          static int t_SuggestWord_set__string(t_SuggestWord *self, PyObject *arg, void *data);

          static PyGetSetDef t_SuggestWord__fields_[] = {
            DECLARE_GETSET_FIELD(t_SuggestWord, freq),
            DECLARE_GETSET_FIELD(t_SuggestWord, score),
            DECLARE_GETSET_FIELD(t_SuggestWord, string),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SuggestWord__methods_[] = {
            DECLARE_METHOD(t_SuggestWord, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SuggestWord, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SuggestWord, t_SuggestWord, ::java::lang::Object, SuggestWord, t_SuggestWord_init_, 0, 0, t_SuggestWord__fields_, 0, 0);

          void t_SuggestWord::install(PyObject *module)
          {
            installType(&PY_TYPE(SuggestWord), module, "SuggestWord", 0);
          }

          void t_SuggestWord::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SuggestWord).tp_dict, "class_", make_descriptor(SuggestWord::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SuggestWord).tp_dict, "wrapfn_", make_descriptor(t_SuggestWord::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SuggestWord).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SuggestWord_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SuggestWord::initializeClass, 1)))
              return NULL;
            return t_SuggestWord::wrap_Object(SuggestWord(((t_SuggestWord *) arg)->object.this$));
          }
          static PyObject *t_SuggestWord_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SuggestWord::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SuggestWord_init_(t_SuggestWord *self, PyObject *args, PyObject *kwds)
          {
            SuggestWord object((jobject) NULL);

            INT_CALL(object = SuggestWord());
            self->object = object;

            return 0;
          }

          static PyObject *t_SuggestWord_get__freq(t_SuggestWord *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_freq());
            return PyInt_FromLong((long) value);
          }
          static int t_SuggestWord_set__freq(t_SuggestWord *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_freq(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "freq", arg);
            return -1;
          }

          static PyObject *t_SuggestWord_get__score(t_SuggestWord *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object._get_score());
            return PyFloat_FromDouble((double) value);
          }
          static int t_SuggestWord_set__score(t_SuggestWord *self, PyObject *arg, void *data)
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object._set_score(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "score", arg);
            return -1;
          }

          static PyObject *t_SuggestWord_get__string(t_SuggestWord *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object._get_string());
            return j2p(value);
          }
          static int t_SuggestWord_set__string(t_SuggestWord *self, PyObject *arg, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            if (!parseArg(arg, "s", &value))
            {
              INT_CALL(self->object._set_string(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "string", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/en/EnglishPossessiveFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {

          ::java::lang::Class *EnglishPossessiveFilter::class$ = NULL;
          jmethodID *EnglishPossessiveFilter::mids$ = NULL;
          bool EnglishPossessiveFilter::live$ = false;

          jclass EnglishPossessiveFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/en/EnglishPossessiveFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_8f50e725] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EnglishPossessiveFilter::EnglishPossessiveFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          EnglishPossessiveFilter::EnglishPossessiveFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_8f50e725, a0.this$, a1.this$)) {}

          jboolean EnglishPossessiveFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {
          static PyObject *t_EnglishPossessiveFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EnglishPossessiveFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EnglishPossessiveFilter_init_(t_EnglishPossessiveFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EnglishPossessiveFilter_incrementToken(t_EnglishPossessiveFilter *self, PyObject *args);

          static PyMethodDef t_EnglishPossessiveFilter__methods_[] = {
            DECLARE_METHOD(t_EnglishPossessiveFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishPossessiveFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishPossessiveFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EnglishPossessiveFilter, t_EnglishPossessiveFilter, ::org::apache::lucene::analysis::TokenFilter, EnglishPossessiveFilter, t_EnglishPossessiveFilter_init_, 0, 0, 0, 0, 0);

          void t_EnglishPossessiveFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(EnglishPossessiveFilter), module, "EnglishPossessiveFilter", 0);
          }

          void t_EnglishPossessiveFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EnglishPossessiveFilter).tp_dict, "class_", make_descriptor(EnglishPossessiveFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EnglishPossessiveFilter).tp_dict, "wrapfn_", make_descriptor(t_EnglishPossessiveFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EnglishPossessiveFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_EnglishPossessiveFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EnglishPossessiveFilter::initializeClass, 1)))
              return NULL;
            return t_EnglishPossessiveFilter::wrap_Object(EnglishPossessiveFilter(((t_EnglishPossessiveFilter *) arg)->object.this$));
          }
          static PyObject *t_EnglishPossessiveFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EnglishPossessiveFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EnglishPossessiveFilter_init_(t_EnglishPossessiveFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                EnglishPossessiveFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = EnglishPossessiveFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                EnglishPossessiveFilter object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = EnglishPossessiveFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_EnglishPossessiveFilter_incrementToken(t_EnglishPossessiveFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(EnglishPossessiveFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/ReferenceManager.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/ReferenceManager$RefreshListener.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *ReferenceManager::class$ = NULL;
        jmethodID *ReferenceManager::mids$ = NULL;
        bool ReferenceManager::live$ = false;

        jclass ReferenceManager::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/ReferenceManager");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_acquire_846352c3] = env->getMethodID(cls, "acquire", "()Ljava/lang/Object;");
            mids$[mid_addListener_c1691f71] = env->getMethodID(cls, "addListener", "(Lorg/apache/lucene/search/ReferenceManager$RefreshListener;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_maybeRefresh_54c6a16a] = env->getMethodID(cls, "maybeRefresh", "()Z");
            mids$[mid_maybeRefreshBlocking_54c6a166] = env->getMethodID(cls, "maybeRefreshBlocking", "()V");
            mids$[mid_release_290588ee] = env->getMethodID(cls, "release", "(Ljava/lang/Object;)V");
            mids$[mid_removeListener_c1691f71] = env->getMethodID(cls, "removeListener", "(Lorg/apache/lucene/search/ReferenceManager$RefreshListener;)V");
            mids$[mid_decRef_290588ee] = env->getMethodID(cls, "decRef", "(Ljava/lang/Object;)V");
            mids$[mid_getRefCount_290588f1] = env->getMethodID(cls, "getRefCount", "(Ljava/lang/Object;)I");
            mids$[mid_tryIncRef_290588e2] = env->getMethodID(cls, "tryIncRef", "(Ljava/lang/Object;)Z");
            mids$[mid_refreshIfNeeded_a932a95f] = env->getMethodID(cls, "refreshIfNeeded", "(Ljava/lang/Object;)Ljava/lang/Object;");
            mids$[mid_afterClose_54c6a166] = env->getMethodID(cls, "afterClose", "()V");
            mids$[mid_afterMaybeRefresh_54c6a166] = env->getMethodID(cls, "afterMaybeRefresh", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ReferenceManager::ReferenceManager() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::java::lang::Object ReferenceManager::acquire() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_acquire_846352c3]));
        }

        void ReferenceManager::addListener(const ::org::apache::lucene::search::ReferenceManager$RefreshListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addListener_c1691f71], a0.this$);
        }

        void ReferenceManager::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        jboolean ReferenceManager::maybeRefresh() const
        {
          return env->callBooleanMethod(this$, mids$[mid_maybeRefresh_54c6a16a]);
        }

        void ReferenceManager::maybeRefreshBlocking() const
        {
          env->callVoidMethod(this$, mids$[mid_maybeRefreshBlocking_54c6a166]);
        }

        void ReferenceManager::release(const ::java::lang::Object & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_release_290588ee], a0.this$);
        }

        void ReferenceManager::removeListener(const ::org::apache::lucene::search::ReferenceManager$RefreshListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_removeListener_c1691f71], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_ReferenceManager_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ReferenceManager_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ReferenceManager_of_(t_ReferenceManager *self, PyObject *args);
        static int t_ReferenceManager_init_(t_ReferenceManager *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ReferenceManager_acquire(t_ReferenceManager *self);
        static PyObject *t_ReferenceManager_addListener(t_ReferenceManager *self, PyObject *arg);
        static PyObject *t_ReferenceManager_close(t_ReferenceManager *self);
        static PyObject *t_ReferenceManager_maybeRefresh(t_ReferenceManager *self);
        static PyObject *t_ReferenceManager_maybeRefreshBlocking(t_ReferenceManager *self);
        static PyObject *t_ReferenceManager_release(t_ReferenceManager *self, PyObject *arg);
        static PyObject *t_ReferenceManager_removeListener(t_ReferenceManager *self, PyObject *arg);
        static PyObject *t_ReferenceManager_get__parameters_(t_ReferenceManager *self, void *data);
        static PyGetSetDef t_ReferenceManager__fields_[] = {
          DECLARE_GET_FIELD(t_ReferenceManager, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ReferenceManager__methods_[] = {
          DECLARE_METHOD(t_ReferenceManager, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ReferenceManager, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ReferenceManager, of_, METH_VARARGS),
          DECLARE_METHOD(t_ReferenceManager, acquire, METH_NOARGS),
          DECLARE_METHOD(t_ReferenceManager, addListener, METH_O),
          DECLARE_METHOD(t_ReferenceManager, close, METH_NOARGS),
          DECLARE_METHOD(t_ReferenceManager, maybeRefresh, METH_NOARGS),
          DECLARE_METHOD(t_ReferenceManager, maybeRefreshBlocking, METH_NOARGS),
          DECLARE_METHOD(t_ReferenceManager, release, METH_O),
          DECLARE_METHOD(t_ReferenceManager, removeListener, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ReferenceManager, t_ReferenceManager, ::java::lang::Object, ReferenceManager, t_ReferenceManager_init_, 0, 0, t_ReferenceManager__fields_, 0, 0);
        PyObject *t_ReferenceManager::wrap_Object(const ReferenceManager& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ReferenceManager::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ReferenceManager *self = (t_ReferenceManager *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_ReferenceManager::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ReferenceManager::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ReferenceManager *self = (t_ReferenceManager *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_ReferenceManager::install(PyObject *module)
        {
          installType(&PY_TYPE(ReferenceManager), module, "ReferenceManager", 0);
          PyDict_SetItemString(PY_TYPE(ReferenceManager).tp_dict, "RefreshListener", make_descriptor(&PY_TYPE(ReferenceManager$RefreshListener)));
        }

        void t_ReferenceManager::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ReferenceManager).tp_dict, "class_", make_descriptor(ReferenceManager::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ReferenceManager).tp_dict, "wrapfn_", make_descriptor(t_ReferenceManager::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ReferenceManager).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ReferenceManager_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ReferenceManager::initializeClass, 1)))
            return NULL;
          return t_ReferenceManager::wrap_Object(ReferenceManager(((t_ReferenceManager *) arg)->object.this$));
        }
        static PyObject *t_ReferenceManager_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ReferenceManager::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ReferenceManager_of_(t_ReferenceManager *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_ReferenceManager_init_(t_ReferenceManager *self, PyObject *args, PyObject *kwds)
        {
          ReferenceManager object((jobject) NULL);

          INT_CALL(object = ReferenceManager());
          self->object = object;

          return 0;
        }

        static PyObject *t_ReferenceManager_acquire(t_ReferenceManager *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.acquire());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_ReferenceManager_addListener(t_ReferenceManager *self, PyObject *arg)
        {
          ::org::apache::lucene::search::ReferenceManager$RefreshListener a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::org::apache::lucene::search::ReferenceManager$RefreshListener::initializeClass, &a0, &p0, ::org::apache::lucene::search::t_ReferenceManager$RefreshListener::parameters_))
          {
            OBJ_CALL(self->object.addListener(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addListener", arg);
          return NULL;
        }

        static PyObject *t_ReferenceManager_close(t_ReferenceManager *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_ReferenceManager_maybeRefresh(t_ReferenceManager *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.maybeRefresh());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_ReferenceManager_maybeRefreshBlocking(t_ReferenceManager *self)
        {
          OBJ_CALL(self->object.maybeRefreshBlocking());
          Py_RETURN_NONE;
        }

        static PyObject *t_ReferenceManager_release(t_ReferenceManager *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArg(arg, "O", self->parameters[0], &a0))
          {
            OBJ_CALL(self->object.release(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "release", arg);
          return NULL;
        }

        static PyObject *t_ReferenceManager_removeListener(t_ReferenceManager *self, PyObject *arg)
        {
          ::org::apache::lucene::search::ReferenceManager$RefreshListener a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::org::apache::lucene::search::ReferenceManager$RefreshListener::initializeClass, &a0, &p0, ::org::apache::lucene::search::t_ReferenceManager$RefreshListener::parameters_))
          {
            OBJ_CALL(self->object.removeListener(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "removeListener", arg);
          return NULL;
        }
        static PyObject *t_ReferenceManager_get__parameters_(t_ReferenceManager *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/OrdFieldSource.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *OrdFieldSource::class$ = NULL;
            jmethodID *OrdFieldSource::mids$ = NULL;
            bool OrdFieldSource::live$ = false;

            jclass OrdFieldSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/OrdFieldSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            OrdFieldSource::OrdFieldSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            ::java::lang::String OrdFieldSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean OrdFieldSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues OrdFieldSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint OrdFieldSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_OrdFieldSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_OrdFieldSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_OrdFieldSource_init_(t_OrdFieldSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_OrdFieldSource_description(t_OrdFieldSource *self, PyObject *args);
            static PyObject *t_OrdFieldSource_equals(t_OrdFieldSource *self, PyObject *args);
            static PyObject *t_OrdFieldSource_getValues(t_OrdFieldSource *self, PyObject *args);
            static PyObject *t_OrdFieldSource_hashCode(t_OrdFieldSource *self, PyObject *args);

            static PyMethodDef t_OrdFieldSource__methods_[] = {
              DECLARE_METHOD(t_OrdFieldSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_OrdFieldSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_OrdFieldSource, description, METH_VARARGS),
              DECLARE_METHOD(t_OrdFieldSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_OrdFieldSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_OrdFieldSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(OrdFieldSource, t_OrdFieldSource, ::org::apache::lucene::queries::function::ValueSource, OrdFieldSource, t_OrdFieldSource_init_, 0, 0, 0, 0, 0);

            void t_OrdFieldSource::install(PyObject *module)
            {
              installType(&PY_TYPE(OrdFieldSource), module, "OrdFieldSource", 0);
            }

            void t_OrdFieldSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(OrdFieldSource).tp_dict, "class_", make_descriptor(OrdFieldSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(OrdFieldSource).tp_dict, "wrapfn_", make_descriptor(t_OrdFieldSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(OrdFieldSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_OrdFieldSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, OrdFieldSource::initializeClass, 1)))
                return NULL;
              return t_OrdFieldSource::wrap_Object(OrdFieldSource(((t_OrdFieldSource *) arg)->object.this$));
            }
            static PyObject *t_OrdFieldSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, OrdFieldSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_OrdFieldSource_init_(t_OrdFieldSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              OrdFieldSource object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = OrdFieldSource(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_OrdFieldSource_description(t_OrdFieldSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(OrdFieldSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_OrdFieldSource_equals(t_OrdFieldSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(OrdFieldSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_OrdFieldSource_getValues(t_OrdFieldSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(OrdFieldSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_OrdFieldSource_hashCode(t_OrdFieldSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(OrdFieldSource), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldComparator$TermValComparator.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldComparator$TermValComparator::class$ = NULL;
        jmethodID *FieldComparator$TermValComparator::mids$ = NULL;
        bool FieldComparator$TermValComparator::live$ = false;

        jclass FieldComparator$TermValComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldComparator$TermValComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
            mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
            mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
            mids$[mid_compareValues_594e5ef9] = env->getMethodID(cls, "compareValues", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");
            mids$[mid_setBottom_39c7bd3c] = env->getMethodID(cls, "setBottom", "(I)V");
            mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_setTopValue_7bc03dc4] = env->getMethodID(cls, "setTopValue", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_value_b57e9c3f] = env->getMethodID(cls, "value", "(I)Lorg/apache/lucene/util/BytesRef;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint FieldComparator$TermValComparator::compare(jint a0, jint a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compare_d8d154b9], a0, a1);
        }

        jint FieldComparator$TermValComparator::compareBottom(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareBottom_39c7bd23], a0);
        }

        jint FieldComparator$TermValComparator::compareTop(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTop_39c7bd23], a0);
        }

        jint FieldComparator$TermValComparator::compareValues(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compareValues_594e5ef9], a0.this$, a1.this$);
        }

        void FieldComparator$TermValComparator::copy(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_d8d154a6], a0, a1);
        }

        void FieldComparator$TermValComparator::setBottom(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBottom_39c7bd3c], a0);
        }

        ::org::apache::lucene::search::FieldComparator FieldComparator$TermValComparator::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_setNextReader_6329aed7], a0.this$));
        }

        void FieldComparator$TermValComparator::setTopValue(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTopValue_7bc03dc4], a0.this$);
        }

        ::org::apache::lucene::util::BytesRef FieldComparator$TermValComparator::value(jint a0) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_value_b57e9c3f], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldComparator$TermValComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$TermValComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$TermValComparator_of_(t_FieldComparator$TermValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermValComparator_compare(t_FieldComparator$TermValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermValComparator_compareBottom(t_FieldComparator$TermValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermValComparator_compareTop(t_FieldComparator$TermValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermValComparator_compareValues(t_FieldComparator$TermValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermValComparator_copy(t_FieldComparator$TermValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermValComparator_setBottom(t_FieldComparator$TermValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermValComparator_setNextReader(t_FieldComparator$TermValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermValComparator_setTopValue(t_FieldComparator$TermValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermValComparator_value(t_FieldComparator$TermValComparator *self, PyObject *args);
        static int t_FieldComparator$TermValComparator_set__bottom(t_FieldComparator$TermValComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$TermValComparator_set__nextReader(t_FieldComparator$TermValComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$TermValComparator_set__topValue(t_FieldComparator$TermValComparator *self, PyObject *arg, void *data);
        static PyObject *t_FieldComparator$TermValComparator_get__parameters_(t_FieldComparator$TermValComparator *self, void *data);
        static PyGetSetDef t_FieldComparator$TermValComparator__fields_[] = {
          DECLARE_SET_FIELD(t_FieldComparator$TermValComparator, bottom),
          DECLARE_SET_FIELD(t_FieldComparator$TermValComparator, nextReader),
          DECLARE_SET_FIELD(t_FieldComparator$TermValComparator, topValue),
          DECLARE_GET_FIELD(t_FieldComparator$TermValComparator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldComparator$TermValComparator__methods_[] = {
          DECLARE_METHOD(t_FieldComparator$TermValComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$TermValComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$TermValComparator, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermValComparator, compare, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermValComparator, compareBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermValComparator, compareTop, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermValComparator, compareValues, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermValComparator, copy, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermValComparator, setBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermValComparator, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermValComparator, setTopValue, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermValComparator, value, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldComparator$TermValComparator, t_FieldComparator$TermValComparator, ::org::apache::lucene::search::FieldComparator, FieldComparator$TermValComparator, abstract_init, 0, 0, t_FieldComparator$TermValComparator__fields_, 0, 0);
        PyObject *t_FieldComparator$TermValComparator::wrap_Object(const FieldComparator$TermValComparator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$TermValComparator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$TermValComparator *self = (t_FieldComparator$TermValComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldComparator$TermValComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$TermValComparator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$TermValComparator *self = (t_FieldComparator$TermValComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldComparator$TermValComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldComparator$TermValComparator), module, "FieldComparator$TermValComparator", 0);
        }

        void t_FieldComparator$TermValComparator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldComparator$TermValComparator).tp_dict, "class_", make_descriptor(FieldComparator$TermValComparator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldComparator$TermValComparator).tp_dict, "wrapfn_", make_descriptor(t_FieldComparator$TermValComparator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldComparator$TermValComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldComparator$TermValComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldComparator$TermValComparator::initializeClass, 1)))
            return NULL;
          return t_FieldComparator$TermValComparator::wrap_Object(FieldComparator$TermValComparator(((t_FieldComparator$TermValComparator *) arg)->object.this$));
        }
        static PyObject *t_FieldComparator$TermValComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldComparator$TermValComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldComparator$TermValComparator_of_(t_FieldComparator$TermValComparator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_FieldComparator$TermValComparator_compare(t_FieldComparator$TermValComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$TermValComparator), (PyObject *) self, "compare", args, 2);
        }

        static PyObject *t_FieldComparator$TermValComparator_compareBottom(t_FieldComparator$TermValComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareBottom(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$TermValComparator), (PyObject *) self, "compareBottom", args, 2);
        }

        static PyObject *t_FieldComparator$TermValComparator_compareTop(t_FieldComparator$TermValComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareTop(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$TermValComparator), (PyObject *) self, "compareTop", args, 2);
        }

        static PyObject *t_FieldComparator$TermValComparator_compareValues(t_FieldComparator$TermValComparator *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.compareValues(a0, a1));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$TermValComparator), (PyObject *) self, "compareValues", args, 2);
        }

        static PyObject *t_FieldComparator$TermValComparator_copy(t_FieldComparator$TermValComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.copy(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$TermValComparator), (PyObject *) self, "copy", args, 2);
        }

        static PyObject *t_FieldComparator$TermValComparator_setBottom(t_FieldComparator$TermValComparator *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.setBottom(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$TermValComparator), (PyObject *) self, "setBottom", args, 2);
        }

        static PyObject *t_FieldComparator$TermValComparator_setNextReader(t_FieldComparator$TermValComparator *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setNextReader(a0));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          return callSuper(&PY_TYPE(FieldComparator$TermValComparator), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_FieldComparator$TermValComparator_setTopValue(t_FieldComparator$TermValComparator *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setTopValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$TermValComparator), (PyObject *) self, "setTopValue", args, 2);
        }

        static PyObject *t_FieldComparator$TermValComparator_value(t_FieldComparator$TermValComparator *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.value(a0));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldComparator$TermValComparator), (PyObject *) self, "value", args, 2);
        }
        static PyObject *t_FieldComparator$TermValComparator_get__parameters_(t_FieldComparator$TermValComparator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static int t_FieldComparator$TermValComparator_set__bottom(t_FieldComparator$TermValComparator *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setBottom(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bottom", arg);
          return -1;
        }

        static int t_FieldComparator$TermValComparator_set__nextReader(t_FieldComparator$TermValComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_FieldComparator$TermValComparator_set__topValue(t_FieldComparator$TermValComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
            {
              INT_CALL(self->object.setTopValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "topValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene41/Lucene41PostingsBaseFormat.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/PostingsReaderBase.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/codecs/PostingsWriterBase.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene41 {

          ::java::lang::Class *Lucene41PostingsBaseFormat::class$ = NULL;
          jmethodID *Lucene41PostingsBaseFormat::mids$ = NULL;
          bool Lucene41PostingsBaseFormat::live$ = false;

          jclass Lucene41PostingsBaseFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene41/Lucene41PostingsBaseFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_postingsReaderBase_927fb3f2] = env->getMethodID(cls, "postingsReaderBase", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/PostingsReaderBase;");
              mids$[mid_postingsWriterBase_c1fe85c2] = env->getMethodID(cls, "postingsWriterBase", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/PostingsWriterBase;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene41PostingsBaseFormat::Lucene41PostingsBaseFormat() : ::org::apache::lucene::codecs::PostingsBaseFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::PostingsReaderBase Lucene41PostingsBaseFormat::postingsReaderBase(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::PostingsReaderBase(env->callObjectMethod(this$, mids$[mid_postingsReaderBase_927fb3f2], a0.this$));
          }

          ::org::apache::lucene::codecs::PostingsWriterBase Lucene41PostingsBaseFormat::postingsWriterBase(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::PostingsWriterBase(env->callObjectMethod(this$, mids$[mid_postingsWriterBase_c1fe85c2], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene41 {
          static PyObject *t_Lucene41PostingsBaseFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene41PostingsBaseFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene41PostingsBaseFormat_init_(t_Lucene41PostingsBaseFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene41PostingsBaseFormat_postingsReaderBase(t_Lucene41PostingsBaseFormat *self, PyObject *args);
          static PyObject *t_Lucene41PostingsBaseFormat_postingsWriterBase(t_Lucene41PostingsBaseFormat *self, PyObject *args);

          static PyMethodDef t_Lucene41PostingsBaseFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene41PostingsBaseFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene41PostingsBaseFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene41PostingsBaseFormat, postingsReaderBase, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsBaseFormat, postingsWriterBase, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene41PostingsBaseFormat, t_Lucene41PostingsBaseFormat, ::org::apache::lucene::codecs::PostingsBaseFormat, Lucene41PostingsBaseFormat, t_Lucene41PostingsBaseFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene41PostingsBaseFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene41PostingsBaseFormat), module, "Lucene41PostingsBaseFormat", 0);
          }

          void t_Lucene41PostingsBaseFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsBaseFormat).tp_dict, "class_", make_descriptor(Lucene41PostingsBaseFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsBaseFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene41PostingsBaseFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsBaseFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene41PostingsBaseFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene41PostingsBaseFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene41PostingsBaseFormat::wrap_Object(Lucene41PostingsBaseFormat(((t_Lucene41PostingsBaseFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene41PostingsBaseFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene41PostingsBaseFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene41PostingsBaseFormat_init_(t_Lucene41PostingsBaseFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene41PostingsBaseFormat object((jobject) NULL);

            INT_CALL(object = Lucene41PostingsBaseFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene41PostingsBaseFormat_postingsReaderBase(t_Lucene41PostingsBaseFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsReaderBase result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.postingsReaderBase(a0));
              return ::org::apache::lucene::codecs::t_PostingsReaderBase::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41PostingsBaseFormat), (PyObject *) self, "postingsReaderBase", args, 2);
          }

          static PyObject *t_Lucene41PostingsBaseFormat_postingsWriterBase(t_Lucene41PostingsBaseFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsWriterBase result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.postingsWriterBase(a0));
              return ::org::apache::lucene::codecs::t_PostingsWriterBase::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41PostingsBaseFormat), (PyObject *) self, "postingsWriterBase", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/StemmerUtil.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *StemmerUtil::class$ = NULL;
          jmethodID *StemmerUtil::mids$ = NULL;
          bool StemmerUtil::live$ = false;

          jclass StemmerUtil::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/StemmerUtil");

              mids$ = new jmethodID[max_mid];
              mids$[mid_delete_6f0bb349] = env->getStaticMethodID(cls, "delete", "([CII)I");
              mids$[mid_deleteN_afe81cab] = env->getStaticMethodID(cls, "deleteN", "([CIII)I");
              mids$[mid_endsWith_510fc742] = env->getStaticMethodID(cls, "endsWith", "([CILjava/lang/String;)Z");
              mids$[mid_endsWith_cf61b894] = env->getStaticMethodID(cls, "endsWith", "([CI[C)Z");
              mids$[mid_startsWith_510fc742] = env->getStaticMethodID(cls, "startsWith", "([CILjava/lang/String;)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint StemmerUtil::delete$(const JArray< jchar > & a0, jint a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_delete_6f0bb349], a0.this$, a1, a2);
          }

          jint StemmerUtil::deleteN(const JArray< jchar > & a0, jint a1, jint a2, jint a3)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_deleteN_afe81cab], a0.this$, a1, a2, a3);
          }

          jboolean StemmerUtil::endsWith(const JArray< jchar > & a0, jint a1, const ::java::lang::String & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_endsWith_510fc742], a0.this$, a1, a2.this$);
          }

          jboolean StemmerUtil::endsWith(const JArray< jchar > & a0, jint a1, const JArray< jchar > & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_endsWith_cf61b894], a0.this$, a1, a2.this$);
          }

          jboolean StemmerUtil::startsWith(const JArray< jchar > & a0, jint a1, const ::java::lang::String & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_startsWith_510fc742], a0.this$, a1, a2.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_StemmerUtil_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StemmerUtil_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StemmerUtil_delete(PyTypeObject *type, PyObject *args);
          static PyObject *t_StemmerUtil_deleteN(PyTypeObject *type, PyObject *args);
          static PyObject *t_StemmerUtil_endsWith(PyTypeObject *type, PyObject *args);
          static PyObject *t_StemmerUtil_startsWith(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_StemmerUtil__methods_[] = {
            DECLARE_METHOD(t_StemmerUtil, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StemmerUtil, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StemmerUtil, delete, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_StemmerUtil, deleteN, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_StemmerUtil, endsWith, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_StemmerUtil, startsWith, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StemmerUtil, t_StemmerUtil, ::java::lang::Object, StemmerUtil, abstract_init, 0, 0, 0, 0, 0);

          void t_StemmerUtil::install(PyObject *module)
          {
            installType(&PY_TYPE(StemmerUtil), module, "StemmerUtil", 0);
          }

          void t_StemmerUtil::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StemmerUtil).tp_dict, "class_", make_descriptor(StemmerUtil::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StemmerUtil).tp_dict, "wrapfn_", make_descriptor(t_StemmerUtil::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StemmerUtil).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StemmerUtil_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StemmerUtil::initializeClass, 1)))
              return NULL;
            return t_StemmerUtil::wrap_Object(StemmerUtil(((t_StemmerUtil *) arg)->object.this$));
          }
          static PyObject *t_StemmerUtil_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StemmerUtil::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_StemmerUtil_delete(PyTypeObject *type, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint a2;
            jint result;

            if (!parseArgs(args, "[CII", &a0, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::StemmerUtil::delete$(a0, a1, a2));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "delete", args);
            return NULL;
          }

          static PyObject *t_StemmerUtil_deleteN(PyTypeObject *type, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint a2;
            jint a3;
            jint result;

            if (!parseArgs(args, "[CIII", &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::StemmerUtil::deleteN(a0, a1, a2, a3));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "deleteN", args);
            return NULL;
          }

          static PyObject *t_StemmerUtil_endsWith(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "[CIs", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::util::StemmerUtil::endsWith(a0, a1, a2));
                  Py_RETURN_BOOL(result);
                }
              }
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                JArray< jchar > a2((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "[CI[C", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::util::StemmerUtil::endsWith(a0, a1, a2));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            PyErr_SetArgsError(type, "endsWith", args);
            return NULL;
          }

          static PyObject *t_StemmerUtil_startsWith(PyTypeObject *type, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            ::java::lang::String a2((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "[CIs", &a0, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::StemmerUtil::startsWith(a0, a1, a2));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "startsWith", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/text/NumberFormat.h"
#include "java/util/Locale.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/StringBuffer.h"
#include "java/util/Currency.h"
#include "java/lang/Number.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
  namespace text {

    ::java::lang::Class *NumberFormat::class$ = NULL;
    jmethodID *NumberFormat::mids$ = NULL;
    bool NumberFormat::live$ = false;
    jint NumberFormat::FRACTION_FIELD = (jint) 0;
    jint NumberFormat::INTEGER_FIELD = (jint) 0;

    jclass NumberFormat::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/text/NumberFormat");

        mids$ = new jmethodID[max_mid];
        mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_format_1b4624f8] = env->getMethodID(cls, "format", "(D)Ljava/lang/String;");
        mids$[mid_format_3e02f30e] = env->getMethodID(cls, "format", "(J)Ljava/lang/String;");
        mids$[mid_getAvailableLocales_59cb5b46] = env->getStaticMethodID(cls, "getAvailableLocales", "()[Ljava/util/Locale;");
        mids$[mid_getCurrency_14c3f2a1] = env->getMethodID(cls, "getCurrency", "()Ljava/util/Currency;");
        mids$[mid_getCurrencyInstance_6b701965] = env->getStaticMethodID(cls, "getCurrencyInstance", "()Ljava/text/NumberFormat;");
        mids$[mid_getCurrencyInstance_c103b3da] = env->getStaticMethodID(cls, "getCurrencyInstance", "(Ljava/util/Locale;)Ljava/text/NumberFormat;");
        mids$[mid_getInstance_6b701965] = env->getStaticMethodID(cls, "getInstance", "()Ljava/text/NumberFormat;");
        mids$[mid_getInstance_c103b3da] = env->getStaticMethodID(cls, "getInstance", "(Ljava/util/Locale;)Ljava/text/NumberFormat;");
        mids$[mid_getIntegerInstance_6b701965] = env->getStaticMethodID(cls, "getIntegerInstance", "()Ljava/text/NumberFormat;");
        mids$[mid_getIntegerInstance_c103b3da] = env->getStaticMethodID(cls, "getIntegerInstance", "(Ljava/util/Locale;)Ljava/text/NumberFormat;");
        mids$[mid_getMaximumFractionDigits_54c6a179] = env->getMethodID(cls, "getMaximumFractionDigits", "()I");
        mids$[mid_getMaximumIntegerDigits_54c6a179] = env->getMethodID(cls, "getMaximumIntegerDigits", "()I");
        mids$[mid_getMinimumFractionDigits_54c6a179] = env->getMethodID(cls, "getMinimumFractionDigits", "()I");
        mids$[mid_getMinimumIntegerDigits_54c6a179] = env->getMethodID(cls, "getMinimumIntegerDigits", "()I");
        mids$[mid_getNumberInstance_6b701965] = env->getStaticMethodID(cls, "getNumberInstance", "()Ljava/text/NumberFormat;");
        mids$[mid_getNumberInstance_c103b3da] = env->getStaticMethodID(cls, "getNumberInstance", "(Ljava/util/Locale;)Ljava/text/NumberFormat;");
        mids$[mid_getPercentInstance_6b701965] = env->getStaticMethodID(cls, "getPercentInstance", "()Ljava/text/NumberFormat;");
        mids$[mid_getPercentInstance_c103b3da] = env->getStaticMethodID(cls, "getPercentInstance", "(Ljava/util/Locale;)Ljava/text/NumberFormat;");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_isGroupingUsed_54c6a16a] = env->getMethodID(cls, "isGroupingUsed", "()Z");
        mids$[mid_isParseIntegerOnly_54c6a16a] = env->getMethodID(cls, "isParseIntegerOnly", "()Z");
        mids$[mid_parse_271f2fcb] = env->getMethodID(cls, "parse", "(Ljava/lang/String;)Ljava/lang/Number;");
        mids$[mid_setCurrency_de939370] = env->getMethodID(cls, "setCurrency", "(Ljava/util/Currency;)V");
        mids$[mid_setGroupingUsed_bb0c767f] = env->getMethodID(cls, "setGroupingUsed", "(Z)V");
        mids$[mid_setMaximumFractionDigits_39c7bd3c] = env->getMethodID(cls, "setMaximumFractionDigits", "(I)V");
        mids$[mid_setMaximumIntegerDigits_39c7bd3c] = env->getMethodID(cls, "setMaximumIntegerDigits", "(I)V");
        mids$[mid_setMinimumFractionDigits_39c7bd3c] = env->getMethodID(cls, "setMinimumFractionDigits", "(I)V");
        mids$[mid_setMinimumIntegerDigits_39c7bd3c] = env->getMethodID(cls, "setMinimumIntegerDigits", "(I)V");
        mids$[mid_setParseIntegerOnly_bb0c767f] = env->getMethodID(cls, "setParseIntegerOnly", "(Z)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        FRACTION_FIELD = env->getStaticIntField(cls, "FRACTION_FIELD");
        INTEGER_FIELD = env->getStaticIntField(cls, "INTEGER_FIELD");
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    ::java::lang::Object NumberFormat::clone() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_clone_846352c3]));
    }

    jboolean NumberFormat::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    ::java::lang::String NumberFormat::format(jdouble a0) const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_format_1b4624f8], a0));
    }

    ::java::lang::String NumberFormat::format(jlong a0) const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_format_3e02f30e], a0));
    }

    JArray< ::java::util::Locale > NumberFormat::getAvailableLocales()
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< ::java::util::Locale >(env->callStaticObjectMethod(cls, mids$[mid_getAvailableLocales_59cb5b46]));
    }

    ::java::util::Currency NumberFormat::getCurrency() const
    {
      return ::java::util::Currency(env->callObjectMethod(this$, mids$[mid_getCurrency_14c3f2a1]));
    }

    NumberFormat NumberFormat::getCurrencyInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return NumberFormat(env->callStaticObjectMethod(cls, mids$[mid_getCurrencyInstance_6b701965]));
    }

    NumberFormat NumberFormat::getCurrencyInstance(const ::java::util::Locale & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return NumberFormat(env->callStaticObjectMethod(cls, mids$[mid_getCurrencyInstance_c103b3da], a0.this$));
    }

    NumberFormat NumberFormat::getInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return NumberFormat(env->callStaticObjectMethod(cls, mids$[mid_getInstance_6b701965]));
    }

    NumberFormat NumberFormat::getInstance(const ::java::util::Locale & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return NumberFormat(env->callStaticObjectMethod(cls, mids$[mid_getInstance_c103b3da], a0.this$));
    }

    NumberFormat NumberFormat::getIntegerInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return NumberFormat(env->callStaticObjectMethod(cls, mids$[mid_getIntegerInstance_6b701965]));
    }

    NumberFormat NumberFormat::getIntegerInstance(const ::java::util::Locale & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return NumberFormat(env->callStaticObjectMethod(cls, mids$[mid_getIntegerInstance_c103b3da], a0.this$));
    }

    jint NumberFormat::getMaximumFractionDigits() const
    {
      return env->callIntMethod(this$, mids$[mid_getMaximumFractionDigits_54c6a179]);
    }

    jint NumberFormat::getMaximumIntegerDigits() const
    {
      return env->callIntMethod(this$, mids$[mid_getMaximumIntegerDigits_54c6a179]);
    }

    jint NumberFormat::getMinimumFractionDigits() const
    {
      return env->callIntMethod(this$, mids$[mid_getMinimumFractionDigits_54c6a179]);
    }

    jint NumberFormat::getMinimumIntegerDigits() const
    {
      return env->callIntMethod(this$, mids$[mid_getMinimumIntegerDigits_54c6a179]);
    }

    NumberFormat NumberFormat::getNumberInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return NumberFormat(env->callStaticObjectMethod(cls, mids$[mid_getNumberInstance_6b701965]));
    }

    NumberFormat NumberFormat::getNumberInstance(const ::java::util::Locale & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return NumberFormat(env->callStaticObjectMethod(cls, mids$[mid_getNumberInstance_c103b3da], a0.this$));
    }

    NumberFormat NumberFormat::getPercentInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return NumberFormat(env->callStaticObjectMethod(cls, mids$[mid_getPercentInstance_6b701965]));
    }

    NumberFormat NumberFormat::getPercentInstance(const ::java::util::Locale & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return NumberFormat(env->callStaticObjectMethod(cls, mids$[mid_getPercentInstance_c103b3da], a0.this$));
    }

    jint NumberFormat::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jboolean NumberFormat::isGroupingUsed() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isGroupingUsed_54c6a16a]);
    }

    jboolean NumberFormat::isParseIntegerOnly() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isParseIntegerOnly_54c6a16a]);
    }

    ::java::lang::Number NumberFormat::parse(const ::java::lang::String & a0) const
    {
      return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_parse_271f2fcb], a0.this$));
    }

    void NumberFormat::setCurrency(const ::java::util::Currency & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setCurrency_de939370], a0.this$);
    }

    void NumberFormat::setGroupingUsed(jboolean a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setGroupingUsed_bb0c767f], a0);
    }

    void NumberFormat::setMaximumFractionDigits(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setMaximumFractionDigits_39c7bd3c], a0);
    }

    void NumberFormat::setMaximumIntegerDigits(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setMaximumIntegerDigits_39c7bd3c], a0);
    }

    void NumberFormat::setMinimumFractionDigits(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setMinimumFractionDigits_39c7bd3c], a0);
    }

    void NumberFormat::setMinimumIntegerDigits(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setMinimumIntegerDigits_39c7bd3c], a0);
    }

    void NumberFormat::setParseIntegerOnly(jboolean a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setParseIntegerOnly_bb0c767f], a0);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace text {
    static PyObject *t_NumberFormat_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_NumberFormat_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_NumberFormat_clone(t_NumberFormat *self, PyObject *args);
    static PyObject *t_NumberFormat_equals(t_NumberFormat *self, PyObject *args);
    static PyObject *t_NumberFormat_format(t_NumberFormat *self, PyObject *args);
    static PyObject *t_NumberFormat_getAvailableLocales(PyTypeObject *type);
    static PyObject *t_NumberFormat_getCurrency(t_NumberFormat *self);
    static PyObject *t_NumberFormat_getCurrencyInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_NumberFormat_getInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_NumberFormat_getIntegerInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_NumberFormat_getMaximumFractionDigits(t_NumberFormat *self);
    static PyObject *t_NumberFormat_getMaximumIntegerDigits(t_NumberFormat *self);
    static PyObject *t_NumberFormat_getMinimumFractionDigits(t_NumberFormat *self);
    static PyObject *t_NumberFormat_getMinimumIntegerDigits(t_NumberFormat *self);
    static PyObject *t_NumberFormat_getNumberInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_NumberFormat_getPercentInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_NumberFormat_hashCode(t_NumberFormat *self, PyObject *args);
    static PyObject *t_NumberFormat_isGroupingUsed(t_NumberFormat *self);
    static PyObject *t_NumberFormat_isParseIntegerOnly(t_NumberFormat *self);
    static PyObject *t_NumberFormat_parse(t_NumberFormat *self, PyObject *arg);
    static PyObject *t_NumberFormat_setCurrency(t_NumberFormat *self, PyObject *arg);
    static PyObject *t_NumberFormat_setGroupingUsed(t_NumberFormat *self, PyObject *arg);
    static PyObject *t_NumberFormat_setMaximumFractionDigits(t_NumberFormat *self, PyObject *arg);
    static PyObject *t_NumberFormat_setMaximumIntegerDigits(t_NumberFormat *self, PyObject *arg);
    static PyObject *t_NumberFormat_setMinimumFractionDigits(t_NumberFormat *self, PyObject *arg);
    static PyObject *t_NumberFormat_setMinimumIntegerDigits(t_NumberFormat *self, PyObject *arg);
    static PyObject *t_NumberFormat_setParseIntegerOnly(t_NumberFormat *self, PyObject *arg);
    static PyObject *t_NumberFormat_get__availableLocales(t_NumberFormat *self, void *data);
    static PyObject *t_NumberFormat_get__currency(t_NumberFormat *self, void *data);
    static int t_NumberFormat_set__currency(t_NumberFormat *self, PyObject *arg, void *data);
    static PyObject *t_NumberFormat_get__currencyInstance(t_NumberFormat *self, void *data);
    static PyObject *t_NumberFormat_get__groupingUsed(t_NumberFormat *self, void *data);
    static int t_NumberFormat_set__groupingUsed(t_NumberFormat *self, PyObject *arg, void *data);
    static PyObject *t_NumberFormat_get__instance(t_NumberFormat *self, void *data);
    static PyObject *t_NumberFormat_get__integerInstance(t_NumberFormat *self, void *data);
    static PyObject *t_NumberFormat_get__maximumFractionDigits(t_NumberFormat *self, void *data);
    static int t_NumberFormat_set__maximumFractionDigits(t_NumberFormat *self, PyObject *arg, void *data);
    static PyObject *t_NumberFormat_get__maximumIntegerDigits(t_NumberFormat *self, void *data);
    static int t_NumberFormat_set__maximumIntegerDigits(t_NumberFormat *self, PyObject *arg, void *data);
    static PyObject *t_NumberFormat_get__minimumFractionDigits(t_NumberFormat *self, void *data);
    static int t_NumberFormat_set__minimumFractionDigits(t_NumberFormat *self, PyObject *arg, void *data);
    static PyObject *t_NumberFormat_get__minimumIntegerDigits(t_NumberFormat *self, void *data);
    static int t_NumberFormat_set__minimumIntegerDigits(t_NumberFormat *self, PyObject *arg, void *data);
    static PyObject *t_NumberFormat_get__numberInstance(t_NumberFormat *self, void *data);
    static PyObject *t_NumberFormat_get__parseIntegerOnly(t_NumberFormat *self, void *data);
    static int t_NumberFormat_set__parseIntegerOnly(t_NumberFormat *self, PyObject *arg, void *data);
    static PyObject *t_NumberFormat_get__percentInstance(t_NumberFormat *self, void *data);
    static PyGetSetDef t_NumberFormat__fields_[] = {
      DECLARE_GET_FIELD(t_NumberFormat, availableLocales),
      DECLARE_GETSET_FIELD(t_NumberFormat, currency),
      DECLARE_GET_FIELD(t_NumberFormat, currencyInstance),
      DECLARE_GETSET_FIELD(t_NumberFormat, groupingUsed),
      DECLARE_GET_FIELD(t_NumberFormat, instance),
      DECLARE_GET_FIELD(t_NumberFormat, integerInstance),
      DECLARE_GETSET_FIELD(t_NumberFormat, maximumFractionDigits),
      DECLARE_GETSET_FIELD(t_NumberFormat, maximumIntegerDigits),
      DECLARE_GETSET_FIELD(t_NumberFormat, minimumFractionDigits),
      DECLARE_GETSET_FIELD(t_NumberFormat, minimumIntegerDigits),
      DECLARE_GET_FIELD(t_NumberFormat, numberInstance),
      DECLARE_GETSET_FIELD(t_NumberFormat, parseIntegerOnly),
      DECLARE_GET_FIELD(t_NumberFormat, percentInstance),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_NumberFormat__methods_[] = {
      DECLARE_METHOD(t_NumberFormat, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_NumberFormat, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_NumberFormat, clone, METH_VARARGS),
      DECLARE_METHOD(t_NumberFormat, equals, METH_VARARGS),
      DECLARE_METHOD(t_NumberFormat, format, METH_VARARGS),
      DECLARE_METHOD(t_NumberFormat, getAvailableLocales, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_NumberFormat, getCurrency, METH_NOARGS),
      DECLARE_METHOD(t_NumberFormat, getCurrencyInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_NumberFormat, getInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_NumberFormat, getIntegerInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_NumberFormat, getMaximumFractionDigits, METH_NOARGS),
      DECLARE_METHOD(t_NumberFormat, getMaximumIntegerDigits, METH_NOARGS),
      DECLARE_METHOD(t_NumberFormat, getMinimumFractionDigits, METH_NOARGS),
      DECLARE_METHOD(t_NumberFormat, getMinimumIntegerDigits, METH_NOARGS),
      DECLARE_METHOD(t_NumberFormat, getNumberInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_NumberFormat, getPercentInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_NumberFormat, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_NumberFormat, isGroupingUsed, METH_NOARGS),
      DECLARE_METHOD(t_NumberFormat, isParseIntegerOnly, METH_NOARGS),
      DECLARE_METHOD(t_NumberFormat, parse, METH_O),
      DECLARE_METHOD(t_NumberFormat, setCurrency, METH_O),
      DECLARE_METHOD(t_NumberFormat, setGroupingUsed, METH_O),
      DECLARE_METHOD(t_NumberFormat, setMaximumFractionDigits, METH_O),
      DECLARE_METHOD(t_NumberFormat, setMaximumIntegerDigits, METH_O),
      DECLARE_METHOD(t_NumberFormat, setMinimumFractionDigits, METH_O),
      DECLARE_METHOD(t_NumberFormat, setMinimumIntegerDigits, METH_O),
      DECLARE_METHOD(t_NumberFormat, setParseIntegerOnly, METH_O),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(NumberFormat, t_NumberFormat, ::java::text::Format, NumberFormat, abstract_init, 0, 0, t_NumberFormat__fields_, 0, 0);

    void t_NumberFormat::install(PyObject *module)
    {
      installType(&PY_TYPE(NumberFormat), module, "NumberFormat", 0);
    }

    void t_NumberFormat::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(NumberFormat).tp_dict, "class_", make_descriptor(NumberFormat::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(NumberFormat).tp_dict, "wrapfn_", make_descriptor(t_NumberFormat::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(NumberFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
      env->getClass(NumberFormat::initializeClass);
      PyDict_SetItemString(PY_TYPE(NumberFormat).tp_dict, "FRACTION_FIELD", make_descriptor(NumberFormat::FRACTION_FIELD));
      PyDict_SetItemString(PY_TYPE(NumberFormat).tp_dict, "INTEGER_FIELD", make_descriptor(NumberFormat::INTEGER_FIELD));
    }

    static PyObject *t_NumberFormat_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, NumberFormat::initializeClass, 1)))
        return NULL;
      return t_NumberFormat::wrap_Object(NumberFormat(((t_NumberFormat *) arg)->object.this$));
    }
    static PyObject *t_NumberFormat_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, NumberFormat::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_NumberFormat_clone(t_NumberFormat *self, PyObject *args)
    {
      ::java::lang::Object result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.clone());
        return ::java::lang::t_Object::wrap_Object(result);
      }

      return callSuper(&PY_TYPE(NumberFormat), (PyObject *) self, "clone", args, 2);
    }

    static PyObject *t_NumberFormat_equals(t_NumberFormat *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(NumberFormat), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_NumberFormat_format(t_NumberFormat *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jdouble a0;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "D", &a0))
          {
            OBJ_CALL(result = self->object.format(a0));
            return j2p(result);
          }
        }
        {
          jlong a0;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(result = self->object.format(a0));
            return j2p(result);
          }
        }
      }

      return callSuper(&PY_TYPE(NumberFormat), (PyObject *) self, "format", args, 2);
    }

    static PyObject *t_NumberFormat_getAvailableLocales(PyTypeObject *type)
    {
      JArray< ::java::util::Locale > result((jobject) NULL);
      OBJ_CALL(result = ::java::text::NumberFormat::getAvailableLocales());
      return JArray<jobject>(result.this$).wrap(::java::util::t_Locale::wrap_jobject);
    }

    static PyObject *t_NumberFormat_getCurrency(t_NumberFormat *self)
    {
      ::java::util::Currency result((jobject) NULL);
      OBJ_CALL(result = self->object.getCurrency());
      return ::java::util::t_Currency::wrap_Object(result);
    }

    static PyObject *t_NumberFormat_getCurrencyInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          NumberFormat result((jobject) NULL);
          OBJ_CALL(result = ::java::text::NumberFormat::getCurrencyInstance());
          return t_NumberFormat::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          NumberFormat result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = ::java::text::NumberFormat::getCurrencyInstance(a0));
            return t_NumberFormat::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getCurrencyInstance", args);
      return NULL;
    }

    static PyObject *t_NumberFormat_getInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          NumberFormat result((jobject) NULL);
          OBJ_CALL(result = ::java::text::NumberFormat::getInstance());
          return t_NumberFormat::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          NumberFormat result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = ::java::text::NumberFormat::getInstance(a0));
            return t_NumberFormat::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getInstance", args);
      return NULL;
    }

    static PyObject *t_NumberFormat_getIntegerInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          NumberFormat result((jobject) NULL);
          OBJ_CALL(result = ::java::text::NumberFormat::getIntegerInstance());
          return t_NumberFormat::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          NumberFormat result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = ::java::text::NumberFormat::getIntegerInstance(a0));
            return t_NumberFormat::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getIntegerInstance", args);
      return NULL;
    }

    static PyObject *t_NumberFormat_getMaximumFractionDigits(t_NumberFormat *self)
    {
      jint result;
      OBJ_CALL(result = self->object.getMaximumFractionDigits());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_NumberFormat_getMaximumIntegerDigits(t_NumberFormat *self)
    {
      jint result;
      OBJ_CALL(result = self->object.getMaximumIntegerDigits());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_NumberFormat_getMinimumFractionDigits(t_NumberFormat *self)
    {
      jint result;
      OBJ_CALL(result = self->object.getMinimumFractionDigits());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_NumberFormat_getMinimumIntegerDigits(t_NumberFormat *self)
    {
      jint result;
      OBJ_CALL(result = self->object.getMinimumIntegerDigits());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_NumberFormat_getNumberInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          NumberFormat result((jobject) NULL);
          OBJ_CALL(result = ::java::text::NumberFormat::getNumberInstance());
          return t_NumberFormat::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          NumberFormat result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = ::java::text::NumberFormat::getNumberInstance(a0));
            return t_NumberFormat::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getNumberInstance", args);
      return NULL;
    }

    static PyObject *t_NumberFormat_getPercentInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          NumberFormat result((jobject) NULL);
          OBJ_CALL(result = ::java::text::NumberFormat::getPercentInstance());
          return t_NumberFormat::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          NumberFormat result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = ::java::text::NumberFormat::getPercentInstance(a0));
            return t_NumberFormat::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getPercentInstance", args);
      return NULL;
    }

    static PyObject *t_NumberFormat_hashCode(t_NumberFormat *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(NumberFormat), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_NumberFormat_isGroupingUsed(t_NumberFormat *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isGroupingUsed());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_NumberFormat_isParseIntegerOnly(t_NumberFormat *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isParseIntegerOnly());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_NumberFormat_parse(t_NumberFormat *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      ::java::lang::Number result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = self->object.parse(a0));
        return ::java::lang::t_Number::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "parse", arg);
      return NULL;
    }

    static PyObject *t_NumberFormat_setCurrency(t_NumberFormat *self, PyObject *arg)
    {
      ::java::util::Currency a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::util::Currency::initializeClass, &a0))
      {
        OBJ_CALL(self->object.setCurrency(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setCurrency", arg);
      return NULL;
    }

    static PyObject *t_NumberFormat_setGroupingUsed(t_NumberFormat *self, PyObject *arg)
    {
      jboolean a0;

      if (!parseArg(arg, "Z", &a0))
      {
        OBJ_CALL(self->object.setGroupingUsed(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setGroupingUsed", arg);
      return NULL;
    }

    static PyObject *t_NumberFormat_setMaximumFractionDigits(t_NumberFormat *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.setMaximumFractionDigits(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setMaximumFractionDigits", arg);
      return NULL;
    }

    static PyObject *t_NumberFormat_setMaximumIntegerDigits(t_NumberFormat *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.setMaximumIntegerDigits(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setMaximumIntegerDigits", arg);
      return NULL;
    }

    static PyObject *t_NumberFormat_setMinimumFractionDigits(t_NumberFormat *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.setMinimumFractionDigits(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setMinimumFractionDigits", arg);
      return NULL;
    }

    static PyObject *t_NumberFormat_setMinimumIntegerDigits(t_NumberFormat *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.setMinimumIntegerDigits(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setMinimumIntegerDigits", arg);
      return NULL;
    }

    static PyObject *t_NumberFormat_setParseIntegerOnly(t_NumberFormat *self, PyObject *arg)
    {
      jboolean a0;

      if (!parseArg(arg, "Z", &a0))
      {
        OBJ_CALL(self->object.setParseIntegerOnly(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setParseIntegerOnly", arg);
      return NULL;
    }

    static PyObject *t_NumberFormat_get__availableLocales(t_NumberFormat *self, void *data)
    {
      JArray< ::java::util::Locale > value((jobject) NULL);
      OBJ_CALL(value = self->object.getAvailableLocales());
      return JArray<jobject>(value.this$).wrap(::java::util::t_Locale::wrap_jobject);
    }

    static PyObject *t_NumberFormat_get__currency(t_NumberFormat *self, void *data)
    {
      ::java::util::Currency value((jobject) NULL);
      OBJ_CALL(value = self->object.getCurrency());
      return ::java::util::t_Currency::wrap_Object(value);
    }
    static int t_NumberFormat_set__currency(t_NumberFormat *self, PyObject *arg, void *data)
    {
      {
        ::java::util::Currency value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::util::Currency::initializeClass, &value))
        {
          INT_CALL(self->object.setCurrency(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "currency", arg);
      return -1;
    }

    static PyObject *t_NumberFormat_get__currencyInstance(t_NumberFormat *self, void *data)
    {
      NumberFormat value((jobject) NULL);
      OBJ_CALL(value = self->object.getCurrencyInstance());
      return t_NumberFormat::wrap_Object(value);
    }

    static PyObject *t_NumberFormat_get__groupingUsed(t_NumberFormat *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isGroupingUsed());
      Py_RETURN_BOOL(value);
    }
    static int t_NumberFormat_set__groupingUsed(t_NumberFormat *self, PyObject *arg, void *data)
    {
      {
        jboolean value;
        if (!parseArg(arg, "Z", &value))
        {
          INT_CALL(self->object.setGroupingUsed(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "groupingUsed", arg);
      return -1;
    }

    static PyObject *t_NumberFormat_get__instance(t_NumberFormat *self, void *data)
    {
      NumberFormat value((jobject) NULL);
      OBJ_CALL(value = self->object.getInstance());
      return t_NumberFormat::wrap_Object(value);
    }

    static PyObject *t_NumberFormat_get__integerInstance(t_NumberFormat *self, void *data)
    {
      NumberFormat value((jobject) NULL);
      OBJ_CALL(value = self->object.getIntegerInstance());
      return t_NumberFormat::wrap_Object(value);
    }

    static PyObject *t_NumberFormat_get__maximumFractionDigits(t_NumberFormat *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getMaximumFractionDigits());
      return PyInt_FromLong((long) value);
    }
    static int t_NumberFormat_set__maximumFractionDigits(t_NumberFormat *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setMaximumFractionDigits(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "maximumFractionDigits", arg);
      return -1;
    }

    static PyObject *t_NumberFormat_get__maximumIntegerDigits(t_NumberFormat *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getMaximumIntegerDigits());
      return PyInt_FromLong((long) value);
    }
    static int t_NumberFormat_set__maximumIntegerDigits(t_NumberFormat *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setMaximumIntegerDigits(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "maximumIntegerDigits", arg);
      return -1;
    }

    static PyObject *t_NumberFormat_get__minimumFractionDigits(t_NumberFormat *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getMinimumFractionDigits());
      return PyInt_FromLong((long) value);
    }
    static int t_NumberFormat_set__minimumFractionDigits(t_NumberFormat *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setMinimumFractionDigits(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "minimumFractionDigits", arg);
      return -1;
    }

    static PyObject *t_NumberFormat_get__minimumIntegerDigits(t_NumberFormat *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getMinimumIntegerDigits());
      return PyInt_FromLong((long) value);
    }
    static int t_NumberFormat_set__minimumIntegerDigits(t_NumberFormat *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setMinimumIntegerDigits(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "minimumIntegerDigits", arg);
      return -1;
    }

    static PyObject *t_NumberFormat_get__numberInstance(t_NumberFormat *self, void *data)
    {
      NumberFormat value((jobject) NULL);
      OBJ_CALL(value = self->object.getNumberInstance());
      return t_NumberFormat::wrap_Object(value);
    }

    static PyObject *t_NumberFormat_get__parseIntegerOnly(t_NumberFormat *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isParseIntegerOnly());
      Py_RETURN_BOOL(value);
    }
    static int t_NumberFormat_set__parseIntegerOnly(t_NumberFormat *self, PyObject *arg, void *data)
    {
      {
        jboolean value;
        if (!parseArg(arg, "Z", &value))
        {
          INT_CALL(self->object.setParseIntegerOnly(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "parseIntegerOnly", arg);
      return -1;
    }

    static PyObject *t_NumberFormat_get__percentInstance(t_NumberFormat *self, void *data)
    {
      NumberFormat value((jobject) NULL);
      OBJ_CALL(value = self->object.getPercentInstance());
      return t_NumberFormat::wrap_Object(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/el/GreekAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {

          ::java::lang::Class *GreekAnalyzer::class$ = NULL;
          jmethodID *GreekAnalyzer::mids$ = NULL;
          bool GreekAnalyzer::live$ = false;
          ::java::lang::String *GreekAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass GreekAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/el/GreekAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GreekAnalyzer::GreekAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          GreekAnalyzer::GreekAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet GreekAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {
          static PyObject *t_GreekAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GreekAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GreekAnalyzer_init_(t_GreekAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GreekAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_GreekAnalyzer_get__defaultStopSet(t_GreekAnalyzer *self, void *data);
          static PyGetSetDef t_GreekAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_GreekAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GreekAnalyzer__methods_[] = {
            DECLARE_METHOD(t_GreekAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GreekAnalyzer, t_GreekAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, GreekAnalyzer, t_GreekAnalyzer_init_, 0, 0, t_GreekAnalyzer__fields_, 0, 0);

          void t_GreekAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(GreekAnalyzer), module, "GreekAnalyzer", 0);
          }

          void t_GreekAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GreekAnalyzer).tp_dict, "class_", make_descriptor(GreekAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GreekAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_GreekAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GreekAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(GreekAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(GreekAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*GreekAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_GreekAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GreekAnalyzer::initializeClass, 1)))
              return NULL;
            return t_GreekAnalyzer::wrap_Object(GreekAnalyzer(((t_GreekAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_GreekAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GreekAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GreekAnalyzer_init_(t_GreekAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                GreekAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = GreekAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                GreekAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = GreekAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GreekAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::el::GreekAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_GreekAnalyzer_get__defaultStopSet(t_GreekAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/Scorer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/search/highlight/TextFragment.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *Scorer::class$ = NULL;
          jmethodID *Scorer::mids$ = NULL;
          bool Scorer::live$ = false;

          jclass Scorer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/Scorer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getFragmentScore_54c6a176] = env->getMethodID(cls, "getFragmentScore", "()F");
              mids$[mid_getTokenScore_54c6a176] = env->getMethodID(cls, "getTokenScore", "()F");
              mids$[mid_init_a65cd6ab] = env->getMethodID(cls, "init", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_startFragment_0335a78a] = env->getMethodID(cls, "startFragment", "(Lorg/apache/lucene/search/highlight/TextFragment;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jfloat Scorer::getFragmentScore() const
          {
            return env->callFloatMethod(this$, mids$[mid_getFragmentScore_54c6a176]);
          }

          jfloat Scorer::getTokenScore() const
          {
            return env->callFloatMethod(this$, mids$[mid_getTokenScore_54c6a176]);
          }

          ::org::apache::lucene::analysis::TokenStream Scorer::init(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_init_a65cd6ab], a0.this$));
          }

          void Scorer::startFragment(const ::org::apache::lucene::search::highlight::TextFragment & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_startFragment_0335a78a], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_Scorer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Scorer_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Scorer_getFragmentScore(t_Scorer *self);
          static PyObject *t_Scorer_getTokenScore(t_Scorer *self);
          static PyObject *t_Scorer_init(t_Scorer *self, PyObject *arg);
          static PyObject *t_Scorer_startFragment(t_Scorer *self, PyObject *arg);
          static PyObject *t_Scorer_get__fragmentScore(t_Scorer *self, void *data);
          static PyObject *t_Scorer_get__tokenScore(t_Scorer *self, void *data);
          static PyGetSetDef t_Scorer__fields_[] = {
            DECLARE_GET_FIELD(t_Scorer, fragmentScore),
            DECLARE_GET_FIELD(t_Scorer, tokenScore),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Scorer__methods_[] = {
            DECLARE_METHOD(t_Scorer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Scorer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Scorer, getFragmentScore, METH_NOARGS),
            DECLARE_METHOD(t_Scorer, getTokenScore, METH_NOARGS),
            DECLARE_METHOD(t_Scorer, init, METH_O),
            DECLARE_METHOD(t_Scorer, startFragment, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Scorer, t_Scorer, ::java::lang::Object, Scorer, abstract_init, 0, 0, t_Scorer__fields_, 0, 0);

          void t_Scorer::install(PyObject *module)
          {
            installType(&PY_TYPE(Scorer), module, "Scorer", 0);
          }

          void t_Scorer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Scorer).tp_dict, "class_", make_descriptor(Scorer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Scorer).tp_dict, "wrapfn_", make_descriptor(t_Scorer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Scorer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Scorer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Scorer::initializeClass, 1)))
              return NULL;
            return t_Scorer::wrap_Object(Scorer(((t_Scorer *) arg)->object.this$));
          }
          static PyObject *t_Scorer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Scorer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Scorer_getFragmentScore(t_Scorer *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getFragmentScore());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_Scorer_getTokenScore(t_Scorer *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getTokenScore());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_Scorer_init(t_Scorer *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.init(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "init", arg);
            return NULL;
          }

          static PyObject *t_Scorer_startFragment(t_Scorer *self, PyObject *arg)
          {
            ::org::apache::lucene::search::highlight::TextFragment a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::highlight::TextFragment::initializeClass, &a0))
            {
              OBJ_CALL(self->object.startFragment(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "startFragment", arg);
            return NULL;
          }

          static PyObject *t_Scorer_get__fragmentScore(t_Scorer *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getFragmentScore());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_Scorer_get__tokenScore(t_Scorer *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getTokenScore());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/TextFragment.h"
#include "java/lang/String.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *TextFragment::class$ = NULL;
          jmethodID *TextFragment::mids$ = NULL;
          bool TextFragment::live$ = false;

          jclass TextFragment::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/TextFragment");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_6cc8d7e2] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;II)V");
              mids$[mid_follows_0335a786] = env->getMethodID(cls, "follows", "(Lorg/apache/lucene/search/highlight/TextFragment;)Z");
              mids$[mid_getFragNum_54c6a179] = env->getMethodID(cls, "getFragNum", "()I");
              mids$[mid_getScore_54c6a176] = env->getMethodID(cls, "getScore", "()F");
              mids$[mid_merge_0335a78a] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/search/highlight/TextFragment;)V");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TextFragment::TextFragment(const ::java::lang::CharSequence & a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6cc8d7e2, a0.this$, a1, a2)) {}

          jboolean TextFragment::follows(const TextFragment & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_follows_0335a786], a0.this$);
          }

          jint TextFragment::getFragNum() const
          {
            return env->callIntMethod(this$, mids$[mid_getFragNum_54c6a179]);
          }

          jfloat TextFragment::getScore() const
          {
            return env->callFloatMethod(this$, mids$[mid_getScore_54c6a176]);
          }

          void TextFragment::merge(const TextFragment & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_merge_0335a78a], a0.this$);
          }

          ::java::lang::String TextFragment::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_TextFragment_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TextFragment_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TextFragment_init_(t_TextFragment *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TextFragment_follows(t_TextFragment *self, PyObject *arg);
          static PyObject *t_TextFragment_getFragNum(t_TextFragment *self);
          static PyObject *t_TextFragment_getScore(t_TextFragment *self);
          static PyObject *t_TextFragment_merge(t_TextFragment *self, PyObject *arg);
          static PyObject *t_TextFragment_toString(t_TextFragment *self, PyObject *args);
          static PyObject *t_TextFragment_get__fragNum(t_TextFragment *self, void *data);
          static PyObject *t_TextFragment_get__score(t_TextFragment *self, void *data);
          static PyGetSetDef t_TextFragment__fields_[] = {
            DECLARE_GET_FIELD(t_TextFragment, fragNum),
            DECLARE_GET_FIELD(t_TextFragment, score),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TextFragment__methods_[] = {
            DECLARE_METHOD(t_TextFragment, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TextFragment, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TextFragment, follows, METH_O),
            DECLARE_METHOD(t_TextFragment, getFragNum, METH_NOARGS),
            DECLARE_METHOD(t_TextFragment, getScore, METH_NOARGS),
            DECLARE_METHOD(t_TextFragment, merge, METH_O),
            DECLARE_METHOD(t_TextFragment, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TextFragment, t_TextFragment, ::java::lang::Object, TextFragment, t_TextFragment_init_, 0, 0, t_TextFragment__fields_, 0, 0);

          void t_TextFragment::install(PyObject *module)
          {
            installType(&PY_TYPE(TextFragment), module, "TextFragment", 0);
          }

          void t_TextFragment::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TextFragment).tp_dict, "class_", make_descriptor(TextFragment::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TextFragment).tp_dict, "wrapfn_", make_descriptor(t_TextFragment::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TextFragment).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TextFragment_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TextFragment::initializeClass, 1)))
              return NULL;
            return t_TextFragment::wrap_Object(TextFragment(((t_TextFragment *) arg)->object.this$));
          }
          static PyObject *t_TextFragment_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TextFragment::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TextFragment_init_(t_TextFragment *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::CharSequence a0((jobject) NULL);
            jint a1;
            jint a2;
            TextFragment object((jobject) NULL);

            if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
            {
              INT_CALL(object = TextFragment(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TextFragment_follows(t_TextFragment *self, PyObject *arg)
          {
            TextFragment a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "k", TextFragment::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.follows(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "follows", arg);
            return NULL;
          }

          static PyObject *t_TextFragment_getFragNum(t_TextFragment *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getFragNum());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_TextFragment_getScore(t_TextFragment *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getScore());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_TextFragment_merge(t_TextFragment *self, PyObject *arg)
          {
            TextFragment a0((jobject) NULL);

            if (!parseArg(arg, "k", TextFragment::initializeClass, &a0))
            {
              OBJ_CALL(self->object.merge(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "merge", arg);
            return NULL;
          }

          static PyObject *t_TextFragment_toString(t_TextFragment *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(TextFragment), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_TextFragment_get__fragNum(t_TextFragment *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getFragNum());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_TextFragment_get__score(t_TextFragment *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getScore());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/in/IndicNormalizationFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace in {

          ::java::lang::Class *IndicNormalizationFilter::class$ = NULL;
          jmethodID *IndicNormalizationFilter::mids$ = NULL;
          bool IndicNormalizationFilter::live$ = false;

          jclass IndicNormalizationFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/in/IndicNormalizationFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IndicNormalizationFilter::IndicNormalizationFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean IndicNormalizationFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace in {
          static PyObject *t_IndicNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndicNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IndicNormalizationFilter_init_(t_IndicNormalizationFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IndicNormalizationFilter_incrementToken(t_IndicNormalizationFilter *self, PyObject *args);

          static PyMethodDef t_IndicNormalizationFilter__methods_[] = {
            DECLARE_METHOD(t_IndicNormalizationFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndicNormalizationFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndicNormalizationFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IndicNormalizationFilter, t_IndicNormalizationFilter, ::org::apache::lucene::analysis::TokenFilter, IndicNormalizationFilter, t_IndicNormalizationFilter_init_, 0, 0, 0, 0, 0);

          void t_IndicNormalizationFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(IndicNormalizationFilter), module, "IndicNormalizationFilter", 0);
          }

          void t_IndicNormalizationFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IndicNormalizationFilter).tp_dict, "class_", make_descriptor(IndicNormalizationFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IndicNormalizationFilter).tp_dict, "wrapfn_", make_descriptor(t_IndicNormalizationFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IndicNormalizationFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IndicNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IndicNormalizationFilter::initializeClass, 1)))
              return NULL;
            return t_IndicNormalizationFilter::wrap_Object(IndicNormalizationFilter(((t_IndicNormalizationFilter *) arg)->object.this$));
          }
          static PyObject *t_IndicNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IndicNormalizationFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IndicNormalizationFilter_init_(t_IndicNormalizationFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            IndicNormalizationFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = IndicNormalizationFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IndicNormalizationFilter_incrementToken(t_IndicNormalizationFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(IndicNormalizationFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/bg/BulgarianStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace bg {

          ::java::lang::Class *BulgarianStemmer::class$ = NULL;
          jmethodID *BulgarianStemmer::mids$ = NULL;
          bool BulgarianStemmer::live$ = false;

          jclass BulgarianStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/bg/BulgarianStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BulgarianStemmer::BulgarianStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint BulgarianStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace bg {
          static PyObject *t_BulgarianStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BulgarianStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BulgarianStemmer_init_(t_BulgarianStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BulgarianStemmer_stem(t_BulgarianStemmer *self, PyObject *args);

          static PyMethodDef t_BulgarianStemmer__methods_[] = {
            DECLARE_METHOD(t_BulgarianStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BulgarianStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BulgarianStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BulgarianStemmer, t_BulgarianStemmer, ::java::lang::Object, BulgarianStemmer, t_BulgarianStemmer_init_, 0, 0, 0, 0, 0);

          void t_BulgarianStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(BulgarianStemmer), module, "BulgarianStemmer", 0);
          }

          void t_BulgarianStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BulgarianStemmer).tp_dict, "class_", make_descriptor(BulgarianStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BulgarianStemmer).tp_dict, "wrapfn_", make_descriptor(t_BulgarianStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BulgarianStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BulgarianStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BulgarianStemmer::initializeClass, 1)))
              return NULL;
            return t_BulgarianStemmer::wrap_Object(BulgarianStemmer(((t_BulgarianStemmer *) arg)->object.this$));
          }
          static PyObject *t_BulgarianStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BulgarianStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BulgarianStemmer_init_(t_BulgarianStemmer *self, PyObject *args, PyObject *kwds)
          {
            BulgarianStemmer object((jobject) NULL);

            INT_CALL(object = BulgarianStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_BulgarianStemmer_stem(t_BulgarianStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$bitwise_or_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$bitwise_or_return::class$ = NULL;
          jmethodID *JavascriptParser$bitwise_or_return::mids$ = NULL;
          bool JavascriptParser$bitwise_or_return::live$ = false;

          jclass JavascriptParser$bitwise_or_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$bitwise_or_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$bitwise_or_return::JavascriptParser$bitwise_or_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$bitwise_or_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$bitwise_or_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$bitwise_or_return_init_(t_JavascriptParser$bitwise_or_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$bitwise_or_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$bitwise_or_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$bitwise_or_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$bitwise_or_return, t_JavascriptParser$bitwise_or_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$bitwise_or_return, t_JavascriptParser$bitwise_or_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$bitwise_or_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$bitwise_or_return), module, "JavascriptParser$bitwise_or_return", 0);
          }

          void t_JavascriptParser$bitwise_or_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$bitwise_or_return).tp_dict, "class_", make_descriptor(JavascriptParser$bitwise_or_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$bitwise_or_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$bitwise_or_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$bitwise_or_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$bitwise_or_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$bitwise_or_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$bitwise_or_return::wrap_Object(JavascriptParser$bitwise_or_return(((t_JavascriptParser$bitwise_or_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$bitwise_or_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$bitwise_or_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$bitwise_or_return_init_(t_JavascriptParser$bitwise_or_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$bitwise_or_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$bitwise_or_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo$Toffs.h"
#include "java/lang/Comparable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FieldPhraseList$WeightedPhraseInfo$Toffs::class$ = NULL;
          jmethodID *FieldPhraseList$WeightedPhraseInfo$Toffs::mids$ = NULL;
          bool FieldPhraseList$WeightedPhraseInfo$Toffs::live$ = false;

          jclass FieldPhraseList$WeightedPhraseInfo$Toffs::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo$Toffs");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d8d154a6] = env->getMethodID(cls, "<init>", "(II)V");
              mids$[mid_compareTo_7779971e] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo$Toffs;)I");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getEndOffset_54c6a179] = env->getMethodID(cls, "getEndOffset", "()I");
              mids$[mid_getStartOffset_54c6a179] = env->getMethodID(cls, "getStartOffset", "()I");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_setEndOffset_39c7bd3c] = env->getMethodID(cls, "setEndOffset", "(I)V");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FieldPhraseList$WeightedPhraseInfo$Toffs::FieldPhraseList$WeightedPhraseInfo$Toffs(jint a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d8d154a6, a0, a1)) {}

          jint FieldPhraseList$WeightedPhraseInfo$Toffs::compareTo(const FieldPhraseList$WeightedPhraseInfo$Toffs & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareTo_7779971e], a0.this$);
          }

          jboolean FieldPhraseList$WeightedPhraseInfo$Toffs::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint FieldPhraseList$WeightedPhraseInfo$Toffs::getEndOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getEndOffset_54c6a179]);
          }

          jint FieldPhraseList$WeightedPhraseInfo$Toffs::getStartOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getStartOffset_54c6a179]);
          }

          jint FieldPhraseList$WeightedPhraseInfo$Toffs::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          void FieldPhraseList$WeightedPhraseInfo$Toffs::setEndOffset(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setEndOffset_39c7bd3c], a0);
          }

          ::java::lang::String FieldPhraseList$WeightedPhraseInfo$Toffs::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FieldPhraseList$WeightedPhraseInfo$Toffs_init_(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_compareTo(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *arg);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_equals(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *args);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_getEndOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_getStartOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_hashCode(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *args);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_setEndOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *arg);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_toString(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *args);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_get__endOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, void *data);
          static int t_FieldPhraseList$WeightedPhraseInfo$Toffs_set__endOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *arg, void *data);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_get__startOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, void *data);
          static PyGetSetDef t_FieldPhraseList$WeightedPhraseInfo$Toffs__fields_[] = {
            DECLARE_GETSET_FIELD(t_FieldPhraseList$WeightedPhraseInfo$Toffs, endOffset),
            DECLARE_GET_FIELD(t_FieldPhraseList$WeightedPhraseInfo$Toffs, startOffset),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldPhraseList$WeightedPhraseInfo$Toffs__methods_[] = {
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo$Toffs, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo$Toffs, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo$Toffs, compareTo, METH_O),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo$Toffs, equals, METH_VARARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo$Toffs, getEndOffset, METH_NOARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo$Toffs, getStartOffset, METH_NOARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo$Toffs, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo$Toffs, setEndOffset, METH_O),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo$Toffs, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FieldPhraseList$WeightedPhraseInfo$Toffs, t_FieldPhraseList$WeightedPhraseInfo$Toffs, ::java::lang::Object, FieldPhraseList$WeightedPhraseInfo$Toffs, t_FieldPhraseList$WeightedPhraseInfo$Toffs_init_, 0, 0, t_FieldPhraseList$WeightedPhraseInfo$Toffs__fields_, 0, 0);

          void t_FieldPhraseList$WeightedPhraseInfo$Toffs::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldPhraseList$WeightedPhraseInfo$Toffs), module, "FieldPhraseList$WeightedPhraseInfo$Toffs", 0);
          }

          void t_FieldPhraseList$WeightedPhraseInfo$Toffs::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FieldPhraseList$WeightedPhraseInfo$Toffs).tp_dict, "class_", make_descriptor(FieldPhraseList$WeightedPhraseInfo$Toffs::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FieldPhraseList$WeightedPhraseInfo$Toffs).tp_dict, "wrapfn_", make_descriptor(t_FieldPhraseList$WeightedPhraseInfo$Toffs::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FieldPhraseList$WeightedPhraseInfo$Toffs).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldPhraseList$WeightedPhraseInfo$Toffs::initializeClass, 1)))
              return NULL;
            return t_FieldPhraseList$WeightedPhraseInfo$Toffs::wrap_Object(FieldPhraseList$WeightedPhraseInfo$Toffs(((t_FieldPhraseList$WeightedPhraseInfo$Toffs *) arg)->object.this$));
          }
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldPhraseList$WeightedPhraseInfo$Toffs::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FieldPhraseList$WeightedPhraseInfo$Toffs_init_(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            jint a1;
            FieldPhraseList$WeightedPhraseInfo$Toffs object((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              INT_CALL(object = FieldPhraseList$WeightedPhraseInfo$Toffs(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_compareTo(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *arg)
          {
            FieldPhraseList$WeightedPhraseInfo$Toffs a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", FieldPhraseList$WeightedPhraseInfo$Toffs::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.compareTo(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
            return NULL;
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_equals(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FieldPhraseList$WeightedPhraseInfo$Toffs), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_getEndOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEndOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_getStartOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getStartOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_hashCode(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(FieldPhraseList$WeightedPhraseInfo$Toffs), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_setEndOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setEndOffset(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setEndOffset", arg);
            return NULL;
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_toString(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(FieldPhraseList$WeightedPhraseInfo$Toffs), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_get__endOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEndOffset());
            return PyInt_FromLong((long) value);
          }
          static int t_FieldPhraseList$WeightedPhraseInfo$Toffs_set__endOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setEndOffset(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "endOffset", arg);
            return -1;
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_get__startOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getStartOffset());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/AfterEffect$NoAfterEffect.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *AfterEffect$NoAfterEffect::class$ = NULL;
          jmethodID *AfterEffect$NoAfterEffect::mids$ = NULL;
          bool AfterEffect$NoAfterEffect::live$ = false;

          jclass AfterEffect$NoAfterEffect::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/AfterEffect$NoAfterEffect");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_05d4946a] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;F)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_score_076760a9] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;F)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AfterEffect$NoAfterEffect::AfterEffect$NoAfterEffect() : ::org::apache::lucene::search::similarities::AfterEffect(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::Explanation AfterEffect$NoAfterEffect::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_05d4946a], a0.this$, a1));
          }

          jfloat AfterEffect$NoAfterEffect::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_076760a9], a0.this$, a1);
          }

          ::java::lang::String AfterEffect$NoAfterEffect::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_AfterEffect$NoAfterEffect_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AfterEffect$NoAfterEffect_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AfterEffect$NoAfterEffect_init_(t_AfterEffect$NoAfterEffect *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AfterEffect$NoAfterEffect_explain(t_AfterEffect$NoAfterEffect *self, PyObject *args);
          static PyObject *t_AfterEffect$NoAfterEffect_score(t_AfterEffect$NoAfterEffect *self, PyObject *args);
          static PyObject *t_AfterEffect$NoAfterEffect_toString(t_AfterEffect$NoAfterEffect *self, PyObject *args);

          static PyMethodDef t_AfterEffect$NoAfterEffect__methods_[] = {
            DECLARE_METHOD(t_AfterEffect$NoAfterEffect, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AfterEffect$NoAfterEffect, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AfterEffect$NoAfterEffect, explain, METH_VARARGS),
            DECLARE_METHOD(t_AfterEffect$NoAfterEffect, score, METH_VARARGS),
            DECLARE_METHOD(t_AfterEffect$NoAfterEffect, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AfterEffect$NoAfterEffect, t_AfterEffect$NoAfterEffect, ::org::apache::lucene::search::similarities::AfterEffect, AfterEffect$NoAfterEffect, t_AfterEffect$NoAfterEffect_init_, 0, 0, 0, 0, 0);

          void t_AfterEffect$NoAfterEffect::install(PyObject *module)
          {
            installType(&PY_TYPE(AfterEffect$NoAfterEffect), module, "AfterEffect$NoAfterEffect", 0);
          }

          void t_AfterEffect$NoAfterEffect::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AfterEffect$NoAfterEffect).tp_dict, "class_", make_descriptor(AfterEffect$NoAfterEffect::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AfterEffect$NoAfterEffect).tp_dict, "wrapfn_", make_descriptor(t_AfterEffect$NoAfterEffect::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AfterEffect$NoAfterEffect).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AfterEffect$NoAfterEffect_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AfterEffect$NoAfterEffect::initializeClass, 1)))
              return NULL;
            return t_AfterEffect$NoAfterEffect::wrap_Object(AfterEffect$NoAfterEffect(((t_AfterEffect$NoAfterEffect *) arg)->object.this$));
          }
          static PyObject *t_AfterEffect$NoAfterEffect_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AfterEffect$NoAfterEffect::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AfterEffect$NoAfterEffect_init_(t_AfterEffect$NoAfterEffect *self, PyObject *args, PyObject *kwds)
          {
            AfterEffect$NoAfterEffect object((jobject) NULL);

            INT_CALL(object = AfterEffect$NoAfterEffect());
            self->object = object;

            return 0;
          }

          static PyObject *t_AfterEffect$NoAfterEffect_explain(t_AfterEffect$NoAfterEffect *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.explain(a0, a1));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(AfterEffect$NoAfterEffect), (PyObject *) self, "explain", args, 2);
          }

          static PyObject *t_AfterEffect$NoAfterEffect_score(t_AfterEffect$NoAfterEffect *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat result;

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(AfterEffect$NoAfterEffect), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_AfterEffect$NoAfterEffect_toString(t_AfterEffect$NoAfterEffect *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(AfterEffect$NoAfterEffect), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/docvalues/FloatDocValues.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queries/function/FunctionValues$ValueFiller.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {

            ::java::lang::Class *FloatDocValues::class$ = NULL;
            jmethodID *FloatDocValues::mids$ = NULL;
            bool FloatDocValues::live$ = false;

            jclass FloatDocValues::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/docvalues/FloatDocValues");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ca78fe7a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_byteVal_39c7bd28] = env->getMethodID(cls, "byteVal", "(I)B");
                mids$[mid_doubleVal_39c7bd2e] = env->getMethodID(cls, "doubleVal", "(I)D");
                mids$[mid_floatVal_39c7bd2c] = env->getMethodID(cls, "floatVal", "(I)F");
                mids$[mid_getValueFiller_7731f0bd] = env->getMethodID(cls, "getValueFiller", "()Lorg/apache/lucene/queries/function/FunctionValues$ValueFiller;");
                mids$[mid_intVal_39c7bd23] = env->getMethodID(cls, "intVal", "(I)I");
                mids$[mid_longVal_39c7bd20] = env->getMethodID(cls, "longVal", "(I)J");
                mids$[mid_objectVal_29be6a55] = env->getMethodID(cls, "objectVal", "(I)Ljava/lang/Object;");
                mids$[mid_shortVal_39c7bd39] = env->getMethodID(cls, "shortVal", "(I)S");
                mids$[mid_strVal_141401b3] = env->getMethodID(cls, "strVal", "(I)Ljava/lang/String;");
                mids$[mid_toString_141401b3] = env->getMethodID(cls, "toString", "(I)Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FloatDocValues::FloatDocValues(const ::org::apache::lucene::queries::function::ValueSource & a0) : ::org::apache::lucene::queries::function::FunctionValues(env->newObject(initializeClass, &mids$, mid_init$_ca78fe7a, a0.this$)) {}

            jbyte FloatDocValues::byteVal(jint a0) const
            {
              return env->callByteMethod(this$, mids$[mid_byteVal_39c7bd28], a0);
            }

            jdouble FloatDocValues::doubleVal(jint a0) const
            {
              return env->callDoubleMethod(this$, mids$[mid_doubleVal_39c7bd2e], a0);
            }

            jfloat FloatDocValues::floatVal(jint a0) const
            {
              return env->callFloatMethod(this$, mids$[mid_floatVal_39c7bd2c], a0);
            }

            ::org::apache::lucene::queries::function::FunctionValues$ValueFiller FloatDocValues::getValueFiller() const
            {
              return ::org::apache::lucene::queries::function::FunctionValues$ValueFiller(env->callObjectMethod(this$, mids$[mid_getValueFiller_7731f0bd]));
            }

            jint FloatDocValues::intVal(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_intVal_39c7bd23], a0);
            }

            jlong FloatDocValues::longVal(jint a0) const
            {
              return env->callLongMethod(this$, mids$[mid_longVal_39c7bd20], a0);
            }

            ::java::lang::Object FloatDocValues::objectVal(jint a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_objectVal_29be6a55], a0));
            }

            jshort FloatDocValues::shortVal(jint a0) const
            {
              return env->callShortMethod(this$, mids$[mid_shortVal_39c7bd39], a0);
            }

            ::java::lang::String FloatDocValues::strVal(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_strVal_141401b3], a0));
            }

            ::java::lang::String FloatDocValues::toString(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_141401b3], a0));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {
            static PyObject *t_FloatDocValues_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FloatDocValues_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FloatDocValues_init_(t_FloatDocValues *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FloatDocValues_byteVal(t_FloatDocValues *self, PyObject *args);
            static PyObject *t_FloatDocValues_doubleVal(t_FloatDocValues *self, PyObject *args);
            static PyObject *t_FloatDocValues_floatVal(t_FloatDocValues *self, PyObject *args);
            static PyObject *t_FloatDocValues_getValueFiller(t_FloatDocValues *self, PyObject *args);
            static PyObject *t_FloatDocValues_intVal(t_FloatDocValues *self, PyObject *args);
            static PyObject *t_FloatDocValues_longVal(t_FloatDocValues *self, PyObject *args);
            static PyObject *t_FloatDocValues_objectVal(t_FloatDocValues *self, PyObject *args);
            static PyObject *t_FloatDocValues_shortVal(t_FloatDocValues *self, PyObject *args);
            static PyObject *t_FloatDocValues_strVal(t_FloatDocValues *self, PyObject *args);
            static PyObject *t_FloatDocValues_toString(t_FloatDocValues *self, PyObject *args);
            static PyObject *t_FloatDocValues_get__valueFiller(t_FloatDocValues *self, void *data);
            static PyGetSetDef t_FloatDocValues__fields_[] = {
              DECLARE_GET_FIELD(t_FloatDocValues, valueFiller),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FloatDocValues__methods_[] = {
              DECLARE_METHOD(t_FloatDocValues, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FloatDocValues, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FloatDocValues, byteVal, METH_VARARGS),
              DECLARE_METHOD(t_FloatDocValues, doubleVal, METH_VARARGS),
              DECLARE_METHOD(t_FloatDocValues, floatVal, METH_VARARGS),
              DECLARE_METHOD(t_FloatDocValues, getValueFiller, METH_VARARGS),
              DECLARE_METHOD(t_FloatDocValues, intVal, METH_VARARGS),
              DECLARE_METHOD(t_FloatDocValues, longVal, METH_VARARGS),
              DECLARE_METHOD(t_FloatDocValues, objectVal, METH_VARARGS),
              DECLARE_METHOD(t_FloatDocValues, shortVal, METH_VARARGS),
              DECLARE_METHOD(t_FloatDocValues, strVal, METH_VARARGS),
              DECLARE_METHOD(t_FloatDocValues, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FloatDocValues, t_FloatDocValues, ::org::apache::lucene::queries::function::FunctionValues, FloatDocValues, t_FloatDocValues_init_, 0, 0, t_FloatDocValues__fields_, 0, 0);

            void t_FloatDocValues::install(PyObject *module)
            {
              installType(&PY_TYPE(FloatDocValues), module, "FloatDocValues", 0);
            }

            void t_FloatDocValues::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FloatDocValues).tp_dict, "class_", make_descriptor(FloatDocValues::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FloatDocValues).tp_dict, "wrapfn_", make_descriptor(t_FloatDocValues::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FloatDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FloatDocValues_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FloatDocValues::initializeClass, 1)))
                return NULL;
              return t_FloatDocValues::wrap_Object(FloatDocValues(((t_FloatDocValues *) arg)->object.this$));
            }
            static PyObject *t_FloatDocValues_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FloatDocValues::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FloatDocValues_init_(t_FloatDocValues *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              FloatDocValues object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = FloatDocValues(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FloatDocValues_byteVal(t_FloatDocValues *self, PyObject *args)
            {
              jint a0;
              jbyte result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.byteVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(FloatDocValues), (PyObject *) self, "byteVal", args, 2);
            }

            static PyObject *t_FloatDocValues_doubleVal(t_FloatDocValues *self, PyObject *args)
            {
              jint a0;
              jdouble result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.doubleVal(a0));
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(&PY_TYPE(FloatDocValues), (PyObject *) self, "doubleVal", args, 2);
            }

            static PyObject *t_FloatDocValues_floatVal(t_FloatDocValues *self, PyObject *args)
            {
              jint a0;
              jfloat result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.floatVal(a0));
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(&PY_TYPE(FloatDocValues), (PyObject *) self, "floatVal", args, 2);
            }

            static PyObject *t_FloatDocValues_getValueFiller(t_FloatDocValues *self, PyObject *args)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getValueFiller());
                return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(FloatDocValues), (PyObject *) self, "getValueFiller", args, 2);
            }

            static PyObject *t_FloatDocValues_intVal(t_FloatDocValues *self, PyObject *args)
            {
              jint a0;
              jint result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.intVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(FloatDocValues), (PyObject *) self, "intVal", args, 2);
            }

            static PyObject *t_FloatDocValues_longVal(t_FloatDocValues *self, PyObject *args)
            {
              jint a0;
              jlong result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.longVal(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(FloatDocValues), (PyObject *) self, "longVal", args, 2);
            }

            static PyObject *t_FloatDocValues_objectVal(t_FloatDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.objectVal(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(FloatDocValues), (PyObject *) self, "objectVal", args, 2);
            }

            static PyObject *t_FloatDocValues_shortVal(t_FloatDocValues *self, PyObject *args)
            {
              jint a0;
              jshort result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.shortVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(FloatDocValues), (PyObject *) self, "shortVal", args, 2);
            }

            static PyObject *t_FloatDocValues_strVal(t_FloatDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.strVal(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(FloatDocValues), (PyObject *) self, "strVal", args, 2);
            }

            static PyObject *t_FloatDocValues_toString(t_FloatDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(FloatDocValues), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_FloatDocValues_get__valueFiller(t_FloatDocValues *self, void *data)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller value((jobject) NULL);
              OBJ_CALL(value = self->object.getValueFiller());
              return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/LMSimilarity$DefaultCollectionModel.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/similarities/LMSimilarity$CollectionModel.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *LMSimilarity$DefaultCollectionModel::class$ = NULL;
          jmethodID *LMSimilarity$DefaultCollectionModel::mids$ = NULL;
          bool LMSimilarity$DefaultCollectionModel::live$ = false;

          jclass LMSimilarity$DefaultCollectionModel::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/LMSimilarity$DefaultCollectionModel");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_computeProbability_cb225ea0] = env->getMethodID(cls, "computeProbability", "(Lorg/apache/lucene/search/similarities/BasicStats;)F");
              mids$[mid_getName_14c7b5c5] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LMSimilarity$DefaultCollectionModel::LMSimilarity$DefaultCollectionModel() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat LMSimilarity$DefaultCollectionModel::computeProbability(const ::org::apache::lucene::search::similarities::BasicStats & a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_computeProbability_cb225ea0], a0.this$);
          }

          ::java::lang::String LMSimilarity$DefaultCollectionModel::getName() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_LMSimilarity$DefaultCollectionModel_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LMSimilarity$DefaultCollectionModel_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LMSimilarity$DefaultCollectionModel_init_(t_LMSimilarity$DefaultCollectionModel *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LMSimilarity$DefaultCollectionModel_computeProbability(t_LMSimilarity$DefaultCollectionModel *self, PyObject *arg);
          static PyObject *t_LMSimilarity$DefaultCollectionModel_getName(t_LMSimilarity$DefaultCollectionModel *self);
          static PyObject *t_LMSimilarity$DefaultCollectionModel_get__name(t_LMSimilarity$DefaultCollectionModel *self, void *data);
          static PyGetSetDef t_LMSimilarity$DefaultCollectionModel__fields_[] = {
            DECLARE_GET_FIELD(t_LMSimilarity$DefaultCollectionModel, name),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LMSimilarity$DefaultCollectionModel__methods_[] = {
            DECLARE_METHOD(t_LMSimilarity$DefaultCollectionModel, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMSimilarity$DefaultCollectionModel, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMSimilarity$DefaultCollectionModel, computeProbability, METH_O),
            DECLARE_METHOD(t_LMSimilarity$DefaultCollectionModel, getName, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LMSimilarity$DefaultCollectionModel, t_LMSimilarity$DefaultCollectionModel, ::java::lang::Object, LMSimilarity$DefaultCollectionModel, t_LMSimilarity$DefaultCollectionModel_init_, 0, 0, t_LMSimilarity$DefaultCollectionModel__fields_, 0, 0);

          void t_LMSimilarity$DefaultCollectionModel::install(PyObject *module)
          {
            installType(&PY_TYPE(LMSimilarity$DefaultCollectionModel), module, "LMSimilarity$DefaultCollectionModel", 0);
          }

          void t_LMSimilarity$DefaultCollectionModel::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LMSimilarity$DefaultCollectionModel).tp_dict, "class_", make_descriptor(LMSimilarity$DefaultCollectionModel::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LMSimilarity$DefaultCollectionModel).tp_dict, "wrapfn_", make_descriptor(t_LMSimilarity$DefaultCollectionModel::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LMSimilarity$DefaultCollectionModel).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LMSimilarity$DefaultCollectionModel_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LMSimilarity$DefaultCollectionModel::initializeClass, 1)))
              return NULL;
            return t_LMSimilarity$DefaultCollectionModel::wrap_Object(LMSimilarity$DefaultCollectionModel(((t_LMSimilarity$DefaultCollectionModel *) arg)->object.this$));
          }
          static PyObject *t_LMSimilarity$DefaultCollectionModel_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LMSimilarity$DefaultCollectionModel::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LMSimilarity$DefaultCollectionModel_init_(t_LMSimilarity$DefaultCollectionModel *self, PyObject *args, PyObject *kwds)
          {
            LMSimilarity$DefaultCollectionModel object((jobject) NULL);

            INT_CALL(object = LMSimilarity$DefaultCollectionModel());
            self->object = object;

            return 0;
          }

          static PyObject *t_LMSimilarity$DefaultCollectionModel_computeProbability(t_LMSimilarity$DefaultCollectionModel *self, PyObject *arg)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat result;

            if (!parseArg(arg, "k", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.computeProbability(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "computeProbability", arg);
            return NULL;
          }

          static PyObject *t_LMSimilarity$DefaultCollectionModel_getName(t_LMSimilarity$DefaultCollectionModel *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getName());
            return j2p(result);
          }

          static PyObject *t_LMSimilarity$DefaultCollectionModel_get__name(t_LMSimilarity$DefaultCollectionModel *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getName());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/Enumeration.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *Enumeration::class$ = NULL;
    jmethodID *Enumeration::mids$ = NULL;
    bool Enumeration::live$ = false;

    jclass Enumeration::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/Enumeration");

        mids$ = new jmethodID[max_mid];
        mids$[mid_hasMoreElements_54c6a16a] = env->getMethodID(cls, "hasMoreElements", "()Z");
        mids$[mid_nextElement_846352c3] = env->getMethodID(cls, "nextElement", "()Ljava/lang/Object;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    jboolean Enumeration::hasMoreElements() const
    {
      return env->callBooleanMethod(this$, mids$[mid_hasMoreElements_54c6a16a]);
    }

    ::java::lang::Object Enumeration::nextElement() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_nextElement_846352c3]));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_Enumeration_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Enumeration_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Enumeration_of_(t_Enumeration *self, PyObject *args);
    static PyObject *t_Enumeration_hasMoreElements(t_Enumeration *self);
    static PyObject *t_Enumeration_nextElement(t_Enumeration *self);
    static PyObject *t_Enumeration_get__parameters_(t_Enumeration *self, void *data);
    static PyGetSetDef t_Enumeration__fields_[] = {
      DECLARE_GET_FIELD(t_Enumeration, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Enumeration__methods_[] = {
      DECLARE_METHOD(t_Enumeration, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Enumeration, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Enumeration, of_, METH_VARARGS),
      DECLARE_METHOD(t_Enumeration, hasMoreElements, METH_NOARGS),
      DECLARE_METHOD(t_Enumeration, nextElement, METH_NOARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Enumeration, t_Enumeration, ::java::lang::Object, Enumeration, abstract_init, PyObject_SelfIter, ((PyObject *(*)(::java::util::t_Enumeration *)) get_generic_enumeration_next< ::java::util::t_Enumeration,::java::lang::t_Object >), t_Enumeration__fields_, 0, 0);
    PyObject *t_Enumeration::wrap_Object(const Enumeration& object, PyTypeObject *p0)
    {
      PyObject *obj = t_Enumeration::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_Enumeration *self = (t_Enumeration *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    PyObject *t_Enumeration::wrap_jobject(const jobject& object, PyTypeObject *p0)
    {
      PyObject *obj = t_Enumeration::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_Enumeration *self = (t_Enumeration *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    void t_Enumeration::install(PyObject *module)
    {
      installType(&PY_TYPE(Enumeration), module, "Enumeration", 0);
    }

    void t_Enumeration::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Enumeration).tp_dict, "class_", make_descriptor(Enumeration::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Enumeration).tp_dict, "wrapfn_", make_descriptor(t_Enumeration::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Enumeration).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Enumeration_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Enumeration::initializeClass, 1)))
        return NULL;
      return t_Enumeration::wrap_Object(Enumeration(((t_Enumeration *) arg)->object.this$));
    }
    static PyObject *t_Enumeration_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Enumeration::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Enumeration_of_(t_Enumeration *self, PyObject *args)
    {
      if (!parseArg(args, "T", 1, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static PyObject *t_Enumeration_hasMoreElements(t_Enumeration *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.hasMoreElements());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Enumeration_nextElement(t_Enumeration *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.nextElement());
      return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
    }
    static PyObject *t_Enumeration_get__parameters_(t_Enumeration *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanQueryBuilder.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *SpanQueryBuilder::class$ = NULL;
            jmethodID *SpanQueryBuilder::mids$ = NULL;
            bool SpanQueryBuilder::live$ = false;

            jclass SpanQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/SpanQueryBuilder");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_SpanQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SpanQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);

            static PyMethodDef t_SpanQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_SpanQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SpanQueryBuilder, t_SpanQueryBuilder, ::org::apache::lucene::queryparser::xml::QueryBuilder, SpanQueryBuilder, abstract_init, 0, 0, 0, 0, 0);

            void t_SpanQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(SpanQueryBuilder), module, "SpanQueryBuilder", 0);
            }

            void t_SpanQueryBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SpanQueryBuilder).tp_dict, "class_", make_descriptor(SpanQueryBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SpanQueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_SpanQueryBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SpanQueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SpanQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SpanQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_SpanQueryBuilder::wrap_Object(SpanQueryBuilder(((t_SpanQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_SpanQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SpanQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/Analyzer$PerFieldReuseStrategy.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/Analyzer$TokenStreamComponents.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *Analyzer$PerFieldReuseStrategy::class$ = NULL;
        jmethodID *Analyzer$PerFieldReuseStrategy::mids$ = NULL;
        bool Analyzer$PerFieldReuseStrategy::live$ = false;

        jclass Analyzer$PerFieldReuseStrategy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/Analyzer$PerFieldReuseStrategy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_getReusableComponents_19769f4a] = env->getMethodID(cls, "getReusableComponents", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
            mids$[mid_setReusableComponents_66577a3f] = env->getMethodID(cls, "setReusableComponents", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Analyzer$PerFieldReuseStrategy::Analyzer$PerFieldReuseStrategy() : ::org::apache::lucene::analysis::Analyzer$ReuseStrategy(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents Analyzer$PerFieldReuseStrategy::getReusableComponents(const ::org::apache::lucene::analysis::Analyzer & a0, const ::java::lang::String & a1) const
        {
          return ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents(env->callObjectMethod(this$, mids$[mid_getReusableComponents_19769f4a], a0.this$, a1.this$));
        }

        void Analyzer$PerFieldReuseStrategy::setReusableComponents(const ::org::apache::lucene::analysis::Analyzer & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_setReusableComponents_66577a3f], a0.this$, a1.this$, a2.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_Analyzer$PerFieldReuseStrategy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Analyzer$PerFieldReuseStrategy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Analyzer$PerFieldReuseStrategy_init_(t_Analyzer$PerFieldReuseStrategy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Analyzer$PerFieldReuseStrategy_getReusableComponents(t_Analyzer$PerFieldReuseStrategy *self, PyObject *args);
        static PyObject *t_Analyzer$PerFieldReuseStrategy_setReusableComponents(t_Analyzer$PerFieldReuseStrategy *self, PyObject *args);

        static PyMethodDef t_Analyzer$PerFieldReuseStrategy__methods_[] = {
          DECLARE_METHOD(t_Analyzer$PerFieldReuseStrategy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Analyzer$PerFieldReuseStrategy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Analyzer$PerFieldReuseStrategy, getReusableComponents, METH_VARARGS),
          DECLARE_METHOD(t_Analyzer$PerFieldReuseStrategy, setReusableComponents, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Analyzer$PerFieldReuseStrategy, t_Analyzer$PerFieldReuseStrategy, ::org::apache::lucene::analysis::Analyzer$ReuseStrategy, Analyzer$PerFieldReuseStrategy, t_Analyzer$PerFieldReuseStrategy_init_, 0, 0, 0, 0, 0);

        void t_Analyzer$PerFieldReuseStrategy::install(PyObject *module)
        {
          installType(&PY_TYPE(Analyzer$PerFieldReuseStrategy), module, "Analyzer$PerFieldReuseStrategy", 0);
        }

        void t_Analyzer$PerFieldReuseStrategy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Analyzer$PerFieldReuseStrategy).tp_dict, "class_", make_descriptor(Analyzer$PerFieldReuseStrategy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Analyzer$PerFieldReuseStrategy).tp_dict, "wrapfn_", make_descriptor(t_Analyzer$PerFieldReuseStrategy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Analyzer$PerFieldReuseStrategy).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Analyzer$PerFieldReuseStrategy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Analyzer$PerFieldReuseStrategy::initializeClass, 1)))
            return NULL;
          return t_Analyzer$PerFieldReuseStrategy::wrap_Object(Analyzer$PerFieldReuseStrategy(((t_Analyzer$PerFieldReuseStrategy *) arg)->object.this$));
        }
        static PyObject *t_Analyzer$PerFieldReuseStrategy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Analyzer$PerFieldReuseStrategy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Analyzer$PerFieldReuseStrategy_init_(t_Analyzer$PerFieldReuseStrategy *self, PyObject *args, PyObject *kwds)
        {
          Analyzer$PerFieldReuseStrategy object((jobject) NULL);

          INT_CALL(object = Analyzer$PerFieldReuseStrategy());
          self->object = object;

          return 0;
        }

        static PyObject *t_Analyzer$PerFieldReuseStrategy_getReusableComponents(t_Analyzer$PerFieldReuseStrategy *self, PyObject *args)
        {
          ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getReusableComponents(a0, a1));
            return ::org::apache::lucene::analysis::t_Analyzer$TokenStreamComponents::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(Analyzer$PerFieldReuseStrategy), (PyObject *) self, "getReusableComponents", args, 2);
        }

        static PyObject *t_Analyzer$PerFieldReuseStrategy_setReusableComponents(t_Analyzer$PerFieldReuseStrategy *self, PyObject *args)
        {
          ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents a2((jobject) NULL);

          if (!parseArgs(args, "ksk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.setReusableComponents(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(Analyzer$PerFieldReuseStrategy), (PyObject *) self, "setReusableComponents", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/AttributeSource$State.h"
#include "java/lang/Cloneable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *AttributeSource$State::class$ = NULL;
        jmethodID *AttributeSource$State::mids$ = NULL;
        bool AttributeSource$State::live$ = false;

        jclass AttributeSource$State::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/AttributeSource$State");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clone_0f9ed4d4] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/AttributeSource$State;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        AttributeSource$State::AttributeSource$State() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        AttributeSource$State AttributeSource$State::clone() const
        {
          return AttributeSource$State(env->callObjectMethod(this$, mids$[mid_clone_0f9ed4d4]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_AttributeSource$State_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AttributeSource$State_instance_(PyTypeObject *type, PyObject *arg);
        static int t_AttributeSource$State_init_(t_AttributeSource$State *self, PyObject *args, PyObject *kwds);
        static PyObject *t_AttributeSource$State_clone(t_AttributeSource$State *self);

        static PyMethodDef t_AttributeSource$State__methods_[] = {
          DECLARE_METHOD(t_AttributeSource$State, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeSource$State, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeSource$State, clone, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(AttributeSource$State, t_AttributeSource$State, ::java::lang::Object, AttributeSource$State, t_AttributeSource$State_init_, 0, 0, 0, 0, 0);

        void t_AttributeSource$State::install(PyObject *module)
        {
          installType(&PY_TYPE(AttributeSource$State), module, "AttributeSource$State", 0);
        }

        void t_AttributeSource$State::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(AttributeSource$State).tp_dict, "class_", make_descriptor(AttributeSource$State::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(AttributeSource$State).tp_dict, "wrapfn_", make_descriptor(t_AttributeSource$State::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(AttributeSource$State).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_AttributeSource$State_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AttributeSource$State::initializeClass, 1)))
            return NULL;
          return t_AttributeSource$State::wrap_Object(AttributeSource$State(((t_AttributeSource$State *) arg)->object.this$));
        }
        static PyObject *t_AttributeSource$State_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AttributeSource$State::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_AttributeSource$State_init_(t_AttributeSource$State *self, PyObject *args, PyObject *kwds)
        {
          AttributeSource$State object((jobject) NULL);

          INT_CALL(object = AttributeSource$State());
          self->object = object;

          return 0;
        }

        static PyObject *t_AttributeSource$State_clone(t_AttributeSource$State *self)
        {
          AttributeSource$State result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_AttributeSource$State::wrap_Object(result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/DualFloatFunction.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *DualFloatFunction::class$ = NULL;
            jmethodID *DualFloatFunction::mids$ = NULL;
            bool DualFloatFunction::live$ = false;

            jclass DualFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/DualFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_74aa307e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
                mids$[mid_func_3711414a] = env->getMethodID(cls, "func", "(ILorg/apache/lucene/queries/function/FunctionValues;Lorg/apache/lucene/queries/function/FunctionValues;)F");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DualFloatFunction::DualFloatFunction(const ::org::apache::lucene::queries::function::ValueSource & a0, const ::org::apache::lucene::queries::function::ValueSource & a1) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_74aa307e, a0.this$, a1.this$)) {}

            void DualFloatFunction::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String DualFloatFunction::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean DualFloatFunction::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues DualFloatFunction::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint DualFloatFunction::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_DualFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DualFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DualFloatFunction_init_(t_DualFloatFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DualFloatFunction_createWeight(t_DualFloatFunction *self, PyObject *args);
            static PyObject *t_DualFloatFunction_description(t_DualFloatFunction *self, PyObject *args);
            static PyObject *t_DualFloatFunction_equals(t_DualFloatFunction *self, PyObject *args);
            static PyObject *t_DualFloatFunction_getValues(t_DualFloatFunction *self, PyObject *args);
            static PyObject *t_DualFloatFunction_hashCode(t_DualFloatFunction *self, PyObject *args);

            static PyMethodDef t_DualFloatFunction__methods_[] = {
              DECLARE_METHOD(t_DualFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DualFloatFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DualFloatFunction, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_DualFloatFunction, description, METH_VARARGS),
              DECLARE_METHOD(t_DualFloatFunction, equals, METH_VARARGS),
              DECLARE_METHOD(t_DualFloatFunction, getValues, METH_VARARGS),
              DECLARE_METHOD(t_DualFloatFunction, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DualFloatFunction, t_DualFloatFunction, ::org::apache::lucene::queries::function::ValueSource, DualFloatFunction, t_DualFloatFunction_init_, 0, 0, 0, 0, 0);

            void t_DualFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(DualFloatFunction), module, "DualFloatFunction", 0);
            }

            void t_DualFloatFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DualFloatFunction).tp_dict, "class_", make_descriptor(DualFloatFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DualFloatFunction).tp_dict, "wrapfn_", make_descriptor(t_DualFloatFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DualFloatFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DualFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DualFloatFunction::initializeClass, 1)))
                return NULL;
              return t_DualFloatFunction::wrap_Object(DualFloatFunction(((t_DualFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_DualFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DualFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DualFloatFunction_init_(t_DualFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);
              DualFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1))
              {
                INT_CALL(object = DualFloatFunction(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_DualFloatFunction_createWeight(t_DualFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(DualFloatFunction), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_DualFloatFunction_description(t_DualFloatFunction *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(DualFloatFunction), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_DualFloatFunction_equals(t_DualFloatFunction *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(DualFloatFunction), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_DualFloatFunction_getValues(t_DualFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(DualFloatFunction), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_DualFloatFunction_hashCode(t_DualFloatFunction *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(DualFloatFunction), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/join/ToParentBlockJoinFieldComparator$Highest.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/Filter.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {

          ::java::lang::Class *ToParentBlockJoinFieldComparator$Highest::class$ = NULL;
          jmethodID *ToParentBlockJoinFieldComparator$Highest::mids$ = NULL;
          bool ToParentBlockJoinFieldComparator$Highest::live$ = false;

          jclass ToParentBlockJoinFieldComparator$Highest::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/join/ToParentBlockJoinFieldComparator$Highest");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2105569] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/FieldComparator;Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/search/Filter;I)V");
              mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
              mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
              mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ToParentBlockJoinFieldComparator$Highest::ToParentBlockJoinFieldComparator$Highest(const ::org::apache::lucene::search::FieldComparator & a0, const ::org::apache::lucene::search::Filter & a1, const ::org::apache::lucene::search::Filter & a2, jint a3) : ::org::apache::lucene::search::join::ToParentBlockJoinFieldComparator(env->newObject(initializeClass, &mids$, mid_init$_f2105569, a0.this$, a1.this$, a2.this$, a3)) {}

          jint ToParentBlockJoinFieldComparator$Highest::compareBottom(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareBottom_39c7bd23], a0);
          }

          jint ToParentBlockJoinFieldComparator$Highest::compareTop(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareTop_39c7bd23], a0);
          }

          void ToParentBlockJoinFieldComparator$Highest::copy(jint a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_copy_d8d154a6], a0, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {
          static PyObject *t_ToParentBlockJoinFieldComparator$Highest_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ToParentBlockJoinFieldComparator$Highest_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ToParentBlockJoinFieldComparator$Highest_of_(t_ToParentBlockJoinFieldComparator$Highest *self, PyObject *args);
          static int t_ToParentBlockJoinFieldComparator$Highest_init_(t_ToParentBlockJoinFieldComparator$Highest *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ToParentBlockJoinFieldComparator$Highest_compareBottom(t_ToParentBlockJoinFieldComparator$Highest *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinFieldComparator$Highest_compareTop(t_ToParentBlockJoinFieldComparator$Highest *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinFieldComparator$Highest_copy(t_ToParentBlockJoinFieldComparator$Highest *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinFieldComparator$Highest_get__parameters_(t_ToParentBlockJoinFieldComparator$Highest *self, void *data);
          static PyGetSetDef t_ToParentBlockJoinFieldComparator$Highest__fields_[] = {
            DECLARE_GET_FIELD(t_ToParentBlockJoinFieldComparator$Highest, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ToParentBlockJoinFieldComparator$Highest__methods_[] = {
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator$Highest, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator$Highest, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator$Highest, of_, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator$Highest, compareBottom, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator$Highest, compareTop, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator$Highest, copy, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ToParentBlockJoinFieldComparator$Highest, t_ToParentBlockJoinFieldComparator$Highest, ::org::apache::lucene::search::join::ToParentBlockJoinFieldComparator, ToParentBlockJoinFieldComparator$Highest, t_ToParentBlockJoinFieldComparator$Highest_init_, 0, 0, t_ToParentBlockJoinFieldComparator$Highest__fields_, 0, 0);
          PyObject *t_ToParentBlockJoinFieldComparator$Highest::wrap_Object(const ToParentBlockJoinFieldComparator$Highest& object, PyTypeObject *p0)
          {
            PyObject *obj = t_ToParentBlockJoinFieldComparator$Highest::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_ToParentBlockJoinFieldComparator$Highest *self = (t_ToParentBlockJoinFieldComparator$Highest *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_ToParentBlockJoinFieldComparator$Highest::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_ToParentBlockJoinFieldComparator$Highest::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_ToParentBlockJoinFieldComparator$Highest *self = (t_ToParentBlockJoinFieldComparator$Highest *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_ToParentBlockJoinFieldComparator$Highest::install(PyObject *module)
          {
            installType(&PY_TYPE(ToParentBlockJoinFieldComparator$Highest), module, "ToParentBlockJoinFieldComparator$Highest", 0);
          }

          void t_ToParentBlockJoinFieldComparator$Highest::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinFieldComparator$Highest).tp_dict, "class_", make_descriptor(ToParentBlockJoinFieldComparator$Highest::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinFieldComparator$Highest).tp_dict, "wrapfn_", make_descriptor(t_ToParentBlockJoinFieldComparator$Highest::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinFieldComparator$Highest).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ToParentBlockJoinFieldComparator$Highest_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ToParentBlockJoinFieldComparator$Highest::initializeClass, 1)))
              return NULL;
            return t_ToParentBlockJoinFieldComparator$Highest::wrap_Object(ToParentBlockJoinFieldComparator$Highest(((t_ToParentBlockJoinFieldComparator$Highest *) arg)->object.this$));
          }
          static PyObject *t_ToParentBlockJoinFieldComparator$Highest_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ToParentBlockJoinFieldComparator$Highest::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_ToParentBlockJoinFieldComparator$Highest_of_(t_ToParentBlockJoinFieldComparator$Highest *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_ToParentBlockJoinFieldComparator$Highest_init_(t_ToParentBlockJoinFieldComparator$Highest *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::FieldComparator a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::search::Filter a1((jobject) NULL);
            ::org::apache::lucene::search::Filter a2((jobject) NULL);
            jint a3;
            ToParentBlockJoinFieldComparator$Highest object((jobject) NULL);

            if (!parseArgs(args, "KkkI", ::org::apache::lucene::search::FieldComparator::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, &a0, &p0, ::org::apache::lucene::search::t_FieldComparator::parameters_, &a1, &a2, &a3))
            {
              INT_CALL(object = ToParentBlockJoinFieldComparator$Highest(a0, a1, a2, a3));
              self->object = object;
              self->parameters[0] = &::java::lang::PY_TYPE(Object);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ToParentBlockJoinFieldComparator$Highest_compareBottom(t_ToParentBlockJoinFieldComparator$Highest *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.compareBottom(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinFieldComparator$Highest), (PyObject *) self, "compareBottom", args, 2);
          }

          static PyObject *t_ToParentBlockJoinFieldComparator$Highest_compareTop(t_ToParentBlockJoinFieldComparator$Highest *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.compareTop(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinFieldComparator$Highest), (PyObject *) self, "compareTop", args, 2);
          }

          static PyObject *t_ToParentBlockJoinFieldComparator$Highest_copy(t_ToParentBlockJoinFieldComparator$Highest *self, PyObject *args)
          {
            jint a0;
            jint a1;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(self->object.copy(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinFieldComparator$Highest), (PyObject *) self, "copy", args, 2);
          }
          static PyObject *t_ToParentBlockJoinFieldComparator$Highest_get__parameters_(t_ToParentBlockJoinFieldComparator$Highest *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergeState.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/util/InfoStream.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/MergeState$DocMap.h"
#include "org/apache/lucene/index/SegmentReader.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/index/MergeState$CheckAbort.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergeState::class$ = NULL;
        jmethodID *MergeState::mids$ = NULL;
        jfieldID *MergeState::fids$ = NULL;
        bool MergeState::live$ = false;

        jclass MergeState::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergeState");

            fids$ = new jfieldID[max_fid];
            fids$[fid_checkAbort] = env->getFieldID(cls, "checkAbort", "Lorg/apache/lucene/index/MergeState$CheckAbort;");
            fids$[fid_docBase] = env->getFieldID(cls, "docBase", "[I");
            fids$[fid_docMaps] = env->getFieldID(cls, "docMaps", "[Lorg/apache/lucene/index/MergeState$DocMap;");
            fids$[fid_fieldInfos] = env->getFieldID(cls, "fieldInfos", "Lorg/apache/lucene/index/FieldInfos;");
            fids$[fid_infoStream] = env->getFieldID(cls, "infoStream", "Lorg/apache/lucene/util/InfoStream;");
            fids$[fid_matchedCount] = env->getFieldID(cls, "matchedCount", "I");
            fids$[fid_matchingSegmentReaders] = env->getFieldID(cls, "matchingSegmentReaders", "[Lorg/apache/lucene/index/SegmentReader;");
            fids$[fid_readers] = env->getFieldID(cls, "readers", "Ljava/util/List;");
            fids$[fid_segmentInfo] = env->getFieldID(cls, "segmentInfo", "Lorg/apache/lucene/index/SegmentInfo;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::MergeState$CheckAbort MergeState::_get_checkAbort() const
        {
          return ::org::apache::lucene::index::MergeState$CheckAbort(env->getObjectField(this$, fids$[fid_checkAbort]));
        }

        JArray< jint > MergeState::_get_docBase() const
        {
          return JArray< jint >(env->getObjectField(this$, fids$[fid_docBase]));
        }

        void MergeState::_set_docBase(const JArray< jint > & a0) const
        {
          env->setObjectField(this$, fids$[fid_docBase], a0.this$);
        }

        JArray< ::org::apache::lucene::index::MergeState$DocMap > MergeState::_get_docMaps() const
        {
          return JArray< ::org::apache::lucene::index::MergeState$DocMap >(env->getObjectField(this$, fids$[fid_docMaps]));
        }

        void MergeState::_set_docMaps(const JArray< ::org::apache::lucene::index::MergeState$DocMap > & a0) const
        {
          env->setObjectField(this$, fids$[fid_docMaps], a0.this$);
        }

        ::org::apache::lucene::index::FieldInfos MergeState::_get_fieldInfos() const
        {
          return ::org::apache::lucene::index::FieldInfos(env->getObjectField(this$, fids$[fid_fieldInfos]));
        }

        void MergeState::_set_fieldInfos(const ::org::apache::lucene::index::FieldInfos & a0) const
        {
          env->setObjectField(this$, fids$[fid_fieldInfos], a0.this$);
        }

        ::org::apache::lucene::util::InfoStream MergeState::_get_infoStream() const
        {
          return ::org::apache::lucene::util::InfoStream(env->getObjectField(this$, fids$[fid_infoStream]));
        }

        jint MergeState::_get_matchedCount() const
        {
          return env->getIntField(this$, fids$[fid_matchedCount]);
        }

        void MergeState::_set_matchedCount(jint a0) const
        {
          env->setIntField(this$, fids$[fid_matchedCount], a0);
        }

        JArray< ::org::apache::lucene::index::SegmentReader > MergeState::_get_matchingSegmentReaders() const
        {
          return JArray< ::org::apache::lucene::index::SegmentReader >(env->getObjectField(this$, fids$[fid_matchingSegmentReaders]));
        }

        void MergeState::_set_matchingSegmentReaders(const JArray< ::org::apache::lucene::index::SegmentReader > & a0) const
        {
          env->setObjectField(this$, fids$[fid_matchingSegmentReaders], a0.this$);
        }

        ::java::util::List MergeState::_get_readers() const
        {
          return ::java::util::List(env->getObjectField(this$, fids$[fid_readers]));
        }

        ::org::apache::lucene::index::SegmentInfo MergeState::_get_segmentInfo() const
        {
          return ::org::apache::lucene::index::SegmentInfo(env->getObjectField(this$, fids$[fid_segmentInfo]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergeState_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergeState_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergeState_get__checkAbort(t_MergeState *self, void *data);
        static PyObject *t_MergeState_get__docBase(t_MergeState *self, void *data);
        static int t_MergeState_set__docBase(t_MergeState *self, PyObject *arg, void *data);
        static PyObject *t_MergeState_get__docMaps(t_MergeState *self, void *data);
        static int t_MergeState_set__docMaps(t_MergeState *self, PyObject *arg, void *data);
        static PyObject *t_MergeState_get__fieldInfos(t_MergeState *self, void *data);
        static int t_MergeState_set__fieldInfos(t_MergeState *self, PyObject *arg, void *data);
        static PyObject *t_MergeState_get__infoStream(t_MergeState *self, void *data);
        static PyObject *t_MergeState_get__matchedCount(t_MergeState *self, void *data);
        static int t_MergeState_set__matchedCount(t_MergeState *self, PyObject *arg, void *data);
        static PyObject *t_MergeState_get__matchingSegmentReaders(t_MergeState *self, void *data);
        static int t_MergeState_set__matchingSegmentReaders(t_MergeState *self, PyObject *arg, void *data);
        static PyObject *t_MergeState_get__readers(t_MergeState *self, void *data);
        static PyObject *t_MergeState_get__segmentInfo(t_MergeState *self, void *data);

        static PyGetSetDef t_MergeState__fields_[] = {
          DECLARE_GET_FIELD(t_MergeState, checkAbort),
          DECLARE_GETSET_FIELD(t_MergeState, docBase),
          DECLARE_GETSET_FIELD(t_MergeState, docMaps),
          DECLARE_GETSET_FIELD(t_MergeState, fieldInfos),
          DECLARE_GET_FIELD(t_MergeState, infoStream),
          DECLARE_GETSET_FIELD(t_MergeState, matchedCount),
          DECLARE_GETSET_FIELD(t_MergeState, matchingSegmentReaders),
          DECLARE_GET_FIELD(t_MergeState, readers),
          DECLARE_GET_FIELD(t_MergeState, segmentInfo),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MergeState__methods_[] = {
          DECLARE_METHOD(t_MergeState, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeState, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MergeState, t_MergeState, ::java::lang::Object, MergeState, abstract_init, 0, 0, t_MergeState__fields_, 0, 0);

        void t_MergeState::install(PyObject *module)
        {
          installType(&PY_TYPE(MergeState), module, "MergeState", 0);
          PyDict_SetItemString(PY_TYPE(MergeState).tp_dict, "CheckAbort", make_descriptor(&PY_TYPE(MergeState$CheckAbort)));
          PyDict_SetItemString(PY_TYPE(MergeState).tp_dict, "DocMap", make_descriptor(&PY_TYPE(MergeState$DocMap)));
        }

        void t_MergeState::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MergeState).tp_dict, "class_", make_descriptor(MergeState::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MergeState).tp_dict, "wrapfn_", make_descriptor(t_MergeState::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MergeState).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergeState_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergeState::initializeClass, 1)))
            return NULL;
          return t_MergeState::wrap_Object(MergeState(((t_MergeState *) arg)->object.this$));
        }
        static PyObject *t_MergeState_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergeState::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MergeState_get__checkAbort(t_MergeState *self, void *data)
        {
          ::org::apache::lucene::index::MergeState$CheckAbort value((jobject) NULL);
          OBJ_CALL(value = self->object._get_checkAbort());
          return ::org::apache::lucene::index::t_MergeState$CheckAbort::wrap_Object(value);
        }

        static PyObject *t_MergeState_get__docBase(t_MergeState *self, void *data)
        {
          JArray< jint > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_docBase());
          return value.wrap();
        }
        static int t_MergeState_set__docBase(t_MergeState *self, PyObject *arg, void *data)
        {
          JArray< jint > value((jobject) NULL);
          if (!parseArg(arg, "[I", &value))
          {
            INT_CALL(self->object._set_docBase(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "docBase", arg);
          return -1;
        }

        static PyObject *t_MergeState_get__docMaps(t_MergeState *self, void *data)
        {
          JArray< ::org::apache::lucene::index::MergeState$DocMap > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_docMaps());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_MergeState$DocMap::wrap_jobject);
        }
        static int t_MergeState_set__docMaps(t_MergeState *self, PyObject *arg, void *data)
        {
          JArray< ::org::apache::lucene::index::MergeState$DocMap > value((jobject) NULL);
          if (!parseArg(arg, "[k", ::org::apache::lucene::index::MergeState$DocMap::initializeClass, &value))
          {
            INT_CALL(self->object._set_docMaps(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "docMaps", arg);
          return -1;
        }

        static PyObject *t_MergeState_get__fieldInfos(t_MergeState *self, void *data)
        {
          ::org::apache::lucene::index::FieldInfos value((jobject) NULL);
          OBJ_CALL(value = self->object._get_fieldInfos());
          return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(value);
        }
        static int t_MergeState_set__fieldInfos(t_MergeState *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::index::FieldInfos value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfos::initializeClass, &value))
          {
            INT_CALL(self->object._set_fieldInfos(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "fieldInfos", arg);
          return -1;
        }

        static PyObject *t_MergeState_get__infoStream(t_MergeState *self, void *data)
        {
          ::org::apache::lucene::util::InfoStream value((jobject) NULL);
          OBJ_CALL(value = self->object._get_infoStream());
          return ::org::apache::lucene::util::t_InfoStream::wrap_Object(value);
        }

        static PyObject *t_MergeState_get__matchedCount(t_MergeState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_matchedCount());
          return PyInt_FromLong((long) value);
        }
        static int t_MergeState_set__matchedCount(t_MergeState *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_matchedCount(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "matchedCount", arg);
          return -1;
        }

        static PyObject *t_MergeState_get__matchingSegmentReaders(t_MergeState *self, void *data)
        {
          JArray< ::org::apache::lucene::index::SegmentReader > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_matchingSegmentReaders());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_SegmentReader::wrap_jobject);
        }
        static int t_MergeState_set__matchingSegmentReaders(t_MergeState *self, PyObject *arg, void *data)
        {
          JArray< ::org::apache::lucene::index::SegmentReader > value((jobject) NULL);
          if (!parseArg(arg, "[k", ::org::apache::lucene::index::SegmentReader::initializeClass, &value))
          {
            INT_CALL(self->object._set_matchingSegmentReaders(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "matchingSegmentReaders", arg);
          return -1;
        }

        static PyObject *t_MergeState_get__readers(t_MergeState *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object._get_readers());
          return ::java::util::t_List::wrap_Object(value);
        }

        static PyObject *t_MergeState_get__segmentInfo(t_MergeState *self, void *data)
        {
          ::org::apache::lucene::index::SegmentInfo value((jobject) NULL);
          OBJ_CALL(value = self->object._get_segmentInfo());
          return ::org::apache::lucene::index::t_SegmentInfo::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/Optimizer2.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *Optimizer2::class$ = NULL;
      jmethodID *Optimizer2::mids$ = NULL;
      bool Optimizer2::live$ = false;

      jclass Optimizer2::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/Optimizer2");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      Optimizer2::Optimizer2() : ::org::egothor::stemmer::Optimizer(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_Optimizer2_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Optimizer2_instance_(PyTypeObject *type, PyObject *arg);
      static int t_Optimizer2_init_(t_Optimizer2 *self, PyObject *args, PyObject *kwds);

      static PyMethodDef t_Optimizer2__methods_[] = {
        DECLARE_METHOD(t_Optimizer2, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Optimizer2, instance_, METH_O | METH_CLASS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(Optimizer2, t_Optimizer2, ::org::egothor::stemmer::Optimizer, Optimizer2, t_Optimizer2_init_, 0, 0, 0, 0, 0);

      void t_Optimizer2::install(PyObject *module)
      {
        installType(&PY_TYPE(Optimizer2), module, "Optimizer2", 0);
      }

      void t_Optimizer2::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(Optimizer2).tp_dict, "class_", make_descriptor(Optimizer2::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(Optimizer2).tp_dict, "wrapfn_", make_descriptor(t_Optimizer2::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(Optimizer2).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Optimizer2_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Optimizer2::initializeClass, 1)))
          return NULL;
        return t_Optimizer2::wrap_Object(Optimizer2(((t_Optimizer2 *) arg)->object.this$));
      }
      static PyObject *t_Optimizer2_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Optimizer2::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_Optimizer2_init_(t_Optimizer2 *self, PyObject *args, PyObject *kwds)
      {
        Optimizer2 object((jobject) NULL);

        INT_CALL(object = Optimizer2());
        self->object = object;

        return 0;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pl/PolishAnalyzer.h"
#include "org/egothor/stemmer/Trie.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pl {

          ::java::lang::Class *PolishAnalyzer::class$ = NULL;
          jmethodID *PolishAnalyzer::mids$ = NULL;
          bool PolishAnalyzer::live$ = false;
          ::java::lang::String *PolishAnalyzer::DEFAULT_STEMMER_FILE = NULL;
          ::java::lang::String *PolishAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass PolishAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pl/PolishAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_getDefaultTable_0b271714] = env->getStaticMethodID(cls, "getDefaultTable", "()Lorg/egothor/stemmer/Trie;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STEMMER_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STEMMER_FILE", "Ljava/lang/String;"));
              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PolishAnalyzer::PolishAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          PolishAnalyzer::PolishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          PolishAnalyzer::PolishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet PolishAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }

          ::org::egothor::stemmer::Trie PolishAnalyzer::getDefaultTable()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::egothor::stemmer::Trie(env->callStaticObjectMethod(cls, mids$[mid_getDefaultTable_0b271714]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pl {
          static PyObject *t_PolishAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PolishAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PolishAnalyzer_init_(t_PolishAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PolishAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_PolishAnalyzer_getDefaultTable(PyTypeObject *type);
          static PyObject *t_PolishAnalyzer_get__defaultStopSet(t_PolishAnalyzer *self, void *data);
          static PyObject *t_PolishAnalyzer_get__defaultTable(t_PolishAnalyzer *self, void *data);
          static PyGetSetDef t_PolishAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_PolishAnalyzer, defaultStopSet),
            DECLARE_GET_FIELD(t_PolishAnalyzer, defaultTable),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PolishAnalyzer__methods_[] = {
            DECLARE_METHOD(t_PolishAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PolishAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PolishAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_PolishAnalyzer, getDefaultTable, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PolishAnalyzer, t_PolishAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, PolishAnalyzer, t_PolishAnalyzer_init_, 0, 0, t_PolishAnalyzer__fields_, 0, 0);

          void t_PolishAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(PolishAnalyzer), module, "PolishAnalyzer", 0);
          }

          void t_PolishAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PolishAnalyzer).tp_dict, "class_", make_descriptor(PolishAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PolishAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_PolishAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PolishAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(PolishAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(PolishAnalyzer).tp_dict, "DEFAULT_STEMMER_FILE", make_descriptor(j2p(*PolishAnalyzer::DEFAULT_STEMMER_FILE)));
            PyDict_SetItemString(PY_TYPE(PolishAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*PolishAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_PolishAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PolishAnalyzer::initializeClass, 1)))
              return NULL;
            return t_PolishAnalyzer::wrap_Object(PolishAnalyzer(((t_PolishAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_PolishAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PolishAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PolishAnalyzer_init_(t_PolishAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                PolishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = PolishAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                PolishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = PolishAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                PolishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = PolishAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PolishAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::pl::PolishAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_PolishAnalyzer_getDefaultTable(PyTypeObject *type)
          {
            ::org::egothor::stemmer::Trie result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::pl::PolishAnalyzer::getDefaultTable());
            return ::org::egothor::stemmer::t_Trie::wrap_Object(result);
          }

          static PyObject *t_PolishAnalyzer_get__defaultStopSet(t_PolishAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }

          static PyObject *t_PolishAnalyzer_get__defaultTable(t_PolishAnalyzer *self, void *data)
          {
            ::org::egothor::stemmer::Trie value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultTable());
            return ::org::egothor::stemmer::t_Trie::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanStemmer::class$ = NULL;
          jmethodID *GermanStemmer::mids$ = NULL;
          bool GermanStemmer::live$ = false;

          jclass GermanStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_97a5258f] = env->getMethodID(cls, "stem", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanStemmer::GermanStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanStemmer_init_(t_GermanStemmer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_GermanStemmer__methods_[] = {
            DECLARE_METHOD(t_GermanStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanStemmer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GermanStemmer, t_GermanStemmer, ::java::lang::Object, GermanStemmer, t_GermanStemmer_init_, 0, 0, 0, 0, 0);

          void t_GermanStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanStemmer), module, "GermanStemmer", 0);
          }

          void t_GermanStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GermanStemmer).tp_dict, "class_", make_descriptor(GermanStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GermanStemmer).tp_dict, "wrapfn_", make_descriptor(t_GermanStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GermanStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GermanStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanStemmer::initializeClass, 1)))
              return NULL;
            return t_GermanStemmer::wrap_Object(GermanStemmer(((t_GermanStemmer *) arg)->object.this$));
          }
          static PyObject *t_GermanStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanStemmer_init_(t_GermanStemmer *self, PyObject *args, PyObject *kwds)
          {
            GermanStemmer object((jobject) NULL);

            INT_CALL(object = GermanStemmer());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/FinnishStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *FinnishStemmer::class$ = NULL;
        jmethodID *FinnishStemmer::mids$ = NULL;
        bool FinnishStemmer::live$ = false;

        jclass FinnishStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/FinnishStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FinnishStemmer::FinnishStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean FinnishStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint FinnishStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean FinnishStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_FinnishStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FinnishStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FinnishStemmer_init_(t_FinnishStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FinnishStemmer_equals(t_FinnishStemmer *self, PyObject *args);
        static PyObject *t_FinnishStemmer_hashCode(t_FinnishStemmer *self, PyObject *args);
        static PyObject *t_FinnishStemmer_stem(t_FinnishStemmer *self, PyObject *args);

        static PyMethodDef t_FinnishStemmer__methods_[] = {
          DECLARE_METHOD(t_FinnishStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FinnishStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FinnishStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_FinnishStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_FinnishStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FinnishStemmer, t_FinnishStemmer, ::org::tartarus::snowball::SnowballProgram, FinnishStemmer, t_FinnishStemmer_init_, 0, 0, 0, 0, 0);

        void t_FinnishStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(FinnishStemmer), module, "FinnishStemmer", 0);
        }

        void t_FinnishStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FinnishStemmer).tp_dict, "class_", make_descriptor(FinnishStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FinnishStemmer).tp_dict, "wrapfn_", make_descriptor(t_FinnishStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FinnishStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FinnishStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FinnishStemmer::initializeClass, 1)))
            return NULL;
          return t_FinnishStemmer::wrap_Object(FinnishStemmer(((t_FinnishStemmer *) arg)->object.this$));
        }
        static PyObject *t_FinnishStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FinnishStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FinnishStemmer_init_(t_FinnishStemmer *self, PyObject *args, PyObject *kwds)
        {
          FinnishStemmer object((jobject) NULL);

          INT_CALL(object = FinnishStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_FinnishStemmer_equals(t_FinnishStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FinnishStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_FinnishStemmer_hashCode(t_FinnishStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FinnishStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_FinnishStemmer_stem(t_FinnishStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FinnishStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/MultiTrie.h"
#include "java/io/DataOutput.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/egothor/stemmer/Reduce.h"
#include "java/io/PrintStream.h"
#include "java/io/DataInput.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *MultiTrie::class$ = NULL;
      jmethodID *MultiTrie::mids$ = NULL;
      bool MultiTrie::live$ = false;

      jclass MultiTrie::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/MultiTrie");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_e051d6a6] = env->getMethodID(cls, "<init>", "(Ljava/io/DataInput;)V");
          mids$[mid_init$_bb0c767f] = env->getMethodID(cls, "<init>", "(Z)V");
          mids$[mid_add_db1d05ae] = env->getMethodID(cls, "add", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)V");
          mids$[mid_getFully_856f5013] = env->getMethodID(cls, "getFully", "(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;");
          mids$[mid_getLastOnPath_856f5013] = env->getMethodID(cls, "getLastOnPath", "(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;");
          mids$[mid_printInfo_bd6af9ff] = env->getMethodID(cls, "printInfo", "(Ljava/io/PrintStream;Ljava/lang/CharSequence;)V");
          mids$[mid_reduce_6ee87cd1] = env->getMethodID(cls, "reduce", "(Lorg/egothor/stemmer/Reduce;)Lorg/egothor/stemmer/Trie;");
          mids$[mid_store_cfb051e6] = env->getMethodID(cls, "store", "(Ljava/io/DataOutput;)V");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      MultiTrie::MultiTrie(const ::java::io::DataInput & a0) : ::org::egothor::stemmer::Trie(env->newObject(initializeClass, &mids$, mid_init$_e051d6a6, a0.this$)) {}

      MultiTrie::MultiTrie(jboolean a0) : ::org::egothor::stemmer::Trie(env->newObject(initializeClass, &mids$, mid_init$_bb0c767f, a0)) {}

      void MultiTrie::add(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1) const
      {
        env->callVoidMethod(this$, mids$[mid_add_db1d05ae], a0.this$, a1.this$);
      }

      ::java::lang::CharSequence MultiTrie::getFully(const ::java::lang::CharSequence & a0) const
      {
        return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getFully_856f5013], a0.this$));
      }

      ::java::lang::CharSequence MultiTrie::getLastOnPath(const ::java::lang::CharSequence & a0) const
      {
        return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getLastOnPath_856f5013], a0.this$));
      }

      void MultiTrie::printInfo(const ::java::io::PrintStream & a0, const ::java::lang::CharSequence & a1) const
      {
        env->callVoidMethod(this$, mids$[mid_printInfo_bd6af9ff], a0.this$, a1.this$);
      }

      ::org::egothor::stemmer::Trie MultiTrie::reduce(const ::org::egothor::stemmer::Reduce & a0) const
      {
        return ::org::egothor::stemmer::Trie(env->callObjectMethod(this$, mids$[mid_reduce_6ee87cd1], a0.this$));
      }

      void MultiTrie::store(const ::java::io::DataOutput & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_store_cfb051e6], a0.this$);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_MultiTrie_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_MultiTrie_instance_(PyTypeObject *type, PyObject *arg);
      static int t_MultiTrie_init_(t_MultiTrie *self, PyObject *args, PyObject *kwds);
      static PyObject *t_MultiTrie_add(t_MultiTrie *self, PyObject *args);
      static PyObject *t_MultiTrie_getFully(t_MultiTrie *self, PyObject *args);
      static PyObject *t_MultiTrie_getLastOnPath(t_MultiTrie *self, PyObject *args);
      static PyObject *t_MultiTrie_printInfo(t_MultiTrie *self, PyObject *args);
      static PyObject *t_MultiTrie_reduce(t_MultiTrie *self, PyObject *args);
      static PyObject *t_MultiTrie_store(t_MultiTrie *self, PyObject *args);

      static PyMethodDef t_MultiTrie__methods_[] = {
        DECLARE_METHOD(t_MultiTrie, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_MultiTrie, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_MultiTrie, add, METH_VARARGS),
        DECLARE_METHOD(t_MultiTrie, getFully, METH_VARARGS),
        DECLARE_METHOD(t_MultiTrie, getLastOnPath, METH_VARARGS),
        DECLARE_METHOD(t_MultiTrie, printInfo, METH_VARARGS),
        DECLARE_METHOD(t_MultiTrie, reduce, METH_VARARGS),
        DECLARE_METHOD(t_MultiTrie, store, METH_VARARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(MultiTrie, t_MultiTrie, ::org::egothor::stemmer::Trie, MultiTrie, t_MultiTrie_init_, 0, 0, 0, 0, 0);

      void t_MultiTrie::install(PyObject *module)
      {
        installType(&PY_TYPE(MultiTrie), module, "MultiTrie", 0);
      }

      void t_MultiTrie::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(MultiTrie).tp_dict, "class_", make_descriptor(MultiTrie::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(MultiTrie).tp_dict, "wrapfn_", make_descriptor(t_MultiTrie::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(MultiTrie).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_MultiTrie_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, MultiTrie::initializeClass, 1)))
          return NULL;
        return t_MultiTrie::wrap_Object(MultiTrie(((t_MultiTrie *) arg)->object.this$));
      }
      static PyObject *t_MultiTrie_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, MultiTrie::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_MultiTrie_init_(t_MultiTrie *self, PyObject *args, PyObject *kwds)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            ::java::io::DataInput a0((jobject) NULL);
            MultiTrie object((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::DataInput::initializeClass, &a0))
            {
              INT_CALL(object = MultiTrie(a0));
              self->object = object;
              break;
            }
          }
          {
            jboolean a0;
            MultiTrie object((jobject) NULL);

            if (!parseArgs(args, "Z", &a0))
            {
              INT_CALL(object = MultiTrie(a0));
              self->object = object;
              break;
            }
          }
         default:
          PyErr_SetArgsError((PyObject *) self, "__init__", args);
          return -1;
        }

        return 0;
      }

      static PyObject *t_MultiTrie_add(t_MultiTrie *self, PyObject *args)
      {
        ::java::lang::CharSequence a0((jobject) NULL);
        ::java::lang::CharSequence a1((jobject) NULL);

        if (!parseArgs(args, "OO", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
        {
          OBJ_CALL(self->object.add(a0, a1));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "add", args);
        return NULL;
      }

      static PyObject *t_MultiTrie_getFully(t_MultiTrie *self, PyObject *args)
      {
        ::java::lang::CharSequence a0((jobject) NULL);
        ::java::lang::CharSequence result((jobject) NULL);

        if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
        {
          OBJ_CALL(result = self->object.getFully(a0));
          return ::java::lang::t_CharSequence::wrap_Object(result);
        }

        return callSuper(&PY_TYPE(MultiTrie), (PyObject *) self, "getFully", args, 2);
      }

      static PyObject *t_MultiTrie_getLastOnPath(t_MultiTrie *self, PyObject *args)
      {
        ::java::lang::CharSequence a0((jobject) NULL);
        ::java::lang::CharSequence result((jobject) NULL);

        if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
        {
          OBJ_CALL(result = self->object.getLastOnPath(a0));
          return ::java::lang::t_CharSequence::wrap_Object(result);
        }

        return callSuper(&PY_TYPE(MultiTrie), (PyObject *) self, "getLastOnPath", args, 2);
      }

      static PyObject *t_MultiTrie_printInfo(t_MultiTrie *self, PyObject *args)
      {
        ::java::io::PrintStream a0((jobject) NULL);
        ::java::lang::CharSequence a1((jobject) NULL);

        if (!parseArgs(args, "kO", ::java::io::PrintStream::initializeClass, &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
        {
          OBJ_CALL(self->object.printInfo(a0, a1));
          Py_RETURN_NONE;
        }

        return callSuper(&PY_TYPE(MultiTrie), (PyObject *) self, "printInfo", args, 2);
      }

      static PyObject *t_MultiTrie_reduce(t_MultiTrie *self, PyObject *args)
      {
        ::org::egothor::stemmer::Reduce a0((jobject) NULL);
        ::org::egothor::stemmer::Trie result((jobject) NULL);

        if (!parseArgs(args, "k", ::org::egothor::stemmer::Reduce::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.reduce(a0));
          return ::org::egothor::stemmer::t_Trie::wrap_Object(result);
        }

        return callSuper(&PY_TYPE(MultiTrie), (PyObject *) self, "reduce", args, 2);
      }

      static PyObject *t_MultiTrie_store(t_MultiTrie *self, PyObject *args)
      {
        ::java::io::DataOutput a0((jobject) NULL);

        if (!parseArgs(args, "k", ::java::io::DataOutput::initializeClass, &a0))
        {
          OBJ_CALL(self->object.store(a0));
          Py_RETURN_NONE;
        }

        return callSuper(&PY_TYPE(MultiTrie), (PyObject *) self, "store", args, 2);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/KeywordAttributeImpl.h"
#include "org/apache/lucene/analysis/tokenattributes/KeywordAttribute.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *KeywordAttributeImpl::class$ = NULL;
          jmethodID *KeywordAttributeImpl::mids$ = NULL;
          bool KeywordAttributeImpl::live$ = false;

          jclass KeywordAttributeImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/KeywordAttributeImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_isKeyword_54c6a16a] = env->getMethodID(cls, "isKeyword", "()Z");
              mids$[mid_setKeyword_bb0c767f] = env->getMethodID(cls, "setKeyword", "(Z)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KeywordAttributeImpl::KeywordAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void KeywordAttributeImpl::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          void KeywordAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
          }

          jboolean KeywordAttributeImpl::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint KeywordAttributeImpl::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          jboolean KeywordAttributeImpl::isKeyword() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isKeyword_54c6a16a]);
          }

          void KeywordAttributeImpl::setKeyword(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setKeyword_bb0c767f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_KeywordAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeywordAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KeywordAttributeImpl_init_(t_KeywordAttributeImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KeywordAttributeImpl_clear(t_KeywordAttributeImpl *self, PyObject *args);
          static PyObject *t_KeywordAttributeImpl_copyTo(t_KeywordAttributeImpl *self, PyObject *args);
          static PyObject *t_KeywordAttributeImpl_equals(t_KeywordAttributeImpl *self, PyObject *args);
          static PyObject *t_KeywordAttributeImpl_hashCode(t_KeywordAttributeImpl *self, PyObject *args);
          static PyObject *t_KeywordAttributeImpl_isKeyword(t_KeywordAttributeImpl *self);
          static PyObject *t_KeywordAttributeImpl_setKeyword(t_KeywordAttributeImpl *self, PyObject *arg);
          static PyObject *t_KeywordAttributeImpl_get__keyword(t_KeywordAttributeImpl *self, void *data);
          static int t_KeywordAttributeImpl_set__keyword(t_KeywordAttributeImpl *self, PyObject *arg, void *data);
          static PyGetSetDef t_KeywordAttributeImpl__fields_[] = {
            DECLARE_GETSET_FIELD(t_KeywordAttributeImpl, keyword),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_KeywordAttributeImpl__methods_[] = {
            DECLARE_METHOD(t_KeywordAttributeImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordAttributeImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordAttributeImpl, clear, METH_VARARGS),
            DECLARE_METHOD(t_KeywordAttributeImpl, copyTo, METH_VARARGS),
            DECLARE_METHOD(t_KeywordAttributeImpl, equals, METH_VARARGS),
            DECLARE_METHOD(t_KeywordAttributeImpl, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_KeywordAttributeImpl, isKeyword, METH_NOARGS),
            DECLARE_METHOD(t_KeywordAttributeImpl, setKeyword, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(KeywordAttributeImpl, t_KeywordAttributeImpl, ::org::apache::lucene::util::AttributeImpl, KeywordAttributeImpl, t_KeywordAttributeImpl_init_, 0, 0, t_KeywordAttributeImpl__fields_, 0, 0);

          void t_KeywordAttributeImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(KeywordAttributeImpl), module, "KeywordAttributeImpl", 0);
          }

          void t_KeywordAttributeImpl::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(KeywordAttributeImpl).tp_dict, "class_", make_descriptor(KeywordAttributeImpl::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(KeywordAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_KeywordAttributeImpl::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(KeywordAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KeywordAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KeywordAttributeImpl::initializeClass, 1)))
              return NULL;
            return t_KeywordAttributeImpl::wrap_Object(KeywordAttributeImpl(((t_KeywordAttributeImpl *) arg)->object.this$));
          }
          static PyObject *t_KeywordAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KeywordAttributeImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KeywordAttributeImpl_init_(t_KeywordAttributeImpl *self, PyObject *args, PyObject *kwds)
          {
            KeywordAttributeImpl object((jobject) NULL);

            INT_CALL(object = KeywordAttributeImpl());
            self->object = object;

            return 0;
          }

          static PyObject *t_KeywordAttributeImpl_clear(t_KeywordAttributeImpl *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(KeywordAttributeImpl), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_KeywordAttributeImpl_copyTo(t_KeywordAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copyTo(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(KeywordAttributeImpl), (PyObject *) self, "copyTo", args, 2);
          }

          static PyObject *t_KeywordAttributeImpl_equals(t_KeywordAttributeImpl *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(KeywordAttributeImpl), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_KeywordAttributeImpl_hashCode(t_KeywordAttributeImpl *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(KeywordAttributeImpl), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_KeywordAttributeImpl_isKeyword(t_KeywordAttributeImpl *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isKeyword());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_KeywordAttributeImpl_setKeyword(t_KeywordAttributeImpl *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setKeyword(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setKeyword", arg);
            return NULL;
          }

          static PyObject *t_KeywordAttributeImpl_get__keyword(t_KeywordAttributeImpl *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isKeyword());
            Py_RETURN_BOOL(value);
          }
          static int t_KeywordAttributeImpl_set__keyword(t_KeywordAttributeImpl *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setKeyword(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "keyword", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/OffsetAttributeImpl.h"
#include "org/apache/lucene/analysis/tokenattributes/OffsetAttribute.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *OffsetAttributeImpl::class$ = NULL;
          jmethodID *OffsetAttributeImpl::mids$ = NULL;
          bool OffsetAttributeImpl::live$ = false;

          jclass OffsetAttributeImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/OffsetAttributeImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
              mids$[mid_endOffset_54c6a179] = env->getMethodID(cls, "endOffset", "()I");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_setOffset_d8d154a6] = env->getMethodID(cls, "setOffset", "(II)V");
              mids$[mid_startOffset_54c6a179] = env->getMethodID(cls, "startOffset", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          OffsetAttributeImpl::OffsetAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void OffsetAttributeImpl::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          void OffsetAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
          }

          jint OffsetAttributeImpl::endOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_endOffset_54c6a179]);
          }

          jboolean OffsetAttributeImpl::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint OffsetAttributeImpl::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          void OffsetAttributeImpl::setOffset(jint a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_setOffset_d8d154a6], a0, a1);
          }

          jint OffsetAttributeImpl::startOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_startOffset_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_OffsetAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_OffsetAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_OffsetAttributeImpl_init_(t_OffsetAttributeImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_OffsetAttributeImpl_clear(t_OffsetAttributeImpl *self, PyObject *args);
          static PyObject *t_OffsetAttributeImpl_copyTo(t_OffsetAttributeImpl *self, PyObject *args);
          static PyObject *t_OffsetAttributeImpl_endOffset(t_OffsetAttributeImpl *self);
          static PyObject *t_OffsetAttributeImpl_equals(t_OffsetAttributeImpl *self, PyObject *args);
          static PyObject *t_OffsetAttributeImpl_hashCode(t_OffsetAttributeImpl *self, PyObject *args);
          static PyObject *t_OffsetAttributeImpl_setOffset(t_OffsetAttributeImpl *self, PyObject *args);
          static PyObject *t_OffsetAttributeImpl_startOffset(t_OffsetAttributeImpl *self);

          static PyMethodDef t_OffsetAttributeImpl__methods_[] = {
            DECLARE_METHOD(t_OffsetAttributeImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OffsetAttributeImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OffsetAttributeImpl, clear, METH_VARARGS),
            DECLARE_METHOD(t_OffsetAttributeImpl, copyTo, METH_VARARGS),
            DECLARE_METHOD(t_OffsetAttributeImpl, endOffset, METH_NOARGS),
            DECLARE_METHOD(t_OffsetAttributeImpl, equals, METH_VARARGS),
            DECLARE_METHOD(t_OffsetAttributeImpl, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_OffsetAttributeImpl, setOffset, METH_VARARGS),
            DECLARE_METHOD(t_OffsetAttributeImpl, startOffset, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(OffsetAttributeImpl, t_OffsetAttributeImpl, ::org::apache::lucene::util::AttributeImpl, OffsetAttributeImpl, t_OffsetAttributeImpl_init_, 0, 0, 0, 0, 0);

          void t_OffsetAttributeImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(OffsetAttributeImpl), module, "OffsetAttributeImpl", 0);
          }

          void t_OffsetAttributeImpl::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(OffsetAttributeImpl).tp_dict, "class_", make_descriptor(OffsetAttributeImpl::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(OffsetAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_OffsetAttributeImpl::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(OffsetAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_OffsetAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, OffsetAttributeImpl::initializeClass, 1)))
              return NULL;
            return t_OffsetAttributeImpl::wrap_Object(OffsetAttributeImpl(((t_OffsetAttributeImpl *) arg)->object.this$));
          }
          static PyObject *t_OffsetAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, OffsetAttributeImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_OffsetAttributeImpl_init_(t_OffsetAttributeImpl *self, PyObject *args, PyObject *kwds)
          {
            OffsetAttributeImpl object((jobject) NULL);

            INT_CALL(object = OffsetAttributeImpl());
            self->object = object;

            return 0;
          }

          static PyObject *t_OffsetAttributeImpl_clear(t_OffsetAttributeImpl *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(OffsetAttributeImpl), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_OffsetAttributeImpl_copyTo(t_OffsetAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copyTo(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(OffsetAttributeImpl), (PyObject *) self, "copyTo", args, 2);
          }

          static PyObject *t_OffsetAttributeImpl_endOffset(t_OffsetAttributeImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.endOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_OffsetAttributeImpl_equals(t_OffsetAttributeImpl *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(OffsetAttributeImpl), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_OffsetAttributeImpl_hashCode(t_OffsetAttributeImpl *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(OffsetAttributeImpl), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_OffsetAttributeImpl_setOffset(t_OffsetAttributeImpl *self, PyObject *args)
          {
            jint a0;
            jint a1;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(self->object.setOffset(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setOffset", args);
            return NULL;
          }

          static PyObject *t_OffsetAttributeImpl_startOffset(t_OffsetAttributeImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.startOffset());
            return PyInt_FromLong((long) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/LowercaseExpandedTermsQueryNodeProcessor.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *LowercaseExpandedTermsQueryNodeProcessor::class$ = NULL;
              jmethodID *LowercaseExpandedTermsQueryNodeProcessor::mids$ = NULL;
              bool LowercaseExpandedTermsQueryNodeProcessor::live$ = false;

              jclass LowercaseExpandedTermsQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/LowercaseExpandedTermsQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_process_6705aed7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              LowercaseExpandedTermsQueryNodeProcessor::LowercaseExpandedTermsQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode LowercaseExpandedTermsQueryNodeProcessor::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_6705aed7], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_LowercaseExpandedTermsQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_LowercaseExpandedTermsQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_LowercaseExpandedTermsQueryNodeProcessor_init_(t_LowercaseExpandedTermsQueryNodeProcessor *self, PyObject *args, PyObject *kwds);
              static PyObject *t_LowercaseExpandedTermsQueryNodeProcessor_process(t_LowercaseExpandedTermsQueryNodeProcessor *self, PyObject *args);

              static PyMethodDef t_LowercaseExpandedTermsQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_LowercaseExpandedTermsQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_LowercaseExpandedTermsQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_LowercaseExpandedTermsQueryNodeProcessor, process, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(LowercaseExpandedTermsQueryNodeProcessor, t_LowercaseExpandedTermsQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, LowercaseExpandedTermsQueryNodeProcessor, t_LowercaseExpandedTermsQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_LowercaseExpandedTermsQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(LowercaseExpandedTermsQueryNodeProcessor), module, "LowercaseExpandedTermsQueryNodeProcessor", 0);
              }

              void t_LowercaseExpandedTermsQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(LowercaseExpandedTermsQueryNodeProcessor).tp_dict, "class_", make_descriptor(LowercaseExpandedTermsQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(LowercaseExpandedTermsQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_LowercaseExpandedTermsQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(LowercaseExpandedTermsQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_LowercaseExpandedTermsQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, LowercaseExpandedTermsQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_LowercaseExpandedTermsQueryNodeProcessor::wrap_Object(LowercaseExpandedTermsQueryNodeProcessor(((t_LowercaseExpandedTermsQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_LowercaseExpandedTermsQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, LowercaseExpandedTermsQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_LowercaseExpandedTermsQueryNodeProcessor_init_(t_LowercaseExpandedTermsQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                LowercaseExpandedTermsQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = LowercaseExpandedTermsQueryNodeProcessor());
                self->object = object;

                return 0;
              }

              static PyObject *t_LowercaseExpandedTermsQueryNodeProcessor_process(t_LowercaseExpandedTermsQueryNodeProcessor *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(LowercaseExpandedTermsQueryNodeProcessor), (PyObject *) self, "process", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/postingshighlight/PassageScorer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace postingshighlight {

          ::java::lang::Class *PassageScorer::class$ = NULL;
          jmethodID *PassageScorer::mids$ = NULL;
          bool PassageScorer::live$ = false;

          jclass PassageScorer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/postingshighlight/PassageScorer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_5348eb2d] = env->getMethodID(cls, "<init>", "(FFF)V");
              mids$[mid_norm_39c7bd2c] = env->getMethodID(cls, "norm", "(I)F");
              mids$[mid_tf_d8d154b6] = env->getMethodID(cls, "tf", "(II)F");
              mids$[mid_weight_d8d154b6] = env->getMethodID(cls, "weight", "(II)F");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PassageScorer::PassageScorer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          PassageScorer::PassageScorer(jfloat a0, jfloat a1, jfloat a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5348eb2d, a0, a1, a2)) {}

          jfloat PassageScorer::norm(jint a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_norm_39c7bd2c], a0);
          }

          jfloat PassageScorer::tf(jint a0, jint a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_tf_d8d154b6], a0, a1);
          }

          jfloat PassageScorer::weight(jint a0, jint a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_weight_d8d154b6], a0, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace postingshighlight {
          static PyObject *t_PassageScorer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PassageScorer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PassageScorer_init_(t_PassageScorer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PassageScorer_norm(t_PassageScorer *self, PyObject *arg);
          static PyObject *t_PassageScorer_tf(t_PassageScorer *self, PyObject *args);
          static PyObject *t_PassageScorer_weight(t_PassageScorer *self, PyObject *args);

          static PyMethodDef t_PassageScorer__methods_[] = {
            DECLARE_METHOD(t_PassageScorer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PassageScorer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PassageScorer, norm, METH_O),
            DECLARE_METHOD(t_PassageScorer, tf, METH_VARARGS),
            DECLARE_METHOD(t_PassageScorer, weight, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PassageScorer, t_PassageScorer, ::java::lang::Object, PassageScorer, t_PassageScorer_init_, 0, 0, 0, 0, 0);

          void t_PassageScorer::install(PyObject *module)
          {
            installType(&PY_TYPE(PassageScorer), module, "PassageScorer", 0);
          }

          void t_PassageScorer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PassageScorer).tp_dict, "class_", make_descriptor(PassageScorer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PassageScorer).tp_dict, "wrapfn_", make_descriptor(t_PassageScorer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PassageScorer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PassageScorer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PassageScorer::initializeClass, 1)))
              return NULL;
            return t_PassageScorer::wrap_Object(PassageScorer(((t_PassageScorer *) arg)->object.this$));
          }
          static PyObject *t_PassageScorer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PassageScorer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PassageScorer_init_(t_PassageScorer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                PassageScorer object((jobject) NULL);

                INT_CALL(object = PassageScorer());
                self->object = object;
                break;
              }
              goto err;
             case 3:
              {
                jfloat a0;
                jfloat a1;
                jfloat a2;
                PassageScorer object((jobject) NULL);

                if (!parseArgs(args, "FFF", &a0, &a1, &a2))
                {
                  INT_CALL(object = PassageScorer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PassageScorer_norm(t_PassageScorer *self, PyObject *arg)
          {
            jint a0;
            jfloat result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.norm(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "norm", arg);
            return NULL;
          }

          static PyObject *t_PassageScorer_tf(t_PassageScorer *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jfloat result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.tf(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "tf", args);
            return NULL;
          }

          static PyObject *t_PassageScorer_weight(t_PassageScorer *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jfloat result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.weight(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "weight", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/AndQueryNode.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *AndQueryNode::class$ = NULL;
              jmethodID *AndQueryNode::mids$ = NULL;
              bool AndQueryNode::live$ = false;

              jclass AndQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/AndQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_1fde8fc3] = env->getMethodID(cls, "<init>", "(Ljava/util/List;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              AndQueryNode::AndQueryNode(const ::java::util::List & a0) : ::org::apache::lucene::queryparser::flexible::core::nodes::BooleanQueryNode(env->newObject(initializeClass, &mids$, mid_init$_1fde8fc3, a0.this$)) {}

              ::java::lang::CharSequence AndQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String AndQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_AndQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_AndQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_AndQueryNode_init_(t_AndQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_AndQueryNode_toQueryString(t_AndQueryNode *self, PyObject *args);
              static PyObject *t_AndQueryNode_toString(t_AndQueryNode *self, PyObject *args);

              static PyMethodDef t_AndQueryNode__methods_[] = {
                DECLARE_METHOD(t_AndQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AndQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AndQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_AndQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(AndQueryNode, t_AndQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::BooleanQueryNode, AndQueryNode, t_AndQueryNode_init_, 0, 0, 0, 0, 0);

              void t_AndQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(AndQueryNode), module, "AndQueryNode", 0);
              }

              void t_AndQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(AndQueryNode).tp_dict, "class_", make_descriptor(AndQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(AndQueryNode).tp_dict, "wrapfn_", make_descriptor(t_AndQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(AndQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_AndQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, AndQueryNode::initializeClass, 1)))
                  return NULL;
                return t_AndQueryNode::wrap_Object(AndQueryNode(((t_AndQueryNode *) arg)->object.this$));
              }
              static PyObject *t_AndQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, AndQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_AndQueryNode_init_(t_AndQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::util::List a0((jobject) NULL);
                PyTypeObject **p0;
                AndQueryNode object((jobject) NULL);

                if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
                {
                  INT_CALL(object = AndQueryNode(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_AndQueryNode_toQueryString(t_AndQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(AndQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_AndQueryNode_toString(t_AndQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(AndQueryNode), (PyObject *) self, "toString", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TotalHitCountCollector.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TotalHitCountCollector::class$ = NULL;
        jmethodID *TotalHitCountCollector::mids$ = NULL;
        bool TotalHitCountCollector::live$ = false;

        jclass TotalHitCountCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TotalHitCountCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
            mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
            mids$[mid_getTotalHits_54c6a179] = env->getMethodID(cls, "getTotalHits", "()I");
            mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
            mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TotalHitCountCollector::TotalHitCountCollector() : ::org::apache::lucene::search::Collector(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean TotalHitCountCollector::acceptsDocsOutOfOrder() const
        {
          return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
        }

        void TotalHitCountCollector::collect(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
        }

        jint TotalHitCountCollector::getTotalHits() const
        {
          return env->callIntMethod(this$, mids$[mid_getTotalHits_54c6a179]);
        }

        void TotalHitCountCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
        }

        void TotalHitCountCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TotalHitCountCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TotalHitCountCollector_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TotalHitCountCollector_init_(t_TotalHitCountCollector *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TotalHitCountCollector_acceptsDocsOutOfOrder(t_TotalHitCountCollector *self, PyObject *args);
        static PyObject *t_TotalHitCountCollector_collect(t_TotalHitCountCollector *self, PyObject *args);
        static PyObject *t_TotalHitCountCollector_getTotalHits(t_TotalHitCountCollector *self);
        static PyObject *t_TotalHitCountCollector_setNextReader(t_TotalHitCountCollector *self, PyObject *args);
        static PyObject *t_TotalHitCountCollector_setScorer(t_TotalHitCountCollector *self, PyObject *args);
        static int t_TotalHitCountCollector_set__nextReader(t_TotalHitCountCollector *self, PyObject *arg, void *data);
        static int t_TotalHitCountCollector_set__scorer(t_TotalHitCountCollector *self, PyObject *arg, void *data);
        static PyObject *t_TotalHitCountCollector_get__totalHits(t_TotalHitCountCollector *self, void *data);
        static PyGetSetDef t_TotalHitCountCollector__fields_[] = {
          DECLARE_SET_FIELD(t_TotalHitCountCollector, nextReader),
          DECLARE_SET_FIELD(t_TotalHitCountCollector, scorer),
          DECLARE_GET_FIELD(t_TotalHitCountCollector, totalHits),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TotalHitCountCollector__methods_[] = {
          DECLARE_METHOD(t_TotalHitCountCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TotalHitCountCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TotalHitCountCollector, acceptsDocsOutOfOrder, METH_VARARGS),
          DECLARE_METHOD(t_TotalHitCountCollector, collect, METH_VARARGS),
          DECLARE_METHOD(t_TotalHitCountCollector, getTotalHits, METH_NOARGS),
          DECLARE_METHOD(t_TotalHitCountCollector, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_TotalHitCountCollector, setScorer, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TotalHitCountCollector, t_TotalHitCountCollector, ::org::apache::lucene::search::Collector, TotalHitCountCollector, t_TotalHitCountCollector_init_, 0, 0, t_TotalHitCountCollector__fields_, 0, 0);

        void t_TotalHitCountCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(TotalHitCountCollector), module, "TotalHitCountCollector", 0);
        }

        void t_TotalHitCountCollector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TotalHitCountCollector).tp_dict, "class_", make_descriptor(TotalHitCountCollector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TotalHitCountCollector).tp_dict, "wrapfn_", make_descriptor(t_TotalHitCountCollector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TotalHitCountCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TotalHitCountCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TotalHitCountCollector::initializeClass, 1)))
            return NULL;
          return t_TotalHitCountCollector::wrap_Object(TotalHitCountCollector(((t_TotalHitCountCollector *) arg)->object.this$));
        }
        static PyObject *t_TotalHitCountCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TotalHitCountCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TotalHitCountCollector_init_(t_TotalHitCountCollector *self, PyObject *args, PyObject *kwds)
        {
          TotalHitCountCollector object((jobject) NULL);

          INT_CALL(object = TotalHitCountCollector());
          self->object = object;

          return 0;
        }

        static PyObject *t_TotalHitCountCollector_acceptsDocsOutOfOrder(t_TotalHitCountCollector *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(TotalHitCountCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
        }

        static PyObject *t_TotalHitCountCollector_collect(t_TotalHitCountCollector *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.collect(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TotalHitCountCollector), (PyObject *) self, "collect", args, 2);
        }

        static PyObject *t_TotalHitCountCollector_getTotalHits(t_TotalHitCountCollector *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getTotalHits());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_TotalHitCountCollector_setNextReader(t_TotalHitCountCollector *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setNextReader(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TotalHitCountCollector), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_TotalHitCountCollector_setScorer(t_TotalHitCountCollector *self, PyObject *args)
        {
          ::org::apache::lucene::search::Scorer a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setScorer(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TotalHitCountCollector), (PyObject *) self, "setScorer", args, 2);
        }

        static int t_TotalHitCountCollector_set__nextReader(t_TotalHitCountCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_TotalHitCountCollector_set__scorer(t_TotalHitCountCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Scorer value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
            {
              INT_CALL(self->object.setScorer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "scorer", arg);
          return -1;
        }

        static PyObject *t_TotalHitCountCollector_get__totalHits(t_TotalHitCountCollector *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getTotalHits());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/FloatField.h"
#include "java/lang/String.h"
#include "org/apache/lucene/document/FieldType.h"
#include "org/apache/lucene/document/Field$Store.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *FloatField::class$ = NULL;
        jmethodID *FloatField::mids$ = NULL;
        bool FloatField::live$ = false;
        ::org::apache::lucene::document::FieldType *FloatField::TYPE_NOT_STORED = NULL;
        ::org::apache::lucene::document::FieldType *FloatField::TYPE_STORED = NULL;

        jclass FloatField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/FloatField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_866c7d94] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;FLorg/apache/lucene/document/Field$Store;)V");
            mids$[mid_init$_49ba27a3] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;FLorg/apache/lucene/document/FieldType;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE_NOT_STORED = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_NOT_STORED", "Lorg/apache/lucene/document/FieldType;"));
            TYPE_STORED = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_STORED", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FloatField::FloatField(const ::java::lang::String & a0, jfloat a1, const ::org::apache::lucene::document::Field$Store & a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_866c7d94, a0.this$, a1, a2.this$)) {}

        FloatField::FloatField(const ::java::lang::String & a0, jfloat a1, const ::org::apache::lucene::document::FieldType & a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_49ba27a3, a0.this$, a1, a2.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_FloatField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FloatField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FloatField_init_(t_FloatField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_FloatField__methods_[] = {
          DECLARE_METHOD(t_FloatField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FloatField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FloatField, t_FloatField, ::org::apache::lucene::document::Field, FloatField, t_FloatField_init_, 0, 0, 0, 0, 0);

        void t_FloatField::install(PyObject *module)
        {
          installType(&PY_TYPE(FloatField), module, "FloatField", 0);
        }

        void t_FloatField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FloatField).tp_dict, "class_", make_descriptor(FloatField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FloatField).tp_dict, "wrapfn_", make_descriptor(t_FloatField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FloatField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FloatField::initializeClass);
          PyDict_SetItemString(PY_TYPE(FloatField).tp_dict, "TYPE_NOT_STORED", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*FloatField::TYPE_NOT_STORED)));
          PyDict_SetItemString(PY_TYPE(FloatField).tp_dict, "TYPE_STORED", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*FloatField::TYPE_STORED)));
        }

        static PyObject *t_FloatField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FloatField::initializeClass, 1)))
            return NULL;
          return t_FloatField::wrap_Object(FloatField(((t_FloatField *) arg)->object.this$));
        }
        static PyObject *t_FloatField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FloatField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FloatField_init_(t_FloatField *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              jfloat a1;
              ::org::apache::lucene::document::Field$Store a2((jobject) NULL);
              PyTypeObject **p2;
              FloatField object((jobject) NULL);

              if (!parseArgs(args, "sFK", ::org::apache::lucene::document::Field$Store::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::document::t_Field$Store::parameters_))
              {
                INT_CALL(object = FloatField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jfloat a1;
              ::org::apache::lucene::document::FieldType a2((jobject) NULL);
              FloatField object((jobject) NULL);

              if (!parseArgs(args, "sFk", ::org::apache::lucene::document::FieldType::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = FloatField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/NamedSPILoader.h"
#include "java/lang/Iterable.h"
#include "org/apache/lucene/util/NamedSPILoader$NamedSPI.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/ClassLoader.h"
#include "java/util/Iterator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *NamedSPILoader::class$ = NULL;
        jmethodID *NamedSPILoader::mids$ = NULL;
        bool NamedSPILoader::live$ = false;

        jclass NamedSPILoader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/NamedSPILoader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a5deaff4] = env->getMethodID(cls, "<init>", "(Ljava/lang/Class;)V");
            mids$[mid_init$_6deee997] = env->getMethodID(cls, "<init>", "(Ljava/lang/Class;Ljava/lang/ClassLoader;)V");
            mids$[mid_availableServices_03e99967] = env->getMethodID(cls, "availableServices", "()Ljava/util/Set;");
            mids$[mid_checkServiceName_5fdc3f48] = env->getStaticMethodID(cls, "checkServiceName", "(Ljava/lang/String;)V");
            mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_lookup_f2235407] = env->getMethodID(cls, "lookup", "(Ljava/lang/String;)Lorg/apache/lucene/util/NamedSPILoader$NamedSPI;");
            mids$[mid_reload_9110048d] = env->getMethodID(cls, "reload", "(Ljava/lang/ClassLoader;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NamedSPILoader::NamedSPILoader(const ::java::lang::Class & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a5deaff4, a0.this$)) {}

        NamedSPILoader::NamedSPILoader(const ::java::lang::Class & a0, const ::java::lang::ClassLoader & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6deee997, a0.this$, a1.this$)) {}

        ::java::util::Set NamedSPILoader::availableServices() const
        {
          return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_availableServices_03e99967]));
        }

        void NamedSPILoader::checkServiceName(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_checkServiceName_5fdc3f48], a0.this$);
        }

        ::java::util::Iterator NamedSPILoader::iterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
        }

        ::org::apache::lucene::util::NamedSPILoader$NamedSPI NamedSPILoader::lookup(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::util::NamedSPILoader$NamedSPI(env->callObjectMethod(this$, mids$[mid_lookup_f2235407], a0.this$));
        }

        void NamedSPILoader::reload(const ::java::lang::ClassLoader & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_reload_9110048d], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_NamedSPILoader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NamedSPILoader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NamedSPILoader_of_(t_NamedSPILoader *self, PyObject *args);
        static int t_NamedSPILoader_init_(t_NamedSPILoader *self, PyObject *args, PyObject *kwds);
        static PyObject *t_NamedSPILoader_availableServices(t_NamedSPILoader *self);
        static PyObject *t_NamedSPILoader_checkServiceName(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NamedSPILoader_iterator(t_NamedSPILoader *self);
        static PyObject *t_NamedSPILoader_lookup(t_NamedSPILoader *self, PyObject *arg);
        static PyObject *t_NamedSPILoader_reload(t_NamedSPILoader *self, PyObject *arg);
        static PyObject *t_NamedSPILoader_get__parameters_(t_NamedSPILoader *self, void *data);
        static PyGetSetDef t_NamedSPILoader__fields_[] = {
          DECLARE_GET_FIELD(t_NamedSPILoader, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_NamedSPILoader__methods_[] = {
          DECLARE_METHOD(t_NamedSPILoader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NamedSPILoader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NamedSPILoader, of_, METH_VARARGS),
          DECLARE_METHOD(t_NamedSPILoader, availableServices, METH_NOARGS),
          DECLARE_METHOD(t_NamedSPILoader, checkServiceName, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NamedSPILoader, iterator, METH_NOARGS),
          DECLARE_METHOD(t_NamedSPILoader, lookup, METH_O),
          DECLARE_METHOD(t_NamedSPILoader, reload, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NamedSPILoader, t_NamedSPILoader, ::java::lang::Object, NamedSPILoader, t_NamedSPILoader_init_, ((PyObject *(*)(t_NamedSPILoader *)) get_generic_iterator< t_NamedSPILoader >), 0, t_NamedSPILoader__fields_, 0, 0);
        PyObject *t_NamedSPILoader::wrap_Object(const NamedSPILoader& object, PyTypeObject *p0)
        {
          PyObject *obj = t_NamedSPILoader::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_NamedSPILoader *self = (t_NamedSPILoader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_NamedSPILoader::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_NamedSPILoader::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_NamedSPILoader *self = (t_NamedSPILoader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_NamedSPILoader::install(PyObject *module)
        {
          installType(&PY_TYPE(NamedSPILoader), module, "NamedSPILoader", 0);
          PyDict_SetItemString(PY_TYPE(NamedSPILoader).tp_dict, "NamedSPI", make_descriptor(&PY_TYPE(NamedSPILoader$NamedSPI)));
        }

        void t_NamedSPILoader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NamedSPILoader).tp_dict, "class_", make_descriptor(NamedSPILoader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NamedSPILoader).tp_dict, "wrapfn_", make_descriptor(t_NamedSPILoader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NamedSPILoader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NamedSPILoader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NamedSPILoader::initializeClass, 1)))
            return NULL;
          return t_NamedSPILoader::wrap_Object(NamedSPILoader(((t_NamedSPILoader *) arg)->object.this$));
        }
        static PyObject *t_NamedSPILoader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NamedSPILoader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NamedSPILoader_of_(t_NamedSPILoader *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_NamedSPILoader_init_(t_NamedSPILoader *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::Class a0((jobject) NULL);
              PyTypeObject **p0;
              NamedSPILoader object((jobject) NULL);

              if (!parseArgs(args, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
              {
                INT_CALL(object = NamedSPILoader(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::lang::Class a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::lang::ClassLoader a1((jobject) NULL);
              NamedSPILoader object((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::lang::Class::initializeClass, ::java::lang::ClassLoader::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1))
              {
                INT_CALL(object = NamedSPILoader(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_NamedSPILoader_availableServices(t_NamedSPILoader *self)
        {
          ::java::util::Set result((jobject) NULL);
          OBJ_CALL(result = self->object.availableServices());
          return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_NamedSPILoader_checkServiceName(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(::org::apache::lucene::util::NamedSPILoader::checkServiceName(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "checkServiceName", arg);
          return NULL;
        }

        static PyObject *t_NamedSPILoader_iterator(t_NamedSPILoader *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.iterator());
          return ::java::util::t_Iterator::wrap_Object(result, self->parameters[0]);
        }

        static PyObject *t_NamedSPILoader_lookup(t_NamedSPILoader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::NamedSPILoader$NamedSPI result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.lookup(a0));
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::org::apache::lucene::util::t_NamedSPILoader$NamedSPI::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "lookup", arg);
          return NULL;
        }

        static PyObject *t_NamedSPILoader_reload(t_NamedSPILoader *self, PyObject *arg)
        {
          ::java::lang::ClassLoader a0((jobject) NULL);

          if (!parseArg(arg, "k", ::java::lang::ClassLoader::initializeClass, &a0))
          {
            OBJ_CALL(self->object.reload(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "reload", arg);
          return NULL;
        }
        static PyObject *t_NamedSPILoader_get__parameters_(t_NamedSPILoader *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanLightStemFilterFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanLightStemFilterFactory::class$ = NULL;
          jmethodID *GermanLightStemFilterFactory::mids$ = NULL;
          bool GermanLightStemFilterFactory::live$ = false;

          jclass GermanLightStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanLightStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanLightStemFilterFactory::GermanLightStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream GermanLightStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanLightStemFilterFactory_init_(t_GermanLightStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GermanLightStemFilterFactory_create(t_GermanLightStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_GermanLightStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_GermanLightStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanLightStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanLightStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GermanLightStemFilterFactory, t_GermanLightStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, GermanLightStemFilterFactory, t_GermanLightStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_GermanLightStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanLightStemFilterFactory), module, "GermanLightStemFilterFactory", 0);
          }

          void t_GermanLightStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GermanLightStemFilterFactory).tp_dict, "class_", make_descriptor(GermanLightStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GermanLightStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_GermanLightStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GermanLightStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GermanLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanLightStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_GermanLightStemFilterFactory::wrap_Object(GermanLightStemFilterFactory(((t_GermanLightStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_GermanLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanLightStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanLightStemFilterFactory_init_(t_GermanLightStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            GermanLightStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = GermanLightStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GermanLightStemFilterFactory_create(t_GermanLightStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(GermanLightStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/NoDeletionPolicy.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *NoDeletionPolicy::class$ = NULL;
        jmethodID *NoDeletionPolicy::mids$ = NULL;
        bool NoDeletionPolicy::live$ = false;
        ::org::apache::lucene::index::IndexDeletionPolicy *NoDeletionPolicy::INSTANCE = NULL;

        jclass NoDeletionPolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/NoDeletionPolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_clone_a18376c3] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/index/IndexDeletionPolicy;");
            mids$[mid_onCommit_1fde8fc3] = env->getMethodID(cls, "onCommit", "(Ljava/util/List;)V");
            mids$[mid_onInit_1fde8fc3] = env->getMethodID(cls, "onInit", "(Ljava/util/List;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            INSTANCE = new ::org::apache::lucene::index::IndexDeletionPolicy(env->getStaticObjectField(cls, "INSTANCE", "Lorg/apache/lucene/index/IndexDeletionPolicy;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::IndexDeletionPolicy NoDeletionPolicy::clone() const
        {
          return ::org::apache::lucene::index::IndexDeletionPolicy(env->callObjectMethod(this$, mids$[mid_clone_a18376c3]));
        }

        void NoDeletionPolicy::onCommit(const ::java::util::List & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_onCommit_1fde8fc3], a0.this$);
        }

        void NoDeletionPolicy::onInit(const ::java::util::List & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_onInit_1fde8fc3], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_NoDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NoDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NoDeletionPolicy_clone(t_NoDeletionPolicy *self);
        static PyObject *t_NoDeletionPolicy_onCommit(t_NoDeletionPolicy *self, PyObject *args);
        static PyObject *t_NoDeletionPolicy_onInit(t_NoDeletionPolicy *self, PyObject *args);

        static PyMethodDef t_NoDeletionPolicy__methods_[] = {
          DECLARE_METHOD(t_NoDeletionPolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NoDeletionPolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NoDeletionPolicy, clone, METH_NOARGS),
          DECLARE_METHOD(t_NoDeletionPolicy, onCommit, METH_VARARGS),
          DECLARE_METHOD(t_NoDeletionPolicy, onInit, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NoDeletionPolicy, t_NoDeletionPolicy, ::org::apache::lucene::index::IndexDeletionPolicy, NoDeletionPolicy, abstract_init, 0, 0, 0, 0, 0);

        void t_NoDeletionPolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(NoDeletionPolicy), module, "NoDeletionPolicy", 0);
        }

        void t_NoDeletionPolicy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NoDeletionPolicy).tp_dict, "class_", make_descriptor(NoDeletionPolicy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NoDeletionPolicy).tp_dict, "wrapfn_", make_descriptor(t_NoDeletionPolicy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NoDeletionPolicy).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(NoDeletionPolicy::initializeClass);
          PyDict_SetItemString(PY_TYPE(NoDeletionPolicy).tp_dict, "INSTANCE", make_descriptor(::org::apache::lucene::index::t_IndexDeletionPolicy::wrap_Object(*NoDeletionPolicy::INSTANCE)));
        }

        static PyObject *t_NoDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NoDeletionPolicy::initializeClass, 1)))
            return NULL;
          return t_NoDeletionPolicy::wrap_Object(NoDeletionPolicy(((t_NoDeletionPolicy *) arg)->object.this$));
        }
        static PyObject *t_NoDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NoDeletionPolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NoDeletionPolicy_clone(t_NoDeletionPolicy *self)
        {
          ::org::apache::lucene::index::IndexDeletionPolicy result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return ::org::apache::lucene::index::t_IndexDeletionPolicy::wrap_Object(result);
        }

        static PyObject *t_NoDeletionPolicy_onCommit(t_NoDeletionPolicy *self, PyObject *args)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.onCommit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NoDeletionPolicy), (PyObject *) self, "onCommit", args, 2);
        }

        static PyObject *t_NoDeletionPolicy_onInit(t_NoDeletionPolicy *self, PyObject *args)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.onInit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NoDeletionPolicy), (PyObject *) self, "onInit", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/BaseFragListBuilder.h"
#include "org/apache/lucene/search/vectorhighlight/FragListBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *BaseFragListBuilder::class$ = NULL;
          jmethodID *BaseFragListBuilder::mids$ = NULL;
          bool BaseFragListBuilder::live$ = false;
          jint BaseFragListBuilder::MARGIN_DEFAULT = (jint) 0;
          jint BaseFragListBuilder::MIN_FRAG_CHAR_SIZE_FACTOR = (jint) 0;

          jclass BaseFragListBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/BaseFragListBuilder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_createFieldFragList_c90c3835] = env->getMethodID(cls, "createFieldFragList", "(Lorg/apache/lucene/search/vectorhighlight/FieldPhraseList;Lorg/apache/lucene/search/vectorhighlight/FieldFragList;I)Lorg/apache/lucene/search/vectorhighlight/FieldFragList;");
              mids$[mid_acceptPhrase_cb592899] = env->getMethodID(cls, "acceptPhrase", "(Lorg/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo;II)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              MARGIN_DEFAULT = env->getStaticIntField(cls, "MARGIN_DEFAULT");
              MIN_FRAG_CHAR_SIZE_FACTOR = env->getStaticIntField(cls, "MIN_FRAG_CHAR_SIZE_FACTOR");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BaseFragListBuilder::BaseFragListBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          BaseFragListBuilder::BaseFragListBuilder(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_BaseFragListBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BaseFragListBuilder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BaseFragListBuilder_init_(t_BaseFragListBuilder *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_BaseFragListBuilder__methods_[] = {
            DECLARE_METHOD(t_BaseFragListBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BaseFragListBuilder, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BaseFragListBuilder, t_BaseFragListBuilder, ::java::lang::Object, BaseFragListBuilder, t_BaseFragListBuilder_init_, 0, 0, 0, 0, 0);

          void t_BaseFragListBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(BaseFragListBuilder), module, "BaseFragListBuilder", 0);
          }

          void t_BaseFragListBuilder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BaseFragListBuilder).tp_dict, "class_", make_descriptor(BaseFragListBuilder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BaseFragListBuilder).tp_dict, "wrapfn_", make_descriptor(t_BaseFragListBuilder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BaseFragListBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(BaseFragListBuilder::initializeClass);
            PyDict_SetItemString(PY_TYPE(BaseFragListBuilder).tp_dict, "MARGIN_DEFAULT", make_descriptor(BaseFragListBuilder::MARGIN_DEFAULT));
            PyDict_SetItemString(PY_TYPE(BaseFragListBuilder).tp_dict, "MIN_FRAG_CHAR_SIZE_FACTOR", make_descriptor(BaseFragListBuilder::MIN_FRAG_CHAR_SIZE_FACTOR));
          }

          static PyObject *t_BaseFragListBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BaseFragListBuilder::initializeClass, 1)))
              return NULL;
            return t_BaseFragListBuilder::wrap_Object(BaseFragListBuilder(((t_BaseFragListBuilder *) arg)->object.this$));
          }
          static PyObject *t_BaseFragListBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BaseFragListBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BaseFragListBuilder_init_(t_BaseFragListBuilder *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                BaseFragListBuilder object((jobject) NULL);

                INT_CALL(object = BaseFragListBuilder());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jint a0;
                BaseFragListBuilder object((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  INT_CALL(object = BaseFragListBuilder(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/DerefBytesDocValuesField.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *DerefBytesDocValuesField::class$ = NULL;
        jmethodID *DerefBytesDocValuesField::mids$ = NULL;
        bool DerefBytesDocValuesField::live$ = false;
        ::org::apache::lucene::document::FieldType *DerefBytesDocValuesField::TYPE_FIXED_LEN = NULL;
        ::org::apache::lucene::document::FieldType *DerefBytesDocValuesField::TYPE_VAR_LEN = NULL;

        jclass DerefBytesDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/DerefBytesDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_43cce44e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_init$_6c8dc377] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;Z)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE_FIXED_LEN = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_FIXED_LEN", "Lorg/apache/lucene/document/FieldType;"));
            TYPE_VAR_LEN = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_VAR_LEN", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DerefBytesDocValuesField::DerefBytesDocValuesField(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1) : ::org::apache::lucene::document::BinaryDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_43cce44e, a0.this$, a1.this$)) {}

        DerefBytesDocValuesField::DerefBytesDocValuesField(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1, jboolean a2) : ::org::apache::lucene::document::BinaryDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_6c8dc377, a0.this$, a1.this$, a2)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_DerefBytesDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DerefBytesDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DerefBytesDocValuesField_init_(t_DerefBytesDocValuesField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_DerefBytesDocValuesField__methods_[] = {
          DECLARE_METHOD(t_DerefBytesDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DerefBytesDocValuesField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DerefBytesDocValuesField, t_DerefBytesDocValuesField, ::org::apache::lucene::document::BinaryDocValuesField, DerefBytesDocValuesField, t_DerefBytesDocValuesField_init_, 0, 0, 0, 0, 0);

        void t_DerefBytesDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(DerefBytesDocValuesField), module, "DerefBytesDocValuesField", 0);
        }

        void t_DerefBytesDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DerefBytesDocValuesField).tp_dict, "class_", make_descriptor(DerefBytesDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DerefBytesDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_DerefBytesDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DerefBytesDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(DerefBytesDocValuesField::initializeClass);
          PyDict_SetItemString(PY_TYPE(DerefBytesDocValuesField).tp_dict, "TYPE_FIXED_LEN", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*DerefBytesDocValuesField::TYPE_FIXED_LEN)));
          PyDict_SetItemString(PY_TYPE(DerefBytesDocValuesField).tp_dict, "TYPE_VAR_LEN", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*DerefBytesDocValuesField::TYPE_VAR_LEN)));
        }

        static PyObject *t_DerefBytesDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DerefBytesDocValuesField::initializeClass, 1)))
            return NULL;
          return t_DerefBytesDocValuesField::wrap_Object(DerefBytesDocValuesField(((t_DerefBytesDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_DerefBytesDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DerefBytesDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DerefBytesDocValuesField_init_(t_DerefBytesDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
              DerefBytesDocValuesField object((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                INT_CALL(object = DerefBytesDocValuesField(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
              jboolean a2;
              DerefBytesDocValuesField object((jobject) NULL);

              if (!parseArgs(args, "skZ", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = DerefBytesDocValuesField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/SwedishStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *SwedishStemmer::class$ = NULL;
        jmethodID *SwedishStemmer::mids$ = NULL;
        bool SwedishStemmer::live$ = false;

        jclass SwedishStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/SwedishStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SwedishStemmer::SwedishStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean SwedishStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint SwedishStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean SwedishStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_SwedishStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SwedishStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SwedishStemmer_init_(t_SwedishStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SwedishStemmer_equals(t_SwedishStemmer *self, PyObject *args);
        static PyObject *t_SwedishStemmer_hashCode(t_SwedishStemmer *self, PyObject *args);
        static PyObject *t_SwedishStemmer_stem(t_SwedishStemmer *self, PyObject *args);

        static PyMethodDef t_SwedishStemmer__methods_[] = {
          DECLARE_METHOD(t_SwedishStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SwedishStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SwedishStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_SwedishStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_SwedishStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SwedishStemmer, t_SwedishStemmer, ::org::tartarus::snowball::SnowballProgram, SwedishStemmer, t_SwedishStemmer_init_, 0, 0, 0, 0, 0);

        void t_SwedishStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(SwedishStemmer), module, "SwedishStemmer", 0);
        }

        void t_SwedishStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SwedishStemmer).tp_dict, "class_", make_descriptor(SwedishStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SwedishStemmer).tp_dict, "wrapfn_", make_descriptor(t_SwedishStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SwedishStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SwedishStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SwedishStemmer::initializeClass, 1)))
            return NULL;
          return t_SwedishStemmer::wrap_Object(SwedishStemmer(((t_SwedishStemmer *) arg)->object.this$));
        }
        static PyObject *t_SwedishStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SwedishStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SwedishStemmer_init_(t_SwedishStemmer *self, PyObject *args, PyObject *kwds)
        {
          SwedishStemmer object((jobject) NULL);

          INT_CALL(object = SwedishStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_SwedishStemmer_equals(t_SwedishStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(SwedishStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_SwedishStemmer_hashCode(t_SwedishStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(SwedishStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_SwedishStemmer_stem(t_SwedishStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(SwedishStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/MatchAllDocsQueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *MatchAllDocsQueryBuilder::class$ = NULL;
            jmethodID *MatchAllDocsQueryBuilder::mids$ = NULL;
            bool MatchAllDocsQueryBuilder::live$ = false;

            jclass MatchAllDocsQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/MatchAllDocsQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            MatchAllDocsQueryBuilder::MatchAllDocsQueryBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_MatchAllDocsQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_MatchAllDocsQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_MatchAllDocsQueryBuilder_init_(t_MatchAllDocsQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_MatchAllDocsQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_MatchAllDocsQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MatchAllDocsQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(MatchAllDocsQueryBuilder, t_MatchAllDocsQueryBuilder, ::java::lang::Object, MatchAllDocsQueryBuilder, t_MatchAllDocsQueryBuilder_init_, 0, 0, 0, 0, 0);

            void t_MatchAllDocsQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(MatchAllDocsQueryBuilder), module, "MatchAllDocsQueryBuilder", 0);
            }

            void t_MatchAllDocsQueryBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(MatchAllDocsQueryBuilder).tp_dict, "class_", make_descriptor(MatchAllDocsQueryBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(MatchAllDocsQueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_MatchAllDocsQueryBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(MatchAllDocsQueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_MatchAllDocsQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, MatchAllDocsQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_MatchAllDocsQueryBuilder::wrap_Object(MatchAllDocsQueryBuilder(((t_MatchAllDocsQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_MatchAllDocsQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, MatchAllDocsQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_MatchAllDocsQueryBuilder_init_(t_MatchAllDocsQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              MatchAllDocsQueryBuilder object((jobject) NULL);

              INT_CALL(object = MatchAllDocsQueryBuilder());
              self->object = object;

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/DistributionSPL.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *DistributionSPL::class$ = NULL;
          jmethodID *DistributionSPL::mids$ = NULL;
          bool DistributionSPL::live$ = false;

          jclass DistributionSPL::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/DistributionSPL");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_score_63482206] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DistributionSPL::DistributionSPL() : ::org::apache::lucene::search::similarities::Distribution(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat DistributionSPL::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1, jfloat a2) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_63482206], a0.this$, a1, a2);
          }

          ::java::lang::String DistributionSPL::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_DistributionSPL_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DistributionSPL_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DistributionSPL_init_(t_DistributionSPL *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DistributionSPL_score(t_DistributionSPL *self, PyObject *args);
          static PyObject *t_DistributionSPL_toString(t_DistributionSPL *self, PyObject *args);

          static PyMethodDef t_DistributionSPL__methods_[] = {
            DECLARE_METHOD(t_DistributionSPL, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DistributionSPL, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DistributionSPL, score, METH_VARARGS),
            DECLARE_METHOD(t_DistributionSPL, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DistributionSPL, t_DistributionSPL, ::org::apache::lucene::search::similarities::Distribution, DistributionSPL, t_DistributionSPL_init_, 0, 0, 0, 0, 0);

          void t_DistributionSPL::install(PyObject *module)
          {
            installType(&PY_TYPE(DistributionSPL), module, "DistributionSPL", 0);
          }

          void t_DistributionSPL::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DistributionSPL).tp_dict, "class_", make_descriptor(DistributionSPL::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DistributionSPL).tp_dict, "wrapfn_", make_descriptor(t_DistributionSPL::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DistributionSPL).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DistributionSPL_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DistributionSPL::initializeClass, 1)))
              return NULL;
            return t_DistributionSPL::wrap_Object(DistributionSPL(((t_DistributionSPL *) arg)->object.this$));
          }
          static PyObject *t_DistributionSPL_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DistributionSPL::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DistributionSPL_init_(t_DistributionSPL *self, PyObject *args, PyObject *kwds)
          {
            DistributionSPL object((jobject) NULL);

            INT_CALL(object = DistributionSPL());
            self->object = object;

            return 0;
          }

          static PyObject *t_DistributionSPL_score(t_DistributionSPL *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat a2;
            jfloat result;

            if (!parseArgs(args, "kFF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.score(a0, a1, a2));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(DistributionSPL), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_DistributionSPL_toString(t_DistributionSPL *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(DistributionSPL), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/PhraseQueryNodeBuilder.h"
#include "org/apache/lucene/search/PhraseQuery.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *PhraseQueryNodeBuilder::class$ = NULL;
              jmethodID *PhraseQueryNodeBuilder::mids$ = NULL;
              bool PhraseQueryNodeBuilder::live$ = false;

              jclass PhraseQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/PhraseQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_20a87818] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/PhraseQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              PhraseQueryNodeBuilder::PhraseQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::PhraseQuery PhraseQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::PhraseQuery(env->callObjectMethod(this$, mids$[mid_build_20a87818], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_PhraseQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_PhraseQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_PhraseQueryNodeBuilder_init_(t_PhraseQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_PhraseQueryNodeBuilder_build(t_PhraseQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_PhraseQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_PhraseQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PhraseQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PhraseQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(PhraseQueryNodeBuilder, t_PhraseQueryNodeBuilder, ::java::lang::Object, PhraseQueryNodeBuilder, t_PhraseQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_PhraseQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(PhraseQueryNodeBuilder), module, "PhraseQueryNodeBuilder", 0);
              }

              void t_PhraseQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(PhraseQueryNodeBuilder).tp_dict, "class_", make_descriptor(PhraseQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(PhraseQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_PhraseQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(PhraseQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_PhraseQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, PhraseQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_PhraseQueryNodeBuilder::wrap_Object(PhraseQueryNodeBuilder(((t_PhraseQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_PhraseQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, PhraseQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_PhraseQueryNodeBuilder_init_(t_PhraseQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                PhraseQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = PhraseQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_PhraseQueryNodeBuilder_build(t_PhraseQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::PhraseQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_PhraseQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/stempel/StempelStemmer.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/egothor/stemmer/Trie.h"
#include "java/io/InputStream.h"
#include "java/lang/StringBuilder.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace stempel {

          ::java::lang::Class *StempelStemmer::class$ = NULL;
          jmethodID *StempelStemmer::mids$ = NULL;
          bool StempelStemmer::live$ = false;

          jclass StempelStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/stempel/StempelStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
              mids$[mid_init$_366af231] = env->getMethodID(cls, "<init>", "(Lorg/egothor/stemmer/Trie;)V");
              mids$[mid_load_850f7b4e] = env->getStaticMethodID(cls, "load", "(Ljava/io/InputStream;)Lorg/egothor/stemmer/Trie;");
              mids$[mid_stem_50083a71] = env->getMethodID(cls, "stem", "(Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StempelStemmer::StempelStemmer(const ::java::io::InputStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

          StempelStemmer::StempelStemmer(const ::org::egothor::stemmer::Trie & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_366af231, a0.this$)) {}

          ::org::egothor::stemmer::Trie StempelStemmer::load(const ::java::io::InputStream & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::egothor::stemmer::Trie(env->callStaticObjectMethod(cls, mids$[mid_load_850f7b4e], a0.this$));
          }

          ::java::lang::StringBuilder StempelStemmer::stem(const ::java::lang::CharSequence & a0) const
          {
            return ::java::lang::StringBuilder(env->callObjectMethod(this$, mids$[mid_stem_50083a71], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace stempel {
          static PyObject *t_StempelStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StempelStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StempelStemmer_init_(t_StempelStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StempelStemmer_load(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StempelStemmer_stem(t_StempelStemmer *self, PyObject *arg);

          static PyMethodDef t_StempelStemmer__methods_[] = {
            DECLARE_METHOD(t_StempelStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StempelStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StempelStemmer, load, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StempelStemmer, stem, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StempelStemmer, t_StempelStemmer, ::java::lang::Object, StempelStemmer, t_StempelStemmer_init_, 0, 0, 0, 0, 0);

          void t_StempelStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(StempelStemmer), module, "StempelStemmer", 0);
          }

          void t_StempelStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StempelStemmer).tp_dict, "class_", make_descriptor(StempelStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StempelStemmer).tp_dict, "wrapfn_", make_descriptor(t_StempelStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StempelStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StempelStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StempelStemmer::initializeClass, 1)))
              return NULL;
            return t_StempelStemmer::wrap_Object(StempelStemmer(((t_StempelStemmer *) arg)->object.this$));
          }
          static PyObject *t_StempelStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StempelStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StempelStemmer_init_(t_StempelStemmer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::InputStream a0((jobject) NULL);
                StempelStemmer object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                {
                  INT_CALL(object = StempelStemmer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::egothor::stemmer::Trie a0((jobject) NULL);
                StempelStemmer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::egothor::stemmer::Trie::initializeClass, &a0))
                {
                  INT_CALL(object = StempelStemmer(a0));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StempelStemmer_load(PyTypeObject *type, PyObject *arg)
          {
            ::java::io::InputStream a0((jobject) NULL);
            ::org::egothor::stemmer::Trie result((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::InputStream::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::stempel::StempelStemmer::load(a0));
              return ::org::egothor::stemmer::t_Trie::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "load", arg);
            return NULL;
          }

          static PyObject *t_StempelStemmer_stem(t_StempelStemmer *self, PyObject *arg)
          {
            ::java::lang::CharSequence a0((jobject) NULL);
            ::java::lang::StringBuilder result((jobject) NULL);

            if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
            {
              OBJ_CALL(result = self->object.stem(a0));
              return ::java::lang::t_StringBuilder::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/NumericRangeQueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *NumericRangeQueryBuilder::class$ = NULL;
            jmethodID *NumericRangeQueryBuilder::mids$ = NULL;
            bool NumericRangeQueryBuilder::live$ = false;

            jclass NumericRangeQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/NumericRangeQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            NumericRangeQueryBuilder::NumericRangeQueryBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_NumericRangeQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NumericRangeQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_NumericRangeQueryBuilder_init_(t_NumericRangeQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_NumericRangeQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_NumericRangeQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NumericRangeQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(NumericRangeQueryBuilder, t_NumericRangeQueryBuilder, ::java::lang::Object, NumericRangeQueryBuilder, t_NumericRangeQueryBuilder_init_, 0, 0, 0, 0, 0);

            void t_NumericRangeQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(NumericRangeQueryBuilder), module, "NumericRangeQueryBuilder", 0);
            }

            void t_NumericRangeQueryBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(NumericRangeQueryBuilder).tp_dict, "class_", make_descriptor(NumericRangeQueryBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(NumericRangeQueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_NumericRangeQueryBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(NumericRangeQueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_NumericRangeQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, NumericRangeQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_NumericRangeQueryBuilder::wrap_Object(NumericRangeQueryBuilder(((t_NumericRangeQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_NumericRangeQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, NumericRangeQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_NumericRangeQueryBuilder_init_(t_NumericRangeQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              NumericRangeQueryBuilder object((jobject) NULL);

              INT_CALL(object = NumericRangeQueryBuilder());
              self->object = object;

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/DistanceSubQuery.h"
#include "org/apache/lucene/queryparser/surround/query/SpanNearClauseFactory.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *DistanceSubQuery::class$ = NULL;
            jmethodID *DistanceSubQuery::mids$ = NULL;
            bool DistanceSubQuery::live$ = false;

            jclass DistanceSubQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/DistanceSubQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_addSpanQueries_0564f431] = env->getMethodID(cls, "addSpanQueries", "(Lorg/apache/lucene/queryparser/surround/query/SpanNearClauseFactory;)V");
                mids$[mid_distanceSubQueryNotAllowed_14c7b5c5] = env->getMethodID(cls, "distanceSubQueryNotAllowed", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            void DistanceSubQuery::addSpanQueries(const ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_addSpanQueries_0564f431], a0.this$);
            }

            ::java::lang::String DistanceSubQuery::distanceSubQueryNotAllowed() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_distanceSubQueryNotAllowed_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_DistanceSubQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DistanceSubQuery_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DistanceSubQuery_addSpanQueries(t_DistanceSubQuery *self, PyObject *arg);
            static PyObject *t_DistanceSubQuery_distanceSubQueryNotAllowed(t_DistanceSubQuery *self);

            static PyMethodDef t_DistanceSubQuery__methods_[] = {
              DECLARE_METHOD(t_DistanceSubQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DistanceSubQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DistanceSubQuery, addSpanQueries, METH_O),
              DECLARE_METHOD(t_DistanceSubQuery, distanceSubQueryNotAllowed, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DistanceSubQuery, t_DistanceSubQuery, ::java::lang::Object, DistanceSubQuery, abstract_init, 0, 0, 0, 0, 0);

            void t_DistanceSubQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(DistanceSubQuery), module, "DistanceSubQuery", 0);
            }

            void t_DistanceSubQuery::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DistanceSubQuery).tp_dict, "class_", make_descriptor(DistanceSubQuery::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DistanceSubQuery).tp_dict, "wrapfn_", make_descriptor(t_DistanceSubQuery::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DistanceSubQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DistanceSubQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DistanceSubQuery::initializeClass, 1)))
                return NULL;
              return t_DistanceSubQuery::wrap_Object(DistanceSubQuery(((t_DistanceSubQuery *) arg)->object.this$));
            }
            static PyObject *t_DistanceSubQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DistanceSubQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_DistanceSubQuery_addSpanQueries(t_DistanceSubQuery *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory::initializeClass, &a0))
              {
                OBJ_CALL(self->object.addSpanQueries(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addSpanQueries", arg);
              return NULL;
            }

            static PyObject *t_DistanceSubQuery_distanceSubQueryNotAllowed(t_DistanceSubQuery *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.distanceSubQueryNotAllowed());
              return j2p(result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanQueryBuilderFactory.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanQueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *SpanQueryBuilderFactory::class$ = NULL;
            jmethodID *SpanQueryBuilderFactory::mids$ = NULL;
            bool SpanQueryBuilderFactory::live$ = false;

            jclass SpanQueryBuilderFactory::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/SpanQueryBuilderFactory");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_addBuilder_0aaa7d83] = env->getMethodID(cls, "addBuilder", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/xml/builders/SpanQueryBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SpanQueryBuilderFactory::SpanQueryBuilderFactory() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            void SpanQueryBuilderFactory::addBuilder(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addBuilder_0aaa7d83], a0.this$, a1.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_SpanQueryBuilderFactory_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SpanQueryBuilderFactory_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SpanQueryBuilderFactory_init_(t_SpanQueryBuilderFactory *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SpanQueryBuilderFactory_addBuilder(t_SpanQueryBuilderFactory *self, PyObject *args);

            static PyMethodDef t_SpanQueryBuilderFactory__methods_[] = {
              DECLARE_METHOD(t_SpanQueryBuilderFactory, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanQueryBuilderFactory, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanQueryBuilderFactory, addBuilder, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SpanQueryBuilderFactory, t_SpanQueryBuilderFactory, ::java::lang::Object, SpanQueryBuilderFactory, t_SpanQueryBuilderFactory_init_, 0, 0, 0, 0, 0);

            void t_SpanQueryBuilderFactory::install(PyObject *module)
            {
              installType(&PY_TYPE(SpanQueryBuilderFactory), module, "SpanQueryBuilderFactory", 0);
            }

            void t_SpanQueryBuilderFactory::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SpanQueryBuilderFactory).tp_dict, "class_", make_descriptor(SpanQueryBuilderFactory::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SpanQueryBuilderFactory).tp_dict, "wrapfn_", make_descriptor(t_SpanQueryBuilderFactory::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SpanQueryBuilderFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SpanQueryBuilderFactory_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SpanQueryBuilderFactory::initializeClass, 1)))
                return NULL;
              return t_SpanQueryBuilderFactory::wrap_Object(SpanQueryBuilderFactory(((t_SpanQueryBuilderFactory *) arg)->object.this$));
            }
            static PyObject *t_SpanQueryBuilderFactory_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SpanQueryBuilderFactory::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SpanQueryBuilderFactory_init_(t_SpanQueryBuilderFactory *self, PyObject *args, PyObject *kwds)
            {
              SpanQueryBuilderFactory object((jobject) NULL);

              INT_CALL(object = SpanQueryBuilderFactory());
              self->object = object;

              return 0;
            }

            static PyObject *t_SpanQueryBuilderFactory_addBuilder(t_SpanQueryBuilderFactory *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder a1((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.addBuilder(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addBuilder", args);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pattern/PatternTokenizer.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/io/IOException.h"
#include "java/util/regex/Pattern.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {

          ::java::lang::Class *PatternTokenizer::class$ = NULL;
          jmethodID *PatternTokenizer::mids$ = NULL;
          bool PatternTokenizer::live$ = false;

          jclass PatternTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pattern/PatternTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f57c1546] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;Ljava/util/regex/Pattern;I)V");
              mids$[mid_init$_b5faf662] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;Ljava/util/regex/Pattern;I)V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PatternTokenizer::PatternTokenizer(const ::java::io::Reader & a0, const ::java::util::regex::Pattern & a1, jint a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_f57c1546, a0.this$, a1.this$, a2)) {}

          PatternTokenizer::PatternTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1, const ::java::util::regex::Pattern & a2, jint a3) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_b5faf662, a0.this$, a1.this$, a2.this$, a3)) {}

          void PatternTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean PatternTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void PatternTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {
          static PyObject *t_PatternTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PatternTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PatternTokenizer_init_(t_PatternTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PatternTokenizer_end(t_PatternTokenizer *self, PyObject *args);
          static PyObject *t_PatternTokenizer_incrementToken(t_PatternTokenizer *self, PyObject *args);
          static PyObject *t_PatternTokenizer_reset(t_PatternTokenizer *self, PyObject *args);

          static PyMethodDef t_PatternTokenizer__methods_[] = {
            DECLARE_METHOD(t_PatternTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_PatternTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_PatternTokenizer, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PatternTokenizer, t_PatternTokenizer, ::org::apache::lucene::analysis::Tokenizer, PatternTokenizer, t_PatternTokenizer_init_, 0, 0, 0, 0, 0);

          void t_PatternTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(PatternTokenizer), module, "PatternTokenizer", 0);
          }

          void t_PatternTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PatternTokenizer).tp_dict, "class_", make_descriptor(PatternTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PatternTokenizer).tp_dict, "wrapfn_", make_descriptor(t_PatternTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PatternTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PatternTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PatternTokenizer::initializeClass, 1)))
              return NULL;
            return t_PatternTokenizer::wrap_Object(PatternTokenizer(((t_PatternTokenizer *) arg)->object.this$));
          }
          static PyObject *t_PatternTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PatternTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PatternTokenizer_init_(t_PatternTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::java::io::Reader a0((jobject) NULL);
                ::java::util::regex::Pattern a1((jobject) NULL);
                jint a2;
                PatternTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkI", ::java::io::Reader::initializeClass, ::java::util::regex::Pattern::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = PatternTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                ::java::util::regex::Pattern a2((jobject) NULL);
                jint a3;
                PatternTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkkI", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, ::java::util::regex::Pattern::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = PatternTokenizer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PatternTokenizer_end(t_PatternTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PatternTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_PatternTokenizer_incrementToken(t_PatternTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PatternTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_PatternTokenizer_reset(t_PatternTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PatternTokenizer), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/docvalues/StrDocValues.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queries/function/FunctionValues$ValueFiller.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {

            ::java::lang::Class *StrDocValues::class$ = NULL;
            jmethodID *StrDocValues::mids$ = NULL;
            bool StrDocValues::live$ = false;

            jclass StrDocValues::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/docvalues/StrDocValues");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ca78fe7a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_boolVal_39c7bd30] = env->getMethodID(cls, "boolVal", "(I)Z");
                mids$[mid_getValueFiller_7731f0bd] = env->getMethodID(cls, "getValueFiller", "()Lorg/apache/lucene/queries/function/FunctionValues$ValueFiller;");
                mids$[mid_objectVal_29be6a55] = env->getMethodID(cls, "objectVal", "(I)Ljava/lang/Object;");
                mids$[mid_strVal_141401b3] = env->getMethodID(cls, "strVal", "(I)Ljava/lang/String;");
                mids$[mid_toString_141401b3] = env->getMethodID(cls, "toString", "(I)Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            StrDocValues::StrDocValues(const ::org::apache::lucene::queries::function::ValueSource & a0) : ::org::apache::lucene::queries::function::FunctionValues(env->newObject(initializeClass, &mids$, mid_init$_ca78fe7a, a0.this$)) {}

            jboolean StrDocValues::boolVal(jint a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_boolVal_39c7bd30], a0);
            }

            ::org::apache::lucene::queries::function::FunctionValues$ValueFiller StrDocValues::getValueFiller() const
            {
              return ::org::apache::lucene::queries::function::FunctionValues$ValueFiller(env->callObjectMethod(this$, mids$[mid_getValueFiller_7731f0bd]));
            }

            ::java::lang::Object StrDocValues::objectVal(jint a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_objectVal_29be6a55], a0));
            }

            ::java::lang::String StrDocValues::strVal(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_strVal_141401b3], a0));
            }

            ::java::lang::String StrDocValues::toString(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_141401b3], a0));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {
            static PyObject *t_StrDocValues_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_StrDocValues_instance_(PyTypeObject *type, PyObject *arg);
            static int t_StrDocValues_init_(t_StrDocValues *self, PyObject *args, PyObject *kwds);
            static PyObject *t_StrDocValues_boolVal(t_StrDocValues *self, PyObject *args);
            static PyObject *t_StrDocValues_getValueFiller(t_StrDocValues *self, PyObject *args);
            static PyObject *t_StrDocValues_objectVal(t_StrDocValues *self, PyObject *args);
            static PyObject *t_StrDocValues_strVal(t_StrDocValues *self, PyObject *args);
            static PyObject *t_StrDocValues_toString(t_StrDocValues *self, PyObject *args);
            static PyObject *t_StrDocValues_get__valueFiller(t_StrDocValues *self, void *data);
            static PyGetSetDef t_StrDocValues__fields_[] = {
              DECLARE_GET_FIELD(t_StrDocValues, valueFiller),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_StrDocValues__methods_[] = {
              DECLARE_METHOD(t_StrDocValues, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_StrDocValues, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_StrDocValues, boolVal, METH_VARARGS),
              DECLARE_METHOD(t_StrDocValues, getValueFiller, METH_VARARGS),
              DECLARE_METHOD(t_StrDocValues, objectVal, METH_VARARGS),
              DECLARE_METHOD(t_StrDocValues, strVal, METH_VARARGS),
              DECLARE_METHOD(t_StrDocValues, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(StrDocValues, t_StrDocValues, ::org::apache::lucene::queries::function::FunctionValues, StrDocValues, t_StrDocValues_init_, 0, 0, t_StrDocValues__fields_, 0, 0);

            void t_StrDocValues::install(PyObject *module)
            {
              installType(&PY_TYPE(StrDocValues), module, "StrDocValues", 0);
            }

            void t_StrDocValues::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(StrDocValues).tp_dict, "class_", make_descriptor(StrDocValues::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(StrDocValues).tp_dict, "wrapfn_", make_descriptor(t_StrDocValues::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(StrDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_StrDocValues_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, StrDocValues::initializeClass, 1)))
                return NULL;
              return t_StrDocValues::wrap_Object(StrDocValues(((t_StrDocValues *) arg)->object.this$));
            }
            static PyObject *t_StrDocValues_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, StrDocValues::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_StrDocValues_init_(t_StrDocValues *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              StrDocValues object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = StrDocValues(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_StrDocValues_boolVal(t_StrDocValues *self, PyObject *args)
            {
              jint a0;
              jboolean result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.boolVal(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(StrDocValues), (PyObject *) self, "boolVal", args, 2);
            }

            static PyObject *t_StrDocValues_getValueFiller(t_StrDocValues *self, PyObject *args)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getValueFiller());
                return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(StrDocValues), (PyObject *) self, "getValueFiller", args, 2);
            }

            static PyObject *t_StrDocValues_objectVal(t_StrDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.objectVal(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(StrDocValues), (PyObject *) self, "objectVal", args, 2);
            }

            static PyObject *t_StrDocValues_strVal(t_StrDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.strVal(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(StrDocValues), (PyObject *) self, "strVal", args, 2);
            }

            static PyObject *t_StrDocValues_toString(t_StrDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(StrDocValues), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_StrDocValues_get__valueFiller(t_StrDocValues *self, void *data)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller value((jobject) NULL);
              OBJ_CALL(value = self->object.getValueFiller());
              return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/fst/ExternalRefSorter.h"
#include "org/apache/lucene/util/BytesRefIterator.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/suggest/fst/BytesRefSorter.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/Comparator.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/OfflineSorter.h"
#include "java/io/Closeable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {

            ::java::lang::Class *ExternalRefSorter::class$ = NULL;
            jmethodID *ExternalRefSorter::mids$ = NULL;
            bool ExternalRefSorter::live$ = false;

            jclass ExternalRefSorter::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/fst/ExternalRefSorter");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_6859decd] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/OfflineSorter;)V");
                mids$[mid_add_7bc03dc4] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/BytesRef;)V");
                mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
                mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
                mids$[mid_iterator_534dea83] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/util/BytesRefIterator;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ExternalRefSorter::ExternalRefSorter(const ::org::apache::lucene::util::OfflineSorter & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6859decd, a0.this$)) {}

            void ExternalRefSorter::add(const ::org::apache::lucene::util::BytesRef & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_add_7bc03dc4], a0.this$);
            }

            void ExternalRefSorter::close() const
            {
              env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
            }

            ::java::util::Comparator ExternalRefSorter::getComparator() const
            {
              return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
            }

            ::org::apache::lucene::util::BytesRefIterator ExternalRefSorter::iterator() const
            {
              return ::org::apache::lucene::util::BytesRefIterator(env->callObjectMethod(this$, mids$[mid_iterator_534dea83]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {
            static PyObject *t_ExternalRefSorter_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ExternalRefSorter_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ExternalRefSorter_init_(t_ExternalRefSorter *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ExternalRefSorter_add(t_ExternalRefSorter *self, PyObject *arg);
            static PyObject *t_ExternalRefSorter_close(t_ExternalRefSorter *self);
            static PyObject *t_ExternalRefSorter_getComparator(t_ExternalRefSorter *self);
            static PyObject *t_ExternalRefSorter_iterator(t_ExternalRefSorter *self);
            static PyObject *t_ExternalRefSorter_get__comparator(t_ExternalRefSorter *self, void *data);
            static PyGetSetDef t_ExternalRefSorter__fields_[] = {
              DECLARE_GET_FIELD(t_ExternalRefSorter, comparator),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_ExternalRefSorter__methods_[] = {
              DECLARE_METHOD(t_ExternalRefSorter, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ExternalRefSorter, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ExternalRefSorter, add, METH_O),
              DECLARE_METHOD(t_ExternalRefSorter, close, METH_NOARGS),
              DECLARE_METHOD(t_ExternalRefSorter, getComparator, METH_NOARGS),
              DECLARE_METHOD(t_ExternalRefSorter, iterator, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(ExternalRefSorter, t_ExternalRefSorter, ::java::lang::Object, ExternalRefSorter, t_ExternalRefSorter_init_, 0, 0, t_ExternalRefSorter__fields_, 0, 0);

            void t_ExternalRefSorter::install(PyObject *module)
            {
              installType(&PY_TYPE(ExternalRefSorter), module, "ExternalRefSorter", 0);
            }

            void t_ExternalRefSorter::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(ExternalRefSorter).tp_dict, "class_", make_descriptor(ExternalRefSorter::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(ExternalRefSorter).tp_dict, "wrapfn_", make_descriptor(t_ExternalRefSorter::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(ExternalRefSorter).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ExternalRefSorter_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ExternalRefSorter::initializeClass, 1)))
                return NULL;
              return t_ExternalRefSorter::wrap_Object(ExternalRefSorter(((t_ExternalRefSorter *) arg)->object.this$));
            }
            static PyObject *t_ExternalRefSorter_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ExternalRefSorter::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ExternalRefSorter_init_(t_ExternalRefSorter *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::util::OfflineSorter a0((jobject) NULL);
              ExternalRefSorter object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::OfflineSorter::initializeClass, &a0))
              {
                INT_CALL(object = ExternalRefSorter(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_ExternalRefSorter_add(t_ExternalRefSorter *self, PyObject *arg)
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(self->object.add(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "add", arg);
              return NULL;
            }

            static PyObject *t_ExternalRefSorter_close(t_ExternalRefSorter *self)
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            static PyObject *t_ExternalRefSorter_getComparator(t_ExternalRefSorter *self)
            {
              ::java::util::Comparator result((jobject) NULL);
              OBJ_CALL(result = self->object.getComparator());
              return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
            }

            static PyObject *t_ExternalRefSorter_iterator(t_ExternalRefSorter *self)
            {
              ::org::apache::lucene::util::BytesRefIterator result((jobject) NULL);
              OBJ_CALL(result = self->object.iterator());
              return ::org::apache::lucene::util::t_BytesRefIterator::wrap_Object(result);
            }

            static PyObject *t_ExternalRefSorter_get__comparator(t_ExternalRefSorter *self, void *data)
            {
              ::java::util::Comparator value((jobject) NULL);
              OBJ_CALL(value = self->object.getComparator());
              return ::java::util::t_Comparator::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/no/NorwegianLightStemFilterFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {

          ::java::lang::Class *NorwegianLightStemFilterFactory::class$ = NULL;
          jmethodID *NorwegianLightStemFilterFactory::mids$ = NULL;
          bool NorwegianLightStemFilterFactory::live$ = false;

          jclass NorwegianLightStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/no/NorwegianLightStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NorwegianLightStemFilterFactory::NorwegianLightStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream NorwegianLightStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {
          static PyObject *t_NorwegianLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NorwegianLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NorwegianLightStemFilterFactory_init_(t_NorwegianLightStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NorwegianLightStemFilterFactory_create(t_NorwegianLightStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_NorwegianLightStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_NorwegianLightStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianLightStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianLightStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NorwegianLightStemFilterFactory, t_NorwegianLightStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, NorwegianLightStemFilterFactory, t_NorwegianLightStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_NorwegianLightStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(NorwegianLightStemFilterFactory), module, "NorwegianLightStemFilterFactory", 0);
          }

          void t_NorwegianLightStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NorwegianLightStemFilterFactory).tp_dict, "class_", make_descriptor(NorwegianLightStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NorwegianLightStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_NorwegianLightStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NorwegianLightStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NorwegianLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NorwegianLightStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_NorwegianLightStemFilterFactory::wrap_Object(NorwegianLightStemFilterFactory(((t_NorwegianLightStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_NorwegianLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NorwegianLightStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NorwegianLightStemFilterFactory_init_(t_NorwegianLightStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            NorwegianLightStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = NorwegianLightStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NorwegianLightStemFilterFactory_create(t_NorwegianLightStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(NorwegianLightStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/NGramDistance.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/spell/StringDistance.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *NGramDistance::class$ = NULL;
          jmethodID *NGramDistance::mids$ = NULL;
          bool NGramDistance::live$ = false;

          jclass NGramDistance::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/NGramDistance");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getDistance_4a264752] = env->getMethodID(cls, "getDistance", "(Ljava/lang/String;Ljava/lang/String;)F");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NGramDistance::NGramDistance() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          NGramDistance::NGramDistance(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          jboolean NGramDistance::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jfloat NGramDistance::getDistance(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_getDistance_4a264752], a0.this$, a1.this$);
          }

          jint NGramDistance::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String NGramDistance::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_NGramDistance_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NGramDistance_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NGramDistance_init_(t_NGramDistance *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NGramDistance_equals(t_NGramDistance *self, PyObject *args);
          static PyObject *t_NGramDistance_getDistance(t_NGramDistance *self, PyObject *args);
          static PyObject *t_NGramDistance_hashCode(t_NGramDistance *self, PyObject *args);
          static PyObject *t_NGramDistance_toString(t_NGramDistance *self, PyObject *args);

          static PyMethodDef t_NGramDistance__methods_[] = {
            DECLARE_METHOD(t_NGramDistance, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NGramDistance, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NGramDistance, equals, METH_VARARGS),
            DECLARE_METHOD(t_NGramDistance, getDistance, METH_VARARGS),
            DECLARE_METHOD(t_NGramDistance, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_NGramDistance, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NGramDistance, t_NGramDistance, ::java::lang::Object, NGramDistance, t_NGramDistance_init_, 0, 0, 0, 0, 0);

          void t_NGramDistance::install(PyObject *module)
          {
            installType(&PY_TYPE(NGramDistance), module, "NGramDistance", 0);
          }

          void t_NGramDistance::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NGramDistance).tp_dict, "class_", make_descriptor(NGramDistance::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NGramDistance).tp_dict, "wrapfn_", make_descriptor(t_NGramDistance::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NGramDistance).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NGramDistance_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NGramDistance::initializeClass, 1)))
              return NULL;
            return t_NGramDistance::wrap_Object(NGramDistance(((t_NGramDistance *) arg)->object.this$));
          }
          static PyObject *t_NGramDistance_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NGramDistance::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NGramDistance_init_(t_NGramDistance *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                NGramDistance object((jobject) NULL);

                INT_CALL(object = NGramDistance());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jint a0;
                NGramDistance object((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  INT_CALL(object = NGramDistance(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NGramDistance_equals(t_NGramDistance *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(NGramDistance), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_NGramDistance_getDistance(t_NGramDistance *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jfloat result;

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getDistance(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "getDistance", args);
            return NULL;
          }

          static PyObject *t_NGramDistance_hashCode(t_NGramDistance *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(NGramDistance), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_NGramDistance_toString(t_NGramDistance *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(NGramDistance), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/FilteringTokenFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *FilteringTokenFilter::class$ = NULL;
          jmethodID *FilteringTokenFilter::mids$ = NULL;
          bool FilteringTokenFilter::live$ = false;

          jclass FilteringTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/FilteringTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8f50e725] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_f31dee3a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;ZLorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_getEnablePositionIncrements_54c6a16a] = env->getMethodID(cls, "getEnablePositionIncrements", "()Z");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_setEnablePositionIncrements_bb0c767f] = env->getMethodID(cls, "setEnablePositionIncrements", "(Z)V");
              mids$[mid_accept_54c6a16a] = env->getMethodID(cls, "accept", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FilteringTokenFilter::FilteringTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_8f50e725, a0.this$, a1.this$)) {}

          FilteringTokenFilter::FilteringTokenFilter(const ::org::apache::lucene::util::Version & a0, jboolean a1, const ::org::apache::lucene::analysis::TokenStream & a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_f31dee3a, a0.this$, a1, a2.this$)) {}

          void FilteringTokenFilter::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean FilteringTokenFilter::getEnablePositionIncrements() const
          {
            return env->callBooleanMethod(this$, mids$[mid_getEnablePositionIncrements_54c6a16a]);
          }

          jboolean FilteringTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void FilteringTokenFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }

          void FilteringTokenFilter::setEnablePositionIncrements(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setEnablePositionIncrements_bb0c767f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_FilteringTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FilteringTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FilteringTokenFilter_init_(t_FilteringTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FilteringTokenFilter_end(t_FilteringTokenFilter *self, PyObject *args);
          static PyObject *t_FilteringTokenFilter_getEnablePositionIncrements(t_FilteringTokenFilter *self);
          static PyObject *t_FilteringTokenFilter_incrementToken(t_FilteringTokenFilter *self, PyObject *args);
          static PyObject *t_FilteringTokenFilter_reset(t_FilteringTokenFilter *self, PyObject *args);
          static PyObject *t_FilteringTokenFilter_setEnablePositionIncrements(t_FilteringTokenFilter *self, PyObject *arg);
          static PyObject *t_FilteringTokenFilter_get__enablePositionIncrements(t_FilteringTokenFilter *self, void *data);
          static int t_FilteringTokenFilter_set__enablePositionIncrements(t_FilteringTokenFilter *self, PyObject *arg, void *data);
          static PyGetSetDef t_FilteringTokenFilter__fields_[] = {
            DECLARE_GETSET_FIELD(t_FilteringTokenFilter, enablePositionIncrements),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FilteringTokenFilter__methods_[] = {
            DECLARE_METHOD(t_FilteringTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FilteringTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FilteringTokenFilter, end, METH_VARARGS),
            DECLARE_METHOD(t_FilteringTokenFilter, getEnablePositionIncrements, METH_NOARGS),
            DECLARE_METHOD(t_FilteringTokenFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_FilteringTokenFilter, reset, METH_VARARGS),
            DECLARE_METHOD(t_FilteringTokenFilter, setEnablePositionIncrements, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FilteringTokenFilter, t_FilteringTokenFilter, ::org::apache::lucene::analysis::TokenFilter, FilteringTokenFilter, t_FilteringTokenFilter_init_, 0, 0, t_FilteringTokenFilter__fields_, 0, 0);

          void t_FilteringTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(FilteringTokenFilter), module, "FilteringTokenFilter", 0);
          }

          void t_FilteringTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FilteringTokenFilter).tp_dict, "class_", make_descriptor(FilteringTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FilteringTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_FilteringTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FilteringTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FilteringTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FilteringTokenFilter::initializeClass, 1)))
              return NULL;
            return t_FilteringTokenFilter::wrap_Object(FilteringTokenFilter(((t_FilteringTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_FilteringTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FilteringTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FilteringTokenFilter_init_(t_FilteringTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                FilteringTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = FilteringTokenFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                jboolean a1;
                ::org::apache::lucene::analysis::TokenStream a2((jobject) NULL);
                FilteringTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "KZk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = FilteringTokenFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FilteringTokenFilter_end(t_FilteringTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(FilteringTokenFilter), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_FilteringTokenFilter_getEnablePositionIncrements(t_FilteringTokenFilter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.getEnablePositionIncrements());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_FilteringTokenFilter_incrementToken(t_FilteringTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FilteringTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_FilteringTokenFilter_reset(t_FilteringTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(FilteringTokenFilter), (PyObject *) self, "reset", args, 2);
          }

          static PyObject *t_FilteringTokenFilter_setEnablePositionIncrements(t_FilteringTokenFilter *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setEnablePositionIncrements(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setEnablePositionIncrements", arg);
            return NULL;
          }

          static PyObject *t_FilteringTokenFilter_get__enablePositionIncrements(t_FilteringTokenFilter *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.getEnablePositionIncrements());
            Py_RETURN_BOOL(value);
          }
          static int t_FilteringTokenFilter_set__enablePositionIncrements(t_FilteringTokenFilter *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setEnablePositionIncrements(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "enablePositionIncrements", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/SetOnce.h"
#include "java/lang/Cloneable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *SetOnce::class$ = NULL;
        jmethodID *SetOnce::mids$ = NULL;
        bool SetOnce::live$ = false;

        jclass SetOnce::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/SetOnce");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_290588ee] = env->getMethodID(cls, "<init>", "(Ljava/lang/Object;)V");
            mids$[mid_get_846352c3] = env->getMethodID(cls, "get", "()Ljava/lang/Object;");
            mids$[mid_set_290588ee] = env->getMethodID(cls, "set", "(Ljava/lang/Object;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SetOnce::SetOnce() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        SetOnce::SetOnce(const ::java::lang::Object & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_290588ee, a0.this$)) {}

        ::java::lang::Object SetOnce::get() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_846352c3]));
        }

        void SetOnce::set(const ::java::lang::Object & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_set_290588ee], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/SetOnce$AlreadySetException.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_SetOnce_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SetOnce_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SetOnce_of_(t_SetOnce *self, PyObject *args);
        static int t_SetOnce_init_(t_SetOnce *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SetOnce_get(t_SetOnce *self);
        static PyObject *t_SetOnce_set(t_SetOnce *self, PyObject *arg);
        static PyObject *t_SetOnce_get__parameters_(t_SetOnce *self, void *data);
        static PyGetSetDef t_SetOnce__fields_[] = {
          DECLARE_GET_FIELD(t_SetOnce, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SetOnce__methods_[] = {
          DECLARE_METHOD(t_SetOnce, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SetOnce, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SetOnce, of_, METH_VARARGS),
          DECLARE_METHOD(t_SetOnce, get, METH_NOARGS),
          DECLARE_METHOD(t_SetOnce, set, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SetOnce, t_SetOnce, ::java::lang::Object, SetOnce, t_SetOnce_init_, 0, 0, t_SetOnce__fields_, 0, 0);
        PyObject *t_SetOnce::wrap_Object(const SetOnce& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SetOnce::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SetOnce *self = (t_SetOnce *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_SetOnce::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SetOnce::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SetOnce *self = (t_SetOnce *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_SetOnce::install(PyObject *module)
        {
          installType(&PY_TYPE(SetOnce), module, "SetOnce", 0);
          PyDict_SetItemString(PY_TYPE(SetOnce).tp_dict, "AlreadySetException", make_descriptor(&PY_TYPE(SetOnce$AlreadySetException)));
        }

        void t_SetOnce::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SetOnce).tp_dict, "class_", make_descriptor(SetOnce::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SetOnce).tp_dict, "wrapfn_", make_descriptor(t_SetOnce::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SetOnce).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SetOnce_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SetOnce::initializeClass, 1)))
            return NULL;
          return t_SetOnce::wrap_Object(SetOnce(((t_SetOnce *) arg)->object.this$));
        }
        static PyObject *t_SetOnce_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SetOnce::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SetOnce_of_(t_SetOnce *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_SetOnce_init_(t_SetOnce *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              SetOnce object((jobject) NULL);

              INT_CALL(object = SetOnce());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              ::java::lang::Object a0((jobject) NULL);
              SetOnce object((jobject) NULL);

              if (!parseArgs(args, "o", &a0))
              {
                INT_CALL(object = SetOnce(a0));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SetOnce_get(t_SetOnce *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.get());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_SetOnce_set(t_SetOnce *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArg(arg, "O", self->parameters[0], &a0))
          {
            OBJ_CALL(self->object.set(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "set", arg);
          return NULL;
        }
        static PyObject *t_SetOnce_get__parameters_(t_SetOnce *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/IfFunction.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *IfFunction::class$ = NULL;
            jmethodID *IfFunction::mids$ = NULL;
            bool IfFunction::live$ = false;

            jclass IfFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/IfFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_b33eec32] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;Lorg/apache/lucene/queries/function/ValueSource;Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            IfFunction::IfFunction(const ::org::apache::lucene::queries::function::ValueSource & a0, const ::org::apache::lucene::queries::function::ValueSource & a1, const ::org::apache::lucene::queries::function::ValueSource & a2) : ::org::apache::lucene::queries::function::valuesource::BoolFunction(env->newObject(initializeClass, &mids$, mid_init$_b33eec32, a0.this$, a1.this$, a2.this$)) {}

            void IfFunction::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String IfFunction::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean IfFunction::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues IfFunction::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint IfFunction::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_IfFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_IfFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_IfFunction_init_(t_IfFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_IfFunction_createWeight(t_IfFunction *self, PyObject *args);
            static PyObject *t_IfFunction_description(t_IfFunction *self, PyObject *args);
            static PyObject *t_IfFunction_equals(t_IfFunction *self, PyObject *args);
            static PyObject *t_IfFunction_getValues(t_IfFunction *self, PyObject *args);
            static PyObject *t_IfFunction_hashCode(t_IfFunction *self, PyObject *args);

            static PyMethodDef t_IfFunction__methods_[] = {
              DECLARE_METHOD(t_IfFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_IfFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_IfFunction, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_IfFunction, description, METH_VARARGS),
              DECLARE_METHOD(t_IfFunction, equals, METH_VARARGS),
              DECLARE_METHOD(t_IfFunction, getValues, METH_VARARGS),
              DECLARE_METHOD(t_IfFunction, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(IfFunction, t_IfFunction, ::org::apache::lucene::queries::function::valuesource::BoolFunction, IfFunction, t_IfFunction_init_, 0, 0, 0, 0, 0);

            void t_IfFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(IfFunction), module, "IfFunction", 0);
            }

            void t_IfFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(IfFunction).tp_dict, "class_", make_descriptor(IfFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(IfFunction).tp_dict, "wrapfn_", make_descriptor(t_IfFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(IfFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_IfFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, IfFunction::initializeClass, 1)))
                return NULL;
              return t_IfFunction::wrap_Object(IfFunction(((t_IfFunction *) arg)->object.this$));
            }
            static PyObject *t_IfFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, IfFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_IfFunction_init_(t_IfFunction *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);
              ::org::apache::lucene::queries::function::ValueSource a2((jobject) NULL);
              IfFunction object((jobject) NULL);

              if (!parseArgs(args, "kkk", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = IfFunction(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_IfFunction_createWeight(t_IfFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(IfFunction), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_IfFunction_description(t_IfFunction *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(IfFunction), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_IfFunction_equals(t_IfFunction *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(IfFunction), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_IfFunction_getValues(t_IfFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(IfFunction), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_IfFunction_hashCode(t_IfFunction *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(IfFunction), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/FastTaxonomyFacetCounts.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyReader.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/facet/FacetsConfig.h"
#include "org/apache/lucene/facet/FacetsCollector.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *FastTaxonomyFacetCounts::class$ = NULL;
          jmethodID *FastTaxonomyFacetCounts::mids$ = NULL;
          bool FastTaxonomyFacetCounts::live$ = false;

          jclass FastTaxonomyFacetCounts::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/FastTaxonomyFacetCounts");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_33dd1605] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/FacetsCollector;)V");
              mids$[mid_init$_9888e06b] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/FacetsCollector;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FastTaxonomyFacetCounts::FastTaxonomyFacetCounts(const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a0, const ::org::apache::lucene::facet::FacetsConfig & a1, const ::org::apache::lucene::facet::FacetsCollector & a2) : ::org::apache::lucene::facet::taxonomy::IntTaxonomyFacets(env->newObject(initializeClass, &mids$, mid_init$_33dd1605, a0.this$, a1.this$, a2.this$)) {}

          FastTaxonomyFacetCounts::FastTaxonomyFacetCounts(const ::java::lang::String & a0, const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a1, const ::org::apache::lucene::facet::FacetsConfig & a2, const ::org::apache::lucene::facet::FacetsCollector & a3) : ::org::apache::lucene::facet::taxonomy::IntTaxonomyFacets(env->newObject(initializeClass, &mids$, mid_init$_9888e06b, a0.this$, a1.this$, a2.this$, a3.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_FastTaxonomyFacetCounts_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FastTaxonomyFacetCounts_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FastTaxonomyFacetCounts_init_(t_FastTaxonomyFacetCounts *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_FastTaxonomyFacetCounts__methods_[] = {
            DECLARE_METHOD(t_FastTaxonomyFacetCounts, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FastTaxonomyFacetCounts, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FastTaxonomyFacetCounts, t_FastTaxonomyFacetCounts, ::org::apache::lucene::facet::taxonomy::IntTaxonomyFacets, FastTaxonomyFacetCounts, t_FastTaxonomyFacetCounts_init_, 0, 0, 0, 0, 0);

          void t_FastTaxonomyFacetCounts::install(PyObject *module)
          {
            installType(&PY_TYPE(FastTaxonomyFacetCounts), module, "FastTaxonomyFacetCounts", 0);
          }

          void t_FastTaxonomyFacetCounts::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FastTaxonomyFacetCounts).tp_dict, "class_", make_descriptor(FastTaxonomyFacetCounts::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FastTaxonomyFacetCounts).tp_dict, "wrapfn_", make_descriptor(t_FastTaxonomyFacetCounts::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FastTaxonomyFacetCounts).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FastTaxonomyFacetCounts_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FastTaxonomyFacetCounts::initializeClass, 1)))
              return NULL;
            return t_FastTaxonomyFacetCounts::wrap_Object(FastTaxonomyFacetCounts(((t_FastTaxonomyFacetCounts *) arg)->object.this$));
          }
          static PyObject *t_FastTaxonomyFacetCounts_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FastTaxonomyFacetCounts::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FastTaxonomyFacetCounts_init_(t_FastTaxonomyFacetCounts *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::facet::taxonomy::TaxonomyReader a0((jobject) NULL);
                ::org::apache::lucene::facet::FacetsConfig a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a2((jobject) NULL);
                FastTaxonomyFacetCounts object((jobject) NULL);

                if (!parseArgs(args, "kkk", ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = FastTaxonomyFacetCounts(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::facet::taxonomy::TaxonomyReader a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsConfig a2((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a3((jobject) NULL);
                FastTaxonomyFacetCounts object((jobject) NULL);

                if (!parseArgs(args, "skkk", ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = FastTaxonomyFacetCounts(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/BoostAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *BoostAttribute::class$ = NULL;
        jmethodID *BoostAttribute::mids$ = NULL;
        bool BoostAttribute::live$ = false;

        jclass BoostAttribute::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/BoostAttribute");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getBoost_54c6a176] = env->getMethodID(cls, "getBoost", "()F");
            mids$[mid_setBoost_06298cab] = env->getMethodID(cls, "setBoost", "(F)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jfloat BoostAttribute::getBoost() const
        {
          return env->callFloatMethod(this$, mids$[mid_getBoost_54c6a176]);
        }

        void BoostAttribute::setBoost(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBoost_06298cab], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_BoostAttribute_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BoostAttribute_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BoostAttribute_getBoost(t_BoostAttribute *self);
        static PyObject *t_BoostAttribute_setBoost(t_BoostAttribute *self, PyObject *arg);
        static PyObject *t_BoostAttribute_get__boost(t_BoostAttribute *self, void *data);
        static int t_BoostAttribute_set__boost(t_BoostAttribute *self, PyObject *arg, void *data);
        static PyGetSetDef t_BoostAttribute__fields_[] = {
          DECLARE_GETSET_FIELD(t_BoostAttribute, boost),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BoostAttribute__methods_[] = {
          DECLARE_METHOD(t_BoostAttribute, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BoostAttribute, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BoostAttribute, getBoost, METH_NOARGS),
          DECLARE_METHOD(t_BoostAttribute, setBoost, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BoostAttribute, t_BoostAttribute, ::org::apache::lucene::util::Attribute, BoostAttribute, abstract_init, 0, 0, t_BoostAttribute__fields_, 0, 0);

        void t_BoostAttribute::install(PyObject *module)
        {
          installType(&PY_TYPE(BoostAttribute), module, "BoostAttribute", 0);
        }

        void t_BoostAttribute::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BoostAttribute).tp_dict, "class_", make_descriptor(BoostAttribute::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BoostAttribute).tp_dict, "wrapfn_", make_descriptor(t_BoostAttribute::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BoostAttribute).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BoostAttribute_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BoostAttribute::initializeClass, 1)))
            return NULL;
          return t_BoostAttribute::wrap_Object(BoostAttribute(((t_BoostAttribute *) arg)->object.this$));
        }
        static PyObject *t_BoostAttribute_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BoostAttribute::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BoostAttribute_getBoost(t_BoostAttribute *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getBoost());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_BoostAttribute_setBoost(t_BoostAttribute *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setBoost(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setBoost", arg);
          return NULL;
        }

        static PyObject *t_BoostAttribute_get__boost(t_BoostAttribute *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getBoost());
          return PyFloat_FromDouble((double) value);
        }
        static int t_BoostAttribute_set__boost(t_BoostAttribute *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setBoost(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "boost", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/RemoveDuplicatesTokenFilterFactory.h"
#include "org/apache/lucene/analysis/miscellaneous/RemoveDuplicatesTokenFilter.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *RemoveDuplicatesTokenFilterFactory::class$ = NULL;
          jmethodID *RemoveDuplicatesTokenFilterFactory::mids$ = NULL;
          bool RemoveDuplicatesTokenFilterFactory::live$ = false;

          jclass RemoveDuplicatesTokenFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/RemoveDuplicatesTokenFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_f366c0be] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/miscellaneous/RemoveDuplicatesTokenFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RemoveDuplicatesTokenFilterFactory::RemoveDuplicatesTokenFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::miscellaneous::RemoveDuplicatesTokenFilter RemoveDuplicatesTokenFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::miscellaneous::RemoveDuplicatesTokenFilter(env->callObjectMethod(this$, mids$[mid_create_f366c0be], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_RemoveDuplicatesTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RemoveDuplicatesTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RemoveDuplicatesTokenFilterFactory_init_(t_RemoveDuplicatesTokenFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_RemoveDuplicatesTokenFilterFactory_create(t_RemoveDuplicatesTokenFilterFactory *self, PyObject *args);

          static PyMethodDef t_RemoveDuplicatesTokenFilterFactory__methods_[] = {
            DECLARE_METHOD(t_RemoveDuplicatesTokenFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RemoveDuplicatesTokenFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RemoveDuplicatesTokenFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(RemoveDuplicatesTokenFilterFactory, t_RemoveDuplicatesTokenFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, RemoveDuplicatesTokenFilterFactory, t_RemoveDuplicatesTokenFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_RemoveDuplicatesTokenFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(RemoveDuplicatesTokenFilterFactory), module, "RemoveDuplicatesTokenFilterFactory", 0);
          }

          void t_RemoveDuplicatesTokenFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(RemoveDuplicatesTokenFilterFactory).tp_dict, "class_", make_descriptor(RemoveDuplicatesTokenFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RemoveDuplicatesTokenFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_RemoveDuplicatesTokenFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RemoveDuplicatesTokenFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_RemoveDuplicatesTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RemoveDuplicatesTokenFilterFactory::initializeClass, 1)))
              return NULL;
            return t_RemoveDuplicatesTokenFilterFactory::wrap_Object(RemoveDuplicatesTokenFilterFactory(((t_RemoveDuplicatesTokenFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_RemoveDuplicatesTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RemoveDuplicatesTokenFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RemoveDuplicatesTokenFilterFactory_init_(t_RemoveDuplicatesTokenFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            RemoveDuplicatesTokenFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = RemoveDuplicatesTokenFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_RemoveDuplicatesTokenFilterFactory_create(t_RemoveDuplicatesTokenFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::miscellaneous::RemoveDuplicatesTokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::miscellaneous::t_RemoveDuplicatesTokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(RemoveDuplicatesTokenFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo.h"
#include "org/apache/lucene/search/vectorhighlight/FieldTermStack$TermInfo.h"
#include "java/lang/Class.h"
#include "java/lang/Comparable.h"
#include "java/util/Collection.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo$Toffs.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FieldPhraseList$WeightedPhraseInfo::class$ = NULL;
          jmethodID *FieldPhraseList$WeightedPhraseInfo::mids$ = NULL;
          bool FieldPhraseList$WeightedPhraseInfo::live$ = false;

          jclass FieldPhraseList$WeightedPhraseInfo::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_9bfb370d] = env->getMethodID(cls, "<init>", "(Ljava/util/Collection;)V");
              mids$[mid_init$_0ffd9fa1] = env->getMethodID(cls, "<init>", "(Ljava/util/LinkedList;F)V");
              mids$[mid_init$_d318fc21] = env->getMethodID(cls, "<init>", "(Ljava/util/LinkedList;FI)V");
              mids$[mid_compareTo_3f58e096] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo;)I");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getBoost_54c6a176] = env->getMethodID(cls, "getBoost", "()F");
              mids$[mid_getEndOffset_54c6a179] = env->getMethodID(cls, "getEndOffset", "()I");
              mids$[mid_getSeqnum_54c6a179] = env->getMethodID(cls, "getSeqnum", "()I");
              mids$[mid_getStartOffset_54c6a179] = env->getMethodID(cls, "getStartOffset", "()I");
              mids$[mid_getTermsInfos_87851566] = env->getMethodID(cls, "getTermsInfos", "()Ljava/util/List;");
              mids$[mid_getTermsOffsets_87851566] = env->getMethodID(cls, "getTermsOffsets", "()Ljava/util/List;");
              mids$[mid_getText_14c7b5c5] = env->getMethodID(cls, "getText", "()Ljava/lang/String;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_isOffsetOverlap_3f58e085] = env->getMethodID(cls, "isOffsetOverlap", "(Lorg/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo;)Z");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FieldPhraseList$WeightedPhraseInfo::FieldPhraseList$WeightedPhraseInfo(const ::java::util::Collection & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9bfb370d, a0.this$)) {}

          FieldPhraseList$WeightedPhraseInfo::FieldPhraseList$WeightedPhraseInfo(const ::java::util::LinkedList & a0, jfloat a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_0ffd9fa1, a0.this$, a1)) {}

          FieldPhraseList$WeightedPhraseInfo::FieldPhraseList$WeightedPhraseInfo(const ::java::util::LinkedList & a0, jfloat a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d318fc21, a0.this$, a1, a2)) {}

          jint FieldPhraseList$WeightedPhraseInfo::compareTo(const FieldPhraseList$WeightedPhraseInfo & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareTo_3f58e096], a0.this$);
          }

          jboolean FieldPhraseList$WeightedPhraseInfo::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jfloat FieldPhraseList$WeightedPhraseInfo::getBoost() const
          {
            return env->callFloatMethod(this$, mids$[mid_getBoost_54c6a176]);
          }

          jint FieldPhraseList$WeightedPhraseInfo::getEndOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getEndOffset_54c6a179]);
          }

          jint FieldPhraseList$WeightedPhraseInfo::getSeqnum() const
          {
            return env->callIntMethod(this$, mids$[mid_getSeqnum_54c6a179]);
          }

          jint FieldPhraseList$WeightedPhraseInfo::getStartOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getStartOffset_54c6a179]);
          }

          ::java::util::List FieldPhraseList$WeightedPhraseInfo::getTermsInfos() const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getTermsInfos_87851566]));
          }

          ::java::util::List FieldPhraseList$WeightedPhraseInfo::getTermsOffsets() const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getTermsOffsets_87851566]));
          }

          ::java::lang::String FieldPhraseList$WeightedPhraseInfo::getText() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getText_14c7b5c5]));
          }

          jint FieldPhraseList$WeightedPhraseInfo::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          jboolean FieldPhraseList$WeightedPhraseInfo::isOffsetOverlap(const FieldPhraseList$WeightedPhraseInfo & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isOffsetOverlap_3f58e085], a0.this$);
          }

          ::java::lang::String FieldPhraseList$WeightedPhraseInfo::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FieldPhraseList$WeightedPhraseInfo_init_(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_compareTo(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *arg);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_equals(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *args);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getBoost(t_FieldPhraseList$WeightedPhraseInfo *self);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getEndOffset(t_FieldPhraseList$WeightedPhraseInfo *self);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getSeqnum(t_FieldPhraseList$WeightedPhraseInfo *self);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getStartOffset(t_FieldPhraseList$WeightedPhraseInfo *self);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getTermsInfos(t_FieldPhraseList$WeightedPhraseInfo *self);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getTermsOffsets(t_FieldPhraseList$WeightedPhraseInfo *self);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getText(t_FieldPhraseList$WeightedPhraseInfo *self);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_hashCode(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *args);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_isOffsetOverlap(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *arg);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_toString(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *args);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__boost(t_FieldPhraseList$WeightedPhraseInfo *self, void *data);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__endOffset(t_FieldPhraseList$WeightedPhraseInfo *self, void *data);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__seqnum(t_FieldPhraseList$WeightedPhraseInfo *self, void *data);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__startOffset(t_FieldPhraseList$WeightedPhraseInfo *self, void *data);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__termsInfos(t_FieldPhraseList$WeightedPhraseInfo *self, void *data);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__termsOffsets(t_FieldPhraseList$WeightedPhraseInfo *self, void *data);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__text(t_FieldPhraseList$WeightedPhraseInfo *self, void *data);
          static PyGetSetDef t_FieldPhraseList$WeightedPhraseInfo__fields_[] = {
            DECLARE_GET_FIELD(t_FieldPhraseList$WeightedPhraseInfo, boost),
            DECLARE_GET_FIELD(t_FieldPhraseList$WeightedPhraseInfo, endOffset),
            DECLARE_GET_FIELD(t_FieldPhraseList$WeightedPhraseInfo, seqnum),
            DECLARE_GET_FIELD(t_FieldPhraseList$WeightedPhraseInfo, startOffset),
            DECLARE_GET_FIELD(t_FieldPhraseList$WeightedPhraseInfo, termsInfos),
            DECLARE_GET_FIELD(t_FieldPhraseList$WeightedPhraseInfo, termsOffsets),
            DECLARE_GET_FIELD(t_FieldPhraseList$WeightedPhraseInfo, text),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldPhraseList$WeightedPhraseInfo__methods_[] = {
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, compareTo, METH_O),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, equals, METH_VARARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, getBoost, METH_NOARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, getEndOffset, METH_NOARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, getSeqnum, METH_NOARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, getStartOffset, METH_NOARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, getTermsInfos, METH_NOARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, getTermsOffsets, METH_NOARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, getText, METH_NOARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, isOffsetOverlap, METH_O),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FieldPhraseList$WeightedPhraseInfo, t_FieldPhraseList$WeightedPhraseInfo, ::java::lang::Object, FieldPhraseList$WeightedPhraseInfo, t_FieldPhraseList$WeightedPhraseInfo_init_, 0, 0, t_FieldPhraseList$WeightedPhraseInfo__fields_, 0, 0);

          void t_FieldPhraseList$WeightedPhraseInfo::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldPhraseList$WeightedPhraseInfo), module, "FieldPhraseList$WeightedPhraseInfo", 0);
            PyDict_SetItemString(PY_TYPE(FieldPhraseList$WeightedPhraseInfo).tp_dict, "Toffs", make_descriptor(&PY_TYPE(FieldPhraseList$WeightedPhraseInfo$Toffs)));
          }

          void t_FieldPhraseList$WeightedPhraseInfo::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FieldPhraseList$WeightedPhraseInfo).tp_dict, "class_", make_descriptor(FieldPhraseList$WeightedPhraseInfo::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FieldPhraseList$WeightedPhraseInfo).tp_dict, "wrapfn_", make_descriptor(t_FieldPhraseList$WeightedPhraseInfo::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FieldPhraseList$WeightedPhraseInfo).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldPhraseList$WeightedPhraseInfo::initializeClass, 1)))
              return NULL;
            return t_FieldPhraseList$WeightedPhraseInfo::wrap_Object(FieldPhraseList$WeightedPhraseInfo(((t_FieldPhraseList$WeightedPhraseInfo *) arg)->object.this$));
          }
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldPhraseList$WeightedPhraseInfo::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FieldPhraseList$WeightedPhraseInfo_init_(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::util::Collection a0((jobject) NULL);
                PyTypeObject **p0;
                FieldPhraseList$WeightedPhraseInfo object((jobject) NULL);

                if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
                {
                  INT_CALL(object = FieldPhraseList$WeightedPhraseInfo(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::java::util::LinkedList a0((jobject) NULL);
                PyTypeObject **p0;
                jfloat a1;
                FieldPhraseList$WeightedPhraseInfo object((jobject) NULL);

                if (!parseArgs(args, "KF", ::java::util::LinkedList::initializeClass, &a0, &p0, ::java::util::t_LinkedList::parameters_, &a1))
                {
                  INT_CALL(object = FieldPhraseList$WeightedPhraseInfo(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::java::util::LinkedList a0((jobject) NULL);
                PyTypeObject **p0;
                jfloat a1;
                jint a2;
                FieldPhraseList$WeightedPhraseInfo object((jobject) NULL);

                if (!parseArgs(args, "KFI", ::java::util::LinkedList::initializeClass, &a0, &p0, ::java::util::t_LinkedList::parameters_, &a1, &a2))
                {
                  INT_CALL(object = FieldPhraseList$WeightedPhraseInfo(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_compareTo(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *arg)
          {
            FieldPhraseList$WeightedPhraseInfo a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", FieldPhraseList$WeightedPhraseInfo::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.compareTo(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
            return NULL;
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_equals(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FieldPhraseList$WeightedPhraseInfo), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getBoost(t_FieldPhraseList$WeightedPhraseInfo *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getBoost());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getEndOffset(t_FieldPhraseList$WeightedPhraseInfo *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEndOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getSeqnum(t_FieldPhraseList$WeightedPhraseInfo *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getSeqnum());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getStartOffset(t_FieldPhraseList$WeightedPhraseInfo *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getStartOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getTermsInfos(t_FieldPhraseList$WeightedPhraseInfo *self)
          {
            ::java::util::List result((jobject) NULL);
            OBJ_CALL(result = self->object.getTermsInfos());
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::vectorhighlight::PY_TYPE(FieldTermStack$TermInfo));
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getTermsOffsets(t_FieldPhraseList$WeightedPhraseInfo *self)
          {
            ::java::util::List result((jobject) NULL);
            OBJ_CALL(result = self->object.getTermsOffsets());
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::vectorhighlight::PY_TYPE(FieldPhraseList$WeightedPhraseInfo$Toffs));
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getText(t_FieldPhraseList$WeightedPhraseInfo *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getText());
            return j2p(result);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_hashCode(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(FieldPhraseList$WeightedPhraseInfo), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_isOffsetOverlap(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *arg)
          {
            FieldPhraseList$WeightedPhraseInfo a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "k", FieldPhraseList$WeightedPhraseInfo::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.isOffsetOverlap(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "isOffsetOverlap", arg);
            return NULL;
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_toString(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(FieldPhraseList$WeightedPhraseInfo), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__boost(t_FieldPhraseList$WeightedPhraseInfo *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getBoost());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__endOffset(t_FieldPhraseList$WeightedPhraseInfo *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEndOffset());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__seqnum(t_FieldPhraseList$WeightedPhraseInfo *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getSeqnum());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__startOffset(t_FieldPhraseList$WeightedPhraseInfo *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getStartOffset());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__termsInfos(t_FieldPhraseList$WeightedPhraseInfo *self, void *data)
          {
            ::java::util::List value((jobject) NULL);
            OBJ_CALL(value = self->object.getTermsInfos());
            return ::java::util::t_List::wrap_Object(value);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__termsOffsets(t_FieldPhraseList$WeightedPhraseInfo *self, void *data)
          {
            ::java::util::List value((jobject) NULL);
            OBJ_CALL(value = self->object.getTermsOffsets());
            return ::java::util::t_List::wrap_Object(value);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__text(t_FieldPhraseList$WeightedPhraseInfo *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getText());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/StopwordAnalyzerBase.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *StopwordAnalyzerBase::class$ = NULL;
          jmethodID *StopwordAnalyzerBase::mids$ = NULL;
          bool StopwordAnalyzerBase::live$ = false;

          jclass StopwordAnalyzerBase::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/StopwordAnalyzerBase");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getStopwordSet_d2d3505c] = env->getMethodID(cls, "getStopwordSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_loadStopwordSet_b3c09259] = env->getStaticMethodID(cls, "loadStopwordSet", "(Ljava/io/Reader;Lorg/apache/lucene/util/Version;)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_loadStopwordSet_b1bbe8e8] = env->getStaticMethodID(cls, "loadStopwordSet", "(Ljava/io/File;Lorg/apache/lucene/util/Version;)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_loadStopwordSet_3cef351b] = env->getStaticMethodID(cls, "loadStopwordSet", "(ZLjava/lang/Class;Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/analysis/util/CharArraySet;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::analysis::util::CharArraySet StopwordAnalyzerBase::getStopwordSet() const
          {
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callObjectMethod(this$, mids$[mid_getStopwordSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_StopwordAnalyzerBase_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StopwordAnalyzerBase_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StopwordAnalyzerBase_getStopwordSet(t_StopwordAnalyzerBase *self);
          static PyObject *t_StopwordAnalyzerBase_get__stopwordSet(t_StopwordAnalyzerBase *self, void *data);
          static PyGetSetDef t_StopwordAnalyzerBase__fields_[] = {
            DECLARE_GET_FIELD(t_StopwordAnalyzerBase, stopwordSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_StopwordAnalyzerBase__methods_[] = {
            DECLARE_METHOD(t_StopwordAnalyzerBase, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StopwordAnalyzerBase, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StopwordAnalyzerBase, getStopwordSet, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StopwordAnalyzerBase, t_StopwordAnalyzerBase, ::org::apache::lucene::analysis::Analyzer, StopwordAnalyzerBase, abstract_init, 0, 0, t_StopwordAnalyzerBase__fields_, 0, 0);

          void t_StopwordAnalyzerBase::install(PyObject *module)
          {
            installType(&PY_TYPE(StopwordAnalyzerBase), module, "StopwordAnalyzerBase", 0);
          }

          void t_StopwordAnalyzerBase::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StopwordAnalyzerBase).tp_dict, "class_", make_descriptor(StopwordAnalyzerBase::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StopwordAnalyzerBase).tp_dict, "wrapfn_", make_descriptor(t_StopwordAnalyzerBase::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StopwordAnalyzerBase).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StopwordAnalyzerBase_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StopwordAnalyzerBase::initializeClass, 1)))
              return NULL;
            return t_StopwordAnalyzerBase::wrap_Object(StopwordAnalyzerBase(((t_StopwordAnalyzerBase *) arg)->object.this$));
          }
          static PyObject *t_StopwordAnalyzerBase_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StopwordAnalyzerBase::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_StopwordAnalyzerBase_getStopwordSet(t_StopwordAnalyzerBase *self)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = self->object.getStopwordSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_StopwordAnalyzerBase_get__stopwordSet(t_StopwordAnalyzerBase *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getStopwordSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/FieldMaskingSpanQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/index/TermContext.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Weight.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/util/Set.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *FieldMaskingSpanQuery::class$ = NULL;
          jmethodID *FieldMaskingSpanQuery::mids$ = NULL;
          bool FieldMaskingSpanQuery::live$ = false;

          jclass FieldMaskingSpanQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/FieldMaskingSpanQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_58455a11] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanQuery;Ljava/lang/String;)V");
              mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
              mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getMaskedQuery_d3aa0332] = env->getMethodID(cls, "getMaskedQuery", "()Lorg/apache/lucene/search/spans/SpanQuery;");
              mids$[mid_getSpans_f003cb44] = env->getMethodID(cls, "getSpans", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;Ljava/util/Map;)Lorg/apache/lucene/search/spans/Spans;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FieldMaskingSpanQuery::FieldMaskingSpanQuery(const ::org::apache::lucene::search::spans::SpanQuery & a0, const ::java::lang::String & a1) : ::org::apache::lucene::search::spans::SpanQuery(env->newObject(initializeClass, &mids$, mid_init$_58455a11, a0.this$, a1.this$)) {}

          ::org::apache::lucene::search::Weight FieldMaskingSpanQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
          {
            return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
          }

          jboolean FieldMaskingSpanQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          void FieldMaskingSpanQuery::extractTerms(const ::java::util::Set & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
          }

          ::java::lang::String FieldMaskingSpanQuery::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
          }

          ::org::apache::lucene::search::spans::SpanQuery FieldMaskingSpanQuery::getMaskedQuery() const
          {
            return ::org::apache::lucene::search::spans::SpanQuery(env->callObjectMethod(this$, mids$[mid_getMaskedQuery_d3aa0332]));
          }

          ::org::apache::lucene::search::spans::Spans FieldMaskingSpanQuery::getSpans(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::util::Map & a2) const
          {
            return ::org::apache::lucene::search::spans::Spans(env->callObjectMethod(this$, mids$[mid_getSpans_f003cb44], a0.this$, a1.this$, a2.this$));
          }

          jint FieldMaskingSpanQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::org::apache::lucene::search::Query FieldMaskingSpanQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
          }

          ::java::lang::String FieldMaskingSpanQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_FieldMaskingSpanQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldMaskingSpanQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FieldMaskingSpanQuery_init_(t_FieldMaskingSpanQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FieldMaskingSpanQuery_createWeight(t_FieldMaskingSpanQuery *self, PyObject *args);
          static PyObject *t_FieldMaskingSpanQuery_equals(t_FieldMaskingSpanQuery *self, PyObject *args);
          static PyObject *t_FieldMaskingSpanQuery_extractTerms(t_FieldMaskingSpanQuery *self, PyObject *args);
          static PyObject *t_FieldMaskingSpanQuery_getField(t_FieldMaskingSpanQuery *self, PyObject *args);
          static PyObject *t_FieldMaskingSpanQuery_getMaskedQuery(t_FieldMaskingSpanQuery *self);
          static PyObject *t_FieldMaskingSpanQuery_getSpans(t_FieldMaskingSpanQuery *self, PyObject *args);
          static PyObject *t_FieldMaskingSpanQuery_hashCode(t_FieldMaskingSpanQuery *self, PyObject *args);
          static PyObject *t_FieldMaskingSpanQuery_rewrite(t_FieldMaskingSpanQuery *self, PyObject *args);
          static PyObject *t_FieldMaskingSpanQuery_toString(t_FieldMaskingSpanQuery *self, PyObject *args);
          static PyObject *t_FieldMaskingSpanQuery_get__field(t_FieldMaskingSpanQuery *self, void *data);
          static PyObject *t_FieldMaskingSpanQuery_get__maskedQuery(t_FieldMaskingSpanQuery *self, void *data);
          static PyGetSetDef t_FieldMaskingSpanQuery__fields_[] = {
            DECLARE_GET_FIELD(t_FieldMaskingSpanQuery, field),
            DECLARE_GET_FIELD(t_FieldMaskingSpanQuery, maskedQuery),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldMaskingSpanQuery__methods_[] = {
            DECLARE_METHOD(t_FieldMaskingSpanQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldMaskingSpanQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldMaskingSpanQuery, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_FieldMaskingSpanQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_FieldMaskingSpanQuery, extractTerms, METH_VARARGS),
            DECLARE_METHOD(t_FieldMaskingSpanQuery, getField, METH_VARARGS),
            DECLARE_METHOD(t_FieldMaskingSpanQuery, getMaskedQuery, METH_NOARGS),
            DECLARE_METHOD(t_FieldMaskingSpanQuery, getSpans, METH_VARARGS),
            DECLARE_METHOD(t_FieldMaskingSpanQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_FieldMaskingSpanQuery, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_FieldMaskingSpanQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FieldMaskingSpanQuery, t_FieldMaskingSpanQuery, ::org::apache::lucene::search::spans::SpanQuery, FieldMaskingSpanQuery, t_FieldMaskingSpanQuery_init_, 0, 0, t_FieldMaskingSpanQuery__fields_, 0, 0);

          void t_FieldMaskingSpanQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldMaskingSpanQuery), module, "FieldMaskingSpanQuery", 0);
          }

          void t_FieldMaskingSpanQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FieldMaskingSpanQuery).tp_dict, "class_", make_descriptor(FieldMaskingSpanQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FieldMaskingSpanQuery).tp_dict, "wrapfn_", make_descriptor(t_FieldMaskingSpanQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FieldMaskingSpanQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldMaskingSpanQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldMaskingSpanQuery::initializeClass, 1)))
              return NULL;
            return t_FieldMaskingSpanQuery::wrap_Object(FieldMaskingSpanQuery(((t_FieldMaskingSpanQuery *) arg)->object.this$));
          }
          static PyObject *t_FieldMaskingSpanQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldMaskingSpanQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FieldMaskingSpanQuery_init_(t_FieldMaskingSpanQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spans::SpanQuery a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            FieldMaskingSpanQuery object((jobject) NULL);

            if (!parseArgs(args, "ks", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0, &a1))
            {
              INT_CALL(object = FieldMaskingSpanQuery(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FieldMaskingSpanQuery_createWeight(t_FieldMaskingSpanQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::search::Weight result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.createWeight(a0));
              return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FieldMaskingSpanQuery), (PyObject *) self, "createWeight", args, 2);
          }

          static PyObject *t_FieldMaskingSpanQuery_equals(t_FieldMaskingSpanQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FieldMaskingSpanQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_FieldMaskingSpanQuery_extractTerms(t_FieldMaskingSpanQuery *self, PyObject *args)
          {
            ::java::util::Set a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(self->object.extractTerms(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(FieldMaskingSpanQuery), (PyObject *) self, "extractTerms", args, 2);
          }

          static PyObject *t_FieldMaskingSpanQuery_getField(t_FieldMaskingSpanQuery *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getField());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(FieldMaskingSpanQuery), (PyObject *) self, "getField", args, 2);
          }

          static PyObject *t_FieldMaskingSpanQuery_getMaskedQuery(t_FieldMaskingSpanQuery *self)
          {
            ::org::apache::lucene::search::spans::SpanQuery result((jobject) NULL);
            OBJ_CALL(result = self->object.getMaskedQuery());
            return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(result);
          }

          static PyObject *t_FieldMaskingSpanQuery_getSpans(t_FieldMaskingSpanQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::util::Bits a1((jobject) NULL);
            ::java::util::Map a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::search::spans::Spans result((jobject) NULL);

            if (!parseArgs(args, "kkK", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(result = self->object.getSpans(a0, a1, a2));
              return ::org::apache::lucene::search::spans::t_Spans::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FieldMaskingSpanQuery), (PyObject *) self, "getSpans", args, 2);
          }

          static PyObject *t_FieldMaskingSpanQuery_hashCode(t_FieldMaskingSpanQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(FieldMaskingSpanQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_FieldMaskingSpanQuery_rewrite(t_FieldMaskingSpanQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FieldMaskingSpanQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_FieldMaskingSpanQuery_toString(t_FieldMaskingSpanQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(FieldMaskingSpanQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FieldMaskingSpanQuery_get__field(t_FieldMaskingSpanQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }

          static PyObject *t_FieldMaskingSpanQuery_get__maskedQuery(t_FieldMaskingSpanQuery *self, void *data)
          {
            ::org::apache::lucene::search::spans::SpanQuery value((jobject) NULL);
            OBJ_CALL(value = self->object.getMaskedQuery());
            return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/KeepWordFilterFactory.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *KeepWordFilterFactory::class$ = NULL;
          jmethodID *KeepWordFilterFactory::mids$ = NULL;
          bool KeepWordFilterFactory::live$ = false;

          jclass KeepWordFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/KeepWordFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getWords_d2d3505c] = env->getMethodID(cls, "getWords", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");
              mids$[mid_isEnablePositionIncrements_54c6a16a] = env->getMethodID(cls, "isEnablePositionIncrements", "()Z");
              mids$[mid_isIgnoreCase_54c6a16a] = env->getMethodID(cls, "isIgnoreCase", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KeepWordFilterFactory::KeepWordFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream KeepWordFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          ::org::apache::lucene::analysis::util::CharArraySet KeepWordFilterFactory::getWords() const
          {
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callObjectMethod(this$, mids$[mid_getWords_d2d3505c]));
          }

          void KeepWordFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }

          jboolean KeepWordFilterFactory::isEnablePositionIncrements() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isEnablePositionIncrements_54c6a16a]);
          }

          jboolean KeepWordFilterFactory::isIgnoreCase() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isIgnoreCase_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_KeepWordFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeepWordFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KeepWordFilterFactory_init_(t_KeepWordFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KeepWordFilterFactory_create(t_KeepWordFilterFactory *self, PyObject *args);
          static PyObject *t_KeepWordFilterFactory_getWords(t_KeepWordFilterFactory *self);
          static PyObject *t_KeepWordFilterFactory_inform(t_KeepWordFilterFactory *self, PyObject *arg);
          static PyObject *t_KeepWordFilterFactory_isEnablePositionIncrements(t_KeepWordFilterFactory *self);
          static PyObject *t_KeepWordFilterFactory_isIgnoreCase(t_KeepWordFilterFactory *self);
          static PyObject *t_KeepWordFilterFactory_get__enablePositionIncrements(t_KeepWordFilterFactory *self, void *data);
          static PyObject *t_KeepWordFilterFactory_get__ignoreCase(t_KeepWordFilterFactory *self, void *data);
          static PyObject *t_KeepWordFilterFactory_get__words(t_KeepWordFilterFactory *self, void *data);
          static PyGetSetDef t_KeepWordFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_KeepWordFilterFactory, enablePositionIncrements),
            DECLARE_GET_FIELD(t_KeepWordFilterFactory, ignoreCase),
            DECLARE_GET_FIELD(t_KeepWordFilterFactory, words),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_KeepWordFilterFactory__methods_[] = {
            DECLARE_METHOD(t_KeepWordFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeepWordFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeepWordFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_KeepWordFilterFactory, getWords, METH_NOARGS),
            DECLARE_METHOD(t_KeepWordFilterFactory, inform, METH_O),
            DECLARE_METHOD(t_KeepWordFilterFactory, isEnablePositionIncrements, METH_NOARGS),
            DECLARE_METHOD(t_KeepWordFilterFactory, isIgnoreCase, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(KeepWordFilterFactory, t_KeepWordFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, KeepWordFilterFactory, t_KeepWordFilterFactory_init_, 0, 0, t_KeepWordFilterFactory__fields_, 0, 0);

          void t_KeepWordFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(KeepWordFilterFactory), module, "KeepWordFilterFactory", 0);
          }

          void t_KeepWordFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(KeepWordFilterFactory).tp_dict, "class_", make_descriptor(KeepWordFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(KeepWordFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_KeepWordFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(KeepWordFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KeepWordFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KeepWordFilterFactory::initializeClass, 1)))
              return NULL;
            return t_KeepWordFilterFactory::wrap_Object(KeepWordFilterFactory(((t_KeepWordFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_KeepWordFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KeepWordFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KeepWordFilterFactory_init_(t_KeepWordFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            KeepWordFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = KeepWordFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_KeepWordFilterFactory_create(t_KeepWordFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(KeepWordFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_KeepWordFilterFactory_getWords(t_KeepWordFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = self->object.getWords());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_KeepWordFilterFactory_inform(t_KeepWordFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }

          static PyObject *t_KeepWordFilterFactory_isEnablePositionIncrements(t_KeepWordFilterFactory *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isEnablePositionIncrements());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_KeepWordFilterFactory_isIgnoreCase(t_KeepWordFilterFactory *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isIgnoreCase());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_KeepWordFilterFactory_get__enablePositionIncrements(t_KeepWordFilterFactory *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isEnablePositionIncrements());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_KeepWordFilterFactory_get__ignoreCase(t_KeepWordFilterFactory *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isIgnoreCase());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_KeepWordFilterFactory_get__words(t_KeepWordFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getWords());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *ProximityQueryNode$Type::class$ = NULL;
              jmethodID *ProximityQueryNode$Type::mids$ = NULL;
              bool ProximityQueryNode$Type::live$ = false;
              ProximityQueryNode$Type *ProximityQueryNode$Type::NUMBER = NULL;
              ProximityQueryNode$Type *ProximityQueryNode$Type::PARAGRAPH = NULL;
              ProximityQueryNode$Type *ProximityQueryNode$Type::SENTENCE = NULL;

              jclass ProximityQueryNode$Type::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_valueOf_e143b857] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type;");
                  mids$[mid_values_83915b61] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  cls = (jclass) class$->this$;

                  NUMBER = new ProximityQueryNode$Type(env->getStaticObjectField(cls, "NUMBER", "Lorg/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type;"));
                  PARAGRAPH = new ProximityQueryNode$Type(env->getStaticObjectField(cls, "PARAGRAPH", "Lorg/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type;"));
                  SENTENCE = new ProximityQueryNode$Type(env->getStaticObjectField(cls, "SENTENCE", "Lorg/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ProximityQueryNode$Type ProximityQueryNode$Type::valueOf(const ::java::lang::String & a0)
              {
                jclass cls = env->getClass(initializeClass);
                return ProximityQueryNode$Type(env->callStaticObjectMethod(cls, mids$[mid_valueOf_e143b857], a0.this$));
              }

              JArray< ProximityQueryNode$Type > ProximityQueryNode$Type::values()
              {
                jclass cls = env->getClass(initializeClass);
                return JArray< ProximityQueryNode$Type >(env->callStaticObjectMethod(cls, mids$[mid_values_83915b61]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_ProximityQueryNode$Type_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ProximityQueryNode$Type_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ProximityQueryNode$Type_of_(t_ProximityQueryNode$Type *self, PyObject *args);
              static PyObject *t_ProximityQueryNode$Type_valueOf(PyTypeObject *type, PyObject *args);
              static PyObject *t_ProximityQueryNode$Type_values(PyTypeObject *type);
              static PyObject *t_ProximityQueryNode$Type_get__parameters_(t_ProximityQueryNode$Type *self, void *data);
              static PyGetSetDef t_ProximityQueryNode$Type__fields_[] = {
                DECLARE_GET_FIELD(t_ProximityQueryNode$Type, parameters_),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_ProximityQueryNode$Type__methods_[] = {
                DECLARE_METHOD(t_ProximityQueryNode$Type, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ProximityQueryNode$Type, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ProximityQueryNode$Type, of_, METH_VARARGS),
                DECLARE_METHOD(t_ProximityQueryNode$Type, valueOf, METH_VARARGS | METH_CLASS),
                DECLARE_METHOD(t_ProximityQueryNode$Type, values, METH_NOARGS | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(ProximityQueryNode$Type, t_ProximityQueryNode$Type, ::java::lang::Enum, ProximityQueryNode$Type, abstract_init, 0, 0, t_ProximityQueryNode$Type__fields_, 0, 0);
              PyObject *t_ProximityQueryNode$Type::wrap_Object(const ProximityQueryNode$Type& object, PyTypeObject *p0)
              {
                PyObject *obj = t_ProximityQueryNode$Type::wrap_Object(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_ProximityQueryNode$Type *self = (t_ProximityQueryNode$Type *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              PyObject *t_ProximityQueryNode$Type::wrap_jobject(const jobject& object, PyTypeObject *p0)
              {
                PyObject *obj = t_ProximityQueryNode$Type::wrap_jobject(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_ProximityQueryNode$Type *self = (t_ProximityQueryNode$Type *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              void t_ProximityQueryNode$Type::install(PyObject *module)
              {
                installType(&PY_TYPE(ProximityQueryNode$Type), module, "ProximityQueryNode$Type", 0);
              }

              void t_ProximityQueryNode$Type::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(ProximityQueryNode$Type).tp_dict, "class_", make_descriptor(ProximityQueryNode$Type::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(ProximityQueryNode$Type).tp_dict, "wrapfn_", make_descriptor(t_ProximityQueryNode$Type::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(ProximityQueryNode$Type).tp_dict, "boxfn_", make_descriptor(boxObject));
                env->getClass(ProximityQueryNode$Type::initializeClass);
                PyDict_SetItemString(PY_TYPE(ProximityQueryNode$Type).tp_dict, "NUMBER", make_descriptor(t_ProximityQueryNode$Type::wrap_Object(*ProximityQueryNode$Type::NUMBER)));
                PyDict_SetItemString(PY_TYPE(ProximityQueryNode$Type).tp_dict, "PARAGRAPH", make_descriptor(t_ProximityQueryNode$Type::wrap_Object(*ProximityQueryNode$Type::PARAGRAPH)));
                PyDict_SetItemString(PY_TYPE(ProximityQueryNode$Type).tp_dict, "SENTENCE", make_descriptor(t_ProximityQueryNode$Type::wrap_Object(*ProximityQueryNode$Type::SENTENCE)));
              }

              static PyObject *t_ProximityQueryNode$Type_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, ProximityQueryNode$Type::initializeClass, 1)))
                  return NULL;
                return t_ProximityQueryNode$Type::wrap_Object(ProximityQueryNode$Type(((t_ProximityQueryNode$Type *) arg)->object.this$));
              }
              static PyObject *t_ProximityQueryNode$Type_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, ProximityQueryNode$Type::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_ProximityQueryNode$Type_of_(t_ProximityQueryNode$Type *self, PyObject *args)
              {
                if (!parseArg(args, "T", 1, &(self->parameters)))
                  Py_RETURN_SELF;
                return PyErr_SetArgsError((PyObject *) self, "of_", args);
              }

              static PyObject *t_ProximityQueryNode$Type_valueOf(PyTypeObject *type, PyObject *args)
              {
                ::java::lang::String a0((jobject) NULL);
                ProximityQueryNode$Type result((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type::valueOf(a0));
                  return t_ProximityQueryNode$Type::wrap_Object(result);
                }

                return callSuper(type, "valueOf", args, 2);
              }

              static PyObject *t_ProximityQueryNode$Type_values(PyTypeObject *type)
              {
                JArray< ProximityQueryNode$Type > result((jobject) NULL);
                OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type::values());
                return JArray<jobject>(result.this$).wrap(t_ProximityQueryNode$Type::wrap_jobject);
              }
              static PyObject *t_ProximityQueryNode$Type_get__parameters_(t_ProximityQueryNode$Type *self, void *data)
              {
                return typeParameters(self->parameters, sizeof(self->parameters));
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/SortedInputIterator.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *SortedInputIterator::class$ = NULL;
          jmethodID *SortedInputIterator::mids$ = NULL;
          bool SortedInputIterator::live$ = false;

          jclass SortedInputIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/SortedInputIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_1754a234] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/suggest/InputIterator;)V");
              mids$[mid_init$_a76164a7] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/suggest/InputIterator;Ljava/util/Comparator;)V");
              mids$[mid_contexts_03e99967] = env->getMethodID(cls, "contexts", "()Ljava/util/Set;");
              mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
              mids$[mid_hasContexts_54c6a16a] = env->getMethodID(cls, "hasContexts", "()Z");
              mids$[mid_hasPayloads_54c6a16a] = env->getMethodID(cls, "hasPayloads", "()Z");
              mids$[mid_next_4ae19461] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_payload_4ae19461] = env->getMethodID(cls, "payload", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_weight_54c6a17a] = env->getMethodID(cls, "weight", "()J");
              mids$[mid_decode_b368866d] = env->getMethodID(cls, "decode", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/store/ByteArrayDataInput;)J");
              mids$[mid_encode_f3a12df5] = env->getMethodID(cls, "encode", "(Lorg/apache/lucene/util/OfflineSorter$ByteSequencesWriter;Lorg/apache/lucene/store/ByteArrayDataOutput;[BLorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;Ljava/util/Set;J)V");
              mids$[mid_decodeContexts_8a3417ec] = env->getMethodID(cls, "decodeContexts", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/store/ByteArrayDataInput;)Ljava/util/Set;");
              mids$[mid_decodePayload_62b5ed46] = env->getMethodID(cls, "decodePayload", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/store/ByteArrayDataInput;)Lorg/apache/lucene/util/BytesRef;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SortedInputIterator::SortedInputIterator(const ::org::apache::lucene::search::suggest::InputIterator & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_1754a234, a0.this$)) {}

          SortedInputIterator::SortedInputIterator(const ::org::apache::lucene::search::suggest::InputIterator & a0, const ::java::util::Comparator & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a76164a7, a0.this$, a1.this$)) {}

          ::java::util::Set SortedInputIterator::contexts() const
          {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_contexts_03e99967]));
          }

          ::java::util::Comparator SortedInputIterator::getComparator() const
          {
            return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
          }

          jboolean SortedInputIterator::hasContexts() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasContexts_54c6a16a]);
          }

          jboolean SortedInputIterator::hasPayloads() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasPayloads_54c6a16a]);
          }

          ::org::apache::lucene::util::BytesRef SortedInputIterator::next() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_4ae19461]));
          }

          ::org::apache::lucene::util::BytesRef SortedInputIterator::payload() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_payload_4ae19461]));
          }

          jlong SortedInputIterator::weight() const
          {
            return env->callLongMethod(this$, mids$[mid_weight_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_SortedInputIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SortedInputIterator_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SortedInputIterator_init_(t_SortedInputIterator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SortedInputIterator_contexts(t_SortedInputIterator *self);
          static PyObject *t_SortedInputIterator_getComparator(t_SortedInputIterator *self);
          static PyObject *t_SortedInputIterator_hasContexts(t_SortedInputIterator *self);
          static PyObject *t_SortedInputIterator_hasPayloads(t_SortedInputIterator *self);
          static PyObject *t_SortedInputIterator_next(t_SortedInputIterator *self);
          static PyObject *t_SortedInputIterator_payload(t_SortedInputIterator *self);
          static PyObject *t_SortedInputIterator_weight(t_SortedInputIterator *self);
          static PyObject *t_SortedInputIterator_get__comparator(t_SortedInputIterator *self, void *data);
          static PyGetSetDef t_SortedInputIterator__fields_[] = {
            DECLARE_GET_FIELD(t_SortedInputIterator, comparator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SortedInputIterator__methods_[] = {
            DECLARE_METHOD(t_SortedInputIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedInputIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedInputIterator, contexts, METH_NOARGS),
            DECLARE_METHOD(t_SortedInputIterator, getComparator, METH_NOARGS),
            DECLARE_METHOD(t_SortedInputIterator, hasContexts, METH_NOARGS),
            DECLARE_METHOD(t_SortedInputIterator, hasPayloads, METH_NOARGS),
            DECLARE_METHOD(t_SortedInputIterator, next, METH_NOARGS),
            DECLARE_METHOD(t_SortedInputIterator, payload, METH_NOARGS),
            DECLARE_METHOD(t_SortedInputIterator, weight, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SortedInputIterator, t_SortedInputIterator, ::java::lang::Object, SortedInputIterator, t_SortedInputIterator_init_, PyObject_SelfIter, ((PyObject *(*)(t_SortedInputIterator *)) get_next< t_SortedInputIterator,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >), t_SortedInputIterator__fields_, 0, 0);

          void t_SortedInputIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(SortedInputIterator), module, "SortedInputIterator", 0);
          }

          void t_SortedInputIterator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SortedInputIterator).tp_dict, "class_", make_descriptor(SortedInputIterator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SortedInputIterator).tp_dict, "wrapfn_", make_descriptor(t_SortedInputIterator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SortedInputIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SortedInputIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SortedInputIterator::initializeClass, 1)))
              return NULL;
            return t_SortedInputIterator::wrap_Object(SortedInputIterator(((t_SortedInputIterator *) arg)->object.this$));
          }
          static PyObject *t_SortedInputIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SortedInputIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SortedInputIterator_init_(t_SortedInputIterator *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);
                SortedInputIterator object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0))
                {
                  INT_CALL(object = SortedInputIterator(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);
                ::java::util::Comparator a1((jobject) NULL);
                PyTypeObject **p1;
                SortedInputIterator object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, ::java::util::Comparator::initializeClass, &a0, &a1, &p1, ::java::util::t_Comparator::parameters_))
                {
                  INT_CALL(object = SortedInputIterator(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SortedInputIterator_contexts(t_SortedInputIterator *self)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = self->object.contexts());
            return ::java::util::t_Set::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          static PyObject *t_SortedInputIterator_getComparator(t_SortedInputIterator *self)
          {
            ::java::util::Comparator result((jobject) NULL);
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          static PyObject *t_SortedInputIterator_hasContexts(t_SortedInputIterator *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.hasContexts());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_SortedInputIterator_hasPayloads(t_SortedInputIterator *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.hasPayloads());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_SortedInputIterator_next(t_SortedInputIterator *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_SortedInputIterator_payload(t_SortedInputIterator *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.payload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_SortedInputIterator_weight(t_SortedInputIterator *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.weight());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_SortedInputIterator_get__comparator(t_SortedInputIterator *self, void *data)
          {
            ::java::util::Comparator value((jobject) NULL);
            OBJ_CALL(value = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/ByteArrayDataOutput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *ByteArrayDataOutput::class$ = NULL;
        jmethodID *ByteArrayDataOutput::mids$ = NULL;
        bool ByteArrayDataOutput::live$ = false;

        jclass ByteArrayDataOutput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/ByteArrayDataOutput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_49b4f12b] = env->getMethodID(cls, "<init>", "([B)V");
            mids$[mid_init$_86f4435f] = env->getMethodID(cls, "<init>", "([BII)V");
            mids$[mid_getPosition_54c6a179] = env->getMethodID(cls, "getPosition", "()I");
            mids$[mid_reset_49b4f12b] = env->getMethodID(cls, "reset", "([B)V");
            mids$[mid_reset_86f4435f] = env->getMethodID(cls, "reset", "([BII)V");
            mids$[mid_writeByte_b2271687] = env->getMethodID(cls, "writeByte", "(B)V");
            mids$[mid_writeBytes_86f4435f] = env->getMethodID(cls, "writeBytes", "([BII)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ByteArrayDataOutput::ByteArrayDataOutput() : ::org::apache::lucene::store::DataOutput(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ByteArrayDataOutput::ByteArrayDataOutput(const JArray< jbyte > & a0) : ::org::apache::lucene::store::DataOutput(env->newObject(initializeClass, &mids$, mid_init$_49b4f12b, a0.this$)) {}

        ByteArrayDataOutput::ByteArrayDataOutput(const JArray< jbyte > & a0, jint a1, jint a2) : ::org::apache::lucene::store::DataOutput(env->newObject(initializeClass, &mids$, mid_init$_86f4435f, a0.this$, a1, a2)) {}

        jint ByteArrayDataOutput::getPosition() const
        {
          return env->callIntMethod(this$, mids$[mid_getPosition_54c6a179]);
        }

        void ByteArrayDataOutput::reset(const JArray< jbyte > & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_reset_49b4f12b], a0.this$);
        }

        void ByteArrayDataOutput::reset(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_reset_86f4435f], a0.this$, a1, a2);
        }

        void ByteArrayDataOutput::writeByte(jbyte a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeByte_b2271687], a0);
        }

        void ByteArrayDataOutput::writeBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_writeBytes_86f4435f], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_ByteArrayDataOutput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ByteArrayDataOutput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ByteArrayDataOutput_init_(t_ByteArrayDataOutput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ByteArrayDataOutput_getPosition(t_ByteArrayDataOutput *self);
        static PyObject *t_ByteArrayDataOutput_reset(t_ByteArrayDataOutput *self, PyObject *args);
        static PyObject *t_ByteArrayDataOutput_writeByte(t_ByteArrayDataOutput *self, PyObject *args);
        static PyObject *t_ByteArrayDataOutput_writeBytes(t_ByteArrayDataOutput *self, PyObject *args);
        static PyObject *t_ByteArrayDataOutput_get__position(t_ByteArrayDataOutput *self, void *data);
        static PyGetSetDef t_ByteArrayDataOutput__fields_[] = {
          DECLARE_GET_FIELD(t_ByteArrayDataOutput, position),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ByteArrayDataOutput__methods_[] = {
          DECLARE_METHOD(t_ByteArrayDataOutput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteArrayDataOutput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteArrayDataOutput, getPosition, METH_NOARGS),
          DECLARE_METHOD(t_ByteArrayDataOutput, reset, METH_VARARGS),
          DECLARE_METHOD(t_ByteArrayDataOutput, writeByte, METH_VARARGS),
          DECLARE_METHOD(t_ByteArrayDataOutput, writeBytes, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ByteArrayDataOutput, t_ByteArrayDataOutput, ::org::apache::lucene::store::DataOutput, ByteArrayDataOutput, t_ByteArrayDataOutput_init_, 0, 0, t_ByteArrayDataOutput__fields_, 0, 0);

        void t_ByteArrayDataOutput::install(PyObject *module)
        {
          installType(&PY_TYPE(ByteArrayDataOutput), module, "ByteArrayDataOutput", 0);
        }

        void t_ByteArrayDataOutput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ByteArrayDataOutput).tp_dict, "class_", make_descriptor(ByteArrayDataOutput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ByteArrayDataOutput).tp_dict, "wrapfn_", make_descriptor(t_ByteArrayDataOutput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ByteArrayDataOutput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ByteArrayDataOutput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ByteArrayDataOutput::initializeClass, 1)))
            return NULL;
          return t_ByteArrayDataOutput::wrap_Object(ByteArrayDataOutput(((t_ByteArrayDataOutput *) arg)->object.this$));
        }
        static PyObject *t_ByteArrayDataOutput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ByteArrayDataOutput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ByteArrayDataOutput_init_(t_ByteArrayDataOutput *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ByteArrayDataOutput object((jobject) NULL);

              INT_CALL(object = ByteArrayDataOutput());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              JArray< jbyte > a0((jobject) NULL);
              ByteArrayDataOutput object((jobject) NULL);

              if (!parseArgs(args, "[B", &a0))
              {
                INT_CALL(object = ByteArrayDataOutput(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              ByteArrayDataOutput object((jobject) NULL);

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                INT_CALL(object = ByteArrayDataOutput(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ByteArrayDataOutput_getPosition(t_ByteArrayDataOutput *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getPosition());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_ByteArrayDataOutput_reset(t_ByteArrayDataOutput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< jbyte > a0((jobject) NULL);

              if (!parseArgs(args, "[B", &a0))
              {
                OBJ_CALL(self->object.reset(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.reset(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "reset", args);
          return NULL;
        }

        static PyObject *t_ByteArrayDataOutput_writeByte(t_ByteArrayDataOutput *self, PyObject *args)
        {
          jbyte a0;

          if (!parseArgs(args, "B", &a0))
          {
            OBJ_CALL(self->object.writeByte(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ByteArrayDataOutput), (PyObject *) self, "writeByte", args, 2);
        }

        static PyObject *t_ByteArrayDataOutput_writeBytes(t_ByteArrayDataOutput *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.writeBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ByteArrayDataOutput), (PyObject *) self, "writeBytes", args, 2);
        }

        static PyObject *t_ByteArrayDataOutput_get__position(t_ByteArrayDataOutput *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getPosition());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/ConstValueSource.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Number.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *ConstValueSource::class$ = NULL;
            jmethodID *ConstValueSource::mids$ = NULL;
            bool ConstValueSource::live$ = false;

            jclass ConstValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/ConstValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_06298cab] = env->getMethodID(cls, "<init>", "(F)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getBool_54c6a16a] = env->getMethodID(cls, "getBool", "()Z");
                mids$[mid_getDouble_54c6a174] = env->getMethodID(cls, "getDouble", "()D");
                mids$[mid_getFloat_54c6a176] = env->getMethodID(cls, "getFloat", "()F");
                mids$[mid_getInt_54c6a179] = env->getMethodID(cls, "getInt", "()I");
                mids$[mid_getLong_54c6a17a] = env->getMethodID(cls, "getLong", "()J");
                mids$[mid_getNumber_ee47e3e1] = env->getMethodID(cls, "getNumber", "()Ljava/lang/Number;");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ConstValueSource::ConstValueSource(jfloat a0) : ::org::apache::lucene::queries::function::valuesource::ConstNumberSource(env->newObject(initializeClass, &mids$, mid_init$_06298cab, a0)) {}

            ::java::lang::String ConstValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean ConstValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            jboolean ConstValueSource::getBool() const
            {
              return env->callBooleanMethod(this$, mids$[mid_getBool_54c6a16a]);
            }

            jdouble ConstValueSource::getDouble() const
            {
              return env->callDoubleMethod(this$, mids$[mid_getDouble_54c6a174]);
            }

            jfloat ConstValueSource::getFloat() const
            {
              return env->callFloatMethod(this$, mids$[mid_getFloat_54c6a176]);
            }

            jint ConstValueSource::getInt() const
            {
              return env->callIntMethod(this$, mids$[mid_getInt_54c6a179]);
            }

            jlong ConstValueSource::getLong() const
            {
              return env->callLongMethod(this$, mids$[mid_getLong_54c6a17a]);
            }

            ::java::lang::Number ConstValueSource::getNumber() const
            {
              return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getNumber_ee47e3e1]));
            }

            ::org::apache::lucene::queries::function::FunctionValues ConstValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint ConstValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_ConstValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ConstValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ConstValueSource_init_(t_ConstValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ConstValueSource_description(t_ConstValueSource *self, PyObject *args);
            static PyObject *t_ConstValueSource_equals(t_ConstValueSource *self, PyObject *args);
            static PyObject *t_ConstValueSource_getBool(t_ConstValueSource *self, PyObject *args);
            static PyObject *t_ConstValueSource_getDouble(t_ConstValueSource *self, PyObject *args);
            static PyObject *t_ConstValueSource_getFloat(t_ConstValueSource *self, PyObject *args);
            static PyObject *t_ConstValueSource_getInt(t_ConstValueSource *self, PyObject *args);
            static PyObject *t_ConstValueSource_getLong(t_ConstValueSource *self, PyObject *args);
            static PyObject *t_ConstValueSource_getNumber(t_ConstValueSource *self, PyObject *args);
            static PyObject *t_ConstValueSource_getValues(t_ConstValueSource *self, PyObject *args);
            static PyObject *t_ConstValueSource_hashCode(t_ConstValueSource *self, PyObject *args);
            static PyObject *t_ConstValueSource_get__bool(t_ConstValueSource *self, void *data);
            static PyObject *t_ConstValueSource_get__double(t_ConstValueSource *self, void *data);
            static PyObject *t_ConstValueSource_get__float(t_ConstValueSource *self, void *data);
            static PyObject *t_ConstValueSource_get__int(t_ConstValueSource *self, void *data);
            static PyObject *t_ConstValueSource_get__long(t_ConstValueSource *self, void *data);
            static PyObject *t_ConstValueSource_get__number(t_ConstValueSource *self, void *data);
            static PyGetSetDef t_ConstValueSource__fields_[] = {
              DECLARE_GET_FIELD(t_ConstValueSource, bool),
              DECLARE_GET_FIELD(t_ConstValueSource, double),
              DECLARE_GET_FIELD(t_ConstValueSource, float),
              DECLARE_GET_FIELD(t_ConstValueSource, int),
              DECLARE_GET_FIELD(t_ConstValueSource, long),
              DECLARE_GET_FIELD(t_ConstValueSource, number),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_ConstValueSource__methods_[] = {
              DECLARE_METHOD(t_ConstValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ConstValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ConstValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_ConstValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_ConstValueSource, getBool, METH_VARARGS),
              DECLARE_METHOD(t_ConstValueSource, getDouble, METH_VARARGS),
              DECLARE_METHOD(t_ConstValueSource, getFloat, METH_VARARGS),
              DECLARE_METHOD(t_ConstValueSource, getInt, METH_VARARGS),
              DECLARE_METHOD(t_ConstValueSource, getLong, METH_VARARGS),
              DECLARE_METHOD(t_ConstValueSource, getNumber, METH_VARARGS),
              DECLARE_METHOD(t_ConstValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_ConstValueSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(ConstValueSource, t_ConstValueSource, ::org::apache::lucene::queries::function::valuesource::ConstNumberSource, ConstValueSource, t_ConstValueSource_init_, 0, 0, t_ConstValueSource__fields_, 0, 0);

            void t_ConstValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(ConstValueSource), module, "ConstValueSource", 0);
            }

            void t_ConstValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(ConstValueSource).tp_dict, "class_", make_descriptor(ConstValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(ConstValueSource).tp_dict, "wrapfn_", make_descriptor(t_ConstValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(ConstValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ConstValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ConstValueSource::initializeClass, 1)))
                return NULL;
              return t_ConstValueSource::wrap_Object(ConstValueSource(((t_ConstValueSource *) arg)->object.this$));
            }
            static PyObject *t_ConstValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ConstValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ConstValueSource_init_(t_ConstValueSource *self, PyObject *args, PyObject *kwds)
            {
              jfloat a0;
              ConstValueSource object((jobject) NULL);

              if (!parseArgs(args, "F", &a0))
              {
                INT_CALL(object = ConstValueSource(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_ConstValueSource_description(t_ConstValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(ConstValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_ConstValueSource_equals(t_ConstValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(ConstValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_ConstValueSource_getBool(t_ConstValueSource *self, PyObject *args)
            {
              jboolean result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getBool());
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(ConstValueSource), (PyObject *) self, "getBool", args, 2);
            }

            static PyObject *t_ConstValueSource_getDouble(t_ConstValueSource *self, PyObject *args)
            {
              jdouble result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getDouble());
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(&PY_TYPE(ConstValueSource), (PyObject *) self, "getDouble", args, 2);
            }

            static PyObject *t_ConstValueSource_getFloat(t_ConstValueSource *self, PyObject *args)
            {
              jfloat result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getFloat());
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(&PY_TYPE(ConstValueSource), (PyObject *) self, "getFloat", args, 2);
            }

            static PyObject *t_ConstValueSource_getInt(t_ConstValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getInt());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(ConstValueSource), (PyObject *) self, "getInt", args, 2);
            }

            static PyObject *t_ConstValueSource_getLong(t_ConstValueSource *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getLong());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(ConstValueSource), (PyObject *) self, "getLong", args, 2);
            }

            static PyObject *t_ConstValueSource_getNumber(t_ConstValueSource *self, PyObject *args)
            {
              ::java::lang::Number result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getNumber());
                return ::java::lang::t_Number::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(ConstValueSource), (PyObject *) self, "getNumber", args, 2);
            }

            static PyObject *t_ConstValueSource_getValues(t_ConstValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(ConstValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_ConstValueSource_hashCode(t_ConstValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(ConstValueSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_ConstValueSource_get__bool(t_ConstValueSource *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.getBool());
              Py_RETURN_BOOL(value);
            }

            static PyObject *t_ConstValueSource_get__double(t_ConstValueSource *self, void *data)
            {
              jdouble value;
              OBJ_CALL(value = self->object.getDouble());
              return PyFloat_FromDouble((double) value);
            }

            static PyObject *t_ConstValueSource_get__float(t_ConstValueSource *self, void *data)
            {
              jfloat value;
              OBJ_CALL(value = self->object.getFloat());
              return PyFloat_FromDouble((double) value);
            }

            static PyObject *t_ConstValueSource_get__int(t_ConstValueSource *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getInt());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_ConstValueSource_get__long(t_ConstValueSource *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object.getLong());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }

            static PyObject *t_ConstValueSource_get__number(t_ConstValueSource *self, void *data)
            {
              ::java::lang::Number value((jobject) NULL);
              OBJ_CALL(value = self->object.getNumber());
              return ::java::lang::t_Number::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexWriter$IndexReaderWarmer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexWriter$IndexReaderWarmer::class$ = NULL;
        jmethodID *IndexWriter$IndexReaderWarmer::mids$ = NULL;
        bool IndexWriter$IndexReaderWarmer::live$ = false;

        jclass IndexWriter$IndexReaderWarmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexWriter$IndexReaderWarmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_warm_c9e29579] = env->getMethodID(cls, "warm", "(Lorg/apache/lucene/index/AtomicReader;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void IndexWriter$IndexReaderWarmer::warm(const ::org::apache::lucene::index::AtomicReader & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_warm_c9e29579], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexWriter$IndexReaderWarmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexWriter$IndexReaderWarmer_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexWriter$IndexReaderWarmer_warm(t_IndexWriter$IndexReaderWarmer *self, PyObject *arg);

        static PyMethodDef t_IndexWriter$IndexReaderWarmer__methods_[] = {
          DECLARE_METHOD(t_IndexWriter$IndexReaderWarmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexWriter$IndexReaderWarmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexWriter$IndexReaderWarmer, warm, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexWriter$IndexReaderWarmer, t_IndexWriter$IndexReaderWarmer, ::java::lang::Object, IndexWriter$IndexReaderWarmer, abstract_init, 0, 0, 0, 0, 0);

        void t_IndexWriter$IndexReaderWarmer::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexWriter$IndexReaderWarmer), module, "IndexWriter$IndexReaderWarmer", 0);
        }

        void t_IndexWriter$IndexReaderWarmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexWriter$IndexReaderWarmer).tp_dict, "class_", make_descriptor(IndexWriter$IndexReaderWarmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexWriter$IndexReaderWarmer).tp_dict, "wrapfn_", make_descriptor(t_IndexWriter$IndexReaderWarmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexWriter$IndexReaderWarmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexWriter$IndexReaderWarmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexWriter$IndexReaderWarmer::initializeClass, 1)))
            return NULL;
          return t_IndexWriter$IndexReaderWarmer::wrap_Object(IndexWriter$IndexReaderWarmer(((t_IndexWriter$IndexReaderWarmer *) arg)->object.this$));
        }
        static PyObject *t_IndexWriter$IndexReaderWarmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexWriter$IndexReaderWarmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexWriter$IndexReaderWarmer_warm(t_IndexWriter$IndexReaderWarmer *self, PyObject *arg)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0))
          {
            OBJ_CALL(self->object.warm(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "warm", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ro/RomanianAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ro {

          ::java::lang::Class *RomanianAnalyzer::class$ = NULL;
          jmethodID *RomanianAnalyzer::mids$ = NULL;
          bool RomanianAnalyzer::live$ = false;
          ::java::lang::String *RomanianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass RomanianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ro/RomanianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RomanianAnalyzer::RomanianAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          RomanianAnalyzer::RomanianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          RomanianAnalyzer::RomanianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet RomanianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ro {
          static PyObject *t_RomanianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RomanianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RomanianAnalyzer_init_(t_RomanianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_RomanianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_RomanianAnalyzer_get__defaultStopSet(t_RomanianAnalyzer *self, void *data);
          static PyGetSetDef t_RomanianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_RomanianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_RomanianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_RomanianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RomanianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RomanianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(RomanianAnalyzer, t_RomanianAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, RomanianAnalyzer, t_RomanianAnalyzer_init_, 0, 0, t_RomanianAnalyzer__fields_, 0, 0);

          void t_RomanianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(RomanianAnalyzer), module, "RomanianAnalyzer", 0);
          }

          void t_RomanianAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(RomanianAnalyzer).tp_dict, "class_", make_descriptor(RomanianAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RomanianAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_RomanianAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RomanianAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(RomanianAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(RomanianAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*RomanianAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_RomanianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RomanianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_RomanianAnalyzer::wrap_Object(RomanianAnalyzer(((t_RomanianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_RomanianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RomanianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RomanianAnalyzer_init_(t_RomanianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                RomanianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = RomanianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                RomanianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = RomanianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                RomanianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = RomanianAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_RomanianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::ro::RomanianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_RomanianAnalyzer_get__defaultStopSet(t_RomanianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/collation/CollationKeyFilterFactory.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace collation {

        ::java::lang::Class *CollationKeyFilterFactory::class$ = NULL;
        jmethodID *CollationKeyFilterFactory::mids$ = NULL;
        bool CollationKeyFilterFactory::live$ = false;

        jclass CollationKeyFilterFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/collation/CollationKeyFilterFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
            mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
            mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");
            mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CollationKeyFilterFactory::CollationKeyFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

        ::org::apache::lucene::analysis::TokenStream CollationKeyFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
        {
          return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
        }

        ::org::apache::lucene::analysis::util::AbstractAnalysisFactory CollationKeyFilterFactory::getMultiTermComponent() const
        {
          return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
        }

        void CollationKeyFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace collation {
        static PyObject *t_CollationKeyFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CollationKeyFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CollationKeyFilterFactory_init_(t_CollationKeyFilterFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CollationKeyFilterFactory_create(t_CollationKeyFilterFactory *self, PyObject *args);
        static PyObject *t_CollationKeyFilterFactory_getMultiTermComponent(t_CollationKeyFilterFactory *self);
        static PyObject *t_CollationKeyFilterFactory_inform(t_CollationKeyFilterFactory *self, PyObject *arg);
        static PyObject *t_CollationKeyFilterFactory_get__multiTermComponent(t_CollationKeyFilterFactory *self, void *data);
        static PyGetSetDef t_CollationKeyFilterFactory__fields_[] = {
          DECLARE_GET_FIELD(t_CollationKeyFilterFactory, multiTermComponent),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CollationKeyFilterFactory__methods_[] = {
          DECLARE_METHOD(t_CollationKeyFilterFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollationKeyFilterFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollationKeyFilterFactory, create, METH_VARARGS),
          DECLARE_METHOD(t_CollationKeyFilterFactory, getMultiTermComponent, METH_NOARGS),
          DECLARE_METHOD(t_CollationKeyFilterFactory, inform, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CollationKeyFilterFactory, t_CollationKeyFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, CollationKeyFilterFactory, t_CollationKeyFilterFactory_init_, 0, 0, t_CollationKeyFilterFactory__fields_, 0, 0);

        void t_CollationKeyFilterFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(CollationKeyFilterFactory), module, "CollationKeyFilterFactory", 0);
        }

        void t_CollationKeyFilterFactory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CollationKeyFilterFactory).tp_dict, "class_", make_descriptor(CollationKeyFilterFactory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CollationKeyFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_CollationKeyFilterFactory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CollationKeyFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CollationKeyFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CollationKeyFilterFactory::initializeClass, 1)))
            return NULL;
          return t_CollationKeyFilterFactory::wrap_Object(CollationKeyFilterFactory(((t_CollationKeyFilterFactory *) arg)->object.this$));
        }
        static PyObject *t_CollationKeyFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CollationKeyFilterFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CollationKeyFilterFactory_init_(t_CollationKeyFilterFactory *self, PyObject *args, PyObject *kwds)
        {
          ::java::util::Map a0((jobject) NULL);
          PyTypeObject **p0;
          CollationKeyFilterFactory object((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
          {
            INT_CALL(object = CollationKeyFilterFactory(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CollationKeyFilterFactory_create(t_CollationKeyFilterFactory *self, PyObject *args)
        {
          ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
          ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.create(a0));
            return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(CollationKeyFilterFactory), (PyObject *) self, "create", args, 2);
        }

        static PyObject *t_CollationKeyFilterFactory_getMultiTermComponent(t_CollationKeyFilterFactory *self)
        {
          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
          OBJ_CALL(result = self->object.getMultiTermComponent());
          return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
        }

        static PyObject *t_CollationKeyFilterFactory_inform(t_CollationKeyFilterFactory *self, PyObject *arg)
        {
          ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
          {
            OBJ_CALL(self->object.inform(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "inform", arg);
          return NULL;
        }

        static PyObject *t_CollationKeyFilterFactory_get__multiTermComponent(t_CollationKeyFilterFactory *self, void *data)
        {
          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
          OBJ_CALL(value = self->object.getMultiTermComponent());
          return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/regex/RegexQueryCapable.h"
#include "org/apache/lucene/sandbox/queries/regex/RegexCapabilities.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          namespace regex {

            ::java::lang::Class *RegexQueryCapable::class$ = NULL;
            jmethodID *RegexQueryCapable::mids$ = NULL;
            bool RegexQueryCapable::live$ = false;

            jclass RegexQueryCapable::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/regex/RegexQueryCapable");

                mids$ = new jmethodID[max_mid];
                mids$[mid_getRegexImplementation_814365f4] = env->getMethodID(cls, "getRegexImplementation", "()Lorg/apache/lucene/sandbox/queries/regex/RegexCapabilities;");
                mids$[mid_setRegexImplementation_06bf498d] = env->getMethodID(cls, "setRegexImplementation", "(Lorg/apache/lucene/sandbox/queries/regex/RegexCapabilities;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities RegexQueryCapable::getRegexImplementation() const
            {
              return ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities(env->callObjectMethod(this$, mids$[mid_getRegexImplementation_814365f4]));
            }

            void RegexQueryCapable::setRegexImplementation(const ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setRegexImplementation_06bf498d], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          namespace regex {
            static PyObject *t_RegexQueryCapable_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_RegexQueryCapable_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_RegexQueryCapable_getRegexImplementation(t_RegexQueryCapable *self);
            static PyObject *t_RegexQueryCapable_setRegexImplementation(t_RegexQueryCapable *self, PyObject *arg);
            static PyObject *t_RegexQueryCapable_get__regexImplementation(t_RegexQueryCapable *self, void *data);
            static int t_RegexQueryCapable_set__regexImplementation(t_RegexQueryCapable *self, PyObject *arg, void *data);
            static PyGetSetDef t_RegexQueryCapable__fields_[] = {
              DECLARE_GETSET_FIELD(t_RegexQueryCapable, regexImplementation),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_RegexQueryCapable__methods_[] = {
              DECLARE_METHOD(t_RegexQueryCapable, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_RegexQueryCapable, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_RegexQueryCapable, getRegexImplementation, METH_NOARGS),
              DECLARE_METHOD(t_RegexQueryCapable, setRegexImplementation, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(RegexQueryCapable, t_RegexQueryCapable, ::java::lang::Object, RegexQueryCapable, abstract_init, 0, 0, t_RegexQueryCapable__fields_, 0, 0);

            void t_RegexQueryCapable::install(PyObject *module)
            {
              installType(&PY_TYPE(RegexQueryCapable), module, "RegexQueryCapable", 0);
            }

            void t_RegexQueryCapable::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(RegexQueryCapable).tp_dict, "class_", make_descriptor(RegexQueryCapable::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(RegexQueryCapable).tp_dict, "wrapfn_", make_descriptor(t_RegexQueryCapable::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(RegexQueryCapable).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_RegexQueryCapable_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, RegexQueryCapable::initializeClass, 1)))
                return NULL;
              return t_RegexQueryCapable::wrap_Object(RegexQueryCapable(((t_RegexQueryCapable *) arg)->object.this$));
            }
            static PyObject *t_RegexQueryCapable_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, RegexQueryCapable::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_RegexQueryCapable_getRegexImplementation(t_RegexQueryCapable *self)
            {
              ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities result((jobject) NULL);
              OBJ_CALL(result = self->object.getRegexImplementation());
              return ::org::apache::lucene::sandbox::queries::regex::t_RegexCapabilities::wrap_Object(result);
            }

            static PyObject *t_RegexQueryCapable_setRegexImplementation(t_RegexQueryCapable *self, PyObject *arg)
            {
              ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setRegexImplementation(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setRegexImplementation", arg);
              return NULL;
            }

            static PyObject *t_RegexQueryCapable_get__regexImplementation(t_RegexQueryCapable *self, void *data)
            {
              ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities value((jobject) NULL);
              OBJ_CALL(value = self->object.getRegexImplementation());
              return ::org::apache::lucene::sandbox::queries::regex::t_RegexCapabilities::wrap_Object(value);
            }
            static int t_RegexQueryCapable_set__regexImplementation(t_RegexQueryCapable *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities::initializeClass, &value))
                {
                  INT_CALL(self->object.setRegexImplementation(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "regexImplementation", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hi/HindiNormalizer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {

          ::java::lang::Class *HindiNormalizer::class$ = NULL;
          jmethodID *HindiNormalizer::mids$ = NULL;
          bool HindiNormalizer::live$ = false;

          jclass HindiNormalizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hi/HindiNormalizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_normalize_ec6430eb] = env->getMethodID(cls, "normalize", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HindiNormalizer::HindiNormalizer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint HindiNormalizer::normalize(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_normalize_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {
          static PyObject *t_HindiNormalizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HindiNormalizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HindiNormalizer_init_(t_HindiNormalizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HindiNormalizer_normalize(t_HindiNormalizer *self, PyObject *args);

          static PyMethodDef t_HindiNormalizer__methods_[] = {
            DECLARE_METHOD(t_HindiNormalizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiNormalizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiNormalizer, normalize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HindiNormalizer, t_HindiNormalizer, ::java::lang::Object, HindiNormalizer, t_HindiNormalizer_init_, 0, 0, 0, 0, 0);

          void t_HindiNormalizer::install(PyObject *module)
          {
            installType(&PY_TYPE(HindiNormalizer), module, "HindiNormalizer", 0);
          }

          void t_HindiNormalizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HindiNormalizer).tp_dict, "class_", make_descriptor(HindiNormalizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HindiNormalizer).tp_dict, "wrapfn_", make_descriptor(t_HindiNormalizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HindiNormalizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HindiNormalizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HindiNormalizer::initializeClass, 1)))
              return NULL;
            return t_HindiNormalizer::wrap_Object(HindiNormalizer(((t_HindiNormalizer *) arg)->object.this$));
          }
          static PyObject *t_HindiNormalizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HindiNormalizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HindiNormalizer_init_(t_HindiNormalizer *self, PyObject *args, PyObject *kwds)
          {
            HindiNormalizer object((jobject) NULL);

            INT_CALL(object = HindiNormalizer());
            self->object = object;

            return 0;
          }

          static PyObject *t_HindiNormalizer_normalize(t_HindiNormalizer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.normalize(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "normalize", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/SimpleFloatFunction.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *SimpleFloatFunction::class$ = NULL;
            jmethodID *SimpleFloatFunction::mids$ = NULL;
            bool SimpleFloatFunction::live$ = false;

            jclass SimpleFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/SimpleFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ca78fe7a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_func_2223df21] = env->getMethodID(cls, "func", "(ILorg/apache/lucene/queries/function/FunctionValues;)F");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SimpleFloatFunction::SimpleFloatFunction(const ::org::apache::lucene::queries::function::ValueSource & a0) : ::org::apache::lucene::queries::function::valuesource::SingleFunction(env->newObject(initializeClass, &mids$, mid_init$_ca78fe7a, a0.this$)) {}

            ::org::apache::lucene::queries::function::FunctionValues SimpleFloatFunction::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_SimpleFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SimpleFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SimpleFloatFunction_init_(t_SimpleFloatFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SimpleFloatFunction_getValues(t_SimpleFloatFunction *self, PyObject *args);

            static PyMethodDef t_SimpleFloatFunction__methods_[] = {
              DECLARE_METHOD(t_SimpleFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SimpleFloatFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SimpleFloatFunction, getValues, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SimpleFloatFunction, t_SimpleFloatFunction, ::org::apache::lucene::queries::function::valuesource::SingleFunction, SimpleFloatFunction, t_SimpleFloatFunction_init_, 0, 0, 0, 0, 0);

            void t_SimpleFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(SimpleFloatFunction), module, "SimpleFloatFunction", 0);
            }

            void t_SimpleFloatFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SimpleFloatFunction).tp_dict, "class_", make_descriptor(SimpleFloatFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SimpleFloatFunction).tp_dict, "wrapfn_", make_descriptor(t_SimpleFloatFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SimpleFloatFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SimpleFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SimpleFloatFunction::initializeClass, 1)))
                return NULL;
              return t_SimpleFloatFunction::wrap_Object(SimpleFloatFunction(((t_SimpleFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_SimpleFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SimpleFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SimpleFloatFunction_init_(t_SimpleFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              SimpleFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = SimpleFloatFunction(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_SimpleFloatFunction_getValues(t_SimpleFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(SimpleFloatFunction), (PyObject *) self, "getValues", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cz/CzechStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cz {

          ::java::lang::Class *CzechStemmer::class$ = NULL;
          jmethodID *CzechStemmer::mids$ = NULL;
          bool CzechStemmer::live$ = false;

          jclass CzechStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cz/CzechStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CzechStemmer::CzechStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint CzechStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cz {
          static PyObject *t_CzechStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CzechStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CzechStemmer_init_(t_CzechStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CzechStemmer_stem(t_CzechStemmer *self, PyObject *args);

          static PyMethodDef t_CzechStemmer__methods_[] = {
            DECLARE_METHOD(t_CzechStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CzechStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CzechStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CzechStemmer, t_CzechStemmer, ::java::lang::Object, CzechStemmer, t_CzechStemmer_init_, 0, 0, 0, 0, 0);

          void t_CzechStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(CzechStemmer), module, "CzechStemmer", 0);
          }

          void t_CzechStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CzechStemmer).tp_dict, "class_", make_descriptor(CzechStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CzechStemmer).tp_dict, "wrapfn_", make_descriptor(t_CzechStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CzechStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CzechStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CzechStemmer::initializeClass, 1)))
              return NULL;
            return t_CzechStemmer::wrap_Object(CzechStemmer(((t_CzechStemmer *) arg)->object.this$));
          }
          static PyObject *t_CzechStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CzechStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CzechStemmer_init_(t_CzechStemmer *self, PyObject *args, PyObject *kwds)
          {
            CzechStemmer object((jobject) NULL);

            INT_CALL(object = CzechStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_CzechStemmer_stem(t_CzechStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Sort.h"
#include "org/apache/lucene/search/Scorer.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/grouping/SearchGroup.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *AbstractFirstPassGroupingCollector::class$ = NULL;
          jmethodID *AbstractFirstPassGroupingCollector::mids$ = NULL;
          bool AbstractFirstPassGroupingCollector::live$ = false;

          jclass AbstractFirstPassGroupingCollector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d50ac7b4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Sort;I)V");
              mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
              mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
              mids$[mid_getTopGroups_1d16f88d] = env->getMethodID(cls, "getTopGroups", "(IZ)Ljava/util/Collection;");
              mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
              mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");
              mids$[mid_getDocGroupValue_29be6a55] = env->getMethodID(cls, "getDocGroupValue", "(I)Ljava/lang/Object;");
              mids$[mid_copyDocGroupValue_537d5bdf] = env->getMethodID(cls, "copyDocGroupValue", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AbstractFirstPassGroupingCollector::AbstractFirstPassGroupingCollector(const ::org::apache::lucene::search::Sort & a0, jint a1) : ::org::apache::lucene::search::Collector(env->newObject(initializeClass, &mids$, mid_init$_d50ac7b4, a0.this$, a1)) {}

          jboolean AbstractFirstPassGroupingCollector::acceptsDocsOutOfOrder() const
          {
            return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
          }

          void AbstractFirstPassGroupingCollector::collect(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
          }

          ::java::util::Collection AbstractFirstPassGroupingCollector::getTopGroups(jint a0, jboolean a1) const
          {
            return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getTopGroups_1d16f88d], a0, a1));
          }

          void AbstractFirstPassGroupingCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
          }

          void AbstractFirstPassGroupingCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_AbstractFirstPassGroupingCollector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractFirstPassGroupingCollector_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractFirstPassGroupingCollector_of_(t_AbstractFirstPassGroupingCollector *self, PyObject *args);
          static int t_AbstractFirstPassGroupingCollector_init_(t_AbstractFirstPassGroupingCollector *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AbstractFirstPassGroupingCollector_acceptsDocsOutOfOrder(t_AbstractFirstPassGroupingCollector *self, PyObject *args);
          static PyObject *t_AbstractFirstPassGroupingCollector_collect(t_AbstractFirstPassGroupingCollector *self, PyObject *args);
          static PyObject *t_AbstractFirstPassGroupingCollector_getTopGroups(t_AbstractFirstPassGroupingCollector *self, PyObject *args);
          static PyObject *t_AbstractFirstPassGroupingCollector_setNextReader(t_AbstractFirstPassGroupingCollector *self, PyObject *args);
          static PyObject *t_AbstractFirstPassGroupingCollector_setScorer(t_AbstractFirstPassGroupingCollector *self, PyObject *args);
          static int t_AbstractFirstPassGroupingCollector_set__nextReader(t_AbstractFirstPassGroupingCollector *self, PyObject *arg, void *data);
          static int t_AbstractFirstPassGroupingCollector_set__scorer(t_AbstractFirstPassGroupingCollector *self, PyObject *arg, void *data);
          static PyObject *t_AbstractFirstPassGroupingCollector_get__parameters_(t_AbstractFirstPassGroupingCollector *self, void *data);
          static PyGetSetDef t_AbstractFirstPassGroupingCollector__fields_[] = {
            DECLARE_SET_FIELD(t_AbstractFirstPassGroupingCollector, nextReader),
            DECLARE_SET_FIELD(t_AbstractFirstPassGroupingCollector, scorer),
            DECLARE_GET_FIELD(t_AbstractFirstPassGroupingCollector, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AbstractFirstPassGroupingCollector__methods_[] = {
            DECLARE_METHOD(t_AbstractFirstPassGroupingCollector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractFirstPassGroupingCollector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractFirstPassGroupingCollector, of_, METH_VARARGS),
            DECLARE_METHOD(t_AbstractFirstPassGroupingCollector, acceptsDocsOutOfOrder, METH_VARARGS),
            DECLARE_METHOD(t_AbstractFirstPassGroupingCollector, collect, METH_VARARGS),
            DECLARE_METHOD(t_AbstractFirstPassGroupingCollector, getTopGroups, METH_VARARGS),
            DECLARE_METHOD(t_AbstractFirstPassGroupingCollector, setNextReader, METH_VARARGS),
            DECLARE_METHOD(t_AbstractFirstPassGroupingCollector, setScorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractFirstPassGroupingCollector, t_AbstractFirstPassGroupingCollector, ::org::apache::lucene::search::Collector, AbstractFirstPassGroupingCollector, t_AbstractFirstPassGroupingCollector_init_, 0, 0, t_AbstractFirstPassGroupingCollector__fields_, 0, 0);
          PyObject *t_AbstractFirstPassGroupingCollector::wrap_Object(const AbstractFirstPassGroupingCollector& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractFirstPassGroupingCollector::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractFirstPassGroupingCollector *self = (t_AbstractFirstPassGroupingCollector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_AbstractFirstPassGroupingCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractFirstPassGroupingCollector::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractFirstPassGroupingCollector *self = (t_AbstractFirstPassGroupingCollector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_AbstractFirstPassGroupingCollector::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractFirstPassGroupingCollector), module, "AbstractFirstPassGroupingCollector", 0);
          }

          void t_AbstractFirstPassGroupingCollector::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractFirstPassGroupingCollector).tp_dict, "class_", make_descriptor(AbstractFirstPassGroupingCollector::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractFirstPassGroupingCollector).tp_dict, "wrapfn_", make_descriptor(t_AbstractFirstPassGroupingCollector::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractFirstPassGroupingCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractFirstPassGroupingCollector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractFirstPassGroupingCollector::initializeClass, 1)))
              return NULL;
            return t_AbstractFirstPassGroupingCollector::wrap_Object(AbstractFirstPassGroupingCollector(((t_AbstractFirstPassGroupingCollector *) arg)->object.this$));
          }
          static PyObject *t_AbstractFirstPassGroupingCollector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractFirstPassGroupingCollector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AbstractFirstPassGroupingCollector_of_(t_AbstractFirstPassGroupingCollector *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_AbstractFirstPassGroupingCollector_init_(t_AbstractFirstPassGroupingCollector *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::Sort a0((jobject) NULL);
            jint a1;
            AbstractFirstPassGroupingCollector object((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1))
            {
              INT_CALL(object = AbstractFirstPassGroupingCollector(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_AbstractFirstPassGroupingCollector_acceptsDocsOutOfOrder(t_AbstractFirstPassGroupingCollector *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(AbstractFirstPassGroupingCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
          }

          static PyObject *t_AbstractFirstPassGroupingCollector_collect(t_AbstractFirstPassGroupingCollector *self, PyObject *args)
          {
            jint a0;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(self->object.collect(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(AbstractFirstPassGroupingCollector), (PyObject *) self, "collect", args, 2);
          }

          static PyObject *t_AbstractFirstPassGroupingCollector_getTopGroups(t_AbstractFirstPassGroupingCollector *self, PyObject *args)
          {
            jint a0;
            jboolean a1;
            ::java::util::Collection result((jobject) NULL);

            if (!parseArgs(args, "IZ", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getTopGroups(a0, a1));
              return ::java::util::t_Collection::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getTopGroups", args);
            return NULL;
          }

          static PyObject *t_AbstractFirstPassGroupingCollector_setNextReader(t_AbstractFirstPassGroupingCollector *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setNextReader(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(AbstractFirstPassGroupingCollector), (PyObject *) self, "setNextReader", args, 2);
          }

          static PyObject *t_AbstractFirstPassGroupingCollector_setScorer(t_AbstractFirstPassGroupingCollector *self, PyObject *args)
          {
            ::org::apache::lucene::search::Scorer a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setScorer(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(AbstractFirstPassGroupingCollector), (PyObject *) self, "setScorer", args, 2);
          }
          static PyObject *t_AbstractFirstPassGroupingCollector_get__parameters_(t_AbstractFirstPassGroupingCollector *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static int t_AbstractFirstPassGroupingCollector_set__nextReader(t_AbstractFirstPassGroupingCollector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
              {
                INT_CALL(self->object.setNextReader(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
            return -1;
          }

          static int t_AbstractFirstPassGroupingCollector_set__scorer(t_AbstractFirstPassGroupingCollector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::Scorer value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
              {
                INT_CALL(self->object.setScorer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "scorer", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/sv/SwedishAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sv {

          ::java::lang::Class *SwedishAnalyzer::class$ = NULL;
          jmethodID *SwedishAnalyzer::mids$ = NULL;
          bool SwedishAnalyzer::live$ = false;
          ::java::lang::String *SwedishAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass SwedishAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/sv/SwedishAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SwedishAnalyzer::SwedishAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          SwedishAnalyzer::SwedishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          SwedishAnalyzer::SwedishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet SwedishAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sv {
          static PyObject *t_SwedishAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SwedishAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SwedishAnalyzer_init_(t_SwedishAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SwedishAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_SwedishAnalyzer_get__defaultStopSet(t_SwedishAnalyzer *self, void *data);
          static PyGetSetDef t_SwedishAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_SwedishAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SwedishAnalyzer__methods_[] = {
            DECLARE_METHOD(t_SwedishAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SwedishAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SwedishAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SwedishAnalyzer, t_SwedishAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, SwedishAnalyzer, t_SwedishAnalyzer_init_, 0, 0, t_SwedishAnalyzer__fields_, 0, 0);

          void t_SwedishAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(SwedishAnalyzer), module, "SwedishAnalyzer", 0);
          }

          void t_SwedishAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SwedishAnalyzer).tp_dict, "class_", make_descriptor(SwedishAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SwedishAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_SwedishAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SwedishAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SwedishAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(SwedishAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*SwedishAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_SwedishAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SwedishAnalyzer::initializeClass, 1)))
              return NULL;
            return t_SwedishAnalyzer::wrap_Object(SwedishAnalyzer(((t_SwedishAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_SwedishAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SwedishAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SwedishAnalyzer_init_(t_SwedishAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                SwedishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = SwedishAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                SwedishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = SwedishAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                SwedishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = SwedishAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SwedishAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::sv::SwedishAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_SwedishAnalyzer_get__defaultStopSet(t_SwedishAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/blocktree/Stats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blocktree {

          ::java::lang::Class *Stats::class$ = NULL;
          jmethodID *Stats::mids$ = NULL;
          jfieldID *Stats::fids$ = NULL;
          bool Stats::live$ = false;

          jclass Stats::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/blocktree/Stats");

              mids$ = new jmethodID[max_mid];
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_blockCountByPrefixLen] = env->getFieldID(cls, "blockCountByPrefixLen", "[I");
              fids$[fid_field] = env->getFieldID(cls, "field", "Ljava/lang/String;");
              fids$[fid_floorBlockCount] = env->getFieldID(cls, "floorBlockCount", "I");
              fids$[fid_floorSubBlockCount] = env->getFieldID(cls, "floorSubBlockCount", "I");
              fids$[fid_indexArcCount] = env->getFieldID(cls, "indexArcCount", "J");
              fids$[fid_indexNodeCount] = env->getFieldID(cls, "indexNodeCount", "J");
              fids$[fid_indexNumBytes] = env->getFieldID(cls, "indexNumBytes", "J");
              fids$[fid_mixedBlockCount] = env->getFieldID(cls, "mixedBlockCount", "I");
              fids$[fid_nonFloorBlockCount] = env->getFieldID(cls, "nonFloorBlockCount", "I");
              fids$[fid_segment] = env->getFieldID(cls, "segment", "Ljava/lang/String;");
              fids$[fid_subBlocksOnlyBlockCount] = env->getFieldID(cls, "subBlocksOnlyBlockCount", "I");
              fids$[fid_termsOnlyBlockCount] = env->getFieldID(cls, "termsOnlyBlockCount", "I");
              fids$[fid_totalBlockCount] = env->getFieldID(cls, "totalBlockCount", "I");
              fids$[fid_totalBlockOtherBytes] = env->getFieldID(cls, "totalBlockOtherBytes", "J");
              fids$[fid_totalBlockStatsBytes] = env->getFieldID(cls, "totalBlockStatsBytes", "J");
              fids$[fid_totalBlockSuffixBytes] = env->getFieldID(cls, "totalBlockSuffixBytes", "J");
              fids$[fid_totalTermBytes] = env->getFieldID(cls, "totalTermBytes", "J");
              fids$[fid_totalTermCount] = env->getFieldID(cls, "totalTermCount", "J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::String Stats::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          JArray< jint > Stats::_get_blockCountByPrefixLen() const
          {
            return JArray< jint >(env->getObjectField(this$, fids$[fid_blockCountByPrefixLen]));
          }

          void Stats::_set_blockCountByPrefixLen(const JArray< jint > & a0) const
          {
            env->setObjectField(this$, fids$[fid_blockCountByPrefixLen], a0.this$);
          }

          ::java::lang::String Stats::_get_field() const
          {
            return ::java::lang::String(env->getObjectField(this$, fids$[fid_field]));
          }

          jint Stats::_get_floorBlockCount() const
          {
            return env->getIntField(this$, fids$[fid_floorBlockCount]);
          }

          void Stats::_set_floorBlockCount(jint a0) const
          {
            env->setIntField(this$, fids$[fid_floorBlockCount], a0);
          }

          jint Stats::_get_floorSubBlockCount() const
          {
            return env->getIntField(this$, fids$[fid_floorSubBlockCount]);
          }

          void Stats::_set_floorSubBlockCount(jint a0) const
          {
            env->setIntField(this$, fids$[fid_floorSubBlockCount], a0);
          }

          jlong Stats::_get_indexArcCount() const
          {
            return env->getLongField(this$, fids$[fid_indexArcCount]);
          }

          void Stats::_set_indexArcCount(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_indexArcCount], a0);
          }

          jlong Stats::_get_indexNodeCount() const
          {
            return env->getLongField(this$, fids$[fid_indexNodeCount]);
          }

          void Stats::_set_indexNodeCount(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_indexNodeCount], a0);
          }

          jlong Stats::_get_indexNumBytes() const
          {
            return env->getLongField(this$, fids$[fid_indexNumBytes]);
          }

          void Stats::_set_indexNumBytes(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_indexNumBytes], a0);
          }

          jint Stats::_get_mixedBlockCount() const
          {
            return env->getIntField(this$, fids$[fid_mixedBlockCount]);
          }

          void Stats::_set_mixedBlockCount(jint a0) const
          {
            env->setIntField(this$, fids$[fid_mixedBlockCount], a0);
          }

          jint Stats::_get_nonFloorBlockCount() const
          {
            return env->getIntField(this$, fids$[fid_nonFloorBlockCount]);
          }

          void Stats::_set_nonFloorBlockCount(jint a0) const
          {
            env->setIntField(this$, fids$[fid_nonFloorBlockCount], a0);
          }

          ::java::lang::String Stats::_get_segment() const
          {
            return ::java::lang::String(env->getObjectField(this$, fids$[fid_segment]));
          }

          jint Stats::_get_subBlocksOnlyBlockCount() const
          {
            return env->getIntField(this$, fids$[fid_subBlocksOnlyBlockCount]);
          }

          void Stats::_set_subBlocksOnlyBlockCount(jint a0) const
          {
            env->setIntField(this$, fids$[fid_subBlocksOnlyBlockCount], a0);
          }

          jint Stats::_get_termsOnlyBlockCount() const
          {
            return env->getIntField(this$, fids$[fid_termsOnlyBlockCount]);
          }

          void Stats::_set_termsOnlyBlockCount(jint a0) const
          {
            env->setIntField(this$, fids$[fid_termsOnlyBlockCount], a0);
          }

          jint Stats::_get_totalBlockCount() const
          {
            return env->getIntField(this$, fids$[fid_totalBlockCount]);
          }

          void Stats::_set_totalBlockCount(jint a0) const
          {
            env->setIntField(this$, fids$[fid_totalBlockCount], a0);
          }

          jlong Stats::_get_totalBlockOtherBytes() const
          {
            return env->getLongField(this$, fids$[fid_totalBlockOtherBytes]);
          }

          void Stats::_set_totalBlockOtherBytes(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_totalBlockOtherBytes], a0);
          }

          jlong Stats::_get_totalBlockStatsBytes() const
          {
            return env->getLongField(this$, fids$[fid_totalBlockStatsBytes]);
          }

          void Stats::_set_totalBlockStatsBytes(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_totalBlockStatsBytes], a0);
          }

          jlong Stats::_get_totalBlockSuffixBytes() const
          {
            return env->getLongField(this$, fids$[fid_totalBlockSuffixBytes]);
          }

          void Stats::_set_totalBlockSuffixBytes(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_totalBlockSuffixBytes], a0);
          }

          jlong Stats::_get_totalTermBytes() const
          {
            return env->getLongField(this$, fids$[fid_totalTermBytes]);
          }

          void Stats::_set_totalTermBytes(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_totalTermBytes], a0);
          }

          jlong Stats::_get_totalTermCount() const
          {
            return env->getLongField(this$, fids$[fid_totalTermCount]);
          }

          void Stats::_set_totalTermCount(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_totalTermCount], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blocktree {
          static PyObject *t_Stats_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Stats_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Stats_toString(t_Stats *self, PyObject *args);
          static PyObject *t_Stats_get__blockCountByPrefixLen(t_Stats *self, void *data);
          static int t_Stats_set__blockCountByPrefixLen(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__field(t_Stats *self, void *data);
          static PyObject *t_Stats_get__floorBlockCount(t_Stats *self, void *data);
          static int t_Stats_set__floorBlockCount(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__floorSubBlockCount(t_Stats *self, void *data);
          static int t_Stats_set__floorSubBlockCount(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__indexArcCount(t_Stats *self, void *data);
          static int t_Stats_set__indexArcCount(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__indexNodeCount(t_Stats *self, void *data);
          static int t_Stats_set__indexNodeCount(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__indexNumBytes(t_Stats *self, void *data);
          static int t_Stats_set__indexNumBytes(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__mixedBlockCount(t_Stats *self, void *data);
          static int t_Stats_set__mixedBlockCount(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__nonFloorBlockCount(t_Stats *self, void *data);
          static int t_Stats_set__nonFloorBlockCount(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__segment(t_Stats *self, void *data);
          static PyObject *t_Stats_get__subBlocksOnlyBlockCount(t_Stats *self, void *data);
          static int t_Stats_set__subBlocksOnlyBlockCount(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__termsOnlyBlockCount(t_Stats *self, void *data);
          static int t_Stats_set__termsOnlyBlockCount(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__totalBlockCount(t_Stats *self, void *data);
          static int t_Stats_set__totalBlockCount(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__totalBlockOtherBytes(t_Stats *self, void *data);
          static int t_Stats_set__totalBlockOtherBytes(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__totalBlockStatsBytes(t_Stats *self, void *data);
          static int t_Stats_set__totalBlockStatsBytes(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__totalBlockSuffixBytes(t_Stats *self, void *data);
          static int t_Stats_set__totalBlockSuffixBytes(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__totalTermBytes(t_Stats *self, void *data);
          static int t_Stats_set__totalTermBytes(t_Stats *self, PyObject *arg, void *data);
          static PyObject *t_Stats_get__totalTermCount(t_Stats *self, void *data);
          static int t_Stats_set__totalTermCount(t_Stats *self, PyObject *arg, void *data);

          static PyGetSetDef t_Stats__fields_[] = {
            DECLARE_GETSET_FIELD(t_Stats, blockCountByPrefixLen),
            DECLARE_GET_FIELD(t_Stats, field),
            DECLARE_GETSET_FIELD(t_Stats, floorBlockCount),
            DECLARE_GETSET_FIELD(t_Stats, floorSubBlockCount),
            DECLARE_GETSET_FIELD(t_Stats, indexArcCount),
            DECLARE_GETSET_FIELD(t_Stats, indexNodeCount),
            DECLARE_GETSET_FIELD(t_Stats, indexNumBytes),
            DECLARE_GETSET_FIELD(t_Stats, mixedBlockCount),
            DECLARE_GETSET_FIELD(t_Stats, nonFloorBlockCount),
            DECLARE_GET_FIELD(t_Stats, segment),
            DECLARE_GETSET_FIELD(t_Stats, subBlocksOnlyBlockCount),
            DECLARE_GETSET_FIELD(t_Stats, termsOnlyBlockCount),
            DECLARE_GETSET_FIELD(t_Stats, totalBlockCount),
            DECLARE_GETSET_FIELD(t_Stats, totalBlockOtherBytes),
            DECLARE_GETSET_FIELD(t_Stats, totalBlockStatsBytes),
            DECLARE_GETSET_FIELD(t_Stats, totalBlockSuffixBytes),
            DECLARE_GETSET_FIELD(t_Stats, totalTermBytes),
            DECLARE_GETSET_FIELD(t_Stats, totalTermCount),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Stats__methods_[] = {
            DECLARE_METHOD(t_Stats, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Stats, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Stats, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Stats, t_Stats, ::java::lang::Object, Stats, abstract_init, 0, 0, t_Stats__fields_, 0, 0);

          void t_Stats::install(PyObject *module)
          {
            installType(&PY_TYPE(Stats), module, "Stats", 0);
          }

          void t_Stats::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Stats).tp_dict, "class_", make_descriptor(Stats::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Stats).tp_dict, "wrapfn_", make_descriptor(t_Stats::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Stats).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Stats_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Stats::initializeClass, 1)))
              return NULL;
            return t_Stats::wrap_Object(Stats(((t_Stats *) arg)->object.this$));
          }
          static PyObject *t_Stats_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Stats::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Stats_toString(t_Stats *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(Stats), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_Stats_get__blockCountByPrefixLen(t_Stats *self, void *data)
          {
            JArray< jint > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_blockCountByPrefixLen());
            return value.wrap();
          }
          static int t_Stats_set__blockCountByPrefixLen(t_Stats *self, PyObject *arg, void *data)
          {
            JArray< jint > value((jobject) NULL);
            if (!parseArg(arg, "[I", &value))
            {
              INT_CALL(self->object._set_blockCountByPrefixLen(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "blockCountByPrefixLen", arg);
            return -1;
          }

          static PyObject *t_Stats_get__field(t_Stats *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object._get_field());
            return j2p(value);
          }

          static PyObject *t_Stats_get__floorBlockCount(t_Stats *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_floorBlockCount());
            return PyInt_FromLong((long) value);
          }
          static int t_Stats_set__floorBlockCount(t_Stats *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_floorBlockCount(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "floorBlockCount", arg);
            return -1;
          }

          static PyObject *t_Stats_get__floorSubBlockCount(t_Stats *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_floorSubBlockCount());
            return PyInt_FromLong((long) value);
          }
          static int t_Stats_set__floorSubBlockCount(t_Stats *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_floorSubBlockCount(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "floorSubBlockCount", arg);
            return -1;
          }

          static PyObject *t_Stats_get__indexArcCount(t_Stats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_indexArcCount());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_Stats_set__indexArcCount(t_Stats *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_indexArcCount(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "indexArcCount", arg);
            return -1;
          }

          static PyObject *t_Stats_get__indexNodeCount(t_Stats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_indexNodeCount());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_Stats_set__indexNodeCount(t_Stats *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_indexNodeCount(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "indexNodeCount", arg);
            return -1;
          }

          static PyObject *t_Stats_get__indexNumBytes(t_Stats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_indexNumBytes());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_Stats_set__indexNumBytes(t_Stats *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_indexNumBytes(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "indexNumBytes", arg);
            return -1;
          }

          static PyObject *t_Stats_get__mixedBlockCount(t_Stats *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_mixedBlockCount());
            return PyInt_FromLong((long) value);
          }
          static int t_Stats_set__mixedBlockCount(t_Stats *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_mixedBlockCount(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "mixedBlockCount", arg);
            return -1;
          }

          static PyObject *t_Stats_get__nonFloorBlockCount(t_Stats *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_nonFloorBlockCount());
            return PyInt_FromLong((long) value);
          }
          static int t_Stats_set__nonFloorBlockCount(t_Stats *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_nonFloorBlockCount(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "nonFloorBlockCount", arg);
            return -1;
          }

          static PyObject *t_Stats_get__segment(t_Stats *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object._get_segment());
            return j2p(value);
          }

          static PyObject *t_Stats_get__subBlocksOnlyBlockCount(t_Stats *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_subBlocksOnlyBlockCount());
            return PyInt_FromLong((long) value);
          }
          static int t_Stats_set__subBlocksOnlyBlockCount(t_Stats *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_subBlocksOnlyBlockCount(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "subBlocksOnlyBlockCount", arg);
            return -1;
          }

          static PyObject *t_Stats_get__termsOnlyBlockCount(t_Stats *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_termsOnlyBlockCount());
            return PyInt_FromLong((long) value);
          }
          static int t_Stats_set__termsOnlyBlockCount(t_Stats *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_termsOnlyBlockCount(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "termsOnlyBlockCount", arg);
            return -1;
          }

          static PyObject *t_Stats_get__totalBlockCount(t_Stats *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_totalBlockCount());
            return PyInt_FromLong((long) value);
          }
          static int t_Stats_set__totalBlockCount(t_Stats *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_totalBlockCount(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "totalBlockCount", arg);
            return -1;
          }

          static PyObject *t_Stats_get__totalBlockOtherBytes(t_Stats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_totalBlockOtherBytes());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_Stats_set__totalBlockOtherBytes(t_Stats *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_totalBlockOtherBytes(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "totalBlockOtherBytes", arg);
            return -1;
          }

          static PyObject *t_Stats_get__totalBlockStatsBytes(t_Stats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_totalBlockStatsBytes());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_Stats_set__totalBlockStatsBytes(t_Stats *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_totalBlockStatsBytes(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "totalBlockStatsBytes", arg);
            return -1;
          }

          static PyObject *t_Stats_get__totalBlockSuffixBytes(t_Stats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_totalBlockSuffixBytes());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_Stats_set__totalBlockSuffixBytes(t_Stats *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_totalBlockSuffixBytes(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "totalBlockSuffixBytes", arg);
            return -1;
          }

          static PyObject *t_Stats_get__totalTermBytes(t_Stats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_totalTermBytes());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_Stats_set__totalTermBytes(t_Stats *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_totalTermBytes(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "totalTermBytes", arg);
            return -1;
          }

          static PyObject *t_Stats_get__totalTermCount(t_Stats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_totalTermCount());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_Stats_set__totalTermCount(t_Stats *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_totalTermCount(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "totalTermCount", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/KeywordAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *KeywordAttribute::class$ = NULL;
          jmethodID *KeywordAttribute::mids$ = NULL;
          bool KeywordAttribute::live$ = false;

          jclass KeywordAttribute::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/KeywordAttribute");

              mids$ = new jmethodID[max_mid];
              mids$[mid_isKeyword_54c6a16a] = env->getMethodID(cls, "isKeyword", "()Z");
              mids$[mid_setKeyword_bb0c767f] = env->getMethodID(cls, "setKeyword", "(Z)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jboolean KeywordAttribute::isKeyword() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isKeyword_54c6a16a]);
          }

          void KeywordAttribute::setKeyword(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setKeyword_bb0c767f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_KeywordAttribute_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeywordAttribute_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeywordAttribute_isKeyword(t_KeywordAttribute *self);
          static PyObject *t_KeywordAttribute_setKeyword(t_KeywordAttribute *self, PyObject *arg);
          static PyObject *t_KeywordAttribute_get__keyword(t_KeywordAttribute *self, void *data);
          static int t_KeywordAttribute_set__keyword(t_KeywordAttribute *self, PyObject *arg, void *data);
          static PyGetSetDef t_KeywordAttribute__fields_[] = {
            DECLARE_GETSET_FIELD(t_KeywordAttribute, keyword),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_KeywordAttribute__methods_[] = {
            DECLARE_METHOD(t_KeywordAttribute, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordAttribute, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordAttribute, isKeyword, METH_NOARGS),
            DECLARE_METHOD(t_KeywordAttribute, setKeyword, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(KeywordAttribute, t_KeywordAttribute, ::org::apache::lucene::util::Attribute, KeywordAttribute, abstract_init, 0, 0, t_KeywordAttribute__fields_, 0, 0);

          void t_KeywordAttribute::install(PyObject *module)
          {
            installType(&PY_TYPE(KeywordAttribute), module, "KeywordAttribute", 0);
          }

          void t_KeywordAttribute::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(KeywordAttribute).tp_dict, "class_", make_descriptor(KeywordAttribute::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(KeywordAttribute).tp_dict, "wrapfn_", make_descriptor(t_KeywordAttribute::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(KeywordAttribute).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KeywordAttribute_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KeywordAttribute::initializeClass, 1)))
              return NULL;
            return t_KeywordAttribute::wrap_Object(KeywordAttribute(((t_KeywordAttribute *) arg)->object.this$));
          }
          static PyObject *t_KeywordAttribute_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KeywordAttribute::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_KeywordAttribute_isKeyword(t_KeywordAttribute *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isKeyword());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_KeywordAttribute_setKeyword(t_KeywordAttribute *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setKeyword(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setKeyword", arg);
            return NULL;
          }

          static PyObject *t_KeywordAttribute_get__keyword(t_KeywordAttribute *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isKeyword());
            Py_RETURN_BOOL(value);
          }
          static int t_KeywordAttribute_set__keyword(t_KeywordAttribute *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setKeyword(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "keyword", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/InputStream.h"
#include "java/io/IOException.h"
#include "java/io/Closeable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace io {

    ::java::lang::Class *InputStream::class$ = NULL;
    jmethodID *InputStream::mids$ = NULL;
    bool InputStream::live$ = false;

    jclass InputStream::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/io/InputStream");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_available_54c6a179] = env->getMethodID(cls, "available", "()I");
        mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
        mids$[mid_mark_39c7bd3c] = env->getMethodID(cls, "mark", "(I)V");
        mids$[mid_markSupported_54c6a16a] = env->getMethodID(cls, "markSupported", "()Z");
        mids$[mid_read_54c6a179] = env->getMethodID(cls, "read", "()I");
        mids$[mid_read_49b4f134] = env->getMethodID(cls, "read", "([B)I");
        mids$[mid_read_86f44340] = env->getMethodID(cls, "read", "([BII)I");
        mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
        mids$[mid_skip_0ee6df33] = env->getMethodID(cls, "skip", "(J)J");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    InputStream::InputStream() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    jint InputStream::available() const
    {
      return env->callIntMethod(this$, mids$[mid_available_54c6a179]);
    }

    void InputStream::close() const
    {
      env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
    }

    void InputStream::mark(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_mark_39c7bd3c], a0);
    }

    jboolean InputStream::markSupported() const
    {
      return env->callBooleanMethod(this$, mids$[mid_markSupported_54c6a16a]);
    }

    jint InputStream::read() const
    {
      return env->callIntMethod(this$, mids$[mid_read_54c6a179]);
    }

    jint InputStream::read(const JArray< jbyte > & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_read_49b4f134], a0.this$);
    }

    jint InputStream::read(const JArray< jbyte > & a0, jint a1, jint a2) const
    {
      return env->callIntMethod(this$, mids$[mid_read_86f44340], a0.this$, a1, a2);
    }

    void InputStream::reset() const
    {
      env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
    }

    jlong InputStream::skip(jlong a0) const
    {
      return env->callLongMethod(this$, mids$[mid_skip_0ee6df33], a0);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace io {
    static PyObject *t_InputStream_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_InputStream_instance_(PyTypeObject *type, PyObject *arg);
    static int t_InputStream_init_(t_InputStream *self, PyObject *args, PyObject *kwds);
    static PyObject *t_InputStream_available(t_InputStream *self);
    static PyObject *t_InputStream_close(t_InputStream *self);
    static PyObject *t_InputStream_mark(t_InputStream *self, PyObject *arg);
    static PyObject *t_InputStream_markSupported(t_InputStream *self);
    static PyObject *t_InputStream_read(t_InputStream *self, PyObject *args);
    static PyObject *t_InputStream_reset(t_InputStream *self);
    static PyObject *t_InputStream_skip(t_InputStream *self, PyObject *arg);

    static PyMethodDef t_InputStream__methods_[] = {
      DECLARE_METHOD(t_InputStream, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_InputStream, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_InputStream, available, METH_NOARGS),
      DECLARE_METHOD(t_InputStream, close, METH_NOARGS),
      DECLARE_METHOD(t_InputStream, mark, METH_O),
      DECLARE_METHOD(t_InputStream, markSupported, METH_NOARGS),
      DECLARE_METHOD(t_InputStream, read, METH_VARARGS),
      DECLARE_METHOD(t_InputStream, reset, METH_NOARGS),
      DECLARE_METHOD(t_InputStream, skip, METH_O),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(InputStream, t_InputStream, ::java::lang::Object, InputStream, t_InputStream_init_, 0, 0, 0, 0, 0);

    void t_InputStream::install(PyObject *module)
    {
      installType(&PY_TYPE(InputStream), module, "InputStream", 0);
    }

    void t_InputStream::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(InputStream).tp_dict, "class_", make_descriptor(InputStream::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(InputStream).tp_dict, "wrapfn_", make_descriptor(t_InputStream::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(InputStream).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_InputStream_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, InputStream::initializeClass, 1)))
        return NULL;
      return t_InputStream::wrap_Object(InputStream(((t_InputStream *) arg)->object.this$));
    }
    static PyObject *t_InputStream_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, InputStream::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_InputStream_init_(t_InputStream *self, PyObject *args, PyObject *kwds)
    {
      InputStream object((jobject) NULL);

      INT_CALL(object = InputStream());
      self->object = object;

      return 0;
    }

    static PyObject *t_InputStream_available(t_InputStream *self)
    {
      jint result;
      OBJ_CALL(result = self->object.available());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_InputStream_close(t_InputStream *self)
    {
      OBJ_CALL(self->object.close());
      Py_RETURN_NONE;
    }

    static PyObject *t_InputStream_mark(t_InputStream *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.mark(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "mark", arg);
      return NULL;
    }

    static PyObject *t_InputStream_markSupported(t_InputStream *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.markSupported());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_InputStream_read(t_InputStream *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          jint result;
          OBJ_CALL(result = self->object.read());
          return PyInt_FromLong((long) result);
        }
        break;
       case 1:
        {
          JArray< jbyte > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[B", &a0))
          {
            OBJ_CALL(result = self->object.read(a0));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 3:
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.read(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "read", args);
      return NULL;
    }

    static PyObject *t_InputStream_reset(t_InputStream *self)
    {
      OBJ_CALL(self->object.reset());
      Py_RETURN_NONE;
    }

    static PyObject *t_InputStream_skip(t_InputStream *self, PyObject *arg)
    {
      jlong a0;
      jlong result;

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = self->object.skip(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError((PyObject *) self, "skip", arg);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/WeightedFieldFragList.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *WeightedFieldFragList::class$ = NULL;
          jmethodID *WeightedFieldFragList::mids$ = NULL;
          bool WeightedFieldFragList::live$ = false;

          jclass WeightedFieldFragList::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/WeightedFieldFragList");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_add_21fbeb2b] = env->getMethodID(cls, "add", "(IILjava/util/List;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WeightedFieldFragList::WeightedFieldFragList(jint a0) : ::org::apache::lucene::search::vectorhighlight::FieldFragList(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          void WeightedFieldFragList::add(jint a0, jint a1, const ::java::util::List & a2) const
          {
            env->callVoidMethod(this$, mids$[mid_add_21fbeb2b], a0, a1, a2.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_WeightedFieldFragList_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WeightedFieldFragList_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WeightedFieldFragList_init_(t_WeightedFieldFragList *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WeightedFieldFragList_add(t_WeightedFieldFragList *self, PyObject *args);

          static PyMethodDef t_WeightedFieldFragList__methods_[] = {
            DECLARE_METHOD(t_WeightedFieldFragList, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WeightedFieldFragList, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WeightedFieldFragList, add, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WeightedFieldFragList, t_WeightedFieldFragList, ::org::apache::lucene::search::vectorhighlight::FieldFragList, WeightedFieldFragList, t_WeightedFieldFragList_init_, 0, 0, 0, 0, 0);

          void t_WeightedFieldFragList::install(PyObject *module)
          {
            installType(&PY_TYPE(WeightedFieldFragList), module, "WeightedFieldFragList", 0);
          }

          void t_WeightedFieldFragList::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WeightedFieldFragList).tp_dict, "class_", make_descriptor(WeightedFieldFragList::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WeightedFieldFragList).tp_dict, "wrapfn_", make_descriptor(t_WeightedFieldFragList::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WeightedFieldFragList).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_WeightedFieldFragList_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WeightedFieldFragList::initializeClass, 1)))
              return NULL;
            return t_WeightedFieldFragList::wrap_Object(WeightedFieldFragList(((t_WeightedFieldFragList *) arg)->object.this$));
          }
          static PyObject *t_WeightedFieldFragList_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WeightedFieldFragList::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WeightedFieldFragList_init_(t_WeightedFieldFragList *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            WeightedFieldFragList object((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              INT_CALL(object = WeightedFieldFragList(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_WeightedFieldFragList_add(t_WeightedFieldFragList *self, PyObject *args)
          {
            jint a0;
            jint a1;
            ::java::util::List a2((jobject) NULL);
            PyTypeObject **p2;

            if (!parseArgs(args, "IIK", ::java::util::List::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(self->object.add(a0, a1, a2));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(WeightedFieldFragList), (PyObject *) self, "add", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FieldQuery$QueryPhraseMap.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/vectorhighlight/FieldTermStack$TermInfo.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/vectorhighlight/FieldQuery.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FieldQuery$QueryPhraseMap::class$ = NULL;
          jmethodID *FieldQuery$QueryPhraseMap::mids$ = NULL;
          bool FieldQuery$QueryPhraseMap::live$ = false;

          jclass FieldQuery$QueryPhraseMap::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FieldQuery$QueryPhraseMap");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d4060136] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/vectorhighlight/FieldQuery;)V");
              mids$[mid_getBoost_54c6a176] = env->getMethodID(cls, "getBoost", "()F");
              mids$[mid_getSlop_54c6a179] = env->getMethodID(cls, "getSlop", "()I");
              mids$[mid_getTermMap_1ad656ab] = env->getMethodID(cls, "getTermMap", "(Ljava/lang/String;)Lorg/apache/lucene/search/vectorhighlight/FieldQuery$QueryPhraseMap;");
              mids$[mid_getTermOrPhraseNumber_54c6a179] = env->getMethodID(cls, "getTermOrPhraseNumber", "()I");
              mids$[mid_isTerminal_54c6a16a] = env->getMethodID(cls, "isTerminal", "()Z");
              mids$[mid_isValidTermOrPhrase_1fde8fcf] = env->getMethodID(cls, "isValidTermOrPhrase", "(Ljava/util/List;)Z");
              mids$[mid_searchPhrase_94f40592] = env->getMethodID(cls, "searchPhrase", "(Ljava/util/List;)Lorg/apache/lucene/search/vectorhighlight/FieldQuery$QueryPhraseMap;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FieldQuery$QueryPhraseMap::FieldQuery$QueryPhraseMap(const ::org::apache::lucene::search::vectorhighlight::FieldQuery & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d4060136, a0.this$)) {}

          jfloat FieldQuery$QueryPhraseMap::getBoost() const
          {
            return env->callFloatMethod(this$, mids$[mid_getBoost_54c6a176]);
          }

          jint FieldQuery$QueryPhraseMap::getSlop() const
          {
            return env->callIntMethod(this$, mids$[mid_getSlop_54c6a179]);
          }

          FieldQuery$QueryPhraseMap FieldQuery$QueryPhraseMap::getTermMap(const ::java::lang::String & a0) const
          {
            return FieldQuery$QueryPhraseMap(env->callObjectMethod(this$, mids$[mid_getTermMap_1ad656ab], a0.this$));
          }

          jint FieldQuery$QueryPhraseMap::getTermOrPhraseNumber() const
          {
            return env->callIntMethod(this$, mids$[mid_getTermOrPhraseNumber_54c6a179]);
          }

          jboolean FieldQuery$QueryPhraseMap::isTerminal() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isTerminal_54c6a16a]);
          }

          jboolean FieldQuery$QueryPhraseMap::isValidTermOrPhrase(const ::java::util::List & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isValidTermOrPhrase_1fde8fcf], a0.this$);
          }

          FieldQuery$QueryPhraseMap FieldQuery$QueryPhraseMap::searchPhrase(const ::java::util::List & a0) const
          {
            return FieldQuery$QueryPhraseMap(env->callObjectMethod(this$, mids$[mid_searchPhrase_94f40592], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FieldQuery$QueryPhraseMap_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldQuery$QueryPhraseMap_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FieldQuery$QueryPhraseMap_init_(t_FieldQuery$QueryPhraseMap *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FieldQuery$QueryPhraseMap_getBoost(t_FieldQuery$QueryPhraseMap *self);
          static PyObject *t_FieldQuery$QueryPhraseMap_getSlop(t_FieldQuery$QueryPhraseMap *self);
          static PyObject *t_FieldQuery$QueryPhraseMap_getTermMap(t_FieldQuery$QueryPhraseMap *self, PyObject *arg);
          static PyObject *t_FieldQuery$QueryPhraseMap_getTermOrPhraseNumber(t_FieldQuery$QueryPhraseMap *self);
          static PyObject *t_FieldQuery$QueryPhraseMap_isTerminal(t_FieldQuery$QueryPhraseMap *self);
          static PyObject *t_FieldQuery$QueryPhraseMap_isValidTermOrPhrase(t_FieldQuery$QueryPhraseMap *self, PyObject *arg);
          static PyObject *t_FieldQuery$QueryPhraseMap_searchPhrase(t_FieldQuery$QueryPhraseMap *self, PyObject *arg);
          static PyObject *t_FieldQuery$QueryPhraseMap_get__boost(t_FieldQuery$QueryPhraseMap *self, void *data);
          static PyObject *t_FieldQuery$QueryPhraseMap_get__slop(t_FieldQuery$QueryPhraseMap *self, void *data);
          static PyObject *t_FieldQuery$QueryPhraseMap_get__termOrPhraseNumber(t_FieldQuery$QueryPhraseMap *self, void *data);
          static PyObject *t_FieldQuery$QueryPhraseMap_get__terminal(t_FieldQuery$QueryPhraseMap *self, void *data);
          static PyGetSetDef t_FieldQuery$QueryPhraseMap__fields_[] = {
            DECLARE_GET_FIELD(t_FieldQuery$QueryPhraseMap, boost),
            DECLARE_GET_FIELD(t_FieldQuery$QueryPhraseMap, slop),
            DECLARE_GET_FIELD(t_FieldQuery$QueryPhraseMap, termOrPhraseNumber),
            DECLARE_GET_FIELD(t_FieldQuery$QueryPhraseMap, terminal),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldQuery$QueryPhraseMap__methods_[] = {
            DECLARE_METHOD(t_FieldQuery$QueryPhraseMap, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldQuery$QueryPhraseMap, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldQuery$QueryPhraseMap, getBoost, METH_NOARGS),
            DECLARE_METHOD(t_FieldQuery$QueryPhraseMap, getSlop, METH_NOARGS),
            DECLARE_METHOD(t_FieldQuery$QueryPhraseMap, getTermMap, METH_O),
            DECLARE_METHOD(t_FieldQuery$QueryPhraseMap, getTermOrPhraseNumber, METH_NOARGS),
            DECLARE_METHOD(t_FieldQuery$QueryPhraseMap, isTerminal, METH_NOARGS),
            DECLARE_METHOD(t_FieldQuery$QueryPhraseMap, isValidTermOrPhrase, METH_O),
            DECLARE_METHOD(t_FieldQuery$QueryPhraseMap, searchPhrase, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FieldQuery$QueryPhraseMap, t_FieldQuery$QueryPhraseMap, ::java::lang::Object, FieldQuery$QueryPhraseMap, t_FieldQuery$QueryPhraseMap_init_, 0, 0, t_FieldQuery$QueryPhraseMap__fields_, 0, 0);

          void t_FieldQuery$QueryPhraseMap::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldQuery$QueryPhraseMap), module, "FieldQuery$QueryPhraseMap", 0);
          }

          void t_FieldQuery$QueryPhraseMap::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FieldQuery$QueryPhraseMap).tp_dict, "class_", make_descriptor(FieldQuery$QueryPhraseMap::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FieldQuery$QueryPhraseMap).tp_dict, "wrapfn_", make_descriptor(t_FieldQuery$QueryPhraseMap::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FieldQuery$QueryPhraseMap).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldQuery$QueryPhraseMap::initializeClass, 1)))
              return NULL;
            return t_FieldQuery$QueryPhraseMap::wrap_Object(FieldQuery$QueryPhraseMap(((t_FieldQuery$QueryPhraseMap *) arg)->object.this$));
          }
          static PyObject *t_FieldQuery$QueryPhraseMap_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldQuery$QueryPhraseMap::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FieldQuery$QueryPhraseMap_init_(t_FieldQuery$QueryPhraseMap *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::vectorhighlight::FieldQuery a0((jobject) NULL);
            FieldQuery$QueryPhraseMap object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::vectorhighlight::FieldQuery::initializeClass, &a0))
            {
              INT_CALL(object = FieldQuery$QueryPhraseMap(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_getBoost(t_FieldQuery$QueryPhraseMap *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getBoost());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_getSlop(t_FieldQuery$QueryPhraseMap *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getSlop());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_getTermMap(t_FieldQuery$QueryPhraseMap *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            FieldQuery$QueryPhraseMap result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getTermMap(a0));
              return t_FieldQuery$QueryPhraseMap::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getTermMap", arg);
            return NULL;
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_getTermOrPhraseNumber(t_FieldQuery$QueryPhraseMap *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getTermOrPhraseNumber());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_isTerminal(t_FieldQuery$QueryPhraseMap *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isTerminal());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_isValidTermOrPhrase(t_FieldQuery$QueryPhraseMap *self, PyObject *arg)
          {
            ::java::util::List a0((jobject) NULL);
            PyTypeObject **p0;
            jboolean result;

            if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(result = self->object.isValidTermOrPhrase(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "isValidTermOrPhrase", arg);
            return NULL;
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_searchPhrase(t_FieldQuery$QueryPhraseMap *self, PyObject *arg)
          {
            ::java::util::List a0((jobject) NULL);
            PyTypeObject **p0;
            FieldQuery$QueryPhraseMap result((jobject) NULL);

            if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(result = self->object.searchPhrase(a0));
              return t_FieldQuery$QueryPhraseMap::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "searchPhrase", arg);
            return NULL;
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_get__boost(t_FieldQuery$QueryPhraseMap *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getBoost());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_get__slop(t_FieldQuery$QueryPhraseMap *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getSlop());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_get__termOrPhraseNumber(t_FieldQuery$QueryPhraseMap *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getTermOrPhraseNumber());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_get__terminal(t_FieldQuery$QueryPhraseMap *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isTerminal());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/gl/GalicianStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {

          ::java::lang::Class *GalicianStemFilter::class$ = NULL;
          jmethodID *GalicianStemFilter::mids$ = NULL;
          bool GalicianStemFilter::live$ = false;

          jclass GalicianStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/gl/GalicianStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GalicianStemFilter::GalicianStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean GalicianStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {
          static PyObject *t_GalicianStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GalicianStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GalicianStemFilter_init_(t_GalicianStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GalicianStemFilter_incrementToken(t_GalicianStemFilter *self, PyObject *args);

          static PyMethodDef t_GalicianStemFilter__methods_[] = {
            DECLARE_METHOD(t_GalicianStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GalicianStemFilter, t_GalicianStemFilter, ::org::apache::lucene::analysis::TokenFilter, GalicianStemFilter, t_GalicianStemFilter_init_, 0, 0, 0, 0, 0);

          void t_GalicianStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(GalicianStemFilter), module, "GalicianStemFilter", 0);
          }

          void t_GalicianStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GalicianStemFilter).tp_dict, "class_", make_descriptor(GalicianStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GalicianStemFilter).tp_dict, "wrapfn_", make_descriptor(t_GalicianStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GalicianStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GalicianStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GalicianStemFilter::initializeClass, 1)))
              return NULL;
            return t_GalicianStemFilter::wrap_Object(GalicianStemFilter(((t_GalicianStemFilter *) arg)->object.this$));
          }
          static PyObject *t_GalicianStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GalicianStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GalicianStemFilter_init_(t_GalicianStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            GalicianStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = GalicianStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GalicianStemFilter_incrementToken(t_GalicianStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(GalicianStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MatchAllDocsQuery.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/Weight.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MatchAllDocsQuery::class$ = NULL;
        jmethodID *MatchAllDocsQuery::mids$ = NULL;
        bool MatchAllDocsQuery::live$ = false;

        jclass MatchAllDocsQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MatchAllDocsQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MatchAllDocsQuery::MatchAllDocsQuery() : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::search::Weight MatchAllDocsQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
        }

        jboolean MatchAllDocsQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void MatchAllDocsQuery::extractTerms(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
        }

        jint MatchAllDocsQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String MatchAllDocsQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MatchAllDocsQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MatchAllDocsQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MatchAllDocsQuery_init_(t_MatchAllDocsQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MatchAllDocsQuery_createWeight(t_MatchAllDocsQuery *self, PyObject *args);
        static PyObject *t_MatchAllDocsQuery_equals(t_MatchAllDocsQuery *self, PyObject *args);
        static PyObject *t_MatchAllDocsQuery_extractTerms(t_MatchAllDocsQuery *self, PyObject *args);
        static PyObject *t_MatchAllDocsQuery_hashCode(t_MatchAllDocsQuery *self, PyObject *args);
        static PyObject *t_MatchAllDocsQuery_toString(t_MatchAllDocsQuery *self, PyObject *args);

        static PyMethodDef t_MatchAllDocsQuery__methods_[] = {
          DECLARE_METHOD(t_MatchAllDocsQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MatchAllDocsQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MatchAllDocsQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_MatchAllDocsQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_MatchAllDocsQuery, extractTerms, METH_VARARGS),
          DECLARE_METHOD(t_MatchAllDocsQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_MatchAllDocsQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MatchAllDocsQuery, t_MatchAllDocsQuery, ::org::apache::lucene::search::Query, MatchAllDocsQuery, t_MatchAllDocsQuery_init_, 0, 0, 0, 0, 0);

        void t_MatchAllDocsQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(MatchAllDocsQuery), module, "MatchAllDocsQuery", 0);
        }

        void t_MatchAllDocsQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MatchAllDocsQuery).tp_dict, "class_", make_descriptor(MatchAllDocsQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MatchAllDocsQuery).tp_dict, "wrapfn_", make_descriptor(t_MatchAllDocsQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MatchAllDocsQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MatchAllDocsQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MatchAllDocsQuery::initializeClass, 1)))
            return NULL;
          return t_MatchAllDocsQuery::wrap_Object(MatchAllDocsQuery(((t_MatchAllDocsQuery *) arg)->object.this$));
        }
        static PyObject *t_MatchAllDocsQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MatchAllDocsQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MatchAllDocsQuery_init_(t_MatchAllDocsQuery *self, PyObject *args, PyObject *kwds)
        {
          MatchAllDocsQuery object((jobject) NULL);

          INT_CALL(object = MatchAllDocsQuery());
          self->object = object;

          return 0;
        }

        static PyObject *t_MatchAllDocsQuery_createWeight(t_MatchAllDocsQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.createWeight(a0));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MatchAllDocsQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_MatchAllDocsQuery_equals(t_MatchAllDocsQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(MatchAllDocsQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_MatchAllDocsQuery_extractTerms(t_MatchAllDocsQuery *self, PyObject *args)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.extractTerms(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(MatchAllDocsQuery), (PyObject *) self, "extractTerms", args, 2);
        }

        static PyObject *t_MatchAllDocsQuery_hashCode(t_MatchAllDocsQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MatchAllDocsQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_MatchAllDocsQuery_toString(t_MatchAllDocsQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(MatchAllDocsQuery), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *Version::class$ = NULL;
        jmethodID *Version::mids$ = NULL;
        bool Version::live$ = false;
        Version *Version::LUCENE_30 = NULL;
        Version *Version::LUCENE_31 = NULL;
        Version *Version::LUCENE_32 = NULL;
        Version *Version::LUCENE_33 = NULL;
        Version *Version::LUCENE_34 = NULL;
        Version *Version::LUCENE_35 = NULL;
        Version *Version::LUCENE_36 = NULL;
        Version *Version::LUCENE_3_0 = NULL;
        Version *Version::LUCENE_3_1 = NULL;
        Version *Version::LUCENE_3_2 = NULL;
        Version *Version::LUCENE_3_3 = NULL;
        Version *Version::LUCENE_3_4 = NULL;
        Version *Version::LUCENE_3_5 = NULL;
        Version *Version::LUCENE_3_6 = NULL;
        Version *Version::LUCENE_40 = NULL;
        Version *Version::LUCENE_41 = NULL;
        Version *Version::LUCENE_42 = NULL;
        Version *Version::LUCENE_43 = NULL;
        Version *Version::LUCENE_44 = NULL;
        Version *Version::LUCENE_45 = NULL;
        Version *Version::LUCENE_46 = NULL;
        Version *Version::LUCENE_47 = NULL;
        Version *Version::LUCENE_48 = NULL;
        Version *Version::LUCENE_4_0 = NULL;
        Version *Version::LUCENE_4_1 = NULL;
        Version *Version::LUCENE_4_2 = NULL;
        Version *Version::LUCENE_4_3 = NULL;
        Version *Version::LUCENE_4_4 = NULL;
        Version *Version::LUCENE_4_5 = NULL;
        Version *Version::LUCENE_4_6 = NULL;
        Version *Version::LUCENE_4_7 = NULL;
        Version *Version::LUCENE_4_8 = NULL;
        Version *Version::LUCENE_4_9 = NULL;
        Version *Version::LUCENE_CURRENT = NULL;

        jclass Version::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/Version");

            mids$ = new jmethodID[max_mid];
            mids$[mid_onOrAfter_0d96cf3f] = env->getMethodID(cls, "onOrAfter", "(Lorg/apache/lucene/util/Version;)Z");
            mids$[mid_parseLeniently_54fbdb70] = env->getStaticMethodID(cls, "parseLeniently", "(Ljava/lang/String;)Lorg/apache/lucene/util/Version;");
            mids$[mid_valueOf_54fbdb70] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/util/Version;");
            mids$[mid_values_f17d8c5a] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/util/Version;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            LUCENE_30 = new Version(env->getStaticObjectField(cls, "LUCENE_30", "Lorg/apache/lucene/util/Version;"));
            LUCENE_31 = new Version(env->getStaticObjectField(cls, "LUCENE_31", "Lorg/apache/lucene/util/Version;"));
            LUCENE_32 = new Version(env->getStaticObjectField(cls, "LUCENE_32", "Lorg/apache/lucene/util/Version;"));
            LUCENE_33 = new Version(env->getStaticObjectField(cls, "LUCENE_33", "Lorg/apache/lucene/util/Version;"));
            LUCENE_34 = new Version(env->getStaticObjectField(cls, "LUCENE_34", "Lorg/apache/lucene/util/Version;"));
            LUCENE_35 = new Version(env->getStaticObjectField(cls, "LUCENE_35", "Lorg/apache/lucene/util/Version;"));
            LUCENE_36 = new Version(env->getStaticObjectField(cls, "LUCENE_36", "Lorg/apache/lucene/util/Version;"));
            LUCENE_3_0 = new Version(env->getStaticObjectField(cls, "LUCENE_3_0", "Lorg/apache/lucene/util/Version;"));
            LUCENE_3_1 = new Version(env->getStaticObjectField(cls, "LUCENE_3_1", "Lorg/apache/lucene/util/Version;"));
            LUCENE_3_2 = new Version(env->getStaticObjectField(cls, "LUCENE_3_2", "Lorg/apache/lucene/util/Version;"));
            LUCENE_3_3 = new Version(env->getStaticObjectField(cls, "LUCENE_3_3", "Lorg/apache/lucene/util/Version;"));
            LUCENE_3_4 = new Version(env->getStaticObjectField(cls, "LUCENE_3_4", "Lorg/apache/lucene/util/Version;"));
            LUCENE_3_5 = new Version(env->getStaticObjectField(cls, "LUCENE_3_5", "Lorg/apache/lucene/util/Version;"));
            LUCENE_3_6 = new Version(env->getStaticObjectField(cls, "LUCENE_3_6", "Lorg/apache/lucene/util/Version;"));
            LUCENE_40 = new Version(env->getStaticObjectField(cls, "LUCENE_40", "Lorg/apache/lucene/util/Version;"));
            LUCENE_41 = new Version(env->getStaticObjectField(cls, "LUCENE_41", "Lorg/apache/lucene/util/Version;"));
            LUCENE_42 = new Version(env->getStaticObjectField(cls, "LUCENE_42", "Lorg/apache/lucene/util/Version;"));
            LUCENE_43 = new Version(env->getStaticObjectField(cls, "LUCENE_43", "Lorg/apache/lucene/util/Version;"));
            LUCENE_44 = new Version(env->getStaticObjectField(cls, "LUCENE_44", "Lorg/apache/lucene/util/Version;"));
            LUCENE_45 = new Version(env->getStaticObjectField(cls, "LUCENE_45", "Lorg/apache/lucene/util/Version;"));
            LUCENE_46 = new Version(env->getStaticObjectField(cls, "LUCENE_46", "Lorg/apache/lucene/util/Version;"));
            LUCENE_47 = new Version(env->getStaticObjectField(cls, "LUCENE_47", "Lorg/apache/lucene/util/Version;"));
            LUCENE_48 = new Version(env->getStaticObjectField(cls, "LUCENE_48", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_0 = new Version(env->getStaticObjectField(cls, "LUCENE_4_0", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_1 = new Version(env->getStaticObjectField(cls, "LUCENE_4_1", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_2 = new Version(env->getStaticObjectField(cls, "LUCENE_4_2", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_3 = new Version(env->getStaticObjectField(cls, "LUCENE_4_3", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_4 = new Version(env->getStaticObjectField(cls, "LUCENE_4_4", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_5 = new Version(env->getStaticObjectField(cls, "LUCENE_4_5", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_6 = new Version(env->getStaticObjectField(cls, "LUCENE_4_6", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_7 = new Version(env->getStaticObjectField(cls, "LUCENE_4_7", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_8 = new Version(env->getStaticObjectField(cls, "LUCENE_4_8", "Lorg/apache/lucene/util/Version;"));
            LUCENE_4_9 = new Version(env->getStaticObjectField(cls, "LUCENE_4_9", "Lorg/apache/lucene/util/Version;"));
            LUCENE_CURRENT = new Version(env->getStaticObjectField(cls, "LUCENE_CURRENT", "Lorg/apache/lucene/util/Version;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean Version::onOrAfter(const Version & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_onOrAfter_0d96cf3f], a0.this$);
        }

        Version Version::parseLeniently(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return Version(env->callStaticObjectMethod(cls, mids$[mid_parseLeniently_54fbdb70], a0.this$));
        }

        Version Version::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return Version(env->callStaticObjectMethod(cls, mids$[mid_valueOf_54fbdb70], a0.this$));
        }

        JArray< Version > Version::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< Version >(env->callStaticObjectMethod(cls, mids$[mid_values_f17d8c5a]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_Version_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Version_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Version_of_(t_Version *self, PyObject *args);
        static PyObject *t_Version_onOrAfter(t_Version *self, PyObject *arg);
        static PyObject *t_Version_parseLeniently(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Version_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_Version_values(PyTypeObject *type);
        static PyObject *t_Version_get__parameters_(t_Version *self, void *data);
        static PyGetSetDef t_Version__fields_[] = {
          DECLARE_GET_FIELD(t_Version, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Version__methods_[] = {
          DECLARE_METHOD(t_Version, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Version, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Version, of_, METH_VARARGS),
          DECLARE_METHOD(t_Version, onOrAfter, METH_O),
          DECLARE_METHOD(t_Version, parseLeniently, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Version, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_Version, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Version, t_Version, ::java::lang::Enum, Version, abstract_init, 0, 0, t_Version__fields_, 0, 0);
        PyObject *t_Version::wrap_Object(const Version& object, PyTypeObject *p0)
        {
          PyObject *obj = t_Version::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_Version *self = (t_Version *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_Version::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_Version::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_Version *self = (t_Version *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_Version::install(PyObject *module)
        {
          installType(&PY_TYPE(Version), module, "Version", 0);
        }

        void t_Version::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "class_", make_descriptor(Version::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "wrapfn_", make_descriptor(t_Version::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(Version::initializeClass);
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_30", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_30)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_31", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_31)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_32", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_32)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_33", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_33)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_34", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_34)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_35", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_35)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_36", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_36)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_3_0", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_3_0)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_3_1", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_3_1)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_3_2", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_3_2)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_3_3", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_3_3)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_3_4", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_3_4)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_3_5", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_3_5)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_3_6", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_3_6)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_40", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_40)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_41", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_41)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_42", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_42)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_43", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_43)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_44", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_44)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_45", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_45)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_46", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_46)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_47", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_47)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_48", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_48)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_0", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_0)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_1", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_1)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_2", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_2)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_3", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_3)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_4", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_4)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_5", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_5)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_6", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_6)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_7", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_7)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_8", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_8)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_4_9", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_4_9)));
          PyDict_SetItemString(PY_TYPE(Version).tp_dict, "LUCENE_CURRENT", make_descriptor(t_Version::wrap_Object(*Version::LUCENE_CURRENT)));
        }

        static PyObject *t_Version_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Version::initializeClass, 1)))
            return NULL;
          return t_Version::wrap_Object(Version(((t_Version *) arg)->object.this$));
        }
        static PyObject *t_Version_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Version::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Version_of_(t_Version *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_Version_onOrAfter(t_Version *self, PyObject *arg)
        {
          Version a0((jobject) NULL);
          PyTypeObject **p0;
          jboolean result;

          if (!parseArg(arg, "K", Version::initializeClass, &a0, &p0, t_Version::parameters_))
          {
            OBJ_CALL(result = self->object.onOrAfter(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "onOrAfter", arg);
          return NULL;
        }

        static PyObject *t_Version_parseLeniently(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          Version result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::Version::parseLeniently(a0));
            return t_Version::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "parseLeniently", arg);
          return NULL;
        }

        static PyObject *t_Version_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          Version result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::Version::valueOf(a0));
            return t_Version::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_Version_values(PyTypeObject *type)
        {
          JArray< Version > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::util::Version::values());
          return JArray<jobject>(result.this$).wrap(t_Version::wrap_jobject);
        }
        static PyObject *t_Version_get__parameters_(t_Version *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCacheTermsFilter.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/FieldCache.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCacheTermsFilter::class$ = NULL;
        jmethodID *FieldCacheTermsFilter::mids$ = NULL;
        bool FieldCacheTermsFilter::live$ = false;

        jclass FieldCacheTermsFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCacheTermsFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_8fbc1a2e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_init$_ba45d66a] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[Ljava/lang/String;)V");
            mids$[mid_getDocIdSet_ccce0897] = env->getMethodID(cls, "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_getFieldCache_a7c1cc27] = env->getMethodID(cls, "getFieldCache", "()Lorg/apache/lucene/search/FieldCache;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldCacheTermsFilter::FieldCacheTermsFilter(const ::java::lang::String & a0, const JArray< ::org::apache::lucene::util::BytesRef > & a1) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_8fbc1a2e, a0.this$, a1.this$)) {}

        FieldCacheTermsFilter::FieldCacheTermsFilter(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_ba45d66a, a0.this$, a1.this$)) {}

        ::org::apache::lucene::search::DocIdSet FieldCacheTermsFilter::getDocIdSet(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
        {
          return ::org::apache::lucene::search::DocIdSet(env->callObjectMethod(this$, mids$[mid_getDocIdSet_ccce0897], a0.this$, a1.this$));
        }

        ::org::apache::lucene::search::FieldCache FieldCacheTermsFilter::getFieldCache() const
        {
          return ::org::apache::lucene::search::FieldCache(env->callObjectMethod(this$, mids$[mid_getFieldCache_a7c1cc27]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCacheTermsFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCacheTermsFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldCacheTermsFilter_init_(t_FieldCacheTermsFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldCacheTermsFilter_getDocIdSet(t_FieldCacheTermsFilter *self, PyObject *args);
        static PyObject *t_FieldCacheTermsFilter_getFieldCache(t_FieldCacheTermsFilter *self);
        static PyObject *t_FieldCacheTermsFilter_get__fieldCache(t_FieldCacheTermsFilter *self, void *data);
        static PyGetSetDef t_FieldCacheTermsFilter__fields_[] = {
          DECLARE_GET_FIELD(t_FieldCacheTermsFilter, fieldCache),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldCacheTermsFilter__methods_[] = {
          DECLARE_METHOD(t_FieldCacheTermsFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheTermsFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheTermsFilter, getDocIdSet, METH_VARARGS),
          DECLARE_METHOD(t_FieldCacheTermsFilter, getFieldCache, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCacheTermsFilter, t_FieldCacheTermsFilter, ::org::apache::lucene::search::Filter, FieldCacheTermsFilter, t_FieldCacheTermsFilter_init_, 0, 0, t_FieldCacheTermsFilter__fields_, 0, 0);

        void t_FieldCacheTermsFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCacheTermsFilter), module, "FieldCacheTermsFilter", 0);
        }

        void t_FieldCacheTermsFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCacheTermsFilter).tp_dict, "class_", make_descriptor(FieldCacheTermsFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCacheTermsFilter).tp_dict, "wrapfn_", make_descriptor(t_FieldCacheTermsFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCacheTermsFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCacheTermsFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCacheTermsFilter::initializeClass, 1)))
            return NULL;
          return t_FieldCacheTermsFilter::wrap_Object(FieldCacheTermsFilter(((t_FieldCacheTermsFilter *) arg)->object.this$));
        }
        static PyObject *t_FieldCacheTermsFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCacheTermsFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldCacheTermsFilter_init_(t_FieldCacheTermsFilter *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< ::org::apache::lucene::util::BytesRef > a1((jobject) NULL);
              FieldCacheTermsFilter object((jobject) NULL);

              if (!parseArgs(args, "s[k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                INT_CALL(object = FieldCacheTermsFilter(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< ::java::lang::String > a1((jobject) NULL);
              FieldCacheTermsFilter object((jobject) NULL);

              if (!parseArgs(args, "s[s", &a0, &a1))
              {
                INT_CALL(object = FieldCacheTermsFilter(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldCacheTermsFilter_getDocIdSet(t_FieldCacheTermsFilter *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocIdSet(a0, a1));
            return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldCacheTermsFilter), (PyObject *) self, "getDocIdSet", args, 2);
        }

        static PyObject *t_FieldCacheTermsFilter_getFieldCache(t_FieldCacheTermsFilter *self)
        {
          ::org::apache::lucene::search::FieldCache result((jobject) NULL);
          OBJ_CALL(result = self->object.getFieldCache());
          return ::org::apache::lucene::search::t_FieldCache::wrap_Object(result);
        }

        static PyObject *t_FieldCacheTermsFilter_get__fieldCache(t_FieldCacheTermsFilter *self, void *data)
        {
          ::org::apache::lucene::search::FieldCache value((jobject) NULL);
          OBJ_CALL(value = self->object.getFieldCache());
          return ::org::apache::lucene::search::t_FieldCache::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/postingshighlight/PostingsHighlighter.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/TopDocs.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/util/Map.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace postingshighlight {

          ::java::lang::Class *PostingsHighlighter::class$ = NULL;
          jmethodID *PostingsHighlighter::mids$ = NULL;
          bool PostingsHighlighter::live$ = false;
          jint PostingsHighlighter::DEFAULT_MAX_LENGTH = (jint) 0;

          jclass PostingsHighlighter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/postingshighlight/PostingsHighlighter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_highlight_cfb8b283] = env->getMethodID(cls, "highlight", "(Ljava/lang/String;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/TopDocs;)[Ljava/lang/String;");
              mids$[mid_highlight_c287afc1] = env->getMethodID(cls, "highlight", "(Ljava/lang/String;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/TopDocs;I)[Ljava/lang/String;");
              mids$[mid_highlightFields_52512a83] = env->getMethodID(cls, "highlightFields", "([Ljava/lang/String;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/TopDocs;)Ljava/util/Map;");
              mids$[mid_highlightFields_d3afe138] = env->getMethodID(cls, "highlightFields", "([Ljava/lang/String;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/IndexSearcher;[I[I)Ljava/util/Map;");
              mids$[mid_highlightFields_20e79c3d] = env->getMethodID(cls, "highlightFields", "([Ljava/lang/String;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/TopDocs;[I)Ljava/util/Map;");
              mids$[mid_getFormatter_a176835f] = env->getMethodID(cls, "getFormatter", "(Ljava/lang/String;)Lorg/apache/lucene/search/postingshighlight/PassageFormatter;");
              mids$[mid_getScorer_b8762390] = env->getMethodID(cls, "getScorer", "(Ljava/lang/String;)Lorg/apache/lucene/search/postingshighlight/PassageScorer;");
              mids$[mid_getMultiValuedSeparator_5fdc3f5d] = env->getMethodID(cls, "getMultiValuedSeparator", "(Ljava/lang/String;)C");
              mids$[mid_highlightFieldsAsObjects_d3afe138] = env->getMethodID(cls, "highlightFieldsAsObjects", "([Ljava/lang/String;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/IndexSearcher;[I[I)Ljava/util/Map;");
              mids$[mid_getBreakIterator_4cb4d821] = env->getMethodID(cls, "getBreakIterator", "(Ljava/lang/String;)Ljava/text/BreakIterator;");
              mids$[mid_loadFieldValues_350d45ad] = env->getMethodID(cls, "loadFieldValues", "(Lorg/apache/lucene/search/IndexSearcher;[Ljava/lang/String;[II)[[Ljava/lang/String;");
              mids$[mid_getIndexAnalyzer_29a2299f] = env->getMethodID(cls, "getIndexAnalyzer", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer;");
              mids$[mid_getEmptyHighlight_863ca84c] = env->getMethodID(cls, "getEmptyHighlight", "(Ljava/lang/String;Ljava/text/BreakIterator;I)[Lorg/apache/lucene/search/postingshighlight/Passage;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_LENGTH = env->getStaticIntField(cls, "DEFAULT_MAX_LENGTH");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PostingsHighlighter::PostingsHighlighter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          PostingsHighlighter::PostingsHighlighter(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          JArray< ::java::lang::String > PostingsHighlighter::highlight(const ::java::lang::String & a0, const ::org::apache::lucene::search::Query & a1, const ::org::apache::lucene::search::IndexSearcher & a2, const ::org::apache::lucene::search::TopDocs & a3) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_highlight_cfb8b283], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          JArray< ::java::lang::String > PostingsHighlighter::highlight(const ::java::lang::String & a0, const ::org::apache::lucene::search::Query & a1, const ::org::apache::lucene::search::IndexSearcher & a2, const ::org::apache::lucene::search::TopDocs & a3, jint a4) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_highlight_c287afc1], a0.this$, a1.this$, a2.this$, a3.this$, a4));
          }

          ::java::util::Map PostingsHighlighter::highlightFields(const JArray< ::java::lang::String > & a0, const ::org::apache::lucene::search::Query & a1, const ::org::apache::lucene::search::IndexSearcher & a2, const ::org::apache::lucene::search::TopDocs & a3) const
          {
            return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_highlightFields_52512a83], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          ::java::util::Map PostingsHighlighter::highlightFields(const JArray< ::java::lang::String > & a0, const ::org::apache::lucene::search::Query & a1, const ::org::apache::lucene::search::IndexSearcher & a2, const JArray< jint > & a3, const JArray< jint > & a4) const
          {
            return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_highlightFields_d3afe138], a0.this$, a1.this$, a2.this$, a3.this$, a4.this$));
          }

          ::java::util::Map PostingsHighlighter::highlightFields(const JArray< ::java::lang::String > & a0, const ::org::apache::lucene::search::Query & a1, const ::org::apache::lucene::search::IndexSearcher & a2, const ::org::apache::lucene::search::TopDocs & a3, const JArray< jint > & a4) const
          {
            return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_highlightFields_20e79c3d], a0.this$, a1.this$, a2.this$, a3.this$, a4.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace postingshighlight {
          static PyObject *t_PostingsHighlighter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PostingsHighlighter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PostingsHighlighter_init_(t_PostingsHighlighter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PostingsHighlighter_highlight(t_PostingsHighlighter *self, PyObject *args);
          static PyObject *t_PostingsHighlighter_highlightFields(t_PostingsHighlighter *self, PyObject *args);

          static PyMethodDef t_PostingsHighlighter__methods_[] = {
            DECLARE_METHOD(t_PostingsHighlighter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PostingsHighlighter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PostingsHighlighter, highlight, METH_VARARGS),
            DECLARE_METHOD(t_PostingsHighlighter, highlightFields, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PostingsHighlighter, t_PostingsHighlighter, ::java::lang::Object, PostingsHighlighter, t_PostingsHighlighter_init_, 0, 0, 0, 0, 0);

          void t_PostingsHighlighter::install(PyObject *module)
          {
            installType(&PY_TYPE(PostingsHighlighter), module, "PostingsHighlighter", 0);
          }

          void t_PostingsHighlighter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PostingsHighlighter).tp_dict, "class_", make_descriptor(PostingsHighlighter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PostingsHighlighter).tp_dict, "wrapfn_", make_descriptor(t_PostingsHighlighter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PostingsHighlighter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(PostingsHighlighter::initializeClass);
            PyDict_SetItemString(PY_TYPE(PostingsHighlighter).tp_dict, "DEFAULT_MAX_LENGTH", make_descriptor(PostingsHighlighter::DEFAULT_MAX_LENGTH));
          }

          static PyObject *t_PostingsHighlighter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PostingsHighlighter::initializeClass, 1)))
              return NULL;
            return t_PostingsHighlighter::wrap_Object(PostingsHighlighter(((t_PostingsHighlighter *) arg)->object.this$));
          }
          static PyObject *t_PostingsHighlighter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PostingsHighlighter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PostingsHighlighter_init_(t_PostingsHighlighter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                PostingsHighlighter object((jobject) NULL);

                INT_CALL(object = PostingsHighlighter());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jint a0;
                PostingsHighlighter object((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  INT_CALL(object = PostingsHighlighter(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PostingsHighlighter_highlight(t_PostingsHighlighter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 4:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::search::Query a1((jobject) NULL);
                ::org::apache::lucene::search::IndexSearcher a2((jobject) NULL);
                ::org::apache::lucene::search::TopDocs a3((jobject) NULL);
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "skkk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::TopDocs::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.highlight(a0, a1, a2, a3));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
              break;
             case 5:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::search::Query a1((jobject) NULL);
                ::org::apache::lucene::search::IndexSearcher a2((jobject) NULL);
                ::org::apache::lucene::search::TopDocs a3((jobject) NULL);
                jint a4;
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "skkkI", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::TopDocs::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(result = self->object.highlight(a0, a1, a2, a3, a4));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "highlight", args);
            return NULL;
          }

          static PyObject *t_PostingsHighlighter_highlightFields(t_PostingsHighlighter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 4:
              {
                JArray< ::java::lang::String > a0((jobject) NULL);
                ::org::apache::lucene::search::Query a1((jobject) NULL);
                ::org::apache::lucene::search::IndexSearcher a2((jobject) NULL);
                ::org::apache::lucene::search::TopDocs a3((jobject) NULL);
                ::java::util::Map result((jobject) NULL);

                if (!parseArgs(args, "[skkk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::TopDocs::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.highlightFields(a0, a1, a2, a3));
                  return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(Object));
                }
              }
              break;
             case 5:
              {
                JArray< ::java::lang::String > a0((jobject) NULL);
                ::org::apache::lucene::search::Query a1((jobject) NULL);
                ::org::apache::lucene::search::IndexSearcher a2((jobject) NULL);
                JArray< jint > a3((jobject) NULL);
                JArray< jint > a4((jobject) NULL);
                ::java::util::Map result((jobject) NULL);

                if (!parseArgs(args, "[skk[I[I", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(result = self->object.highlightFields(a0, a1, a2, a3, a4));
                  return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(Object));
                }
              }
              {
                JArray< ::java::lang::String > a0((jobject) NULL);
                ::org::apache::lucene::search::Query a1((jobject) NULL);
                ::org::apache::lucene::search::IndexSearcher a2((jobject) NULL);
                ::org::apache::lucene::search::TopDocs a3((jobject) NULL);
                JArray< jint > a4((jobject) NULL);
                ::java::util::Map result((jobject) NULL);

                if (!parseArgs(args, "[skkk[I", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::TopDocs::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(result = self->object.highlightFields(a0, a1, a2, a3, a4));
                  return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(Object));
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "highlightFields", args);
            return NULL;
          }
        }
      }
    }
  }
}
