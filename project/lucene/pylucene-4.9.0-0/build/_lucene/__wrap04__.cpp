#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/BufferedChecksumIndexInput.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *BufferedChecksumIndexInput::class$ = NULL;
        jmethodID *BufferedChecksumIndexInput::mids$ = NULL;
        bool BufferedChecksumIndexInput::live$ = false;

        jclass BufferedChecksumIndexInput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/BufferedChecksumIndexInput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_0441f0b2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/IndexInput;)V");
            mids$[mid_clone_4baa952b] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_getChecksum_54c6a17a] = env->getMethodID(cls, "getChecksum", "()J");
            mids$[mid_getFilePointer_54c6a17a] = env->getMethodID(cls, "getFilePointer", "()J");
            mids$[mid_length_54c6a17a] = env->getMethodID(cls, "length", "()J");
            mids$[mid_readByte_54c6a172] = env->getMethodID(cls, "readByte", "()B");
            mids$[mid_readBytes_86f4435f] = env->getMethodID(cls, "readBytes", "([BII)V");
            mids$[mid_slice_d00c83eb] = env->getMethodID(cls, "slice", "(Ljava/lang/String;JJ)Lorg/apache/lucene/store/IndexInput;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BufferedChecksumIndexInput::BufferedChecksumIndexInput(const ::org::apache::lucene::store::IndexInput & a0) : ::org::apache::lucene::store::ChecksumIndexInput(env->newObject(initializeClass, &mids$, mid_init$_0441f0b2, a0.this$)) {}

        ::org::apache::lucene::store::IndexInput BufferedChecksumIndexInput::clone() const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_clone_4baa952b]));
        }

        void BufferedChecksumIndexInput::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        jlong BufferedChecksumIndexInput::getChecksum() const
        {
          return env->callLongMethod(this$, mids$[mid_getChecksum_54c6a17a]);
        }

        jlong BufferedChecksumIndexInput::getFilePointer() const
        {
          return env->callLongMethod(this$, mids$[mid_getFilePointer_54c6a17a]);
        }

        jlong BufferedChecksumIndexInput::length() const
        {
          return env->callLongMethod(this$, mids$[mid_length_54c6a17a]);
        }

        jbyte BufferedChecksumIndexInput::readByte() const
        {
          return env->callByteMethod(this$, mids$[mid_readByte_54c6a172]);
        }

        void BufferedChecksumIndexInput::readBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_readBytes_86f4435f], a0.this$, a1, a2);
        }

        ::org::apache::lucene::store::IndexInput BufferedChecksumIndexInput::slice(const ::java::lang::String & a0, jlong a1, jlong a2) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_slice_d00c83eb], a0.this$, a1, a2));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_BufferedChecksumIndexInput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BufferedChecksumIndexInput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BufferedChecksumIndexInput_init_(t_BufferedChecksumIndexInput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BufferedChecksumIndexInput_clone(t_BufferedChecksumIndexInput *self, PyObject *args);
        static PyObject *t_BufferedChecksumIndexInput_close(t_BufferedChecksumIndexInput *self, PyObject *args);
        static PyObject *t_BufferedChecksumIndexInput_getChecksum(t_BufferedChecksumIndexInput *self, PyObject *args);
        static PyObject *t_BufferedChecksumIndexInput_getFilePointer(t_BufferedChecksumIndexInput *self, PyObject *args);
        static PyObject *t_BufferedChecksumIndexInput_length(t_BufferedChecksumIndexInput *self, PyObject *args);
        static PyObject *t_BufferedChecksumIndexInput_readByte(t_BufferedChecksumIndexInput *self, PyObject *args);
        static PyObject *t_BufferedChecksumIndexInput_readBytes(t_BufferedChecksumIndexInput *self, PyObject *args);
        static PyObject *t_BufferedChecksumIndexInput_slice(t_BufferedChecksumIndexInput *self, PyObject *args);
        static PyObject *t_BufferedChecksumIndexInput_get__checksum(t_BufferedChecksumIndexInput *self, void *data);
        static PyObject *t_BufferedChecksumIndexInput_get__filePointer(t_BufferedChecksumIndexInput *self, void *data);
        static PyGetSetDef t_BufferedChecksumIndexInput__fields_[] = {
          DECLARE_GET_FIELD(t_BufferedChecksumIndexInput, checksum),
          DECLARE_GET_FIELD(t_BufferedChecksumIndexInput, filePointer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BufferedChecksumIndexInput__methods_[] = {
          DECLARE_METHOD(t_BufferedChecksumIndexInput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BufferedChecksumIndexInput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BufferedChecksumIndexInput, clone, METH_VARARGS),
          DECLARE_METHOD(t_BufferedChecksumIndexInput, close, METH_VARARGS),
          DECLARE_METHOD(t_BufferedChecksumIndexInput, getChecksum, METH_VARARGS),
          DECLARE_METHOD(t_BufferedChecksumIndexInput, getFilePointer, METH_VARARGS),
          DECLARE_METHOD(t_BufferedChecksumIndexInput, length, METH_VARARGS),
          DECLARE_METHOD(t_BufferedChecksumIndexInput, readByte, METH_VARARGS),
          DECLARE_METHOD(t_BufferedChecksumIndexInput, readBytes, METH_VARARGS),
          DECLARE_METHOD(t_BufferedChecksumIndexInput, slice, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BufferedChecksumIndexInput, t_BufferedChecksumIndexInput, ::org::apache::lucene::store::ChecksumIndexInput, BufferedChecksumIndexInput, t_BufferedChecksumIndexInput_init_, 0, 0, t_BufferedChecksumIndexInput__fields_, 0, 0);

        void t_BufferedChecksumIndexInput::install(PyObject *module)
        {
          installType(&PY_TYPE(BufferedChecksumIndexInput), module, "BufferedChecksumIndexInput", 0);
        }

        void t_BufferedChecksumIndexInput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BufferedChecksumIndexInput).tp_dict, "class_", make_descriptor(BufferedChecksumIndexInput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BufferedChecksumIndexInput).tp_dict, "wrapfn_", make_descriptor(t_BufferedChecksumIndexInput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BufferedChecksumIndexInput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BufferedChecksumIndexInput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BufferedChecksumIndexInput::initializeClass, 1)))
            return NULL;
          return t_BufferedChecksumIndexInput::wrap_Object(BufferedChecksumIndexInput(((t_BufferedChecksumIndexInput *) arg)->object.this$));
        }
        static PyObject *t_BufferedChecksumIndexInput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BufferedChecksumIndexInput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BufferedChecksumIndexInput_init_(t_BufferedChecksumIndexInput *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
          BufferedChecksumIndexInput object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::store::IndexInput::initializeClass, &a0))
          {
            INT_CALL(object = BufferedChecksumIndexInput(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BufferedChecksumIndexInput_clone(t_BufferedChecksumIndexInput *self, PyObject *args)
        {
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.clone());
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(BufferedChecksumIndexInput), (PyObject *) self, "clone", args, 2);
        }

        static PyObject *t_BufferedChecksumIndexInput_close(t_BufferedChecksumIndexInput *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(BufferedChecksumIndexInput), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_BufferedChecksumIndexInput_getChecksum(t_BufferedChecksumIndexInput *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getChecksum());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(BufferedChecksumIndexInput), (PyObject *) self, "getChecksum", args, 2);
        }

        static PyObject *t_BufferedChecksumIndexInput_getFilePointer(t_BufferedChecksumIndexInput *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getFilePointer());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(BufferedChecksumIndexInput), (PyObject *) self, "getFilePointer", args, 2);
        }

        static PyObject *t_BufferedChecksumIndexInput_length(t_BufferedChecksumIndexInput *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.length());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(BufferedChecksumIndexInput), (PyObject *) self, "length", args, 2);
        }

        static PyObject *t_BufferedChecksumIndexInput_readByte(t_BufferedChecksumIndexInput *self, PyObject *args)
        {
          jbyte result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readByte());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(BufferedChecksumIndexInput), (PyObject *) self, "readByte", args, 2);
        }

        static PyObject *t_BufferedChecksumIndexInput_readBytes(t_BufferedChecksumIndexInput *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.readBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(BufferedChecksumIndexInput), (PyObject *) self, "readBytes", args, 2);
        }

        static PyObject *t_BufferedChecksumIndexInput_slice(t_BufferedChecksumIndexInput *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong a1;
          jlong a2;
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sJJ", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.slice(a0, a1, a2));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(BufferedChecksumIndexInput), (PyObject *) self, "slice", args, 2);
        }

        static PyObject *t_BufferedChecksumIndexInput_get__checksum(t_BufferedChecksumIndexInput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getChecksum());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_BufferedChecksumIndexInput_get__filePointer(t_BufferedChecksumIndexInput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getFilePointer());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pt/PortugueseMinimalStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {

          ::java::lang::Class *PortugueseMinimalStemFilter::class$ = NULL;
          jmethodID *PortugueseMinimalStemFilter::mids$ = NULL;
          bool PortugueseMinimalStemFilter::live$ = false;

          jclass PortugueseMinimalStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pt/PortugueseMinimalStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PortugueseMinimalStemFilter::PortugueseMinimalStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean PortugueseMinimalStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {
          static PyObject *t_PortugueseMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PortugueseMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PortugueseMinimalStemFilter_init_(t_PortugueseMinimalStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PortugueseMinimalStemFilter_incrementToken(t_PortugueseMinimalStemFilter *self, PyObject *args);

          static PyMethodDef t_PortugueseMinimalStemFilter__methods_[] = {
            DECLARE_METHOD(t_PortugueseMinimalStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseMinimalStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseMinimalStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PortugueseMinimalStemFilter, t_PortugueseMinimalStemFilter, ::org::apache::lucene::analysis::TokenFilter, PortugueseMinimalStemFilter, t_PortugueseMinimalStemFilter_init_, 0, 0, 0, 0, 0);

          void t_PortugueseMinimalStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PortugueseMinimalStemFilter), module, "PortugueseMinimalStemFilter", 0);
          }

          void t_PortugueseMinimalStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PortugueseMinimalStemFilter).tp_dict, "class_", make_descriptor(PortugueseMinimalStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PortugueseMinimalStemFilter).tp_dict, "wrapfn_", make_descriptor(t_PortugueseMinimalStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PortugueseMinimalStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PortugueseMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PortugueseMinimalStemFilter::initializeClass, 1)))
              return NULL;
            return t_PortugueseMinimalStemFilter::wrap_Object(PortugueseMinimalStemFilter(((t_PortugueseMinimalStemFilter *) arg)->object.this$));
          }
          static PyObject *t_PortugueseMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PortugueseMinimalStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PortugueseMinimalStemFilter_init_(t_PortugueseMinimalStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            PortugueseMinimalStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = PortugueseMinimalStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PortugueseMinimalStemFilter_incrementToken(t_PortugueseMinimalStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PortugueseMinimalStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/StringField.h"
#include "java/lang/String.h"
#include "org/apache/lucene/document/FieldType.h"
#include "org/apache/lucene/document/Field$Store.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *StringField::class$ = NULL;
        jmethodID *StringField::mids$ = NULL;
        bool StringField::live$ = false;
        ::org::apache::lucene::document::FieldType *StringField::TYPE_NOT_STORED = NULL;
        ::org::apache::lucene::document::FieldType *StringField::TYPE_STORED = NULL;

        jclass StringField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/StringField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_064fa087] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/document/Field$Store;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE_NOT_STORED = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_NOT_STORED", "Lorg/apache/lucene/document/FieldType;"));
            TYPE_STORED = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_STORED", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        StringField::StringField(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::org::apache::lucene::document::Field$Store & a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_064fa087, a0.this$, a1.this$, a2.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_StringField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StringField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_StringField_init_(t_StringField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_StringField__methods_[] = {
          DECLARE_METHOD(t_StringField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StringField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(StringField, t_StringField, ::org::apache::lucene::document::Field, StringField, t_StringField_init_, 0, 0, 0, 0, 0);

        void t_StringField::install(PyObject *module)
        {
          installType(&PY_TYPE(StringField), module, "StringField", 0);
        }

        void t_StringField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(StringField).tp_dict, "class_", make_descriptor(StringField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(StringField).tp_dict, "wrapfn_", make_descriptor(t_StringField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(StringField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(StringField::initializeClass);
          PyDict_SetItemString(PY_TYPE(StringField).tp_dict, "TYPE_NOT_STORED", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*StringField::TYPE_NOT_STORED)));
          PyDict_SetItemString(PY_TYPE(StringField).tp_dict, "TYPE_STORED", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*StringField::TYPE_STORED)));
        }

        static PyObject *t_StringField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, StringField::initializeClass, 1)))
            return NULL;
          return t_StringField::wrap_Object(StringField(((t_StringField *) arg)->object.this$));
        }
        static PyObject *t_StringField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, StringField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_StringField_init_(t_StringField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::document::Field$Store a2((jobject) NULL);
          PyTypeObject **p2;
          StringField object((jobject) NULL);

          if (!parseArgs(args, "ssK", ::org::apache::lucene::document::Field$Store::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::document::t_Field$Store::parameters_))
          {
            INT_CALL(object = StringField(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/FunctionQuery.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Weight.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/util/Set.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {

          ::java::lang::Class *FunctionQuery::class$ = NULL;
          jmethodID *FunctionQuery::mids$ = NULL;
          bool FunctionQuery::live$ = false;

          jclass FunctionQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/FunctionQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_ca78fe7a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;)V");
              mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
              mids$[mid_getValueSource_b62b6193] = env->getMethodID(cls, "getValueSource", "()Lorg/apache/lucene/queries/function/ValueSource;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FunctionQuery::FunctionQuery(const ::org::apache::lucene::queries::function::ValueSource & a0) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_ca78fe7a, a0.this$)) {}

          ::org::apache::lucene::search::Weight FunctionQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
          {
            return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
          }

          jboolean FunctionQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          void FunctionQuery::extractTerms(const ::java::util::Set & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
          }

          ::org::apache::lucene::queries::function::ValueSource FunctionQuery::getValueSource() const
          {
            return ::org::apache::lucene::queries::function::ValueSource(env->callObjectMethod(this$, mids$[mid_getValueSource_b62b6193]));
          }

          jint FunctionQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::org::apache::lucene::search::Query FunctionQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
          }

          ::java::lang::String FunctionQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          static PyObject *t_FunctionQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FunctionQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FunctionQuery_init_(t_FunctionQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FunctionQuery_createWeight(t_FunctionQuery *self, PyObject *args);
          static PyObject *t_FunctionQuery_equals(t_FunctionQuery *self, PyObject *args);
          static PyObject *t_FunctionQuery_extractTerms(t_FunctionQuery *self, PyObject *args);
          static PyObject *t_FunctionQuery_getValueSource(t_FunctionQuery *self);
          static PyObject *t_FunctionQuery_hashCode(t_FunctionQuery *self, PyObject *args);
          static PyObject *t_FunctionQuery_rewrite(t_FunctionQuery *self, PyObject *args);
          static PyObject *t_FunctionQuery_toString(t_FunctionQuery *self, PyObject *args);
          static PyObject *t_FunctionQuery_get__valueSource(t_FunctionQuery *self, void *data);
          static PyGetSetDef t_FunctionQuery__fields_[] = {
            DECLARE_GET_FIELD(t_FunctionQuery, valueSource),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FunctionQuery__methods_[] = {
            DECLARE_METHOD(t_FunctionQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FunctionQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FunctionQuery, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_FunctionQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_FunctionQuery, extractTerms, METH_VARARGS),
            DECLARE_METHOD(t_FunctionQuery, getValueSource, METH_NOARGS),
            DECLARE_METHOD(t_FunctionQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_FunctionQuery, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_FunctionQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FunctionQuery, t_FunctionQuery, ::org::apache::lucene::search::Query, FunctionQuery, t_FunctionQuery_init_, 0, 0, t_FunctionQuery__fields_, 0, 0);

          void t_FunctionQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(FunctionQuery), module, "FunctionQuery", 0);
          }

          void t_FunctionQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FunctionQuery).tp_dict, "class_", make_descriptor(FunctionQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FunctionQuery).tp_dict, "wrapfn_", make_descriptor(t_FunctionQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FunctionQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FunctionQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FunctionQuery::initializeClass, 1)))
              return NULL;
            return t_FunctionQuery::wrap_Object(FunctionQuery(((t_FunctionQuery *) arg)->object.this$));
          }
          static PyObject *t_FunctionQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FunctionQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FunctionQuery_init_(t_FunctionQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
            FunctionQuery object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
            {
              INT_CALL(object = FunctionQuery(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FunctionQuery_createWeight(t_FunctionQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::search::Weight result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.createWeight(a0));
              return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FunctionQuery), (PyObject *) self, "createWeight", args, 2);
          }

          static PyObject *t_FunctionQuery_equals(t_FunctionQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FunctionQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_FunctionQuery_extractTerms(t_FunctionQuery *self, PyObject *args)
          {
            ::java::util::Set a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(self->object.extractTerms(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(FunctionQuery), (PyObject *) self, "extractTerms", args, 2);
          }

          static PyObject *t_FunctionQuery_getValueSource(t_FunctionQuery *self)
          {
            ::org::apache::lucene::queries::function::ValueSource result((jobject) NULL);
            OBJ_CALL(result = self->object.getValueSource());
            return ::org::apache::lucene::queries::function::t_ValueSource::wrap_Object(result);
          }

          static PyObject *t_FunctionQuery_hashCode(t_FunctionQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(FunctionQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_FunctionQuery_rewrite(t_FunctionQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FunctionQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_FunctionQuery_toString(t_FunctionQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(FunctionQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FunctionQuery_get__valueSource(t_FunctionQuery *self, void *data)
          {
            ::org::apache::lucene::queries::function::ValueSource value((jobject) NULL);
            OBJ_CALL(value = self->object.getValueSource());
            return ::org::apache::lucene::queries::function::t_ValueSource::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader.h"
#include "java/lang/Cloneable.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {

          ::java::lang::Class *CompressingStoredFieldsIndexReader::class$ = NULL;
          jmethodID *CompressingStoredFieldsIndexReader::mids$ = NULL;
          bool CompressingStoredFieldsIndexReader::live$ = false;

          jclass CompressingStoredFieldsIndexReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_clone_b704ed60] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader;");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CompressingStoredFieldsIndexReader CompressingStoredFieldsIndexReader::clone() const
          {
            return CompressingStoredFieldsIndexReader(env->callObjectMethod(this$, mids$[mid_clone_b704ed60]));
          }

          jlong CompressingStoredFieldsIndexReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {
          static PyObject *t_CompressingStoredFieldsIndexReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressingStoredFieldsIndexReader_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressingStoredFieldsIndexReader_clone(t_CompressingStoredFieldsIndexReader *self);
          static PyObject *t_CompressingStoredFieldsIndexReader_ramBytesUsed(t_CompressingStoredFieldsIndexReader *self);

          static PyMethodDef t_CompressingStoredFieldsIndexReader__methods_[] = {
            DECLARE_METHOD(t_CompressingStoredFieldsIndexReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingStoredFieldsIndexReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingStoredFieldsIndexReader, clone, METH_NOARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsIndexReader, ramBytesUsed, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CompressingStoredFieldsIndexReader, t_CompressingStoredFieldsIndexReader, ::java::lang::Object, CompressingStoredFieldsIndexReader, abstract_init, 0, 0, 0, 0, 0);

          void t_CompressingStoredFieldsIndexReader::install(PyObject *module)
          {
            installType(&PY_TYPE(CompressingStoredFieldsIndexReader), module, "CompressingStoredFieldsIndexReader", 0);
          }

          void t_CompressingStoredFieldsIndexReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsIndexReader).tp_dict, "class_", make_descriptor(CompressingStoredFieldsIndexReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsIndexReader).tp_dict, "wrapfn_", make_descriptor(t_CompressingStoredFieldsIndexReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsIndexReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CompressingStoredFieldsIndexReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompressingStoredFieldsIndexReader::initializeClass, 1)))
              return NULL;
            return t_CompressingStoredFieldsIndexReader::wrap_Object(CompressingStoredFieldsIndexReader(((t_CompressingStoredFieldsIndexReader *) arg)->object.this$));
          }
          static PyObject *t_CompressingStoredFieldsIndexReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompressingStoredFieldsIndexReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CompressingStoredFieldsIndexReader_clone(t_CompressingStoredFieldsIndexReader *self)
          {
            CompressingStoredFieldsIndexReader result((jobject) NULL);
            OBJ_CALL(result = self->object.clone());
            return t_CompressingStoredFieldsIndexReader::wrap_Object(result);
          }

          static PyObject *t_CompressingStoredFieldsIndexReader_ramBytesUsed(t_CompressingStoredFieldsIndexReader *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/BooleanFilterBuilder.h"
#include "org/apache/lucene/search/Filter.h"
#include "org/apache/lucene/queryparser/xml/FilterBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *BooleanFilterBuilder::class$ = NULL;
            jmethodID *BooleanFilterBuilder::mids$ = NULL;
            bool BooleanFilterBuilder::live$ = false;

            jclass BooleanFilterBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/BooleanFilterBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_26bb3a92] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/xml/FilterBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            BooleanFilterBuilder::BooleanFilterBuilder(const ::org::apache::lucene::queryparser::xml::FilterBuilder & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_26bb3a92, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_BooleanFilterBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BooleanFilterBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_BooleanFilterBuilder_init_(t_BooleanFilterBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_BooleanFilterBuilder__methods_[] = {
              DECLARE_METHOD(t_BooleanFilterBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BooleanFilterBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(BooleanFilterBuilder, t_BooleanFilterBuilder, ::java::lang::Object, BooleanFilterBuilder, t_BooleanFilterBuilder_init_, 0, 0, 0, 0, 0);

            void t_BooleanFilterBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(BooleanFilterBuilder), module, "BooleanFilterBuilder", 0);
            }

            void t_BooleanFilterBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(BooleanFilterBuilder).tp_dict, "class_", make_descriptor(BooleanFilterBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(BooleanFilterBuilder).tp_dict, "wrapfn_", make_descriptor(t_BooleanFilterBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(BooleanFilterBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_BooleanFilterBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BooleanFilterBuilder::initializeClass, 1)))
                return NULL;
              return t_BooleanFilterBuilder::wrap_Object(BooleanFilterBuilder(((t_BooleanFilterBuilder *) arg)->object.this$));
            }
            static PyObject *t_BooleanFilterBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BooleanFilterBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_BooleanFilterBuilder_init_(t_BooleanFilterBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queryparser::xml::FilterBuilder a0((jobject) NULL);
              BooleanFilterBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::xml::FilterBuilder::initializeClass, &a0))
              {
                INT_CALL(object = BooleanFilterBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cn/ChineseFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cn {

          ::java::lang::Class *ChineseFilter::class$ = NULL;
          jmethodID *ChineseFilter::mids$ = NULL;
          bool ChineseFilter::live$ = false;
          JArray< ::java::lang::String > *ChineseFilter::STOP_WORDS = NULL;

          jclass ChineseFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cn/ChineseFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              STOP_WORDS = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "STOP_WORDS", "[Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ChineseFilter::ChineseFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean ChineseFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cn {
          static PyObject *t_ChineseFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ChineseFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ChineseFilter_init_(t_ChineseFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ChineseFilter_incrementToken(t_ChineseFilter *self, PyObject *args);

          static PyMethodDef t_ChineseFilter__methods_[] = {
            DECLARE_METHOD(t_ChineseFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ChineseFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ChineseFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ChineseFilter, t_ChineseFilter, ::org::apache::lucene::analysis::TokenFilter, ChineseFilter, t_ChineseFilter_init_, 0, 0, 0, 0, 0);

          void t_ChineseFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ChineseFilter), module, "ChineseFilter", 0);
          }

          void t_ChineseFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ChineseFilter).tp_dict, "class_", make_descriptor(ChineseFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ChineseFilter).tp_dict, "wrapfn_", make_descriptor(t_ChineseFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ChineseFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ChineseFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(ChineseFilter).tp_dict, "STOP_WORDS", make_descriptor(JArray<jstring>(ChineseFilter::STOP_WORDS->this$).wrap()));
          }

          static PyObject *t_ChineseFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ChineseFilter::initializeClass, 1)))
              return NULL;
            return t_ChineseFilter::wrap_Object(ChineseFilter(((t_ChineseFilter *) arg)->object.this$));
          }
          static PyObject *t_ChineseFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ChineseFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ChineseFilter_init_(t_ChineseFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ChineseFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = ChineseFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ChineseFilter_incrementToken(t_ChineseFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ChineseFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CheckIndex$Status$FieldNormStatus.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CheckIndex$Status$FieldNormStatus::class$ = NULL;
        jmethodID *CheckIndex$Status$FieldNormStatus::mids$ = NULL;
        jfieldID *CheckIndex$Status$FieldNormStatus::fids$ = NULL;
        bool CheckIndex$Status$FieldNormStatus::live$ = false;

        jclass CheckIndex$Status$FieldNormStatus::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CheckIndex$Status$FieldNormStatus");

            fids$ = new jfieldID[max_fid];
            fids$[fid_error] = env->getFieldID(cls, "error", "Ljava/lang/Throwable;");
            fids$[fid_totFields] = env->getFieldID(cls, "totFields", "J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::Throwable CheckIndex$Status$FieldNormStatus::_get_error() const
        {
          return ::java::lang::Throwable(env->getObjectField(this$, fids$[fid_error]));
        }

        void CheckIndex$Status$FieldNormStatus::_set_error(const ::java::lang::Throwable & a0) const
        {
          env->setObjectField(this$, fids$[fid_error], a0.this$);
        }

        jlong CheckIndex$Status$FieldNormStatus::_get_totFields() const
        {
          return env->getLongField(this$, fids$[fid_totFields]);
        }

        void CheckIndex$Status$FieldNormStatus::_set_totFields(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totFields], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CheckIndex$Status$FieldNormStatus_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$FieldNormStatus_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$FieldNormStatus_get__error(t_CheckIndex$Status$FieldNormStatus *self, void *data);
        static int t_CheckIndex$Status$FieldNormStatus_set__error(t_CheckIndex$Status$FieldNormStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$FieldNormStatus_get__totFields(t_CheckIndex$Status$FieldNormStatus *self, void *data);
        static int t_CheckIndex$Status$FieldNormStatus_set__totFields(t_CheckIndex$Status$FieldNormStatus *self, PyObject *arg, void *data);

        static PyGetSetDef t_CheckIndex$Status$FieldNormStatus__fields_[] = {
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$FieldNormStatus, error),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$FieldNormStatus, totFields),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CheckIndex$Status$FieldNormStatus__methods_[] = {
          DECLARE_METHOD(t_CheckIndex$Status$FieldNormStatus, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex$Status$FieldNormStatus, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CheckIndex$Status$FieldNormStatus, t_CheckIndex$Status$FieldNormStatus, ::java::lang::Object, CheckIndex$Status$FieldNormStatus, abstract_init, 0, 0, t_CheckIndex$Status$FieldNormStatus__fields_, 0, 0);

        void t_CheckIndex$Status$FieldNormStatus::install(PyObject *module)
        {
          installType(&PY_TYPE(CheckIndex$Status$FieldNormStatus), module, "CheckIndex$Status$FieldNormStatus", 0);
        }

        void t_CheckIndex$Status$FieldNormStatus::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$FieldNormStatus).tp_dict, "class_", make_descriptor(CheckIndex$Status$FieldNormStatus::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$FieldNormStatus).tp_dict, "wrapfn_", make_descriptor(t_CheckIndex$Status$FieldNormStatus::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$FieldNormStatus).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CheckIndex$Status$FieldNormStatus_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CheckIndex$Status$FieldNormStatus::initializeClass, 1)))
            return NULL;
          return t_CheckIndex$Status$FieldNormStatus::wrap_Object(CheckIndex$Status$FieldNormStatus(((t_CheckIndex$Status$FieldNormStatus *) arg)->object.this$));
        }
        static PyObject *t_CheckIndex$Status$FieldNormStatus_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CheckIndex$Status$FieldNormStatus::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CheckIndex$Status$FieldNormStatus_get__error(t_CheckIndex$Status$FieldNormStatus *self, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          OBJ_CALL(value = self->object._get_error());
          return ::java::lang::t_Throwable::wrap_Object(value);
        }
        static int t_CheckIndex$Status$FieldNormStatus_set__error(t_CheckIndex$Status$FieldNormStatus *self, PyObject *arg, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          if (!parseArg(arg, "k", ::java::lang::Throwable::initializeClass, &value))
          {
            INT_CALL(self->object._set_error(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "error", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$FieldNormStatus_get__totFields(t_CheckIndex$Status$FieldNormStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totFields());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$FieldNormStatus_set__totFields(t_CheckIndex$Status$FieldNormStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totFields(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totFields", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/shingle/ShingleFilterFactory.h"
#include "org/apache/lucene/analysis/shingle/ShingleFilter.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace shingle {

          ::java::lang::Class *ShingleFilterFactory::class$ = NULL;
          jmethodID *ShingleFilterFactory::mids$ = NULL;
          bool ShingleFilterFactory::live$ = false;

          jclass ShingleFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/shingle/ShingleFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_f9c2452d] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/shingle/ShingleFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ShingleFilterFactory::ShingleFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::shingle::ShingleFilter ShingleFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::shingle::ShingleFilter(env->callObjectMethod(this$, mids$[mid_create_f9c2452d], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace shingle {
          static PyObject *t_ShingleFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ShingleFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ShingleFilterFactory_init_(t_ShingleFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ShingleFilterFactory_create(t_ShingleFilterFactory *self, PyObject *args);

          static PyMethodDef t_ShingleFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ShingleFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ShingleFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ShingleFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ShingleFilterFactory, t_ShingleFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, ShingleFilterFactory, t_ShingleFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_ShingleFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ShingleFilterFactory), module, "ShingleFilterFactory", 0);
          }

          void t_ShingleFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ShingleFilterFactory).tp_dict, "class_", make_descriptor(ShingleFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ShingleFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_ShingleFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ShingleFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ShingleFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ShingleFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ShingleFilterFactory::wrap_Object(ShingleFilterFactory(((t_ShingleFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ShingleFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ShingleFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ShingleFilterFactory_init_(t_ShingleFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ShingleFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ShingleFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ShingleFilterFactory_create(t_ShingleFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::shingle::ShingleFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::shingle::t_ShingleFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ShingleFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/LockReleaseFailedException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *LockReleaseFailedException::class$ = NULL;
        jmethodID *LockReleaseFailedException::mids$ = NULL;
        bool LockReleaseFailedException::live$ = false;

        jclass LockReleaseFailedException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/LockReleaseFailedException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LockReleaseFailedException::LockReleaseFailedException(const ::java::lang::String & a0) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_LockReleaseFailedException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LockReleaseFailedException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LockReleaseFailedException_init_(t_LockReleaseFailedException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_LockReleaseFailedException__methods_[] = {
          DECLARE_METHOD(t_LockReleaseFailedException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LockReleaseFailedException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LockReleaseFailedException, t_LockReleaseFailedException, ::java::io::IOException, LockReleaseFailedException, t_LockReleaseFailedException_init_, 0, 0, 0, 0, 0);

        void t_LockReleaseFailedException::install(PyObject *module)
        {
          installType(&PY_TYPE(LockReleaseFailedException), module, "LockReleaseFailedException", 0);
        }

        void t_LockReleaseFailedException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LockReleaseFailedException).tp_dict, "class_", make_descriptor(LockReleaseFailedException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LockReleaseFailedException).tp_dict, "wrapfn_", make_descriptor(t_LockReleaseFailedException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LockReleaseFailedException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LockReleaseFailedException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LockReleaseFailedException::initializeClass, 1)))
            return NULL;
          return t_LockReleaseFailedException::wrap_Object(LockReleaseFailedException(((t_LockReleaseFailedException *) arg)->object.this$));
        }
        static PyObject *t_LockReleaseFailedException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LockReleaseFailedException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LockReleaseFailedException_init_(t_LockReleaseFailedException *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          LockReleaseFailedException object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = LockReleaseFailedException(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/es/SpanishLightStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace es {

          ::java::lang::Class *SpanishLightStemFilter::class$ = NULL;
          jmethodID *SpanishLightStemFilter::mids$ = NULL;
          bool SpanishLightStemFilter::live$ = false;

          jclass SpanishLightStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/es/SpanishLightStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanishLightStemFilter::SpanishLightStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean SpanishLightStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace es {
          static PyObject *t_SpanishLightStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanishLightStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanishLightStemFilter_init_(t_SpanishLightStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanishLightStemFilter_incrementToken(t_SpanishLightStemFilter *self, PyObject *args);

          static PyMethodDef t_SpanishLightStemFilter__methods_[] = {
            DECLARE_METHOD(t_SpanishLightStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanishLightStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanishLightStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanishLightStemFilter, t_SpanishLightStemFilter, ::org::apache::lucene::analysis::TokenFilter, SpanishLightStemFilter, t_SpanishLightStemFilter_init_, 0, 0, 0, 0, 0);

          void t_SpanishLightStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanishLightStemFilter), module, "SpanishLightStemFilter", 0);
          }

          void t_SpanishLightStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanishLightStemFilter).tp_dict, "class_", make_descriptor(SpanishLightStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanishLightStemFilter).tp_dict, "wrapfn_", make_descriptor(t_SpanishLightStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanishLightStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanishLightStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanishLightStemFilter::initializeClass, 1)))
              return NULL;
            return t_SpanishLightStemFilter::wrap_Object(SpanishLightStemFilter(((t_SpanishLightStemFilter *) arg)->object.this$));
          }
          static PyObject *t_SpanishLightStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanishLightStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanishLightStemFilter_init_(t_SpanishLightStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            SpanishLightStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = SpanishLightStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanishLightStemFilter_incrementToken(t_SpanishLightStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SpanishLightStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/SimpleFragmentsBuilder.h"
#include "org/apache/lucene/search/vectorhighlight/BoundaryScanner.h"
#include "java/lang/String.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *SimpleFragmentsBuilder::class$ = NULL;
          jmethodID *SimpleFragmentsBuilder::mids$ = NULL;
          bool SimpleFragmentsBuilder::live$ = false;

          jclass SimpleFragmentsBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/SimpleFragmentsBuilder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_7f580ee7] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/vectorhighlight/BoundaryScanner;)V");
              mids$[mid_init$_60fab432] = env->getMethodID(cls, "<init>", "([Ljava/lang/String;[Ljava/lang/String;)V");
              mids$[mid_init$_b03db8ab] = env->getMethodID(cls, "<init>", "([Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/search/vectorhighlight/BoundaryScanner;)V");
              mids$[mid_getWeightedFragInfoList_4f378251] = env->getMethodID(cls, "getWeightedFragInfoList", "(Ljava/util/List;)Ljava/util/List;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleFragmentsBuilder::SimpleFragmentsBuilder() : ::org::apache::lucene::search::vectorhighlight::BaseFragmentsBuilder(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          SimpleFragmentsBuilder::SimpleFragmentsBuilder(const ::org::apache::lucene::search::vectorhighlight::BoundaryScanner & a0) : ::org::apache::lucene::search::vectorhighlight::BaseFragmentsBuilder(env->newObject(initializeClass, &mids$, mid_init$_7f580ee7, a0.this$)) {}

          SimpleFragmentsBuilder::SimpleFragmentsBuilder(const JArray< ::java::lang::String > & a0, const JArray< ::java::lang::String > & a1) : ::org::apache::lucene::search::vectorhighlight::BaseFragmentsBuilder(env->newObject(initializeClass, &mids$, mid_init$_60fab432, a0.this$, a1.this$)) {}

          SimpleFragmentsBuilder::SimpleFragmentsBuilder(const JArray< ::java::lang::String > & a0, const JArray< ::java::lang::String > & a1, const ::org::apache::lucene::search::vectorhighlight::BoundaryScanner & a2) : ::org::apache::lucene::search::vectorhighlight::BaseFragmentsBuilder(env->newObject(initializeClass, &mids$, mid_init$_b03db8ab, a0.this$, a1.this$, a2.this$)) {}

          ::java::util::List SimpleFragmentsBuilder::getWeightedFragInfoList(const ::java::util::List & a0) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getWeightedFragInfoList_4f378251], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_SimpleFragmentsBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleFragmentsBuilder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleFragmentsBuilder_init_(t_SimpleFragmentsBuilder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleFragmentsBuilder_getWeightedFragInfoList(t_SimpleFragmentsBuilder *self, PyObject *args);

          static PyMethodDef t_SimpleFragmentsBuilder__methods_[] = {
            DECLARE_METHOD(t_SimpleFragmentsBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleFragmentsBuilder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleFragmentsBuilder, getWeightedFragInfoList, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SimpleFragmentsBuilder, t_SimpleFragmentsBuilder, ::org::apache::lucene::search::vectorhighlight::BaseFragmentsBuilder, SimpleFragmentsBuilder, t_SimpleFragmentsBuilder_init_, 0, 0, 0, 0, 0);

          void t_SimpleFragmentsBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleFragmentsBuilder), module, "SimpleFragmentsBuilder", 0);
          }

          void t_SimpleFragmentsBuilder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SimpleFragmentsBuilder).tp_dict, "class_", make_descriptor(SimpleFragmentsBuilder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SimpleFragmentsBuilder).tp_dict, "wrapfn_", make_descriptor(t_SimpleFragmentsBuilder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SimpleFragmentsBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimpleFragmentsBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleFragmentsBuilder::initializeClass, 1)))
              return NULL;
            return t_SimpleFragmentsBuilder::wrap_Object(SimpleFragmentsBuilder(((t_SimpleFragmentsBuilder *) arg)->object.this$));
          }
          static PyObject *t_SimpleFragmentsBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleFragmentsBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleFragmentsBuilder_init_(t_SimpleFragmentsBuilder *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                SimpleFragmentsBuilder object((jobject) NULL);

                INT_CALL(object = SimpleFragmentsBuilder());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::search::vectorhighlight::BoundaryScanner a0((jobject) NULL);
                SimpleFragmentsBuilder object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::vectorhighlight::BoundaryScanner::initializeClass, &a0))
                {
                  INT_CALL(object = SimpleFragmentsBuilder(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                JArray< ::java::lang::String > a0((jobject) NULL);
                JArray< ::java::lang::String > a1((jobject) NULL);
                SimpleFragmentsBuilder object((jobject) NULL);

                if (!parseArgs(args, "[s[s", &a0, &a1))
                {
                  INT_CALL(object = SimpleFragmentsBuilder(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                JArray< ::java::lang::String > a0((jobject) NULL);
                JArray< ::java::lang::String > a1((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::BoundaryScanner a2((jobject) NULL);
                SimpleFragmentsBuilder object((jobject) NULL);

                if (!parseArgs(args, "[s[sk", ::org::apache::lucene::search::vectorhighlight::BoundaryScanner::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = SimpleFragmentsBuilder(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SimpleFragmentsBuilder_getWeightedFragInfoList(t_SimpleFragmentsBuilder *self, PyObject *args)
          {
            ::java::util::List a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::util::List result((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(result = self->object.getWeightedFragInfoList(a0));
              return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::vectorhighlight::PY_TYPE(FieldFragList$WeightedFragInfo));
            }

            return callSuper(&PY_TYPE(SimpleFragmentsBuilder), (PyObject *) self, "getWeightedFragInfoList", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/DataInputStream.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/DataInput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace io {

    ::java::lang::Class *DataInputStream::class$ = NULL;
    jmethodID *DataInputStream::mids$ = NULL;
    bool DataInputStream::live$ = false;

    jclass DataInputStream::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/io/DataInputStream");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
        mids$[mid_read_49b4f134] = env->getMethodID(cls, "read", "([B)I");
        mids$[mid_read_86f44340] = env->getMethodID(cls, "read", "([BII)I");
        mids$[mid_readBoolean_54c6a16a] = env->getMethodID(cls, "readBoolean", "()Z");
        mids$[mid_readByte_54c6a172] = env->getMethodID(cls, "readByte", "()B");
        mids$[mid_readChar_54c6a173] = env->getMethodID(cls, "readChar", "()C");
        mids$[mid_readDouble_54c6a174] = env->getMethodID(cls, "readDouble", "()D");
        mids$[mid_readFloat_54c6a176] = env->getMethodID(cls, "readFloat", "()F");
        mids$[mid_readFully_49b4f12b] = env->getMethodID(cls, "readFully", "([B)V");
        mids$[mid_readFully_86f4435f] = env->getMethodID(cls, "readFully", "([BII)V");
        mids$[mid_readInt_54c6a179] = env->getMethodID(cls, "readInt", "()I");
        mids$[mid_readLine_14c7b5c5] = env->getMethodID(cls, "readLine", "()Ljava/lang/String;");
        mids$[mid_readLong_54c6a17a] = env->getMethodID(cls, "readLong", "()J");
        mids$[mid_readShort_54c6a163] = env->getMethodID(cls, "readShort", "()S");
        mids$[mid_readUTF_14c7b5c5] = env->getMethodID(cls, "readUTF", "()Ljava/lang/String;");
        mids$[mid_readUTF_b3b10019] = env->getStaticMethodID(cls, "readUTF", "(Ljava/io/DataInput;)Ljava/lang/String;");
        mids$[mid_readUnsignedByte_54c6a179] = env->getMethodID(cls, "readUnsignedByte", "()I");
        mids$[mid_readUnsignedShort_54c6a179] = env->getMethodID(cls, "readUnsignedShort", "()I");
        mids$[mid_skipBytes_39c7bd23] = env->getMethodID(cls, "skipBytes", "(I)I");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    DataInputStream::DataInputStream(const ::java::io::InputStream & a0) : ::java::io::FilterInputStream(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

    jint DataInputStream::read(const JArray< jbyte > & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_read_49b4f134], a0.this$);
    }

    jint DataInputStream::read(const JArray< jbyte > & a0, jint a1, jint a2) const
    {
      return env->callIntMethod(this$, mids$[mid_read_86f44340], a0.this$, a1, a2);
    }

    jboolean DataInputStream::readBoolean() const
    {
      return env->callBooleanMethod(this$, mids$[mid_readBoolean_54c6a16a]);
    }

    jbyte DataInputStream::readByte() const
    {
      return env->callByteMethod(this$, mids$[mid_readByte_54c6a172]);
    }

    jchar DataInputStream::readChar() const
    {
      return env->callCharMethod(this$, mids$[mid_readChar_54c6a173]);
    }

    jdouble DataInputStream::readDouble() const
    {
      return env->callDoubleMethod(this$, mids$[mid_readDouble_54c6a174]);
    }

    jfloat DataInputStream::readFloat() const
    {
      return env->callFloatMethod(this$, mids$[mid_readFloat_54c6a176]);
    }

    void DataInputStream::readFully(const JArray< jbyte > & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_readFully_49b4f12b], a0.this$);
    }

    void DataInputStream::readFully(const JArray< jbyte > & a0, jint a1, jint a2) const
    {
      env->callVoidMethod(this$, mids$[mid_readFully_86f4435f], a0.this$, a1, a2);
    }

    jint DataInputStream::readInt() const
    {
      return env->callIntMethod(this$, mids$[mid_readInt_54c6a179]);
    }

    ::java::lang::String DataInputStream::readLine() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_readLine_14c7b5c5]));
    }

    jlong DataInputStream::readLong() const
    {
      return env->callLongMethod(this$, mids$[mid_readLong_54c6a17a]);
    }

    jshort DataInputStream::readShort() const
    {
      return env->callShortMethod(this$, mids$[mid_readShort_54c6a163]);
    }

    ::java::lang::String DataInputStream::readUTF() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_readUTF_14c7b5c5]));
    }

    ::java::lang::String DataInputStream::readUTF(const ::java::io::DataInput & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_readUTF_b3b10019], a0.this$));
    }

    jint DataInputStream::readUnsignedByte() const
    {
      return env->callIntMethod(this$, mids$[mid_readUnsignedByte_54c6a179]);
    }

    jint DataInputStream::readUnsignedShort() const
    {
      return env->callIntMethod(this$, mids$[mid_readUnsignedShort_54c6a179]);
    }

    jint DataInputStream::skipBytes(jint a0) const
    {
      return env->callIntMethod(this$, mids$[mid_skipBytes_39c7bd23], a0);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace io {
    static PyObject *t_DataInputStream_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_DataInputStream_instance_(PyTypeObject *type, PyObject *arg);
    static int t_DataInputStream_init_(t_DataInputStream *self, PyObject *args, PyObject *kwds);
    static PyObject *t_DataInputStream_read(t_DataInputStream *self, PyObject *args);
    static PyObject *t_DataInputStream_readBoolean(t_DataInputStream *self);
    static PyObject *t_DataInputStream_readByte(t_DataInputStream *self);
    static PyObject *t_DataInputStream_readChar(t_DataInputStream *self);
    static PyObject *t_DataInputStream_readDouble(t_DataInputStream *self);
    static PyObject *t_DataInputStream_readFloat(t_DataInputStream *self);
    static PyObject *t_DataInputStream_readFully(t_DataInputStream *self, PyObject *args);
    static PyObject *t_DataInputStream_readInt(t_DataInputStream *self);
    static PyObject *t_DataInputStream_readLine(t_DataInputStream *self);
    static PyObject *t_DataInputStream_readLong(t_DataInputStream *self);
    static PyObject *t_DataInputStream_readShort(t_DataInputStream *self);
    static PyObject *t_DataInputStream_readUTF(t_DataInputStream *self);
    static PyObject *t_DataInputStream_readUTF_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_DataInputStream_readUnsignedByte(t_DataInputStream *self);
    static PyObject *t_DataInputStream_readUnsignedShort(t_DataInputStream *self);
    static PyObject *t_DataInputStream_skipBytes(t_DataInputStream *self, PyObject *arg);

    static PyMethodDef t_DataInputStream__methods_[] = {
      DECLARE_METHOD(t_DataInputStream, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_DataInputStream, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_DataInputStream, read, METH_VARARGS),
      DECLARE_METHOD(t_DataInputStream, readBoolean, METH_NOARGS),
      DECLARE_METHOD(t_DataInputStream, readByte, METH_NOARGS),
      DECLARE_METHOD(t_DataInputStream, readChar, METH_NOARGS),
      DECLARE_METHOD(t_DataInputStream, readDouble, METH_NOARGS),
      DECLARE_METHOD(t_DataInputStream, readFloat, METH_NOARGS),
      DECLARE_METHOD(t_DataInputStream, readFully, METH_VARARGS),
      DECLARE_METHOD(t_DataInputStream, readInt, METH_NOARGS),
      DECLARE_METHOD(t_DataInputStream, readLine, METH_NOARGS),
      DECLARE_METHOD(t_DataInputStream, readLong, METH_NOARGS),
      DECLARE_METHOD(t_DataInputStream, readShort, METH_NOARGS),
      DECLARE_METHOD(t_DataInputStream, readUTF, METH_NOARGS),
      DECLARE_METHOD(t_DataInputStream, readUTF_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_DataInputStream, readUnsignedByte, METH_NOARGS),
      DECLARE_METHOD(t_DataInputStream, readUnsignedShort, METH_NOARGS),
      DECLARE_METHOD(t_DataInputStream, skipBytes, METH_O),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(DataInputStream, t_DataInputStream, ::java::io::FilterInputStream, DataInputStream, t_DataInputStream_init_, 0, 0, 0, 0, 0);

    void t_DataInputStream::install(PyObject *module)
    {
      installType(&PY_TYPE(DataInputStream), module, "DataInputStream", 0);
    }

    void t_DataInputStream::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(DataInputStream).tp_dict, "class_", make_descriptor(DataInputStream::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(DataInputStream).tp_dict, "wrapfn_", make_descriptor(t_DataInputStream::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(DataInputStream).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_DataInputStream_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, DataInputStream::initializeClass, 1)))
        return NULL;
      return t_DataInputStream::wrap_Object(DataInputStream(((t_DataInputStream *) arg)->object.this$));
    }
    static PyObject *t_DataInputStream_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, DataInputStream::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_DataInputStream_init_(t_DataInputStream *self, PyObject *args, PyObject *kwds)
    {
      ::java::io::InputStream a0((jobject) NULL);
      DataInputStream object((jobject) NULL);

      if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
      {
        INT_CALL(object = DataInputStream(a0));
        self->object = object;
      }
      else
      {
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_DataInputStream_read(t_DataInputStream *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          JArray< jbyte > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[B", &a0))
          {
            OBJ_CALL(result = self->object.read(a0));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 3:
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.read(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
      }

      return callSuper(&PY_TYPE(DataInputStream), (PyObject *) self, "read", args, 2);
    }

    static PyObject *t_DataInputStream_readBoolean(t_DataInputStream *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.readBoolean());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_DataInputStream_readByte(t_DataInputStream *self)
    {
      jbyte result;
      OBJ_CALL(result = self->object.readByte());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_DataInputStream_readChar(t_DataInputStream *self)
    {
      jchar result;
      OBJ_CALL(result = self->object.readChar());
      return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
    }

    static PyObject *t_DataInputStream_readDouble(t_DataInputStream *self)
    {
      jdouble result;
      OBJ_CALL(result = self->object.readDouble());
      return PyFloat_FromDouble((double) result);
    }

    static PyObject *t_DataInputStream_readFloat(t_DataInputStream *self)
    {
      jfloat result;
      OBJ_CALL(result = self->object.readFloat());
      return PyFloat_FromDouble((double) result);
    }

    static PyObject *t_DataInputStream_readFully(t_DataInputStream *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          JArray< jbyte > a0((jobject) NULL);

          if (!parseArgs(args, "[B", &a0))
          {
            OBJ_CALL(self->object.readFully(a0));
            Py_RETURN_NONE;
          }
        }
        break;
       case 3:
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.readFully(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "readFully", args);
      return NULL;
    }

    static PyObject *t_DataInputStream_readInt(t_DataInputStream *self)
    {
      jint result;
      OBJ_CALL(result = self->object.readInt());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_DataInputStream_readLine(t_DataInputStream *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.readLine());
      return j2p(result);
    }

    static PyObject *t_DataInputStream_readLong(t_DataInputStream *self)
    {
      jlong result;
      OBJ_CALL(result = self->object.readLong());
      return PyLong_FromLongLong((PY_LONG_LONG) result);
    }

    static PyObject *t_DataInputStream_readShort(t_DataInputStream *self)
    {
      jshort result;
      OBJ_CALL(result = self->object.readShort());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_DataInputStream_readUTF(t_DataInputStream *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.readUTF());
      return j2p(result);
    }

    static PyObject *t_DataInputStream_readUTF_(PyTypeObject *type, PyObject *arg)
    {
      ::java::io::DataInput a0((jobject) NULL);
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "k", ::java::io::DataInput::initializeClass, &a0))
      {
        OBJ_CALL(result = ::java::io::DataInputStream::readUTF(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "readUTF_", arg);
      return NULL;
    }

    static PyObject *t_DataInputStream_readUnsignedByte(t_DataInputStream *self)
    {
      jint result;
      OBJ_CALL(result = self->object.readUnsignedByte());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_DataInputStream_readUnsignedShort(t_DataInputStream *self)
    {
      jint result;
      OBJ_CALL(result = self->object.readUnsignedShort());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_DataInputStream_skipBytes(t_DataInputStream *self, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = self->object.skipBytes(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "skipBytes", arg);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedInts$Encoder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedInts$Encoder::class$ = NULL;
          jmethodID *PackedInts$Encoder::mids$ = NULL;
          bool PackedInts$Encoder::live$ = false;

          jclass PackedInts$Encoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedInts$Encoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_byteBlockCount_54c6a179] = env->getMethodID(cls, "byteBlockCount", "()I");
              mids$[mid_byteValueCount_54c6a179] = env->getMethodID(cls, "byteValueCount", "()I");
              mids$[mid_encode_b62d11da] = env->getMethodID(cls, "encode", "([JI[BII)V");
              mids$[mid_encode_9d48bd73] = env->getMethodID(cls, "encode", "([II[BII)V");
              mids$[mid_encode_6b7ac502] = env->getMethodID(cls, "encode", "([JI[JII)V");
              mids$[mid_encode_98f8869b] = env->getMethodID(cls, "encode", "([II[JII)V");
              mids$[mid_longBlockCount_54c6a179] = env->getMethodID(cls, "longBlockCount", "()I");
              mids$[mid_longValueCount_54c6a179] = env->getMethodID(cls, "longValueCount", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint PackedInts$Encoder::byteBlockCount() const
          {
            return env->callIntMethod(this$, mids$[mid_byteBlockCount_54c6a179]);
          }

          jint PackedInts$Encoder::byteValueCount() const
          {
            return env->callIntMethod(this$, mids$[mid_byteValueCount_54c6a179]);
          }

          void PackedInts$Encoder::encode(const JArray< jlong > & a0, jint a1, const JArray< jbyte > & a2, jint a3, jint a4) const
          {
            env->callVoidMethod(this$, mids$[mid_encode_b62d11da], a0.this$, a1, a2.this$, a3, a4);
          }

          void PackedInts$Encoder::encode(const JArray< jint > & a0, jint a1, const JArray< jbyte > & a2, jint a3, jint a4) const
          {
            env->callVoidMethod(this$, mids$[mid_encode_9d48bd73], a0.this$, a1, a2.this$, a3, a4);
          }

          void PackedInts$Encoder::encode(const JArray< jlong > & a0, jint a1, const JArray< jlong > & a2, jint a3, jint a4) const
          {
            env->callVoidMethod(this$, mids$[mid_encode_6b7ac502], a0.this$, a1, a2.this$, a3, a4);
          }

          void PackedInts$Encoder::encode(const JArray< jint > & a0, jint a1, const JArray< jlong > & a2, jint a3, jint a4) const
          {
            env->callVoidMethod(this$, mids$[mid_encode_98f8869b], a0.this$, a1, a2.this$, a3, a4);
          }

          jint PackedInts$Encoder::longBlockCount() const
          {
            return env->callIntMethod(this$, mids$[mid_longBlockCount_54c6a179]);
          }

          jint PackedInts$Encoder::longValueCount() const
          {
            return env->callIntMethod(this$, mids$[mid_longValueCount_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedInts$Encoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Encoder_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Encoder_byteBlockCount(t_PackedInts$Encoder *self);
          static PyObject *t_PackedInts$Encoder_byteValueCount(t_PackedInts$Encoder *self);
          static PyObject *t_PackedInts$Encoder_encode(t_PackedInts$Encoder *self, PyObject *args);
          static PyObject *t_PackedInts$Encoder_longBlockCount(t_PackedInts$Encoder *self);
          static PyObject *t_PackedInts$Encoder_longValueCount(t_PackedInts$Encoder *self);

          static PyMethodDef t_PackedInts$Encoder__methods_[] = {
            DECLARE_METHOD(t_PackedInts$Encoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Encoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Encoder, byteBlockCount, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$Encoder, byteValueCount, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$Encoder, encode, METH_VARARGS),
            DECLARE_METHOD(t_PackedInts$Encoder, longBlockCount, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$Encoder, longValueCount, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedInts$Encoder, t_PackedInts$Encoder, ::java::lang::Object, PackedInts$Encoder, abstract_init, 0, 0, 0, 0, 0);

          void t_PackedInts$Encoder::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedInts$Encoder), module, "PackedInts$Encoder", 0);
          }

          void t_PackedInts$Encoder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedInts$Encoder).tp_dict, "class_", make_descriptor(PackedInts$Encoder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedInts$Encoder).tp_dict, "wrapfn_", make_descriptor(t_PackedInts$Encoder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedInts$Encoder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedInts$Encoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedInts$Encoder::initializeClass, 1)))
              return NULL;
            return t_PackedInts$Encoder::wrap_Object(PackedInts$Encoder(((t_PackedInts$Encoder *) arg)->object.this$));
          }
          static PyObject *t_PackedInts$Encoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedInts$Encoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PackedInts$Encoder_byteBlockCount(t_PackedInts$Encoder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.byteBlockCount());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedInts$Encoder_byteValueCount(t_PackedInts$Encoder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.byteValueCount());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedInts$Encoder_encode(t_PackedInts$Encoder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 5:
              {
                JArray< jlong > a0((jobject) NULL);
                jint a1;
                JArray< jbyte > a2((jobject) NULL);
                jint a3;
                jint a4;

                if (!parseArgs(args, "[JI[BII", &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(self->object.encode(a0, a1, a2, a3, a4));
                  Py_RETURN_NONE;
                }
              }
              {
                JArray< jint > a0((jobject) NULL);
                jint a1;
                JArray< jbyte > a2((jobject) NULL);
                jint a3;
                jint a4;

                if (!parseArgs(args, "[II[BII", &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(self->object.encode(a0, a1, a2, a3, a4));
                  Py_RETURN_NONE;
                }
              }
              {
                JArray< jlong > a0((jobject) NULL);
                jint a1;
                JArray< jlong > a2((jobject) NULL);
                jint a3;
                jint a4;

                if (!parseArgs(args, "[JI[JII", &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(self->object.encode(a0, a1, a2, a3, a4));
                  Py_RETURN_NONE;
                }
              }
              {
                JArray< jint > a0((jobject) NULL);
                jint a1;
                JArray< jlong > a2((jobject) NULL);
                jint a3;
                jint a4;

                if (!parseArgs(args, "[II[JII", &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(self->object.encode(a0, a1, a2, a3, a4));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "encode", args);
            return NULL;
          }

          static PyObject *t_PackedInts$Encoder_longBlockCount(t_PackedInts$Encoder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.longBlockCount());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedInts$Encoder_longValueCount(t_PackedInts$Encoder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.longValueCount());
            return PyInt_FromLong((long) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessorImpl.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace processors {

              ::java::lang::Class *QueryNodeProcessorImpl::class$ = NULL;
              jmethodID *QueryNodeProcessorImpl::mids$ = NULL;
              bool QueryNodeProcessorImpl::live$ = false;

              jclass QueryNodeProcessorImpl::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessorImpl");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_init$_0b1f7132] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");
                  mids$[mid_getQueryConfigHandler_3636d8c3] = env->getMethodID(cls, "getQueryConfigHandler", "()Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;");
                  mids$[mid_process_6705aed7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setQueryConfigHandler_0b1f7132] = env->getMethodID(cls, "setQueryConfigHandler", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");
                  mids$[mid_processChildren_cc04aeef] = env->getMethodID(cls, "processChildren", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              QueryNodeProcessorImpl::QueryNodeProcessorImpl() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              QueryNodeProcessorImpl::QueryNodeProcessorImpl(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_0b1f7132, a0.this$)) {}

              ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler QueryNodeProcessorImpl::getQueryConfigHandler() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler(env->callObjectMethod(this$, mids$[mid_getQueryConfigHandler_3636d8c3]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode QueryNodeProcessorImpl::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_6705aed7], a0.this$));
              }

              void QueryNodeProcessorImpl::setQueryConfigHandler(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setQueryConfigHandler_0b1f7132], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace processors {
              static PyObject *t_QueryNodeProcessorImpl_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryNodeProcessorImpl_instance_(PyTypeObject *type, PyObject *arg);
              static int t_QueryNodeProcessorImpl_init_(t_QueryNodeProcessorImpl *self, PyObject *args, PyObject *kwds);
              static PyObject *t_QueryNodeProcessorImpl_getQueryConfigHandler(t_QueryNodeProcessorImpl *self);
              static PyObject *t_QueryNodeProcessorImpl_process(t_QueryNodeProcessorImpl *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessorImpl_setQueryConfigHandler(t_QueryNodeProcessorImpl *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessorImpl_get__queryConfigHandler(t_QueryNodeProcessorImpl *self, void *data);
              static int t_QueryNodeProcessorImpl_set__queryConfigHandler(t_QueryNodeProcessorImpl *self, PyObject *arg, void *data);
              static PyGetSetDef t_QueryNodeProcessorImpl__fields_[] = {
                DECLARE_GETSET_FIELD(t_QueryNodeProcessorImpl, queryConfigHandler),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_QueryNodeProcessorImpl__methods_[] = {
                DECLARE_METHOD(t_QueryNodeProcessorImpl, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNodeProcessorImpl, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNodeProcessorImpl, getQueryConfigHandler, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeProcessorImpl, process, METH_O),
                DECLARE_METHOD(t_QueryNodeProcessorImpl, setQueryConfigHandler, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(QueryNodeProcessorImpl, t_QueryNodeProcessorImpl, ::java::lang::Object, QueryNodeProcessorImpl, t_QueryNodeProcessorImpl_init_, 0, 0, t_QueryNodeProcessorImpl__fields_, 0, 0);

              void t_QueryNodeProcessorImpl::install(PyObject *module)
              {
                installType(&PY_TYPE(QueryNodeProcessorImpl), module, "QueryNodeProcessorImpl", 0);
              }

              void t_QueryNodeProcessorImpl::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(QueryNodeProcessorImpl).tp_dict, "class_", make_descriptor(QueryNodeProcessorImpl::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(QueryNodeProcessorImpl).tp_dict, "wrapfn_", make_descriptor(t_QueryNodeProcessorImpl::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(QueryNodeProcessorImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_QueryNodeProcessorImpl_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, QueryNodeProcessorImpl::initializeClass, 1)))
                  return NULL;
                return t_QueryNodeProcessorImpl::wrap_Object(QueryNodeProcessorImpl(((t_QueryNodeProcessorImpl *) arg)->object.this$));
              }
              static PyObject *t_QueryNodeProcessorImpl_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, QueryNodeProcessorImpl::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_QueryNodeProcessorImpl_init_(t_QueryNodeProcessorImpl *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 0:
                  {
                    QueryNodeProcessorImpl object((jobject) NULL);

                    INT_CALL(object = QueryNodeProcessorImpl());
                    self->object = object;
                    break;
                  }
                  goto err;
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);
                    QueryNodeProcessorImpl object((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                    {
                      INT_CALL(object = QueryNodeProcessorImpl(a0));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                 err:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_QueryNodeProcessorImpl_getQueryConfigHandler(t_QueryNodeProcessorImpl *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler result((jobject) NULL);
                OBJ_CALL(result = self->object.getQueryConfigHandler());
                return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(result);
              }

              static PyObject *t_QueryNodeProcessorImpl_process(t_QueryNodeProcessorImpl *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "process", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorImpl_setQueryConfigHandler(t_QueryNodeProcessorImpl *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.setQueryConfigHandler(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setQueryConfigHandler", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorImpl_get__queryConfigHandler(t_QueryNodeProcessorImpl *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
                OBJ_CALL(value = self->object.getQueryConfigHandler());
                return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(value);
              }
              static int t_QueryNodeProcessorImpl_set__queryConfigHandler(t_QueryNodeProcessorImpl *self, PyObject *arg, void *data)
              {
                {
                  ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
                  if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &value))
                  {
                    INT_CALL(self->object.setQueryConfigHandler(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "queryConfigHandler", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SortedNumericSortField.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/SortedNumericSelector$Type.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/SortField$Type.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SortedNumericSortField::class$ = NULL;
        jmethodID *SortedNumericSortField::mids$ = NULL;
        bool SortedNumericSortField::live$ = false;

        jclass SortedNumericSortField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SortedNumericSortField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_b65c884e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/SortField$Type;)V");
            mids$[mid_init$_28dc1d67] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/SortField$Type;Z)V");
            mids$[mid_init$_f03d0044] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/SortField$Type;ZLorg/apache/lucene/search/SortedNumericSelector$Type;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getComparator_f38637f4] = env->getMethodID(cls, "getComparator", "(II)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_getSelector_26022dee] = env->getMethodID(cls, "getSelector", "()Lorg/apache/lucene/search/SortedNumericSelector$Type;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_setMissingValue_290588ee] = env->getMethodID(cls, "setMissingValue", "(Ljava/lang/Object;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SortedNumericSortField::SortedNumericSortField(const ::java::lang::String & a0, const ::org::apache::lucene::search::SortField$Type & a1) : ::org::apache::lucene::search::SortField(env->newObject(initializeClass, &mids$, mid_init$_b65c884e, a0.this$, a1.this$)) {}

        SortedNumericSortField::SortedNumericSortField(const ::java::lang::String & a0, const ::org::apache::lucene::search::SortField$Type & a1, jboolean a2) : ::org::apache::lucene::search::SortField(env->newObject(initializeClass, &mids$, mid_init$_28dc1d67, a0.this$, a1.this$, a2)) {}

        SortedNumericSortField::SortedNumericSortField(const ::java::lang::String & a0, const ::org::apache::lucene::search::SortField$Type & a1, jboolean a2, const ::org::apache::lucene::search::SortedNumericSelector$Type & a3) : ::org::apache::lucene::search::SortField(env->newObject(initializeClass, &mids$, mid_init$_f03d0044, a0.this$, a1.this$, a2, a3.this$)) {}

        jboolean SortedNumericSortField::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::search::FieldComparator SortedNumericSortField::getComparator(jint a0, jint a1) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_getComparator_f38637f4], a0, a1));
        }

        ::org::apache::lucene::search::SortedNumericSelector$Type SortedNumericSortField::getSelector() const
        {
          return ::org::apache::lucene::search::SortedNumericSelector$Type(env->callObjectMethod(this$, mids$[mid_getSelector_26022dee]));
        }

        jint SortedNumericSortField::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        void SortedNumericSortField::setMissingValue(const ::java::lang::Object & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMissingValue_290588ee], a0.this$);
        }

        ::java::lang::String SortedNumericSortField::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SortedNumericSortField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedNumericSortField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SortedNumericSortField_init_(t_SortedNumericSortField *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SortedNumericSortField_equals(t_SortedNumericSortField *self, PyObject *args);
        static PyObject *t_SortedNumericSortField_getComparator(t_SortedNumericSortField *self, PyObject *args);
        static PyObject *t_SortedNumericSortField_getSelector(t_SortedNumericSortField *self);
        static PyObject *t_SortedNumericSortField_hashCode(t_SortedNumericSortField *self, PyObject *args);
        static PyObject *t_SortedNumericSortField_setMissingValue(t_SortedNumericSortField *self, PyObject *args);
        static PyObject *t_SortedNumericSortField_toString(t_SortedNumericSortField *self, PyObject *args);
        static int t_SortedNumericSortField_set__missingValue(t_SortedNumericSortField *self, PyObject *arg, void *data);
        static PyObject *t_SortedNumericSortField_get__selector(t_SortedNumericSortField *self, void *data);
        static PyGetSetDef t_SortedNumericSortField__fields_[] = {
          DECLARE_SET_FIELD(t_SortedNumericSortField, missingValue),
          DECLARE_GET_FIELD(t_SortedNumericSortField, selector),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SortedNumericSortField__methods_[] = {
          DECLARE_METHOD(t_SortedNumericSortField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedNumericSortField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedNumericSortField, equals, METH_VARARGS),
          DECLARE_METHOD(t_SortedNumericSortField, getComparator, METH_VARARGS),
          DECLARE_METHOD(t_SortedNumericSortField, getSelector, METH_NOARGS),
          DECLARE_METHOD(t_SortedNumericSortField, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_SortedNumericSortField, setMissingValue, METH_VARARGS),
          DECLARE_METHOD(t_SortedNumericSortField, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SortedNumericSortField, t_SortedNumericSortField, ::org::apache::lucene::search::SortField, SortedNumericSortField, t_SortedNumericSortField_init_, 0, 0, t_SortedNumericSortField__fields_, 0, 0);

        void t_SortedNumericSortField::install(PyObject *module)
        {
          installType(&PY_TYPE(SortedNumericSortField), module, "SortedNumericSortField", 0);
        }

        void t_SortedNumericSortField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SortedNumericSortField).tp_dict, "class_", make_descriptor(SortedNumericSortField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SortedNumericSortField).tp_dict, "wrapfn_", make_descriptor(t_SortedNumericSortField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SortedNumericSortField).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SortedNumericSortField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortedNumericSortField::initializeClass, 1)))
            return NULL;
          return t_SortedNumericSortField::wrap_Object(SortedNumericSortField(((t_SortedNumericSortField *) arg)->object.this$));
        }
        static PyObject *t_SortedNumericSortField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortedNumericSortField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SortedNumericSortField_init_(t_SortedNumericSortField *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::SortField$Type a1((jobject) NULL);
              PyTypeObject **p1;
              SortedNumericSortField object((jobject) NULL);

              if (!parseArgs(args, "sK", ::org::apache::lucene::search::SortField$Type::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_SortField$Type::parameters_))
              {
                INT_CALL(object = SortedNumericSortField(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::SortField$Type a1((jobject) NULL);
              PyTypeObject **p1;
              jboolean a2;
              SortedNumericSortField object((jobject) NULL);

              if (!parseArgs(args, "sKZ", ::org::apache::lucene::search::SortField$Type::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_SortField$Type::parameters_, &a2))
              {
                INT_CALL(object = SortedNumericSortField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            goto err;
           case 4:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::SortField$Type a1((jobject) NULL);
              PyTypeObject **p1;
              jboolean a2;
              ::org::apache::lucene::search::SortedNumericSelector$Type a3((jobject) NULL);
              PyTypeObject **p3;
              SortedNumericSortField object((jobject) NULL);

              if (!parseArgs(args, "sKZK", ::org::apache::lucene::search::SortField$Type::initializeClass, ::org::apache::lucene::search::SortedNumericSelector$Type::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_SortField$Type::parameters_, &a2, &a3, &p3, ::org::apache::lucene::search::t_SortedNumericSelector$Type::parameters_))
              {
                INT_CALL(object = SortedNumericSortField(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SortedNumericSortField_equals(t_SortedNumericSortField *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(SortedNumericSortField), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_SortedNumericSortField_getComparator(t_SortedNumericSortField *self, PyObject *args)
        {
          jint a0;
          jint a1;
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.getComparator(a0, a1));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SortedNumericSortField), (PyObject *) self, "getComparator", args, 2);
        }

        static PyObject *t_SortedNumericSortField_getSelector(t_SortedNumericSortField *self)
        {
          ::org::apache::lucene::search::SortedNumericSelector$Type result((jobject) NULL);
          OBJ_CALL(result = self->object.getSelector());
          return ::org::apache::lucene::search::t_SortedNumericSelector$Type::wrap_Object(result);
        }

        static PyObject *t_SortedNumericSortField_hashCode(t_SortedNumericSortField *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(SortedNumericSortField), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_SortedNumericSortField_setMissingValue(t_SortedNumericSortField *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(self->object.setMissingValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SortedNumericSortField), (PyObject *) self, "setMissingValue", args, 2);
        }

        static PyObject *t_SortedNumericSortField_toString(t_SortedNumericSortField *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(SortedNumericSortField), (PyObject *) self, "toString", args, 2);
        }

        static int t_SortedNumericSortField_set__missingValue(t_SortedNumericSortField *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object.setMissingValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "missingValue", arg);
          return -1;
        }

        static PyObject *t_SortedNumericSortField_get__selector(t_SortedNumericSortField *self, void *data)
        {
          ::org::apache::lucene::search::SortedNumericSelector$Type value((jobject) NULL);
          OBJ_CALL(value = self->object.getSelector());
          return ::org::apache::lucene::search::t_SortedNumericSelector$Type::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizer.h"
#include "java/util/Map.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *StandardTokenizerFactory::class$ = NULL;
          jmethodID *StandardTokenizerFactory::mids$ = NULL;
          bool StandardTokenizerFactory::live$ = false;

          jclass StandardTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/StandardTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_9cba40d3] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/standard/StandardTokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StandardTokenizerFactory::StandardTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::standard::StandardTokenizer StandardTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::standard::StandardTokenizer(env->callObjectMethod(this$, mids$[mid_create_9cba40d3], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_StandardTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StandardTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StandardTokenizerFactory_init_(t_StandardTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StandardTokenizerFactory_create(t_StandardTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_StandardTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_StandardTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StandardTokenizerFactory, t_StandardTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, StandardTokenizerFactory, t_StandardTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_StandardTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(StandardTokenizerFactory), module, "StandardTokenizerFactory", 0);
          }

          void t_StandardTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StandardTokenizerFactory).tp_dict, "class_", make_descriptor(StandardTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StandardTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_StandardTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StandardTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StandardTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StandardTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_StandardTokenizerFactory::wrap_Object(StandardTokenizerFactory(((t_StandardTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_StandardTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StandardTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StandardTokenizerFactory_init_(t_StandardTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            StandardTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = StandardTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StandardTokenizerFactory_create(t_StandardTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::standard::StandardTokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::standard::t_StandardTokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(StandardTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/FileNotFoundException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace io {

    ::java::lang::Class *FileNotFoundException::class$ = NULL;
    jmethodID *FileNotFoundException::mids$ = NULL;
    bool FileNotFoundException::live$ = false;

    jclass FileNotFoundException::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/io/FileNotFoundException");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    FileNotFoundException::FileNotFoundException() : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    FileNotFoundException::FileNotFoundException(const ::java::lang::String & a0) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace io {
    static PyObject *t_FileNotFoundException_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_FileNotFoundException_instance_(PyTypeObject *type, PyObject *arg);
    static int t_FileNotFoundException_init_(t_FileNotFoundException *self, PyObject *args, PyObject *kwds);

    static PyMethodDef t_FileNotFoundException__methods_[] = {
      DECLARE_METHOD(t_FileNotFoundException, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_FileNotFoundException, instance_, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(FileNotFoundException, t_FileNotFoundException, ::java::io::IOException, FileNotFoundException, t_FileNotFoundException_init_, 0, 0, 0, 0, 0);

    void t_FileNotFoundException::install(PyObject *module)
    {
      installType(&PY_TYPE(FileNotFoundException), module, "FileNotFoundException", 0);
    }

    void t_FileNotFoundException::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(FileNotFoundException).tp_dict, "class_", make_descriptor(FileNotFoundException::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(FileNotFoundException).tp_dict, "wrapfn_", make_descriptor(t_FileNotFoundException::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(FileNotFoundException).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_FileNotFoundException_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, FileNotFoundException::initializeClass, 1)))
        return NULL;
      return t_FileNotFoundException::wrap_Object(FileNotFoundException(((t_FileNotFoundException *) arg)->object.this$));
    }
    static PyObject *t_FileNotFoundException_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, FileNotFoundException::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_FileNotFoundException_init_(t_FileNotFoundException *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          FileNotFoundException object((jobject) NULL);

          INT_CALL(object = FileNotFoundException());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          FileNotFoundException object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = FileNotFoundException(a0));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/StandardQueryParser.h"
#include "org/apache/lucene/search/Query.h"
#include "java/util/Locale.h"
#include "java/util/TimeZone.h"
#include "org/apache/lucene/document/DateTools$Resolution.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/NumericConfig.h"
#include "java/lang/Float.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/MultiTermQuery$RewriteMethod.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/util/Map.h"
#include "org/apache/lucene/queryparser/flexible/standard/CommonQueryParserConfiguration.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$Operator.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {

            ::java::lang::Class *StandardQueryParser::class$ = NULL;
            jmethodID *StandardQueryParser::mids$ = NULL;
            bool StandardQueryParser::live$ = false;

            jclass StandardQueryParser::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/StandardQueryParser");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_31619410] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");
                mids$[mid_getAllowLeadingWildcard_54c6a16a] = env->getMethodID(cls, "getAllowLeadingWildcard", "()Z");
                mids$[mid_getAnalyzer_347f60a9] = env->getMethodID(cls, "getAnalyzer", "()Lorg/apache/lucene/analysis/Analyzer;");
                mids$[mid_getDateResolution_e0474751] = env->getMethodID(cls, "getDateResolution", "()Lorg/apache/lucene/document/DateTools$Resolution;");
                mids$[mid_getDateResolutionMap_db60befd] = env->getMethodID(cls, "getDateResolutionMap", "()Ljava/util/Map;");
                mids$[mid_getDefaultOperator_61148a0b] = env->getMethodID(cls, "getDefaultOperator", "()Lorg/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$Operator;");
                mids$[mid_getEnablePositionIncrements_54c6a16a] = env->getMethodID(cls, "getEnablePositionIncrements", "()Z");
                mids$[mid_getFieldsBoost_db60befd] = env->getMethodID(cls, "getFieldsBoost", "()Ljava/util/Map;");
                mids$[mid_getFuzzyMinSim_54c6a176] = env->getMethodID(cls, "getFuzzyMinSim", "()F");
                mids$[mid_getFuzzyPrefixLength_54c6a179] = env->getMethodID(cls, "getFuzzyPrefixLength", "()I");
                mids$[mid_getLocale_8bb22876] = env->getMethodID(cls, "getLocale", "()Ljava/util/Locale;");
                mids$[mid_getLowercaseExpandedTerms_54c6a16a] = env->getMethodID(cls, "getLowercaseExpandedTerms", "()Z");
                mids$[mid_getMultiFields_2c0596de] = env->getMethodID(cls, "getMultiFields", "([Ljava/lang/CharSequence;)V");
                mids$[mid_getMultiTermRewriteMethod_8919154b] = env->getMethodID(cls, "getMultiTermRewriteMethod", "()Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;");
                mids$[mid_getNumericConfigMap_db60befd] = env->getMethodID(cls, "getNumericConfigMap", "()Ljava/util/Map;");
                mids$[mid_getPhraseSlop_54c6a179] = env->getMethodID(cls, "getPhraseSlop", "()I");
                mids$[mid_getTimeZone_6cce40e5] = env->getMethodID(cls, "getTimeZone", "()Ljava/util/TimeZone;");
                mids$[mid_parse_38d6e77e] = env->getMethodID(cls, "parse", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
                mids$[mid_setAllowLeadingWildcard_bb0c767f] = env->getMethodID(cls, "setAllowLeadingWildcard", "(Z)V");
                mids$[mid_setAnalyzer_31619410] = env->getMethodID(cls, "setAnalyzer", "(Lorg/apache/lucene/analysis/Analyzer;)V");
                mids$[mid_setDateResolution_285c1498] = env->getMethodID(cls, "setDateResolution", "(Lorg/apache/lucene/document/DateTools$Resolution;)V");
                mids$[mid_setDateResolution_4c9e2b1c] = env->getMethodID(cls, "setDateResolution", "(Ljava/util/Map;)V");
                mids$[mid_setDateResolutionMap_4c9e2b1c] = env->getMethodID(cls, "setDateResolutionMap", "(Ljava/util/Map;)V");
                mids$[mid_setDefaultOperator_3de2d36e] = env->getMethodID(cls, "setDefaultOperator", "(Lorg/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$Operator;)V");
                mids$[mid_setDefaultPhraseSlop_39c7bd3c] = env->getMethodID(cls, "setDefaultPhraseSlop", "(I)V");
                mids$[mid_setEnablePositionIncrements_bb0c767f] = env->getMethodID(cls, "setEnablePositionIncrements", "(Z)V");
                mids$[mid_setFieldsBoost_4c9e2b1c] = env->getMethodID(cls, "setFieldsBoost", "(Ljava/util/Map;)V");
                mids$[mid_setFuzzyMinSim_06298cab] = env->getMethodID(cls, "setFuzzyMinSim", "(F)V");
                mids$[mid_setFuzzyPrefixLength_39c7bd3c] = env->getMethodID(cls, "setFuzzyPrefixLength", "(I)V");
                mids$[mid_setLocale_56b0e4b3] = env->getMethodID(cls, "setLocale", "(Ljava/util/Locale;)V");
                mids$[mid_setLowercaseExpandedTerms_bb0c767f] = env->getMethodID(cls, "setLowercaseExpandedTerms", "(Z)V");
                mids$[mid_setMultiFields_2c0596de] = env->getMethodID(cls, "setMultiFields", "([Ljava/lang/CharSequence;)V");
                mids$[mid_setMultiTermRewriteMethod_c3c3909e] = env->getMethodID(cls, "setMultiTermRewriteMethod", "(Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;)V");
                mids$[mid_setNumericConfigMap_4c9e2b1c] = env->getMethodID(cls, "setNumericConfigMap", "(Ljava/util/Map;)V");
                mids$[mid_setPhraseSlop_39c7bd3c] = env->getMethodID(cls, "setPhraseSlop", "(I)V");
                mids$[mid_setTimeZone_f7b32d20] = env->getMethodID(cls, "setTimeZone", "(Ljava/util/TimeZone;)V");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            StandardQueryParser::StandardQueryParser() : ::org::apache::lucene::queryparser::flexible::core::QueryParserHelper(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            StandardQueryParser::StandardQueryParser(const ::org::apache::lucene::analysis::Analyzer & a0) : ::org::apache::lucene::queryparser::flexible::core::QueryParserHelper(env->newObject(initializeClass, &mids$, mid_init$_31619410, a0.this$)) {}

            jboolean StandardQueryParser::getAllowLeadingWildcard() const
            {
              return env->callBooleanMethod(this$, mids$[mid_getAllowLeadingWildcard_54c6a16a]);
            }

            ::org::apache::lucene::analysis::Analyzer StandardQueryParser::getAnalyzer() const
            {
              return ::org::apache::lucene::analysis::Analyzer(env->callObjectMethod(this$, mids$[mid_getAnalyzer_347f60a9]));
            }

            ::org::apache::lucene::document::DateTools$Resolution StandardQueryParser::getDateResolution() const
            {
              return ::org::apache::lucene::document::DateTools$Resolution(env->callObjectMethod(this$, mids$[mid_getDateResolution_e0474751]));
            }

            ::java::util::Map StandardQueryParser::getDateResolutionMap() const
            {
              return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getDateResolutionMap_db60befd]));
            }

            ::org::apache::lucene::queryparser::flexible::standard::config::StandardQueryConfigHandler$Operator StandardQueryParser::getDefaultOperator() const
            {
              return ::org::apache::lucene::queryparser::flexible::standard::config::StandardQueryConfigHandler$Operator(env->callObjectMethod(this$, mids$[mid_getDefaultOperator_61148a0b]));
            }

            jboolean StandardQueryParser::getEnablePositionIncrements() const
            {
              return env->callBooleanMethod(this$, mids$[mid_getEnablePositionIncrements_54c6a16a]);
            }

            ::java::util::Map StandardQueryParser::getFieldsBoost() const
            {
              return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getFieldsBoost_db60befd]));
            }

            jfloat StandardQueryParser::getFuzzyMinSim() const
            {
              return env->callFloatMethod(this$, mids$[mid_getFuzzyMinSim_54c6a176]);
            }

            jint StandardQueryParser::getFuzzyPrefixLength() const
            {
              return env->callIntMethod(this$, mids$[mid_getFuzzyPrefixLength_54c6a179]);
            }

            ::java::util::Locale StandardQueryParser::getLocale() const
            {
              return ::java::util::Locale(env->callObjectMethod(this$, mids$[mid_getLocale_8bb22876]));
            }

            jboolean StandardQueryParser::getLowercaseExpandedTerms() const
            {
              return env->callBooleanMethod(this$, mids$[mid_getLowercaseExpandedTerms_54c6a16a]);
            }

            void StandardQueryParser::getMultiFields(const JArray< ::java::lang::CharSequence > & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_getMultiFields_2c0596de], a0.this$);
            }

            ::org::apache::lucene::search::MultiTermQuery$RewriteMethod StandardQueryParser::getMultiTermRewriteMethod() const
            {
              return ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->callObjectMethod(this$, mids$[mid_getMultiTermRewriteMethod_8919154b]));
            }

            ::java::util::Map StandardQueryParser::getNumericConfigMap() const
            {
              return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getNumericConfigMap_db60befd]));
            }

            jint StandardQueryParser::getPhraseSlop() const
            {
              return env->callIntMethod(this$, mids$[mid_getPhraseSlop_54c6a179]);
            }

            ::java::util::TimeZone StandardQueryParser::getTimeZone() const
            {
              return ::java::util::TimeZone(env->callObjectMethod(this$, mids$[mid_getTimeZone_6cce40e5]));
            }

            ::org::apache::lucene::search::Query StandardQueryParser::parse(const ::java::lang::String & a0, const ::java::lang::String & a1) const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_parse_38d6e77e], a0.this$, a1.this$));
            }

            void StandardQueryParser::setAllowLeadingWildcard(jboolean a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setAllowLeadingWildcard_bb0c767f], a0);
            }

            void StandardQueryParser::setAnalyzer(const ::org::apache::lucene::analysis::Analyzer & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setAnalyzer_31619410], a0.this$);
            }

            void StandardQueryParser::setDateResolution(const ::org::apache::lucene::document::DateTools$Resolution & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setDateResolution_285c1498], a0.this$);
            }

            void StandardQueryParser::setDateResolution(const ::java::util::Map & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setDateResolution_4c9e2b1c], a0.this$);
            }

            void StandardQueryParser::setDateResolutionMap(const ::java::util::Map & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setDateResolutionMap_4c9e2b1c], a0.this$);
            }

            void StandardQueryParser::setDefaultOperator(const ::org::apache::lucene::queryparser::flexible::standard::config::StandardQueryConfigHandler$Operator & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setDefaultOperator_3de2d36e], a0.this$);
            }

            void StandardQueryParser::setDefaultPhraseSlop(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setDefaultPhraseSlop_39c7bd3c], a0);
            }

            void StandardQueryParser::setEnablePositionIncrements(jboolean a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setEnablePositionIncrements_bb0c767f], a0);
            }

            void StandardQueryParser::setFieldsBoost(const ::java::util::Map & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setFieldsBoost_4c9e2b1c], a0.this$);
            }

            void StandardQueryParser::setFuzzyMinSim(jfloat a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setFuzzyMinSim_06298cab], a0);
            }

            void StandardQueryParser::setFuzzyPrefixLength(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setFuzzyPrefixLength_39c7bd3c], a0);
            }

            void StandardQueryParser::setLocale(const ::java::util::Locale & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setLocale_56b0e4b3], a0.this$);
            }

            void StandardQueryParser::setLowercaseExpandedTerms(jboolean a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setLowercaseExpandedTerms_bb0c767f], a0);
            }

            void StandardQueryParser::setMultiFields(const JArray< ::java::lang::CharSequence > & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setMultiFields_2c0596de], a0.this$);
            }

            void StandardQueryParser::setMultiTermRewriteMethod(const ::org::apache::lucene::search::MultiTermQuery$RewriteMethod & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setMultiTermRewriteMethod_c3c3909e], a0.this$);
            }

            void StandardQueryParser::setNumericConfigMap(const ::java::util::Map & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setNumericConfigMap_4c9e2b1c], a0.this$);
            }

            void StandardQueryParser::setPhraseSlop(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setPhraseSlop_39c7bd3c], a0);
            }

            void StandardQueryParser::setTimeZone(const ::java::util::TimeZone & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setTimeZone_f7b32d20], a0.this$);
            }

            ::java::lang::String StandardQueryParser::toString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            static PyObject *t_StandardQueryParser_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_StandardQueryParser_instance_(PyTypeObject *type, PyObject *arg);
            static int t_StandardQueryParser_init_(t_StandardQueryParser *self, PyObject *args, PyObject *kwds);
            static PyObject *t_StandardQueryParser_getAllowLeadingWildcard(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getAnalyzer(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getDateResolution(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getDateResolutionMap(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getDefaultOperator(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getEnablePositionIncrements(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getFieldsBoost(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getFuzzyMinSim(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getFuzzyPrefixLength(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getLocale(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getLowercaseExpandedTerms(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getMultiFields(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_getMultiTermRewriteMethod(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getNumericConfigMap(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getPhraseSlop(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_getTimeZone(t_StandardQueryParser *self);
            static PyObject *t_StandardQueryParser_parse(t_StandardQueryParser *self, PyObject *args);
            static PyObject *t_StandardQueryParser_setAllowLeadingWildcard(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setAnalyzer(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setDateResolution(t_StandardQueryParser *self, PyObject *args);
            static PyObject *t_StandardQueryParser_setDateResolutionMap(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setDefaultOperator(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setDefaultPhraseSlop(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setEnablePositionIncrements(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setFieldsBoost(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setFuzzyMinSim(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setFuzzyPrefixLength(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setLocale(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setLowercaseExpandedTerms(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setMultiFields(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setMultiTermRewriteMethod(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setNumericConfigMap(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setPhraseSlop(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_setTimeZone(t_StandardQueryParser *self, PyObject *arg);
            static PyObject *t_StandardQueryParser_toString(t_StandardQueryParser *self, PyObject *args);
            static PyObject *t_StandardQueryParser_get__allowLeadingWildcard(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__allowLeadingWildcard(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__analyzer(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__analyzer(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__dateResolution(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__dateResolution(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__dateResolutionMap(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__dateResolutionMap(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__defaultOperator(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__defaultOperator(t_StandardQueryParser *self, PyObject *arg, void *data);
            static int t_StandardQueryParser_set__defaultPhraseSlop(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__enablePositionIncrements(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__enablePositionIncrements(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__fieldsBoost(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__fieldsBoost(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__fuzzyMinSim(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__fuzzyMinSim(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__fuzzyPrefixLength(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__fuzzyPrefixLength(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__locale(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__locale(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__lowercaseExpandedTerms(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__lowercaseExpandedTerms(t_StandardQueryParser *self, PyObject *arg, void *data);
            static int t_StandardQueryParser_set__multiFields(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__multiTermRewriteMethod(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__multiTermRewriteMethod(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__numericConfigMap(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__numericConfigMap(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__phraseSlop(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__phraseSlop(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyObject *t_StandardQueryParser_get__timeZone(t_StandardQueryParser *self, void *data);
            static int t_StandardQueryParser_set__timeZone(t_StandardQueryParser *self, PyObject *arg, void *data);
            static PyGetSetDef t_StandardQueryParser__fields_[] = {
              DECLARE_GETSET_FIELD(t_StandardQueryParser, allowLeadingWildcard),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, analyzer),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, dateResolution),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, dateResolutionMap),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, defaultOperator),
              DECLARE_SET_FIELD(t_StandardQueryParser, defaultPhraseSlop),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, enablePositionIncrements),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, fieldsBoost),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, fuzzyMinSim),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, fuzzyPrefixLength),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, locale),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, lowercaseExpandedTerms),
              DECLARE_SET_FIELD(t_StandardQueryParser, multiFields),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, multiTermRewriteMethod),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, numericConfigMap),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, phraseSlop),
              DECLARE_GETSET_FIELD(t_StandardQueryParser, timeZone),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_StandardQueryParser__methods_[] = {
              DECLARE_METHOD(t_StandardQueryParser, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_StandardQueryParser, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_StandardQueryParser, getAllowLeadingWildcard, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getAnalyzer, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getDateResolution, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getDateResolutionMap, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getDefaultOperator, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getEnablePositionIncrements, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getFieldsBoost, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getFuzzyMinSim, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getFuzzyPrefixLength, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getLocale, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getLowercaseExpandedTerms, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getMultiFields, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, getMultiTermRewriteMethod, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getNumericConfigMap, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getPhraseSlop, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, getTimeZone, METH_NOARGS),
              DECLARE_METHOD(t_StandardQueryParser, parse, METH_VARARGS),
              DECLARE_METHOD(t_StandardQueryParser, setAllowLeadingWildcard, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setAnalyzer, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setDateResolution, METH_VARARGS),
              DECLARE_METHOD(t_StandardQueryParser, setDateResolutionMap, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setDefaultOperator, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setDefaultPhraseSlop, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setEnablePositionIncrements, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setFieldsBoost, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setFuzzyMinSim, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setFuzzyPrefixLength, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setLocale, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setLowercaseExpandedTerms, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setMultiFields, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setMultiTermRewriteMethod, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setNumericConfigMap, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setPhraseSlop, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, setTimeZone, METH_O),
              DECLARE_METHOD(t_StandardQueryParser, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(StandardQueryParser, t_StandardQueryParser, ::org::apache::lucene::queryparser::flexible::core::QueryParserHelper, StandardQueryParser, t_StandardQueryParser_init_, 0, 0, t_StandardQueryParser__fields_, 0, 0);

            void t_StandardQueryParser::install(PyObject *module)
            {
              installType(&PY_TYPE(StandardQueryParser), module, "StandardQueryParser", 0);
            }

            void t_StandardQueryParser::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(StandardQueryParser).tp_dict, "class_", make_descriptor(StandardQueryParser::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(StandardQueryParser).tp_dict, "wrapfn_", make_descriptor(t_StandardQueryParser::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(StandardQueryParser).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_StandardQueryParser_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, StandardQueryParser::initializeClass, 1)))
                return NULL;
              return t_StandardQueryParser::wrap_Object(StandardQueryParser(((t_StandardQueryParser *) arg)->object.this$));
            }
            static PyObject *t_StandardQueryParser_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, StandardQueryParser::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_StandardQueryParser_init_(t_StandardQueryParser *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  StandardQueryParser object((jobject) NULL);

                  INT_CALL(object = StandardQueryParser());
                  self->object = object;
                  break;
                }
                goto err;
               case 1:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  StandardQueryParser object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
                  {
                    INT_CALL(object = StandardQueryParser(a0));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_StandardQueryParser_getAllowLeadingWildcard(t_StandardQueryParser *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.getAllowLeadingWildcard());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_StandardQueryParser_getAnalyzer(t_StandardQueryParser *self)
            {
              ::org::apache::lucene::analysis::Analyzer result((jobject) NULL);
              OBJ_CALL(result = self->object.getAnalyzer());
              return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(result);
            }

            static PyObject *t_StandardQueryParser_getDateResolution(t_StandardQueryParser *self)
            {
              ::org::apache::lucene::document::DateTools$Resolution result((jobject) NULL);
              OBJ_CALL(result = self->object.getDateResolution());
              return ::org::apache::lucene::document::t_DateTools$Resolution::wrap_Object(result);
            }

            static PyObject *t_StandardQueryParser_getDateResolutionMap(t_StandardQueryParser *self)
            {
              ::java::util::Map result((jobject) NULL);
              OBJ_CALL(result = self->object.getDateResolutionMap());
              return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(CharSequence), &::org::apache::lucene::document::PY_TYPE(DateTools$Resolution));
            }

            static PyObject *t_StandardQueryParser_getDefaultOperator(t_StandardQueryParser *self)
            {
              ::org::apache::lucene::queryparser::flexible::standard::config::StandardQueryConfigHandler$Operator result((jobject) NULL);
              OBJ_CALL(result = self->object.getDefaultOperator());
              return ::org::apache::lucene::queryparser::flexible::standard::config::t_StandardQueryConfigHandler$Operator::wrap_Object(result);
            }

            static PyObject *t_StandardQueryParser_getEnablePositionIncrements(t_StandardQueryParser *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.getEnablePositionIncrements());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_StandardQueryParser_getFieldsBoost(t_StandardQueryParser *self)
            {
              ::java::util::Map result((jobject) NULL);
              OBJ_CALL(result = self->object.getFieldsBoost());
              return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(Float));
            }

            static PyObject *t_StandardQueryParser_getFuzzyMinSim(t_StandardQueryParser *self)
            {
              jfloat result;
              OBJ_CALL(result = self->object.getFuzzyMinSim());
              return PyFloat_FromDouble((double) result);
            }

            static PyObject *t_StandardQueryParser_getFuzzyPrefixLength(t_StandardQueryParser *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getFuzzyPrefixLength());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_StandardQueryParser_getLocale(t_StandardQueryParser *self)
            {
              ::java::util::Locale result((jobject) NULL);
              OBJ_CALL(result = self->object.getLocale());
              return ::java::util::t_Locale::wrap_Object(result);
            }

            static PyObject *t_StandardQueryParser_getLowercaseExpandedTerms(t_StandardQueryParser *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.getLowercaseExpandedTerms());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_StandardQueryParser_getMultiFields(t_StandardQueryParser *self, PyObject *arg)
            {
              JArray< ::java::lang::CharSequence > a0((jobject) NULL);

              if (!parseArg(arg, "[O", &::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(self->object.getMultiFields(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "getMultiFields", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_getMultiTermRewriteMethod(t_StandardQueryParser *self)
            {
              ::org::apache::lucene::search::MultiTermQuery$RewriteMethod result((jobject) NULL);
              OBJ_CALL(result = self->object.getMultiTermRewriteMethod());
              return ::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(result);
            }

            static PyObject *t_StandardQueryParser_getNumericConfigMap(t_StandardQueryParser *self)
            {
              ::java::util::Map result((jobject) NULL);
              OBJ_CALL(result = self->object.getNumericConfigMap());
              return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::org::apache::lucene::queryparser::flexible::standard::config::PY_TYPE(NumericConfig));
            }

            static PyObject *t_StandardQueryParser_getPhraseSlop(t_StandardQueryParser *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getPhraseSlop());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_StandardQueryParser_getTimeZone(t_StandardQueryParser *self)
            {
              ::java::util::TimeZone result((jobject) NULL);
              OBJ_CALL(result = self->object.getTimeZone());
              return ::java::util::t_TimeZone::wrap_Object(result);
            }

            static PyObject *t_StandardQueryParser_parse(t_StandardQueryParser *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "ss", &a0, &a1))
              {
                OBJ_CALL(result = self->object.parse(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(StandardQueryParser), (PyObject *) self, "parse", args, 2);
            }

            static PyObject *t_StandardQueryParser_setAllowLeadingWildcard(t_StandardQueryParser *self, PyObject *arg)
            {
              jboolean a0;

              if (!parseArg(arg, "Z", &a0))
              {
                OBJ_CALL(self->object.setAllowLeadingWildcard(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setAllowLeadingWildcard", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setAnalyzer(t_StandardQueryParser *self, PyObject *arg)
            {
              ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setAnalyzer(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setAnalyzer", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setDateResolution(t_StandardQueryParser *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::document::DateTools$Resolution a0((jobject) NULL);
                  PyTypeObject **p0;

                  if (!parseArgs(args, "K", ::org::apache::lucene::document::DateTools$Resolution::initializeClass, &a0, &p0, ::org::apache::lucene::document::t_DateTools$Resolution::parameters_))
                  {
                    OBJ_CALL(self->object.setDateResolution(a0));
                    Py_RETURN_NONE;
                  }
                }
                {
                  ::java::util::Map a0((jobject) NULL);
                  PyTypeObject **p0;

                  if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
                  {
                    OBJ_CALL(self->object.setDateResolution(a0));
                    Py_RETURN_NONE;
                  }
                }
              }

              PyErr_SetArgsError((PyObject *) self, "setDateResolution", args);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setDateResolutionMap(t_StandardQueryParser *self, PyObject *arg)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
              {
                OBJ_CALL(self->object.setDateResolutionMap(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setDateResolutionMap", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setDefaultOperator(t_StandardQueryParser *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::flexible::standard::config::StandardQueryConfigHandler$Operator a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArg(arg, "K", ::org::apache::lucene::queryparser::flexible::standard::config::StandardQueryConfigHandler$Operator::initializeClass, &a0, &p0, ::org::apache::lucene::queryparser::flexible::standard::config::t_StandardQueryConfigHandler$Operator::parameters_))
              {
                OBJ_CALL(self->object.setDefaultOperator(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setDefaultOperator", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setDefaultPhraseSlop(t_StandardQueryParser *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setDefaultPhraseSlop(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setDefaultPhraseSlop", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setEnablePositionIncrements(t_StandardQueryParser *self, PyObject *arg)
            {
              jboolean a0;

              if (!parseArg(arg, "Z", &a0))
              {
                OBJ_CALL(self->object.setEnablePositionIncrements(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setEnablePositionIncrements", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setFieldsBoost(t_StandardQueryParser *self, PyObject *arg)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
              {
                OBJ_CALL(self->object.setFieldsBoost(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setFieldsBoost", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setFuzzyMinSim(t_StandardQueryParser *self, PyObject *arg)
            {
              jfloat a0;

              if (!parseArg(arg, "F", &a0))
              {
                OBJ_CALL(self->object.setFuzzyMinSim(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setFuzzyMinSim", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setFuzzyPrefixLength(t_StandardQueryParser *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setFuzzyPrefixLength(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setFuzzyPrefixLength", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setLocale(t_StandardQueryParser *self, PyObject *arg)
            {
              ::java::util::Locale a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::util::Locale::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setLocale(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setLocale", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setLowercaseExpandedTerms(t_StandardQueryParser *self, PyObject *arg)
            {
              jboolean a0;

              if (!parseArg(arg, "Z", &a0))
              {
                OBJ_CALL(self->object.setLowercaseExpandedTerms(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setLowercaseExpandedTerms", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setMultiFields(t_StandardQueryParser *self, PyObject *arg)
            {
              JArray< ::java::lang::CharSequence > a0((jobject) NULL);

              if (!parseArg(arg, "[O", &::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(self->object.setMultiFields(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setMultiFields", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setMultiTermRewriteMethod(t_StandardQueryParser *self, PyObject *arg)
            {
              ::org::apache::lucene::search::MultiTermQuery$RewriteMethod a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::search::MultiTermQuery$RewriteMethod::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setMultiTermRewriteMethod(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setMultiTermRewriteMethod", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setNumericConfigMap(t_StandardQueryParser *self, PyObject *arg)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
              {
                OBJ_CALL(self->object.setNumericConfigMap(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setNumericConfigMap", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setPhraseSlop(t_StandardQueryParser *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setPhraseSlop(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setPhraseSlop", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_setTimeZone(t_StandardQueryParser *self, PyObject *arg)
            {
              ::java::util::TimeZone a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::util::TimeZone::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setTimeZone(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setTimeZone", arg);
              return NULL;
            }

            static PyObject *t_StandardQueryParser_toString(t_StandardQueryParser *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(StandardQueryParser), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_StandardQueryParser_get__allowLeadingWildcard(t_StandardQueryParser *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.getAllowLeadingWildcard());
              Py_RETURN_BOOL(value);
            }
            static int t_StandardQueryParser_set__allowLeadingWildcard(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                jboolean value;
                if (!parseArg(arg, "Z", &value))
                {
                  INT_CALL(self->object.setAllowLeadingWildcard(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "allowLeadingWildcard", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__analyzer(t_StandardQueryParser *self, void *data)
            {
              ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
              OBJ_CALL(value = self->object.getAnalyzer());
              return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(value);
            }
            static int t_StandardQueryParser_set__analyzer(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &value))
                {
                  INT_CALL(self->object.setAnalyzer(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "analyzer", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__dateResolution(t_StandardQueryParser *self, void *data)
            {
              ::org::apache::lucene::document::DateTools$Resolution value((jobject) NULL);
              OBJ_CALL(value = self->object.getDateResolution());
              return ::org::apache::lucene::document::t_DateTools$Resolution::wrap_Object(value);
            }
            static int t_StandardQueryParser_set__dateResolution(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::document::DateTools$Resolution value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::document::DateTools$Resolution::initializeClass, &value))
                {
                  INT_CALL(self->object.setDateResolution(value));
                  return 0;
                }
              }
              {
                ::java::util::Map value((jobject) NULL);
                if (!parseArg(arg, "k", ::java::util::Map::initializeClass, &value))
                {
                  INT_CALL(self->object.setDateResolution(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "dateResolution", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__dateResolutionMap(t_StandardQueryParser *self, void *data)
            {
              ::java::util::Map value((jobject) NULL);
              OBJ_CALL(value = self->object.getDateResolutionMap());
              return ::java::util::t_Map::wrap_Object(value);
            }
            static int t_StandardQueryParser_set__dateResolutionMap(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                ::java::util::Map value((jobject) NULL);
                if (!parseArg(arg, "k", ::java::util::Map::initializeClass, &value))
                {
                  INT_CALL(self->object.setDateResolutionMap(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "dateResolutionMap", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__defaultOperator(t_StandardQueryParser *self, void *data)
            {
              ::org::apache::lucene::queryparser::flexible::standard::config::StandardQueryConfigHandler$Operator value((jobject) NULL);
              OBJ_CALL(value = self->object.getDefaultOperator());
              return ::org::apache::lucene::queryparser::flexible::standard::config::t_StandardQueryConfigHandler$Operator::wrap_Object(value);
            }
            static int t_StandardQueryParser_set__defaultOperator(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::queryparser::flexible::standard::config::StandardQueryConfigHandler$Operator value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::standard::config::StandardQueryConfigHandler$Operator::initializeClass, &value))
                {
                  INT_CALL(self->object.setDefaultOperator(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "defaultOperator", arg);
              return -1;
            }

            static int t_StandardQueryParser_set__defaultPhraseSlop(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setDefaultPhraseSlop(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "defaultPhraseSlop", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__enablePositionIncrements(t_StandardQueryParser *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.getEnablePositionIncrements());
              Py_RETURN_BOOL(value);
            }
            static int t_StandardQueryParser_set__enablePositionIncrements(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                jboolean value;
                if (!parseArg(arg, "Z", &value))
                {
                  INT_CALL(self->object.setEnablePositionIncrements(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "enablePositionIncrements", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__fieldsBoost(t_StandardQueryParser *self, void *data)
            {
              ::java::util::Map value((jobject) NULL);
              OBJ_CALL(value = self->object.getFieldsBoost());
              return ::java::util::t_Map::wrap_Object(value);
            }
            static int t_StandardQueryParser_set__fieldsBoost(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                ::java::util::Map value((jobject) NULL);
                if (!parseArg(arg, "k", ::java::util::Map::initializeClass, &value))
                {
                  INT_CALL(self->object.setFieldsBoost(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "fieldsBoost", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__fuzzyMinSim(t_StandardQueryParser *self, void *data)
            {
              jfloat value;
              OBJ_CALL(value = self->object.getFuzzyMinSim());
              return PyFloat_FromDouble((double) value);
            }
            static int t_StandardQueryParser_set__fuzzyMinSim(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                jfloat value;
                if (!parseArg(arg, "F", &value))
                {
                  INT_CALL(self->object.setFuzzyMinSim(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "fuzzyMinSim", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__fuzzyPrefixLength(t_StandardQueryParser *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getFuzzyPrefixLength());
              return PyInt_FromLong((long) value);
            }
            static int t_StandardQueryParser_set__fuzzyPrefixLength(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setFuzzyPrefixLength(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "fuzzyPrefixLength", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__locale(t_StandardQueryParser *self, void *data)
            {
              ::java::util::Locale value((jobject) NULL);
              OBJ_CALL(value = self->object.getLocale());
              return ::java::util::t_Locale::wrap_Object(value);
            }
            static int t_StandardQueryParser_set__locale(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                ::java::util::Locale value((jobject) NULL);
                if (!parseArg(arg, "k", ::java::util::Locale::initializeClass, &value))
                {
                  INT_CALL(self->object.setLocale(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "locale", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__lowercaseExpandedTerms(t_StandardQueryParser *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.getLowercaseExpandedTerms());
              Py_RETURN_BOOL(value);
            }
            static int t_StandardQueryParser_set__lowercaseExpandedTerms(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                jboolean value;
                if (!parseArg(arg, "Z", &value))
                {
                  INT_CALL(self->object.setLowercaseExpandedTerms(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "lowercaseExpandedTerms", arg);
              return -1;
            }

            static int t_StandardQueryParser_set__multiFields(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                JArray< ::java::lang::CharSequence > value((jobject) NULL);
                if (!parseArg(arg, "[O", &::java::lang::PY_TYPE(CharSequence), &value))
                {
                  INT_CALL(self->object.setMultiFields(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "multiFields", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__multiTermRewriteMethod(t_StandardQueryParser *self, void *data)
            {
              ::org::apache::lucene::search::MultiTermQuery$RewriteMethod value((jobject) NULL);
              OBJ_CALL(value = self->object.getMultiTermRewriteMethod());
              return ::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(value);
            }
            static int t_StandardQueryParser_set__multiTermRewriteMethod(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::search::MultiTermQuery$RewriteMethod value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::search::MultiTermQuery$RewriteMethod::initializeClass, &value))
                {
                  INT_CALL(self->object.setMultiTermRewriteMethod(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "multiTermRewriteMethod", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__numericConfigMap(t_StandardQueryParser *self, void *data)
            {
              ::java::util::Map value((jobject) NULL);
              OBJ_CALL(value = self->object.getNumericConfigMap());
              return ::java::util::t_Map::wrap_Object(value);
            }
            static int t_StandardQueryParser_set__numericConfigMap(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                ::java::util::Map value((jobject) NULL);
                if (!parseArg(arg, "k", ::java::util::Map::initializeClass, &value))
                {
                  INT_CALL(self->object.setNumericConfigMap(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "numericConfigMap", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__phraseSlop(t_StandardQueryParser *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getPhraseSlop());
              return PyInt_FromLong((long) value);
            }
            static int t_StandardQueryParser_set__phraseSlop(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setPhraseSlop(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "phraseSlop", arg);
              return -1;
            }

            static PyObject *t_StandardQueryParser_get__timeZone(t_StandardQueryParser *self, void *data)
            {
              ::java::util::TimeZone value((jobject) NULL);
              OBJ_CALL(value = self->object.getTimeZone());
              return ::java::util::t_TimeZone::wrap_Object(value);
            }
            static int t_StandardQueryParser_set__timeZone(t_StandardQueryParser *self, PyObject *arg, void *data)
            {
              {
                ::java::util::TimeZone value((jobject) NULL);
                if (!parseArg(arg, "k", ::java::util::TimeZone::initializeClass, &value))
                {
                  INT_CALL(self->object.setTimeZone(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "timeZone", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/facet/taxonomy/FacetLabel.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter.h"
#include "java/util/Map.h"
#include "org/apache/lucene/facet/taxonomy/ParallelTaxonomyArrays.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace directory {

            ::java::lang::Class *DirectoryTaxonomyReader::class$ = NULL;
            jmethodID *DirectoryTaxonomyReader::mids$ = NULL;
            bool DirectoryTaxonomyReader::live$ = false;

            jclass DirectoryTaxonomyReader::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_49dc27eb] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter;)V");
                mids$[mid_init$_2e261ef2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;)V");
                mids$[mid_getCommitUserData_db60befd] = env->getMethodID(cls, "getCommitUserData", "()Ljava/util/Map;");
                mids$[mid_getOrdinal_283f83f5] = env->getMethodID(cls, "getOrdinal", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;)I");
                mids$[mid_getParallelTaxonomyArrays_306e748e] = env->getMethodID(cls, "getParallelTaxonomyArrays", "()Lorg/apache/lucene/facet/taxonomy/ParallelTaxonomyArrays;");
                mids$[mid_getPath_38cf071d] = env->getMethodID(cls, "getPath", "(I)Lorg/apache/lucene/facet/taxonomy/FacetLabel;");
                mids$[mid_getSize_54c6a179] = env->getMethodID(cls, "getSize", "()I");
                mids$[mid_setCacheSize_39c7bd3c] = env->getMethodID(cls, "setCacheSize", "(I)V");
                mids$[mid_toString_141401b3] = env->getMethodID(cls, "toString", "(I)Ljava/lang/String;");
                mids$[mid_doClose_54c6a166] = env->getMethodID(cls, "doClose", "()V");
                mids$[mid_doOpenIfChanged_57c99022] = env->getMethodID(cls, "doOpenIfChanged", "()Lorg/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader;");
                mids$[mid_openIndexReader_109b8ac7] = env->getMethodID(cls, "openIndexReader", "(Lorg/apache/lucene/store/Directory;)Lorg/apache/lucene/index/DirectoryReader;");
                mids$[mid_openIndexReader_880937e0] = env->getMethodID(cls, "openIndexReader", "(Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/DirectoryReader;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DirectoryTaxonomyReader::DirectoryTaxonomyReader(const ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter & a0) : ::org::apache::lucene::facet::taxonomy::TaxonomyReader(env->newObject(initializeClass, &mids$, mid_init$_49dc27eb, a0.this$)) {}

            DirectoryTaxonomyReader::DirectoryTaxonomyReader(const ::org::apache::lucene::store::Directory & a0) : ::org::apache::lucene::facet::taxonomy::TaxonomyReader(env->newObject(initializeClass, &mids$, mid_init$_2e261ef2, a0.this$)) {}

            ::java::util::Map DirectoryTaxonomyReader::getCommitUserData() const
            {
              return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getCommitUserData_db60befd]));
            }

            jint DirectoryTaxonomyReader::getOrdinal(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0) const
            {
              return env->callIntMethod(this$, mids$[mid_getOrdinal_283f83f5], a0.this$);
            }

            ::org::apache::lucene::facet::taxonomy::ParallelTaxonomyArrays DirectoryTaxonomyReader::getParallelTaxonomyArrays() const
            {
              return ::org::apache::lucene::facet::taxonomy::ParallelTaxonomyArrays(env->callObjectMethod(this$, mids$[mid_getParallelTaxonomyArrays_306e748e]));
            }

            ::org::apache::lucene::facet::taxonomy::FacetLabel DirectoryTaxonomyReader::getPath(jint a0) const
            {
              return ::org::apache::lucene::facet::taxonomy::FacetLabel(env->callObjectMethod(this$, mids$[mid_getPath_38cf071d], a0));
            }

            jint DirectoryTaxonomyReader::getSize() const
            {
              return env->callIntMethod(this$, mids$[mid_getSize_54c6a179]);
            }

            void DirectoryTaxonomyReader::setCacheSize(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setCacheSize_39c7bd3c], a0);
            }

            ::java::lang::String DirectoryTaxonomyReader::toString(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_141401b3], a0));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace directory {
            static PyObject *t_DirectoryTaxonomyReader_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyReader_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DirectoryTaxonomyReader_init_(t_DirectoryTaxonomyReader *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DirectoryTaxonomyReader_getCommitUserData(t_DirectoryTaxonomyReader *self, PyObject *args);
            static PyObject *t_DirectoryTaxonomyReader_getOrdinal(t_DirectoryTaxonomyReader *self, PyObject *args);
            static PyObject *t_DirectoryTaxonomyReader_getParallelTaxonomyArrays(t_DirectoryTaxonomyReader *self, PyObject *args);
            static PyObject *t_DirectoryTaxonomyReader_getPath(t_DirectoryTaxonomyReader *self, PyObject *args);
            static PyObject *t_DirectoryTaxonomyReader_getSize(t_DirectoryTaxonomyReader *self, PyObject *args);
            static PyObject *t_DirectoryTaxonomyReader_setCacheSize(t_DirectoryTaxonomyReader *self, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyReader_toString(t_DirectoryTaxonomyReader *self, PyObject *args);
            static int t_DirectoryTaxonomyReader_set__cacheSize(t_DirectoryTaxonomyReader *self, PyObject *arg, void *data);
            static PyObject *t_DirectoryTaxonomyReader_get__commitUserData(t_DirectoryTaxonomyReader *self, void *data);
            static PyObject *t_DirectoryTaxonomyReader_get__parallelTaxonomyArrays(t_DirectoryTaxonomyReader *self, void *data);
            static PyObject *t_DirectoryTaxonomyReader_get__size(t_DirectoryTaxonomyReader *self, void *data);
            static PyGetSetDef t_DirectoryTaxonomyReader__fields_[] = {
              DECLARE_SET_FIELD(t_DirectoryTaxonomyReader, cacheSize),
              DECLARE_GET_FIELD(t_DirectoryTaxonomyReader, commitUserData),
              DECLARE_GET_FIELD(t_DirectoryTaxonomyReader, parallelTaxonomyArrays),
              DECLARE_GET_FIELD(t_DirectoryTaxonomyReader, size),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_DirectoryTaxonomyReader__methods_[] = {
              DECLARE_METHOD(t_DirectoryTaxonomyReader, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DirectoryTaxonomyReader, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DirectoryTaxonomyReader, getCommitUserData, METH_VARARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyReader, getOrdinal, METH_VARARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyReader, getParallelTaxonomyArrays, METH_VARARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyReader, getPath, METH_VARARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyReader, getSize, METH_VARARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyReader, setCacheSize, METH_O),
              DECLARE_METHOD(t_DirectoryTaxonomyReader, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DirectoryTaxonomyReader, t_DirectoryTaxonomyReader, ::org::apache::lucene::facet::taxonomy::TaxonomyReader, DirectoryTaxonomyReader, t_DirectoryTaxonomyReader_init_, 0, 0, t_DirectoryTaxonomyReader__fields_, 0, 0);

            void t_DirectoryTaxonomyReader::install(PyObject *module)
            {
              installType(&PY_TYPE(DirectoryTaxonomyReader), module, "DirectoryTaxonomyReader", 0);
            }

            void t_DirectoryTaxonomyReader::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyReader).tp_dict, "class_", make_descriptor(DirectoryTaxonomyReader::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyReader).tp_dict, "wrapfn_", make_descriptor(t_DirectoryTaxonomyReader::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyReader).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DirectoryTaxonomyReader_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DirectoryTaxonomyReader::initializeClass, 1)))
                return NULL;
              return t_DirectoryTaxonomyReader::wrap_Object(DirectoryTaxonomyReader(((t_DirectoryTaxonomyReader *) arg)->object.this$));
            }
            static PyObject *t_DirectoryTaxonomyReader_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DirectoryTaxonomyReader::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DirectoryTaxonomyReader_init_(t_DirectoryTaxonomyReader *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter a0((jobject) NULL);
                  DirectoryTaxonomyReader object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter::initializeClass, &a0))
                  {
                    INT_CALL(object = DirectoryTaxonomyReader(a0));
                    self->object = object;
                    break;
                  }
                }
                {
                  ::org::apache::lucene::store::Directory a0((jobject) NULL);
                  DirectoryTaxonomyReader object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
                  {
                    INT_CALL(object = DirectoryTaxonomyReader(a0));
                    self->object = object;
                    break;
                  }
                }
               default:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_DirectoryTaxonomyReader_getCommitUserData(t_DirectoryTaxonomyReader *self, PyObject *args)
            {
              ::java::util::Map result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getCommitUserData());
                return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
              }

              return callSuper(&PY_TYPE(DirectoryTaxonomyReader), (PyObject *) self, "getCommitUserData", args, 2);
            }

            static PyObject *t_DirectoryTaxonomyReader_getOrdinal(t_DirectoryTaxonomyReader *self, PyObject *args)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint result;

              if (!parseArgs(args, "k", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.getOrdinal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(DirectoryTaxonomyReader), (PyObject *) self, "getOrdinal", args, 2);
            }

            static PyObject *t_DirectoryTaxonomyReader_getParallelTaxonomyArrays(t_DirectoryTaxonomyReader *self, PyObject *args)
            {
              ::org::apache::lucene::facet::taxonomy::ParallelTaxonomyArrays result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getParallelTaxonomyArrays());
                return ::org::apache::lucene::facet::taxonomy::t_ParallelTaxonomyArrays::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(DirectoryTaxonomyReader), (PyObject *) self, "getParallelTaxonomyArrays", args, 2);
            }

            static PyObject *t_DirectoryTaxonomyReader_getPath(t_DirectoryTaxonomyReader *self, PyObject *args)
            {
              jint a0;
              ::org::apache::lucene::facet::taxonomy::FacetLabel result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.getPath(a0));
                return ::org::apache::lucene::facet::taxonomy::t_FacetLabel::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(DirectoryTaxonomyReader), (PyObject *) self, "getPath", args, 2);
            }

            static PyObject *t_DirectoryTaxonomyReader_getSize(t_DirectoryTaxonomyReader *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getSize());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(DirectoryTaxonomyReader), (PyObject *) self, "getSize", args, 2);
            }

            static PyObject *t_DirectoryTaxonomyReader_setCacheSize(t_DirectoryTaxonomyReader *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setCacheSize(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setCacheSize", arg);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyReader_toString(t_DirectoryTaxonomyReader *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(DirectoryTaxonomyReader), (PyObject *) self, "toString", args, 2);
            }

            static int t_DirectoryTaxonomyReader_set__cacheSize(t_DirectoryTaxonomyReader *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setCacheSize(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "cacheSize", arg);
              return -1;
            }

            static PyObject *t_DirectoryTaxonomyReader_get__commitUserData(t_DirectoryTaxonomyReader *self, void *data)
            {
              ::java::util::Map value((jobject) NULL);
              OBJ_CALL(value = self->object.getCommitUserData());
              return ::java::util::t_Map::wrap_Object(value);
            }

            static PyObject *t_DirectoryTaxonomyReader_get__parallelTaxonomyArrays(t_DirectoryTaxonomyReader *self, void *data)
            {
              ::org::apache::lucene::facet::taxonomy::ParallelTaxonomyArrays value((jobject) NULL);
              OBJ_CALL(value = self->object.getParallelTaxonomyArrays());
              return ::org::apache::lucene::facet::taxonomy::t_ParallelTaxonomyArrays::wrap_Object(value);
            }

            static PyObject *t_DirectoryTaxonomyReader_get__size(t_DirectoryTaxonomyReader *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getSize());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SortedNumericSelector.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "org/apache/lucene/search/SortedNumericSelector$Type.h"
#include "org/apache/lucene/search/SortField$Type.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SortedNumericSelector::class$ = NULL;
        jmethodID *SortedNumericSelector::mids$ = NULL;
        bool SortedNumericSelector::live$ = false;

        jclass SortedNumericSelector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SortedNumericSelector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_wrap_d573c861] = env->getStaticMethodID(cls, "wrap", "(Lorg/apache/lucene/index/SortedNumericDocValues;Lorg/apache/lucene/search/SortedNumericSelector$Type;Lorg/apache/lucene/search/SortField$Type;)Lorg/apache/lucene/index/NumericDocValues;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SortedNumericSelector::SortedNumericSelector() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::index::NumericDocValues SortedNumericSelector::wrap(const ::org::apache::lucene::index::SortedNumericDocValues & a0, const ::org::apache::lucene::search::SortedNumericSelector$Type & a1, const ::org::apache::lucene::search::SortField$Type & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::NumericDocValues(env->callStaticObjectMethod(cls, mids$[mid_wrap_d573c861], a0.this$, a1.this$, a2.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SortedNumericSelector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedNumericSelector_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SortedNumericSelector_init_(t_SortedNumericSelector *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SortedNumericSelector_wrap(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_SortedNumericSelector__methods_[] = {
          DECLARE_METHOD(t_SortedNumericSelector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedNumericSelector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedNumericSelector, wrap, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SortedNumericSelector, t_SortedNumericSelector, ::java::lang::Object, SortedNumericSelector, t_SortedNumericSelector_init_, 0, 0, 0, 0, 0);

        void t_SortedNumericSelector::install(PyObject *module)
        {
          installType(&PY_TYPE(SortedNumericSelector), module, "SortedNumericSelector", 0);
          PyDict_SetItemString(PY_TYPE(SortedNumericSelector).tp_dict, "Type", make_descriptor(&PY_TYPE(SortedNumericSelector$Type)));
        }

        void t_SortedNumericSelector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SortedNumericSelector).tp_dict, "class_", make_descriptor(SortedNumericSelector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SortedNumericSelector).tp_dict, "wrapfn_", make_descriptor(t_SortedNumericSelector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SortedNumericSelector).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SortedNumericSelector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortedNumericSelector::initializeClass, 1)))
            return NULL;
          return t_SortedNumericSelector::wrap_Object(SortedNumericSelector(((t_SortedNumericSelector *) arg)->object.this$));
        }
        static PyObject *t_SortedNumericSelector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortedNumericSelector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SortedNumericSelector_init_(t_SortedNumericSelector *self, PyObject *args, PyObject *kwds)
        {
          SortedNumericSelector object((jobject) NULL);

          INT_CALL(object = SortedNumericSelector());
          self->object = object;

          return 0;
        }

        static PyObject *t_SortedNumericSelector_wrap(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::SortedNumericDocValues a0((jobject) NULL);
          ::org::apache::lucene::search::SortedNumericSelector$Type a1((jobject) NULL);
          PyTypeObject **p1;
          ::org::apache::lucene::search::SortField$Type a2((jobject) NULL);
          PyTypeObject **p2;
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "kKK", ::org::apache::lucene::index::SortedNumericDocValues::initializeClass, ::org::apache::lucene::search::SortedNumericSelector$Type::initializeClass, ::org::apache::lucene::search::SortField$Type::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_SortedNumericSelector$Type::parameters_, &a2, &p2, ::org::apache::lucene::search::t_SortField$Type::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::SortedNumericSelector::wrap(a0, a1, a2));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "wrap", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/AttributeReflector.h"
#include "org/apache/lucene/util/Attribute.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *AttributeReflector::class$ = NULL;
        jmethodID *AttributeReflector::mids$ = NULL;
        bool AttributeReflector::live$ = false;

        jclass AttributeReflector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/AttributeReflector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_reflect_6dbf9802] = env->getMethodID(cls, "reflect", "(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Object;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void AttributeReflector::reflect(const ::java::lang::Class & a0, const ::java::lang::String & a1, const ::java::lang::Object & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_reflect_6dbf9802], a0.this$, a1.this$, a2.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_AttributeReflector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AttributeReflector_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AttributeReflector_reflect(t_AttributeReflector *self, PyObject *args);

        static PyMethodDef t_AttributeReflector__methods_[] = {
          DECLARE_METHOD(t_AttributeReflector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeReflector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeReflector, reflect, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(AttributeReflector, t_AttributeReflector, ::java::lang::Object, AttributeReflector, abstract_init, 0, 0, 0, 0, 0);

        void t_AttributeReflector::install(PyObject *module)
        {
          installType(&PY_TYPE(AttributeReflector), module, "AttributeReflector", 0);
        }

        void t_AttributeReflector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(AttributeReflector).tp_dict, "class_", make_descriptor(AttributeReflector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(AttributeReflector).tp_dict, "wrapfn_", make_descriptor(t_AttributeReflector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(AttributeReflector).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_AttributeReflector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AttributeReflector::initializeClass, 1)))
            return NULL;
          return t_AttributeReflector::wrap_Object(AttributeReflector(((t_AttributeReflector *) arg)->object.this$));
        }
        static PyObject *t_AttributeReflector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AttributeReflector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_AttributeReflector_reflect(t_AttributeReflector *self, PyObject *args)
        {
          ::java::lang::Class a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::Object a2((jobject) NULL);

          if (!parseArgs(args, "Kso", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1, &a2))
          {
            OBJ_CALL(self->object.reflect(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "reflect", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/en/EnglishMinimalStemFilterFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {

          ::java::lang::Class *EnglishMinimalStemFilterFactory::class$ = NULL;
          jmethodID *EnglishMinimalStemFilterFactory::mids$ = NULL;
          bool EnglishMinimalStemFilterFactory::live$ = false;

          jclass EnglishMinimalStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/en/EnglishMinimalStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EnglishMinimalStemFilterFactory::EnglishMinimalStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream EnglishMinimalStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {
          static PyObject *t_EnglishMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EnglishMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EnglishMinimalStemFilterFactory_init_(t_EnglishMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EnglishMinimalStemFilterFactory_create(t_EnglishMinimalStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_EnglishMinimalStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_EnglishMinimalStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishMinimalStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishMinimalStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EnglishMinimalStemFilterFactory, t_EnglishMinimalStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, EnglishMinimalStemFilterFactory, t_EnglishMinimalStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_EnglishMinimalStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(EnglishMinimalStemFilterFactory), module, "EnglishMinimalStemFilterFactory", 0);
          }

          void t_EnglishMinimalStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EnglishMinimalStemFilterFactory).tp_dict, "class_", make_descriptor(EnglishMinimalStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EnglishMinimalStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_EnglishMinimalStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EnglishMinimalStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_EnglishMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EnglishMinimalStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_EnglishMinimalStemFilterFactory::wrap_Object(EnglishMinimalStemFilterFactory(((t_EnglishMinimalStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_EnglishMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EnglishMinimalStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EnglishMinimalStemFilterFactory_init_(t_EnglishMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            EnglishMinimalStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = EnglishMinimalStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_EnglishMinimalStemFilterFactory_create(t_EnglishMinimalStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(EnglishMinimalStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/SortedDocValuesField.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *SortedDocValuesField::class$ = NULL;
        jmethodID *SortedDocValuesField::mids$ = NULL;
        bool SortedDocValuesField::live$ = false;
        ::org::apache::lucene::document::FieldType *SortedDocValuesField::TYPE = NULL;

        jclass SortedDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/SortedDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_43cce44e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SortedDocValuesField::SortedDocValuesField(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_43cce44e, a0.this$, a1.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_SortedDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SortedDocValuesField_init_(t_SortedDocValuesField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_SortedDocValuesField__methods_[] = {
          DECLARE_METHOD(t_SortedDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedDocValuesField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SortedDocValuesField, t_SortedDocValuesField, ::org::apache::lucene::document::Field, SortedDocValuesField, t_SortedDocValuesField_init_, 0, 0, 0, 0, 0);

        void t_SortedDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(SortedDocValuesField), module, "SortedDocValuesField", 0);
        }

        void t_SortedDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SortedDocValuesField).tp_dict, "class_", make_descriptor(SortedDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SortedDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_SortedDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SortedDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(SortedDocValuesField::initializeClass);
          PyDict_SetItemString(PY_TYPE(SortedDocValuesField).tp_dict, "TYPE", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*SortedDocValuesField::TYPE)));
        }

        static PyObject *t_SortedDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortedDocValuesField::initializeClass, 1)))
            return NULL;
          return t_SortedDocValuesField::wrap_Object(SortedDocValuesField(((t_SortedDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_SortedDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortedDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SortedDocValuesField_init_(t_SortedDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          SortedDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            INT_CALL(object = SortedDocValuesField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/BytesRefHash$MaxBytesLengthExceededException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *BytesRefHash$MaxBytesLengthExceededException::class$ = NULL;
        jmethodID *BytesRefHash$MaxBytesLengthExceededException::mids$ = NULL;
        bool BytesRefHash$MaxBytesLengthExceededException::live$ = false;

        jclass BytesRefHash$MaxBytesLengthExceededException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/BytesRefHash$MaxBytesLengthExceededException");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_BytesRefHash$MaxBytesLengthExceededException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BytesRefHash$MaxBytesLengthExceededException_instance_(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_BytesRefHash$MaxBytesLengthExceededException__methods_[] = {
          DECLARE_METHOD(t_BytesRefHash$MaxBytesLengthExceededException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefHash$MaxBytesLengthExceededException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BytesRefHash$MaxBytesLengthExceededException, t_BytesRefHash$MaxBytesLengthExceededException, ::java::lang::RuntimeException, BytesRefHash$MaxBytesLengthExceededException, abstract_init, 0, 0, 0, 0, 0);

        void t_BytesRefHash$MaxBytesLengthExceededException::install(PyObject *module)
        {
          installType(&PY_TYPE(BytesRefHash$MaxBytesLengthExceededException), module, "BytesRefHash$MaxBytesLengthExceededException", 0);
        }

        void t_BytesRefHash$MaxBytesLengthExceededException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BytesRefHash$MaxBytesLengthExceededException).tp_dict, "class_", make_descriptor(BytesRefHash$MaxBytesLengthExceededException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BytesRefHash$MaxBytesLengthExceededException).tp_dict, "wrapfn_", make_descriptor(t_BytesRefHash$MaxBytesLengthExceededException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BytesRefHash$MaxBytesLengthExceededException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BytesRefHash$MaxBytesLengthExceededException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BytesRefHash$MaxBytesLengthExceededException::initializeClass, 1)))
            return NULL;
          return t_BytesRefHash$MaxBytesLengthExceededException::wrap_Object(BytesRefHash$MaxBytesLengthExceededException(((t_BytesRefHash$MaxBytesLengthExceededException *) arg)->object.this$));
        }
        static PyObject *t_BytesRefHash$MaxBytesLengthExceededException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BytesRefHash$MaxBytesLengthExceededException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/tst/TSTAutocomplete.h"
#include "java/util/ArrayList.h"
#include "org/apache/lucene/search/suggest/tst/TernaryTreeNode.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace tst {

            ::java::lang::Class *TSTAutocomplete::class$ = NULL;
            jmethodID *TSTAutocomplete::mids$ = NULL;
            bool TSTAutocomplete::live$ = false;

            jclass TSTAutocomplete::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/tst/TSTAutocomplete");

                mids$ = new jmethodID[max_mid];
                mids$[mid_balancedTree_d0572c03] = env->getMethodID(cls, "balancedTree", "([Ljava/lang/Object;[Ljava/lang/Object;IILorg/apache/lucene/search/suggest/tst/TernaryTreeNode;)V");
                mids$[mid_insert_05696b9d] = env->getMethodID(cls, "insert", "(Lorg/apache/lucene/search/suggest/tst/TernaryTreeNode;Ljava/lang/CharSequence;Ljava/lang/Object;I)Lorg/apache/lucene/search/suggest/tst/TernaryTreeNode;");
                mids$[mid_prefixCompletion_d5365801] = env->getMethodID(cls, "prefixCompletion", "(Lorg/apache/lucene/search/suggest/tst/TernaryTreeNode;Ljava/lang/CharSequence;I)Ljava/util/ArrayList;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            void TSTAutocomplete::balancedTree(const JArray< ::java::lang::Object > & a0, const JArray< ::java::lang::Object > & a1, jint a2, jint a3, const ::org::apache::lucene::search::suggest::tst::TernaryTreeNode & a4) const
            {
              env->callVoidMethod(this$, mids$[mid_balancedTree_d0572c03], a0.this$, a1.this$, a2, a3, a4.this$);
            }

            ::org::apache::lucene::search::suggest::tst::TernaryTreeNode TSTAutocomplete::insert(const ::org::apache::lucene::search::suggest::tst::TernaryTreeNode & a0, const ::java::lang::CharSequence & a1, const ::java::lang::Object & a2, jint a3) const
            {
              return ::org::apache::lucene::search::suggest::tst::TernaryTreeNode(env->callObjectMethod(this$, mids$[mid_insert_05696b9d], a0.this$, a1.this$, a2.this$, a3));
            }

            ::java::util::ArrayList TSTAutocomplete::prefixCompletion(const ::org::apache::lucene::search::suggest::tst::TernaryTreeNode & a0, const ::java::lang::CharSequence & a1, jint a2) const
            {
              return ::java::util::ArrayList(env->callObjectMethod(this$, mids$[mid_prefixCompletion_d5365801], a0.this$, a1.this$, a2));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace tst {
            static PyObject *t_TSTAutocomplete_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TSTAutocomplete_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TSTAutocomplete_balancedTree(t_TSTAutocomplete *self, PyObject *args);
            static PyObject *t_TSTAutocomplete_insert(t_TSTAutocomplete *self, PyObject *args);
            static PyObject *t_TSTAutocomplete_prefixCompletion(t_TSTAutocomplete *self, PyObject *args);

            static PyMethodDef t_TSTAutocomplete__methods_[] = {
              DECLARE_METHOD(t_TSTAutocomplete, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TSTAutocomplete, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TSTAutocomplete, balancedTree, METH_VARARGS),
              DECLARE_METHOD(t_TSTAutocomplete, insert, METH_VARARGS),
              DECLARE_METHOD(t_TSTAutocomplete, prefixCompletion, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TSTAutocomplete, t_TSTAutocomplete, ::java::lang::Object, TSTAutocomplete, abstract_init, 0, 0, 0, 0, 0);

            void t_TSTAutocomplete::install(PyObject *module)
            {
              installType(&PY_TYPE(TSTAutocomplete), module, "TSTAutocomplete", 0);
            }

            void t_TSTAutocomplete::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TSTAutocomplete).tp_dict, "class_", make_descriptor(TSTAutocomplete::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TSTAutocomplete).tp_dict, "wrapfn_", make_descriptor(t_TSTAutocomplete::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TSTAutocomplete).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TSTAutocomplete_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TSTAutocomplete::initializeClass, 1)))
                return NULL;
              return t_TSTAutocomplete::wrap_Object(TSTAutocomplete(((t_TSTAutocomplete *) arg)->object.this$));
            }
            static PyObject *t_TSTAutocomplete_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TSTAutocomplete::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_TSTAutocomplete_balancedTree(t_TSTAutocomplete *self, PyObject *args)
            {
              JArray< ::java::lang::Object > a0((jobject) NULL);
              JArray< ::java::lang::Object > a1((jobject) NULL);
              jint a2;
              jint a3;
              ::org::apache::lucene::search::suggest::tst::TernaryTreeNode a4((jobject) NULL);

              if (!parseArgs(args, "[o[oIIk", ::org::apache::lucene::search::suggest::tst::TernaryTreeNode::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(self->object.balancedTree(a0, a1, a2, a3, a4));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "balancedTree", args);
              return NULL;
            }

            static PyObject *t_TSTAutocomplete_insert(t_TSTAutocomplete *self, PyObject *args)
            {
              ::org::apache::lucene::search::suggest::tst::TernaryTreeNode a0((jobject) NULL);
              ::java::lang::CharSequence a1((jobject) NULL);
              ::java::lang::Object a2((jobject) NULL);
              jint a3;
              ::org::apache::lucene::search::suggest::tst::TernaryTreeNode result((jobject) NULL);

              if (!parseArgs(args, "kOoI", ::org::apache::lucene::search::suggest::tst::TernaryTreeNode::initializeClass, &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.insert(a0, a1, a2, a3));
                return ::org::apache::lucene::search::suggest::tst::t_TernaryTreeNode::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "insert", args);
              return NULL;
            }

            static PyObject *t_TSTAutocomplete_prefixCompletion(t_TSTAutocomplete *self, PyObject *args)
            {
              ::org::apache::lucene::search::suggest::tst::TernaryTreeNode a0((jobject) NULL);
              ::java::lang::CharSequence a1((jobject) NULL);
              jint a2;
              ::java::util::ArrayList result((jobject) NULL);

              if (!parseArgs(args, "kOI", ::org::apache::lucene::search::suggest::tst::TernaryTreeNode::initializeClass, &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.prefixCompletion(a0, a1, a2));
                return ::java::util::t_ArrayList::wrap_Object(result, &::org::apache::lucene::search::suggest::tst::PY_TYPE(TernaryTreeNode));
              }

              PyErr_SetArgsError((PyObject *) self, "prefixCompletion", args);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/AbstractPagedMutable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *AbstractPagedMutable::class$ = NULL;
          jmethodID *AbstractPagedMutable::mids$ = NULL;
          bool AbstractPagedMutable::live$ = false;

          jclass AbstractPagedMutable::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/AbstractPagedMutable");

              mids$ = new jmethodID[max_mid];
              mids$[mid_get_0ee6df33] = env->getMethodID(cls, "get", "(J)J");
              mids$[mid_grow_3bfef47c] = env->getMethodID(cls, "grow", "()Lorg/apache/lucene/util/packed/AbstractPagedMutable;");
              mids$[mid_grow_5f2a2a5f] = env->getMethodID(cls, "grow", "(J)Lorg/apache/lucene/util/packed/AbstractPagedMutable;");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_resize_5f2a2a5f] = env->getMethodID(cls, "resize", "(J)Lorg/apache/lucene/util/packed/AbstractPagedMutable;");
              mids$[mid_set_a7e12ca4] = env->getMethodID(cls, "set", "(JJ)V");
              mids$[mid_size_54c6a17a] = env->getMethodID(cls, "size", "()J");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_fillPages_54c6a166] = env->getMethodID(cls, "fillPages", "()V");
              mids$[mid_newMutable_48ebd249] = env->getMethodID(cls, "newMutable", "(II)Lorg/apache/lucene/util/packed/PackedInts$Mutable;");
              mids$[mid_newUnfilledCopy_5f2a2a5f] = env->getMethodID(cls, "newUnfilledCopy", "(J)Lorg/apache/lucene/util/packed/AbstractPagedMutable;");
              mids$[mid_baseRamBytesUsed_54c6a17a] = env->getMethodID(cls, "baseRamBytesUsed", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jlong AbstractPagedMutable::get(jlong a0) const
          {
            return env->callLongMethod(this$, mids$[mid_get_0ee6df33], a0);
          }

          AbstractPagedMutable AbstractPagedMutable::grow() const
          {
            return AbstractPagedMutable(env->callObjectMethod(this$, mids$[mid_grow_3bfef47c]));
          }

          AbstractPagedMutable AbstractPagedMutable::grow(jlong a0) const
          {
            return AbstractPagedMutable(env->callObjectMethod(this$, mids$[mid_grow_5f2a2a5f], a0));
          }

          jlong AbstractPagedMutable::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }

          AbstractPagedMutable AbstractPagedMutable::resize(jlong a0) const
          {
            return AbstractPagedMutable(env->callObjectMethod(this$, mids$[mid_resize_5f2a2a5f], a0));
          }

          void AbstractPagedMutable::set(jlong a0, jlong a1) const
          {
            env->callVoidMethod(this$, mids$[mid_set_a7e12ca4], a0, a1);
          }

          jlong AbstractPagedMutable::size() const
          {
            return env->callLongMethod(this$, mids$[mid_size_54c6a17a]);
          }

          ::java::lang::String AbstractPagedMutable::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_AbstractPagedMutable_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractPagedMutable_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractPagedMutable_of_(t_AbstractPagedMutable *self, PyObject *args);
          static PyObject *t_AbstractPagedMutable_get(t_AbstractPagedMutable *self, PyObject *args);
          static PyObject *t_AbstractPagedMutable_grow(t_AbstractPagedMutable *self, PyObject *args);
          static PyObject *t_AbstractPagedMutable_ramBytesUsed(t_AbstractPagedMutable *self);
          static PyObject *t_AbstractPagedMutable_resize(t_AbstractPagedMutable *self, PyObject *arg);
          static PyObject *t_AbstractPagedMutable_set(t_AbstractPagedMutable *self, PyObject *args);
          static PyObject *t_AbstractPagedMutable_size(t_AbstractPagedMutable *self);
          static PyObject *t_AbstractPagedMutable_toString(t_AbstractPagedMutable *self, PyObject *args);
          static PyObject *t_AbstractPagedMutable_get__parameters_(t_AbstractPagedMutable *self, void *data);
          static PyGetSetDef t_AbstractPagedMutable__fields_[] = {
            DECLARE_GET_FIELD(t_AbstractPagedMutable, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AbstractPagedMutable__methods_[] = {
            DECLARE_METHOD(t_AbstractPagedMutable, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractPagedMutable, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractPagedMutable, of_, METH_VARARGS),
            DECLARE_METHOD(t_AbstractPagedMutable, get, METH_VARARGS),
            DECLARE_METHOD(t_AbstractPagedMutable, grow, METH_VARARGS),
            DECLARE_METHOD(t_AbstractPagedMutable, ramBytesUsed, METH_NOARGS),
            DECLARE_METHOD(t_AbstractPagedMutable, resize, METH_O),
            DECLARE_METHOD(t_AbstractPagedMutable, set, METH_VARARGS),
            DECLARE_METHOD(t_AbstractPagedMutable, size, METH_NOARGS),
            DECLARE_METHOD(t_AbstractPagedMutable, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractPagedMutable, t_AbstractPagedMutable, ::org::apache::lucene::util::LongValues, AbstractPagedMutable, abstract_init, 0, 0, t_AbstractPagedMutable__fields_, 0, 0);
          PyObject *t_AbstractPagedMutable::wrap_Object(const AbstractPagedMutable& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractPagedMutable::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractPagedMutable *self = (t_AbstractPagedMutable *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_AbstractPagedMutable::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractPagedMutable::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractPagedMutable *self = (t_AbstractPagedMutable *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_AbstractPagedMutable::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractPagedMutable), module, "AbstractPagedMutable", 0);
          }

          void t_AbstractPagedMutable::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractPagedMutable).tp_dict, "class_", make_descriptor(AbstractPagedMutable::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractPagedMutable).tp_dict, "wrapfn_", make_descriptor(t_AbstractPagedMutable::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractPagedMutable).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractPagedMutable_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractPagedMutable::initializeClass, 1)))
              return NULL;
            return t_AbstractPagedMutable::wrap_Object(AbstractPagedMutable(((t_AbstractPagedMutable *) arg)->object.this$));
          }
          static PyObject *t_AbstractPagedMutable_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractPagedMutable::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AbstractPagedMutable_of_(t_AbstractPagedMutable *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_AbstractPagedMutable_get(t_AbstractPagedMutable *self, PyObject *args)
          {
            jlong a0;
            jlong result;

            if (!parseArgs(args, "J", &a0))
            {
              OBJ_CALL(result = self->object.get(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(AbstractPagedMutable), (PyObject *) self, "get", args, 2);
          }

          static PyObject *t_AbstractPagedMutable_grow(t_AbstractPagedMutable *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                AbstractPagedMutable result((jobject) NULL);
                OBJ_CALL(result = self->object.grow());
                return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : t_AbstractPagedMutable::wrap_Object(result);
              }
              break;
             case 1:
              {
                jlong a0;
                AbstractPagedMutable result((jobject) NULL);

                if (!parseArgs(args, "J", &a0))
                {
                  OBJ_CALL(result = self->object.grow(a0));
                  return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : t_AbstractPagedMutable::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "grow", args);
            return NULL;
          }

          static PyObject *t_AbstractPagedMutable_ramBytesUsed(t_AbstractPagedMutable *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_AbstractPagedMutable_resize(t_AbstractPagedMutable *self, PyObject *arg)
          {
            jlong a0;
            AbstractPagedMutable result((jobject) NULL);

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(result = self->object.resize(a0));
              return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : t_AbstractPagedMutable::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "resize", arg);
            return NULL;
          }

          static PyObject *t_AbstractPagedMutable_set(t_AbstractPagedMutable *self, PyObject *args)
          {
            jlong a0;
            jlong a1;

            if (!parseArgs(args, "JJ", &a0, &a1))
            {
              OBJ_CALL(self->object.set(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "set", args);
            return NULL;
          }

          static PyObject *t_AbstractPagedMutable_size(t_AbstractPagedMutable *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.size());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_AbstractPagedMutable_toString(t_AbstractPagedMutable *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(AbstractPagedMutable), (PyObject *) self, "toString", args, 2);
          }
          static PyObject *t_AbstractPagedMutable_get__parameters_(t_AbstractPagedMutable *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/FixedBitSet$FixedBitSetIterator.h"
#include "org/apache/lucene/util/FixedBitSet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *FixedBitSet$FixedBitSetIterator::class$ = NULL;
        jmethodID *FixedBitSet$FixedBitSetIterator::mids$ = NULL;
        bool FixedBitSet$FixedBitSetIterator::live$ = false;

        jclass FixedBitSet$FixedBitSetIterator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/FixedBitSet$FixedBitSetIterator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_ef674644] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/FixedBitSet;)V");
            mids$[mid_init$_6ae021e7] = env->getMethodID(cls, "<init>", "([JII)V");
            mids$[mid_advance_39c7bd23] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_54c6a179] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_nextDoc_54c6a179] = env->getMethodID(cls, "nextDoc", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FixedBitSet$FixedBitSetIterator::FixedBitSet$FixedBitSetIterator(const ::org::apache::lucene::util::FixedBitSet & a0) : ::org::apache::lucene::search::DocIdSetIterator(env->newObject(initializeClass, &mids$, mid_init$_ef674644, a0.this$)) {}

        FixedBitSet$FixedBitSetIterator::FixedBitSet$FixedBitSetIterator(const JArray< jlong > & a0, jint a1, jint a2) : ::org::apache::lucene::search::DocIdSetIterator(env->newObject(initializeClass, &mids$, mid_init$_6ae021e7, a0.this$, a1, a2)) {}

        jint FixedBitSet$FixedBitSetIterator::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_39c7bd23], a0);
        }

        jlong FixedBitSet$FixedBitSetIterator::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
        }

        jint FixedBitSet$FixedBitSetIterator::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_54c6a179]);
        }

        jint FixedBitSet$FixedBitSetIterator::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_FixedBitSet$FixedBitSetIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FixedBitSet$FixedBitSetIterator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FixedBitSet$FixedBitSetIterator_init_(t_FixedBitSet$FixedBitSetIterator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FixedBitSet$FixedBitSetIterator_advance(t_FixedBitSet$FixedBitSetIterator *self, PyObject *args);
        static PyObject *t_FixedBitSet$FixedBitSetIterator_cost(t_FixedBitSet$FixedBitSetIterator *self, PyObject *args);
        static PyObject *t_FixedBitSet$FixedBitSetIterator_docID(t_FixedBitSet$FixedBitSetIterator *self, PyObject *args);
        static PyObject *t_FixedBitSet$FixedBitSetIterator_nextDoc(t_FixedBitSet$FixedBitSetIterator *self, PyObject *args);

        static PyMethodDef t_FixedBitSet$FixedBitSetIterator__methods_[] = {
          DECLARE_METHOD(t_FixedBitSet$FixedBitSetIterator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FixedBitSet$FixedBitSetIterator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FixedBitSet$FixedBitSetIterator, advance, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet$FixedBitSetIterator, cost, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet$FixedBitSetIterator, docID, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet$FixedBitSetIterator, nextDoc, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FixedBitSet$FixedBitSetIterator, t_FixedBitSet$FixedBitSetIterator, ::org::apache::lucene::search::DocIdSetIterator, FixedBitSet$FixedBitSetIterator, t_FixedBitSet$FixedBitSetIterator_init_, 0, 0, 0, 0, 0);

        void t_FixedBitSet$FixedBitSetIterator::install(PyObject *module)
        {
          installType(&PY_TYPE(FixedBitSet$FixedBitSetIterator), module, "FixedBitSet$FixedBitSetIterator", 0);
        }

        void t_FixedBitSet$FixedBitSetIterator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FixedBitSet$FixedBitSetIterator).tp_dict, "class_", make_descriptor(FixedBitSet$FixedBitSetIterator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FixedBitSet$FixedBitSetIterator).tp_dict, "wrapfn_", make_descriptor(t_FixedBitSet$FixedBitSetIterator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FixedBitSet$FixedBitSetIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FixedBitSet$FixedBitSetIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FixedBitSet$FixedBitSetIterator::initializeClass, 1)))
            return NULL;
          return t_FixedBitSet$FixedBitSetIterator::wrap_Object(FixedBitSet$FixedBitSetIterator(((t_FixedBitSet$FixedBitSetIterator *) arg)->object.this$));
        }
        static PyObject *t_FixedBitSet$FixedBitSetIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FixedBitSet$FixedBitSetIterator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FixedBitSet$FixedBitSetIterator_init_(t_FixedBitSet$FixedBitSetIterator *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::FixedBitSet a0((jobject) NULL);
              FixedBitSet$FixedBitSetIterator object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::FixedBitSet::initializeClass, &a0))
              {
                INT_CALL(object = FixedBitSet$FixedBitSetIterator(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              JArray< jlong > a0((jobject) NULL);
              jint a1;
              jint a2;
              FixedBitSet$FixedBitSetIterator object((jobject) NULL);

              if (!parseArgs(args, "[JII", &a0, &a1, &a2))
              {
                INT_CALL(object = FixedBitSet$FixedBitSetIterator(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FixedBitSet$FixedBitSetIterator_advance(t_FixedBitSet$FixedBitSetIterator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FixedBitSet$FixedBitSetIterator), (PyObject *) self, "advance", args, 2);
        }

        static PyObject *t_FixedBitSet$FixedBitSetIterator_cost(t_FixedBitSet$FixedBitSetIterator *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FixedBitSet$FixedBitSetIterator), (PyObject *) self, "cost", args, 2);
        }

        static PyObject *t_FixedBitSet$FixedBitSetIterator_docID(t_FixedBitSet$FixedBitSetIterator *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FixedBitSet$FixedBitSetIterator), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_FixedBitSet$FixedBitSetIterator_nextDoc(t_FixedBitSet$FixedBitSetIterator *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FixedBitSet$FixedBitSetIterator), (PyObject *) self, "nextDoc", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/AutomatonProvider.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *AutomatonProvider::class$ = NULL;
          jmethodID *AutomatonProvider::mids$ = NULL;
          bool AutomatonProvider::live$ = false;

          jclass AutomatonProvider::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/AutomatonProvider");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getAutomaton_af13056f] = env->getMethodID(cls, "getAutomaton", "(Ljava/lang/String;)Lorg/apache/lucene/util/automaton/Automaton;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::util::automaton::Automaton AutomatonProvider::getAutomaton(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::util::automaton::Automaton(env->callObjectMethod(this$, mids$[mid_getAutomaton_af13056f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_AutomatonProvider_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AutomatonProvider_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AutomatonProvider_getAutomaton(t_AutomatonProvider *self, PyObject *arg);

          static PyMethodDef t_AutomatonProvider__methods_[] = {
            DECLARE_METHOD(t_AutomatonProvider, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AutomatonProvider, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AutomatonProvider, getAutomaton, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AutomatonProvider, t_AutomatonProvider, ::java::lang::Object, AutomatonProvider, abstract_init, 0, 0, 0, 0, 0);

          void t_AutomatonProvider::install(PyObject *module)
          {
            installType(&PY_TYPE(AutomatonProvider), module, "AutomatonProvider", 0);
          }

          void t_AutomatonProvider::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AutomatonProvider).tp_dict, "class_", make_descriptor(AutomatonProvider::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AutomatonProvider).tp_dict, "wrapfn_", make_descriptor(t_AutomatonProvider::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AutomatonProvider).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AutomatonProvider_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AutomatonProvider::initializeClass, 1)))
              return NULL;
            return t_AutomatonProvider::wrap_Object(AutomatonProvider(((t_AutomatonProvider *) arg)->object.this$));
          }
          static PyObject *t_AutomatonProvider_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AutomatonProvider::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AutomatonProvider_getAutomaton(t_AutomatonProvider *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getAutomaton(a0));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getAutomaton", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/codecs/compressing/CompressionMode.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/index/MergeState.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/IndexableField.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {

          ::java::lang::Class *CompressingStoredFieldsWriter::class$ = NULL;
          jmethodID *CompressingStoredFieldsWriter::mids$ = NULL;
          bool CompressingStoredFieldsWriter::live$ = false;

          jclass CompressingStoredFieldsWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_999e6287] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;Ljava/lang/String;Lorg/apache/lucene/codecs/compressing/CompressionMode;I)V");
              mids$[mid_abort_54c6a166] = env->getMethodID(cls, "abort", "()V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_finish_48f050c2] = env->getMethodID(cls, "finish", "(Lorg/apache/lucene/index/FieldInfos;I)V");
              mids$[mid_finishDocument_54c6a166] = env->getMethodID(cls, "finishDocument", "()V");
              mids$[mid_merge_fd0cfdeb] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/MergeState;)I");
              mids$[mid_startDocument_54c6a166] = env->getMethodID(cls, "startDocument", "()V");
              mids$[mid_writeField_0de3c993] = env->getMethodID(cls, "writeField", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/index/IndexableField;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CompressingStoredFieldsWriter::CompressingStoredFieldsWriter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::java::lang::String & a2, const ::org::apache::lucene::store::IOContext & a3, const ::java::lang::String & a4, const ::org::apache::lucene::codecs::compressing::CompressionMode & a5, jint a6) : ::org::apache::lucene::codecs::StoredFieldsWriter(env->newObject(initializeClass, &mids$, mid_init$_999e6287, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$, a6)) {}

          void CompressingStoredFieldsWriter::abort() const
          {
            env->callVoidMethod(this$, mids$[mid_abort_54c6a166]);
          }

          void CompressingStoredFieldsWriter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          void CompressingStoredFieldsWriter::finish(const ::org::apache::lucene::index::FieldInfos & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_finish_48f050c2], a0.this$, a1);
          }

          void CompressingStoredFieldsWriter::finishDocument() const
          {
            env->callVoidMethod(this$, mids$[mid_finishDocument_54c6a166]);
          }

          jint CompressingStoredFieldsWriter::merge(const ::org::apache::lucene::index::MergeState & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_merge_fd0cfdeb], a0.this$);
          }

          void CompressingStoredFieldsWriter::startDocument() const
          {
            env->callVoidMethod(this$, mids$[mid_startDocument_54c6a166]);
          }

          void CompressingStoredFieldsWriter::writeField(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::index::IndexableField & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_writeField_0de3c993], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {
          static PyObject *t_CompressingStoredFieldsWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressingStoredFieldsWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CompressingStoredFieldsWriter_init_(t_CompressingStoredFieldsWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CompressingStoredFieldsWriter_abort(t_CompressingStoredFieldsWriter *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsWriter_close(t_CompressingStoredFieldsWriter *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsWriter_finish(t_CompressingStoredFieldsWriter *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsWriter_finishDocument(t_CompressingStoredFieldsWriter *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsWriter_merge(t_CompressingStoredFieldsWriter *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsWriter_startDocument(t_CompressingStoredFieldsWriter *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsWriter_writeField(t_CompressingStoredFieldsWriter *self, PyObject *args);

          static PyMethodDef t_CompressingStoredFieldsWriter__methods_[] = {
            DECLARE_METHOD(t_CompressingStoredFieldsWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingStoredFieldsWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingStoredFieldsWriter, abort, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsWriter, close, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsWriter, finish, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsWriter, finishDocument, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsWriter, merge, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsWriter, startDocument, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsWriter, writeField, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CompressingStoredFieldsWriter, t_CompressingStoredFieldsWriter, ::org::apache::lucene::codecs::StoredFieldsWriter, CompressingStoredFieldsWriter, t_CompressingStoredFieldsWriter_init_, 0, 0, 0, 0, 0);

          void t_CompressingStoredFieldsWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(CompressingStoredFieldsWriter), module, "CompressingStoredFieldsWriter", 0);
          }

          void t_CompressingStoredFieldsWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsWriter).tp_dict, "class_", make_descriptor(CompressingStoredFieldsWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsWriter).tp_dict, "wrapfn_", make_descriptor(t_CompressingStoredFieldsWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CompressingStoredFieldsWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompressingStoredFieldsWriter::initializeClass, 1)))
              return NULL;
            return t_CompressingStoredFieldsWriter::wrap_Object(CompressingStoredFieldsWriter(((t_CompressingStoredFieldsWriter *) arg)->object.this$));
          }
          static PyObject *t_CompressingStoredFieldsWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompressingStoredFieldsWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CompressingStoredFieldsWriter_init_(t_CompressingStoredFieldsWriter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);
            ::java::lang::String a4((jobject) NULL);
            ::org::apache::lucene::codecs::compressing::CompressionMode a5((jobject) NULL);
            jint a6;
            CompressingStoredFieldsWriter object((jobject) NULL);

            if (!parseArgs(args, "kkskskI", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, ::org::apache::lucene::codecs::compressing::CompressionMode::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
            {
              INT_CALL(object = CompressingStoredFieldsWriter(a0, a1, a2, a3, a4, a5, a6));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CompressingStoredFieldsWriter_abort(t_CompressingStoredFieldsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.abort());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsWriter), (PyObject *) self, "abort", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsWriter_close(t_CompressingStoredFieldsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsWriter), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsWriter_finish(t_CompressingStoredFieldsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfos a0((jobject) NULL);
            jint a1;

            if (!parseArgs(args, "kI", ::org::apache::lucene::index::FieldInfos::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.finish(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsWriter), (PyObject *) self, "finish", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsWriter_finishDocument(t_CompressingStoredFieldsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.finishDocument());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsWriter), (PyObject *) self, "finishDocument", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsWriter_merge(t_CompressingStoredFieldsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::MergeState a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::MergeState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.merge(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsWriter), (PyObject *) self, "merge", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsWriter_startDocument(t_CompressingStoredFieldsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.startDocument());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsWriter), (PyObject *) self, "startDocument", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsWriter_writeField(t_CompressingStoredFieldsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            ::org::apache::lucene::index::IndexableField a1((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::index::IndexableField::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.writeField(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsWriter), (PyObject *) self, "writeField", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/BoundaryScanner.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *BoundaryScanner::class$ = NULL;
          jmethodID *BoundaryScanner::mids$ = NULL;
          bool BoundaryScanner::live$ = false;

          jclass BoundaryScanner::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/BoundaryScanner");

              mids$ = new jmethodID[max_mid];
              mids$[mid_findEndOffset_f3d950f1] = env->getMethodID(cls, "findEndOffset", "(Ljava/lang/StringBuilder;I)I");
              mids$[mid_findStartOffset_f3d950f1] = env->getMethodID(cls, "findStartOffset", "(Ljava/lang/StringBuilder;I)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint BoundaryScanner::findEndOffset(const ::java::lang::StringBuilder & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_findEndOffset_f3d950f1], a0.this$, a1);
          }

          jint BoundaryScanner::findStartOffset(const ::java::lang::StringBuilder & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_findStartOffset_f3d950f1], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_BoundaryScanner_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BoundaryScanner_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BoundaryScanner_findEndOffset(t_BoundaryScanner *self, PyObject *args);
          static PyObject *t_BoundaryScanner_findStartOffset(t_BoundaryScanner *self, PyObject *args);

          static PyMethodDef t_BoundaryScanner__methods_[] = {
            DECLARE_METHOD(t_BoundaryScanner, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BoundaryScanner, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BoundaryScanner, findEndOffset, METH_VARARGS),
            DECLARE_METHOD(t_BoundaryScanner, findStartOffset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BoundaryScanner, t_BoundaryScanner, ::java::lang::Object, BoundaryScanner, abstract_init, 0, 0, 0, 0, 0);

          void t_BoundaryScanner::install(PyObject *module)
          {
            installType(&PY_TYPE(BoundaryScanner), module, "BoundaryScanner", 0);
          }

          void t_BoundaryScanner::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BoundaryScanner).tp_dict, "class_", make_descriptor(BoundaryScanner::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BoundaryScanner).tp_dict, "wrapfn_", make_descriptor(t_BoundaryScanner::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BoundaryScanner).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BoundaryScanner_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BoundaryScanner::initializeClass, 1)))
              return NULL;
            return t_BoundaryScanner::wrap_Object(BoundaryScanner(((t_BoundaryScanner *) arg)->object.this$));
          }
          static PyObject *t_BoundaryScanner_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BoundaryScanner::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_BoundaryScanner_findEndOffset(t_BoundaryScanner *self, PyObject *args)
          {
            ::java::lang::StringBuilder a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "kI", ::java::lang::StringBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.findEndOffset(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "findEndOffset", args);
            return NULL;
          }

          static PyObject *t_BoundaryScanner_findStartOffset(t_BoundaryScanner *self, PyObject *args)
          {
            ::java::lang::StringBuilder a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "kI", ::java::lang::StringBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.findStartOffset(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "findStartOffset", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "java/lang/Iterable.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Weight.h"
#include "org/apache/lucene/search/BooleanClause.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/util/Set.h"
#include "java/lang/String.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/search/BooleanClause$Occur.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *BooleanQuery::class$ = NULL;
        jmethodID *BooleanQuery::mids$ = NULL;
        bool BooleanQuery::live$ = false;

        jclass BooleanQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/BooleanQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_bb0c767f] = env->getMethodID(cls, "<init>", "(Z)V");
            mids$[mid_add_982477b6] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/search/BooleanClause;)V");
            mids$[mid_add_827be425] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/BooleanClause$Occur;)V");
            mids$[mid_clauses_87851566] = env->getMethodID(cls, "clauses", "()Ljava/util/List;");
            mids$[mid_clone_6f9339e7] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/search/BooleanQuery;");
            mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
            mids$[mid_getClauses_e6b4c83b] = env->getMethodID(cls, "getClauses", "()[Lorg/apache/lucene/search/BooleanClause;");
            mids$[mid_getMaxClauseCount_54c6a179] = env->getStaticMethodID(cls, "getMaxClauseCount", "()I");
            mids$[mid_getMinimumNumberShouldMatch_54c6a179] = env->getMethodID(cls, "getMinimumNumberShouldMatch", "()I");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_isCoordDisabled_54c6a16a] = env->getMethodID(cls, "isCoordDisabled", "()Z");
            mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_setMaxClauseCount_39c7bd3c] = env->getStaticMethodID(cls, "setMaxClauseCount", "(I)V");
            mids$[mid_setMinimumNumberShouldMatch_39c7bd3c] = env->getMethodID(cls, "setMinimumNumberShouldMatch", "(I)V");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BooleanQuery::BooleanQuery() : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        BooleanQuery::BooleanQuery(jboolean a0) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_bb0c767f, a0)) {}

        void BooleanQuery::add(const ::org::apache::lucene::search::BooleanClause & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_982477b6], a0.this$);
        }

        void BooleanQuery::add(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::BooleanClause$Occur & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_add_827be425], a0.this$, a1.this$);
        }

        ::java::util::List BooleanQuery::clauses() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_clauses_87851566]));
        }

        BooleanQuery BooleanQuery::clone() const
        {
          return BooleanQuery(env->callObjectMethod(this$, mids$[mid_clone_6f9339e7]));
        }

        ::org::apache::lucene::search::Weight BooleanQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
        }

        jboolean BooleanQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void BooleanQuery::extractTerms(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
        }

        JArray< ::org::apache::lucene::search::BooleanClause > BooleanQuery::getClauses() const
        {
          return JArray< ::org::apache::lucene::search::BooleanClause >(env->callObjectMethod(this$, mids$[mid_getClauses_e6b4c83b]));
        }

        jint BooleanQuery::getMaxClauseCount()
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_getMaxClauseCount_54c6a179]);
        }

        jint BooleanQuery::getMinimumNumberShouldMatch() const
        {
          return env->callIntMethod(this$, mids$[mid_getMinimumNumberShouldMatch_54c6a179]);
        }

        jint BooleanQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean BooleanQuery::isCoordDisabled() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCoordDisabled_54c6a16a]);
        }

        ::java::util::Iterator BooleanQuery::iterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
        }

        ::org::apache::lucene::search::Query BooleanQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
        }

        void BooleanQuery::setMaxClauseCount(jint a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_setMaxClauseCount_39c7bd3c], a0);
        }

        void BooleanQuery::setMinimumNumberShouldMatch(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMinimumNumberShouldMatch_39c7bd3c], a0);
        }

        ::java::lang::String BooleanQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/BooleanQuery$TooManyClauses.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_BooleanQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BooleanQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BooleanQuery_init_(t_BooleanQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BooleanQuery_add(t_BooleanQuery *self, PyObject *args);
        static PyObject *t_BooleanQuery_clauses(t_BooleanQuery *self);
        static PyObject *t_BooleanQuery_clone(t_BooleanQuery *self, PyObject *args);
        static PyObject *t_BooleanQuery_createWeight(t_BooleanQuery *self, PyObject *args);
        static PyObject *t_BooleanQuery_equals(t_BooleanQuery *self, PyObject *args);
        static PyObject *t_BooleanQuery_extractTerms(t_BooleanQuery *self, PyObject *args);
        static PyObject *t_BooleanQuery_getClauses(t_BooleanQuery *self);
        static PyObject *t_BooleanQuery_getMaxClauseCount(PyTypeObject *type);
        static PyObject *t_BooleanQuery_getMinimumNumberShouldMatch(t_BooleanQuery *self);
        static PyObject *t_BooleanQuery_hashCode(t_BooleanQuery *self, PyObject *args);
        static PyObject *t_BooleanQuery_isCoordDisabled(t_BooleanQuery *self);
        static PyObject *t_BooleanQuery_iterator(t_BooleanQuery *self);
        static PyObject *t_BooleanQuery_rewrite(t_BooleanQuery *self, PyObject *args);
        static PyObject *t_BooleanQuery_setMaxClauseCount(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BooleanQuery_setMinimumNumberShouldMatch(t_BooleanQuery *self, PyObject *arg);
        static PyObject *t_BooleanQuery_toString(t_BooleanQuery *self, PyObject *args);
        static PyObject *t_BooleanQuery_get__coordDisabled(t_BooleanQuery *self, void *data);
        static PyObject *t_BooleanQuery_get__maxClauseCount(t_BooleanQuery *self, void *data);
        static int t_BooleanQuery_set__maxClauseCount(t_BooleanQuery *self, PyObject *arg, void *data);
        static PyObject *t_BooleanQuery_get__minimumNumberShouldMatch(t_BooleanQuery *self, void *data);
        static int t_BooleanQuery_set__minimumNumberShouldMatch(t_BooleanQuery *self, PyObject *arg, void *data);
        static PyGetSetDef t_BooleanQuery__fields_[] = {
          DECLARE_GET_FIELD(t_BooleanQuery, coordDisabled),
          DECLARE_GETSET_FIELD(t_BooleanQuery, maxClauseCount),
          DECLARE_GETSET_FIELD(t_BooleanQuery, minimumNumberShouldMatch),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BooleanQuery__methods_[] = {
          DECLARE_METHOD(t_BooleanQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BooleanQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BooleanQuery, add, METH_VARARGS),
          DECLARE_METHOD(t_BooleanQuery, clauses, METH_NOARGS),
          DECLARE_METHOD(t_BooleanQuery, clone, METH_VARARGS),
          DECLARE_METHOD(t_BooleanQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_BooleanQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_BooleanQuery, extractTerms, METH_VARARGS),
          DECLARE_METHOD(t_BooleanQuery, getClauses, METH_NOARGS),
          DECLARE_METHOD(t_BooleanQuery, getMaxClauseCount, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_BooleanQuery, getMinimumNumberShouldMatch, METH_NOARGS),
          DECLARE_METHOD(t_BooleanQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_BooleanQuery, isCoordDisabled, METH_NOARGS),
          DECLARE_METHOD(t_BooleanQuery, iterator, METH_NOARGS),
          DECLARE_METHOD(t_BooleanQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_BooleanQuery, setMaxClauseCount, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BooleanQuery, setMinimumNumberShouldMatch, METH_O),
          DECLARE_METHOD(t_BooleanQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BooleanQuery, t_BooleanQuery, ::org::apache::lucene::search::Query, BooleanQuery, t_BooleanQuery_init_, ((PyObject *(*)(t_BooleanQuery *)) get_iterator< t_BooleanQuery >), 0, t_BooleanQuery__fields_, 0, 0);

        void t_BooleanQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(BooleanQuery), module, "BooleanQuery", 0);
          PyDict_SetItemString(PY_TYPE(BooleanQuery).tp_dict, "TooManyClauses", make_descriptor(&PY_TYPE(BooleanQuery$TooManyClauses)));
        }

        void t_BooleanQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BooleanQuery).tp_dict, "class_", make_descriptor(BooleanQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BooleanQuery).tp_dict, "wrapfn_", make_descriptor(t_BooleanQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BooleanQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BooleanQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BooleanQuery::initializeClass, 1)))
            return NULL;
          return t_BooleanQuery::wrap_Object(BooleanQuery(((t_BooleanQuery *) arg)->object.this$));
        }
        static PyObject *t_BooleanQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BooleanQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BooleanQuery_init_(t_BooleanQuery *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              BooleanQuery object((jobject) NULL);

              INT_CALL(object = BooleanQuery());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              jboolean a0;
              BooleanQuery object((jobject) NULL);

              if (!parseArgs(args, "Z", &a0))
              {
                INT_CALL(object = BooleanQuery(a0));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BooleanQuery_add(t_BooleanQuery *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::search::BooleanClause a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::BooleanClause::initializeClass, &a0))
              {
                OBJ_CALL(self->object.add(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              ::org::apache::lucene::search::BooleanClause$Occur a1((jobject) NULL);
              PyTypeObject **p1;

              if (!parseArgs(args, "kK", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_))
              {
                OBJ_CALL(self->object.add(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "add", args);
          return NULL;
        }

        static PyObject *t_BooleanQuery_clauses(t_BooleanQuery *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.clauses());
          return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::PY_TYPE(BooleanClause));
        }

        static PyObject *t_BooleanQuery_clone(t_BooleanQuery *self, PyObject *args)
        {
          BooleanQuery result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.clone());
            return t_BooleanQuery::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(BooleanQuery), (PyObject *) self, "clone", args, 2);
        }

        static PyObject *t_BooleanQuery_createWeight(t_BooleanQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.createWeight(a0));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(BooleanQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_BooleanQuery_equals(t_BooleanQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(BooleanQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_BooleanQuery_extractTerms(t_BooleanQuery *self, PyObject *args)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.extractTerms(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(BooleanQuery), (PyObject *) self, "extractTerms", args, 2);
        }

        static PyObject *t_BooleanQuery_getClauses(t_BooleanQuery *self)
        {
          JArray< ::org::apache::lucene::search::BooleanClause > result((jobject) NULL);
          OBJ_CALL(result = self->object.getClauses());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::t_BooleanClause::wrap_jobject);
        }

        static PyObject *t_BooleanQuery_getMaxClauseCount(PyTypeObject *type)
        {
          jint result;
          OBJ_CALL(result = ::org::apache::lucene::search::BooleanQuery::getMaxClauseCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_BooleanQuery_getMinimumNumberShouldMatch(t_BooleanQuery *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMinimumNumberShouldMatch());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_BooleanQuery_hashCode(t_BooleanQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(BooleanQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_BooleanQuery_isCoordDisabled(t_BooleanQuery *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isCoordDisabled());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_BooleanQuery_iterator(t_BooleanQuery *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.iterator());
          return ::java::util::t_Iterator::wrap_Object(result, &::org::apache::lucene::search::PY_TYPE(BooleanClause));
        }

        static PyObject *t_BooleanQuery_rewrite(t_BooleanQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(BooleanQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_BooleanQuery_setMaxClauseCount(PyTypeObject *type, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(::org::apache::lucene::search::BooleanQuery::setMaxClauseCount(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "setMaxClauseCount", arg);
          return NULL;
        }

        static PyObject *t_BooleanQuery_setMinimumNumberShouldMatch(t_BooleanQuery *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setMinimumNumberShouldMatch(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMinimumNumberShouldMatch", arg);
          return NULL;
        }

        static PyObject *t_BooleanQuery_toString(t_BooleanQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(BooleanQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_BooleanQuery_get__coordDisabled(t_BooleanQuery *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isCoordDisabled());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_BooleanQuery_get__maxClauseCount(t_BooleanQuery *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxClauseCount());
          return PyInt_FromLong((long) value);
        }
        static int t_BooleanQuery_set__maxClauseCount(t_BooleanQuery *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMaxClauseCount(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxClauseCount", arg);
          return -1;
        }

        static PyObject *t_BooleanQuery_get__minimumNumberShouldMatch(t_BooleanQuery *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMinimumNumberShouldMatch());
          return PyInt_FromLong((long) value);
        }
        static int t_BooleanQuery_set__minimumNumberShouldMatch(t_BooleanQuery *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMinimumNumberShouldMatch(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "minimumNumberShouldMatch", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/SrndPrefixQuery.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/surround/query/SimpleTerm$MatchingTermVisitor.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Term.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *SrndPrefixQuery::class$ = NULL;
            jmethodID *SrndPrefixQuery::mids$ = NULL;
            bool SrndPrefixQuery::live$ = false;

            jclass SrndPrefixQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/SrndPrefixQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f33a591b] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;ZC)V");
                mids$[mid_getLucenePrefixTerm_2864f4ee] = env->getMethodID(cls, "getLucenePrefixTerm", "(Ljava/lang/String;)Lorg/apache/lucene/index/Term;");
                mids$[mid_getPrefix_14c7b5c5] = env->getMethodID(cls, "getPrefix", "()Ljava/lang/String;");
                mids$[mid_getSuffixOperator_54c6a173] = env->getMethodID(cls, "getSuffixOperator", "()C");
                mids$[mid_toStringUnquoted_14c7b5c5] = env->getMethodID(cls, "toStringUnquoted", "()Ljava/lang/String;");
                mids$[mid_visitMatchingTerms_330199a1] = env->getMethodID(cls, "visitMatchingTerms", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/SimpleTerm$MatchingTermVisitor;)V");
                mids$[mid_suffixToString_9f94ae34] = env->getMethodID(cls, "suffixToString", "(Ljava/lang/StringBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SrndPrefixQuery::SrndPrefixQuery(const ::java::lang::String & a0, jboolean a1, jchar a2) : ::org::apache::lucene::queryparser::surround::query::SimpleTerm(env->newObject(initializeClass, &mids$, mid_init$_f33a591b, a0.this$, a1, a2)) {}

            ::org::apache::lucene::index::Term SrndPrefixQuery::getLucenePrefixTerm(const ::java::lang::String & a0) const
            {
              return ::org::apache::lucene::index::Term(env->callObjectMethod(this$, mids$[mid_getLucenePrefixTerm_2864f4ee], a0.this$));
            }

            ::java::lang::String SrndPrefixQuery::getPrefix() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getPrefix_14c7b5c5]));
            }

            jchar SrndPrefixQuery::getSuffixOperator() const
            {
              return env->callCharMethod(this$, mids$[mid_getSuffixOperator_54c6a173]);
            }

            ::java::lang::String SrndPrefixQuery::toStringUnquoted() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toStringUnquoted_14c7b5c5]));
            }

            void SrndPrefixQuery::visitMatchingTerms(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor & a2) const
            {
              env->callVoidMethod(this$, mids$[mid_visitMatchingTerms_330199a1], a0.this$, a1.this$, a2.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_SrndPrefixQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SrndPrefixQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SrndPrefixQuery_init_(t_SrndPrefixQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SrndPrefixQuery_getLucenePrefixTerm(t_SrndPrefixQuery *self, PyObject *arg);
            static PyObject *t_SrndPrefixQuery_getPrefix(t_SrndPrefixQuery *self);
            static PyObject *t_SrndPrefixQuery_getSuffixOperator(t_SrndPrefixQuery *self);
            static PyObject *t_SrndPrefixQuery_toStringUnquoted(t_SrndPrefixQuery *self, PyObject *args);
            static PyObject *t_SrndPrefixQuery_visitMatchingTerms(t_SrndPrefixQuery *self, PyObject *args);
            static PyObject *t_SrndPrefixQuery_get__prefix(t_SrndPrefixQuery *self, void *data);
            static PyObject *t_SrndPrefixQuery_get__suffixOperator(t_SrndPrefixQuery *self, void *data);
            static PyGetSetDef t_SrndPrefixQuery__fields_[] = {
              DECLARE_GET_FIELD(t_SrndPrefixQuery, prefix),
              DECLARE_GET_FIELD(t_SrndPrefixQuery, suffixOperator),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_SrndPrefixQuery__methods_[] = {
              DECLARE_METHOD(t_SrndPrefixQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SrndPrefixQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SrndPrefixQuery, getLucenePrefixTerm, METH_O),
              DECLARE_METHOD(t_SrndPrefixQuery, getPrefix, METH_NOARGS),
              DECLARE_METHOD(t_SrndPrefixQuery, getSuffixOperator, METH_NOARGS),
              DECLARE_METHOD(t_SrndPrefixQuery, toStringUnquoted, METH_VARARGS),
              DECLARE_METHOD(t_SrndPrefixQuery, visitMatchingTerms, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SrndPrefixQuery, t_SrndPrefixQuery, ::org::apache::lucene::queryparser::surround::query::SimpleTerm, SrndPrefixQuery, t_SrndPrefixQuery_init_, 0, 0, t_SrndPrefixQuery__fields_, 0, 0);

            void t_SrndPrefixQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(SrndPrefixQuery), module, "SrndPrefixQuery", 0);
            }

            void t_SrndPrefixQuery::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SrndPrefixQuery).tp_dict, "class_", make_descriptor(SrndPrefixQuery::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SrndPrefixQuery).tp_dict, "wrapfn_", make_descriptor(t_SrndPrefixQuery::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SrndPrefixQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SrndPrefixQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SrndPrefixQuery::initializeClass, 1)))
                return NULL;
              return t_SrndPrefixQuery::wrap_Object(SrndPrefixQuery(((t_SrndPrefixQuery *) arg)->object.this$));
            }
            static PyObject *t_SrndPrefixQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SrndPrefixQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SrndPrefixQuery_init_(t_SrndPrefixQuery *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              jboolean a1;
              jchar a2;
              SrndPrefixQuery object((jobject) NULL);

              if (!parseArgs(args, "sZC", &a0, &a1, &a2))
              {
                INT_CALL(object = SrndPrefixQuery(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_SrndPrefixQuery_getLucenePrefixTerm(t_SrndPrefixQuery *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::index::Term result((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = self->object.getLucenePrefixTerm(a0));
                return ::org::apache::lucene::index::t_Term::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getLucenePrefixTerm", arg);
              return NULL;
            }

            static PyObject *t_SrndPrefixQuery_getPrefix(t_SrndPrefixQuery *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getPrefix());
              return j2p(result);
            }

            static PyObject *t_SrndPrefixQuery_getSuffixOperator(t_SrndPrefixQuery *self)
            {
              jchar result;
              OBJ_CALL(result = self->object.getSuffixOperator());
              return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            static PyObject *t_SrndPrefixQuery_toStringUnquoted(t_SrndPrefixQuery *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toStringUnquoted());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(SrndPrefixQuery), (PyObject *) self, "toStringUnquoted", args, 2);
            }

            static PyObject *t_SrndPrefixQuery_visitMatchingTerms(t_SrndPrefixQuery *self, PyObject *args)
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor a2((jobject) NULL);

              if (!parseArgs(args, "ksk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.visitMatchingTerms(a0, a1, a2));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(SrndPrefixQuery), (PyObject *) self, "visitMatchingTerms", args, 2);
            }

            static PyObject *t_SrndPrefixQuery_get__prefix(t_SrndPrefixQuery *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getPrefix());
              return j2p(value);
            }

            static PyObject *t_SrndPrefixQuery_get__suffixOperator(t_SrndPrefixQuery *self, void *data)
            {
              jchar value;
              OBJ_CALL(value = self->object.getSuffixOperator());
              return PyUnicode_FromUnicode((Py_UNICODE *) &value, 1);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/en/EnglishMinimalStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {

          ::java::lang::Class *EnglishMinimalStemmer::class$ = NULL;
          jmethodID *EnglishMinimalStemmer::mids$ = NULL;
          bool EnglishMinimalStemmer::live$ = false;

          jclass EnglishMinimalStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/en/EnglishMinimalStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EnglishMinimalStemmer::EnglishMinimalStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint EnglishMinimalStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {
          static PyObject *t_EnglishMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EnglishMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EnglishMinimalStemmer_init_(t_EnglishMinimalStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EnglishMinimalStemmer_stem(t_EnglishMinimalStemmer *self, PyObject *args);

          static PyMethodDef t_EnglishMinimalStemmer__methods_[] = {
            DECLARE_METHOD(t_EnglishMinimalStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishMinimalStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishMinimalStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EnglishMinimalStemmer, t_EnglishMinimalStemmer, ::java::lang::Object, EnglishMinimalStemmer, t_EnglishMinimalStemmer_init_, 0, 0, 0, 0, 0);

          void t_EnglishMinimalStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(EnglishMinimalStemmer), module, "EnglishMinimalStemmer", 0);
          }

          void t_EnglishMinimalStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EnglishMinimalStemmer).tp_dict, "class_", make_descriptor(EnglishMinimalStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EnglishMinimalStemmer).tp_dict, "wrapfn_", make_descriptor(t_EnglishMinimalStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EnglishMinimalStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_EnglishMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EnglishMinimalStemmer::initializeClass, 1)))
              return NULL;
            return t_EnglishMinimalStemmer::wrap_Object(EnglishMinimalStemmer(((t_EnglishMinimalStemmer *) arg)->object.this$));
          }
          static PyObject *t_EnglishMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EnglishMinimalStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EnglishMinimalStemmer_init_(t_EnglishMinimalStemmer *self, PyObject *args, PyObject *kwds)
          {
            EnglishMinimalStemmer object((jobject) NULL);

            INT_CALL(object = EnglishMinimalStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_EnglishMinimalStemmer_stem(t_EnglishMinimalStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/TwoPhaseCommitTool$CommitFailException.h"
#include "java/lang/Throwable.h"
#include "org/apache/lucene/index/TwoPhaseCommit.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *TwoPhaseCommitTool$CommitFailException::class$ = NULL;
        jmethodID *TwoPhaseCommitTool$CommitFailException::mids$ = NULL;
        bool TwoPhaseCommitTool$CommitFailException::live$ = false;

        jclass TwoPhaseCommitTool$CommitFailException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/TwoPhaseCommitTool$CommitFailException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_52a0ac67] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;Lorg/apache/lucene/index/TwoPhaseCommit;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TwoPhaseCommitTool$CommitFailException::TwoPhaseCommitTool$CommitFailException(const ::java::lang::Throwable & a0, const ::org::apache::lucene::index::TwoPhaseCommit & a1) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_52a0ac67, a0.this$, a1.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_TwoPhaseCommitTool$CommitFailException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TwoPhaseCommitTool$CommitFailException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TwoPhaseCommitTool$CommitFailException_init_(t_TwoPhaseCommitTool$CommitFailException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_TwoPhaseCommitTool$CommitFailException__methods_[] = {
          DECLARE_METHOD(t_TwoPhaseCommitTool$CommitFailException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TwoPhaseCommitTool$CommitFailException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TwoPhaseCommitTool$CommitFailException, t_TwoPhaseCommitTool$CommitFailException, ::java::io::IOException, TwoPhaseCommitTool$CommitFailException, t_TwoPhaseCommitTool$CommitFailException_init_, 0, 0, 0, 0, 0);

        void t_TwoPhaseCommitTool$CommitFailException::install(PyObject *module)
        {
          installType(&PY_TYPE(TwoPhaseCommitTool$CommitFailException), module, "TwoPhaseCommitTool$CommitFailException", 0);
        }

        void t_TwoPhaseCommitTool$CommitFailException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TwoPhaseCommitTool$CommitFailException).tp_dict, "class_", make_descriptor(TwoPhaseCommitTool$CommitFailException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TwoPhaseCommitTool$CommitFailException).tp_dict, "wrapfn_", make_descriptor(t_TwoPhaseCommitTool$CommitFailException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TwoPhaseCommitTool$CommitFailException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TwoPhaseCommitTool$CommitFailException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TwoPhaseCommitTool$CommitFailException::initializeClass, 1)))
            return NULL;
          return t_TwoPhaseCommitTool$CommitFailException::wrap_Object(TwoPhaseCommitTool$CommitFailException(((t_TwoPhaseCommitTool$CommitFailException *) arg)->object.this$));
        }
        static PyObject *t_TwoPhaseCommitTool$CommitFailException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TwoPhaseCommitTool$CommitFailException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TwoPhaseCommitTool$CommitFailException_init_(t_TwoPhaseCommitTool$CommitFailException *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::Throwable a0((jobject) NULL);
          ::org::apache::lucene::index::TwoPhaseCommit a1((jobject) NULL);
          TwoPhaseCommitTool$CommitFailException object((jobject) NULL);

          if (!parseArgs(args, "kk", ::java::lang::Throwable::initializeClass, ::org::apache::lucene::index::TwoPhaseCommit::initializeClass, &a0, &a1))
          {
            INT_CALL(object = TwoPhaseCommitTool$CommitFailException(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/RecyclingByteBlockAllocator.h"
#include "org/apache/lucene/util/Counter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *RecyclingByteBlockAllocator::class$ = NULL;
        jmethodID *RecyclingByteBlockAllocator::mids$ = NULL;
        bool RecyclingByteBlockAllocator::live$ = false;
        jint RecyclingByteBlockAllocator::DEFAULT_BUFFERED_BLOCKS = (jint) 0;

        jclass RecyclingByteBlockAllocator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/RecyclingByteBlockAllocator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_d8d154a6] = env->getMethodID(cls, "<init>", "(II)V");
            mids$[mid_init$_bdd89aab] = env->getMethodID(cls, "<init>", "(IILorg/apache/lucene/util/Counter;)V");
            mids$[mid_bytesUsed_54c6a17a] = env->getMethodID(cls, "bytesUsed", "()J");
            mids$[mid_freeBlocks_39c7bd23] = env->getMethodID(cls, "freeBlocks", "(I)I");
            mids$[mid_getByteBlock_dab10e7e] = env->getMethodID(cls, "getByteBlock", "()[B");
            mids$[mid_maxBufferedBlocks_54c6a179] = env->getMethodID(cls, "maxBufferedBlocks", "()I");
            mids$[mid_numBufferedBlocks_54c6a179] = env->getMethodID(cls, "numBufferedBlocks", "()I");
            mids$[mid_recycleByteBlocks_d3ffa89f] = env->getMethodID(cls, "recycleByteBlocks", "([[BII)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_BUFFERED_BLOCKS = env->getStaticIntField(cls, "DEFAULT_BUFFERED_BLOCKS");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RecyclingByteBlockAllocator::RecyclingByteBlockAllocator() : ::org::apache::lucene::util::ByteBlockPool$Allocator(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        RecyclingByteBlockAllocator::RecyclingByteBlockAllocator(jint a0, jint a1) : ::org::apache::lucene::util::ByteBlockPool$Allocator(env->newObject(initializeClass, &mids$, mid_init$_d8d154a6, a0, a1)) {}

        RecyclingByteBlockAllocator::RecyclingByteBlockAllocator(jint a0, jint a1, const ::org::apache::lucene::util::Counter & a2) : ::org::apache::lucene::util::ByteBlockPool$Allocator(env->newObject(initializeClass, &mids$, mid_init$_bdd89aab, a0, a1, a2.this$)) {}

        jlong RecyclingByteBlockAllocator::bytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_bytesUsed_54c6a17a]);
        }

        jint RecyclingByteBlockAllocator::freeBlocks(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_freeBlocks_39c7bd23], a0);
        }

        JArray< jbyte > RecyclingByteBlockAllocator::getByteBlock() const
        {
          return JArray< jbyte >(env->callObjectMethod(this$, mids$[mid_getByteBlock_dab10e7e]));
        }

        jint RecyclingByteBlockAllocator::maxBufferedBlocks() const
        {
          return env->callIntMethod(this$, mids$[mid_maxBufferedBlocks_54c6a179]);
        }

        jint RecyclingByteBlockAllocator::numBufferedBlocks() const
        {
          return env->callIntMethod(this$, mids$[mid_numBufferedBlocks_54c6a179]);
        }

        void RecyclingByteBlockAllocator::recycleByteBlocks(const JArray< JArray< jbyte > > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_recycleByteBlocks_d3ffa89f], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_RecyclingByteBlockAllocator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RecyclingByteBlockAllocator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RecyclingByteBlockAllocator_init_(t_RecyclingByteBlockAllocator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RecyclingByteBlockAllocator_bytesUsed(t_RecyclingByteBlockAllocator *self);
        static PyObject *t_RecyclingByteBlockAllocator_freeBlocks(t_RecyclingByteBlockAllocator *self, PyObject *arg);
        static PyObject *t_RecyclingByteBlockAllocator_getByteBlock(t_RecyclingByteBlockAllocator *self, PyObject *args);
        static PyObject *t_RecyclingByteBlockAllocator_maxBufferedBlocks(t_RecyclingByteBlockAllocator *self);
        static PyObject *t_RecyclingByteBlockAllocator_numBufferedBlocks(t_RecyclingByteBlockAllocator *self);
        static PyObject *t_RecyclingByteBlockAllocator_recycleByteBlocks(t_RecyclingByteBlockAllocator *self, PyObject *args);
        static PyObject *t_RecyclingByteBlockAllocator_get__byteBlock(t_RecyclingByteBlockAllocator *self, void *data);
        static PyGetSetDef t_RecyclingByteBlockAllocator__fields_[] = {
          DECLARE_GET_FIELD(t_RecyclingByteBlockAllocator, byteBlock),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RecyclingByteBlockAllocator__methods_[] = {
          DECLARE_METHOD(t_RecyclingByteBlockAllocator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RecyclingByteBlockAllocator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RecyclingByteBlockAllocator, bytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_RecyclingByteBlockAllocator, freeBlocks, METH_O),
          DECLARE_METHOD(t_RecyclingByteBlockAllocator, getByteBlock, METH_VARARGS),
          DECLARE_METHOD(t_RecyclingByteBlockAllocator, maxBufferedBlocks, METH_NOARGS),
          DECLARE_METHOD(t_RecyclingByteBlockAllocator, numBufferedBlocks, METH_NOARGS),
          DECLARE_METHOD(t_RecyclingByteBlockAllocator, recycleByteBlocks, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RecyclingByteBlockAllocator, t_RecyclingByteBlockAllocator, ::org::apache::lucene::util::ByteBlockPool$Allocator, RecyclingByteBlockAllocator, t_RecyclingByteBlockAllocator_init_, 0, 0, t_RecyclingByteBlockAllocator__fields_, 0, 0);

        void t_RecyclingByteBlockAllocator::install(PyObject *module)
        {
          installType(&PY_TYPE(RecyclingByteBlockAllocator), module, "RecyclingByteBlockAllocator", 0);
        }

        void t_RecyclingByteBlockAllocator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RecyclingByteBlockAllocator).tp_dict, "class_", make_descriptor(RecyclingByteBlockAllocator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RecyclingByteBlockAllocator).tp_dict, "wrapfn_", make_descriptor(t_RecyclingByteBlockAllocator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RecyclingByteBlockAllocator).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(RecyclingByteBlockAllocator::initializeClass);
          PyDict_SetItemString(PY_TYPE(RecyclingByteBlockAllocator).tp_dict, "DEFAULT_BUFFERED_BLOCKS", make_descriptor(RecyclingByteBlockAllocator::DEFAULT_BUFFERED_BLOCKS));
        }

        static PyObject *t_RecyclingByteBlockAllocator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RecyclingByteBlockAllocator::initializeClass, 1)))
            return NULL;
          return t_RecyclingByteBlockAllocator::wrap_Object(RecyclingByteBlockAllocator(((t_RecyclingByteBlockAllocator *) arg)->object.this$));
        }
        static PyObject *t_RecyclingByteBlockAllocator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RecyclingByteBlockAllocator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RecyclingByteBlockAllocator_init_(t_RecyclingByteBlockAllocator *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              RecyclingByteBlockAllocator object((jobject) NULL);

              INT_CALL(object = RecyclingByteBlockAllocator());
              self->object = object;
              break;
            }
            goto err;
           case 2:
            {
              jint a0;
              jint a1;
              RecyclingByteBlockAllocator object((jobject) NULL);

              if (!parseArgs(args, "II", &a0, &a1))
              {
                INT_CALL(object = RecyclingByteBlockAllocator(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              jint a0;
              jint a1;
              ::org::apache::lucene::util::Counter a2((jobject) NULL);
              RecyclingByteBlockAllocator object((jobject) NULL);

              if (!parseArgs(args, "IIk", ::org::apache::lucene::util::Counter::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = RecyclingByteBlockAllocator(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_RecyclingByteBlockAllocator_bytesUsed(t_RecyclingByteBlockAllocator *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.bytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_RecyclingByteBlockAllocator_freeBlocks(t_RecyclingByteBlockAllocator *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.freeBlocks(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "freeBlocks", arg);
          return NULL;
        }

        static PyObject *t_RecyclingByteBlockAllocator_getByteBlock(t_RecyclingByteBlockAllocator *self, PyObject *args)
        {
          JArray< jbyte > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getByteBlock());
            return result.wrap();
          }

          return callSuper(&PY_TYPE(RecyclingByteBlockAllocator), (PyObject *) self, "getByteBlock", args, 2);
        }

        static PyObject *t_RecyclingByteBlockAllocator_maxBufferedBlocks(t_RecyclingByteBlockAllocator *self)
        {
          jint result;
          OBJ_CALL(result = self->object.maxBufferedBlocks());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_RecyclingByteBlockAllocator_numBufferedBlocks(t_RecyclingByteBlockAllocator *self)
        {
          jint result;
          OBJ_CALL(result = self->object.numBufferedBlocks());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_RecyclingByteBlockAllocator_recycleByteBlocks(t_RecyclingByteBlockAllocator *self, PyObject *args)
        {
          JArray< JArray< jbyte > > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.recycleByteBlocks(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(RecyclingByteBlockAllocator), (PyObject *) self, "recycleByteBlocks", args, 2);
        }

        static PyObject *t_RecyclingByteBlockAllocator_get__byteBlock(t_RecyclingByteBlockAllocator *self, void *data)
        {
          JArray< jbyte > value((jobject) NULL);
          OBJ_CALL(value = self->object.getByteBlock());
          return value.wrap();
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$Parser.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$Parser::class$ = NULL;
        jmethodID *FieldCache$Parser::mids$ = NULL;
        bool FieldCache$Parser::live$ = false;

        jclass FieldCache$Parser::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$Parser");

            mids$ = new jmethodID[max_mid];
            mids$[mid_termsEnum_fb3ac14e] = env->getMethodID(cls, "termsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::TermsEnum FieldCache$Parser::termsEnum(const ::org::apache::lucene::index::Terms & a0) const
        {
          return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_termsEnum_fb3ac14e], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$Parser_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$Parser_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$Parser_termsEnum(t_FieldCache$Parser *self, PyObject *arg);

        static PyMethodDef t_FieldCache$Parser__methods_[] = {
          DECLARE_METHOD(t_FieldCache$Parser, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$Parser, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$Parser, termsEnum, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$Parser, t_FieldCache$Parser, ::java::lang::Object, FieldCache$Parser, abstract_init, 0, 0, 0, 0, 0);

        void t_FieldCache$Parser::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$Parser), module, "FieldCache$Parser", 0);
        }

        void t_FieldCache$Parser::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$Parser).tp_dict, "class_", make_descriptor(FieldCache$Parser::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$Parser).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$Parser::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$Parser).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCache$Parser_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$Parser::initializeClass, 1)))
            return NULL;
          return t_FieldCache$Parser::wrap_Object(FieldCache$Parser(((t_FieldCache$Parser *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$Parser_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$Parser::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldCache$Parser_termsEnum(t_FieldCache$Parser *self, PyObject *arg)
        {
          ::org::apache::lucene::index::Terms a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::Terms::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.termsEnum(a0));
            return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "termsEnum", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiDocValues$MultiSortedSetDocValues.h"
#include "org/apache/lucene/index/MultiDocValues$OrdinalMap.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiDocValues$MultiSortedSetDocValues::class$ = NULL;
        jmethodID *MultiDocValues$MultiSortedSetDocValues::mids$ = NULL;
        jfieldID *MultiDocValues$MultiSortedSetDocValues::fids$ = NULL;
        bool MultiDocValues$MultiSortedSetDocValues::live$ = false;

        jclass MultiDocValues$MultiSortedSetDocValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiDocValues$MultiSortedSetDocValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getValueCount_54c6a17a] = env->getMethodID(cls, "getValueCount", "()J");
            mids$[mid_lookupOrd_9c59b7f4] = env->getMethodID(cls, "lookupOrd", "(J)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_nextOrd_54c6a17a] = env->getMethodID(cls, "nextOrd", "()J");
            mids$[mid_setDocument_39c7bd3c] = env->getMethodID(cls, "setDocument", "(I)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_docStarts] = env->getFieldID(cls, "docStarts", "[I");
            fids$[fid_mapping] = env->getFieldID(cls, "mapping", "Lorg/apache/lucene/index/MultiDocValues$OrdinalMap;");
            fids$[fid_values] = env->getFieldID(cls, "values", "[Lorg/apache/lucene/index/SortedSetDocValues;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong MultiDocValues$MultiSortedSetDocValues::getValueCount() const
        {
          return env->callLongMethod(this$, mids$[mid_getValueCount_54c6a17a]);
        }

        ::org::apache::lucene::util::BytesRef MultiDocValues$MultiSortedSetDocValues::lookupOrd(jlong a0) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_lookupOrd_9c59b7f4], a0));
        }

        jlong MultiDocValues$MultiSortedSetDocValues::nextOrd() const
        {
          return env->callLongMethod(this$, mids$[mid_nextOrd_54c6a17a]);
        }

        void MultiDocValues$MultiSortedSetDocValues::setDocument(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setDocument_39c7bd3c], a0);
        }

        JArray< jint > MultiDocValues$MultiSortedSetDocValues::_get_docStarts() const
        {
          return JArray< jint >(env->getObjectField(this$, fids$[fid_docStarts]));
        }

        ::org::apache::lucene::index::MultiDocValues$OrdinalMap MultiDocValues$MultiSortedSetDocValues::_get_mapping() const
        {
          return ::org::apache::lucene::index::MultiDocValues$OrdinalMap(env->getObjectField(this$, fids$[fid_mapping]));
        }

        JArray< ::org::apache::lucene::index::SortedSetDocValues > MultiDocValues$MultiSortedSetDocValues::_get_values() const
        {
          return JArray< ::org::apache::lucene::index::SortedSetDocValues >(env->getObjectField(this$, fids$[fid_values]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_getValueCount(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *args);
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_lookupOrd(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *args);
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_nextOrd(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *args);
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_setDocument(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *args);
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_get__docStarts(t_MultiDocValues$MultiSortedSetDocValues *self, void *data);
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_get__mapping(t_MultiDocValues$MultiSortedSetDocValues *self, void *data);
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_get__values(t_MultiDocValues$MultiSortedSetDocValues *self, void *data);

        static int t_MultiDocValues$MultiSortedSetDocValues_set__document(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *arg, void *data);
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_get__valueCount(t_MultiDocValues$MultiSortedSetDocValues *self, void *data);
        static PyGetSetDef t_MultiDocValues$MultiSortedSetDocValues__fields_[] = {
          DECLARE_GET_FIELD(t_MultiDocValues$MultiSortedSetDocValues, docStarts),
          DECLARE_GET_FIELD(t_MultiDocValues$MultiSortedSetDocValues, mapping),
          DECLARE_GET_FIELD(t_MultiDocValues$MultiSortedSetDocValues, values),
          DECLARE_SET_FIELD(t_MultiDocValues$MultiSortedSetDocValues, document),
          DECLARE_GET_FIELD(t_MultiDocValues$MultiSortedSetDocValues, valueCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiDocValues$MultiSortedSetDocValues__methods_[] = {
          DECLARE_METHOD(t_MultiDocValues$MultiSortedSetDocValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues$MultiSortedSetDocValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues$MultiSortedSetDocValues, getValueCount, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocValues$MultiSortedSetDocValues, lookupOrd, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocValues$MultiSortedSetDocValues, nextOrd, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocValues$MultiSortedSetDocValues, setDocument, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiDocValues$MultiSortedSetDocValues, t_MultiDocValues$MultiSortedSetDocValues, ::org::apache::lucene::index::SortedSetDocValues, MultiDocValues$MultiSortedSetDocValues, abstract_init, 0, 0, t_MultiDocValues$MultiSortedSetDocValues__fields_, 0, 0);

        void t_MultiDocValues$MultiSortedSetDocValues::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiDocValues$MultiSortedSetDocValues), module, "MultiDocValues$MultiSortedSetDocValues", 0);
        }

        void t_MultiDocValues$MultiSortedSetDocValues::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiDocValues$MultiSortedSetDocValues).tp_dict, "class_", make_descriptor(MultiDocValues$MultiSortedSetDocValues::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiDocValues$MultiSortedSetDocValues).tp_dict, "wrapfn_", make_descriptor(t_MultiDocValues$MultiSortedSetDocValues::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiDocValues$MultiSortedSetDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiDocValues$MultiSortedSetDocValues::initializeClass, 1)))
            return NULL;
          return t_MultiDocValues$MultiSortedSetDocValues::wrap_Object(MultiDocValues$MultiSortedSetDocValues(((t_MultiDocValues$MultiSortedSetDocValues *) arg)->object.this$));
        }
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiDocValues$MultiSortedSetDocValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_getValueCount(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getValueCount());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(MultiDocValues$MultiSortedSetDocValues), (PyObject *) self, "getValueCount", args, 2);
        }

        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_lookupOrd(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *args)
        {
          jlong a0;
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(result = self->object.lookupOrd(a0));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiDocValues$MultiSortedSetDocValues), (PyObject *) self, "lookupOrd", args, 2);
        }

        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_nextOrd(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextOrd());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(MultiDocValues$MultiSortedSetDocValues), (PyObject *) self, "nextOrd", args, 2);
        }

        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_setDocument(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.setDocument(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(MultiDocValues$MultiSortedSetDocValues), (PyObject *) self, "setDocument", args, 2);
        }

        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_get__docStarts(t_MultiDocValues$MultiSortedSetDocValues *self, void *data)
        {
          JArray< jint > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_docStarts());
          return value.wrap();
        }

        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_get__mapping(t_MultiDocValues$MultiSortedSetDocValues *self, void *data)
        {
          ::org::apache::lucene::index::MultiDocValues$OrdinalMap value((jobject) NULL);
          OBJ_CALL(value = self->object._get_mapping());
          return ::org::apache::lucene::index::t_MultiDocValues$OrdinalMap::wrap_Object(value);
        }

        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_get__values(t_MultiDocValues$MultiSortedSetDocValues *self, void *data)
        {
          JArray< ::org::apache::lucene::index::SortedSetDocValues > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_values());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_SortedSetDocValues::wrap_jobject);
        }

        static int t_MultiDocValues$MultiSortedSetDocValues_set__document(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setDocument(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "document", arg);
          return -1;
        }

        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_get__valueCount(t_MultiDocValues$MultiSortedSetDocValues *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getValueCount());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/en/PorterStemFilterFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/en/PorterStemFilter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {

          ::java::lang::Class *PorterStemFilterFactory::class$ = NULL;
          jmethodID *PorterStemFilterFactory::mids$ = NULL;
          bool PorterStemFilterFactory::live$ = false;

          jclass PorterStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/en/PorterStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_520ef479] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/en/PorterStemFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PorterStemFilterFactory::PorterStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::en::PorterStemFilter PorterStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::en::PorterStemFilter(env->callObjectMethod(this$, mids$[mid_create_520ef479], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {
          static PyObject *t_PorterStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PorterStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PorterStemFilterFactory_init_(t_PorterStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PorterStemFilterFactory_create(t_PorterStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_PorterStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_PorterStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PorterStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PorterStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PorterStemFilterFactory, t_PorterStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, PorterStemFilterFactory, t_PorterStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_PorterStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PorterStemFilterFactory), module, "PorterStemFilterFactory", 0);
          }

          void t_PorterStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PorterStemFilterFactory).tp_dict, "class_", make_descriptor(PorterStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PorterStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_PorterStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PorterStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PorterStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PorterStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_PorterStemFilterFactory::wrap_Object(PorterStemFilterFactory(((t_PorterStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_PorterStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PorterStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PorterStemFilterFactory_init_(t_PorterStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PorterStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PorterStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PorterStemFilterFactory_create(t_PorterStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::en::PorterStemFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::en::t_PorterStemFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PorterStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/mutable/MutableValueInt.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {

          ::java::lang::Class *MutableValueInt::class$ = NULL;
          jmethodID *MutableValueInt::mids$ = NULL;
          jfieldID *MutableValueInt::fids$ = NULL;
          bool MutableValueInt::live$ = false;

          jclass MutableValueInt::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/mutable/MutableValueInt");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_compareSameType_290588f1] = env->getMethodID(cls, "compareSameType", "(Ljava/lang/Object;)I");
              mids$[mid_copy_d590ce7c] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/util/mutable/MutableValue;)V");
              mids$[mid_duplicate_15ab3811] = env->getMethodID(cls, "duplicate", "()Lorg/apache/lucene/util/mutable/MutableValue;");
              mids$[mid_equalsSameType_290588e2] = env->getMethodID(cls, "equalsSameType", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toObject_846352c3] = env->getMethodID(cls, "toObject", "()Ljava/lang/Object;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_value] = env->getFieldID(cls, "value", "I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MutableValueInt::MutableValueInt() : ::org::apache::lucene::util::mutable$::MutableValue(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint MutableValueInt::compareSameType(const ::java::lang::Object & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareSameType_290588f1], a0.this$);
          }

          void MutableValueInt::copy(const ::org::apache::lucene::util::mutable$::MutableValue & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copy_d590ce7c], a0.this$);
          }

          ::org::apache::lucene::util::mutable$::MutableValue MutableValueInt::duplicate() const
          {
            return ::org::apache::lucene::util::mutable$::MutableValue(env->callObjectMethod(this$, mids$[mid_duplicate_15ab3811]));
          }

          jboolean MutableValueInt::equalsSameType(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equalsSameType_290588e2], a0.this$);
          }

          jint MutableValueInt::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::Object MutableValueInt::toObject() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_toObject_846352c3]));
          }

          jint MutableValueInt::_get_value() const
          {
            return env->getIntField(this$, fids$[fid_value]);
          }

          void MutableValueInt::_set_value(jint a0) const
          {
            env->setIntField(this$, fids$[fid_value], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {
          static PyObject *t_MutableValueInt_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MutableValueInt_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MutableValueInt_init_(t_MutableValueInt *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MutableValueInt_compareSameType(t_MutableValueInt *self, PyObject *args);
          static PyObject *t_MutableValueInt_copy(t_MutableValueInt *self, PyObject *args);
          static PyObject *t_MutableValueInt_duplicate(t_MutableValueInt *self, PyObject *args);
          static PyObject *t_MutableValueInt_equalsSameType(t_MutableValueInt *self, PyObject *args);
          static PyObject *t_MutableValueInt_hashCode(t_MutableValueInt *self, PyObject *args);
          static PyObject *t_MutableValueInt_toObject(t_MutableValueInt *self, PyObject *args);
          static PyObject *t_MutableValueInt_get__value(t_MutableValueInt *self, void *data);
          static int t_MutableValueInt_set__value(t_MutableValueInt *self, PyObject *arg, void *data);

          static PyGetSetDef t_MutableValueInt__fields_[] = {
            DECLARE_GETSET_FIELD(t_MutableValueInt, value),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_MutableValueInt__methods_[] = {
            DECLARE_METHOD(t_MutableValueInt, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueInt, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueInt, compareSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueInt, copy, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueInt, duplicate, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueInt, equalsSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueInt, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueInt, toObject, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MutableValueInt, t_MutableValueInt, ::org::apache::lucene::util::mutable$::MutableValue, MutableValueInt, t_MutableValueInt_init_, 0, 0, t_MutableValueInt__fields_, 0, 0);

          void t_MutableValueInt::install(PyObject *module)
          {
            installType(&PY_TYPE(MutableValueInt), module, "MutableValueInt", 0);
          }

          void t_MutableValueInt::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MutableValueInt).tp_dict, "class_", make_descriptor(MutableValueInt::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MutableValueInt).tp_dict, "wrapfn_", make_descriptor(t_MutableValueInt::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MutableValueInt).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MutableValueInt_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MutableValueInt::initializeClass, 1)))
              return NULL;
            return t_MutableValueInt::wrap_Object(MutableValueInt(((t_MutableValueInt *) arg)->object.this$));
          }
          static PyObject *t_MutableValueInt_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MutableValueInt::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MutableValueInt_init_(t_MutableValueInt *self, PyObject *args, PyObject *kwds)
          {
            MutableValueInt object((jobject) NULL);

            INT_CALL(object = MutableValueInt());
            self->object = object;

            return 0;
          }

          static PyObject *t_MutableValueInt_compareSameType(t_MutableValueInt *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.compareSameType(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MutableValueInt), (PyObject *) self, "compareSameType", args, 2);
          }

          static PyObject *t_MutableValueInt_copy(t_MutableValueInt *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::mutable$::MutableValue::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copy(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(MutableValueInt), (PyObject *) self, "copy", args, 2);
          }

          static PyObject *t_MutableValueInt_duplicate(t_MutableValueInt *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.duplicate());
              return ::org::apache::lucene::util::mutable$::t_MutableValue::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MutableValueInt), (PyObject *) self, "duplicate", args, 2);
          }

          static PyObject *t_MutableValueInt_equalsSameType(t_MutableValueInt *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equalsSameType(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(MutableValueInt), (PyObject *) self, "equalsSameType", args, 2);
          }

          static PyObject *t_MutableValueInt_hashCode(t_MutableValueInt *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MutableValueInt), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_MutableValueInt_toObject(t_MutableValueInt *self, PyObject *args)
          {
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toObject());
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MutableValueInt), (PyObject *) self, "toObject", args, 2);
          }

          static PyObject *t_MutableValueInt_get__value(t_MutableValueInt *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_value());
            return PyInt_FromLong((long) value);
          }
          static int t_MutableValueInt_set__value(t_MutableValueInt *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_value(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "value", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiDocsEnum.h"
#include "org/apache/lucene/index/MultiTermsEnum.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/MultiDocsEnum$EnumWithSlice.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiDocsEnum::class$ = NULL;
        jmethodID *MultiDocsEnum::mids$ = NULL;
        bool MultiDocsEnum::live$ = false;

        jclass MultiDocsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiDocsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7d44bb06] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/MultiTermsEnum;I)V");
            mids$[mid_advance_39c7bd23] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_canReuse_4fe73d2c] = env->getMethodID(cls, "canReuse", "(Lorg/apache/lucene/index/MultiTermsEnum;)Z");
            mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_54c6a179] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_freq_54c6a179] = env->getMethodID(cls, "freq", "()I");
            mids$[mid_getNumSubs_54c6a179] = env->getMethodID(cls, "getNumSubs", "()I");
            mids$[mid_getSubs_1bdfab69] = env->getMethodID(cls, "getSubs", "()[Lorg/apache/lucene/index/MultiDocsEnum$EnumWithSlice;");
            mids$[mid_nextDoc_54c6a179] = env->getMethodID(cls, "nextDoc", "()I");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiDocsEnum::MultiDocsEnum(const ::org::apache::lucene::index::MultiTermsEnum & a0, jint a1) : ::org::apache::lucene::index::DocsEnum(env->newObject(initializeClass, &mids$, mid_init$_7d44bb06, a0.this$, a1)) {}

        jint MultiDocsEnum::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_39c7bd23], a0);
        }

        jboolean MultiDocsEnum::canReuse(const ::org::apache::lucene::index::MultiTermsEnum & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_canReuse_4fe73d2c], a0.this$);
        }

        jlong MultiDocsEnum::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
        }

        jint MultiDocsEnum::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_54c6a179]);
        }

        jint MultiDocsEnum::freq() const
        {
          return env->callIntMethod(this$, mids$[mid_freq_54c6a179]);
        }

        jint MultiDocsEnum::getNumSubs() const
        {
          return env->callIntMethod(this$, mids$[mid_getNumSubs_54c6a179]);
        }

        JArray< ::org::apache::lucene::index::MultiDocsEnum$EnumWithSlice > MultiDocsEnum::getSubs() const
        {
          return JArray< ::org::apache::lucene::index::MultiDocsEnum$EnumWithSlice >(env->callObjectMethod(this$, mids$[mid_getSubs_1bdfab69]));
        }

        jint MultiDocsEnum::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_54c6a179]);
        }

        ::java::lang::String MultiDocsEnum::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiDocsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiDocsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiDocsEnum_init_(t_MultiDocsEnum *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiDocsEnum_advance(t_MultiDocsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsEnum_canReuse(t_MultiDocsEnum *self, PyObject *arg);
        static PyObject *t_MultiDocsEnum_cost(t_MultiDocsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsEnum_docID(t_MultiDocsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsEnum_freq(t_MultiDocsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsEnum_getNumSubs(t_MultiDocsEnum *self);
        static PyObject *t_MultiDocsEnum_getSubs(t_MultiDocsEnum *self);
        static PyObject *t_MultiDocsEnum_nextDoc(t_MultiDocsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsEnum_toString(t_MultiDocsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsEnum_get__numSubs(t_MultiDocsEnum *self, void *data);
        static PyObject *t_MultiDocsEnum_get__subs(t_MultiDocsEnum *self, void *data);
        static PyGetSetDef t_MultiDocsEnum__fields_[] = {
          DECLARE_GET_FIELD(t_MultiDocsEnum, numSubs),
          DECLARE_GET_FIELD(t_MultiDocsEnum, subs),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiDocsEnum__methods_[] = {
          DECLARE_METHOD(t_MultiDocsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocsEnum, advance, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsEnum, canReuse, METH_O),
          DECLARE_METHOD(t_MultiDocsEnum, cost, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsEnum, docID, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsEnum, freq, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsEnum, getNumSubs, METH_NOARGS),
          DECLARE_METHOD(t_MultiDocsEnum, getSubs, METH_NOARGS),
          DECLARE_METHOD(t_MultiDocsEnum, nextDoc, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsEnum, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiDocsEnum, t_MultiDocsEnum, ::org::apache::lucene::index::DocsEnum, MultiDocsEnum, t_MultiDocsEnum_init_, 0, 0, t_MultiDocsEnum__fields_, 0, 0);

        void t_MultiDocsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiDocsEnum), module, "MultiDocsEnum", 0);
          PyDict_SetItemString(PY_TYPE(MultiDocsEnum).tp_dict, "EnumWithSlice", make_descriptor(&PY_TYPE(MultiDocsEnum$EnumWithSlice)));
        }

        void t_MultiDocsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiDocsEnum).tp_dict, "class_", make_descriptor(MultiDocsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiDocsEnum).tp_dict, "wrapfn_", make_descriptor(t_MultiDocsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiDocsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiDocsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiDocsEnum::initializeClass, 1)))
            return NULL;
          return t_MultiDocsEnum::wrap_Object(MultiDocsEnum(((t_MultiDocsEnum *) arg)->object.this$));
        }
        static PyObject *t_MultiDocsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiDocsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiDocsEnum_init_(t_MultiDocsEnum *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::MultiTermsEnum a0((jobject) NULL);
          jint a1;
          MultiDocsEnum object((jobject) NULL);

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::MultiTermsEnum::initializeClass, &a0, &a1))
          {
            INT_CALL(object = MultiDocsEnum(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MultiDocsEnum_advance(t_MultiDocsEnum *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiDocsEnum), (PyObject *) self, "advance", args, 2);
        }

        static PyObject *t_MultiDocsEnum_canReuse(t_MultiDocsEnum *self, PyObject *arg)
        {
          ::org::apache::lucene::index::MultiTermsEnum a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::MultiTermsEnum::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.canReuse(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "canReuse", arg);
          return NULL;
        }

        static PyObject *t_MultiDocsEnum_cost(t_MultiDocsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(MultiDocsEnum), (PyObject *) self, "cost", args, 2);
        }

        static PyObject *t_MultiDocsEnum_docID(t_MultiDocsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiDocsEnum), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_MultiDocsEnum_freq(t_MultiDocsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.freq());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiDocsEnum), (PyObject *) self, "freq", args, 2);
        }

        static PyObject *t_MultiDocsEnum_getNumSubs(t_MultiDocsEnum *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getNumSubs());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_MultiDocsEnum_getSubs(t_MultiDocsEnum *self)
        {
          JArray< ::org::apache::lucene::index::MultiDocsEnum$EnumWithSlice > result((jobject) NULL);
          OBJ_CALL(result = self->object.getSubs());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::index::t_MultiDocsEnum$EnumWithSlice::wrap_jobject);
        }

        static PyObject *t_MultiDocsEnum_nextDoc(t_MultiDocsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiDocsEnum), (PyObject *) self, "nextDoc", args, 2);
        }

        static PyObject *t_MultiDocsEnum_toString(t_MultiDocsEnum *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(MultiDocsEnum), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_MultiDocsEnum_get__numSubs(t_MultiDocsEnum *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getNumSubs());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_MultiDocsEnum_get__subs(t_MultiDocsEnum *self, void *data)
        {
          JArray< ::org::apache::lucene::index::MultiDocsEnum$EnumWithSlice > value((jobject) NULL);
          OBJ_CALL(value = self->object.getSubs());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_MultiDocsEnum$EnumWithSlice::wrap_jobject);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/CharacterUtils$CharacterBuffer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *CharacterUtils$CharacterBuffer::class$ = NULL;
          jmethodID *CharacterUtils$CharacterBuffer::mids$ = NULL;
          bool CharacterUtils$CharacterBuffer::live$ = false;

          jclass CharacterUtils$CharacterBuffer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/CharacterUtils$CharacterBuffer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getBuffer_dab10e7f] = env->getMethodID(cls, "getBuffer", "()[C");
              mids$[mid_getLength_54c6a179] = env->getMethodID(cls, "getLength", "()I");
              mids$[mid_getOffset_54c6a179] = env->getMethodID(cls, "getOffset", "()I");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JArray< jchar > CharacterUtils$CharacterBuffer::getBuffer() const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_getBuffer_dab10e7f]));
          }

          jint CharacterUtils$CharacterBuffer::getLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getLength_54c6a179]);
          }

          jint CharacterUtils$CharacterBuffer::getOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getOffset_54c6a179]);
          }

          void CharacterUtils$CharacterBuffer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_CharacterUtils$CharacterBuffer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharacterUtils$CharacterBuffer_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharacterUtils$CharacterBuffer_getBuffer(t_CharacterUtils$CharacterBuffer *self);
          static PyObject *t_CharacterUtils$CharacterBuffer_getLength(t_CharacterUtils$CharacterBuffer *self);
          static PyObject *t_CharacterUtils$CharacterBuffer_getOffset(t_CharacterUtils$CharacterBuffer *self);
          static PyObject *t_CharacterUtils$CharacterBuffer_reset(t_CharacterUtils$CharacterBuffer *self);
          static PyObject *t_CharacterUtils$CharacterBuffer_get__buffer(t_CharacterUtils$CharacterBuffer *self, void *data);
          static PyObject *t_CharacterUtils$CharacterBuffer_get__length(t_CharacterUtils$CharacterBuffer *self, void *data);
          static PyObject *t_CharacterUtils$CharacterBuffer_get__offset(t_CharacterUtils$CharacterBuffer *self, void *data);
          static PyGetSetDef t_CharacterUtils$CharacterBuffer__fields_[] = {
            DECLARE_GET_FIELD(t_CharacterUtils$CharacterBuffer, buffer),
            DECLARE_GET_FIELD(t_CharacterUtils$CharacterBuffer, length),
            DECLARE_GET_FIELD(t_CharacterUtils$CharacterBuffer, offset),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CharacterUtils$CharacterBuffer__methods_[] = {
            DECLARE_METHOD(t_CharacterUtils$CharacterBuffer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharacterUtils$CharacterBuffer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharacterUtils$CharacterBuffer, getBuffer, METH_NOARGS),
            DECLARE_METHOD(t_CharacterUtils$CharacterBuffer, getLength, METH_NOARGS),
            DECLARE_METHOD(t_CharacterUtils$CharacterBuffer, getOffset, METH_NOARGS),
            DECLARE_METHOD(t_CharacterUtils$CharacterBuffer, reset, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CharacterUtils$CharacterBuffer, t_CharacterUtils$CharacterBuffer, ::java::lang::Object, CharacterUtils$CharacterBuffer, abstract_init, 0, 0, t_CharacterUtils$CharacterBuffer__fields_, 0, 0);

          void t_CharacterUtils$CharacterBuffer::install(PyObject *module)
          {
            installType(&PY_TYPE(CharacterUtils$CharacterBuffer), module, "CharacterUtils$CharacterBuffer", 0);
          }

          void t_CharacterUtils$CharacterBuffer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CharacterUtils$CharacterBuffer).tp_dict, "class_", make_descriptor(CharacterUtils$CharacterBuffer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CharacterUtils$CharacterBuffer).tp_dict, "wrapfn_", make_descriptor(t_CharacterUtils$CharacterBuffer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CharacterUtils$CharacterBuffer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CharacterUtils$CharacterBuffer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharacterUtils$CharacterBuffer::initializeClass, 1)))
              return NULL;
            return t_CharacterUtils$CharacterBuffer::wrap_Object(CharacterUtils$CharacterBuffer(((t_CharacterUtils$CharacterBuffer *) arg)->object.this$));
          }
          static PyObject *t_CharacterUtils$CharacterBuffer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharacterUtils$CharacterBuffer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CharacterUtils$CharacterBuffer_getBuffer(t_CharacterUtils$CharacterBuffer *self)
          {
            JArray< jchar > result((jobject) NULL);
            OBJ_CALL(result = self->object.getBuffer());
            return result.wrap();
          }

          static PyObject *t_CharacterUtils$CharacterBuffer_getLength(t_CharacterUtils$CharacterBuffer *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CharacterUtils$CharacterBuffer_getOffset(t_CharacterUtils$CharacterBuffer *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CharacterUtils$CharacterBuffer_reset(t_CharacterUtils$CharacterBuffer *self)
          {
            OBJ_CALL(self->object.reset());
            Py_RETURN_NONE;
          }

          static PyObject *t_CharacterUtils$CharacterBuffer_get__buffer(t_CharacterUtils$CharacterBuffer *self, void *data)
          {
            JArray< jchar > value((jobject) NULL);
            OBJ_CALL(value = self->object.getBuffer());
            return value.wrap();
          }

          static PyObject *t_CharacterUtils$CharacterBuffer_get__length(t_CharacterUtils$CharacterBuffer *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getLength());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_CharacterUtils$CharacterBuffer_get__offset(t_CharacterUtils$CharacterBuffer *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getOffset());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergePolicy$DocMap.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergePolicy$DocMap::class$ = NULL;
        jmethodID *MergePolicy$DocMap::mids$ = NULL;
        bool MergePolicy$DocMap::live$ = false;

        jclass MergePolicy$DocMap::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergePolicy$DocMap");

            mids$ = new jmethodID[max_mid];
            mids$[mid_map_39c7bd23] = env->getMethodID(cls, "map", "(I)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint MergePolicy$DocMap::map(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_map_39c7bd23], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergePolicy$DocMap_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergePolicy$DocMap_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergePolicy$DocMap_map(t_MergePolicy$DocMap *self, PyObject *arg);

        static PyMethodDef t_MergePolicy$DocMap__methods_[] = {
          DECLARE_METHOD(t_MergePolicy$DocMap, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy$DocMap, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy$DocMap, map, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MergePolicy$DocMap, t_MergePolicy$DocMap, ::java::lang::Object, MergePolicy$DocMap, abstract_init, 0, 0, 0, 0, 0);

        void t_MergePolicy$DocMap::install(PyObject *module)
        {
          installType(&PY_TYPE(MergePolicy$DocMap), module, "MergePolicy$DocMap", 0);
        }

        void t_MergePolicy$DocMap::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MergePolicy$DocMap).tp_dict, "class_", make_descriptor(MergePolicy$DocMap::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MergePolicy$DocMap).tp_dict, "wrapfn_", make_descriptor(t_MergePolicy$DocMap::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MergePolicy$DocMap).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergePolicy$DocMap_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergePolicy$DocMap::initializeClass, 1)))
            return NULL;
          return t_MergePolicy$DocMap::wrap_Object(MergePolicy$DocMap(((t_MergePolicy$DocMap *) arg)->object.this$));
        }
        static PyObject *t_MergePolicy$DocMap_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergePolicy$DocMap::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MergePolicy$DocMap_map(t_MergePolicy$DocMap *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.map(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "map", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanNearPayloadCheckQuery.h"
#include "org/apache/lucene/search/spans/SpanNearQuery.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "java/util/Collection.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanNearPayloadCheckQuery::class$ = NULL;
          jmethodID *SpanNearPayloadCheckQuery::mids$ = NULL;
          bool SpanNearPayloadCheckQuery::live$ = false;

          jclass SpanNearPayloadCheckQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanNearPayloadCheckQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cc218b3a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanNearQuery;Ljava/util/Collection;)V");
              mids$[mid_clone_efae1086] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/search/spans/SpanNearPayloadCheckQuery;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_acceptPosition_5342f73f] = env->getMethodID(cls, "acceptPosition", "(Lorg/apache/lucene/search/spans/Spans;)Lorg/apache/lucene/search/spans/SpanPositionCheckQuery$AcceptStatus;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanNearPayloadCheckQuery::SpanNearPayloadCheckQuery(const ::org::apache::lucene::search::spans::SpanNearQuery & a0, const ::java::util::Collection & a1) : ::org::apache::lucene::search::spans::SpanPositionCheckQuery(env->newObject(initializeClass, &mids$, mid_init$_cc218b3a, a0.this$, a1.this$)) {}

          SpanNearPayloadCheckQuery SpanNearPayloadCheckQuery::clone() const
          {
            return SpanNearPayloadCheckQuery(env->callObjectMethod(this$, mids$[mid_clone_efae1086]));
          }

          jboolean SpanNearPayloadCheckQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint SpanNearPayloadCheckQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String SpanNearPayloadCheckQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanNearPayloadCheckQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanNearPayloadCheckQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanNearPayloadCheckQuery_init_(t_SpanNearPayloadCheckQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanNearPayloadCheckQuery_clone(t_SpanNearPayloadCheckQuery *self, PyObject *args);
          static PyObject *t_SpanNearPayloadCheckQuery_equals(t_SpanNearPayloadCheckQuery *self, PyObject *args);
          static PyObject *t_SpanNearPayloadCheckQuery_hashCode(t_SpanNearPayloadCheckQuery *self, PyObject *args);
          static PyObject *t_SpanNearPayloadCheckQuery_toString(t_SpanNearPayloadCheckQuery *self, PyObject *args);

          static PyMethodDef t_SpanNearPayloadCheckQuery__methods_[] = {
            DECLARE_METHOD(t_SpanNearPayloadCheckQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanNearPayloadCheckQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanNearPayloadCheckQuery, clone, METH_VARARGS),
            DECLARE_METHOD(t_SpanNearPayloadCheckQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_SpanNearPayloadCheckQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SpanNearPayloadCheckQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanNearPayloadCheckQuery, t_SpanNearPayloadCheckQuery, ::org::apache::lucene::search::spans::SpanPositionCheckQuery, SpanNearPayloadCheckQuery, t_SpanNearPayloadCheckQuery_init_, 0, 0, 0, 0, 0);

          void t_SpanNearPayloadCheckQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanNearPayloadCheckQuery), module, "SpanNearPayloadCheckQuery", 0);
          }

          void t_SpanNearPayloadCheckQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanNearPayloadCheckQuery).tp_dict, "class_", make_descriptor(SpanNearPayloadCheckQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanNearPayloadCheckQuery).tp_dict, "wrapfn_", make_descriptor(t_SpanNearPayloadCheckQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanNearPayloadCheckQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanNearPayloadCheckQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanNearPayloadCheckQuery::initializeClass, 1)))
              return NULL;
            return t_SpanNearPayloadCheckQuery::wrap_Object(SpanNearPayloadCheckQuery(((t_SpanNearPayloadCheckQuery *) arg)->object.this$));
          }
          static PyObject *t_SpanNearPayloadCheckQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanNearPayloadCheckQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanNearPayloadCheckQuery_init_(t_SpanNearPayloadCheckQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spans::SpanNearQuery a0((jobject) NULL);
            ::java::util::Collection a1((jobject) NULL);
            PyTypeObject **p1;
            SpanNearPayloadCheckQuery object((jobject) NULL);

            if (!parseArgs(args, "kK", ::org::apache::lucene::search::spans::SpanNearQuery::initializeClass, ::java::util::Collection::initializeClass, &a0, &a1, &p1, ::java::util::t_Collection::parameters_))
            {
              INT_CALL(object = SpanNearPayloadCheckQuery(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanNearPayloadCheckQuery_clone(t_SpanNearPayloadCheckQuery *self, PyObject *args)
          {
            SpanNearPayloadCheckQuery result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_SpanNearPayloadCheckQuery::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanNearPayloadCheckQuery), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_SpanNearPayloadCheckQuery_equals(t_SpanNearPayloadCheckQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SpanNearPayloadCheckQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SpanNearPayloadCheckQuery_hashCode(t_SpanNearPayloadCheckQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SpanNearPayloadCheckQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SpanNearPayloadCheckQuery_toString(t_SpanNearPayloadCheckQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanNearPayloadCheckQuery), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/SnowballProgram.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {

      ::java::lang::Class *SnowballProgram::class$ = NULL;
      jmethodID *SnowballProgram::mids$ = NULL;
      bool SnowballProgram::live$ = false;

      jclass SnowballProgram::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/tartarus/snowball/SnowballProgram");

          mids$ = new jmethodID[max_mid];
          mids$[mid_getCurrent_14c7b5c5] = env->getMethodID(cls, "getCurrent", "()Ljava/lang/String;");
          mids$[mid_getCurrentBuffer_dab10e7f] = env->getMethodID(cls, "getCurrentBuffer", "()[C");
          mids$[mid_getCurrentBufferLength_54c6a179] = env->getMethodID(cls, "getCurrentBufferLength", "()I");
          mids$[mid_setCurrent_5fdc3f48] = env->getMethodID(cls, "setCurrent", "(Ljava/lang/String;)V");
          mids$[mid_setCurrent_ec6430f4] = env->getMethodID(cls, "setCurrent", "([CI)V");
          mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");
          mids$[mid_insert_cb918b82] = env->getMethodID(cls, "insert", "(IILjava/lang/CharSequence;)V");
          mids$[mid_in_range_d8d154aa] = env->getMethodID(cls, "in_range", "(II)Z");
          mids$[mid_copy_from_cbe15af1] = env->getMethodID(cls, "copy_from", "(Lorg/tartarus/snowball/SnowballProgram;)V");
          mids$[mid_in_grouping_6f0bb35a] = env->getMethodID(cls, "in_grouping", "([CII)Z");
          mids$[mid_out_grouping_6f0bb35a] = env->getMethodID(cls, "out_grouping", "([CII)Z");
          mids$[mid_find_among_b_0795632a] = env->getMethodID(cls, "find_among_b", "([Lorg/tartarus/snowball/Among;I)I");
          mids$[mid_slice_del_54c6a166] = env->getMethodID(cls, "slice_del", "()V");
          mids$[mid_in_grouping_b_6f0bb35a] = env->getMethodID(cls, "in_grouping_b", "([CII)Z");
          mids$[mid_slice_from_a8afc64a] = env->getMethodID(cls, "slice_from", "(Ljava/lang/CharSequence;)V");
          mids$[mid_out_grouping_b_6f0bb35a] = env->getMethodID(cls, "out_grouping_b", "([CII)Z");
          mids$[mid_in_range_b_d8d154aa] = env->getMethodID(cls, "in_range_b", "(II)Z");
          mids$[mid_out_range_d8d154aa] = env->getMethodID(cls, "out_range", "(II)Z");
          mids$[mid_out_range_b_d8d154aa] = env->getMethodID(cls, "out_range_b", "(II)Z");
          mids$[mid_eq_s_9145fa84] = env->getMethodID(cls, "eq_s", "(ILjava/lang/CharSequence;)Z");
          mids$[mid_eq_s_b_9145fa84] = env->getMethodID(cls, "eq_s_b", "(ILjava/lang/CharSequence;)Z");
          mids$[mid_eq_v_a8afc646] = env->getMethodID(cls, "eq_v", "(Ljava/lang/CharSequence;)Z");
          mids$[mid_eq_v_b_a8afc646] = env->getMethodID(cls, "eq_v_b", "(Ljava/lang/CharSequence;)Z");
          mids$[mid_find_among_0795632a] = env->getMethodID(cls, "find_among", "([Lorg/tartarus/snowball/Among;I)I");
          mids$[mid_replace_s_cb918b9d] = env->getMethodID(cls, "replace_s", "(IILjava/lang/CharSequence;)I");
          mids$[mid_slice_check_54c6a166] = env->getMethodID(cls, "slice_check", "()V");
          mids$[mid_slice_to_468cbe57] = env->getMethodID(cls, "slice_to", "(Ljava/lang/StringBuilder;)Ljava/lang/StringBuilder;");
          mids$[mid_assign_to_468cbe57] = env->getMethodID(cls, "assign_to", "(Ljava/lang/StringBuilder;)Ljava/lang/StringBuilder;");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      ::java::lang::String SnowballProgram::getCurrent() const
      {
        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getCurrent_14c7b5c5]));
      }

      JArray< jchar > SnowballProgram::getCurrentBuffer() const
      {
        return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_getCurrentBuffer_dab10e7f]));
      }

      jint SnowballProgram::getCurrentBufferLength() const
      {
        return env->callIntMethod(this$, mids$[mid_getCurrentBufferLength_54c6a179]);
      }

      void SnowballProgram::setCurrent(const ::java::lang::String & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_setCurrent_5fdc3f48], a0.this$);
      }

      void SnowballProgram::setCurrent(const JArray< jchar > & a0, jint a1) const
      {
        env->callVoidMethod(this$, mids$[mid_setCurrent_ec6430f4], a0.this$, a1);
      }

      jboolean SnowballProgram::stem() const
      {
        return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      static PyObject *t_SnowballProgram_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_SnowballProgram_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_SnowballProgram_getCurrent(t_SnowballProgram *self);
      static PyObject *t_SnowballProgram_getCurrentBuffer(t_SnowballProgram *self);
      static PyObject *t_SnowballProgram_getCurrentBufferLength(t_SnowballProgram *self);
      static PyObject *t_SnowballProgram_setCurrent(t_SnowballProgram *self, PyObject *args);
      static PyObject *t_SnowballProgram_stem(t_SnowballProgram *self);
      static PyObject *t_SnowballProgram_get__current(t_SnowballProgram *self, void *data);
      static int t_SnowballProgram_set__current(t_SnowballProgram *self, PyObject *arg, void *data);
      static PyObject *t_SnowballProgram_get__currentBuffer(t_SnowballProgram *self, void *data);
      static PyObject *t_SnowballProgram_get__currentBufferLength(t_SnowballProgram *self, void *data);
      static PyGetSetDef t_SnowballProgram__fields_[] = {
        DECLARE_GETSET_FIELD(t_SnowballProgram, current),
        DECLARE_GET_FIELD(t_SnowballProgram, currentBuffer),
        DECLARE_GET_FIELD(t_SnowballProgram, currentBufferLength),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_SnowballProgram__methods_[] = {
        DECLARE_METHOD(t_SnowballProgram, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_SnowballProgram, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_SnowballProgram, getCurrent, METH_NOARGS),
        DECLARE_METHOD(t_SnowballProgram, getCurrentBuffer, METH_NOARGS),
        DECLARE_METHOD(t_SnowballProgram, getCurrentBufferLength, METH_NOARGS),
        DECLARE_METHOD(t_SnowballProgram, setCurrent, METH_VARARGS),
        DECLARE_METHOD(t_SnowballProgram, stem, METH_NOARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(SnowballProgram, t_SnowballProgram, ::java::lang::Object, SnowballProgram, abstract_init, 0, 0, t_SnowballProgram__fields_, 0, 0);

      void t_SnowballProgram::install(PyObject *module)
      {
        installType(&PY_TYPE(SnowballProgram), module, "SnowballProgram", 0);
      }

      void t_SnowballProgram::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(SnowballProgram).tp_dict, "class_", make_descriptor(SnowballProgram::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(SnowballProgram).tp_dict, "wrapfn_", make_descriptor(t_SnowballProgram::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(SnowballProgram).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_SnowballProgram_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, SnowballProgram::initializeClass, 1)))
          return NULL;
        return t_SnowballProgram::wrap_Object(SnowballProgram(((t_SnowballProgram *) arg)->object.this$));
      }
      static PyObject *t_SnowballProgram_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, SnowballProgram::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_SnowballProgram_getCurrent(t_SnowballProgram *self)
      {
        ::java::lang::String result((jobject) NULL);
        OBJ_CALL(result = self->object.getCurrent());
        return j2p(result);
      }

      static PyObject *t_SnowballProgram_getCurrentBuffer(t_SnowballProgram *self)
      {
        JArray< jchar > result((jobject) NULL);
        OBJ_CALL(result = self->object.getCurrentBuffer());
        return result.wrap();
      }

      static PyObject *t_SnowballProgram_getCurrentBufferLength(t_SnowballProgram *self)
      {
        jint result;
        OBJ_CALL(result = self->object.getCurrentBufferLength());
        return PyInt_FromLong((long) result);
      }

      static PyObject *t_SnowballProgram_setCurrent(t_SnowballProgram *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            ::java::lang::String a0((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(self->object.setCurrent(a0));
              Py_RETURN_NONE;
            }
          }
          break;
         case 2:
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(self->object.setCurrent(a0, a1));
              Py_RETURN_NONE;
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "setCurrent", args);
        return NULL;
      }

      static PyObject *t_SnowballProgram_stem(t_SnowballProgram *self)
      {
        jboolean result;
        OBJ_CALL(result = self->object.stem());
        Py_RETURN_BOOL(result);
      }

      static PyObject *t_SnowballProgram_get__current(t_SnowballProgram *self, void *data)
      {
        ::java::lang::String value((jobject) NULL);
        OBJ_CALL(value = self->object.getCurrent());
        return j2p(value);
      }
      static int t_SnowballProgram_set__current(t_SnowballProgram *self, PyObject *arg, void *data)
      {
        {
          ::java::lang::String value((jobject) NULL);
          if (!parseArg(arg, "s", &value))
          {
            INT_CALL(self->object.setCurrent(value));
            return 0;
          }
        }
        PyErr_SetArgsError((PyObject *) self, "current", arg);
        return -1;
      }

      static PyObject *t_SnowballProgram_get__currentBuffer(t_SnowballProgram *self, void *data)
      {
        JArray< jchar > value((jobject) NULL);
        OBJ_CALL(value = self->object.getCurrentBuffer());
        return value.wrap();
      }

      static PyObject *t_SnowballProgram_get__currentBufferLength(t_SnowballProgram *self, void *data)
      {
        jint value;
        OBJ_CALL(value = self->object.getCurrentBufferLength());
        return PyInt_FromLong((long) value);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/range/LongRange.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Filter.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {

          ::java::lang::Class *LongRange::class$ = NULL;
          jmethodID *LongRange::mids$ = NULL;
          jfieldID *LongRange::fids$ = NULL;
          bool LongRange::live$ = false;

          jclass LongRange::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/range/LongRange");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_1777b4ec] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;JZJZ)V");
              mids$[mid_accept_0ee6df23] = env->getMethodID(cls, "accept", "(J)Z");
              mids$[mid_getFilter_fc904367] = env->getMethodID(cls, "getFilter", "(Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/queries/function/ValueSource;)Lorg/apache/lucene/search/Filter;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_max] = env->getFieldID(cls, "max", "J");
              fids$[fid_maxInclusive] = env->getFieldID(cls, "maxInclusive", "Z");
              fids$[fid_min] = env->getFieldID(cls, "min", "J");
              fids$[fid_minInclusive] = env->getFieldID(cls, "minInclusive", "Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LongRange::LongRange(const ::java::lang::String & a0, jlong a1, jboolean a2, jlong a3, jboolean a4) : ::org::apache::lucene::facet::range::Range(env->newObject(initializeClass, &mids$, mid_init$_1777b4ec, a0.this$, a1, a2, a3, a4)) {}

          jboolean LongRange::accept(jlong a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_accept_0ee6df23], a0);
          }

          ::org::apache::lucene::search::Filter LongRange::getFilter(const ::org::apache::lucene::search::Filter & a0, const ::org::apache::lucene::queries::function::ValueSource & a1) const
          {
            return ::org::apache::lucene::search::Filter(env->callObjectMethod(this$, mids$[mid_getFilter_fc904367], a0.this$, a1.this$));
          }

          ::java::lang::String LongRange::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          jlong LongRange::_get_max() const
          {
            return env->getLongField(this$, fids$[fid_max]);
          }

          jboolean LongRange::_get_maxInclusive() const
          {
            return env->getBooleanField(this$, fids$[fid_maxInclusive]);
          }

          jlong LongRange::_get_min() const
          {
            return env->getLongField(this$, fids$[fid_min]);
          }

          jboolean LongRange::_get_minInclusive() const
          {
            return env->getBooleanField(this$, fids$[fid_minInclusive]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {
          static PyObject *t_LongRange_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LongRange_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LongRange_init_(t_LongRange *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LongRange_accept(t_LongRange *self, PyObject *arg);
          static PyObject *t_LongRange_getFilter(t_LongRange *self, PyObject *args);
          static PyObject *t_LongRange_toString(t_LongRange *self, PyObject *args);
          static PyObject *t_LongRange_get__max(t_LongRange *self, void *data);
          static PyObject *t_LongRange_get__maxInclusive(t_LongRange *self, void *data);
          static PyObject *t_LongRange_get__min(t_LongRange *self, void *data);
          static PyObject *t_LongRange_get__minInclusive(t_LongRange *self, void *data);

          static PyGetSetDef t_LongRange__fields_[] = {
            DECLARE_GET_FIELD(t_LongRange, max),
            DECLARE_GET_FIELD(t_LongRange, maxInclusive),
            DECLARE_GET_FIELD(t_LongRange, min),
            DECLARE_GET_FIELD(t_LongRange, minInclusive),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LongRange__methods_[] = {
            DECLARE_METHOD(t_LongRange, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LongRange, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LongRange, accept, METH_O),
            DECLARE_METHOD(t_LongRange, getFilter, METH_VARARGS),
            DECLARE_METHOD(t_LongRange, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LongRange, t_LongRange, ::org::apache::lucene::facet::range::Range, LongRange, t_LongRange_init_, 0, 0, t_LongRange__fields_, 0, 0);

          void t_LongRange::install(PyObject *module)
          {
            installType(&PY_TYPE(LongRange), module, "LongRange", 0);
          }

          void t_LongRange::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LongRange).tp_dict, "class_", make_descriptor(LongRange::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LongRange).tp_dict, "wrapfn_", make_descriptor(t_LongRange::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LongRange).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LongRange_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LongRange::initializeClass, 1)))
              return NULL;
            return t_LongRange::wrap_Object(LongRange(((t_LongRange *) arg)->object.this$));
          }
          static PyObject *t_LongRange_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LongRange::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LongRange_init_(t_LongRange *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            jlong a1;
            jboolean a2;
            jlong a3;
            jboolean a4;
            LongRange object((jobject) NULL);

            if (!parseArgs(args, "sJZJZ", &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = LongRange(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LongRange_accept(t_LongRange *self, PyObject *arg)
          {
            jlong a0;
            jboolean result;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(result = self->object.accept(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "accept", arg);
            return NULL;
          }

          static PyObject *t_LongRange_getFilter(t_LongRange *self, PyObject *args)
          {
            ::org::apache::lucene::search::Filter a0((jobject) NULL);
            ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);
            ::org::apache::lucene::search::Filter result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.getFilter(a0, a1));
              return ::org::apache::lucene::search::t_Filter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(LongRange), (PyObject *) self, "getFilter", args, 2);
          }

          static PyObject *t_LongRange_toString(t_LongRange *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(LongRange), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_LongRange_get__max(t_LongRange *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_max());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }

          static PyObject *t_LongRange_get__maxInclusive(t_LongRange *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object._get_maxInclusive());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_LongRange_get__min(t_LongRange *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_min());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }

          static PyObject *t_LongRange_get__minInclusive(t_LongRange *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object._get_minInclusive());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/ParallelCompositeReader.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/CompositeReader.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *ParallelCompositeReader::class$ = NULL;
        jmethodID *ParallelCompositeReader::mids$ = NULL;
        bool ParallelCompositeReader::live$ = false;

        jclass ParallelCompositeReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/ParallelCompositeReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_0cab4ef6] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/index/CompositeReader;)V");
            mids$[mid_init$_24b17b53] = env->getMethodID(cls, "<init>", "(Z[Lorg/apache/lucene/index/CompositeReader;)V");
            mids$[mid_init$_9dc0978b] = env->getMethodID(cls, "<init>", "(Z[Lorg/apache/lucene/index/CompositeReader;[Lorg/apache/lucene/index/CompositeReader;)V");
            mids$[mid_doClose_54c6a166] = env->getMethodID(cls, "doClose", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ParallelCompositeReader::ParallelCompositeReader(const JArray< ::org::apache::lucene::index::CompositeReader > & a0) : ::org::apache::lucene::index::BaseCompositeReader(env->newObject(initializeClass, &mids$, mid_init$_0cab4ef6, a0.this$)) {}

        ParallelCompositeReader::ParallelCompositeReader(jboolean a0, const JArray< ::org::apache::lucene::index::CompositeReader > & a1) : ::org::apache::lucene::index::BaseCompositeReader(env->newObject(initializeClass, &mids$, mid_init$_24b17b53, a0, a1.this$)) {}

        ParallelCompositeReader::ParallelCompositeReader(jboolean a0, const JArray< ::org::apache::lucene::index::CompositeReader > & a1, const JArray< ::org::apache::lucene::index::CompositeReader > & a2) : ::org::apache::lucene::index::BaseCompositeReader(env->newObject(initializeClass, &mids$, mid_init$_9dc0978b, a0, a1.this$, a2.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_ParallelCompositeReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ParallelCompositeReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ParallelCompositeReader_of_(t_ParallelCompositeReader *self, PyObject *args);
        static int t_ParallelCompositeReader_init_(t_ParallelCompositeReader *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ParallelCompositeReader_get__parameters_(t_ParallelCompositeReader *self, void *data);
        static PyGetSetDef t_ParallelCompositeReader__fields_[] = {
          DECLARE_GET_FIELD(t_ParallelCompositeReader, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ParallelCompositeReader__methods_[] = {
          DECLARE_METHOD(t_ParallelCompositeReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ParallelCompositeReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ParallelCompositeReader, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ParallelCompositeReader, t_ParallelCompositeReader, ::org::apache::lucene::index::BaseCompositeReader, ParallelCompositeReader, t_ParallelCompositeReader_init_, 0, 0, t_ParallelCompositeReader__fields_, 0, 0);
        PyObject *t_ParallelCompositeReader::wrap_Object(const ParallelCompositeReader& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ParallelCompositeReader::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ParallelCompositeReader *self = (t_ParallelCompositeReader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_ParallelCompositeReader::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ParallelCompositeReader::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ParallelCompositeReader *self = (t_ParallelCompositeReader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_ParallelCompositeReader::install(PyObject *module)
        {
          installType(&PY_TYPE(ParallelCompositeReader), module, "ParallelCompositeReader", 0);
        }

        void t_ParallelCompositeReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ParallelCompositeReader).tp_dict, "class_", make_descriptor(ParallelCompositeReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ParallelCompositeReader).tp_dict, "wrapfn_", make_descriptor(t_ParallelCompositeReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ParallelCompositeReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ParallelCompositeReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ParallelCompositeReader::initializeClass, 1)))
            return NULL;
          return t_ParallelCompositeReader::wrap_Object(ParallelCompositeReader(((t_ParallelCompositeReader *) arg)->object.this$));
        }
        static PyObject *t_ParallelCompositeReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ParallelCompositeReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ParallelCompositeReader_of_(t_ParallelCompositeReader *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_ParallelCompositeReader_init_(t_ParallelCompositeReader *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::org::apache::lucene::index::CompositeReader > a0((jobject) NULL);
              ParallelCompositeReader object((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::index::CompositeReader::initializeClass, &a0))
              {
                INT_CALL(object = ParallelCompositeReader(a0));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::index::PY_TYPE(IndexReader);
                break;
              }
            }
            goto err;
           case 2:
            {
              jboolean a0;
              JArray< ::org::apache::lucene::index::CompositeReader > a1((jobject) NULL);
              ParallelCompositeReader object((jobject) NULL);

              if (!parseArgs(args, "Z[k", ::org::apache::lucene::index::CompositeReader::initializeClass, &a0, &a1))
              {
                INT_CALL(object = ParallelCompositeReader(a0, a1));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::index::PY_TYPE(IndexReader);
                break;
              }
            }
            goto err;
           case 3:
            {
              jboolean a0;
              JArray< ::org::apache::lucene::index::CompositeReader > a1((jobject) NULL);
              JArray< ::org::apache::lucene::index::CompositeReader > a2((jobject) NULL);
              ParallelCompositeReader object((jobject) NULL);

              if (!parseArgs(args, "Z[k[k", ::org::apache::lucene::index::CompositeReader::initializeClass, ::org::apache::lucene::index::CompositeReader::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = ParallelCompositeReader(a0, a1, a2));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::index::PY_TYPE(IndexReader);
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
        static PyObject *t_ParallelCompositeReader_get__parameters_(t_ParallelCompositeReader *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/bg/BulgarianStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace bg {

          ::java::lang::Class *BulgarianStemFilter::class$ = NULL;
          jmethodID *BulgarianStemFilter::mids$ = NULL;
          bool BulgarianStemFilter::live$ = false;

          jclass BulgarianStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/bg/BulgarianStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BulgarianStemFilter::BulgarianStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean BulgarianStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace bg {
          static PyObject *t_BulgarianStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BulgarianStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BulgarianStemFilter_init_(t_BulgarianStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BulgarianStemFilter_incrementToken(t_BulgarianStemFilter *self, PyObject *args);

          static PyMethodDef t_BulgarianStemFilter__methods_[] = {
            DECLARE_METHOD(t_BulgarianStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BulgarianStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BulgarianStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BulgarianStemFilter, t_BulgarianStemFilter, ::org::apache::lucene::analysis::TokenFilter, BulgarianStemFilter, t_BulgarianStemFilter_init_, 0, 0, 0, 0, 0);

          void t_BulgarianStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(BulgarianStemFilter), module, "BulgarianStemFilter", 0);
          }

          void t_BulgarianStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BulgarianStemFilter).tp_dict, "class_", make_descriptor(BulgarianStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BulgarianStemFilter).tp_dict, "wrapfn_", make_descriptor(t_BulgarianStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BulgarianStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BulgarianStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BulgarianStemFilter::initializeClass, 1)))
              return NULL;
            return t_BulgarianStemFilter::wrap_Object(BulgarianStemFilter(((t_BulgarianStemFilter *) arg)->object.this$));
          }
          static PyObject *t_BulgarianStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BulgarianStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BulgarianStemFilter_init_(t_BulgarianStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            BulgarianStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = BulgarianStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BulgarianStemFilter_incrementToken(t_BulgarianStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(BulgarianStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/NumericQueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *NumericQueryNodeProcessor::class$ = NULL;
              jmethodID *NumericQueryNodeProcessor::mids$ = NULL;
              bool NumericQueryNodeProcessor::live$ = false;

              jclass NumericQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/NumericQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              NumericQueryNodeProcessor::NumericQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_NumericQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_NumericQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_NumericQueryNodeProcessor_init_(t_NumericQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_NumericQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_NumericQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NumericQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(NumericQueryNodeProcessor, t_NumericQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, NumericQueryNodeProcessor, t_NumericQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_NumericQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(NumericQueryNodeProcessor), module, "NumericQueryNodeProcessor", 0);
              }

              void t_NumericQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(NumericQueryNodeProcessor).tp_dict, "class_", make_descriptor(NumericQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(NumericQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_NumericQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(NumericQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_NumericQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, NumericQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_NumericQueryNodeProcessor::wrap_Object(NumericQueryNodeProcessor(((t_NumericQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_NumericQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, NumericQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_NumericQueryNodeProcessor_init_(t_NumericQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                NumericQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = NumericQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/it/ItalianLightStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace it {

          ::java::lang::Class *ItalianLightStemFilter::class$ = NULL;
          jmethodID *ItalianLightStemFilter::mids$ = NULL;
          bool ItalianLightStemFilter::live$ = false;

          jclass ItalianLightStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/it/ItalianLightStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ItalianLightStemFilter::ItalianLightStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean ItalianLightStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace it {
          static PyObject *t_ItalianLightStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ItalianLightStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ItalianLightStemFilter_init_(t_ItalianLightStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ItalianLightStemFilter_incrementToken(t_ItalianLightStemFilter *self, PyObject *args);

          static PyMethodDef t_ItalianLightStemFilter__methods_[] = {
            DECLARE_METHOD(t_ItalianLightStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ItalianLightStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ItalianLightStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ItalianLightStemFilter, t_ItalianLightStemFilter, ::org::apache::lucene::analysis::TokenFilter, ItalianLightStemFilter, t_ItalianLightStemFilter_init_, 0, 0, 0, 0, 0);

          void t_ItalianLightStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ItalianLightStemFilter), module, "ItalianLightStemFilter", 0);
          }

          void t_ItalianLightStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ItalianLightStemFilter).tp_dict, "class_", make_descriptor(ItalianLightStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ItalianLightStemFilter).tp_dict, "wrapfn_", make_descriptor(t_ItalianLightStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ItalianLightStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ItalianLightStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ItalianLightStemFilter::initializeClass, 1)))
              return NULL;
            return t_ItalianLightStemFilter::wrap_Object(ItalianLightStemFilter(((t_ItalianLightStemFilter *) arg)->object.this$));
          }
          static PyObject *t_ItalianLightStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ItalianLightStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ItalianLightStemFilter_init_(t_ItalianLightStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ItalianLightStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = ItalianLightStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ItalianLightStemFilter_incrementToken(t_ItalianLightStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ItalianLightStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/FloatDocValuesField.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *FloatDocValuesField::class$ = NULL;
        jmethodID *FloatDocValuesField::mids$ = NULL;
        bool FloatDocValuesField::live$ = false;

        jclass FloatDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/FloatDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f0649ce1] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;F)V");
            mids$[mid_setFloatValue_06298cab] = env->getMethodID(cls, "setFloatValue", "(F)V");
            mids$[mid_setLongValue_0ee6df2f] = env->getMethodID(cls, "setLongValue", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FloatDocValuesField::FloatDocValuesField(const ::java::lang::String & a0, jfloat a1) : ::org::apache::lucene::document::NumericDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_f0649ce1, a0.this$, a1)) {}

        void FloatDocValuesField::setFloatValue(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setFloatValue_06298cab], a0);
        }

        void FloatDocValuesField::setLongValue(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setLongValue_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_FloatDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FloatDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FloatDocValuesField_init_(t_FloatDocValuesField *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FloatDocValuesField_setFloatValue(t_FloatDocValuesField *self, PyObject *args);
        static PyObject *t_FloatDocValuesField_setLongValue(t_FloatDocValuesField *self, PyObject *args);
        static int t_FloatDocValuesField_set__floatValue(t_FloatDocValuesField *self, PyObject *arg, void *data);
        static int t_FloatDocValuesField_set__longValue(t_FloatDocValuesField *self, PyObject *arg, void *data);
        static PyGetSetDef t_FloatDocValuesField__fields_[] = {
          DECLARE_SET_FIELD(t_FloatDocValuesField, floatValue),
          DECLARE_SET_FIELD(t_FloatDocValuesField, longValue),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FloatDocValuesField__methods_[] = {
          DECLARE_METHOD(t_FloatDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FloatDocValuesField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FloatDocValuesField, setFloatValue, METH_VARARGS),
          DECLARE_METHOD(t_FloatDocValuesField, setLongValue, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FloatDocValuesField, t_FloatDocValuesField, ::org::apache::lucene::document::NumericDocValuesField, FloatDocValuesField, t_FloatDocValuesField_init_, 0, 0, t_FloatDocValuesField__fields_, 0, 0);

        void t_FloatDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(FloatDocValuesField), module, "FloatDocValuesField", 0);
        }

        void t_FloatDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FloatDocValuesField).tp_dict, "class_", make_descriptor(FloatDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FloatDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_FloatDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FloatDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FloatDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FloatDocValuesField::initializeClass, 1)))
            return NULL;
          return t_FloatDocValuesField::wrap_Object(FloatDocValuesField(((t_FloatDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_FloatDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FloatDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FloatDocValuesField_init_(t_FloatDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jfloat a1;
          FloatDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "sF", &a0, &a1))
          {
            INT_CALL(object = FloatDocValuesField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FloatDocValuesField_setFloatValue(t_FloatDocValuesField *self, PyObject *args)
        {
          jfloat a0;

          if (!parseArgs(args, "F", &a0))
          {
            OBJ_CALL(self->object.setFloatValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FloatDocValuesField), (PyObject *) self, "setFloatValue", args, 2);
        }

        static PyObject *t_FloatDocValuesField_setLongValue(t_FloatDocValuesField *self, PyObject *args)
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.setLongValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FloatDocValuesField), (PyObject *) self, "setLongValue", args, 2);
        }

        static int t_FloatDocValuesField_set__floatValue(t_FloatDocValuesField *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setFloatValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "floatValue", arg);
          return -1;
        }

        static int t_FloatDocValuesField_set__longValue(t_FloatDocValuesField *self, PyObject *arg, void *data)
        {
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object.setLongValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "longValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SearcherManager.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "org/apache/lucene/search/SearcherFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SearcherManager::class$ = NULL;
        jmethodID *SearcherManager::mids$ = NULL;
        bool SearcherManager::live$ = false;

        jclass SearcherManager::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SearcherManager");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_8abe804e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/search/SearcherFactory;)V");
            mids$[mid_init$_1c94e792] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexWriter;ZLorg/apache/lucene/search/SearcherFactory;)V");
            mids$[mid_getSearcher_00082010] = env->getStaticMethodID(cls, "getSearcher", "(Lorg/apache/lucene/search/SearcherFactory;Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/IndexSearcher;");
            mids$[mid_isSearcherCurrent_54c6a16a] = env->getMethodID(cls, "isSearcherCurrent", "()Z");
            mids$[mid_decRef_474fe51c] = env->getMethodID(cls, "decRef", "(Lorg/apache/lucene/search/IndexSearcher;)V");
            mids$[mid_getRefCount_474fe503] = env->getMethodID(cls, "getRefCount", "(Lorg/apache/lucene/search/IndexSearcher;)I");
            mids$[mid_tryIncRef_474fe510] = env->getMethodID(cls, "tryIncRef", "(Lorg/apache/lucene/search/IndexSearcher;)Z");
            mids$[mid_refreshIfNeeded_8f3bcadb] = env->getMethodID(cls, "refreshIfNeeded", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/IndexSearcher;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SearcherManager::SearcherManager(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::search::SearcherFactory & a1) : ::org::apache::lucene::search::ReferenceManager(env->newObject(initializeClass, &mids$, mid_init$_8abe804e, a0.this$, a1.this$)) {}

        SearcherManager::SearcherManager(const ::org::apache::lucene::index::IndexWriter & a0, jboolean a1, const ::org::apache::lucene::search::SearcherFactory & a2) : ::org::apache::lucene::search::ReferenceManager(env->newObject(initializeClass, &mids$, mid_init$_1c94e792, a0.this$, a1, a2.this$)) {}

        ::org::apache::lucene::search::IndexSearcher SearcherManager::getSearcher(const ::org::apache::lucene::search::SearcherFactory & a0, const ::org::apache::lucene::index::IndexReader & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::IndexSearcher(env->callStaticObjectMethod(cls, mids$[mid_getSearcher_00082010], a0.this$, a1.this$));
        }

        jboolean SearcherManager::isSearcherCurrent() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isSearcherCurrent_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SearcherManager_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SearcherManager_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SearcherManager_of_(t_SearcherManager *self, PyObject *args);
        static int t_SearcherManager_init_(t_SearcherManager *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SearcherManager_getSearcher(PyTypeObject *type, PyObject *args);
        static PyObject *t_SearcherManager_isSearcherCurrent(t_SearcherManager *self);
        static PyObject *t_SearcherManager_get__searcherCurrent(t_SearcherManager *self, void *data);
        static PyObject *t_SearcherManager_get__parameters_(t_SearcherManager *self, void *data);
        static PyGetSetDef t_SearcherManager__fields_[] = {
          DECLARE_GET_FIELD(t_SearcherManager, searcherCurrent),
          DECLARE_GET_FIELD(t_SearcherManager, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SearcherManager__methods_[] = {
          DECLARE_METHOD(t_SearcherManager, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SearcherManager, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SearcherManager, of_, METH_VARARGS),
          DECLARE_METHOD(t_SearcherManager, getSearcher, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SearcherManager, isSearcherCurrent, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SearcherManager, t_SearcherManager, ::org::apache::lucene::search::ReferenceManager, SearcherManager, t_SearcherManager_init_, 0, 0, t_SearcherManager__fields_, 0, 0);
        PyObject *t_SearcherManager::wrap_Object(const SearcherManager& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SearcherManager::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SearcherManager *self = (t_SearcherManager *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_SearcherManager::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SearcherManager::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SearcherManager *self = (t_SearcherManager *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_SearcherManager::install(PyObject *module)
        {
          installType(&PY_TYPE(SearcherManager), module, "SearcherManager", 0);
        }

        void t_SearcherManager::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SearcherManager).tp_dict, "class_", make_descriptor(SearcherManager::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SearcherManager).tp_dict, "wrapfn_", make_descriptor(t_SearcherManager::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SearcherManager).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SearcherManager_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SearcherManager::initializeClass, 1)))
            return NULL;
          return t_SearcherManager::wrap_Object(SearcherManager(((t_SearcherManager *) arg)->object.this$));
        }
        static PyObject *t_SearcherManager_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SearcherManager::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SearcherManager_of_(t_SearcherManager *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_SearcherManager_init_(t_SearcherManager *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::org::apache::lucene::search::SearcherFactory a1((jobject) NULL);
              SearcherManager object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::search::SearcherFactory::initializeClass, &a0, &a1))
              {
                INT_CALL(object = SearcherManager(a0, a1));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::search::PY_TYPE(IndexSearcher);
                break;
              }
            }
            goto err;
           case 3:
            {
              ::org::apache::lucene::index::IndexWriter a0((jobject) NULL);
              jboolean a1;
              ::org::apache::lucene::search::SearcherFactory a2((jobject) NULL);
              SearcherManager object((jobject) NULL);

              if (!parseArgs(args, "kZk", ::org::apache::lucene::index::IndexWriter::initializeClass, ::org::apache::lucene::search::SearcherFactory::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = SearcherManager(a0, a1, a2));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::search::PY_TYPE(IndexSearcher);
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SearcherManager_getSearcher(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::search::SearcherFactory a0((jobject) NULL);
          ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
          ::org::apache::lucene::search::IndexSearcher result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::search::SearcherFactory::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::SearcherManager::getSearcher(a0, a1));
            return ::org::apache::lucene::search::t_IndexSearcher::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getSearcher", args);
          return NULL;
        }

        static PyObject *t_SearcherManager_isSearcherCurrent(t_SearcherManager *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isSearcherCurrent());
          Py_RETURN_BOOL(result);
        }
        static PyObject *t_SearcherManager_get__parameters_(t_SearcherManager *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_SearcherManager_get__searcherCurrent(t_SearcherManager *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isSearcherCurrent());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedInts$FormatAndBits.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/packed/PackedInts$Format.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedInts$FormatAndBits::class$ = NULL;
          jmethodID *PackedInts$FormatAndBits::mids$ = NULL;
          jfieldID *PackedInts$FormatAndBits::fids$ = NULL;
          bool PackedInts$FormatAndBits::live$ = false;

          jclass PackedInts$FormatAndBits::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedInts$FormatAndBits");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_41c85b58] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/packed/PackedInts$Format;I)V");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_bitsPerValue] = env->getFieldID(cls, "bitsPerValue", "I");
              fids$[fid_format] = env->getFieldID(cls, "format", "Lorg/apache/lucene/util/packed/PackedInts$Format;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PackedInts$FormatAndBits::PackedInts$FormatAndBits(const ::org::apache::lucene::util::packed::PackedInts$Format & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_41c85b58, a0.this$, a1)) {}

          ::java::lang::String PackedInts$FormatAndBits::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          jint PackedInts$FormatAndBits::_get_bitsPerValue() const
          {
            return env->getIntField(this$, fids$[fid_bitsPerValue]);
          }

          ::org::apache::lucene::util::packed::PackedInts$Format PackedInts$FormatAndBits::_get_format() const
          {
            return ::org::apache::lucene::util::packed::PackedInts$Format(env->getObjectField(this$, fids$[fid_format]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedInts$FormatAndBits_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$FormatAndBits_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PackedInts$FormatAndBits_init_(t_PackedInts$FormatAndBits *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PackedInts$FormatAndBits_toString(t_PackedInts$FormatAndBits *self, PyObject *args);
          static PyObject *t_PackedInts$FormatAndBits_get__bitsPerValue(t_PackedInts$FormatAndBits *self, void *data);
          static PyObject *t_PackedInts$FormatAndBits_get__format(t_PackedInts$FormatAndBits *self, void *data);

          static PyGetSetDef t_PackedInts$FormatAndBits__fields_[] = {
            DECLARE_GET_FIELD(t_PackedInts$FormatAndBits, bitsPerValue),
            DECLARE_GET_FIELD(t_PackedInts$FormatAndBits, format),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PackedInts$FormatAndBits__methods_[] = {
            DECLARE_METHOD(t_PackedInts$FormatAndBits, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$FormatAndBits, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$FormatAndBits, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedInts$FormatAndBits, t_PackedInts$FormatAndBits, ::java::lang::Object, PackedInts$FormatAndBits, t_PackedInts$FormatAndBits_init_, 0, 0, t_PackedInts$FormatAndBits__fields_, 0, 0);

          void t_PackedInts$FormatAndBits::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedInts$FormatAndBits), module, "PackedInts$FormatAndBits", 0);
          }

          void t_PackedInts$FormatAndBits::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedInts$FormatAndBits).tp_dict, "class_", make_descriptor(PackedInts$FormatAndBits::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedInts$FormatAndBits).tp_dict, "wrapfn_", make_descriptor(t_PackedInts$FormatAndBits::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedInts$FormatAndBits).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedInts$FormatAndBits_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedInts$FormatAndBits::initializeClass, 1)))
              return NULL;
            return t_PackedInts$FormatAndBits::wrap_Object(PackedInts$FormatAndBits(((t_PackedInts$FormatAndBits *) arg)->object.this$));
          }
          static PyObject *t_PackedInts$FormatAndBits_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedInts$FormatAndBits::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PackedInts$FormatAndBits_init_(t_PackedInts$FormatAndBits *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::packed::PackedInts$Format a0((jobject) NULL);
            PyTypeObject **p0;
            jint a1;
            PackedInts$FormatAndBits object((jobject) NULL);

            if (!parseArgs(args, "KI", ::org::apache::lucene::util::packed::PackedInts$Format::initializeClass, &a0, &p0, ::org::apache::lucene::util::packed::t_PackedInts$Format::parameters_, &a1))
            {
              INT_CALL(object = PackedInts$FormatAndBits(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PackedInts$FormatAndBits_toString(t_PackedInts$FormatAndBits *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(PackedInts$FormatAndBits), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_PackedInts$FormatAndBits_get__bitsPerValue(t_PackedInts$FormatAndBits *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_bitsPerValue());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_PackedInts$FormatAndBits_get__format(t_PackedInts$FormatAndBits *self, void *data)
          {
            ::org::apache::lucene::util::packed::PackedInts$Format value((jobject) NULL);
            OBJ_CALL(value = self->object._get_format());
            return ::org::apache::lucene::util::packed::t_PackedInts$Format::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/OrdTermState.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *OrdTermState::class$ = NULL;
        jmethodID *OrdTermState::mids$ = NULL;
        jfieldID *OrdTermState::fids$ = NULL;
        bool OrdTermState::live$ = false;

        jclass OrdTermState::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/OrdTermState");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_copyFrom_d506ca07] = env->getMethodID(cls, "copyFrom", "(Lorg/apache/lucene/index/TermState;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_ord] = env->getFieldID(cls, "ord", "J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        OrdTermState::OrdTermState() : ::org::apache::lucene::index::TermState(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void OrdTermState::copyFrom(const ::org::apache::lucene::index::TermState & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyFrom_d506ca07], a0.this$);
        }

        ::java::lang::String OrdTermState::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        jlong OrdTermState::_get_ord() const
        {
          return env->getLongField(this$, fids$[fid_ord]);
        }

        void OrdTermState::_set_ord(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_ord], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_OrdTermState_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OrdTermState_instance_(PyTypeObject *type, PyObject *arg);
        static int t_OrdTermState_init_(t_OrdTermState *self, PyObject *args, PyObject *kwds);
        static PyObject *t_OrdTermState_copyFrom(t_OrdTermState *self, PyObject *args);
        static PyObject *t_OrdTermState_toString(t_OrdTermState *self, PyObject *args);
        static PyObject *t_OrdTermState_get__ord(t_OrdTermState *self, void *data);
        static int t_OrdTermState_set__ord(t_OrdTermState *self, PyObject *arg, void *data);

        static PyGetSetDef t_OrdTermState__fields_[] = {
          DECLARE_GETSET_FIELD(t_OrdTermState, ord),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_OrdTermState__methods_[] = {
          DECLARE_METHOD(t_OrdTermState, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OrdTermState, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OrdTermState, copyFrom, METH_VARARGS),
          DECLARE_METHOD(t_OrdTermState, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(OrdTermState, t_OrdTermState, ::org::apache::lucene::index::TermState, OrdTermState, t_OrdTermState_init_, 0, 0, t_OrdTermState__fields_, 0, 0);

        void t_OrdTermState::install(PyObject *module)
        {
          installType(&PY_TYPE(OrdTermState), module, "OrdTermState", 0);
        }

        void t_OrdTermState::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(OrdTermState).tp_dict, "class_", make_descriptor(OrdTermState::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(OrdTermState).tp_dict, "wrapfn_", make_descriptor(t_OrdTermState::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(OrdTermState).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_OrdTermState_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, OrdTermState::initializeClass, 1)))
            return NULL;
          return t_OrdTermState::wrap_Object(OrdTermState(((t_OrdTermState *) arg)->object.this$));
        }
        static PyObject *t_OrdTermState_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, OrdTermState::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_OrdTermState_init_(t_OrdTermState *self, PyObject *args, PyObject *kwds)
        {
          OrdTermState object((jobject) NULL);

          INT_CALL(object = OrdTermState());
          self->object = object;

          return 0;
        }

        static PyObject *t_OrdTermState_copyFrom(t_OrdTermState *self, PyObject *args)
        {
          ::org::apache::lucene::index::TermState a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::TermState::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyFrom(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(OrdTermState), (PyObject *) self, "copyFrom", args, 2);
        }

        static PyObject *t_OrdTermState_toString(t_OrdTermState *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(OrdTermState), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_OrdTermState_get__ord(t_OrdTermState *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_ord());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_OrdTermState_set__ord(t_OrdTermState *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_ord(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "ord", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/ElisionFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *ElisionFilter::class$ = NULL;
          jmethodID *ElisionFilter::mids$ = NULL;
          bool ElisionFilter::live$ = false;

          jclass ElisionFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/ElisionFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_64fb9de3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ElisionFilter::ElisionFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_64fb9de3, a0.this$, a1.this$)) {}

          jboolean ElisionFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_ElisionFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ElisionFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ElisionFilter_init_(t_ElisionFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ElisionFilter_incrementToken(t_ElisionFilter *self, PyObject *args);

          static PyMethodDef t_ElisionFilter__methods_[] = {
            DECLARE_METHOD(t_ElisionFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ElisionFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ElisionFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ElisionFilter, t_ElisionFilter, ::org::apache::lucene::analysis::TokenFilter, ElisionFilter, t_ElisionFilter_init_, 0, 0, 0, 0, 0);

          void t_ElisionFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ElisionFilter), module, "ElisionFilter", 0);
          }

          void t_ElisionFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ElisionFilter).tp_dict, "class_", make_descriptor(ElisionFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ElisionFilter).tp_dict, "wrapfn_", make_descriptor(t_ElisionFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ElisionFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ElisionFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ElisionFilter::initializeClass, 1)))
              return NULL;
            return t_ElisionFilter::wrap_Object(ElisionFilter(((t_ElisionFilter *) arg)->object.this$));
          }
          static PyObject *t_ElisionFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ElisionFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ElisionFilter_init_(t_ElisionFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
            PyTypeObject **p1;
            ElisionFilter object((jobject) NULL);

            if (!parseArgs(args, "kK", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
            {
              INT_CALL(object = ElisionFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ElisionFilter_incrementToken(t_ElisionFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ElisionFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/fst/WFSTCompletionLookup.h"
#include "java/util/Set.h"
#include "java/lang/CharSequence.h"
#include "java/util/List.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupResult.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {

            ::java::lang::Class *WFSTCompletionLookup::class$ = NULL;
            jmethodID *WFSTCompletionLookup::mids$ = NULL;
            bool WFSTCompletionLookup::live$ = false;

            jclass WFSTCompletionLookup::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/fst/WFSTCompletionLookup");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_bb0c767f] = env->getMethodID(cls, "<init>", "(Z)V");
                mids$[mid_build_1754a234] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/search/suggest/InputIterator;)V");
                mids$[mid_get_a739ccff] = env->getMethodID(cls, "get", "(Ljava/lang/CharSequence;)Ljava/lang/Object;");
                mids$[mid_getCount_54c6a17a] = env->getMethodID(cls, "getCount", "()J");
                mids$[mid_load_f5d6a55d] = env->getMethodID(cls, "load", "(Lorg/apache/lucene/store/DataInput;)Z");
                mids$[mid_lookup_dd3e9f51] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;ZI)Ljava/util/List;");
                mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
                mids$[mid_store_27875f5b] = env->getMethodID(cls, "store", "(Lorg/apache/lucene/store/DataOutput;)Z");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            WFSTCompletionLookup::WFSTCompletionLookup() : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            WFSTCompletionLookup::WFSTCompletionLookup(jboolean a0) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_bb0c767f, a0)) {}

            void WFSTCompletionLookup::build(const ::org::apache::lucene::search::suggest::InputIterator & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_build_1754a234], a0.this$);
            }

            ::java::lang::Object WFSTCompletionLookup::get(const ::java::lang::CharSequence & a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_a739ccff], a0.this$));
            }

            jlong WFSTCompletionLookup::getCount() const
            {
              return env->callLongMethod(this$, mids$[mid_getCount_54c6a17a]);
            }

            jboolean WFSTCompletionLookup::load(const ::org::apache::lucene::store::DataInput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_load_f5d6a55d], a0.this$);
            }

            ::java::util::List WFSTCompletionLookup::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jboolean a2, jint a3) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_dd3e9f51], a0.this$, a1.this$, a2, a3));
            }

            jlong WFSTCompletionLookup::ramBytesUsed() const
            {
              return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
            }

            jboolean WFSTCompletionLookup::store(const ::org::apache::lucene::store::DataOutput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_store_27875f5b], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {
            static PyObject *t_WFSTCompletionLookup_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_WFSTCompletionLookup_instance_(PyTypeObject *type, PyObject *arg);
            static int t_WFSTCompletionLookup_init_(t_WFSTCompletionLookup *self, PyObject *args, PyObject *kwds);
            static PyObject *t_WFSTCompletionLookup_build(t_WFSTCompletionLookup *self, PyObject *args);
            static PyObject *t_WFSTCompletionLookup_get(t_WFSTCompletionLookup *self, PyObject *arg);
            static PyObject *t_WFSTCompletionLookup_getCount(t_WFSTCompletionLookup *self, PyObject *args);
            static PyObject *t_WFSTCompletionLookup_load(t_WFSTCompletionLookup *self, PyObject *args);
            static PyObject *t_WFSTCompletionLookup_lookup(t_WFSTCompletionLookup *self, PyObject *args);
            static PyObject *t_WFSTCompletionLookup_ramBytesUsed(t_WFSTCompletionLookup *self, PyObject *args);
            static PyObject *t_WFSTCompletionLookup_store(t_WFSTCompletionLookup *self, PyObject *args);
            static PyObject *t_WFSTCompletionLookup_get__count(t_WFSTCompletionLookup *self, void *data);
            static PyGetSetDef t_WFSTCompletionLookup__fields_[] = {
              DECLARE_GET_FIELD(t_WFSTCompletionLookup, count),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_WFSTCompletionLookup__methods_[] = {
              DECLARE_METHOD(t_WFSTCompletionLookup, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_WFSTCompletionLookup, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_WFSTCompletionLookup, build, METH_VARARGS),
              DECLARE_METHOD(t_WFSTCompletionLookup, get, METH_O),
              DECLARE_METHOD(t_WFSTCompletionLookup, getCount, METH_VARARGS),
              DECLARE_METHOD(t_WFSTCompletionLookup, load, METH_VARARGS),
              DECLARE_METHOD(t_WFSTCompletionLookup, lookup, METH_VARARGS),
              DECLARE_METHOD(t_WFSTCompletionLookup, ramBytesUsed, METH_VARARGS),
              DECLARE_METHOD(t_WFSTCompletionLookup, store, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(WFSTCompletionLookup, t_WFSTCompletionLookup, ::org::apache::lucene::search::suggest::Lookup, WFSTCompletionLookup, t_WFSTCompletionLookup_init_, 0, 0, t_WFSTCompletionLookup__fields_, 0, 0);

            void t_WFSTCompletionLookup::install(PyObject *module)
            {
              installType(&PY_TYPE(WFSTCompletionLookup), module, "WFSTCompletionLookup", 0);
            }

            void t_WFSTCompletionLookup::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(WFSTCompletionLookup).tp_dict, "class_", make_descriptor(WFSTCompletionLookup::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(WFSTCompletionLookup).tp_dict, "wrapfn_", make_descriptor(t_WFSTCompletionLookup::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(WFSTCompletionLookup).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_WFSTCompletionLookup_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, WFSTCompletionLookup::initializeClass, 1)))
                return NULL;
              return t_WFSTCompletionLookup::wrap_Object(WFSTCompletionLookup(((t_WFSTCompletionLookup *) arg)->object.this$));
            }
            static PyObject *t_WFSTCompletionLookup_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, WFSTCompletionLookup::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_WFSTCompletionLookup_init_(t_WFSTCompletionLookup *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  WFSTCompletionLookup object((jobject) NULL);

                  INT_CALL(object = WFSTCompletionLookup());
                  self->object = object;
                  break;
                }
                goto err;
               case 1:
                {
                  jboolean a0;
                  WFSTCompletionLookup object((jobject) NULL);

                  if (!parseArgs(args, "Z", &a0))
                  {
                    INT_CALL(object = WFSTCompletionLookup(a0));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_WFSTCompletionLookup_build(t_WFSTCompletionLookup *self, PyObject *args)
            {
              ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0))
              {
                OBJ_CALL(self->object.build(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(WFSTCompletionLookup), (PyObject *) self, "build", args, 2);
            }

            static PyObject *t_WFSTCompletionLookup_get(t_WFSTCompletionLookup *self, PyObject *arg)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::lang::Object result((jobject) NULL);

              if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_WFSTCompletionLookup_getCount(t_WFSTCompletionLookup *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getCount());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(WFSTCompletionLookup), (PyObject *) self, "getCount", args, 2);
            }

            static PyObject *t_WFSTCompletionLookup_load(t_WFSTCompletionLookup *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataInput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.load(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(WFSTCompletionLookup), (PyObject *) self, "load", args, 2);
            }

            static PyObject *t_WFSTCompletionLookup_lookup(t_WFSTCompletionLookup *self, PyObject *args)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::util::Set a1((jobject) NULL);
              PyTypeObject **p1;
              jboolean a2;
              jint a3;
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, "OKZI", &::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3))
              {
                OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3));
                return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
              }

              return callSuper(&PY_TYPE(WFSTCompletionLookup), (PyObject *) self, "lookup", args, 2);
            }

            static PyObject *t_WFSTCompletionLookup_ramBytesUsed(t_WFSTCompletionLookup *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.ramBytesUsed());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(WFSTCompletionLookup), (PyObject *) self, "ramBytesUsed", args, 2);
            }

            static PyObject *t_WFSTCompletionLookup_store(t_WFSTCompletionLookup *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.store(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(WFSTCompletionLookup), (PyObject *) self, "store", args, 2);
            }

            static PyObject *t_WFSTCompletionLookup_get__count(t_WFSTCompletionLookup *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object.getCount());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/BooleanSingleChildOptimizationQueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *BooleanSingleChildOptimizationQueryNodeProcessor::class$ = NULL;
              jmethodID *BooleanSingleChildOptimizationQueryNodeProcessor::mids$ = NULL;
              bool BooleanSingleChildOptimizationQueryNodeProcessor::live$ = false;

              jclass BooleanSingleChildOptimizationQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/BooleanSingleChildOptimizationQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              BooleanSingleChildOptimizationQueryNodeProcessor::BooleanSingleChildOptimizationQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_BooleanSingleChildOptimizationQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_BooleanSingleChildOptimizationQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_BooleanSingleChildOptimizationQueryNodeProcessor_init_(t_BooleanSingleChildOptimizationQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_BooleanSingleChildOptimizationQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_BooleanSingleChildOptimizationQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BooleanSingleChildOptimizationQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(BooleanSingleChildOptimizationQueryNodeProcessor, t_BooleanSingleChildOptimizationQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, BooleanSingleChildOptimizationQueryNodeProcessor, t_BooleanSingleChildOptimizationQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_BooleanSingleChildOptimizationQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(BooleanSingleChildOptimizationQueryNodeProcessor), module, "BooleanSingleChildOptimizationQueryNodeProcessor", 0);
              }

              void t_BooleanSingleChildOptimizationQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(BooleanSingleChildOptimizationQueryNodeProcessor).tp_dict, "class_", make_descriptor(BooleanSingleChildOptimizationQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(BooleanSingleChildOptimizationQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_BooleanSingleChildOptimizationQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(BooleanSingleChildOptimizationQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_BooleanSingleChildOptimizationQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, BooleanSingleChildOptimizationQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_BooleanSingleChildOptimizationQueryNodeProcessor::wrap_Object(BooleanSingleChildOptimizationQueryNodeProcessor(((t_BooleanSingleChildOptimizationQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_BooleanSingleChildOptimizationQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, BooleanSingleChildOptimizationQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_BooleanSingleChildOptimizationQueryNodeProcessor_init_(t_BooleanSingleChildOptimizationQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                BooleanSingleChildOptimizationQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = BooleanSingleChildOptimizationQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/Field$Index.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *Field$Index::class$ = NULL;
        jmethodID *Field$Index::mids$ = NULL;
        bool Field$Index::live$ = false;
        Field$Index *Field$Index::ANALYZED = NULL;
        Field$Index *Field$Index::ANALYZED_NO_NORMS = NULL;
        Field$Index *Field$Index::NO = NULL;
        Field$Index *Field$Index::NOT_ANALYZED = NULL;
        Field$Index *Field$Index::NOT_ANALYZED_NO_NORMS = NULL;

        jclass Field$Index::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/Field$Index");

            mids$ = new jmethodID[max_mid];
            mids$[mid_isAnalyzed_54c6a16a] = env->getMethodID(cls, "isAnalyzed", "()Z");
            mids$[mid_isIndexed_54c6a16a] = env->getMethodID(cls, "isIndexed", "()Z");
            mids$[mid_omitNorms_54c6a16a] = env->getMethodID(cls, "omitNorms", "()Z");
            mids$[mid_toIndex_0139857d] = env->getStaticMethodID(cls, "toIndex", "(ZZ)Lorg/apache/lucene/document/Field$Index;");
            mids$[mid_toIndex_fddaa68a] = env->getStaticMethodID(cls, "toIndex", "(ZZZ)Lorg/apache/lucene/document/Field$Index;");
            mids$[mid_valueOf_6b6ff451] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/document/Field$Index;");
            mids$[mid_values_d9660127] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/document/Field$Index;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            ANALYZED = new Field$Index(env->getStaticObjectField(cls, "ANALYZED", "Lorg/apache/lucene/document/Field$Index;"));
            ANALYZED_NO_NORMS = new Field$Index(env->getStaticObjectField(cls, "ANALYZED_NO_NORMS", "Lorg/apache/lucene/document/Field$Index;"));
            NO = new Field$Index(env->getStaticObjectField(cls, "NO", "Lorg/apache/lucene/document/Field$Index;"));
            NOT_ANALYZED = new Field$Index(env->getStaticObjectField(cls, "NOT_ANALYZED", "Lorg/apache/lucene/document/Field$Index;"));
            NOT_ANALYZED_NO_NORMS = new Field$Index(env->getStaticObjectField(cls, "NOT_ANALYZED_NO_NORMS", "Lorg/apache/lucene/document/Field$Index;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean Field$Index::isAnalyzed() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isAnalyzed_54c6a16a]);
        }

        jboolean Field$Index::isIndexed() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isIndexed_54c6a16a]);
        }

        jboolean Field$Index::omitNorms() const
        {
          return env->callBooleanMethod(this$, mids$[mid_omitNorms_54c6a16a]);
        }

        Field$Index Field$Index::toIndex(jboolean a0, jboolean a1)
        {
          jclass cls = env->getClass(initializeClass);
          return Field$Index(env->callStaticObjectMethod(cls, mids$[mid_toIndex_0139857d], a0, a1));
        }

        Field$Index Field$Index::toIndex(jboolean a0, jboolean a1, jboolean a2)
        {
          jclass cls = env->getClass(initializeClass);
          return Field$Index(env->callStaticObjectMethod(cls, mids$[mid_toIndex_fddaa68a], a0, a1, a2));
        }

        Field$Index Field$Index::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return Field$Index(env->callStaticObjectMethod(cls, mids$[mid_valueOf_6b6ff451], a0.this$));
        }

        JArray< Field$Index > Field$Index::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< Field$Index >(env->callStaticObjectMethod(cls, mids$[mid_values_d9660127]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_Field$Index_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Field$Index_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Field$Index_of_(t_Field$Index *self, PyObject *args);
        static PyObject *t_Field$Index_isAnalyzed(t_Field$Index *self);
        static PyObject *t_Field$Index_isIndexed(t_Field$Index *self);
        static PyObject *t_Field$Index_omitNorms(t_Field$Index *self);
        static PyObject *t_Field$Index_toIndex(PyTypeObject *type, PyObject *args);
        static PyObject *t_Field$Index_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_Field$Index_values(PyTypeObject *type);
        static PyObject *t_Field$Index_get__analyzed(t_Field$Index *self, void *data);
        static PyObject *t_Field$Index_get__indexed(t_Field$Index *self, void *data);
        static PyObject *t_Field$Index_get__parameters_(t_Field$Index *self, void *data);
        static PyGetSetDef t_Field$Index__fields_[] = {
          DECLARE_GET_FIELD(t_Field$Index, analyzed),
          DECLARE_GET_FIELD(t_Field$Index, indexed),
          DECLARE_GET_FIELD(t_Field$Index, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Field$Index__methods_[] = {
          DECLARE_METHOD(t_Field$Index, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Field$Index, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Field$Index, of_, METH_VARARGS),
          DECLARE_METHOD(t_Field$Index, isAnalyzed, METH_NOARGS),
          DECLARE_METHOD(t_Field$Index, isIndexed, METH_NOARGS),
          DECLARE_METHOD(t_Field$Index, omitNorms, METH_NOARGS),
          DECLARE_METHOD(t_Field$Index, toIndex, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_Field$Index, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_Field$Index, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Field$Index, t_Field$Index, ::java::lang::Enum, Field$Index, abstract_init, 0, 0, t_Field$Index__fields_, 0, 0);
        PyObject *t_Field$Index::wrap_Object(const Field$Index& object, PyTypeObject *p0)
        {
          PyObject *obj = t_Field$Index::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_Field$Index *self = (t_Field$Index *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_Field$Index::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_Field$Index::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_Field$Index *self = (t_Field$Index *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_Field$Index::install(PyObject *module)
        {
          installType(&PY_TYPE(Field$Index), module, "Field$Index", 0);
        }

        void t_Field$Index::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Field$Index).tp_dict, "class_", make_descriptor(Field$Index::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Field$Index).tp_dict, "wrapfn_", make_descriptor(t_Field$Index::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Field$Index).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(Field$Index::initializeClass);
          PyDict_SetItemString(PY_TYPE(Field$Index).tp_dict, "ANALYZED", make_descriptor(t_Field$Index::wrap_Object(*Field$Index::ANALYZED)));
          PyDict_SetItemString(PY_TYPE(Field$Index).tp_dict, "ANALYZED_NO_NORMS", make_descriptor(t_Field$Index::wrap_Object(*Field$Index::ANALYZED_NO_NORMS)));
          PyDict_SetItemString(PY_TYPE(Field$Index).tp_dict, "NO", make_descriptor(t_Field$Index::wrap_Object(*Field$Index::NO)));
          PyDict_SetItemString(PY_TYPE(Field$Index).tp_dict, "NOT_ANALYZED", make_descriptor(t_Field$Index::wrap_Object(*Field$Index::NOT_ANALYZED)));
          PyDict_SetItemString(PY_TYPE(Field$Index).tp_dict, "NOT_ANALYZED_NO_NORMS", make_descriptor(t_Field$Index::wrap_Object(*Field$Index::NOT_ANALYZED_NO_NORMS)));
        }

        static PyObject *t_Field$Index_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Field$Index::initializeClass, 1)))
            return NULL;
          return t_Field$Index::wrap_Object(Field$Index(((t_Field$Index *) arg)->object.this$));
        }
        static PyObject *t_Field$Index_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Field$Index::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Field$Index_of_(t_Field$Index *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_Field$Index_isAnalyzed(t_Field$Index *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isAnalyzed());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Field$Index_isIndexed(t_Field$Index *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isIndexed());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Field$Index_omitNorms(t_Field$Index *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.omitNorms());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Field$Index_toIndex(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              jboolean a0;
              jboolean a1;
              Field$Index result((jobject) NULL);

              if (!parseArgs(args, "ZZ", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::Field$Index::toIndex(a0, a1));
                return t_Field$Index::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              jboolean a0;
              jboolean a1;
              jboolean a2;
              Field$Index result((jobject) NULL);

              if (!parseArgs(args, "ZZZ", &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::Field$Index::toIndex(a0, a1, a2));
                return t_Field$Index::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "toIndex", args);
          return NULL;
        }

        static PyObject *t_Field$Index_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          Field$Index result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::Field$Index::valueOf(a0));
            return t_Field$Index::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_Field$Index_values(PyTypeObject *type)
        {
          JArray< Field$Index > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::document::Field$Index::values());
          return JArray<jobject>(result.this$).wrap(t_Field$Index::wrap_jobject);
        }
        static PyObject *t_Field$Index_get__parameters_(t_Field$Index *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_Field$Index_get__analyzed(t_Field$Index *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isAnalyzed());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_Field$Index_get__indexed(t_Field$Index *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isIndexed());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/FilterBuilder.h"
#include "org/apache/lucene/search/Filter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {

          ::java::lang::Class *FilterBuilder::class$ = NULL;
          jmethodID *FilterBuilder::mids$ = NULL;
          bool FilterBuilder::live$ = false;

          jclass FilterBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/FilterBuilder");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          static PyObject *t_FilterBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FilterBuilder_instance_(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_FilterBuilder__methods_[] = {
            DECLARE_METHOD(t_FilterBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FilterBuilder, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FilterBuilder, t_FilterBuilder, ::java::lang::Object, FilterBuilder, abstract_init, 0, 0, 0, 0, 0);

          void t_FilterBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(FilterBuilder), module, "FilterBuilder", 0);
          }

          void t_FilterBuilder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FilterBuilder).tp_dict, "class_", make_descriptor(FilterBuilder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FilterBuilder).tp_dict, "wrapfn_", make_descriptor(t_FilterBuilder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FilterBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FilterBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FilterBuilder::initializeClass, 1)))
              return NULL;
            return t_FilterBuilder::wrap_Object(FilterBuilder(((t_FilterBuilder *) arg)->object.this$));
          }
          static PyObject *t_FilterBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FilterBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/AfterEffectB.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *AfterEffectB::class$ = NULL;
          jmethodID *AfterEffectB::mids$ = NULL;
          bool AfterEffectB::live$ = false;

          jclass AfterEffectB::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/AfterEffectB");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_05d4946a] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;F)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_score_076760a9] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;F)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AfterEffectB::AfterEffectB() : ::org::apache::lucene::search::similarities::AfterEffect(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::Explanation AfterEffectB::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_05d4946a], a0.this$, a1));
          }

          jfloat AfterEffectB::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_076760a9], a0.this$, a1);
          }

          ::java::lang::String AfterEffectB::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_AfterEffectB_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AfterEffectB_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AfterEffectB_init_(t_AfterEffectB *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AfterEffectB_explain(t_AfterEffectB *self, PyObject *args);
          static PyObject *t_AfterEffectB_score(t_AfterEffectB *self, PyObject *args);
          static PyObject *t_AfterEffectB_toString(t_AfterEffectB *self, PyObject *args);

          static PyMethodDef t_AfterEffectB__methods_[] = {
            DECLARE_METHOD(t_AfterEffectB, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AfterEffectB, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AfterEffectB, explain, METH_VARARGS),
            DECLARE_METHOD(t_AfterEffectB, score, METH_VARARGS),
            DECLARE_METHOD(t_AfterEffectB, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AfterEffectB, t_AfterEffectB, ::org::apache::lucene::search::similarities::AfterEffect, AfterEffectB, t_AfterEffectB_init_, 0, 0, 0, 0, 0);

          void t_AfterEffectB::install(PyObject *module)
          {
            installType(&PY_TYPE(AfterEffectB), module, "AfterEffectB", 0);
          }

          void t_AfterEffectB::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AfterEffectB).tp_dict, "class_", make_descriptor(AfterEffectB::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AfterEffectB).tp_dict, "wrapfn_", make_descriptor(t_AfterEffectB::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AfterEffectB).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AfterEffectB_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AfterEffectB::initializeClass, 1)))
              return NULL;
            return t_AfterEffectB::wrap_Object(AfterEffectB(((t_AfterEffectB *) arg)->object.this$));
          }
          static PyObject *t_AfterEffectB_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AfterEffectB::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AfterEffectB_init_(t_AfterEffectB *self, PyObject *args, PyObject *kwds)
          {
            AfterEffectB object((jobject) NULL);

            INT_CALL(object = AfterEffectB());
            self->object = object;

            return 0;
          }

          static PyObject *t_AfterEffectB_explain(t_AfterEffectB *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.explain(a0, a1));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(AfterEffectB), (PyObject *) self, "explain", args, 2);
          }

          static PyObject *t_AfterEffectB_score(t_AfterEffectB *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat result;

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(AfterEffectB), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_AfterEffectB_toString(t_AfterEffectB *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(AfterEffectB), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/collation/tokenattributes/CollatedTermAttributeImpl.h"
#include "java/text/Collator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace collation {
        namespace tokenattributes {

          ::java::lang::Class *CollatedTermAttributeImpl::class$ = NULL;
          jmethodID *CollatedTermAttributeImpl::mids$ = NULL;
          bool CollatedTermAttributeImpl::live$ = false;

          jclass CollatedTermAttributeImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/collation/tokenattributes/CollatedTermAttributeImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c5e10a9c] = env->getMethodID(cls, "<init>", "(Ljava/text/Collator;)V");
              mids$[mid_fillBytesRef_54c6a166] = env->getMethodID(cls, "fillBytesRef", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CollatedTermAttributeImpl::CollatedTermAttributeImpl(const ::java::text::Collator & a0) : ::org::apache::lucene::analysis::tokenattributes::CharTermAttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_c5e10a9c, a0.this$)) {}

          void CollatedTermAttributeImpl::fillBytesRef() const
          {
            env->callVoidMethod(this$, mids$[mid_fillBytesRef_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace collation {
        namespace tokenattributes {
          static PyObject *t_CollatedTermAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CollatedTermAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CollatedTermAttributeImpl_init_(t_CollatedTermAttributeImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CollatedTermAttributeImpl_fillBytesRef(t_CollatedTermAttributeImpl *self, PyObject *args);

          static PyMethodDef t_CollatedTermAttributeImpl__methods_[] = {
            DECLARE_METHOD(t_CollatedTermAttributeImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CollatedTermAttributeImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CollatedTermAttributeImpl, fillBytesRef, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CollatedTermAttributeImpl, t_CollatedTermAttributeImpl, ::org::apache::lucene::analysis::tokenattributes::CharTermAttributeImpl, CollatedTermAttributeImpl, t_CollatedTermAttributeImpl_init_, 0, 0, 0, 0, 0);

          void t_CollatedTermAttributeImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(CollatedTermAttributeImpl), module, "CollatedTermAttributeImpl", 0);
          }

          void t_CollatedTermAttributeImpl::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CollatedTermAttributeImpl).tp_dict, "class_", make_descriptor(CollatedTermAttributeImpl::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CollatedTermAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_CollatedTermAttributeImpl::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CollatedTermAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CollatedTermAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CollatedTermAttributeImpl::initializeClass, 1)))
              return NULL;
            return t_CollatedTermAttributeImpl::wrap_Object(CollatedTermAttributeImpl(((t_CollatedTermAttributeImpl *) arg)->object.this$));
          }
          static PyObject *t_CollatedTermAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CollatedTermAttributeImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CollatedTermAttributeImpl_init_(t_CollatedTermAttributeImpl *self, PyObject *args, PyObject *kwds)
          {
            ::java::text::Collator a0((jobject) NULL);
            CollatedTermAttributeImpl object((jobject) NULL);

            if (!parseArgs(args, "k", ::java::text::Collator::initializeClass, &a0))
            {
              INT_CALL(object = CollatedTermAttributeImpl(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CollatedTermAttributeImpl_fillBytesRef(t_CollatedTermAttributeImpl *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.fillBytesRef());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CollatedTermAttributeImpl), (PyObject *) self, "fillBytesRef", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/Util$TopResults.h"
#include "org/apache/lucene/util/fst/Util$Result.h"
#include "java/lang/Iterable.h"
#include "java/util/List.h"
#include "java/util/Iterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *Util$TopResults::class$ = NULL;
          jmethodID *Util$TopResults::mids$ = NULL;
          jfieldID *Util$TopResults::fids$ = NULL;
          bool Util$TopResults::live$ = false;

          jclass Util$TopResults::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/Util$TopResults");

              mids$ = new jmethodID[max_mid];
              mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_isComplete] = env->getFieldID(cls, "isComplete", "Z");
              fids$[fid_topN] = env->getFieldID(cls, "topN", "Ljava/util/List;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::util::Iterator Util$TopResults::iterator() const
          {
            return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
          }

          jboolean Util$TopResults::_get_isComplete() const
          {
            return env->getBooleanField(this$, fids$[fid_isComplete]);
          }

          ::java::util::List Util$TopResults::_get_topN() const
          {
            return ::java::util::List(env->getObjectField(this$, fids$[fid_topN]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_Util$TopResults_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Util$TopResults_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Util$TopResults_of_(t_Util$TopResults *self, PyObject *args);
          static PyObject *t_Util$TopResults_iterator(t_Util$TopResults *self);
          static PyObject *t_Util$TopResults_get__isComplete(t_Util$TopResults *self, void *data);
          static PyObject *t_Util$TopResults_get__topN(t_Util$TopResults *self, void *data);

          static PyObject *t_Util$TopResults_get__parameters_(t_Util$TopResults *self, void *data);
          static PyGetSetDef t_Util$TopResults__fields_[] = {
            DECLARE_GET_FIELD(t_Util$TopResults, isComplete),
            DECLARE_GET_FIELD(t_Util$TopResults, topN),
            DECLARE_GET_FIELD(t_Util$TopResults, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Util$TopResults__methods_[] = {
            DECLARE_METHOD(t_Util$TopResults, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Util$TopResults, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Util$TopResults, of_, METH_VARARGS),
            DECLARE_METHOD(t_Util$TopResults, iterator, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Util$TopResults, t_Util$TopResults, ::java::lang::Object, Util$TopResults, abstract_init, ((PyObject *(*)(t_Util$TopResults *)) get_generic_iterator< t_Util$TopResults >), 0, t_Util$TopResults__fields_, 0, 0);
          PyObject *t_Util$TopResults::wrap_Object(const Util$TopResults& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Util$TopResults::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Util$TopResults *self = (t_Util$TopResults *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_Util$TopResults::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Util$TopResults::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Util$TopResults *self = (t_Util$TopResults *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_Util$TopResults::install(PyObject *module)
          {
            installType(&PY_TYPE(Util$TopResults), module, "Util$TopResults", 0);
          }

          void t_Util$TopResults::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Util$TopResults).tp_dict, "class_", make_descriptor(Util$TopResults::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Util$TopResults).tp_dict, "wrapfn_", make_descriptor(t_Util$TopResults::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Util$TopResults).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Util$TopResults_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Util$TopResults::initializeClass, 1)))
              return NULL;
            return t_Util$TopResults::wrap_Object(Util$TopResults(((t_Util$TopResults *) arg)->object.this$));
          }
          static PyObject *t_Util$TopResults_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Util$TopResults::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Util$TopResults_of_(t_Util$TopResults *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_Util$TopResults_iterator(t_Util$TopResults *self)
          {
            ::java::util::Iterator result((jobject) NULL);
            OBJ_CALL(result = self->object.iterator());
            return ::java::util::t_Iterator::wrap_Object(result);
          }
          static PyObject *t_Util$TopResults_get__parameters_(t_Util$TopResults *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_Util$TopResults_get__isComplete(t_Util$TopResults *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object._get_isComplete());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_Util$TopResults_get__topN(t_Util$TopResults *self, void *data)
          {
            ::java::util::List value((jobject) NULL);
            OBJ_CALL(value = self->object._get_topN());
            return ::java::util::t_List::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CheckIndex.h"
#include "org/apache/lucene/index/CheckIndex$Status$StoredFieldStatus.h"
#include "java/io/PrintStream.h"
#include "org/apache/lucene/index/CheckIndex$Status$TermIndexStatus.h"
#include "org/apache/lucene/index/CheckIndex$Status$TermVectorStatus.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "java/lang/InterruptedException.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/CheckIndex$Status$DocValuesStatus.h"
#include "org/apache/lucene/index/CheckIndex$Status$FieldNormStatus.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/CheckIndex$Status.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CheckIndex::class$ = NULL;
        jmethodID *CheckIndex::mids$ = NULL;
        bool CheckIndex::live$ = false;

        jclass CheckIndex::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CheckIndex");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_2e261ef2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_checkIndex_91a82b33] = env->getMethodID(cls, "checkIndex", "()Lorg/apache/lucene/index/CheckIndex$Status;");
            mids$[mid_checkIndex_a75717b2] = env->getMethodID(cls, "checkIndex", "(Ljava/util/List;)Lorg/apache/lucene/index/CheckIndex$Status;");
            mids$[mid_fixIndex_a89756fe] = env->getMethodID(cls, "fixIndex", "(Lorg/apache/lucene/index/CheckIndex$Status;)V");
            mids$[mid_getCrossCheckTermVectors_54c6a16a] = env->getMethodID(cls, "getCrossCheckTermVectors", "()Z");
            mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");
            mids$[mid_setCrossCheckTermVectors_bb0c767f] = env->getMethodID(cls, "setCrossCheckTermVectors", "(Z)V");
            mids$[mid_setInfoStream_1b7c898b] = env->getMethodID(cls, "setInfoStream", "(Ljava/io/PrintStream;)V");
            mids$[mid_setInfoStream_ee355e40] = env->getMethodID(cls, "setInfoStream", "(Ljava/io/PrintStream;Z)V");
            mids$[mid_testDocValues_11f384a5] = env->getStaticMethodID(cls, "testDocValues", "(Lorg/apache/lucene/index/AtomicReader;Ljava/io/PrintStream;)Lorg/apache/lucene/index/CheckIndex$Status$DocValuesStatus;");
            mids$[mid_testFieldNorms_3488ebf7] = env->getStaticMethodID(cls, "testFieldNorms", "(Lorg/apache/lucene/index/AtomicReader;Ljava/io/PrintStream;)Lorg/apache/lucene/index/CheckIndex$Status$FieldNormStatus;");
            mids$[mid_testPostings_2a988783] = env->getStaticMethodID(cls, "testPostings", "(Lorg/apache/lucene/index/AtomicReader;Ljava/io/PrintStream;)Lorg/apache/lucene/index/CheckIndex$Status$TermIndexStatus;");
            mids$[mid_testPostings_9363927a] = env->getStaticMethodID(cls, "testPostings", "(Lorg/apache/lucene/index/AtomicReader;Ljava/io/PrintStream;Z)Lorg/apache/lucene/index/CheckIndex$Status$TermIndexStatus;");
            mids$[mid_testStoredFields_1ec0767a] = env->getStaticMethodID(cls, "testStoredFields", "(Lorg/apache/lucene/index/AtomicReader;Ljava/io/PrintStream;)Lorg/apache/lucene/index/CheckIndex$Status$StoredFieldStatus;");
            mids$[mid_testTermVectors_f049a3c1] = env->getStaticMethodID(cls, "testTermVectors", "(Lorg/apache/lucene/index/AtomicReader;Ljava/io/PrintStream;)Lorg/apache/lucene/index/CheckIndex$Status$TermVectorStatus;");
            mids$[mid_testTermVectors_438dd273] = env->getStaticMethodID(cls, "testTermVectors", "(Lorg/apache/lucene/index/AtomicReader;Ljava/io/PrintStream;ZZ)Lorg/apache/lucene/index/CheckIndex$Status$TermVectorStatus;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CheckIndex::CheckIndex(const ::org::apache::lucene::store::Directory & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_2e261ef2, a0.this$)) {}

        ::org::apache::lucene::index::CheckIndex$Status CheckIndex::checkIndex() const
        {
          return ::org::apache::lucene::index::CheckIndex$Status(env->callObjectMethod(this$, mids$[mid_checkIndex_91a82b33]));
        }

        ::org::apache::lucene::index::CheckIndex$Status CheckIndex::checkIndex(const ::java::util::List & a0) const
        {
          return ::org::apache::lucene::index::CheckIndex$Status(env->callObjectMethod(this$, mids$[mid_checkIndex_a75717b2], a0.this$));
        }

        void CheckIndex::fixIndex(const ::org::apache::lucene::index::CheckIndex$Status & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_fixIndex_a89756fe], a0.this$);
        }

        jboolean CheckIndex::getCrossCheckTermVectors() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getCrossCheckTermVectors_54c6a16a]);
        }

        void CheckIndex::main(const JArray< ::java::lang::String > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
        }

        void CheckIndex::setCrossCheckTermVectors(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setCrossCheckTermVectors_bb0c767f], a0);
        }

        void CheckIndex::setInfoStream(const ::java::io::PrintStream & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setInfoStream_1b7c898b], a0.this$);
        }

        void CheckIndex::setInfoStream(const ::java::io::PrintStream & a0, jboolean a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setInfoStream_ee355e40], a0.this$, a1);
        }

        ::org::apache::lucene::index::CheckIndex$Status$DocValuesStatus CheckIndex::testDocValues(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::io::PrintStream & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::CheckIndex$Status$DocValuesStatus(env->callStaticObjectMethod(cls, mids$[mid_testDocValues_11f384a5], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::CheckIndex$Status$FieldNormStatus CheckIndex::testFieldNorms(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::io::PrintStream & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::CheckIndex$Status$FieldNormStatus(env->callStaticObjectMethod(cls, mids$[mid_testFieldNorms_3488ebf7], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus CheckIndex::testPostings(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::io::PrintStream & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus(env->callStaticObjectMethod(cls, mids$[mid_testPostings_2a988783], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus CheckIndex::testPostings(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::io::PrintStream & a1, jboolean a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus(env->callStaticObjectMethod(cls, mids$[mid_testPostings_9363927a], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::index::CheckIndex$Status$StoredFieldStatus CheckIndex::testStoredFields(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::io::PrintStream & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::CheckIndex$Status$StoredFieldStatus(env->callStaticObjectMethod(cls, mids$[mid_testStoredFields_1ec0767a], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus CheckIndex::testTermVectors(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::io::PrintStream & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus(env->callStaticObjectMethod(cls, mids$[mid_testTermVectors_f049a3c1], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus CheckIndex::testTermVectors(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::io::PrintStream & a1, jboolean a2, jboolean a3)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus(env->callStaticObjectMethod(cls, mids$[mid_testTermVectors_438dd273], a0.this$, a1.this$, a2, a3));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CheckIndex_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CheckIndex_init_(t_CheckIndex *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CheckIndex_checkIndex(t_CheckIndex *self, PyObject *args);
        static PyObject *t_CheckIndex_fixIndex(t_CheckIndex *self, PyObject *arg);
        static PyObject *t_CheckIndex_getCrossCheckTermVectors(t_CheckIndex *self);
        static PyObject *t_CheckIndex_main(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex_setCrossCheckTermVectors(t_CheckIndex *self, PyObject *arg);
        static PyObject *t_CheckIndex_setInfoStream(t_CheckIndex *self, PyObject *args);
        static PyObject *t_CheckIndex_testDocValues(PyTypeObject *type, PyObject *args);
        static PyObject *t_CheckIndex_testFieldNorms(PyTypeObject *type, PyObject *args);
        static PyObject *t_CheckIndex_testPostings(PyTypeObject *type, PyObject *args);
        static PyObject *t_CheckIndex_testStoredFields(PyTypeObject *type, PyObject *args);
        static PyObject *t_CheckIndex_testTermVectors(PyTypeObject *type, PyObject *args);
        static PyObject *t_CheckIndex_get__crossCheckTermVectors(t_CheckIndex *self, void *data);
        static int t_CheckIndex_set__crossCheckTermVectors(t_CheckIndex *self, PyObject *arg, void *data);
        static int t_CheckIndex_set__infoStream(t_CheckIndex *self, PyObject *arg, void *data);
        static PyGetSetDef t_CheckIndex__fields_[] = {
          DECLARE_GETSET_FIELD(t_CheckIndex, crossCheckTermVectors),
          DECLARE_SET_FIELD(t_CheckIndex, infoStream),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CheckIndex__methods_[] = {
          DECLARE_METHOD(t_CheckIndex, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex, checkIndex, METH_VARARGS),
          DECLARE_METHOD(t_CheckIndex, fixIndex, METH_O),
          DECLARE_METHOD(t_CheckIndex, getCrossCheckTermVectors, METH_NOARGS),
          DECLARE_METHOD(t_CheckIndex, main, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex, setCrossCheckTermVectors, METH_O),
          DECLARE_METHOD(t_CheckIndex, setInfoStream, METH_VARARGS),
          DECLARE_METHOD(t_CheckIndex, testDocValues, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex, testFieldNorms, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex, testPostings, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex, testStoredFields, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex, testTermVectors, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CheckIndex, t_CheckIndex, ::java::lang::Object, CheckIndex, t_CheckIndex_init_, 0, 0, t_CheckIndex__fields_, 0, 0);

        void t_CheckIndex::install(PyObject *module)
        {
          installType(&PY_TYPE(CheckIndex), module, "CheckIndex", 0);
          PyDict_SetItemString(PY_TYPE(CheckIndex).tp_dict, "Status", make_descriptor(&PY_TYPE(CheckIndex$Status)));
        }

        void t_CheckIndex::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CheckIndex).tp_dict, "class_", make_descriptor(CheckIndex::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CheckIndex).tp_dict, "wrapfn_", make_descriptor(t_CheckIndex::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CheckIndex).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CheckIndex_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CheckIndex::initializeClass, 1)))
            return NULL;
          return t_CheckIndex::wrap_Object(CheckIndex(((t_CheckIndex *) arg)->object.this$));
        }
        static PyObject *t_CheckIndex_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CheckIndex::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CheckIndex_init_(t_CheckIndex *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          CheckIndex object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
          {
            INT_CALL(object = CheckIndex(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CheckIndex_checkIndex(t_CheckIndex *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ::org::apache::lucene::index::CheckIndex$Status result((jobject) NULL);
              OBJ_CALL(result = self->object.checkIndex());
              return ::org::apache::lucene::index::t_CheckIndex$Status::wrap_Object(result);
            }
            break;
           case 1:
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::CheckIndex$Status result((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
              {
                OBJ_CALL(result = self->object.checkIndex(a0));
                return ::org::apache::lucene::index::t_CheckIndex$Status::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "checkIndex", args);
          return NULL;
        }

        static PyObject *t_CheckIndex_fixIndex(t_CheckIndex *self, PyObject *arg)
        {
          ::org::apache::lucene::index::CheckIndex$Status a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::CheckIndex$Status::initializeClass, &a0))
          {
            OBJ_CALL(self->object.fixIndex(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "fixIndex", arg);
          return NULL;
        }

        static PyObject *t_CheckIndex_getCrossCheckTermVectors(t_CheckIndex *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getCrossCheckTermVectors());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_CheckIndex_main(PyTypeObject *type, PyObject *arg)
        {
          JArray< ::java::lang::String > a0((jobject) NULL);

          if (!parseArg(arg, "[s", &a0))
          {
            OBJ_CALL(::org::apache::lucene::index::CheckIndex::main(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "main", arg);
          return NULL;
        }

        static PyObject *t_CheckIndex_setCrossCheckTermVectors(t_CheckIndex *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setCrossCheckTermVectors(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setCrossCheckTermVectors", arg);
          return NULL;
        }

        static PyObject *t_CheckIndex_setInfoStream(t_CheckIndex *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::io::PrintStream a0((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::PrintStream::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setInfoStream(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::java::io::PrintStream a0((jobject) NULL);
              jboolean a1;

              if (!parseArgs(args, "kZ", ::java::io::PrintStream::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.setInfoStream(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "setInfoStream", args);
          return NULL;
        }

        static PyObject *t_CheckIndex_testDocValues(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::java::io::PrintStream a1((jobject) NULL);
          ::org::apache::lucene::index::CheckIndex$Status$DocValuesStatus result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReader::initializeClass, ::java::io::PrintStream::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::CheckIndex::testDocValues(a0, a1));
            return ::org::apache::lucene::index::t_CheckIndex$Status$DocValuesStatus::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "testDocValues", args);
          return NULL;
        }

        static PyObject *t_CheckIndex_testFieldNorms(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::java::io::PrintStream a1((jobject) NULL);
          ::org::apache::lucene::index::CheckIndex$Status$FieldNormStatus result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReader::initializeClass, ::java::io::PrintStream::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::CheckIndex::testFieldNorms(a0, a1));
            return ::org::apache::lucene::index::t_CheckIndex$Status$FieldNormStatus::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "testFieldNorms", args);
          return NULL;
        }

        static PyObject *t_CheckIndex_testPostings(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::io::PrintStream a1((jobject) NULL);
              ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus result((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReader::initializeClass, ::java::io::PrintStream::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::CheckIndex::testPostings(a0, a1));
                return ::org::apache::lucene::index::t_CheckIndex$Status$TermIndexStatus::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::io::PrintStream a1((jobject) NULL);
              jboolean a2;
              ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus result((jobject) NULL);

              if (!parseArgs(args, "kkZ", ::org::apache::lucene::index::AtomicReader::initializeClass, ::java::io::PrintStream::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::CheckIndex::testPostings(a0, a1, a2));
                return ::org::apache::lucene::index::t_CheckIndex$Status$TermIndexStatus::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "testPostings", args);
          return NULL;
        }

        static PyObject *t_CheckIndex_testStoredFields(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::java::io::PrintStream a1((jobject) NULL);
          ::org::apache::lucene::index::CheckIndex$Status$StoredFieldStatus result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReader::initializeClass, ::java::io::PrintStream::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::CheckIndex::testStoredFields(a0, a1));
            return ::org::apache::lucene::index::t_CheckIndex$Status$StoredFieldStatus::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "testStoredFields", args);
          return NULL;
        }

        static PyObject *t_CheckIndex_testTermVectors(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::io::PrintStream a1((jobject) NULL);
              ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus result((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReader::initializeClass, ::java::io::PrintStream::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::CheckIndex::testTermVectors(a0, a1));
                return ::org::apache::lucene::index::t_CheckIndex$Status$TermVectorStatus::wrap_Object(result);
              }
            }
            break;
           case 4:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::io::PrintStream a1((jobject) NULL);
              jboolean a2;
              jboolean a3;
              ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus result((jobject) NULL);

              if (!parseArgs(args, "kkZZ", ::org::apache::lucene::index::AtomicReader::initializeClass, ::java::io::PrintStream::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::CheckIndex::testTermVectors(a0, a1, a2, a3));
                return ::org::apache::lucene::index::t_CheckIndex$Status$TermVectorStatus::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "testTermVectors", args);
          return NULL;
        }

        static PyObject *t_CheckIndex_get__crossCheckTermVectors(t_CheckIndex *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getCrossCheckTermVectors());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex_set__crossCheckTermVectors(t_CheckIndex *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setCrossCheckTermVectors(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "crossCheckTermVectors", arg);
          return -1;
        }

        static int t_CheckIndex_set__infoStream(t_CheckIndex *self, PyObject *arg, void *data)
        {
          {
            ::java::io::PrintStream value((jobject) NULL);
            if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &value))
            {
              INT_CALL(self->object.setInfoStream(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "infoStream", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/en/PorterStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {

          ::java::lang::Class *PorterStemFilter::class$ = NULL;
          jmethodID *PorterStemFilter::mids$ = NULL;
          bool PorterStemFilter::live$ = false;

          jclass PorterStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/en/PorterStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PorterStemFilter::PorterStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean PorterStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {
          static PyObject *t_PorterStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PorterStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PorterStemFilter_init_(t_PorterStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PorterStemFilter_incrementToken(t_PorterStemFilter *self, PyObject *args);

          static PyMethodDef t_PorterStemFilter__methods_[] = {
            DECLARE_METHOD(t_PorterStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PorterStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PorterStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PorterStemFilter, t_PorterStemFilter, ::org::apache::lucene::analysis::TokenFilter, PorterStemFilter, t_PorterStemFilter_init_, 0, 0, 0, 0, 0);

          void t_PorterStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PorterStemFilter), module, "PorterStemFilter", 0);
          }

          void t_PorterStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PorterStemFilter).tp_dict, "class_", make_descriptor(PorterStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PorterStemFilter).tp_dict, "wrapfn_", make_descriptor(t_PorterStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PorterStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PorterStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PorterStemFilter::initializeClass, 1)))
              return NULL;
            return t_PorterStemFilter::wrap_Object(PorterStemFilter(((t_PorterStemFilter *) arg)->object.this$));
          }
          static PyObject *t_PorterStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PorterStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PorterStemFilter_init_(t_PorterStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            PorterStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = PorterStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PorterStemFilter_incrementToken(t_PorterStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PorterStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/queryparser/classic/PythonQueryParser.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/classic/ParseException.h"
#include "org/apache/lucene/queryparser/classic/CharStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/util/List.h"
#include "java/lang/Throwable.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *PythonQueryParser::class$ = NULL;
          jmethodID *PythonQueryParser::mids$ = NULL;
          bool PythonQueryParser::live$ = false;

          jclass PythonQueryParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/pylucene/queryparser/classic/PythonQueryParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_24bde9d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/classic/CharStream;)V");
              mids$[mid_init$_504c192d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
              mids$[mid_getBooleanQuery_3d190f1c] = env->getMethodID(cls, "getBooleanQuery", "(Ljava/util/List;Z)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_bd696f55] = env->getMethodID(cls, "getFieldQuery", "(Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_c7c8d9a8] = env->getMethodID(cls, "getFieldQuery", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_quoted_bd696f55] = env->getMethodID(cls, "getFieldQuery_quoted", "(Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_quoted_super_bd696f55] = env->getMethodID(cls, "getFieldQuery_quoted_super", "(Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_slop_c7c8d9a8] = env->getMethodID(cls, "getFieldQuery_slop", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_slop_super_c7c8d9a8] = env->getMethodID(cls, "getFieldQuery_slop_super", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFuzzyQuery_45995161] = env->getMethodID(cls, "getFuzzyQuery", "(Ljava/lang/String;Ljava/lang/String;F)Lorg/apache/lucene/search/Query;");
              mids$[mid_getPrefixQuery_38d6e77e] = env->getMethodID(cls, "getPrefixQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_getRangeQuery_75fd45b6] = env->getMethodID(cls, "getRangeQuery", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/Query;");
              mids$[mid_getWildcardQuery_38d6e77e] = env->getMethodID(cls, "getWildcardQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
              mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
              mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PythonQueryParser::PythonQueryParser(const ::org::apache::lucene::queryparser::classic::CharStream & a0) : ::org::apache::lucene::queryparser::classic::QueryParser(env->newObject(initializeClass, &mids$, mid_init$_24bde9d3, a0.this$)) {}

          PythonQueryParser::PythonQueryParser(const ::org::apache::lucene::util::Version & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer & a2) : ::org::apache::lucene::queryparser::classic::QueryParser(env->newObject(initializeClass, &mids$, mid_init$_504c192d, a0.this$, a1.this$, a2.this$)) {}

          void PythonQueryParser::finalize() const
          {
            env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
          }

          ::org::apache::lucene::search::Query PythonQueryParser::getBooleanQuery(const ::java::util::List & a0, jboolean a1) const
          {
            return ::org::apache::lucene::search::Query(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::queryparser::classic::QueryParser::class$->this$, ::org::apache::lucene::queryparser::classic::QueryParserBase::mids$[::org::apache::lucene::queryparser::classic::QueryParserBase::mid_getBooleanQuery_3d190f1c], a0.this$, a1));
          }

          ::org::apache::lucene::search::Query PythonQueryParser::getFieldQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, jboolean a2) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getFieldQuery_bd696f55], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::search::Query PythonQueryParser::getFieldQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, jint a2) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getFieldQuery_c7c8d9a8], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::search::Query PythonQueryParser::getFieldQuery_quoted_super(const ::java::lang::String & a0, const ::java::lang::String & a1, jboolean a2) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getFieldQuery_quoted_super_bd696f55], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::search::Query PythonQueryParser::getFieldQuery_slop_super(const ::java::lang::String & a0, const ::java::lang::String & a1, jint a2) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getFieldQuery_slop_super_c7c8d9a8], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::search::Query PythonQueryParser::getFuzzyQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, jfloat a2) const
          {
            return ::org::apache::lucene::search::Query(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::queryparser::classic::QueryParser::class$->this$, ::org::apache::lucene::queryparser::classic::QueryParserBase::mids$[::org::apache::lucene::queryparser::classic::QueryParserBase::mid_getFuzzyQuery_45995161], a0.this$, a1.this$, a2));
          }

          ::org::apache::lucene::search::Query PythonQueryParser::getPrefixQuery(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return ::org::apache::lucene::search::Query(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::queryparser::classic::QueryParser::class$->this$, ::org::apache::lucene::queryparser::classic::QueryParserBase::mids$[::org::apache::lucene::queryparser::classic::QueryParserBase::mid_getPrefixQuery_38d6e77e], a0.this$, a1.this$));
          }

          ::org::apache::lucene::search::Query PythonQueryParser::getRangeQuery(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3, jboolean a4) const
          {
            return ::org::apache::lucene::search::Query(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::queryparser::classic::QueryParser::class$->this$, ::org::apache::lucene::queryparser::classic::QueryParserBase::mids$[::org::apache::lucene::queryparser::classic::QueryParserBase::mid_getRangeQuery_75fd45b6], a0.this$, a1.this$, a2.this$, a3, a4));
          }

          ::org::apache::lucene::search::Query PythonQueryParser::getWildcardQuery(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return ::org::apache::lucene::search::Query(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::queryparser::classic::QueryParser::class$->this$, ::org::apache::lucene::queryparser::classic::QueryParserBase::mids$[::org::apache::lucene::queryparser::classic::QueryParserBase::mid_getWildcardQuery_38d6e77e], a0.this$, a1.this$));
          }

          jlong PythonQueryParser::pythonExtension() const
          {
            return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
          }

          void PythonQueryParser::pythonExtension(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_PythonQueryParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PythonQueryParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PythonQueryParser_init_(t_PythonQueryParser *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PythonQueryParser_finalize(t_PythonQueryParser *self);
          static PyObject *t_PythonQueryParser_getBooleanQuery(t_PythonQueryParser *self, PyObject *args);
          static PyObject *t_PythonQueryParser_getFieldQuery(t_PythonQueryParser *self, PyObject *args);
          static PyObject *t_PythonQueryParser_getFieldQuery_quoted_super(t_PythonQueryParser *self, PyObject *args);
          static PyObject *t_PythonQueryParser_getFieldQuery_slop_super(t_PythonQueryParser *self, PyObject *args);
          static PyObject *t_PythonQueryParser_getFuzzyQuery(t_PythonQueryParser *self, PyObject *args);
          static PyObject *t_PythonQueryParser_getPrefixQuery(t_PythonQueryParser *self, PyObject *args);
          static PyObject *t_PythonQueryParser_getRangeQuery(t_PythonQueryParser *self, PyObject *args);
          static PyObject *t_PythonQueryParser_getWildcardQuery(t_PythonQueryParser *self, PyObject *args);
          static PyObject *t_PythonQueryParser_pythonExtension(t_PythonQueryParser *self, PyObject *args);
          static jobject JNICALL t_PythonQueryParser_getBooleanQuery0(JNIEnv *jenv, jobject jobj, jobject a0, jboolean a1);
          static jobject JNICALL t_PythonQueryParser_getFieldQuery_quoted1(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jboolean a2);
          static jobject JNICALL t_PythonQueryParser_getFieldQuery_slop2(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jint a2);
          static jobject JNICALL t_PythonQueryParser_getFuzzyQuery3(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jfloat a2);
          static jobject JNICALL t_PythonQueryParser_getPrefixQuery4(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1);
          static jobject JNICALL t_PythonQueryParser_getRangeQuery5(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jobject a2, jboolean a3, jboolean a4);
          static jobject JNICALL t_PythonQueryParser_getWildcardQuery6(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1);
          static void JNICALL t_PythonQueryParser_pythonDecRef7(JNIEnv *jenv, jobject jobj);
          static PyObject *t_PythonQueryParser_get__self(t_PythonQueryParser *self, void *data);
          static PyGetSetDef t_PythonQueryParser__fields_[] = {
            DECLARE_GET_FIELD(t_PythonQueryParser, self),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PythonQueryParser__methods_[] = {
            DECLARE_METHOD(t_PythonQueryParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonQueryParser, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonQueryParser, finalize, METH_NOARGS),
            DECLARE_METHOD(t_PythonQueryParser, getBooleanQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonQueryParser, getFieldQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonQueryParser, getFieldQuery_quoted_super, METH_VARARGS),
            DECLARE_METHOD(t_PythonQueryParser, getFieldQuery_slop_super, METH_VARARGS),
            DECLARE_METHOD(t_PythonQueryParser, getFuzzyQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonQueryParser, getPrefixQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonQueryParser, getRangeQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonQueryParser, getWildcardQuery, METH_VARARGS),
            DECLARE_METHOD(t_PythonQueryParser, pythonExtension, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PythonQueryParser, t_PythonQueryParser, ::org::apache::lucene::queryparser::classic::QueryParser, PythonQueryParser, t_PythonQueryParser_init_, 0, 0, t_PythonQueryParser__fields_, 0, 0);

          void t_PythonQueryParser::install(PyObject *module)
          {
            installType(&PY_TYPE(PythonQueryParser), module, "PythonQueryParser", 1);
          }

          void t_PythonQueryParser::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PythonQueryParser).tp_dict, "class_", make_descriptor(PythonQueryParser::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PythonQueryParser).tp_dict, "wrapfn_", make_descriptor(t_PythonQueryParser::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PythonQueryParser).tp_dict, "boxfn_", make_descriptor(boxObject));
            jclass cls = env->getClass(PythonQueryParser::initializeClass);
            JNINativeMethod methods[] = {
              { "getBooleanQuery", "(Ljava/util/List;Z)Lorg/apache/lucene/search/Query;", (void *) t_PythonQueryParser_getBooleanQuery0 },
              { "getFieldQuery_quoted", "(Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;", (void *) t_PythonQueryParser_getFieldQuery_quoted1 },
              { "getFieldQuery_slop", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;", (void *) t_PythonQueryParser_getFieldQuery_slop2 },
              { "getFuzzyQuery", "(Ljava/lang/String;Ljava/lang/String;F)Lorg/apache/lucene/search/Query;", (void *) t_PythonQueryParser_getFuzzyQuery3 },
              { "getPrefixQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;", (void *) t_PythonQueryParser_getPrefixQuery4 },
              { "getRangeQuery", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/Query;", (void *) t_PythonQueryParser_getRangeQuery5 },
              { "getWildcardQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;", (void *) t_PythonQueryParser_getWildcardQuery6 },
              { "pythonDecRef", "()V", (void *) t_PythonQueryParser_pythonDecRef7 },
            };
            env->registerNatives(cls, methods, 8);
          }

          static PyObject *t_PythonQueryParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PythonQueryParser::initializeClass, 1)))
              return NULL;
            return t_PythonQueryParser::wrap_Object(PythonQueryParser(((t_PythonQueryParser *) arg)->object.this$));
          }
          static PyObject *t_PythonQueryParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PythonQueryParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PythonQueryParser_init_(t_PythonQueryParser *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::queryparser::classic::CharStream a0((jobject) NULL);
                PythonQueryParser object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::classic::CharStream::initializeClass, &a0))
                {
                  INT_CALL(object = PythonQueryParser(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                PythonQueryParser object((jobject) NULL);

                if (!parseArgs(args, "Ksk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = PythonQueryParser(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            Py_INCREF((PyObject *) self);
            self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

            return 0;
          }

          static PyObject *t_PythonQueryParser_finalize(t_PythonQueryParser *self)
          {
            OBJ_CALL(self->object.finalize());
            Py_RETURN_NONE;
          }

          static PyObject *t_PythonQueryParser_getBooleanQuery(t_PythonQueryParser *self, PyObject *args)
          {
            ::java::util::List a0((jobject) NULL);
            PyTypeObject **p0;
            jboolean a1;
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "KZ", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1))
            {
              OBJ_CALL(result = self->object.getBooleanQuery(a0, a1));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getBooleanQuery", args);
            return NULL;
          }

          static PyObject *t_PythonQueryParser_getFieldQuery(t_PythonQueryParser *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                jboolean a2;
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "ssZ", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.getFieldQuery(a0, a1, a2));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                jint a2;
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "ssI", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.getFieldQuery(a0, a1, a2));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getFieldQuery", args);
            return NULL;
          }

          static PyObject *t_PythonQueryParser_getFieldQuery_quoted_super(t_PythonQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jboolean a2;
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "ssZ", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getFieldQuery_quoted_super(a0, a1, a2));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getFieldQuery_quoted_super", args);
            return NULL;
          }

          static PyObject *t_PythonQueryParser_getFieldQuery_slop_super(t_PythonQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "ssI", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getFieldQuery_slop_super(a0, a1, a2));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getFieldQuery_slop_super", args);
            return NULL;
          }

          static PyObject *t_PythonQueryParser_getFuzzyQuery(t_PythonQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jfloat a2;
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "ssF", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getFuzzyQuery(a0, a1, a2));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getFuzzyQuery", args);
            return NULL;
          }

          static PyObject *t_PythonQueryParser_getPrefixQuery(t_PythonQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getPrefixQuery(a0, a1));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getPrefixQuery", args);
            return NULL;
          }

          static PyObject *t_PythonQueryParser_getRangeQuery(t_PythonQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            jboolean a3;
            jboolean a4;
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "sssZZ", &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.getRangeQuery(a0, a1, a2, a3, a4));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getRangeQuery", args);
            return NULL;
          }

          static PyObject *t_PythonQueryParser_getWildcardQuery(t_PythonQueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getWildcardQuery(a0, a1));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getWildcardQuery", args);
            return NULL;
          }

          static PyObject *t_PythonQueryParser_pythonExtension(t_PythonQueryParser *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jlong result;
                OBJ_CALL(result = self->object.pythonExtension());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
              break;
             case 1:
              {
                jlong a0;

                if (!parseArgs(args, "J", &a0))
                {
                  OBJ_CALL(self->object.pythonExtension(a0));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
            return NULL;
          }

          static jobject JNICALL t_PythonQueryParser_getBooleanQuery0(JNIEnv *jenv, jobject jobj, jobject a0, jboolean a1)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonQueryParser::mids$[PythonQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = ::java::util::t_List::wrap_Object(::java::util::List(a0));
            PyObject *o1 = (a1 ? Py_True : Py_False);
            PyObject *result = PyObject_CallMethod(obj, "getBooleanQuery", "OO", o0, o1);
            Py_DECREF(o0);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getBooleanQuery", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonQueryParser_getFieldQuery_quoted1(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jboolean a2)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonQueryParser::mids$[PythonQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *o2 = (a2 ? Py_True : Py_False);
            PyObject *result = PyObject_CallMethod(obj, "getFieldQuery_quoted", "OOO", o0, o1, o2);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getFieldQuery_quoted", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonQueryParser_getFieldQuery_slop2(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jint a2)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonQueryParser::mids$[PythonQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *result = PyObject_CallMethod(obj, "getFieldQuery_slop", "OOi", o0, o1, (int) a2);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getFieldQuery_slop", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonQueryParser_getFuzzyQuery3(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jfloat a2)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonQueryParser::mids$[PythonQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *result = PyObject_CallMethod(obj, "getFuzzyQuery", "OOf", o0, o1, (float) a2);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getFuzzyQuery", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonQueryParser_getPrefixQuery4(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonQueryParser::mids$[PythonQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *result = PyObject_CallMethod(obj, "getPrefixQuery", "OO", o0, o1);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getPrefixQuery", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonQueryParser_getRangeQuery5(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1, jobject a2, jboolean a3, jboolean a4)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonQueryParser::mids$[PythonQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *o2 = env->fromJString((jstring) a2, 0);
            PyObject *o3 = (a3 ? Py_True : Py_False);
            PyObject *o4 = (a4 ? Py_True : Py_False);
            PyObject *result = PyObject_CallMethod(obj, "getRangeQuery", "OOOOO", o0, o1, o2, o3, o4);
            Py_DECREF(o0);
            Py_DECREF(o1);
            Py_DECREF(o2);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getRangeQuery", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jobject JNICALL t_PythonQueryParser_getWildcardQuery6(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonQueryParser::mids$[PythonQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Query value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = env->fromJString((jstring) a1, 0);
            PyObject *result = PyObject_CallMethod(obj, "getWildcardQuery", "OO", o0, o1);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Query::initializeClass, &value))
            {
              throwTypeError("getWildcardQuery", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static void JNICALL t_PythonQueryParser_pythonDecRef7(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonQueryParser::mids$[PythonQueryParser::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              jenv->CallVoidMethod(jobj, PythonQueryParser::mids$[PythonQueryParser::mid_pythonExtension_0ee6df2f], (jlong) 0);
              env->finalizeObject(jenv, obj);
            }
          }

          static PyObject *t_PythonQueryParser_get__self(t_PythonQueryParser *self, void *data)
          {
            jlong ptr;
            OBJ_CALL(ptr = self->object.pythonExtension());
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              Py_INCREF(obj);
              return obj;
            }
            else
              Py_RETURN_NONE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/hyphenation/CharVector.h"
#include "java/lang/Cloneable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {

            ::java::lang::Class *CharVector::class$ = NULL;
            jmethodID *CharVector::mids$ = NULL;
            bool CharVector::live$ = false;

            jclass CharVector::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/hyphenation/CharVector");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_700e23d6] = env->getMethodID(cls, "<init>", "([C)V");
                mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
                mids$[mid_init$_ec6430f4] = env->getMethodID(cls, "<init>", "([CI)V");
                mids$[mid_alloc_39c7bd23] = env->getMethodID(cls, "alloc", "(I)I");
                mids$[mid_capacity_54c6a179] = env->getMethodID(cls, "capacity", "()I");
                mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
                mids$[mid_clone_023cce63] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/analysis/compound/hyphenation/CharVector;");
                mids$[mid_get_39c7bd29] = env->getMethodID(cls, "get", "(I)C");
                mids$[mid_getArray_dab10e7f] = env->getMethodID(cls, "getArray", "()[C");
                mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");
                mids$[mid_put_83eec158] = env->getMethodID(cls, "put", "(IC)V");
                mids$[mid_trimToSize_54c6a166] = env->getMethodID(cls, "trimToSize", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            CharVector::CharVector() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            CharVector::CharVector(const JArray< jchar > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_700e23d6, a0.this$)) {}

            CharVector::CharVector(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

            CharVector::CharVector(const JArray< jchar > & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ec6430f4, a0.this$, a1)) {}

            jint CharVector::alloc(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_alloc_39c7bd23], a0);
            }

            jint CharVector::capacity() const
            {
              return env->callIntMethod(this$, mids$[mid_capacity_54c6a179]);
            }

            void CharVector::clear() const
            {
              env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
            }

            CharVector CharVector::clone() const
            {
              return CharVector(env->callObjectMethod(this$, mids$[mid_clone_023cce63]));
            }

            jchar CharVector::get(jint a0) const
            {
              return env->callCharMethod(this$, mids$[mid_get_39c7bd29], a0);
            }

            JArray< jchar > CharVector::getArray() const
            {
              return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_getArray_dab10e7f]));
            }

            jint CharVector::length() const
            {
              return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
            }

            void CharVector::put(jint a0, jchar a1) const
            {
              env->callVoidMethod(this$, mids$[mid_put_83eec158], a0, a1);
            }

            void CharVector::trimToSize() const
            {
              env->callVoidMethod(this$, mids$[mid_trimToSize_54c6a166]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {
            static PyObject *t_CharVector_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CharVector_instance_(PyTypeObject *type, PyObject *arg);
            static int t_CharVector_init_(t_CharVector *self, PyObject *args, PyObject *kwds);
            static PyObject *t_CharVector_alloc(t_CharVector *self, PyObject *arg);
            static PyObject *t_CharVector_capacity(t_CharVector *self);
            static PyObject *t_CharVector_clear(t_CharVector *self);
            static PyObject *t_CharVector_clone(t_CharVector *self);
            static PyObject *t_CharVector_get(t_CharVector *self, PyObject *arg);
            static PyObject *t_CharVector_getArray(t_CharVector *self);
            static PyObject *t_CharVector_length(t_CharVector *self);
            static PyObject *t_CharVector_put(t_CharVector *self, PyObject *args);
            static PyObject *t_CharVector_trimToSize(t_CharVector *self);
            static PyObject *t_CharVector_get__array(t_CharVector *self, void *data);
            static PyGetSetDef t_CharVector__fields_[] = {
              DECLARE_GET_FIELD(t_CharVector, array),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_CharVector__methods_[] = {
              DECLARE_METHOD(t_CharVector, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CharVector, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CharVector, alloc, METH_O),
              DECLARE_METHOD(t_CharVector, capacity, METH_NOARGS),
              DECLARE_METHOD(t_CharVector, clear, METH_NOARGS),
              DECLARE_METHOD(t_CharVector, clone, METH_NOARGS),
              DECLARE_METHOD(t_CharVector, get, METH_O),
              DECLARE_METHOD(t_CharVector, getArray, METH_NOARGS),
              DECLARE_METHOD(t_CharVector, length, METH_NOARGS),
              DECLARE_METHOD(t_CharVector, put, METH_VARARGS),
              DECLARE_METHOD(t_CharVector, trimToSize, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(CharVector, t_CharVector, ::java::lang::Object, CharVector, t_CharVector_init_, 0, 0, t_CharVector__fields_, 0, 0);

            void t_CharVector::install(PyObject *module)
            {
              installType(&PY_TYPE(CharVector), module, "CharVector", 0);
            }

            void t_CharVector::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(CharVector).tp_dict, "class_", make_descriptor(CharVector::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(CharVector).tp_dict, "wrapfn_", make_descriptor(t_CharVector::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(CharVector).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_CharVector_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, CharVector::initializeClass, 1)))
                return NULL;
              return t_CharVector::wrap_Object(CharVector(((t_CharVector *) arg)->object.this$));
            }
            static PyObject *t_CharVector_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, CharVector::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_CharVector_init_(t_CharVector *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  CharVector object((jobject) NULL);

                  INT_CALL(object = CharVector());
                  self->object = object;
                  break;
                }
                goto err;
               case 1:
                {
                  JArray< jchar > a0((jobject) NULL);
                  CharVector object((jobject) NULL);

                  if (!parseArgs(args, "[C", &a0))
                  {
                    INT_CALL(object = CharVector(a0));
                    self->object = object;
                    break;
                  }
                }
                {
                  jint a0;
                  CharVector object((jobject) NULL);

                  if (!parseArgs(args, "I", &a0))
                  {
                    INT_CALL(object = CharVector(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  JArray< jchar > a0((jobject) NULL);
                  jint a1;
                  CharVector object((jobject) NULL);

                  if (!parseArgs(args, "[CI", &a0, &a1))
                  {
                    INT_CALL(object = CharVector(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_CharVector_alloc(t_CharVector *self, PyObject *arg)
            {
              jint a0;
              jint result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.alloc(a0));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "alloc", arg);
              return NULL;
            }

            static PyObject *t_CharVector_capacity(t_CharVector *self)
            {
              jint result;
              OBJ_CALL(result = self->object.capacity());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_CharVector_clear(t_CharVector *self)
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            static PyObject *t_CharVector_clone(t_CharVector *self)
            {
              CharVector result((jobject) NULL);
              OBJ_CALL(result = self->object.clone());
              return t_CharVector::wrap_Object(result);
            }

            static PyObject *t_CharVector_get(t_CharVector *self, PyObject *arg)
            {
              jint a0;
              jchar result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_CharVector_getArray(t_CharVector *self)
            {
              JArray< jchar > result((jobject) NULL);
              OBJ_CALL(result = self->object.getArray());
              return result.wrap();
            }

            static PyObject *t_CharVector_length(t_CharVector *self)
            {
              jint result;
              OBJ_CALL(result = self->object.length());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_CharVector_put(t_CharVector *self, PyObject *args)
            {
              jint a0;
              jchar a1;

              if (!parseArgs(args, "IC", &a0, &a1))
              {
                OBJ_CALL(self->object.put(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "put", args);
              return NULL;
            }

            static PyObject *t_CharVector_trimToSize(t_CharVector *self)
            {
              OBJ_CALL(self->object.trimToSize());
              Py_RETURN_NONE;
            }

            static PyObject *t_CharVector_get__array(t_CharVector *self, void *data)
            {
              JArray< jchar > value((jobject) NULL);
              OBJ_CALL(value = self->object.getArray());
              return value.wrap();
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/NoMergeScheduler.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *NoMergeScheduler::class$ = NULL;
        jmethodID *NoMergeScheduler::mids$ = NULL;
        bool NoMergeScheduler::live$ = false;
        ::org::apache::lucene::index::MergeScheduler *NoMergeScheduler::INSTANCE = NULL;

        jclass NoMergeScheduler::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/NoMergeScheduler");

            mids$ = new jmethodID[max_mid];
            mids$[mid_clone_ff96d655] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/index/MergeScheduler;");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_merge_5fd7a9f9] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/IndexWriter;Lorg/apache/lucene/index/MergeTrigger;Z)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            INSTANCE = new ::org::apache::lucene::index::MergeScheduler(env->getStaticObjectField(cls, "INSTANCE", "Lorg/apache/lucene/index/MergeScheduler;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::MergeScheduler NoMergeScheduler::clone() const
        {
          return ::org::apache::lucene::index::MergeScheduler(env->callObjectMethod(this$, mids$[mid_clone_ff96d655]));
        }

        void NoMergeScheduler::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void NoMergeScheduler::merge(const ::org::apache::lucene::index::IndexWriter & a0, const ::org::apache::lucene::index::MergeTrigger & a1, jboolean a2) const
        {
          env->callVoidMethod(this$, mids$[mid_merge_5fd7a9f9], a0.this$, a1.this$, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_NoMergeScheduler_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NoMergeScheduler_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NoMergeScheduler_clone(t_NoMergeScheduler *self);
        static PyObject *t_NoMergeScheduler_close(t_NoMergeScheduler *self, PyObject *args);
        static PyObject *t_NoMergeScheduler_merge(t_NoMergeScheduler *self, PyObject *args);

        static PyMethodDef t_NoMergeScheduler__methods_[] = {
          DECLARE_METHOD(t_NoMergeScheduler, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NoMergeScheduler, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NoMergeScheduler, clone, METH_NOARGS),
          DECLARE_METHOD(t_NoMergeScheduler, close, METH_VARARGS),
          DECLARE_METHOD(t_NoMergeScheduler, merge, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NoMergeScheduler, t_NoMergeScheduler, ::org::apache::lucene::index::MergeScheduler, NoMergeScheduler, abstract_init, 0, 0, 0, 0, 0);

        void t_NoMergeScheduler::install(PyObject *module)
        {
          installType(&PY_TYPE(NoMergeScheduler), module, "NoMergeScheduler", 0);
        }

        void t_NoMergeScheduler::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NoMergeScheduler).tp_dict, "class_", make_descriptor(NoMergeScheduler::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NoMergeScheduler).tp_dict, "wrapfn_", make_descriptor(t_NoMergeScheduler::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NoMergeScheduler).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(NoMergeScheduler::initializeClass);
          PyDict_SetItemString(PY_TYPE(NoMergeScheduler).tp_dict, "INSTANCE", make_descriptor(::org::apache::lucene::index::t_MergeScheduler::wrap_Object(*NoMergeScheduler::INSTANCE)));
        }

        static PyObject *t_NoMergeScheduler_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NoMergeScheduler::initializeClass, 1)))
            return NULL;
          return t_NoMergeScheduler::wrap_Object(NoMergeScheduler(((t_NoMergeScheduler *) arg)->object.this$));
        }
        static PyObject *t_NoMergeScheduler_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NoMergeScheduler::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NoMergeScheduler_clone(t_NoMergeScheduler *self)
        {
          ::org::apache::lucene::index::MergeScheduler result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return ::org::apache::lucene::index::t_MergeScheduler::wrap_Object(result);
        }

        static PyObject *t_NoMergeScheduler_close(t_NoMergeScheduler *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NoMergeScheduler), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_NoMergeScheduler_merge(t_NoMergeScheduler *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexWriter a0((jobject) NULL);
          ::org::apache::lucene::index::MergeTrigger a1((jobject) NULL);
          PyTypeObject **p1;
          jboolean a2;

          if (!parseArgs(args, "kKZ", ::org::apache::lucene::index::IndexWriter::initializeClass, ::org::apache::lucene::index::MergeTrigger::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::index::t_MergeTrigger::parameters_, &a2))
          {
            OBJ_CALL(self->object.merge(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NoMergeScheduler), (PyObject *) self, "merge", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/TermVectorsWriter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/MergeState.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "java/io/Closeable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *TermVectorsWriter::class$ = NULL;
        jmethodID *TermVectorsWriter::mids$ = NULL;
        bool TermVectorsWriter::live$ = false;

        jclass TermVectorsWriter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/TermVectorsWriter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_abort_54c6a166] = env->getMethodID(cls, "abort", "()V");
            mids$[mid_addPosition_ffd34a92] = env->getMethodID(cls, "addPosition", "(IIILorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_addProx_395d0aa2] = env->getMethodID(cls, "addProx", "(ILorg/apache/lucene/store/DataInput;Lorg/apache/lucene/store/DataInput;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_finish_48f050c2] = env->getMethodID(cls, "finish", "(Lorg/apache/lucene/index/FieldInfos;I)V");
            mids$[mid_finishDocument_54c6a166] = env->getMethodID(cls, "finishDocument", "()V");
            mids$[mid_finishField_54c6a166] = env->getMethodID(cls, "finishField", "()V");
            mids$[mid_finishTerm_54c6a166] = env->getMethodID(cls, "finishTerm", "()V");
            mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
            mids$[mid_merge_fd0cfdeb] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/MergeState;)I");
            mids$[mid_startDocument_39c7bd3c] = env->getMethodID(cls, "startDocument", "(I)V");
            mids$[mid_startField_07c4def5] = env->getMethodID(cls, "startField", "(Lorg/apache/lucene/index/FieldInfo;IZZZ)V");
            mids$[mid_startTerm_738fc2ce] = env->getMethodID(cls, "startTerm", "(Lorg/apache/lucene/util/BytesRef;I)V");
            mids$[mid_addAllDocVectors_7f6315b6] = env->getMethodID(cls, "addAllDocVectors", "(Lorg/apache/lucene/index/Fields;Lorg/apache/lucene/index/MergeState;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void TermVectorsWriter::abort() const
        {
          env->callVoidMethod(this$, mids$[mid_abort_54c6a166]);
        }

        void TermVectorsWriter::addPosition(jint a0, jint a1, jint a2, const ::org::apache::lucene::util::BytesRef & a3) const
        {
          env->callVoidMethod(this$, mids$[mid_addPosition_ffd34a92], a0, a1, a2, a3.this$);
        }

        void TermVectorsWriter::addProx(jint a0, const ::org::apache::lucene::store::DataInput & a1, const ::org::apache::lucene::store::DataInput & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_addProx_395d0aa2], a0, a1.this$, a2.this$);
        }

        void TermVectorsWriter::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void TermVectorsWriter::finish(const ::org::apache::lucene::index::FieldInfos & a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_finish_48f050c2], a0.this$, a1);
        }

        void TermVectorsWriter::finishDocument() const
        {
          env->callVoidMethod(this$, mids$[mid_finishDocument_54c6a166]);
        }

        void TermVectorsWriter::finishField() const
        {
          env->callVoidMethod(this$, mids$[mid_finishField_54c6a166]);
        }

        void TermVectorsWriter::finishTerm() const
        {
          env->callVoidMethod(this$, mids$[mid_finishTerm_54c6a166]);
        }

        ::java::util::Comparator TermVectorsWriter::getComparator() const
        {
          return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
        }

        jint TermVectorsWriter::merge(const ::org::apache::lucene::index::MergeState & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_merge_fd0cfdeb], a0.this$);
        }

        void TermVectorsWriter::startDocument(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_startDocument_39c7bd3c], a0);
        }

        void TermVectorsWriter::startField(const ::org::apache::lucene::index::FieldInfo & a0, jint a1, jboolean a2, jboolean a3, jboolean a4) const
        {
          env->callVoidMethod(this$, mids$[mid_startField_07c4def5], a0.this$, a1, a2, a3, a4);
        }

        void TermVectorsWriter::startTerm(const ::org::apache::lucene::util::BytesRef & a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_startTerm_738fc2ce], a0.this$, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_TermVectorsWriter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermVectorsWriter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermVectorsWriter_abort(t_TermVectorsWriter *self);
        static PyObject *t_TermVectorsWriter_addPosition(t_TermVectorsWriter *self, PyObject *args);
        static PyObject *t_TermVectorsWriter_addProx(t_TermVectorsWriter *self, PyObject *args);
        static PyObject *t_TermVectorsWriter_close(t_TermVectorsWriter *self);
        static PyObject *t_TermVectorsWriter_finish(t_TermVectorsWriter *self, PyObject *args);
        static PyObject *t_TermVectorsWriter_finishDocument(t_TermVectorsWriter *self);
        static PyObject *t_TermVectorsWriter_finishField(t_TermVectorsWriter *self);
        static PyObject *t_TermVectorsWriter_finishTerm(t_TermVectorsWriter *self);
        static PyObject *t_TermVectorsWriter_getComparator(t_TermVectorsWriter *self);
        static PyObject *t_TermVectorsWriter_merge(t_TermVectorsWriter *self, PyObject *arg);
        static PyObject *t_TermVectorsWriter_startDocument(t_TermVectorsWriter *self, PyObject *arg);
        static PyObject *t_TermVectorsWriter_startField(t_TermVectorsWriter *self, PyObject *args);
        static PyObject *t_TermVectorsWriter_startTerm(t_TermVectorsWriter *self, PyObject *args);
        static PyObject *t_TermVectorsWriter_get__comparator(t_TermVectorsWriter *self, void *data);
        static PyGetSetDef t_TermVectorsWriter__fields_[] = {
          DECLARE_GET_FIELD(t_TermVectorsWriter, comparator),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TermVectorsWriter__methods_[] = {
          DECLARE_METHOD(t_TermVectorsWriter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermVectorsWriter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermVectorsWriter, abort, METH_NOARGS),
          DECLARE_METHOD(t_TermVectorsWriter, addPosition, METH_VARARGS),
          DECLARE_METHOD(t_TermVectorsWriter, addProx, METH_VARARGS),
          DECLARE_METHOD(t_TermVectorsWriter, close, METH_NOARGS),
          DECLARE_METHOD(t_TermVectorsWriter, finish, METH_VARARGS),
          DECLARE_METHOD(t_TermVectorsWriter, finishDocument, METH_NOARGS),
          DECLARE_METHOD(t_TermVectorsWriter, finishField, METH_NOARGS),
          DECLARE_METHOD(t_TermVectorsWriter, finishTerm, METH_NOARGS),
          DECLARE_METHOD(t_TermVectorsWriter, getComparator, METH_NOARGS),
          DECLARE_METHOD(t_TermVectorsWriter, merge, METH_O),
          DECLARE_METHOD(t_TermVectorsWriter, startDocument, METH_O),
          DECLARE_METHOD(t_TermVectorsWriter, startField, METH_VARARGS),
          DECLARE_METHOD(t_TermVectorsWriter, startTerm, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermVectorsWriter, t_TermVectorsWriter, ::java::lang::Object, TermVectorsWriter, abstract_init, 0, 0, t_TermVectorsWriter__fields_, 0, 0);

        void t_TermVectorsWriter::install(PyObject *module)
        {
          installType(&PY_TYPE(TermVectorsWriter), module, "TermVectorsWriter", 0);
        }

        void t_TermVectorsWriter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermVectorsWriter).tp_dict, "class_", make_descriptor(TermVectorsWriter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermVectorsWriter).tp_dict, "wrapfn_", make_descriptor(t_TermVectorsWriter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermVectorsWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermVectorsWriter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermVectorsWriter::initializeClass, 1)))
            return NULL;
          return t_TermVectorsWriter::wrap_Object(TermVectorsWriter(((t_TermVectorsWriter *) arg)->object.this$));
        }
        static PyObject *t_TermVectorsWriter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermVectorsWriter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TermVectorsWriter_abort(t_TermVectorsWriter *self)
        {
          OBJ_CALL(self->object.abort());
          Py_RETURN_NONE;
        }

        static PyObject *t_TermVectorsWriter_addPosition(t_TermVectorsWriter *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jint a2;
          ::org::apache::lucene::util::BytesRef a3((jobject) NULL);

          if (!parseArgs(args, "IIIk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.addPosition(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addPosition", args);
          return NULL;
        }

        static PyObject *t_TermVectorsWriter_addProx(t_TermVectorsWriter *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::store::DataInput a1((jobject) NULL);
          ::org::apache::lucene::store::DataInput a2((jobject) NULL);

          if (!parseArgs(args, "Ikk", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.addProx(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addProx", args);
          return NULL;
        }

        static PyObject *t_TermVectorsWriter_close(t_TermVectorsWriter *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_TermVectorsWriter_finish(t_TermVectorsWriter *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfos a0((jobject) NULL);
          jint a1;

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::FieldInfos::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.finish(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "finish", args);
          return NULL;
        }

        static PyObject *t_TermVectorsWriter_finishDocument(t_TermVectorsWriter *self)
        {
          OBJ_CALL(self->object.finishDocument());
          Py_RETURN_NONE;
        }

        static PyObject *t_TermVectorsWriter_finishField(t_TermVectorsWriter *self)
        {
          OBJ_CALL(self->object.finishField());
          Py_RETURN_NONE;
        }

        static PyObject *t_TermVectorsWriter_finishTerm(t_TermVectorsWriter *self)
        {
          OBJ_CALL(self->object.finishTerm());
          Py_RETURN_NONE;
        }

        static PyObject *t_TermVectorsWriter_getComparator(t_TermVectorsWriter *self)
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
        }

        static PyObject *t_TermVectorsWriter_merge(t_TermVectorsWriter *self, PyObject *arg)
        {
          ::org::apache::lucene::index::MergeState a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::MergeState::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.merge(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "merge", arg);
          return NULL;
        }

        static PyObject *t_TermVectorsWriter_startDocument(t_TermVectorsWriter *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.startDocument(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "startDocument", arg);
          return NULL;
        }

        static PyObject *t_TermVectorsWriter_startField(t_TermVectorsWriter *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          jint a1;
          jboolean a2;
          jboolean a3;
          jboolean a4;

          if (!parseArgs(args, "kIZZZ", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(self->object.startField(a0, a1, a2, a3, a4));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "startField", args);
          return NULL;
        }

        static PyObject *t_TermVectorsWriter_startTerm(t_TermVectorsWriter *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jint a1;

          if (!parseArgs(args, "kI", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.startTerm(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "startTerm", args);
          return NULL;
        }

        static PyObject *t_TermVectorsWriter_get__comparator(t_TermVectorsWriter *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/util/Set.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/util/Collection.h"
#include "java/lang/String.h"
#include "java/util/Iterator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *CharArraySet::class$ = NULL;
          jmethodID *CharArraySet::mids$ = NULL;
          bool CharArraySet::live$ = false;
          CharArraySet *CharArraySet::EMPTY_SET = NULL;

          jclass CharArraySet::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/CharArraySet");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e4d1113d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/util/Collection;Z)V");
              mids$[mid_init$_b3a872e4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;IZ)V");
              mids$[mid_add_5fdc3f44] = env->getMethodID(cls, "add", "(Ljava/lang/String;)Z");
              mids$[mid_add_700e23da] = env->getMethodID(cls, "add", "([C)Z");
              mids$[mid_add_a8afc646] = env->getMethodID(cls, "add", "(Ljava/lang/CharSequence;)Z");
              mids$[mid_add_290588e2] = env->getMethodID(cls, "add", "(Ljava/lang/Object;)Z");
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_contains_290588e2] = env->getMethodID(cls, "contains", "(Ljava/lang/Object;)Z");
              mids$[mid_contains_a8afc646] = env->getMethodID(cls, "contains", "(Ljava/lang/CharSequence;)Z");
              mids$[mid_contains_6f0bb35a] = env->getMethodID(cls, "contains", "([CII)Z");
              mids$[mid_copy_8d0d7f61] = env->getStaticMethodID(cls, "copy", "(Lorg/apache/lucene/util/Version;Ljava/util/Set;)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
              mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_unmodifiableSet_ea04d04d] = env->getStaticMethodID(cls, "unmodifiableSet", "(Lorg/apache/lucene/analysis/util/CharArraySet;)Lorg/apache/lucene/analysis/util/CharArraySet;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              EMPTY_SET = new CharArraySet(env->getStaticObjectField(cls, "EMPTY_SET", "Lorg/apache/lucene/analysis/util/CharArraySet;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CharArraySet::CharArraySet(const ::org::apache::lucene::util::Version & a0, const ::java::util::Collection & a1, jboolean a2) : ::java::util::AbstractSet(env->newObject(initializeClass, &mids$, mid_init$_e4d1113d, a0.this$, a1.this$, a2)) {}

          CharArraySet::CharArraySet(const ::org::apache::lucene::util::Version & a0, jint a1, jboolean a2) : ::java::util::AbstractSet(env->newObject(initializeClass, &mids$, mid_init$_b3a872e4, a0.this$, a1, a2)) {}

          jboolean CharArraySet::add(const ::java::lang::String & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_add_5fdc3f44], a0.this$);
          }

          jboolean CharArraySet::add(const JArray< jchar > & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_add_700e23da], a0.this$);
          }

          jboolean CharArraySet::add(const ::java::lang::CharSequence & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_add_a8afc646], a0.this$);
          }

          jboolean CharArraySet::add(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_add_290588e2], a0.this$);
          }

          void CharArraySet::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          jboolean CharArraySet::contains(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_contains_290588e2], a0.this$);
          }

          jboolean CharArraySet::contains(const ::java::lang::CharSequence & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_contains_a8afc646], a0.this$);
          }

          jboolean CharArraySet::contains(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return env->callBooleanMethod(this$, mids$[mid_contains_6f0bb35a], a0.this$, a1, a2);
          }

          CharArraySet CharArraySet::copy(const ::org::apache::lucene::util::Version & a0, const ::java::util::Set & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_copy_8d0d7f61], a0.this$, a1.this$));
          }

          ::java::util::Iterator CharArraySet::iterator() const
          {
            return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
          }

          jint CharArraySet::size() const
          {
            return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
          }

          ::java::lang::String CharArraySet::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          CharArraySet CharArraySet::unmodifiableSet(const CharArraySet & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_unmodifiableSet_ea04d04d], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_CharArraySet_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharArraySet_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharArraySet_of_(t_CharArraySet *self, PyObject *args);
          static int t_CharArraySet_init_(t_CharArraySet *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CharArraySet_add(t_CharArraySet *self, PyObject *args);
          static PyObject *t_CharArraySet_clear(t_CharArraySet *self, PyObject *args);
          static PyObject *t_CharArraySet_contains(t_CharArraySet *self, PyObject *args);
          static PyObject *t_CharArraySet_copy(PyTypeObject *type, PyObject *args);
          static PyObject *t_CharArraySet_iterator(t_CharArraySet *self, PyObject *args);
          static PyObject *t_CharArraySet_size(t_CharArraySet *self, PyObject *args);
          static PyObject *t_CharArraySet_toString(t_CharArraySet *self, PyObject *args);
          static PyObject *t_CharArraySet_unmodifiableSet(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharArraySet_get__parameters_(t_CharArraySet *self, void *data);
          static PyGetSetDef t_CharArraySet__fields_[] = {
            DECLARE_GET_FIELD(t_CharArraySet, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CharArraySet__methods_[] = {
            DECLARE_METHOD(t_CharArraySet, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharArraySet, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharArraySet, of_, METH_VARARGS),
            DECLARE_METHOD(t_CharArraySet, add, METH_VARARGS),
            DECLARE_METHOD(t_CharArraySet, clear, METH_VARARGS),
            DECLARE_METHOD(t_CharArraySet, contains, METH_VARARGS),
            DECLARE_METHOD(t_CharArraySet, copy, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_CharArraySet, iterator, METH_VARARGS),
            DECLARE_METHOD(t_CharArraySet, size, METH_VARARGS),
            DECLARE_METHOD(t_CharArraySet, toString, METH_VARARGS),
            DECLARE_METHOD(t_CharArraySet, unmodifiableSet, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CharArraySet, t_CharArraySet, ::java::util::AbstractSet, CharArraySet, t_CharArraySet_init_, ((PyObject *(*)(t_CharArraySet *)) get_generic_iterator< t_CharArraySet >), 0, t_CharArraySet__fields_, 0, 0);
          PyObject *t_CharArraySet::wrap_Object(const CharArraySet& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CharArraySet::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CharArraySet *self = (t_CharArraySet *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_CharArraySet::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CharArraySet::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CharArraySet *self = (t_CharArraySet *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_CharArraySet::install(PyObject *module)
          {
            installType(&PY_TYPE(CharArraySet), module, "CharArraySet", 0);
          }

          void t_CharArraySet::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CharArraySet).tp_dict, "class_", make_descriptor(CharArraySet::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CharArraySet).tp_dict, "wrapfn_", make_descriptor(t_CharArraySet::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CharArraySet).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CharArraySet::initializeClass);
            PyDict_SetItemString(PY_TYPE(CharArraySet).tp_dict, "EMPTY_SET", make_descriptor(t_CharArraySet::wrap_Object(*CharArraySet::EMPTY_SET)));
          }

          static PyObject *t_CharArraySet_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharArraySet::initializeClass, 1)))
              return NULL;
            return t_CharArraySet::wrap_Object(CharArraySet(((t_CharArraySet *) arg)->object.this$));
          }
          static PyObject *t_CharArraySet_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharArraySet::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CharArraySet_of_(t_CharArraySet *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_CharArraySet_init_(t_CharArraySet *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::util::Collection a1((jobject) NULL);
                PyTypeObject **p1;
                jboolean a2;
                CharArraySet object((jobject) NULL);

                if (!parseArgs(args, "KKZ", ::org::apache::lucene::util::Version::initializeClass, ::java::util::Collection::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::java::util::t_Collection::parameters_, &a2))
                {
                  INT_CALL(object = CharArraySet(a0, a1, a2));
                  self->object = object;
                  self->parameters[0] = &::java::lang::PY_TYPE(Object);
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                jint a1;
                jboolean a2;
                CharArraySet object((jobject) NULL);

                if (!parseArgs(args, "KIZ", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = CharArraySet(a0, a1, a2));
                  self->object = object;
                  self->parameters[0] = &::java::lang::PY_TYPE(Object);
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CharArraySet_add(t_CharArraySet *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = self->object.add(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              {
                JArray< jchar > a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "[C", &a0))
                {
                  OBJ_CALL(result = self->object.add(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.add(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              {
                ::java::lang::Object a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "o", &a0))
                {
                  OBJ_CALL(result = self->object.add(a0));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            return callSuper(&PY_TYPE(CharArraySet), (PyObject *) self, "add", args, 2);
          }

          static PyObject *t_CharArraySet_clear(t_CharArraySet *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CharArraySet), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_CharArraySet_contains(t_CharArraySet *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::Object a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "o", &a0))
                {
                  OBJ_CALL(result = self->object.contains(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.contains(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;
                jboolean result;

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.contains(a0, a1, a2));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            return callSuper(&PY_TYPE(CharArraySet), (PyObject *) self, "contains", args, 2);
          }

          static PyObject *t_CharArraySet_copy(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::util::Set a1((jobject) NULL);
            PyTypeObject **p1;
            CharArraySet result((jobject) NULL);

            if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::java::util::Set::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharArraySet::copy(a0, a1));
              return t_CharArraySet::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "copy", args);
            return NULL;
          }

          static PyObject *t_CharArraySet_iterator(t_CharArraySet *self, PyObject *args)
          {
            ::java::util::Iterator result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.iterator());
              return ::java::util::t_Iterator::wrap_Object(result, &::java::lang::PY_TYPE(Object));
            }

            return callSuper(&PY_TYPE(CharArraySet), (PyObject *) self, "iterator", args, 2);
          }

          static PyObject *t_CharArraySet_size(t_CharArraySet *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.size());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(CharArraySet), (PyObject *) self, "size", args, 2);
          }

          static PyObject *t_CharArraySet_toString(t_CharArraySet *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(CharArraySet), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_CharArraySet_unmodifiableSet(PyTypeObject *type, PyObject *arg)
          {
            CharArraySet a0((jobject) NULL);
            PyTypeObject **p0;
            CharArraySet result((jobject) NULL);

            if (!parseArg(arg, "K", CharArraySet::initializeClass, &a0, &p0, t_CharArraySet::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharArraySet::unmodifiableSet(a0));
              return t_CharArraySet::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "unmodifiableSet", arg);
            return NULL;
          }
          static PyObject *t_CharArraySet_get__parameters_(t_CharArraySet *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/DisjunctionMaxQuery.h"
#include "java/lang/Iterable.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Weight.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/util/ArrayList.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/util/Set.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/String.h"
#include "java/util/Iterator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *DisjunctionMaxQuery::class$ = NULL;
        jmethodID *DisjunctionMaxQuery::mids$ = NULL;
        bool DisjunctionMaxQuery::live$ = false;

        jclass DisjunctionMaxQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/DisjunctionMaxQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_06298cab] = env->getMethodID(cls, "<init>", "(F)V");
            mids$[mid_init$_30a7c9ca] = env->getMethodID(cls, "<init>", "(Ljava/util/Collection;F)V");
            mids$[mid_add_9bfb370d] = env->getMethodID(cls, "add", "(Ljava/util/Collection;)V");
            mids$[mid_add_6e301113] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/search/Query;)V");
            mids$[mid_clone_ca9043ca] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/search/DisjunctionMaxQuery;");
            mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
            mids$[mid_getDisjuncts_21eb51b0] = env->getMethodID(cls, "getDisjuncts", "()Ljava/util/ArrayList;");
            mids$[mid_getTieBreakerMultiplier_54c6a176] = env->getMethodID(cls, "getTieBreakerMultiplier", "()F");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DisjunctionMaxQuery::DisjunctionMaxQuery(jfloat a0) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_06298cab, a0)) {}

        DisjunctionMaxQuery::DisjunctionMaxQuery(const ::java::util::Collection & a0, jfloat a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_30a7c9ca, a0.this$, a1)) {}

        void DisjunctionMaxQuery::add(const ::java::util::Collection & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_9bfb370d], a0.this$);
        }

        void DisjunctionMaxQuery::add(const ::org::apache::lucene::search::Query & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_6e301113], a0.this$);
        }

        DisjunctionMaxQuery DisjunctionMaxQuery::clone() const
        {
          return DisjunctionMaxQuery(env->callObjectMethod(this$, mids$[mid_clone_ca9043ca]));
        }

        ::org::apache::lucene::search::Weight DisjunctionMaxQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
        }

        jboolean DisjunctionMaxQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void DisjunctionMaxQuery::extractTerms(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
        }

        ::java::util::ArrayList DisjunctionMaxQuery::getDisjuncts() const
        {
          return ::java::util::ArrayList(env->callObjectMethod(this$, mids$[mid_getDisjuncts_21eb51b0]));
        }

        jfloat DisjunctionMaxQuery::getTieBreakerMultiplier() const
        {
          return env->callFloatMethod(this$, mids$[mid_getTieBreakerMultiplier_54c6a176]);
        }

        jint DisjunctionMaxQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::util::Iterator DisjunctionMaxQuery::iterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
        }

        ::org::apache::lucene::search::Query DisjunctionMaxQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
        }

        ::java::lang::String DisjunctionMaxQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_DisjunctionMaxQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DisjunctionMaxQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DisjunctionMaxQuery_init_(t_DisjunctionMaxQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DisjunctionMaxQuery_add(t_DisjunctionMaxQuery *self, PyObject *args);
        static PyObject *t_DisjunctionMaxQuery_clone(t_DisjunctionMaxQuery *self, PyObject *args);
        static PyObject *t_DisjunctionMaxQuery_createWeight(t_DisjunctionMaxQuery *self, PyObject *args);
        static PyObject *t_DisjunctionMaxQuery_equals(t_DisjunctionMaxQuery *self, PyObject *args);
        static PyObject *t_DisjunctionMaxQuery_extractTerms(t_DisjunctionMaxQuery *self, PyObject *args);
        static PyObject *t_DisjunctionMaxQuery_getDisjuncts(t_DisjunctionMaxQuery *self);
        static PyObject *t_DisjunctionMaxQuery_getTieBreakerMultiplier(t_DisjunctionMaxQuery *self);
        static PyObject *t_DisjunctionMaxQuery_hashCode(t_DisjunctionMaxQuery *self, PyObject *args);
        static PyObject *t_DisjunctionMaxQuery_iterator(t_DisjunctionMaxQuery *self);
        static PyObject *t_DisjunctionMaxQuery_rewrite(t_DisjunctionMaxQuery *self, PyObject *args);
        static PyObject *t_DisjunctionMaxQuery_toString(t_DisjunctionMaxQuery *self, PyObject *args);
        static PyObject *t_DisjunctionMaxQuery_get__disjuncts(t_DisjunctionMaxQuery *self, void *data);
        static PyObject *t_DisjunctionMaxQuery_get__tieBreakerMultiplier(t_DisjunctionMaxQuery *self, void *data);
        static PyGetSetDef t_DisjunctionMaxQuery__fields_[] = {
          DECLARE_GET_FIELD(t_DisjunctionMaxQuery, disjuncts),
          DECLARE_GET_FIELD(t_DisjunctionMaxQuery, tieBreakerMultiplier),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DisjunctionMaxQuery__methods_[] = {
          DECLARE_METHOD(t_DisjunctionMaxQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, add, METH_VARARGS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, clone, METH_VARARGS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, extractTerms, METH_VARARGS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, getDisjuncts, METH_NOARGS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, getTieBreakerMultiplier, METH_NOARGS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, iterator, METH_NOARGS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_DisjunctionMaxQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DisjunctionMaxQuery, t_DisjunctionMaxQuery, ::org::apache::lucene::search::Query, DisjunctionMaxQuery, t_DisjunctionMaxQuery_init_, ((PyObject *(*)(t_DisjunctionMaxQuery *)) get_iterator< t_DisjunctionMaxQuery >), 0, t_DisjunctionMaxQuery__fields_, 0, 0);

        void t_DisjunctionMaxQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(DisjunctionMaxQuery), module, "DisjunctionMaxQuery", 0);
        }

        void t_DisjunctionMaxQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DisjunctionMaxQuery).tp_dict, "class_", make_descriptor(DisjunctionMaxQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DisjunctionMaxQuery).tp_dict, "wrapfn_", make_descriptor(t_DisjunctionMaxQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DisjunctionMaxQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DisjunctionMaxQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DisjunctionMaxQuery::initializeClass, 1)))
            return NULL;
          return t_DisjunctionMaxQuery::wrap_Object(DisjunctionMaxQuery(((t_DisjunctionMaxQuery *) arg)->object.this$));
        }
        static PyObject *t_DisjunctionMaxQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DisjunctionMaxQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DisjunctionMaxQuery_init_(t_DisjunctionMaxQuery *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jfloat a0;
              DisjunctionMaxQuery object((jobject) NULL);

              if (!parseArgs(args, "F", &a0))
              {
                INT_CALL(object = DisjunctionMaxQuery(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::util::Collection a0((jobject) NULL);
              PyTypeObject **p0;
              jfloat a1;
              DisjunctionMaxQuery object((jobject) NULL);

              if (!parseArgs(args, "KF", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1))
              {
                INT_CALL(object = DisjunctionMaxQuery(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DisjunctionMaxQuery_add(t_DisjunctionMaxQuery *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::util::Collection a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
              {
                OBJ_CALL(self->object.add(a0));
                Py_RETURN_NONE;
              }
            }
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
              {
                OBJ_CALL(self->object.add(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "add", args);
          return NULL;
        }

        static PyObject *t_DisjunctionMaxQuery_clone(t_DisjunctionMaxQuery *self, PyObject *args)
        {
          DisjunctionMaxQuery result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.clone());
            return t_DisjunctionMaxQuery::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(DisjunctionMaxQuery), (PyObject *) self, "clone", args, 2);
        }

        static PyObject *t_DisjunctionMaxQuery_createWeight(t_DisjunctionMaxQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.createWeight(a0));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(DisjunctionMaxQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_DisjunctionMaxQuery_equals(t_DisjunctionMaxQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(DisjunctionMaxQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_DisjunctionMaxQuery_extractTerms(t_DisjunctionMaxQuery *self, PyObject *args)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.extractTerms(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(DisjunctionMaxQuery), (PyObject *) self, "extractTerms", args, 2);
        }

        static PyObject *t_DisjunctionMaxQuery_getDisjuncts(t_DisjunctionMaxQuery *self)
        {
          ::java::util::ArrayList result((jobject) NULL);
          OBJ_CALL(result = self->object.getDisjuncts());
          return ::java::util::t_ArrayList::wrap_Object(result, &::org::apache::lucene::search::PY_TYPE(Query));
        }

        static PyObject *t_DisjunctionMaxQuery_getTieBreakerMultiplier(t_DisjunctionMaxQuery *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getTieBreakerMultiplier());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_DisjunctionMaxQuery_hashCode(t_DisjunctionMaxQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(DisjunctionMaxQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_DisjunctionMaxQuery_iterator(t_DisjunctionMaxQuery *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.iterator());
          return ::java::util::t_Iterator::wrap_Object(result, &::org::apache::lucene::search::PY_TYPE(Query));
        }

        static PyObject *t_DisjunctionMaxQuery_rewrite(t_DisjunctionMaxQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(DisjunctionMaxQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_DisjunctionMaxQuery_toString(t_DisjunctionMaxQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(DisjunctionMaxQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_DisjunctionMaxQuery_get__disjuncts(t_DisjunctionMaxQuery *self, void *data)
        {
          ::java::util::ArrayList value((jobject) NULL);
          OBJ_CALL(value = self->object.getDisjuncts());
          return ::java::util::t_ArrayList::wrap_Object(value);
        }

        static PyObject *t_DisjunctionMaxQuery_get__tieBreakerMultiplier(t_DisjunctionMaxQuery *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getTieBreakerMultiplier());
          return PyFloat_FromDouble((double) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/no/NorwegianLightStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {

          ::java::lang::Class *NorwegianLightStemFilter::class$ = NULL;
          jmethodID *NorwegianLightStemFilter::mids$ = NULL;
          bool NorwegianLightStemFilter::live$ = false;

          jclass NorwegianLightStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/no/NorwegianLightStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_d53bcf42] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;I)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NorwegianLightStemFilter::NorwegianLightStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          NorwegianLightStemFilter::NorwegianLightStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_d53bcf42, a0.this$, a1)) {}

          jboolean NorwegianLightStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {
          static PyObject *t_NorwegianLightStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NorwegianLightStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NorwegianLightStemFilter_init_(t_NorwegianLightStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NorwegianLightStemFilter_incrementToken(t_NorwegianLightStemFilter *self, PyObject *args);

          static PyMethodDef t_NorwegianLightStemFilter__methods_[] = {
            DECLARE_METHOD(t_NorwegianLightStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianLightStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianLightStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NorwegianLightStemFilter, t_NorwegianLightStemFilter, ::org::apache::lucene::analysis::TokenFilter, NorwegianLightStemFilter, t_NorwegianLightStemFilter_init_, 0, 0, 0, 0, 0);

          void t_NorwegianLightStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(NorwegianLightStemFilter), module, "NorwegianLightStemFilter", 0);
          }

          void t_NorwegianLightStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NorwegianLightStemFilter).tp_dict, "class_", make_descriptor(NorwegianLightStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NorwegianLightStemFilter).tp_dict, "wrapfn_", make_descriptor(t_NorwegianLightStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NorwegianLightStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NorwegianLightStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NorwegianLightStemFilter::initializeClass, 1)))
              return NULL;
            return t_NorwegianLightStemFilter::wrap_Object(NorwegianLightStemFilter(((t_NorwegianLightStemFilter *) arg)->object.this$));
          }
          static PyObject *t_NorwegianLightStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NorwegianLightStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NorwegianLightStemFilter_init_(t_NorwegianLightStemFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                NorwegianLightStemFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = NorwegianLightStemFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                NorwegianLightStemFilter object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = NorwegianLightStemFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NorwegianLightStemFilter_incrementToken(t_NorwegianLightStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(NorwegianLightStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/antlr/runtime/RuleReturnScope.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace antlr {
    namespace runtime {

      ::java::lang::Class *RuleReturnScope::class$ = NULL;
      jmethodID *RuleReturnScope::mids$ = NULL;
      bool RuleReturnScope::live$ = false;

      jclass RuleReturnScope::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/antlr/runtime/RuleReturnScope");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
          mids$[mid_getStart_846352c3] = env->getMethodID(cls, "getStart", "()Ljava/lang/Object;");
          mids$[mid_getStop_846352c3] = env->getMethodID(cls, "getStop", "()Ljava/lang/Object;");
          mids$[mid_getTemplate_846352c3] = env->getMethodID(cls, "getTemplate", "()Ljava/lang/Object;");
          mids$[mid_getTree_846352c3] = env->getMethodID(cls, "getTree", "()Ljava/lang/Object;");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      RuleReturnScope::RuleReturnScope() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

      ::java::lang::Object RuleReturnScope::getStart() const
      {
        return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getStart_846352c3]));
      }

      ::java::lang::Object RuleReturnScope::getStop() const
      {
        return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getStop_846352c3]));
      }

      ::java::lang::Object RuleReturnScope::getTemplate() const
      {
        return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getTemplate_846352c3]));
      }

      ::java::lang::Object RuleReturnScope::getTree() const
      {
        return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getTree_846352c3]));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace antlr {
    namespace runtime {
      static PyObject *t_RuleReturnScope_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_RuleReturnScope_instance_(PyTypeObject *type, PyObject *arg);
      static int t_RuleReturnScope_init_(t_RuleReturnScope *self, PyObject *args, PyObject *kwds);
      static PyObject *t_RuleReturnScope_getStart(t_RuleReturnScope *self);
      static PyObject *t_RuleReturnScope_getStop(t_RuleReturnScope *self);
      static PyObject *t_RuleReturnScope_getTemplate(t_RuleReturnScope *self);
      static PyObject *t_RuleReturnScope_getTree(t_RuleReturnScope *self);
      static PyObject *t_RuleReturnScope_get__start(t_RuleReturnScope *self, void *data);
      static PyObject *t_RuleReturnScope_get__stop(t_RuleReturnScope *self, void *data);
      static PyObject *t_RuleReturnScope_get__template(t_RuleReturnScope *self, void *data);
      static PyObject *t_RuleReturnScope_get__tree(t_RuleReturnScope *self, void *data);
      static PyGetSetDef t_RuleReturnScope__fields_[] = {
        DECLARE_GET_FIELD(t_RuleReturnScope, start),
        DECLARE_GET_FIELD(t_RuleReturnScope, stop),
        DECLARE_GET_FIELD(t_RuleReturnScope, template),
        DECLARE_GET_FIELD(t_RuleReturnScope, tree),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_RuleReturnScope__methods_[] = {
        DECLARE_METHOD(t_RuleReturnScope, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_RuleReturnScope, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_RuleReturnScope, getStart, METH_NOARGS),
        DECLARE_METHOD(t_RuleReturnScope, getStop, METH_NOARGS),
        DECLARE_METHOD(t_RuleReturnScope, getTemplate, METH_NOARGS),
        DECLARE_METHOD(t_RuleReturnScope, getTree, METH_NOARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(RuleReturnScope, t_RuleReturnScope, ::java::lang::Object, RuleReturnScope, t_RuleReturnScope_init_, 0, 0, t_RuleReturnScope__fields_, 0, 0);

      void t_RuleReturnScope::install(PyObject *module)
      {
        installType(&PY_TYPE(RuleReturnScope), module, "RuleReturnScope", 0);
      }

      void t_RuleReturnScope::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(RuleReturnScope).tp_dict, "class_", make_descriptor(RuleReturnScope::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(RuleReturnScope).tp_dict, "wrapfn_", make_descriptor(t_RuleReturnScope::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(RuleReturnScope).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_RuleReturnScope_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, RuleReturnScope::initializeClass, 1)))
          return NULL;
        return t_RuleReturnScope::wrap_Object(RuleReturnScope(((t_RuleReturnScope *) arg)->object.this$));
      }
      static PyObject *t_RuleReturnScope_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, RuleReturnScope::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_RuleReturnScope_init_(t_RuleReturnScope *self, PyObject *args, PyObject *kwds)
      {
        RuleReturnScope object((jobject) NULL);

        INT_CALL(object = RuleReturnScope());
        self->object = object;

        return 0;
      }

      static PyObject *t_RuleReturnScope_getStart(t_RuleReturnScope *self)
      {
        ::java::lang::Object result((jobject) NULL);
        OBJ_CALL(result = self->object.getStart());
        return ::java::lang::t_Object::wrap_Object(result);
      }

      static PyObject *t_RuleReturnScope_getStop(t_RuleReturnScope *self)
      {
        ::java::lang::Object result((jobject) NULL);
        OBJ_CALL(result = self->object.getStop());
        return ::java::lang::t_Object::wrap_Object(result);
      }

      static PyObject *t_RuleReturnScope_getTemplate(t_RuleReturnScope *self)
      {
        ::java::lang::Object result((jobject) NULL);
        OBJ_CALL(result = self->object.getTemplate());
        return ::java::lang::t_Object::wrap_Object(result);
      }

      static PyObject *t_RuleReturnScope_getTree(t_RuleReturnScope *self)
      {
        ::java::lang::Object result((jobject) NULL);
        OBJ_CALL(result = self->object.getTree());
        return ::java::lang::t_Object::wrap_Object(result);
      }

      static PyObject *t_RuleReturnScope_get__start(t_RuleReturnScope *self, void *data)
      {
        ::java::lang::Object value((jobject) NULL);
        OBJ_CALL(value = self->object.getStart());
        return ::java::lang::t_Object::wrap_Object(value);
      }

      static PyObject *t_RuleReturnScope_get__stop(t_RuleReturnScope *self, void *data)
      {
        ::java::lang::Object value((jobject) NULL);
        OBJ_CALL(value = self->object.getStop());
        return ::java::lang::t_Object::wrap_Object(value);
      }

      static PyObject *t_RuleReturnScope_get__template(t_RuleReturnScope *self, void *data)
      {
        ::java::lang::Object value((jobject) NULL);
        OBJ_CALL(value = self->object.getTemplate());
        return ::java::lang::t_Object::wrap_Object(value);
      }

      static PyObject *t_RuleReturnScope_get__tree(t_RuleReturnScope *self, void *data)
      {
        ::java::lang::Object value((jobject) NULL);
        OBJ_CALL(value = self->object.getTree());
        return ::java::lang::t_Object::wrap_Object(value);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$FloatParser.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$FloatParser::class$ = NULL;
        jmethodID *FieldCache$FloatParser::mids$ = NULL;
        bool FieldCache$FloatParser::live$ = false;

        jclass FieldCache$FloatParser::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$FloatParser");

            mids$ = new jmethodID[max_mid];
            mids$[mid_parseFloat_7bc03dd4] = env->getMethodID(cls, "parseFloat", "(Lorg/apache/lucene/util/BytesRef;)F");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jfloat FieldCache$FloatParser::parseFloat(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callFloatMethod(this$, mids$[mid_parseFloat_7bc03dd4], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$FloatParser_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$FloatParser_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$FloatParser_parseFloat(t_FieldCache$FloatParser *self, PyObject *arg);

        static PyMethodDef t_FieldCache$FloatParser__methods_[] = {
          DECLARE_METHOD(t_FieldCache$FloatParser, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$FloatParser, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$FloatParser, parseFloat, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$FloatParser, t_FieldCache$FloatParser, ::org::apache::lucene::search::FieldCache$Parser, FieldCache$FloatParser, abstract_init, 0, 0, 0, 0, 0);

        void t_FieldCache$FloatParser::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$FloatParser), module, "FieldCache$FloatParser", 0);
        }

        void t_FieldCache$FloatParser::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$FloatParser).tp_dict, "class_", make_descriptor(FieldCache$FloatParser::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$FloatParser).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$FloatParser::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$FloatParser).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCache$FloatParser_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$FloatParser::initializeClass, 1)))
            return NULL;
          return t_FieldCache$FloatParser::wrap_Object(FieldCache$FloatParser(((t_FieldCache$FloatParser *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$FloatParser_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$FloatParser::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldCache$FloatParser_parseFloat(t_FieldCache$FloatParser *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jfloat result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.parseFloat(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError((PyObject *) self, "parseFloat", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/OfflineSorter$BufferSize.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *OfflineSorter$BufferSize::class$ = NULL;
        jmethodID *OfflineSorter$BufferSize::mids$ = NULL;
        bool OfflineSorter$BufferSize::live$ = false;

        jclass OfflineSorter$BufferSize::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/OfflineSorter$BufferSize");

            mids$ = new jmethodID[max_mid];
            mids$[mid_automatic_c261dc62] = env->getStaticMethodID(cls, "automatic", "()Lorg/apache/lucene/util/OfflineSorter$BufferSize;");
            mids$[mid_megabytes_80c67993] = env->getStaticMethodID(cls, "megabytes", "(J)Lorg/apache/lucene/util/OfflineSorter$BufferSize;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        OfflineSorter$BufferSize OfflineSorter$BufferSize::automatic()
        {
          jclass cls = env->getClass(initializeClass);
          return OfflineSorter$BufferSize(env->callStaticObjectMethod(cls, mids$[mid_automatic_c261dc62]));
        }

        OfflineSorter$BufferSize OfflineSorter$BufferSize::megabytes(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return OfflineSorter$BufferSize(env->callStaticObjectMethod(cls, mids$[mid_megabytes_80c67993], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_OfflineSorter$BufferSize_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OfflineSorter$BufferSize_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OfflineSorter$BufferSize_automatic(PyTypeObject *type);
        static PyObject *t_OfflineSorter$BufferSize_megabytes(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_OfflineSorter$BufferSize__methods_[] = {
          DECLARE_METHOD(t_OfflineSorter$BufferSize, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter$BufferSize, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter$BufferSize, automatic, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter$BufferSize, megabytes, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(OfflineSorter$BufferSize, t_OfflineSorter$BufferSize, ::java::lang::Object, OfflineSorter$BufferSize, abstract_init, 0, 0, 0, 0, 0);

        void t_OfflineSorter$BufferSize::install(PyObject *module)
        {
          installType(&PY_TYPE(OfflineSorter$BufferSize), module, "OfflineSorter$BufferSize", 0);
        }

        void t_OfflineSorter$BufferSize::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(OfflineSorter$BufferSize).tp_dict, "class_", make_descriptor(OfflineSorter$BufferSize::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(OfflineSorter$BufferSize).tp_dict, "wrapfn_", make_descriptor(t_OfflineSorter$BufferSize::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(OfflineSorter$BufferSize).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_OfflineSorter$BufferSize_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, OfflineSorter$BufferSize::initializeClass, 1)))
            return NULL;
          return t_OfflineSorter$BufferSize::wrap_Object(OfflineSorter$BufferSize(((t_OfflineSorter$BufferSize *) arg)->object.this$));
        }
        static PyObject *t_OfflineSorter$BufferSize_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, OfflineSorter$BufferSize::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_OfflineSorter$BufferSize_automatic(PyTypeObject *type)
        {
          OfflineSorter$BufferSize result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::util::OfflineSorter$BufferSize::automatic());
          return t_OfflineSorter$BufferSize::wrap_Object(result);
        }

        static PyObject *t_OfflineSorter$BufferSize_megabytes(PyTypeObject *type, PyObject *arg)
        {
          jlong a0;
          OfflineSorter$BufferSize result((jobject) NULL);

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::OfflineSorter$BufferSize::megabytes(a0));
            return t_OfflineSorter$BufferSize::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "megabytes", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/fst/FSTCompletionLookup.h"
#include "java/util/Set.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupResult.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/suggest/fst/FSTCompletion.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {

            ::java::lang::Class *FSTCompletionLookup::class$ = NULL;
            jmethodID *FSTCompletionLookup::mids$ = NULL;
            bool FSTCompletionLookup::live$ = false;

            jclass FSTCompletionLookup::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/fst/FSTCompletionLookup");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_7fee6a80] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/suggest/fst/FSTCompletion;Z)V");
                mids$[mid_init$_b3a85a05] = env->getMethodID(cls, "<init>", "(IZ)V");
                mids$[mid_build_1754a234] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/search/suggest/InputIterator;)V");
                mids$[mid_get_a739ccff] = env->getMethodID(cls, "get", "(Ljava/lang/CharSequence;)Ljava/lang/Object;");
                mids$[mid_getCount_54c6a17a] = env->getMethodID(cls, "getCount", "()J");
                mids$[mid_load_f5d6a55d] = env->getMethodID(cls, "load", "(Lorg/apache/lucene/store/DataInput;)Z");
                mids$[mid_lookup_dd3e9f51] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;ZI)Ljava/util/List;");
                mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
                mids$[mid_store_27875f5b] = env->getMethodID(cls, "store", "(Lorg/apache/lucene/store/DataOutput;)Z");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FSTCompletionLookup::FSTCompletionLookup() : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            FSTCompletionLookup::FSTCompletionLookup(const ::org::apache::lucene::search::suggest::fst::FSTCompletion & a0, jboolean a1) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_7fee6a80, a0.this$, a1)) {}

            FSTCompletionLookup::FSTCompletionLookup(jint a0, jboolean a1) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_b3a85a05, a0, a1)) {}

            void FSTCompletionLookup::build(const ::org::apache::lucene::search::suggest::InputIterator & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_build_1754a234], a0.this$);
            }

            ::java::lang::Object FSTCompletionLookup::get(const ::java::lang::CharSequence & a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_a739ccff], a0.this$));
            }

            jlong FSTCompletionLookup::getCount() const
            {
              return env->callLongMethod(this$, mids$[mid_getCount_54c6a17a]);
            }

            jboolean FSTCompletionLookup::load(const ::org::apache::lucene::store::DataInput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_load_f5d6a55d], a0.this$);
            }

            ::java::util::List FSTCompletionLookup::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jboolean a2, jint a3) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_dd3e9f51], a0.this$, a1.this$, a2, a3));
            }

            jlong FSTCompletionLookup::ramBytesUsed() const
            {
              return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
            }

            jboolean FSTCompletionLookup::store(const ::org::apache::lucene::store::DataOutput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_store_27875f5b], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {
            static PyObject *t_FSTCompletionLookup_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FSTCompletionLookup_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FSTCompletionLookup_init_(t_FSTCompletionLookup *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FSTCompletionLookup_build(t_FSTCompletionLookup *self, PyObject *args);
            static PyObject *t_FSTCompletionLookup_get(t_FSTCompletionLookup *self, PyObject *arg);
            static PyObject *t_FSTCompletionLookup_getCount(t_FSTCompletionLookup *self, PyObject *args);
            static PyObject *t_FSTCompletionLookup_load(t_FSTCompletionLookup *self, PyObject *args);
            static PyObject *t_FSTCompletionLookup_lookup(t_FSTCompletionLookup *self, PyObject *args);
            static PyObject *t_FSTCompletionLookup_ramBytesUsed(t_FSTCompletionLookup *self, PyObject *args);
            static PyObject *t_FSTCompletionLookup_store(t_FSTCompletionLookup *self, PyObject *args);
            static PyObject *t_FSTCompletionLookup_get__count(t_FSTCompletionLookup *self, void *data);
            static PyGetSetDef t_FSTCompletionLookup__fields_[] = {
              DECLARE_GET_FIELD(t_FSTCompletionLookup, count),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FSTCompletionLookup__methods_[] = {
              DECLARE_METHOD(t_FSTCompletionLookup, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTCompletionLookup, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTCompletionLookup, build, METH_VARARGS),
              DECLARE_METHOD(t_FSTCompletionLookup, get, METH_O),
              DECLARE_METHOD(t_FSTCompletionLookup, getCount, METH_VARARGS),
              DECLARE_METHOD(t_FSTCompletionLookup, load, METH_VARARGS),
              DECLARE_METHOD(t_FSTCompletionLookup, lookup, METH_VARARGS),
              DECLARE_METHOD(t_FSTCompletionLookup, ramBytesUsed, METH_VARARGS),
              DECLARE_METHOD(t_FSTCompletionLookup, store, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FSTCompletionLookup, t_FSTCompletionLookup, ::org::apache::lucene::search::suggest::Lookup, FSTCompletionLookup, t_FSTCompletionLookup_init_, 0, 0, t_FSTCompletionLookup__fields_, 0, 0);

            void t_FSTCompletionLookup::install(PyObject *module)
            {
              installType(&PY_TYPE(FSTCompletionLookup), module, "FSTCompletionLookup", 0);
            }

            void t_FSTCompletionLookup::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FSTCompletionLookup).tp_dict, "class_", make_descriptor(FSTCompletionLookup::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FSTCompletionLookup).tp_dict, "wrapfn_", make_descriptor(t_FSTCompletionLookup::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FSTCompletionLookup).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FSTCompletionLookup_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FSTCompletionLookup::initializeClass, 1)))
                return NULL;
              return t_FSTCompletionLookup::wrap_Object(FSTCompletionLookup(((t_FSTCompletionLookup *) arg)->object.this$));
            }
            static PyObject *t_FSTCompletionLookup_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FSTCompletionLookup::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FSTCompletionLookup_init_(t_FSTCompletionLookup *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  FSTCompletionLookup object((jobject) NULL);

                  INT_CALL(object = FSTCompletionLookup());
                  self->object = object;
                  break;
                }
                goto err;
               case 2:
                {
                  ::org::apache::lucene::search::suggest::fst::FSTCompletion a0((jobject) NULL);
                  jboolean a1;
                  FSTCompletionLookup object((jobject) NULL);

                  if (!parseArgs(args, "kZ", ::org::apache::lucene::search::suggest::fst::FSTCompletion::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = FSTCompletionLookup(a0, a1));
                    self->object = object;
                    break;
                  }
                }
                {
                  jint a0;
                  jboolean a1;
                  FSTCompletionLookup object((jobject) NULL);

                  if (!parseArgs(args, "IZ", &a0, &a1))
                  {
                    INT_CALL(object = FSTCompletionLookup(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FSTCompletionLookup_build(t_FSTCompletionLookup *self, PyObject *args)
            {
              ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0))
              {
                OBJ_CALL(self->object.build(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(FSTCompletionLookup), (PyObject *) self, "build", args, 2);
            }

            static PyObject *t_FSTCompletionLookup_get(t_FSTCompletionLookup *self, PyObject *arg)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::lang::Object result((jobject) NULL);

              if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_FSTCompletionLookup_getCount(t_FSTCompletionLookup *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getCount());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(FSTCompletionLookup), (PyObject *) self, "getCount", args, 2);
            }

            static PyObject *t_FSTCompletionLookup_load(t_FSTCompletionLookup *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataInput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.load(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(FSTCompletionLookup), (PyObject *) self, "load", args, 2);
            }

            static PyObject *t_FSTCompletionLookup_lookup(t_FSTCompletionLookup *self, PyObject *args)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::util::Set a1((jobject) NULL);
              PyTypeObject **p1;
              jboolean a2;
              jint a3;
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, "OKZI", &::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3))
              {
                OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3));
                return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
              }

              return callSuper(&PY_TYPE(FSTCompletionLookup), (PyObject *) self, "lookup", args, 2);
            }

            static PyObject *t_FSTCompletionLookup_ramBytesUsed(t_FSTCompletionLookup *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.ramBytesUsed());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(FSTCompletionLookup), (PyObject *) self, "ramBytesUsed", args, 2);
            }

            static PyObject *t_FSTCompletionLookup_store(t_FSTCompletionLookup *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.store(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(FSTCompletionLookup), (PyObject *) self, "store", args, 2);
            }

            static PyObject *t_FSTCompletionLookup_get__count(t_FSTCompletionLookup *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object.getCount());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Exception.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Exception::class$ = NULL;
    jmethodID *Exception::mids$ = NULL;
    bool Exception::live$ = false;

    jclass Exception::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Exception");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_c5ec8ca4] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;)V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_01646a2e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Exception::Exception() : ::java::lang::Throwable(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    Exception::Exception(const ::java::lang::Throwable & a0) : ::java::lang::Throwable(env->newObject(initializeClass, &mids$, mid_init$_c5ec8ca4, a0.this$)) {}

    Exception::Exception(const ::java::lang::String & a0) : ::java::lang::Throwable(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    Exception::Exception(const ::java::lang::String & a0, const ::java::lang::Throwable & a1) : ::java::lang::Throwable(env->newObject(initializeClass, &mids$, mid_init$_01646a2e, a0.this$, a1.this$)) {}
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Exception_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Exception_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Exception_init_(t_Exception *self, PyObject *args, PyObject *kwds);

    static PyMethodDef t_Exception__methods_[] = {
      DECLARE_METHOD(t_Exception, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Exception, instance_, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Exception, t_Exception, ::java::lang::Throwable, Exception, t_Exception_init_, 0, 0, 0, 0, 0);

    void t_Exception::install(PyObject *module)
    {
      installType(&PY_TYPE(Exception), module, "Exception", 0);
    }

    void t_Exception::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Exception).tp_dict, "class_", make_descriptor(Exception::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Exception).tp_dict, "wrapfn_", make_descriptor(t_Exception::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Exception).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Exception_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Exception::initializeClass, 1)))
        return NULL;
      return t_Exception::wrap_Object(Exception(((t_Exception *) arg)->object.this$));
    }
    static PyObject *t_Exception_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Exception::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Exception_init_(t_Exception *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          Exception object((jobject) NULL);

          INT_CALL(object = Exception());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::lang::Throwable a0((jobject) NULL);
          Exception object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
          {
            INT_CALL(object = Exception(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Exception object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Exception(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Throwable a1((jobject) NULL);
          Exception object((jobject) NULL);

          if (!parseArgs(args, "sk", ::java::lang::Throwable::initializeClass, &a0, &a1))
          {
            INT_CALL(object = Exception(a0, a1));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FilteredQuery$RandomAccessFilterStrategy.h"
#include "org/apache/lucene/search/Weight.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FilteredQuery$RandomAccessFilterStrategy::class$ = NULL;
        jmethodID *FilteredQuery$RandomAccessFilterStrategy::mids$ = NULL;
        bool FilteredQuery$RandomAccessFilterStrategy::live$ = false;

        jclass FilteredQuery$RandomAccessFilterStrategy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FilteredQuery$RandomAccessFilterStrategy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_filteredScorer_05f41f97] = env->getMethodID(cls, "filteredScorer", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/search/Weight;Lorg/apache/lucene/search/DocIdSet;)Lorg/apache/lucene/search/Scorer;");
            mids$[mid_useRandomAccess_7abf89aa] = env->getMethodID(cls, "useRandomAccess", "(Lorg/apache/lucene/util/Bits;I)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilteredQuery$RandomAccessFilterStrategy::FilteredQuery$RandomAccessFilterStrategy() : ::org::apache::lucene::search::FilteredQuery$FilterStrategy(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::search::Scorer FilteredQuery$RandomAccessFilterStrategy::filteredScorer(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::search::Weight & a1, const ::org::apache::lucene::search::DocIdSet & a2) const
        {
          return ::org::apache::lucene::search::Scorer(env->callObjectMethod(this$, mids$[mid_filteredScorer_05f41f97], a0.this$, a1.this$, a2.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FilteredQuery$RandomAccessFilterStrategy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilteredQuery$RandomAccessFilterStrategy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilteredQuery$RandomAccessFilterStrategy_init_(t_FilteredQuery$RandomAccessFilterStrategy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilteredQuery$RandomAccessFilterStrategy_filteredScorer(t_FilteredQuery$RandomAccessFilterStrategy *self, PyObject *args);

        static PyMethodDef t_FilteredQuery$RandomAccessFilterStrategy__methods_[] = {
          DECLARE_METHOD(t_FilteredQuery$RandomAccessFilterStrategy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilteredQuery$RandomAccessFilterStrategy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilteredQuery$RandomAccessFilterStrategy, filteredScorer, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilteredQuery$RandomAccessFilterStrategy, t_FilteredQuery$RandomAccessFilterStrategy, ::org::apache::lucene::search::FilteredQuery$FilterStrategy, FilteredQuery$RandomAccessFilterStrategy, t_FilteredQuery$RandomAccessFilterStrategy_init_, 0, 0, 0, 0, 0);

        void t_FilteredQuery$RandomAccessFilterStrategy::install(PyObject *module)
        {
          installType(&PY_TYPE(FilteredQuery$RandomAccessFilterStrategy), module, "FilteredQuery$RandomAccessFilterStrategy", 0);
        }

        void t_FilteredQuery$RandomAccessFilterStrategy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilteredQuery$RandomAccessFilterStrategy).tp_dict, "class_", make_descriptor(FilteredQuery$RandomAccessFilterStrategy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilteredQuery$RandomAccessFilterStrategy).tp_dict, "wrapfn_", make_descriptor(t_FilteredQuery$RandomAccessFilterStrategy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilteredQuery$RandomAccessFilterStrategy).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilteredQuery$RandomAccessFilterStrategy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilteredQuery$RandomAccessFilterStrategy::initializeClass, 1)))
            return NULL;
          return t_FilteredQuery$RandomAccessFilterStrategy::wrap_Object(FilteredQuery$RandomAccessFilterStrategy(((t_FilteredQuery$RandomAccessFilterStrategy *) arg)->object.this$));
        }
        static PyObject *t_FilteredQuery$RandomAccessFilterStrategy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilteredQuery$RandomAccessFilterStrategy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilteredQuery$RandomAccessFilterStrategy_init_(t_FilteredQuery$RandomAccessFilterStrategy *self, PyObject *args, PyObject *kwds)
        {
          FilteredQuery$RandomAccessFilterStrategy object((jobject) NULL);

          INT_CALL(object = FilteredQuery$RandomAccessFilterStrategy());
          self->object = object;

          return 0;
        }

        static PyObject *t_FilteredQuery$RandomAccessFilterStrategy_filteredScorer(t_FilteredQuery$RandomAccessFilterStrategy *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::Weight a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet a2((jobject) NULL);
          ::org::apache::lucene::search::Scorer result((jobject) NULL);

          if (!parseArgs(args, "kkk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::search::Weight::initializeClass, ::org::apache::lucene::search::DocIdSet::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.filteredScorer(a0, a1, a2));
            return ::org::apache::lucene::search::t_Scorer::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilteredQuery$RandomAccessFilterStrategy), (PyObject *) self, "filteredScorer", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanOrBuilder.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanQueryBuilder.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *SpanOrBuilder::class$ = NULL;
            jmethodID *SpanOrBuilder::mids$ = NULL;
            bool SpanOrBuilder::live$ = false;

            jclass SpanOrBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/SpanOrBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_d9ca31a9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/xml/builders/SpanQueryBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SpanOrBuilder::SpanOrBuilder(const ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder & a0) : ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase(env->newObject(initializeClass, &mids$, mid_init$_d9ca31a9, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_SpanOrBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SpanOrBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SpanOrBuilder_init_(t_SpanOrBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_SpanOrBuilder__methods_[] = {
              DECLARE_METHOD(t_SpanOrBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanOrBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SpanOrBuilder, t_SpanOrBuilder, ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase, SpanOrBuilder, t_SpanOrBuilder_init_, 0, 0, 0, 0, 0);

            void t_SpanOrBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(SpanOrBuilder), module, "SpanOrBuilder", 0);
            }

            void t_SpanOrBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SpanOrBuilder).tp_dict, "class_", make_descriptor(SpanOrBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SpanOrBuilder).tp_dict, "wrapfn_", make_descriptor(t_SpanOrBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SpanOrBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SpanOrBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SpanOrBuilder::initializeClass, 1)))
                return NULL;
              return t_SpanOrBuilder::wrap_Object(SpanOrBuilder(((t_SpanOrBuilder *) arg)->object.this$));
            }
            static PyObject *t_SpanOrBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SpanOrBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SpanOrBuilder_init_(t_SpanOrBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder a0((jobject) NULL);
              SpanOrBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder::initializeClass, &a0))
              {
                INT_CALL(object = SpanOrBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/FacetLabel.h"
#include "java/lang/String.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *FacetLabel::class$ = NULL;
          jmethodID *FacetLabel::mids$ = NULL;
          jfieldID *FacetLabel::fids$ = NULL;
          bool FacetLabel::live$ = false;
          jint FacetLabel::MAX_CATEGORY_PATH_LENGTH = (jint) 0;

          jclass FacetLabel::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/FacetLabel");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4dd4540c] = env->getMethodID(cls, "<init>", "([Ljava/lang/String;)V");
              mids$[mid_init$_ba45d66a] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[Ljava/lang/String;)V");
              mids$[mid_compareTo_283f83f5] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;)I");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_longHashCode_54c6a17a] = env->getMethodID(cls, "longHashCode", "()J");
              mids$[mid_subpath_38cf071d] = env->getMethodID(cls, "subpath", "(I)Lorg/apache/lucene/facet/taxonomy/FacetLabel;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_components] = env->getFieldID(cls, "components", "[Ljava/lang/String;");
              fids$[fid_length] = env->getFieldID(cls, "length", "I");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              MAX_CATEGORY_PATH_LENGTH = env->getStaticIntField(cls, "MAX_CATEGORY_PATH_LENGTH");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FacetLabel::FacetLabel(const JArray< ::java::lang::String > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4dd4540c, a0.this$)) {}

          FacetLabel::FacetLabel(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ba45d66a, a0.this$, a1.this$)) {}

          jint FacetLabel::compareTo(const FacetLabel & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareTo_283f83f5], a0.this$);
          }

          jboolean FacetLabel::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint FacetLabel::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          jlong FacetLabel::longHashCode() const
          {
            return env->callLongMethod(this$, mids$[mid_longHashCode_54c6a17a]);
          }

          FacetLabel FacetLabel::subpath(jint a0) const
          {
            return FacetLabel(env->callObjectMethod(this$, mids$[mid_subpath_38cf071d], a0));
          }

          ::java::lang::String FacetLabel::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          JArray< ::java::lang::String > FacetLabel::_get_components() const
          {
            return JArray< ::java::lang::String >(env->getObjectField(this$, fids$[fid_components]));
          }

          jint FacetLabel::_get_length() const
          {
            return env->getIntField(this$, fids$[fid_length]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_FacetLabel_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FacetLabel_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FacetLabel_init_(t_FacetLabel *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FacetLabel_compareTo(t_FacetLabel *self, PyObject *arg);
          static PyObject *t_FacetLabel_equals(t_FacetLabel *self, PyObject *args);
          static PyObject *t_FacetLabel_hashCode(t_FacetLabel *self, PyObject *args);
          static PyObject *t_FacetLabel_longHashCode(t_FacetLabel *self);
          static PyObject *t_FacetLabel_subpath(t_FacetLabel *self, PyObject *arg);
          static PyObject *t_FacetLabel_toString(t_FacetLabel *self, PyObject *args);
          static PyObject *t_FacetLabel_get__components(t_FacetLabel *self, void *data);
          static PyObject *t_FacetLabel_get__length(t_FacetLabel *self, void *data);

          static PyGetSetDef t_FacetLabel__fields_[] = {
            DECLARE_GET_FIELD(t_FacetLabel, components),
            DECLARE_GET_FIELD(t_FacetLabel, length),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FacetLabel__methods_[] = {
            DECLARE_METHOD(t_FacetLabel, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FacetLabel, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FacetLabel, compareTo, METH_O),
            DECLARE_METHOD(t_FacetLabel, equals, METH_VARARGS),
            DECLARE_METHOD(t_FacetLabel, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_FacetLabel, longHashCode, METH_NOARGS),
            DECLARE_METHOD(t_FacetLabel, subpath, METH_O),
            DECLARE_METHOD(t_FacetLabel, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FacetLabel, t_FacetLabel, ::java::lang::Object, FacetLabel, t_FacetLabel_init_, 0, 0, t_FacetLabel__fields_, 0, 0);

          void t_FacetLabel::install(PyObject *module)
          {
            installType(&PY_TYPE(FacetLabel), module, "FacetLabel", 0);
          }

          void t_FacetLabel::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FacetLabel).tp_dict, "class_", make_descriptor(FacetLabel::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FacetLabel).tp_dict, "wrapfn_", make_descriptor(t_FacetLabel::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FacetLabel).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(FacetLabel::initializeClass);
            PyDict_SetItemString(PY_TYPE(FacetLabel).tp_dict, "MAX_CATEGORY_PATH_LENGTH", make_descriptor(FacetLabel::MAX_CATEGORY_PATH_LENGTH));
          }

          static PyObject *t_FacetLabel_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FacetLabel::initializeClass, 1)))
              return NULL;
            return t_FacetLabel::wrap_Object(FacetLabel(((t_FacetLabel *) arg)->object.this$));
          }
          static PyObject *t_FacetLabel_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FacetLabel::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FacetLabel_init_(t_FacetLabel *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                JArray< ::java::lang::String > a0((jobject) NULL);
                FacetLabel object((jobject) NULL);

                if (!parseArgs(args, "[s", &a0))
                {
                  INT_CALL(object = FacetLabel(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                JArray< ::java::lang::String > a1((jobject) NULL);
                FacetLabel object((jobject) NULL);

                if (!parseArgs(args, "s[s", &a0, &a1))
                {
                  INT_CALL(object = FacetLabel(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FacetLabel_compareTo(t_FacetLabel *self, PyObject *arg)
          {
            FacetLabel a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", FacetLabel::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.compareTo(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
            return NULL;
          }

          static PyObject *t_FacetLabel_equals(t_FacetLabel *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FacetLabel), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_FacetLabel_hashCode(t_FacetLabel *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(FacetLabel), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_FacetLabel_longHashCode(t_FacetLabel *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.longHashCode());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_FacetLabel_subpath(t_FacetLabel *self, PyObject *arg)
          {
            jint a0;
            FacetLabel result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.subpath(a0));
              return t_FacetLabel::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "subpath", arg);
            return NULL;
          }

          static PyObject *t_FacetLabel_toString(t_FacetLabel *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(FacetLabel), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FacetLabel_get__components(t_FacetLabel *self, void *data)
          {
            JArray< ::java::lang::String > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_components());
            return JArray<jstring>(value.this$).wrap();
          }

          static PyObject *t_FacetLabel_get__length(t_FacetLabel *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_length());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/io/IOException.h"
#include "java/io/Closeable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *TokenStream::class$ = NULL;
        jmethodID *TokenStream::mids$ = NULL;
        bool TokenStream::live$ = false;
        ::org::apache::lucene::util::AttributeFactory *TokenStream::DEFAULT_TOKEN_ATTRIBUTE_FACTORY = NULL;

        jclass TokenStream::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/TokenStream");

            mids$ = new jmethodID[max_mid];
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
            mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
            mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_TOKEN_ATTRIBUTE_FACTORY = new ::org::apache::lucene::util::AttributeFactory(env->getStaticObjectField(cls, "DEFAULT_TOKEN_ATTRIBUTE_FACTORY", "Lorg/apache/lucene/util/AttributeFactory;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void TokenStream::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void TokenStream::end() const
        {
          env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
        }

        jboolean TokenStream::incrementToken() const
        {
          return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
        }

        void TokenStream::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_TokenStream_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TokenStream_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TokenStream_close(t_TokenStream *self);
        static PyObject *t_TokenStream_end(t_TokenStream *self);
        static PyObject *t_TokenStream_incrementToken(t_TokenStream *self);
        static PyObject *t_TokenStream_reset(t_TokenStream *self);

        static PyMethodDef t_TokenStream__methods_[] = {
          DECLARE_METHOD(t_TokenStream, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TokenStream, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TokenStream, close, METH_NOARGS),
          DECLARE_METHOD(t_TokenStream, end, METH_NOARGS),
          DECLARE_METHOD(t_TokenStream, incrementToken, METH_NOARGS),
          DECLARE_METHOD(t_TokenStream, reset, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TokenStream, t_TokenStream, ::org::apache::lucene::util::AttributeSource, TokenStream, abstract_init, 0, 0, 0, 0, 0);

        void t_TokenStream::install(PyObject *module)
        {
          installType(&PY_TYPE(TokenStream), module, "TokenStream", 0);
        }

        void t_TokenStream::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TokenStream).tp_dict, "class_", make_descriptor(TokenStream::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TokenStream).tp_dict, "wrapfn_", make_descriptor(t_TokenStream::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TokenStream).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(TokenStream::initializeClass);
          PyDict_SetItemString(PY_TYPE(TokenStream).tp_dict, "DEFAULT_TOKEN_ATTRIBUTE_FACTORY", make_descriptor(::org::apache::lucene::util::t_AttributeFactory::wrap_Object(*TokenStream::DEFAULT_TOKEN_ATTRIBUTE_FACTORY)));
        }

        static PyObject *t_TokenStream_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TokenStream::initializeClass, 1)))
            return NULL;
          return t_TokenStream::wrap_Object(TokenStream(((t_TokenStream *) arg)->object.this$));
        }
        static PyObject *t_TokenStream_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TokenStream::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TokenStream_close(t_TokenStream *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_TokenStream_end(t_TokenStream *self)
        {
          OBJ_CALL(self->object.end());
          Py_RETURN_NONE;
        }

        static PyObject *t_TokenStream_incrementToken(t_TokenStream *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.incrementToken());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_TokenStream_reset(t_TokenStream *self)
        {
          OBJ_CALL(self->object.reset());
          Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/IntSequenceOutputs.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *IntSequenceOutputs::class$ = NULL;
          jmethodID *IntSequenceOutputs::mids$ = NULL;
          bool IntSequenceOutputs::live$ = false;

          jclass IntSequenceOutputs::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/IntSequenceOutputs");

              mids$ = new jmethodID[max_mid];
              mids$[mid_add_d1486e01] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/IntsRef;Lorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/IntsRef;");
              mids$[mid_common_d1486e01] = env->getMethodID(cls, "common", "(Lorg/apache/lucene/util/IntsRef;Lorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/IntsRef;");
              mids$[mid_getNoOutput_5b734841] = env->getMethodID(cls, "getNoOutput", "()Lorg/apache/lucene/util/IntsRef;");
              mids$[mid_getSingleton_5d304c4b] = env->getStaticMethodID(cls, "getSingleton", "()Lorg/apache/lucene/util/fst/IntSequenceOutputs;");
              mids$[mid_outputToString_6c8ec0cf] = env->getMethodID(cls, "outputToString", "(Lorg/apache/lucene/util/IntsRef;)Ljava/lang/String;");
              mids$[mid_read_7ae3e2dc] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/DataInput;)Lorg/apache/lucene/util/IntsRef;");
              mids$[mid_skipOutput_f5d6a551] = env->getMethodID(cls, "skipOutput", "(Lorg/apache/lucene/store/DataInput;)V");
              mids$[mid_subtract_d1486e01] = env->getMethodID(cls, "subtract", "(Lorg/apache/lucene/util/IntsRef;Lorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/IntsRef;");
              mids$[mid_write_e1973ab5] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/util/IntsRef;Lorg/apache/lucene/store/DataOutput;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::util::IntsRef IntSequenceOutputs::add(const ::org::apache::lucene::util::IntsRef & a0, const ::org::apache::lucene::util::IntsRef & a1) const
          {
            return ::org::apache::lucene::util::IntsRef(env->callObjectMethod(this$, mids$[mid_add_d1486e01], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::IntsRef IntSequenceOutputs::common(const ::org::apache::lucene::util::IntsRef & a0, const ::org::apache::lucene::util::IntsRef & a1) const
          {
            return ::org::apache::lucene::util::IntsRef(env->callObjectMethod(this$, mids$[mid_common_d1486e01], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::IntsRef IntSequenceOutputs::getNoOutput() const
          {
            return ::org::apache::lucene::util::IntsRef(env->callObjectMethod(this$, mids$[mid_getNoOutput_5b734841]));
          }

          IntSequenceOutputs IntSequenceOutputs::getSingleton()
          {
            jclass cls = env->getClass(initializeClass);
            return IntSequenceOutputs(env->callStaticObjectMethod(cls, mids$[mid_getSingleton_5d304c4b]));
          }

          ::java::lang::String IntSequenceOutputs::outputToString(const ::org::apache::lucene::util::IntsRef & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_outputToString_6c8ec0cf], a0.this$));
          }

          ::org::apache::lucene::util::IntsRef IntSequenceOutputs::read(const ::org::apache::lucene::store::DataInput & a0) const
          {
            return ::org::apache::lucene::util::IntsRef(env->callObjectMethod(this$, mids$[mid_read_7ae3e2dc], a0.this$));
          }

          void IntSequenceOutputs::skipOutput(const ::org::apache::lucene::store::DataInput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_skipOutput_f5d6a551], a0.this$);
          }

          ::org::apache::lucene::util::IntsRef IntSequenceOutputs::subtract(const ::org::apache::lucene::util::IntsRef & a0, const ::org::apache::lucene::util::IntsRef & a1) const
          {
            return ::org::apache::lucene::util::IntsRef(env->callObjectMethod(this$, mids$[mid_subtract_d1486e01], a0.this$, a1.this$));
          }

          void IntSequenceOutputs::write(const ::org::apache::lucene::util::IntsRef & a0, const ::org::apache::lucene::store::DataOutput & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_write_e1973ab5], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_IntSequenceOutputs_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntSequenceOutputs_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntSequenceOutputs_of_(t_IntSequenceOutputs *self, PyObject *args);
          static PyObject *t_IntSequenceOutputs_add(t_IntSequenceOutputs *self, PyObject *args);
          static PyObject *t_IntSequenceOutputs_common(t_IntSequenceOutputs *self, PyObject *args);
          static PyObject *t_IntSequenceOutputs_getNoOutput(t_IntSequenceOutputs *self, PyObject *args);
          static PyObject *t_IntSequenceOutputs_getSingleton(PyTypeObject *type);
          static PyObject *t_IntSequenceOutputs_outputToString(t_IntSequenceOutputs *self, PyObject *args);
          static PyObject *t_IntSequenceOutputs_read(t_IntSequenceOutputs *self, PyObject *args);
          static PyObject *t_IntSequenceOutputs_skipOutput(t_IntSequenceOutputs *self, PyObject *args);
          static PyObject *t_IntSequenceOutputs_subtract(t_IntSequenceOutputs *self, PyObject *args);
          static PyObject *t_IntSequenceOutputs_write(t_IntSequenceOutputs *self, PyObject *args);
          static PyObject *t_IntSequenceOutputs_get__noOutput(t_IntSequenceOutputs *self, void *data);
          static PyObject *t_IntSequenceOutputs_get__singleton(t_IntSequenceOutputs *self, void *data);
          static PyObject *t_IntSequenceOutputs_get__parameters_(t_IntSequenceOutputs *self, void *data);
          static PyGetSetDef t_IntSequenceOutputs__fields_[] = {
            DECLARE_GET_FIELD(t_IntSequenceOutputs, noOutput),
            DECLARE_GET_FIELD(t_IntSequenceOutputs, singleton),
            DECLARE_GET_FIELD(t_IntSequenceOutputs, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_IntSequenceOutputs__methods_[] = {
            DECLARE_METHOD(t_IntSequenceOutputs, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntSequenceOutputs, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntSequenceOutputs, of_, METH_VARARGS),
            DECLARE_METHOD(t_IntSequenceOutputs, add, METH_VARARGS),
            DECLARE_METHOD(t_IntSequenceOutputs, common, METH_VARARGS),
            DECLARE_METHOD(t_IntSequenceOutputs, getNoOutput, METH_VARARGS),
            DECLARE_METHOD(t_IntSequenceOutputs, getSingleton, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_IntSequenceOutputs, outputToString, METH_VARARGS),
            DECLARE_METHOD(t_IntSequenceOutputs, read, METH_VARARGS),
            DECLARE_METHOD(t_IntSequenceOutputs, skipOutput, METH_VARARGS),
            DECLARE_METHOD(t_IntSequenceOutputs, subtract, METH_VARARGS),
            DECLARE_METHOD(t_IntSequenceOutputs, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IntSequenceOutputs, t_IntSequenceOutputs, ::org::apache::lucene::util::fst::Outputs, IntSequenceOutputs, abstract_init, 0, 0, t_IntSequenceOutputs__fields_, 0, 0);
          PyObject *t_IntSequenceOutputs::wrap_Object(const IntSequenceOutputs& object, PyTypeObject *p0)
          {
            PyObject *obj = t_IntSequenceOutputs::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_IntSequenceOutputs *self = (t_IntSequenceOutputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_IntSequenceOutputs::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_IntSequenceOutputs::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_IntSequenceOutputs *self = (t_IntSequenceOutputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_IntSequenceOutputs::install(PyObject *module)
          {
            installType(&PY_TYPE(IntSequenceOutputs), module, "IntSequenceOutputs", 0);
          }

          void t_IntSequenceOutputs::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IntSequenceOutputs).tp_dict, "class_", make_descriptor(IntSequenceOutputs::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IntSequenceOutputs).tp_dict, "wrapfn_", make_descriptor(t_IntSequenceOutputs::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IntSequenceOutputs).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IntSequenceOutputs_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IntSequenceOutputs::initializeClass, 1)))
              return NULL;
            return t_IntSequenceOutputs::wrap_Object(IntSequenceOutputs(((t_IntSequenceOutputs *) arg)->object.this$));
          }
          static PyObject *t_IntSequenceOutputs_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IntSequenceOutputs::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_IntSequenceOutputs_of_(t_IntSequenceOutputs *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_IntSequenceOutputs_add(t_IntSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
            ::org::apache::lucene::util::IntsRef a1((jobject) NULL);
            ::org::apache::lucene::util::IntsRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::IntsRef::initializeClass, ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.add(a0, a1));
              return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IntSequenceOutputs), (PyObject *) self, "add", args, 2);
          }

          static PyObject *t_IntSequenceOutputs_common(t_IntSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
            ::org::apache::lucene::util::IntsRef a1((jobject) NULL);
            ::org::apache::lucene::util::IntsRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::IntsRef::initializeClass, ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.common(a0, a1));
              return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IntSequenceOutputs), (PyObject *) self, "common", args, 2);
          }

          static PyObject *t_IntSequenceOutputs_getNoOutput(t_IntSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::IntsRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getNoOutput());
              return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IntSequenceOutputs), (PyObject *) self, "getNoOutput", args, 2);
          }

          static PyObject *t_IntSequenceOutputs_getSingleton(PyTypeObject *type)
          {
            IntSequenceOutputs result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::fst::IntSequenceOutputs::getSingleton());
            return t_IntSequenceOutputs::wrap_Object(result);
          }

          static PyObject *t_IntSequenceOutputs_outputToString(t_IntSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::IntsRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.outputToString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(IntSequenceOutputs), (PyObject *) self, "outputToString", args, 2);
          }

          static PyObject *t_IntSequenceOutputs_read(t_IntSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::org::apache::lucene::util::IntsRef result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.read(a0));
              return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IntSequenceOutputs), (PyObject *) self, "read", args, 2);
          }

          static PyObject *t_IntSequenceOutputs_skipOutput(t_IntSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.skipOutput(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(IntSequenceOutputs), (PyObject *) self, "skipOutput", args, 2);
          }

          static PyObject *t_IntSequenceOutputs_subtract(t_IntSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
            ::org::apache::lucene::util::IntsRef a1((jobject) NULL);
            ::org::apache::lucene::util::IntsRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::IntsRef::initializeClass, ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.subtract(a0, a1));
              return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IntSequenceOutputs), (PyObject *) self, "subtract", args, 2);
          }

          static PyObject *t_IntSequenceOutputs_write(t_IntSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
            ::org::apache::lucene::store::DataOutput a1((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::IntsRef::initializeClass, ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.write(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(IntSequenceOutputs), (PyObject *) self, "write", args, 2);
          }
          static PyObject *t_IntSequenceOutputs_get__parameters_(t_IntSequenceOutputs *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_IntSequenceOutputs_get__noOutput(t_IntSequenceOutputs *self, void *data)
          {
            ::org::apache::lucene::util::IntsRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getNoOutput());
            return ::org::apache::lucene::util::t_IntsRef::wrap_Object(value);
          }

          static PyObject *t_IntSequenceOutputs_get__singleton(t_IntSequenceOutputs *self, void *data)
          {
            IntSequenceOutputs value((jobject) NULL);
            OBJ_CALL(value = self->object.getSingleton());
            return t_IntSequenceOutputs::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$Operator.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {

              ::java::lang::Class *StandardQueryConfigHandler$Operator::class$ = NULL;
              jmethodID *StandardQueryConfigHandler$Operator::mids$ = NULL;
              bool StandardQueryConfigHandler$Operator::live$ = false;
              StandardQueryConfigHandler$Operator *StandardQueryConfigHandler$Operator::AND = NULL;
              StandardQueryConfigHandler$Operator *StandardQueryConfigHandler$Operator::OR = NULL;

              jclass StandardQueryConfigHandler$Operator::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$Operator");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_valueOf_5228e32d] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$Operator;");
                  mids$[mid_values_6f704b93] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$Operator;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  cls = (jclass) class$->this$;

                  AND = new StandardQueryConfigHandler$Operator(env->getStaticObjectField(cls, "AND", "Lorg/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$Operator;"));
                  OR = new StandardQueryConfigHandler$Operator(env->getStaticObjectField(cls, "OR", "Lorg/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$Operator;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              StandardQueryConfigHandler$Operator StandardQueryConfigHandler$Operator::valueOf(const ::java::lang::String & a0)
              {
                jclass cls = env->getClass(initializeClass);
                return StandardQueryConfigHandler$Operator(env->callStaticObjectMethod(cls, mids$[mid_valueOf_5228e32d], a0.this$));
              }

              JArray< StandardQueryConfigHandler$Operator > StandardQueryConfigHandler$Operator::values()
              {
                jclass cls = env->getClass(initializeClass);
                return JArray< StandardQueryConfigHandler$Operator >(env->callStaticObjectMethod(cls, mids$[mid_values_6f704b93]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {
              static PyObject *t_StandardQueryConfigHandler$Operator_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardQueryConfigHandler$Operator_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardQueryConfigHandler$Operator_of_(t_StandardQueryConfigHandler$Operator *self, PyObject *args);
              static PyObject *t_StandardQueryConfigHandler$Operator_valueOf(PyTypeObject *type, PyObject *args);
              static PyObject *t_StandardQueryConfigHandler$Operator_values(PyTypeObject *type);
              static PyObject *t_StandardQueryConfigHandler$Operator_get__parameters_(t_StandardQueryConfigHandler$Operator *self, void *data);
              static PyGetSetDef t_StandardQueryConfigHandler$Operator__fields_[] = {
                DECLARE_GET_FIELD(t_StandardQueryConfigHandler$Operator, parameters_),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_StandardQueryConfigHandler$Operator__methods_[] = {
                DECLARE_METHOD(t_StandardQueryConfigHandler$Operator, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardQueryConfigHandler$Operator, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardQueryConfigHandler$Operator, of_, METH_VARARGS),
                DECLARE_METHOD(t_StandardQueryConfigHandler$Operator, valueOf, METH_VARARGS | METH_CLASS),
                DECLARE_METHOD(t_StandardQueryConfigHandler$Operator, values, METH_NOARGS | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(StandardQueryConfigHandler$Operator, t_StandardQueryConfigHandler$Operator, ::java::lang::Enum, StandardQueryConfigHandler$Operator, abstract_init, 0, 0, t_StandardQueryConfigHandler$Operator__fields_, 0, 0);
              PyObject *t_StandardQueryConfigHandler$Operator::wrap_Object(const StandardQueryConfigHandler$Operator& object, PyTypeObject *p0)
              {
                PyObject *obj = t_StandardQueryConfigHandler$Operator::wrap_Object(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_StandardQueryConfigHandler$Operator *self = (t_StandardQueryConfigHandler$Operator *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              PyObject *t_StandardQueryConfigHandler$Operator::wrap_jobject(const jobject& object, PyTypeObject *p0)
              {
                PyObject *obj = t_StandardQueryConfigHandler$Operator::wrap_jobject(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_StandardQueryConfigHandler$Operator *self = (t_StandardQueryConfigHandler$Operator *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              void t_StandardQueryConfigHandler$Operator::install(PyObject *module)
              {
                installType(&PY_TYPE(StandardQueryConfigHandler$Operator), module, "StandardQueryConfigHandler$Operator", 0);
              }

              void t_StandardQueryConfigHandler$Operator::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$Operator).tp_dict, "class_", make_descriptor(StandardQueryConfigHandler$Operator::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$Operator).tp_dict, "wrapfn_", make_descriptor(t_StandardQueryConfigHandler$Operator::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$Operator).tp_dict, "boxfn_", make_descriptor(boxObject));
                env->getClass(StandardQueryConfigHandler$Operator::initializeClass);
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$Operator).tp_dict, "AND", make_descriptor(t_StandardQueryConfigHandler$Operator::wrap_Object(*StandardQueryConfigHandler$Operator::AND)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$Operator).tp_dict, "OR", make_descriptor(t_StandardQueryConfigHandler$Operator::wrap_Object(*StandardQueryConfigHandler$Operator::OR)));
              }

              static PyObject *t_StandardQueryConfigHandler$Operator_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StandardQueryConfigHandler$Operator::initializeClass, 1)))
                  return NULL;
                return t_StandardQueryConfigHandler$Operator::wrap_Object(StandardQueryConfigHandler$Operator(((t_StandardQueryConfigHandler$Operator *) arg)->object.this$));
              }
              static PyObject *t_StandardQueryConfigHandler$Operator_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StandardQueryConfigHandler$Operator::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_StandardQueryConfigHandler$Operator_of_(t_StandardQueryConfigHandler$Operator *self, PyObject *args)
              {
                if (!parseArg(args, "T", 1, &(self->parameters)))
                  Py_RETURN_SELF;
                return PyErr_SetArgsError((PyObject *) self, "of_", args);
              }

              static PyObject *t_StandardQueryConfigHandler$Operator_valueOf(PyTypeObject *type, PyObject *args)
              {
                ::java::lang::String a0((jobject) NULL);
                StandardQueryConfigHandler$Operator result((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::standard::config::StandardQueryConfigHandler$Operator::valueOf(a0));
                  return t_StandardQueryConfigHandler$Operator::wrap_Object(result);
                }

                return callSuper(type, "valueOf", args, 2);
              }

              static PyObject *t_StandardQueryConfigHandler$Operator_values(PyTypeObject *type)
              {
                JArray< StandardQueryConfigHandler$Operator > result((jobject) NULL);
                OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::standard::config::StandardQueryConfigHandler$Operator::values());
                return JArray<jobject>(result.this$).wrap(t_StandardQueryConfigHandler$Operator::wrap_jobject);
              }
              static PyObject *t_StandardQueryConfigHandler$Operator_get__parameters_(t_StandardQueryConfigHandler$Operator *self, void *data)
              {
                return typeParameters(self->parameters, sizeof(self->parameters));
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/InvalidTokenOffsetsException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *InvalidTokenOffsetsException::class$ = NULL;
          jmethodID *InvalidTokenOffsetsException::mids$ = NULL;
          bool InvalidTokenOffsetsException::live$ = false;

          jclass InvalidTokenOffsetsException::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/InvalidTokenOffsetsException");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          InvalidTokenOffsetsException::InvalidTokenOffsetsException(const ::java::lang::String & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_InvalidTokenOffsetsException_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_InvalidTokenOffsetsException_instance_(PyTypeObject *type, PyObject *arg);
          static int t_InvalidTokenOffsetsException_init_(t_InvalidTokenOffsetsException *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_InvalidTokenOffsetsException__methods_[] = {
            DECLARE_METHOD(t_InvalidTokenOffsetsException, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_InvalidTokenOffsetsException, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(InvalidTokenOffsetsException, t_InvalidTokenOffsetsException, ::java::lang::Exception, InvalidTokenOffsetsException, t_InvalidTokenOffsetsException_init_, 0, 0, 0, 0, 0);

          void t_InvalidTokenOffsetsException::install(PyObject *module)
          {
            installType(&PY_TYPE(InvalidTokenOffsetsException), module, "InvalidTokenOffsetsException", 0);
          }

          void t_InvalidTokenOffsetsException::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(InvalidTokenOffsetsException).tp_dict, "class_", make_descriptor(InvalidTokenOffsetsException::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(InvalidTokenOffsetsException).tp_dict, "wrapfn_", make_descriptor(t_InvalidTokenOffsetsException::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(InvalidTokenOffsetsException).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_InvalidTokenOffsetsException_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, InvalidTokenOffsetsException::initializeClass, 1)))
              return NULL;
            return t_InvalidTokenOffsetsException::wrap_Object(InvalidTokenOffsetsException(((t_InvalidTokenOffsetsException *) arg)->object.this$));
          }
          static PyObject *t_InvalidTokenOffsetsException_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, InvalidTokenOffsetsException::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_InvalidTokenOffsetsException_init_(t_InvalidTokenOffsetsException *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            InvalidTokenOffsetsException object((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              INT_CALL(object = InvalidTokenOffsetsException(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/SegmentInfoFormat.h"
#include "org/apache/lucene/codecs/SegmentInfoReader.h"
#include "org/apache/lucene/codecs/SegmentInfoWriter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *SegmentInfoFormat::class$ = NULL;
        jmethodID *SegmentInfoFormat::mids$ = NULL;
        bool SegmentInfoFormat::live$ = false;

        jclass SegmentInfoFormat::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/SegmentInfoFormat");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getSegmentInfoReader_1e88b6e7] = env->getMethodID(cls, "getSegmentInfoReader", "()Lorg/apache/lucene/codecs/SegmentInfoReader;");
            mids$[mid_getSegmentInfoWriter_2d4ab533] = env->getMethodID(cls, "getSegmentInfoWriter", "()Lorg/apache/lucene/codecs/SegmentInfoWriter;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::codecs::SegmentInfoReader SegmentInfoFormat::getSegmentInfoReader() const
        {
          return ::org::apache::lucene::codecs::SegmentInfoReader(env->callObjectMethod(this$, mids$[mid_getSegmentInfoReader_1e88b6e7]));
        }

        ::org::apache::lucene::codecs::SegmentInfoWriter SegmentInfoFormat::getSegmentInfoWriter() const
        {
          return ::org::apache::lucene::codecs::SegmentInfoWriter(env->callObjectMethod(this$, mids$[mid_getSegmentInfoWriter_2d4ab533]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_SegmentInfoFormat_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentInfoFormat_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentInfoFormat_getSegmentInfoReader(t_SegmentInfoFormat *self);
        static PyObject *t_SegmentInfoFormat_getSegmentInfoWriter(t_SegmentInfoFormat *self);
        static PyObject *t_SegmentInfoFormat_get__segmentInfoReader(t_SegmentInfoFormat *self, void *data);
        static PyObject *t_SegmentInfoFormat_get__segmentInfoWriter(t_SegmentInfoFormat *self, void *data);
        static PyGetSetDef t_SegmentInfoFormat__fields_[] = {
          DECLARE_GET_FIELD(t_SegmentInfoFormat, segmentInfoReader),
          DECLARE_GET_FIELD(t_SegmentInfoFormat, segmentInfoWriter),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SegmentInfoFormat__methods_[] = {
          DECLARE_METHOD(t_SegmentInfoFormat, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfoFormat, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfoFormat, getSegmentInfoReader, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfoFormat, getSegmentInfoWriter, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SegmentInfoFormat, t_SegmentInfoFormat, ::java::lang::Object, SegmentInfoFormat, abstract_init, 0, 0, t_SegmentInfoFormat__fields_, 0, 0);

        void t_SegmentInfoFormat::install(PyObject *module)
        {
          installType(&PY_TYPE(SegmentInfoFormat), module, "SegmentInfoFormat", 0);
        }

        void t_SegmentInfoFormat::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SegmentInfoFormat).tp_dict, "class_", make_descriptor(SegmentInfoFormat::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SegmentInfoFormat).tp_dict, "wrapfn_", make_descriptor(t_SegmentInfoFormat::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SegmentInfoFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SegmentInfoFormat_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SegmentInfoFormat::initializeClass, 1)))
            return NULL;
          return t_SegmentInfoFormat::wrap_Object(SegmentInfoFormat(((t_SegmentInfoFormat *) arg)->object.this$));
        }
        static PyObject *t_SegmentInfoFormat_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SegmentInfoFormat::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SegmentInfoFormat_getSegmentInfoReader(t_SegmentInfoFormat *self)
        {
          ::org::apache::lucene::codecs::SegmentInfoReader result((jobject) NULL);
          OBJ_CALL(result = self->object.getSegmentInfoReader());
          return ::org::apache::lucene::codecs::t_SegmentInfoReader::wrap_Object(result);
        }

        static PyObject *t_SegmentInfoFormat_getSegmentInfoWriter(t_SegmentInfoFormat *self)
        {
          ::org::apache::lucene::codecs::SegmentInfoWriter result((jobject) NULL);
          OBJ_CALL(result = self->object.getSegmentInfoWriter());
          return ::org::apache::lucene::codecs::t_SegmentInfoWriter::wrap_Object(result);
        }

        static PyObject *t_SegmentInfoFormat_get__segmentInfoReader(t_SegmentInfoFormat *self, void *data)
        {
          ::org::apache::lucene::codecs::SegmentInfoReader value((jobject) NULL);
          OBJ_CALL(value = self->object.getSegmentInfoReader());
          return ::org::apache::lucene::codecs::t_SegmentInfoReader::wrap_Object(value);
        }

        static PyObject *t_SegmentInfoFormat_get__segmentInfoWriter(t_SegmentInfoFormat *self, void *data)
        {
          ::org::apache::lucene::codecs::SegmentInfoWriter value((jobject) NULL);
          OBJ_CALL(value = self->object.getSegmentInfoWriter());
          return ::org::apache::lucene::codecs::t_SegmentInfoWriter::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/NamedSPILoader$NamedSPI.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *NamedSPILoader$NamedSPI::class$ = NULL;
        jmethodID *NamedSPILoader$NamedSPI::mids$ = NULL;
        bool NamedSPILoader$NamedSPI::live$ = false;

        jclass NamedSPILoader$NamedSPI::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/NamedSPILoader$NamedSPI");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getName_14c7b5c5] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::String NamedSPILoader$NamedSPI::getName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_NamedSPILoader$NamedSPI_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NamedSPILoader$NamedSPI_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NamedSPILoader$NamedSPI_of_(t_NamedSPILoader$NamedSPI *self, PyObject *args);
        static PyObject *t_NamedSPILoader$NamedSPI_getName(t_NamedSPILoader$NamedSPI *self);
        static PyObject *t_NamedSPILoader$NamedSPI_get__name(t_NamedSPILoader$NamedSPI *self, void *data);
        static PyObject *t_NamedSPILoader$NamedSPI_get__parameters_(t_NamedSPILoader$NamedSPI *self, void *data);
        static PyGetSetDef t_NamedSPILoader$NamedSPI__fields_[] = {
          DECLARE_GET_FIELD(t_NamedSPILoader$NamedSPI, name),
          DECLARE_GET_FIELD(t_NamedSPILoader$NamedSPI, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_NamedSPILoader$NamedSPI__methods_[] = {
          DECLARE_METHOD(t_NamedSPILoader$NamedSPI, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NamedSPILoader$NamedSPI, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NamedSPILoader$NamedSPI, of_, METH_VARARGS),
          DECLARE_METHOD(t_NamedSPILoader$NamedSPI, getName, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NamedSPILoader$NamedSPI, t_NamedSPILoader$NamedSPI, ::java::lang::Object, NamedSPILoader$NamedSPI, abstract_init, 0, 0, t_NamedSPILoader$NamedSPI__fields_, 0, 0);
        PyObject *t_NamedSPILoader$NamedSPI::wrap_Object(const NamedSPILoader$NamedSPI& object, PyTypeObject *p0)
        {
          PyObject *obj = t_NamedSPILoader$NamedSPI::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_NamedSPILoader$NamedSPI *self = (t_NamedSPILoader$NamedSPI *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_NamedSPILoader$NamedSPI::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_NamedSPILoader$NamedSPI::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_NamedSPILoader$NamedSPI *self = (t_NamedSPILoader$NamedSPI *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_NamedSPILoader$NamedSPI::install(PyObject *module)
        {
          installType(&PY_TYPE(NamedSPILoader$NamedSPI), module, "NamedSPILoader$NamedSPI", 0);
        }

        void t_NamedSPILoader$NamedSPI::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NamedSPILoader$NamedSPI).tp_dict, "class_", make_descriptor(NamedSPILoader$NamedSPI::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NamedSPILoader$NamedSPI).tp_dict, "wrapfn_", make_descriptor(t_NamedSPILoader$NamedSPI::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NamedSPILoader$NamedSPI).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NamedSPILoader$NamedSPI_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NamedSPILoader$NamedSPI::initializeClass, 1)))
            return NULL;
          return t_NamedSPILoader$NamedSPI::wrap_Object(NamedSPILoader$NamedSPI(((t_NamedSPILoader$NamedSPI *) arg)->object.this$));
        }
        static PyObject *t_NamedSPILoader$NamedSPI_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NamedSPILoader$NamedSPI::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NamedSPILoader$NamedSPI_of_(t_NamedSPILoader$NamedSPI *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_NamedSPILoader$NamedSPI_getName(t_NamedSPILoader$NamedSPI *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getName());
          return j2p(result);
        }
        static PyObject *t_NamedSPILoader$NamedSPI_get__parameters_(t_NamedSPILoader$NamedSPI *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_NamedSPILoader$NamedSPI_get__name(t_NamedSPILoader$NamedSPI *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getName());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/UnsortedInputIterator.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "java/util/Set.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *UnsortedInputIterator::class$ = NULL;
          jmethodID *UnsortedInputIterator::mids$ = NULL;
          bool UnsortedInputIterator::live$ = false;

          jclass UnsortedInputIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/UnsortedInputIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_1754a234] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/suggest/InputIterator;)V");
              mids$[mid_contexts_03e99967] = env->getMethodID(cls, "contexts", "()Ljava/util/Set;");
              mids$[mid_next_4ae19461] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_payload_4ae19461] = env->getMethodID(cls, "payload", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_weight_54c6a17a] = env->getMethodID(cls, "weight", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          UnsortedInputIterator::UnsortedInputIterator(const ::org::apache::lucene::search::suggest::InputIterator & a0) : ::org::apache::lucene::search::suggest::BufferedInputIterator(env->newObject(initializeClass, &mids$, mid_init$_1754a234, a0.this$)) {}

          ::java::util::Set UnsortedInputIterator::contexts() const
          {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_contexts_03e99967]));
          }

          ::org::apache::lucene::util::BytesRef UnsortedInputIterator::next() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_4ae19461]));
          }

          ::org::apache::lucene::util::BytesRef UnsortedInputIterator::payload() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_payload_4ae19461]));
          }

          jlong UnsortedInputIterator::weight() const
          {
            return env->callLongMethod(this$, mids$[mid_weight_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_UnsortedInputIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UnsortedInputIterator_instance_(PyTypeObject *type, PyObject *arg);
          static int t_UnsortedInputIterator_init_(t_UnsortedInputIterator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_UnsortedInputIterator_contexts(t_UnsortedInputIterator *self, PyObject *args);
          static PyObject *t_UnsortedInputIterator_next(t_UnsortedInputIterator *self, PyObject *args);
          static PyObject *t_UnsortedInputIterator_payload(t_UnsortedInputIterator *self, PyObject *args);
          static PyObject *t_UnsortedInputIterator_weight(t_UnsortedInputIterator *self, PyObject *args);

          static PyMethodDef t_UnsortedInputIterator__methods_[] = {
            DECLARE_METHOD(t_UnsortedInputIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UnsortedInputIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UnsortedInputIterator, contexts, METH_VARARGS),
            DECLARE_METHOD(t_UnsortedInputIterator, next, METH_VARARGS),
            DECLARE_METHOD(t_UnsortedInputIterator, payload, METH_VARARGS),
            DECLARE_METHOD(t_UnsortedInputIterator, weight, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(UnsortedInputIterator, t_UnsortedInputIterator, ::org::apache::lucene::search::suggest::BufferedInputIterator, UnsortedInputIterator, t_UnsortedInputIterator_init_, PyObject_SelfIter, ((PyObject *(*)(t_UnsortedInputIterator *)) get_next< t_UnsortedInputIterator,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >), 0, 0, 0);

          void t_UnsortedInputIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(UnsortedInputIterator), module, "UnsortedInputIterator", 0);
          }

          void t_UnsortedInputIterator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(UnsortedInputIterator).tp_dict, "class_", make_descriptor(UnsortedInputIterator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(UnsortedInputIterator).tp_dict, "wrapfn_", make_descriptor(t_UnsortedInputIterator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(UnsortedInputIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_UnsortedInputIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, UnsortedInputIterator::initializeClass, 1)))
              return NULL;
            return t_UnsortedInputIterator::wrap_Object(UnsortedInputIterator(((t_UnsortedInputIterator *) arg)->object.this$));
          }
          static PyObject *t_UnsortedInputIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, UnsortedInputIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_UnsortedInputIterator_init_(t_UnsortedInputIterator *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);
            UnsortedInputIterator object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0))
            {
              INT_CALL(object = UnsortedInputIterator(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_UnsortedInputIterator_contexts(t_UnsortedInputIterator *self, PyObject *args)
          {
            ::java::util::Set result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.contexts());
              return ::java::util::t_Set::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
            }

            return callSuper(&PY_TYPE(UnsortedInputIterator), (PyObject *) self, "contexts", args, 2);
          }

          static PyObject *t_UnsortedInputIterator_next(t_UnsortedInputIterator *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.next());
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(UnsortedInputIterator), (PyObject *) self, "next", args, 2);
          }

          static PyObject *t_UnsortedInputIterator_payload(t_UnsortedInputIterator *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.payload());
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(UnsortedInputIterator), (PyObject *) self, "payload", args, 2);
          }

          static PyObject *t_UnsortedInputIterator_weight(t_UnsortedInputIterator *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.weight());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(UnsortedInputIterator), (PyObject *) self, "weight", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/postingshighlight/DefaultPassageFormatter.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/postingshighlight/Passage.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace postingshighlight {

          ::java::lang::Class *DefaultPassageFormatter::class$ = NULL;
          jmethodID *DefaultPassageFormatter::mids$ = NULL;
          bool DefaultPassageFormatter::live$ = false;

          jclass DefaultPassageFormatter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/postingshighlight/DefaultPassageFormatter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_7f8a9869] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)V");
              mids$[mid_format_4b42952e] = env->getMethodID(cls, "format", "([Lorg/apache/lucene/search/postingshighlight/Passage;Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_append_5cdac082] = env->getMethodID(cls, "append", "(Ljava/lang/StringBuilder;Ljava/lang/String;II)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DefaultPassageFormatter::DefaultPassageFormatter() : ::org::apache::lucene::search::postingshighlight::PassageFormatter(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          DefaultPassageFormatter::DefaultPassageFormatter(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3) : ::org::apache::lucene::search::postingshighlight::PassageFormatter(env->newObject(initializeClass, &mids$, mid_init$_7f8a9869, a0.this$, a1.this$, a2.this$, a3)) {}

          ::java::lang::String DefaultPassageFormatter::format(const JArray< ::org::apache::lucene::search::postingshighlight::Passage > & a0, const ::java::lang::String & a1) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_format_4b42952e], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace postingshighlight {
          static PyObject *t_DefaultPassageFormatter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DefaultPassageFormatter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DefaultPassageFormatter_init_(t_DefaultPassageFormatter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DefaultPassageFormatter_format(t_DefaultPassageFormatter *self, PyObject *args);

          static PyMethodDef t_DefaultPassageFormatter__methods_[] = {
            DECLARE_METHOD(t_DefaultPassageFormatter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DefaultPassageFormatter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DefaultPassageFormatter, format, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DefaultPassageFormatter, t_DefaultPassageFormatter, ::org::apache::lucene::search::postingshighlight::PassageFormatter, DefaultPassageFormatter, t_DefaultPassageFormatter_init_, 0, 0, 0, 0, 0);

          void t_DefaultPassageFormatter::install(PyObject *module)
          {
            installType(&PY_TYPE(DefaultPassageFormatter), module, "DefaultPassageFormatter", 0);
          }

          void t_DefaultPassageFormatter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DefaultPassageFormatter).tp_dict, "class_", make_descriptor(DefaultPassageFormatter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DefaultPassageFormatter).tp_dict, "wrapfn_", make_descriptor(t_DefaultPassageFormatter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DefaultPassageFormatter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DefaultPassageFormatter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DefaultPassageFormatter::initializeClass, 1)))
              return NULL;
            return t_DefaultPassageFormatter::wrap_Object(DefaultPassageFormatter(((t_DefaultPassageFormatter *) arg)->object.this$));
          }
          static PyObject *t_DefaultPassageFormatter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DefaultPassageFormatter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DefaultPassageFormatter_init_(t_DefaultPassageFormatter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                DefaultPassageFormatter object((jobject) NULL);

                INT_CALL(object = DefaultPassageFormatter());
                self->object = object;
                break;
              }
              goto err;
             case 4:
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                jboolean a3;
                DefaultPassageFormatter object((jobject) NULL);

                if (!parseArgs(args, "sssZ", &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = DefaultPassageFormatter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DefaultPassageFormatter_format(t_DefaultPassageFormatter *self, PyObject *args)
          {
            JArray< ::org::apache::lucene::search::postingshighlight::Passage > a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "[ks", ::org::apache::lucene::search::postingshighlight::Passage::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.format(a0, a1));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(DefaultPassageFormatter), (PyObject *) self, "format", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/index/MergeState.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/IndexableField.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40StoredFieldsWriter::class$ = NULL;
          jmethodID *Lucene40StoredFieldsWriter::mids$ = NULL;
          bool Lucene40StoredFieldsWriter::live$ = false;
          ::java::lang::String *Lucene40StoredFieldsWriter::FIELDS_EXTENSION = NULL;
          ::java::lang::String *Lucene40StoredFieldsWriter::FIELDS_INDEX_EXTENSION = NULL;

          jclass Lucene40StoredFieldsWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_1962ccd4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)V");
              mids$[mid_abort_54c6a166] = env->getMethodID(cls, "abort", "()V");
              mids$[mid_addRawDocuments_9a4782ba] = env->getMethodID(cls, "addRawDocuments", "(Lorg/apache/lucene/store/IndexInput;[II)V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_finish_48f050c2] = env->getMethodID(cls, "finish", "(Lorg/apache/lucene/index/FieldInfos;I)V");
              mids$[mid_finishDocument_54c6a166] = env->getMethodID(cls, "finishDocument", "()V");
              mids$[mid_merge_fd0cfdeb] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/MergeState;)I");
              mids$[mid_startDocument_54c6a166] = env->getMethodID(cls, "startDocument", "()V");
              mids$[mid_writeField_0de3c993] = env->getMethodID(cls, "writeField", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/index/IndexableField;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              FIELDS_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "FIELDS_EXTENSION", "Ljava/lang/String;"));
              FIELDS_INDEX_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "FIELDS_INDEX_EXTENSION", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40StoredFieldsWriter::Lucene40StoredFieldsWriter(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::org::apache::lucene::store::IOContext & a2) : ::org::apache::lucene::codecs::StoredFieldsWriter(env->newObject(initializeClass, &mids$, mid_init$_1962ccd4, a0.this$, a1.this$, a2.this$)) {}

          void Lucene40StoredFieldsWriter::abort() const
          {
            env->callVoidMethod(this$, mids$[mid_abort_54c6a166]);
          }

          void Lucene40StoredFieldsWriter::addRawDocuments(const ::org::apache::lucene::store::IndexInput & a0, const JArray< jint > & a1, jint a2) const
          {
            env->callVoidMethod(this$, mids$[mid_addRawDocuments_9a4782ba], a0.this$, a1.this$, a2);
          }

          void Lucene40StoredFieldsWriter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          void Lucene40StoredFieldsWriter::finish(const ::org::apache::lucene::index::FieldInfos & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_finish_48f050c2], a0.this$, a1);
          }

          void Lucene40StoredFieldsWriter::finishDocument() const
          {
            env->callVoidMethod(this$, mids$[mid_finishDocument_54c6a166]);
          }

          jint Lucene40StoredFieldsWriter::merge(const ::org::apache::lucene::index::MergeState & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_merge_fd0cfdeb], a0.this$);
          }

          void Lucene40StoredFieldsWriter::startDocument() const
          {
            env->callVoidMethod(this$, mids$[mid_startDocument_54c6a166]);
          }

          void Lucene40StoredFieldsWriter::writeField(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::index::IndexableField & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_writeField_0de3c993], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40StoredFieldsWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40StoredFieldsWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40StoredFieldsWriter_init_(t_Lucene40StoredFieldsWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40StoredFieldsWriter_abort(t_Lucene40StoredFieldsWriter *self, PyObject *args);
          static PyObject *t_Lucene40StoredFieldsWriter_addRawDocuments(t_Lucene40StoredFieldsWriter *self, PyObject *args);
          static PyObject *t_Lucene40StoredFieldsWriter_close(t_Lucene40StoredFieldsWriter *self, PyObject *args);
          static PyObject *t_Lucene40StoredFieldsWriter_finish(t_Lucene40StoredFieldsWriter *self, PyObject *args);
          static PyObject *t_Lucene40StoredFieldsWriter_finishDocument(t_Lucene40StoredFieldsWriter *self, PyObject *args);
          static PyObject *t_Lucene40StoredFieldsWriter_merge(t_Lucene40StoredFieldsWriter *self, PyObject *args);
          static PyObject *t_Lucene40StoredFieldsWriter_startDocument(t_Lucene40StoredFieldsWriter *self, PyObject *args);
          static PyObject *t_Lucene40StoredFieldsWriter_writeField(t_Lucene40StoredFieldsWriter *self, PyObject *args);

          static PyMethodDef t_Lucene40StoredFieldsWriter__methods_[] = {
            DECLARE_METHOD(t_Lucene40StoredFieldsWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40StoredFieldsWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40StoredFieldsWriter, abort, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40StoredFieldsWriter, addRawDocuments, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40StoredFieldsWriter, close, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40StoredFieldsWriter, finish, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40StoredFieldsWriter, finishDocument, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40StoredFieldsWriter, merge, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40StoredFieldsWriter, startDocument, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40StoredFieldsWriter, writeField, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40StoredFieldsWriter, t_Lucene40StoredFieldsWriter, ::org::apache::lucene::codecs::StoredFieldsWriter, Lucene40StoredFieldsWriter, t_Lucene40StoredFieldsWriter_init_, 0, 0, 0, 0, 0);

          void t_Lucene40StoredFieldsWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40StoredFieldsWriter), module, "Lucene40StoredFieldsWriter", 0);
          }

          void t_Lucene40StoredFieldsWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40StoredFieldsWriter).tp_dict, "class_", make_descriptor(Lucene40StoredFieldsWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40StoredFieldsWriter).tp_dict, "wrapfn_", make_descriptor(t_Lucene40StoredFieldsWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40StoredFieldsWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene40StoredFieldsWriter::initializeClass);
            PyDict_SetItemString(PY_TYPE(Lucene40StoredFieldsWriter).tp_dict, "FIELDS_EXTENSION", make_descriptor(j2p(*Lucene40StoredFieldsWriter::FIELDS_EXTENSION)));
            PyDict_SetItemString(PY_TYPE(Lucene40StoredFieldsWriter).tp_dict, "FIELDS_INDEX_EXTENSION", make_descriptor(j2p(*Lucene40StoredFieldsWriter::FIELDS_INDEX_EXTENSION)));
          }

          static PyObject *t_Lucene40StoredFieldsWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40StoredFieldsWriter::initializeClass, 1)))
              return NULL;
            return t_Lucene40StoredFieldsWriter::wrap_Object(Lucene40StoredFieldsWriter(((t_Lucene40StoredFieldsWriter *) arg)->object.this$));
          }
          static PyObject *t_Lucene40StoredFieldsWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40StoredFieldsWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40StoredFieldsWriter_init_(t_Lucene40StoredFieldsWriter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);
            Lucene40StoredFieldsWriter object((jobject) NULL);

            if (!parseArgs(args, "ksk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = Lucene40StoredFieldsWriter(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene40StoredFieldsWriter_abort(t_Lucene40StoredFieldsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.abort());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40StoredFieldsWriter), (PyObject *) self, "abort", args, 2);
          }

          static PyObject *t_Lucene40StoredFieldsWriter_addRawDocuments(t_Lucene40StoredFieldsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
            JArray< jint > a1((jobject) NULL);
            jint a2;

            if (!parseArgs(args, "k[II", ::org::apache::lucene::store::IndexInput::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.addRawDocuments(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addRawDocuments", args);
            return NULL;
          }

          static PyObject *t_Lucene40StoredFieldsWriter_close(t_Lucene40StoredFieldsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40StoredFieldsWriter), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_Lucene40StoredFieldsWriter_finish(t_Lucene40StoredFieldsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfos a0((jobject) NULL);
            jint a1;

            if (!parseArgs(args, "kI", ::org::apache::lucene::index::FieldInfos::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.finish(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40StoredFieldsWriter), (PyObject *) self, "finish", args, 2);
          }

          static PyObject *t_Lucene40StoredFieldsWriter_finishDocument(t_Lucene40StoredFieldsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.finishDocument());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40StoredFieldsWriter), (PyObject *) self, "finishDocument", args, 2);
          }

          static PyObject *t_Lucene40StoredFieldsWriter_merge(t_Lucene40StoredFieldsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::MergeState a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::MergeState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.merge(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(Lucene40StoredFieldsWriter), (PyObject *) self, "merge", args, 2);
          }

          static PyObject *t_Lucene40StoredFieldsWriter_startDocument(t_Lucene40StoredFieldsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.startDocument());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40StoredFieldsWriter), (PyObject *) self, "startDocument", args, 2);
          }

          static PyObject *t_Lucene40StoredFieldsWriter_writeField(t_Lucene40StoredFieldsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            ::org::apache::lucene::index::IndexableField a1((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::index::IndexableField::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.writeField(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40StoredFieldsWriter), (PyObject *) self, "writeField", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/SimpleFSLockFactory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/Lock.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *SimpleFSLockFactory::class$ = NULL;
        jmethodID *SimpleFSLockFactory::mids$ = NULL;
        bool SimpleFSLockFactory::live$ = false;

        jclass SimpleFSLockFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/SimpleFSLockFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_init$_c3dacf57] = env->getMethodID(cls, "<init>", "(Ljava/io/File;)V");
            mids$[mid_clearLock_5fdc3f48] = env->getMethodID(cls, "clearLock", "(Ljava/lang/String;)V");
            mids$[mid_makeLock_f26bb9a8] = env->getMethodID(cls, "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SimpleFSLockFactory::SimpleFSLockFactory() : ::org::apache::lucene::store::FSLockFactory(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        SimpleFSLockFactory::SimpleFSLockFactory(const ::java::lang::String & a0) : ::org::apache::lucene::store::FSLockFactory(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        SimpleFSLockFactory::SimpleFSLockFactory(const ::java::io::File & a0) : ::org::apache::lucene::store::FSLockFactory(env->newObject(initializeClass, &mids$, mid_init$_c3dacf57, a0.this$)) {}

        void SimpleFSLockFactory::clearLock(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clearLock_5fdc3f48], a0.this$);
        }

        ::org::apache::lucene::store::Lock SimpleFSLockFactory::makeLock(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::store::Lock(env->callObjectMethod(this$, mids$[mid_makeLock_f26bb9a8], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_SimpleFSLockFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SimpleFSLockFactory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SimpleFSLockFactory_init_(t_SimpleFSLockFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SimpleFSLockFactory_clearLock(t_SimpleFSLockFactory *self, PyObject *args);
        static PyObject *t_SimpleFSLockFactory_makeLock(t_SimpleFSLockFactory *self, PyObject *args);

        static PyMethodDef t_SimpleFSLockFactory__methods_[] = {
          DECLARE_METHOD(t_SimpleFSLockFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SimpleFSLockFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SimpleFSLockFactory, clearLock, METH_VARARGS),
          DECLARE_METHOD(t_SimpleFSLockFactory, makeLock, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SimpleFSLockFactory, t_SimpleFSLockFactory, ::org::apache::lucene::store::FSLockFactory, SimpleFSLockFactory, t_SimpleFSLockFactory_init_, 0, 0, 0, 0, 0);

        void t_SimpleFSLockFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(SimpleFSLockFactory), module, "SimpleFSLockFactory", 0);
        }

        void t_SimpleFSLockFactory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SimpleFSLockFactory).tp_dict, "class_", make_descriptor(SimpleFSLockFactory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SimpleFSLockFactory).tp_dict, "wrapfn_", make_descriptor(t_SimpleFSLockFactory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SimpleFSLockFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SimpleFSLockFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SimpleFSLockFactory::initializeClass, 1)))
            return NULL;
          return t_SimpleFSLockFactory::wrap_Object(SimpleFSLockFactory(((t_SimpleFSLockFactory *) arg)->object.this$));
        }
        static PyObject *t_SimpleFSLockFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SimpleFSLockFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SimpleFSLockFactory_init_(t_SimpleFSLockFactory *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              SimpleFSLockFactory object((jobject) NULL);

              INT_CALL(object = SimpleFSLockFactory());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              SimpleFSLockFactory object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = SimpleFSLockFactory(a0));
                self->object = object;
                break;
              }
            }
            {
              ::java::io::File a0((jobject) NULL);
              SimpleFSLockFactory object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
              {
                INT_CALL(object = SimpleFSLockFactory(a0));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SimpleFSLockFactory_clearLock(t_SimpleFSLockFactory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.clearLock(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SimpleFSLockFactory), (PyObject *) self, "clearLock", args, 2);
        }

        static PyObject *t_SimpleFSLockFactory_makeLock(t_SimpleFSLockFactory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::Lock result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.makeLock(a0));
            return ::org::apache::lucene::store::t_Lock::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SimpleFSLockFactory), (PyObject *) self, "makeLock", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *BasicStats::class$ = NULL;
          jmethodID *BasicStats::mids$ = NULL;
          bool BasicStats::live$ = false;

          jclass BasicStats::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/BasicStats");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f0649ce1] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;F)V");
              mids$[mid_getAvgFieldLength_54c6a176] = env->getMethodID(cls, "getAvgFieldLength", "()F");
              mids$[mid_getDocFreq_54c6a17a] = env->getMethodID(cls, "getDocFreq", "()J");
              mids$[mid_getNumberOfDocuments_54c6a17a] = env->getMethodID(cls, "getNumberOfDocuments", "()J");
              mids$[mid_getNumberOfFieldTokens_54c6a17a] = env->getMethodID(cls, "getNumberOfFieldTokens", "()J");
              mids$[mid_getTotalBoost_54c6a176] = env->getMethodID(cls, "getTotalBoost", "()F");
              mids$[mid_getTotalTermFreq_54c6a17a] = env->getMethodID(cls, "getTotalTermFreq", "()J");
              mids$[mid_getValueForNormalization_54c6a176] = env->getMethodID(cls, "getValueForNormalization", "()F");
              mids$[mid_normalize_f1b0c004] = env->getMethodID(cls, "normalize", "(FF)V");
              mids$[mid_setAvgFieldLength_06298cab] = env->getMethodID(cls, "setAvgFieldLength", "(F)V");
              mids$[mid_setDocFreq_0ee6df2f] = env->getMethodID(cls, "setDocFreq", "(J)V");
              mids$[mid_setNumberOfDocuments_0ee6df2f] = env->getMethodID(cls, "setNumberOfDocuments", "(J)V");
              mids$[mid_setNumberOfFieldTokens_0ee6df2f] = env->getMethodID(cls, "setNumberOfFieldTokens", "(J)V");
              mids$[mid_setTotalTermFreq_0ee6df2f] = env->getMethodID(cls, "setTotalTermFreq", "(J)V");
              mids$[mid_rawNormalizationValue_54c6a176] = env->getMethodID(cls, "rawNormalizationValue", "()F");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BasicStats::BasicStats(const ::java::lang::String & a0, jfloat a1) : ::org::apache::lucene::search::similarities::Similarity$SimWeight(env->newObject(initializeClass, &mids$, mid_init$_f0649ce1, a0.this$, a1)) {}

          jfloat BasicStats::getAvgFieldLength() const
          {
            return env->callFloatMethod(this$, mids$[mid_getAvgFieldLength_54c6a176]);
          }

          jlong BasicStats::getDocFreq() const
          {
            return env->callLongMethod(this$, mids$[mid_getDocFreq_54c6a17a]);
          }

          jlong BasicStats::getNumberOfDocuments() const
          {
            return env->callLongMethod(this$, mids$[mid_getNumberOfDocuments_54c6a17a]);
          }

          jlong BasicStats::getNumberOfFieldTokens() const
          {
            return env->callLongMethod(this$, mids$[mid_getNumberOfFieldTokens_54c6a17a]);
          }

          jfloat BasicStats::getTotalBoost() const
          {
            return env->callFloatMethod(this$, mids$[mid_getTotalBoost_54c6a176]);
          }

          jlong BasicStats::getTotalTermFreq() const
          {
            return env->callLongMethod(this$, mids$[mid_getTotalTermFreq_54c6a17a]);
          }

          jfloat BasicStats::getValueForNormalization() const
          {
            return env->callFloatMethod(this$, mids$[mid_getValueForNormalization_54c6a176]);
          }

          void BasicStats::normalize(jfloat a0, jfloat a1) const
          {
            env->callVoidMethod(this$, mids$[mid_normalize_f1b0c004], a0, a1);
          }

          void BasicStats::setAvgFieldLength(jfloat a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setAvgFieldLength_06298cab], a0);
          }

          void BasicStats::setDocFreq(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setDocFreq_0ee6df2f], a0);
          }

          void BasicStats::setNumberOfDocuments(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setNumberOfDocuments_0ee6df2f], a0);
          }

          void BasicStats::setNumberOfFieldTokens(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setNumberOfFieldTokens_0ee6df2f], a0);
          }

          void BasicStats::setTotalTermFreq(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setTotalTermFreq_0ee6df2f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_BasicStats_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicStats_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BasicStats_init_(t_BasicStats *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BasicStats_getAvgFieldLength(t_BasicStats *self);
          static PyObject *t_BasicStats_getDocFreq(t_BasicStats *self);
          static PyObject *t_BasicStats_getNumberOfDocuments(t_BasicStats *self);
          static PyObject *t_BasicStats_getNumberOfFieldTokens(t_BasicStats *self);
          static PyObject *t_BasicStats_getTotalBoost(t_BasicStats *self);
          static PyObject *t_BasicStats_getTotalTermFreq(t_BasicStats *self);
          static PyObject *t_BasicStats_getValueForNormalization(t_BasicStats *self, PyObject *args);
          static PyObject *t_BasicStats_normalize(t_BasicStats *self, PyObject *args);
          static PyObject *t_BasicStats_setAvgFieldLength(t_BasicStats *self, PyObject *arg);
          static PyObject *t_BasicStats_setDocFreq(t_BasicStats *self, PyObject *arg);
          static PyObject *t_BasicStats_setNumberOfDocuments(t_BasicStats *self, PyObject *arg);
          static PyObject *t_BasicStats_setNumberOfFieldTokens(t_BasicStats *self, PyObject *arg);
          static PyObject *t_BasicStats_setTotalTermFreq(t_BasicStats *self, PyObject *arg);
          static PyObject *t_BasicStats_get__avgFieldLength(t_BasicStats *self, void *data);
          static int t_BasicStats_set__avgFieldLength(t_BasicStats *self, PyObject *arg, void *data);
          static PyObject *t_BasicStats_get__docFreq(t_BasicStats *self, void *data);
          static int t_BasicStats_set__docFreq(t_BasicStats *self, PyObject *arg, void *data);
          static PyObject *t_BasicStats_get__numberOfDocuments(t_BasicStats *self, void *data);
          static int t_BasicStats_set__numberOfDocuments(t_BasicStats *self, PyObject *arg, void *data);
          static PyObject *t_BasicStats_get__numberOfFieldTokens(t_BasicStats *self, void *data);
          static int t_BasicStats_set__numberOfFieldTokens(t_BasicStats *self, PyObject *arg, void *data);
          static PyObject *t_BasicStats_get__totalBoost(t_BasicStats *self, void *data);
          static PyObject *t_BasicStats_get__totalTermFreq(t_BasicStats *self, void *data);
          static int t_BasicStats_set__totalTermFreq(t_BasicStats *self, PyObject *arg, void *data);
          static PyObject *t_BasicStats_get__valueForNormalization(t_BasicStats *self, void *data);
          static PyGetSetDef t_BasicStats__fields_[] = {
            DECLARE_GETSET_FIELD(t_BasicStats, avgFieldLength),
            DECLARE_GETSET_FIELD(t_BasicStats, docFreq),
            DECLARE_GETSET_FIELD(t_BasicStats, numberOfDocuments),
            DECLARE_GETSET_FIELD(t_BasicStats, numberOfFieldTokens),
            DECLARE_GET_FIELD(t_BasicStats, totalBoost),
            DECLARE_GETSET_FIELD(t_BasicStats, totalTermFreq),
            DECLARE_GET_FIELD(t_BasicStats, valueForNormalization),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BasicStats__methods_[] = {
            DECLARE_METHOD(t_BasicStats, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicStats, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicStats, getAvgFieldLength, METH_NOARGS),
            DECLARE_METHOD(t_BasicStats, getDocFreq, METH_NOARGS),
            DECLARE_METHOD(t_BasicStats, getNumberOfDocuments, METH_NOARGS),
            DECLARE_METHOD(t_BasicStats, getNumberOfFieldTokens, METH_NOARGS),
            DECLARE_METHOD(t_BasicStats, getTotalBoost, METH_NOARGS),
            DECLARE_METHOD(t_BasicStats, getTotalTermFreq, METH_NOARGS),
            DECLARE_METHOD(t_BasicStats, getValueForNormalization, METH_VARARGS),
            DECLARE_METHOD(t_BasicStats, normalize, METH_VARARGS),
            DECLARE_METHOD(t_BasicStats, setAvgFieldLength, METH_O),
            DECLARE_METHOD(t_BasicStats, setDocFreq, METH_O),
            DECLARE_METHOD(t_BasicStats, setNumberOfDocuments, METH_O),
            DECLARE_METHOD(t_BasicStats, setNumberOfFieldTokens, METH_O),
            DECLARE_METHOD(t_BasicStats, setTotalTermFreq, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BasicStats, t_BasicStats, ::org::apache::lucene::search::similarities::Similarity$SimWeight, BasicStats, t_BasicStats_init_, 0, 0, t_BasicStats__fields_, 0, 0);

          void t_BasicStats::install(PyObject *module)
          {
            installType(&PY_TYPE(BasicStats), module, "BasicStats", 0);
          }

          void t_BasicStats::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BasicStats).tp_dict, "class_", make_descriptor(BasicStats::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BasicStats).tp_dict, "wrapfn_", make_descriptor(t_BasicStats::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BasicStats).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BasicStats_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BasicStats::initializeClass, 1)))
              return NULL;
            return t_BasicStats::wrap_Object(BasicStats(((t_BasicStats *) arg)->object.this$));
          }
          static PyObject *t_BasicStats_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BasicStats::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BasicStats_init_(t_BasicStats *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            jfloat a1;
            BasicStats object((jobject) NULL);

            if (!parseArgs(args, "sF", &a0, &a1))
            {
              INT_CALL(object = BasicStats(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BasicStats_getAvgFieldLength(t_BasicStats *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getAvgFieldLength());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_BasicStats_getDocFreq(t_BasicStats *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getDocFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_BasicStats_getNumberOfDocuments(t_BasicStats *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getNumberOfDocuments());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_BasicStats_getNumberOfFieldTokens(t_BasicStats *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getNumberOfFieldTokens());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_BasicStats_getTotalBoost(t_BasicStats *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getTotalBoost());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_BasicStats_getTotalTermFreq(t_BasicStats *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getTotalTermFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_BasicStats_getValueForNormalization(t_BasicStats *self, PyObject *args)
          {
            jfloat result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getValueForNormalization());
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(BasicStats), (PyObject *) self, "getValueForNormalization", args, 2);
          }

          static PyObject *t_BasicStats_normalize(t_BasicStats *self, PyObject *args)
          {
            jfloat a0;
            jfloat a1;

            if (!parseArgs(args, "FF", &a0, &a1))
            {
              OBJ_CALL(self->object.normalize(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(BasicStats), (PyObject *) self, "normalize", args, 2);
          }

          static PyObject *t_BasicStats_setAvgFieldLength(t_BasicStats *self, PyObject *arg)
          {
            jfloat a0;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(self->object.setAvgFieldLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setAvgFieldLength", arg);
            return NULL;
          }

          static PyObject *t_BasicStats_setDocFreq(t_BasicStats *self, PyObject *arg)
          {
            jlong a0;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(self->object.setDocFreq(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setDocFreq", arg);
            return NULL;
          }

          static PyObject *t_BasicStats_setNumberOfDocuments(t_BasicStats *self, PyObject *arg)
          {
            jlong a0;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(self->object.setNumberOfDocuments(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setNumberOfDocuments", arg);
            return NULL;
          }

          static PyObject *t_BasicStats_setNumberOfFieldTokens(t_BasicStats *self, PyObject *arg)
          {
            jlong a0;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(self->object.setNumberOfFieldTokens(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setNumberOfFieldTokens", arg);
            return NULL;
          }

          static PyObject *t_BasicStats_setTotalTermFreq(t_BasicStats *self, PyObject *arg)
          {
            jlong a0;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(self->object.setTotalTermFreq(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setTotalTermFreq", arg);
            return NULL;
          }

          static PyObject *t_BasicStats_get__avgFieldLength(t_BasicStats *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getAvgFieldLength());
            return PyFloat_FromDouble((double) value);
          }
          static int t_BasicStats_set__avgFieldLength(t_BasicStats *self, PyObject *arg, void *data)
          {
            {
              jfloat value;
              if (!parseArg(arg, "F", &value))
              {
                INT_CALL(self->object.setAvgFieldLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "avgFieldLength", arg);
            return -1;
          }

          static PyObject *t_BasicStats_get__docFreq(t_BasicStats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getDocFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_BasicStats_set__docFreq(t_BasicStats *self, PyObject *arg, void *data)
          {
            {
              jlong value;
              if (!parseArg(arg, "J", &value))
              {
                INT_CALL(self->object.setDocFreq(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "docFreq", arg);
            return -1;
          }

          static PyObject *t_BasicStats_get__numberOfDocuments(t_BasicStats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getNumberOfDocuments());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_BasicStats_set__numberOfDocuments(t_BasicStats *self, PyObject *arg, void *data)
          {
            {
              jlong value;
              if (!parseArg(arg, "J", &value))
              {
                INT_CALL(self->object.setNumberOfDocuments(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "numberOfDocuments", arg);
            return -1;
          }

          static PyObject *t_BasicStats_get__numberOfFieldTokens(t_BasicStats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getNumberOfFieldTokens());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_BasicStats_set__numberOfFieldTokens(t_BasicStats *self, PyObject *arg, void *data)
          {
            {
              jlong value;
              if (!parseArg(arg, "J", &value))
              {
                INT_CALL(self->object.setNumberOfFieldTokens(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "numberOfFieldTokens", arg);
            return -1;
          }

          static PyObject *t_BasicStats_get__totalBoost(t_BasicStats *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getTotalBoost());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_BasicStats_get__totalTermFreq(t_BasicStats *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getTotalTermFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_BasicStats_set__totalTermFreq(t_BasicStats *self, PyObject *arg, void *data)
          {
            {
              jlong value;
              if (!parseArg(arg, "J", &value))
              {
                INT_CALL(self->object.setTotalTermFreq(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "totalTermFreq", arg);
            return -1;
          }

          static PyObject *t_BasicStats_get__valueForNormalization(t_BasicStats *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getValueForNormalization());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/function/FunctionSecondPassGroupingCollector.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/Sort.h"
#include "java/util/Collection.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/grouping/SearchGroup.h"
#include "org/apache/lucene/util/mutable/MutableValue.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace function {

            ::java::lang::Class *FunctionSecondPassGroupingCollector::class$ = NULL;
            jmethodID *FunctionSecondPassGroupingCollector::mids$ = NULL;
            bool FunctionSecondPassGroupingCollector::live$ = false;

            jclass FunctionSecondPassGroupingCollector::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/function/FunctionSecondPassGroupingCollector");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_3599aebe] = env->getMethodID(cls, "<init>", "(Ljava/util/Collection;Lorg/apache/lucene/search/Sort;Lorg/apache/lucene/search/Sort;IZZZLorg/apache/lucene/queries/function/ValueSource;Ljava/util/Map;)V");
                mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
                mids$[mid_retrieveGroup_e4de8d52] = env->getMethodID(cls, "retrieveGroup", "(I)Lorg/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector$SearchGroupDocs;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FunctionSecondPassGroupingCollector::FunctionSecondPassGroupingCollector(const ::java::util::Collection & a0, const ::org::apache::lucene::search::Sort & a1, const ::org::apache::lucene::search::Sort & a2, jint a3, jboolean a4, jboolean a5, jboolean a6, const ::org::apache::lucene::queries::function::ValueSource & a7, const ::java::util::Map & a8) : ::org::apache::lucene::search::grouping::AbstractSecondPassGroupingCollector(env->newObject(initializeClass, &mids$, mid_init$_3599aebe, a0.this$, a1.this$, a2.this$, a3, a4, a5, a6, a7.this$, a8.this$)) {}

            void FunctionSecondPassGroupingCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace function {
            static PyObject *t_FunctionSecondPassGroupingCollector_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FunctionSecondPassGroupingCollector_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FunctionSecondPassGroupingCollector_of_(t_FunctionSecondPassGroupingCollector *self, PyObject *args);
            static int t_FunctionSecondPassGroupingCollector_init_(t_FunctionSecondPassGroupingCollector *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FunctionSecondPassGroupingCollector_setNextReader(t_FunctionSecondPassGroupingCollector *self, PyObject *args);
            static int t_FunctionSecondPassGroupingCollector_set__nextReader(t_FunctionSecondPassGroupingCollector *self, PyObject *arg, void *data);
            static PyObject *t_FunctionSecondPassGroupingCollector_get__parameters_(t_FunctionSecondPassGroupingCollector *self, void *data);
            static PyGetSetDef t_FunctionSecondPassGroupingCollector__fields_[] = {
              DECLARE_SET_FIELD(t_FunctionSecondPassGroupingCollector, nextReader),
              DECLARE_GET_FIELD(t_FunctionSecondPassGroupingCollector, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FunctionSecondPassGroupingCollector__methods_[] = {
              DECLARE_METHOD(t_FunctionSecondPassGroupingCollector, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FunctionSecondPassGroupingCollector, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FunctionSecondPassGroupingCollector, of_, METH_VARARGS),
              DECLARE_METHOD(t_FunctionSecondPassGroupingCollector, setNextReader, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FunctionSecondPassGroupingCollector, t_FunctionSecondPassGroupingCollector, ::org::apache::lucene::search::grouping::AbstractSecondPassGroupingCollector, FunctionSecondPassGroupingCollector, t_FunctionSecondPassGroupingCollector_init_, 0, 0, t_FunctionSecondPassGroupingCollector__fields_, 0, 0);
            PyObject *t_FunctionSecondPassGroupingCollector::wrap_Object(const FunctionSecondPassGroupingCollector& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FunctionSecondPassGroupingCollector::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FunctionSecondPassGroupingCollector *self = (t_FunctionSecondPassGroupingCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_FunctionSecondPassGroupingCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FunctionSecondPassGroupingCollector::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FunctionSecondPassGroupingCollector *self = (t_FunctionSecondPassGroupingCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_FunctionSecondPassGroupingCollector::install(PyObject *module)
            {
              installType(&PY_TYPE(FunctionSecondPassGroupingCollector), module, "FunctionSecondPassGroupingCollector", 0);
            }

            void t_FunctionSecondPassGroupingCollector::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FunctionSecondPassGroupingCollector).tp_dict, "class_", make_descriptor(FunctionSecondPassGroupingCollector::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FunctionSecondPassGroupingCollector).tp_dict, "wrapfn_", make_descriptor(t_FunctionSecondPassGroupingCollector::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FunctionSecondPassGroupingCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FunctionSecondPassGroupingCollector_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FunctionSecondPassGroupingCollector::initializeClass, 1)))
                return NULL;
              return t_FunctionSecondPassGroupingCollector::wrap_Object(FunctionSecondPassGroupingCollector(((t_FunctionSecondPassGroupingCollector *) arg)->object.this$));
            }
            static PyObject *t_FunctionSecondPassGroupingCollector_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FunctionSecondPassGroupingCollector::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_FunctionSecondPassGroupingCollector_of_(t_FunctionSecondPassGroupingCollector *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static int t_FunctionSecondPassGroupingCollector_init_(t_FunctionSecondPassGroupingCollector *self, PyObject *args, PyObject *kwds)
            {
              ::java::util::Collection a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::Sort a1((jobject) NULL);
              ::org::apache::lucene::search::Sort a2((jobject) NULL);
              jint a3;
              jboolean a4;
              jboolean a5;
              jboolean a6;
              ::org::apache::lucene::queries::function::ValueSource a7((jobject) NULL);
              ::java::util::Map a8((jobject) NULL);
              PyTypeObject **p8;
              FunctionSecondPassGroupingCollector object((jobject) NULL);

              if (!parseArgs(args, "KkkIZZZkK", ::java::util::Collection::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &p8, ::java::util::t_Map::parameters_))
              {
                INT_CALL(object = FunctionSecondPassGroupingCollector(a0, a1, a2, a3, a4, a5, a6, a7, a8));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::util::mutable$::PY_TYPE(MutableValue);
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FunctionSecondPassGroupingCollector_setNextReader(t_FunctionSecondPassGroupingCollector *self, PyObject *args)
            {
              ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setNextReader(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(FunctionSecondPassGroupingCollector), (PyObject *) self, "setNextReader", args, 2);
            }
            static PyObject *t_FunctionSecondPassGroupingCollector_get__parameters_(t_FunctionSecondPassGroupingCollector *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }

            static int t_FunctionSecondPassGroupingCollector_set__nextReader(t_FunctionSecondPassGroupingCollector *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
                {
                  INT_CALL(self->object.setNextReader(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/RussianStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *RussianStemmer::class$ = NULL;
        jmethodID *RussianStemmer::mids$ = NULL;
        bool RussianStemmer::live$ = false;

        jclass RussianStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/RussianStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RussianStemmer::RussianStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean RussianStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint RussianStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean RussianStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_RussianStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RussianStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RussianStemmer_init_(t_RussianStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RussianStemmer_equals(t_RussianStemmer *self, PyObject *args);
        static PyObject *t_RussianStemmer_hashCode(t_RussianStemmer *self, PyObject *args);
        static PyObject *t_RussianStemmer_stem(t_RussianStemmer *self, PyObject *args);

        static PyMethodDef t_RussianStemmer__methods_[] = {
          DECLARE_METHOD(t_RussianStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RussianStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RussianStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_RussianStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_RussianStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RussianStemmer, t_RussianStemmer, ::org::tartarus::snowball::SnowballProgram, RussianStemmer, t_RussianStemmer_init_, 0, 0, 0, 0, 0);

        void t_RussianStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(RussianStemmer), module, "RussianStemmer", 0);
        }

        void t_RussianStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RussianStemmer).tp_dict, "class_", make_descriptor(RussianStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RussianStemmer).tp_dict, "wrapfn_", make_descriptor(t_RussianStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RussianStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RussianStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RussianStemmer::initializeClass, 1)))
            return NULL;
          return t_RussianStemmer::wrap_Object(RussianStemmer(((t_RussianStemmer *) arg)->object.this$));
        }
        static PyObject *t_RussianStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RussianStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RussianStemmer_init_(t_RussianStemmer *self, PyObject *args, PyObject *kwds)
        {
          RussianStemmer object((jobject) NULL);

          INT_CALL(object = RussianStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_RussianStemmer_equals(t_RussianStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(RussianStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_RussianStemmer_hashCode(t_RussianStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(RussianStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_RussianStemmer_stem(t_RussianStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(RussianStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/NumericDocValuesField.h"
#include "java/lang/String.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *NumericDocValuesField::class$ = NULL;
        jmethodID *NumericDocValuesField::mids$ = NULL;
        bool NumericDocValuesField::live$ = false;
        ::org::apache::lucene::document::FieldType *NumericDocValuesField::TYPE = NULL;

        jclass NumericDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/NumericDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4372eed5] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NumericDocValuesField::NumericDocValuesField(const ::java::lang::String & a0, jlong a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_4372eed5, a0.this$, a1)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_NumericDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NumericDocValuesField_init_(t_NumericDocValuesField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_NumericDocValuesField__methods_[] = {
          DECLARE_METHOD(t_NumericDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericDocValuesField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NumericDocValuesField, t_NumericDocValuesField, ::org::apache::lucene::document::Field, NumericDocValuesField, t_NumericDocValuesField_init_, 0, 0, 0, 0, 0);

        void t_NumericDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(NumericDocValuesField), module, "NumericDocValuesField", 0);
        }

        void t_NumericDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NumericDocValuesField).tp_dict, "class_", make_descriptor(NumericDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NumericDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_NumericDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NumericDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(NumericDocValuesField::initializeClass);
          PyDict_SetItemString(PY_TYPE(NumericDocValuesField).tp_dict, "TYPE", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*NumericDocValuesField::TYPE)));
        }

        static PyObject *t_NumericDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NumericDocValuesField::initializeClass, 1)))
            return NULL;
          return t_NumericDocValuesField::wrap_Object(NumericDocValuesField(((t_NumericDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_NumericDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NumericDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NumericDocValuesField_init_(t_NumericDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong a1;
          NumericDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "sJ", &a0, &a1))
          {
            INT_CALL(object = NumericDocValuesField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/Similarity$SimScorer.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *Similarity$SimScorer::class$ = NULL;
          jmethodID *Similarity$SimScorer::mids$ = NULL;
          bool Similarity$SimScorer::live$ = false;

          jclass Similarity$SimScorer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/Similarity$SimScorer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_computePayloadFactor_ffd34a82] = env->getMethodID(cls, "computePayloadFactor", "(IIILorg/apache/lucene/util/BytesRef;)F");
              mids$[mid_computeSlopFactor_39c7bd2c] = env->getMethodID(cls, "computeSlopFactor", "(I)F");
              mids$[mid_explain_d1ebfb75] = env->getMethodID(cls, "explain", "(ILorg/apache/lucene/search/Explanation;)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_score_abdf2c41] = env->getMethodID(cls, "score", "(IF)F");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Similarity$SimScorer::Similarity$SimScorer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat Similarity$SimScorer::computePayloadFactor(jint a0, jint a1, jint a2, const ::org::apache::lucene::util::BytesRef & a3) const
          {
            return env->callFloatMethod(this$, mids$[mid_computePayloadFactor_ffd34a82], a0, a1, a2, a3.this$);
          }

          jfloat Similarity$SimScorer::computeSlopFactor(jint a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_computeSlopFactor_39c7bd2c], a0);
          }

          ::org::apache::lucene::search::Explanation Similarity$SimScorer::explain(jint a0, const ::org::apache::lucene::search::Explanation & a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_d1ebfb75], a0, a1.this$));
          }

          jfloat Similarity$SimScorer::score(jint a0, jfloat a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_abdf2c41], a0, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_Similarity$SimScorer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Similarity$SimScorer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Similarity$SimScorer_init_(t_Similarity$SimScorer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Similarity$SimScorer_computePayloadFactor(t_Similarity$SimScorer *self, PyObject *args);
          static PyObject *t_Similarity$SimScorer_computeSlopFactor(t_Similarity$SimScorer *self, PyObject *arg);
          static PyObject *t_Similarity$SimScorer_explain(t_Similarity$SimScorer *self, PyObject *args);
          static PyObject *t_Similarity$SimScorer_score(t_Similarity$SimScorer *self, PyObject *args);

          static PyMethodDef t_Similarity$SimScorer__methods_[] = {
            DECLARE_METHOD(t_Similarity$SimScorer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Similarity$SimScorer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Similarity$SimScorer, computePayloadFactor, METH_VARARGS),
            DECLARE_METHOD(t_Similarity$SimScorer, computeSlopFactor, METH_O),
            DECLARE_METHOD(t_Similarity$SimScorer, explain, METH_VARARGS),
            DECLARE_METHOD(t_Similarity$SimScorer, score, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Similarity$SimScorer, t_Similarity$SimScorer, ::java::lang::Object, Similarity$SimScorer, t_Similarity$SimScorer_init_, 0, 0, 0, 0, 0);

          void t_Similarity$SimScorer::install(PyObject *module)
          {
            installType(&PY_TYPE(Similarity$SimScorer), module, "Similarity$SimScorer", 0);
          }

          void t_Similarity$SimScorer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Similarity$SimScorer).tp_dict, "class_", make_descriptor(Similarity$SimScorer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Similarity$SimScorer).tp_dict, "wrapfn_", make_descriptor(t_Similarity$SimScorer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Similarity$SimScorer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Similarity$SimScorer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Similarity$SimScorer::initializeClass, 1)))
              return NULL;
            return t_Similarity$SimScorer::wrap_Object(Similarity$SimScorer(((t_Similarity$SimScorer *) arg)->object.this$));
          }
          static PyObject *t_Similarity$SimScorer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Similarity$SimScorer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Similarity$SimScorer_init_(t_Similarity$SimScorer *self, PyObject *args, PyObject *kwds)
          {
            Similarity$SimScorer object((jobject) NULL);

            INT_CALL(object = Similarity$SimScorer());
            self->object = object;

            return 0;
          }

          static PyObject *t_Similarity$SimScorer_computePayloadFactor(t_Similarity$SimScorer *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jint a2;
            ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
            jfloat result;

            if (!parseArgs(args, "IIIk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.computePayloadFactor(a0, a1, a2, a3));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "computePayloadFactor", args);
            return NULL;
          }

          static PyObject *t_Similarity$SimScorer_computeSlopFactor(t_Similarity$SimScorer *self, PyObject *arg)
          {
            jint a0;
            jfloat result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.computeSlopFactor(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "computeSlopFactor", arg);
            return NULL;
          }

          static PyObject *t_Similarity$SimScorer_explain(t_Similarity$SimScorer *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::search::Explanation a1((jobject) NULL);
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "Ik", ::org::apache::lucene::search::Explanation::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.explain(a0, a1));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "explain", args);
            return NULL;
          }

          static PyObject *t_Similarity$SimScorer_score(t_Similarity$SimScorer *self, PyObject *args)
          {
            jint a0;
            jfloat a1;
            jfloat result;

            if (!parseArgs(args, "IF", &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "score", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/StoredFieldsReader.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/StoredFieldVisitor.h"
#include "java/lang/Cloneable.h"
#include "java/io/Closeable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *StoredFieldsReader::class$ = NULL;
        jmethodID *StoredFieldsReader::mids$ = NULL;
        bool StoredFieldsReader::live$ = false;

        jclass StoredFieldsReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/StoredFieldsReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
            mids$[mid_clone_ef585f0d] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/codecs/StoredFieldsReader;");
            mids$[mid_visitDocument_a2ea3ebe] = env->getMethodID(cls, "visitDocument", "(ILorg/apache/lucene/index/StoredFieldVisitor;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void StoredFieldsReader::checkIntegrity() const
        {
          env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
        }

        StoredFieldsReader StoredFieldsReader::clone() const
        {
          return StoredFieldsReader(env->callObjectMethod(this$, mids$[mid_clone_ef585f0d]));
        }

        void StoredFieldsReader::visitDocument(jint a0, const ::org::apache::lucene::index::StoredFieldVisitor & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_visitDocument_a2ea3ebe], a0, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_StoredFieldsReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StoredFieldsReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StoredFieldsReader_checkIntegrity(t_StoredFieldsReader *self);
        static PyObject *t_StoredFieldsReader_clone(t_StoredFieldsReader *self);
        static PyObject *t_StoredFieldsReader_visitDocument(t_StoredFieldsReader *self, PyObject *args);

        static PyMethodDef t_StoredFieldsReader__methods_[] = {
          DECLARE_METHOD(t_StoredFieldsReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StoredFieldsReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StoredFieldsReader, checkIntegrity, METH_NOARGS),
          DECLARE_METHOD(t_StoredFieldsReader, clone, METH_NOARGS),
          DECLARE_METHOD(t_StoredFieldsReader, visitDocument, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(StoredFieldsReader, t_StoredFieldsReader, ::java::lang::Object, StoredFieldsReader, abstract_init, 0, 0, 0, 0, 0);

        void t_StoredFieldsReader::install(PyObject *module)
        {
          installType(&PY_TYPE(StoredFieldsReader), module, "StoredFieldsReader", 0);
        }

        void t_StoredFieldsReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(StoredFieldsReader).tp_dict, "class_", make_descriptor(StoredFieldsReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(StoredFieldsReader).tp_dict, "wrapfn_", make_descriptor(t_StoredFieldsReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(StoredFieldsReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_StoredFieldsReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, StoredFieldsReader::initializeClass, 1)))
            return NULL;
          return t_StoredFieldsReader::wrap_Object(StoredFieldsReader(((t_StoredFieldsReader *) arg)->object.this$));
        }
        static PyObject *t_StoredFieldsReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, StoredFieldsReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_StoredFieldsReader_checkIntegrity(t_StoredFieldsReader *self)
        {
          OBJ_CALL(self->object.checkIntegrity());
          Py_RETURN_NONE;
        }

        static PyObject *t_StoredFieldsReader_clone(t_StoredFieldsReader *self)
        {
          StoredFieldsReader result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_StoredFieldsReader::wrap_Object(result);
        }

        static PyObject *t_StoredFieldsReader_visitDocument(t_StoredFieldsReader *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::index::StoredFieldVisitor a1((jobject) NULL);

          if (!parseArgs(args, "Ik", ::org::apache::lucene::index::StoredFieldVisitor::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.visitDocument(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "visitDocument", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MultiTermQuery$ConstantScoreAutoRewrite.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MultiTermQuery$ConstantScoreAutoRewrite::class$ = NULL;
        jmethodID *MultiTermQuery$ConstantScoreAutoRewrite::mids$ = NULL;
        bool MultiTermQuery$ConstantScoreAutoRewrite::live$ = false;

        jclass MultiTermQuery$ConstantScoreAutoRewrite::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MultiTermQuery$ConstantScoreAutoRewrite");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiTermQuery$ConstantScoreAutoRewrite::MultiTermQuery$ConstantScoreAutoRewrite() : ::org::apache::lucene::search::ConstantScoreAutoRewrite(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MultiTermQuery$ConstantScoreAutoRewrite_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTermQuery$ConstantScoreAutoRewrite_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTermQuery$ConstantScoreAutoRewrite_of_(t_MultiTermQuery$ConstantScoreAutoRewrite *self, PyObject *args);
        static int t_MultiTermQuery$ConstantScoreAutoRewrite_init_(t_MultiTermQuery$ConstantScoreAutoRewrite *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiTermQuery$ConstantScoreAutoRewrite_get__parameters_(t_MultiTermQuery$ConstantScoreAutoRewrite *self, void *data);
        static PyGetSetDef t_MultiTermQuery$ConstantScoreAutoRewrite__fields_[] = {
          DECLARE_GET_FIELD(t_MultiTermQuery$ConstantScoreAutoRewrite, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiTermQuery$ConstantScoreAutoRewrite__methods_[] = {
          DECLARE_METHOD(t_MultiTermQuery$ConstantScoreAutoRewrite, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQuery$ConstantScoreAutoRewrite, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQuery$ConstantScoreAutoRewrite, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiTermQuery$ConstantScoreAutoRewrite, t_MultiTermQuery$ConstantScoreAutoRewrite, ::org::apache::lucene::search::ConstantScoreAutoRewrite, MultiTermQuery$ConstantScoreAutoRewrite, t_MultiTermQuery$ConstantScoreAutoRewrite_init_, 0, 0, t_MultiTermQuery$ConstantScoreAutoRewrite__fields_, 0, 0);
        PyObject *t_MultiTermQuery$ConstantScoreAutoRewrite::wrap_Object(const MultiTermQuery$ConstantScoreAutoRewrite& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MultiTermQuery$ConstantScoreAutoRewrite::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MultiTermQuery$ConstantScoreAutoRewrite *self = (t_MultiTermQuery$ConstantScoreAutoRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_MultiTermQuery$ConstantScoreAutoRewrite::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MultiTermQuery$ConstantScoreAutoRewrite::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MultiTermQuery$ConstantScoreAutoRewrite *self = (t_MultiTermQuery$ConstantScoreAutoRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_MultiTermQuery$ConstantScoreAutoRewrite::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiTermQuery$ConstantScoreAutoRewrite), module, "MultiTermQuery$ConstantScoreAutoRewrite", 0);
        }

        void t_MultiTermQuery$ConstantScoreAutoRewrite::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiTermQuery$ConstantScoreAutoRewrite).tp_dict, "class_", make_descriptor(MultiTermQuery$ConstantScoreAutoRewrite::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery$ConstantScoreAutoRewrite).tp_dict, "wrapfn_", make_descriptor(t_MultiTermQuery$ConstantScoreAutoRewrite::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery$ConstantScoreAutoRewrite).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiTermQuery$ConstantScoreAutoRewrite_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiTermQuery$ConstantScoreAutoRewrite::initializeClass, 1)))
            return NULL;
          return t_MultiTermQuery$ConstantScoreAutoRewrite::wrap_Object(MultiTermQuery$ConstantScoreAutoRewrite(((t_MultiTermQuery$ConstantScoreAutoRewrite *) arg)->object.this$));
        }
        static PyObject *t_MultiTermQuery$ConstantScoreAutoRewrite_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiTermQuery$ConstantScoreAutoRewrite::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiTermQuery$ConstantScoreAutoRewrite_of_(t_MultiTermQuery$ConstantScoreAutoRewrite *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_MultiTermQuery$ConstantScoreAutoRewrite_init_(t_MultiTermQuery$ConstantScoreAutoRewrite *self, PyObject *args, PyObject *kwds)
        {
          MultiTermQuery$ConstantScoreAutoRewrite object((jobject) NULL);

          INT_CALL(object = MultiTermQuery$ConstantScoreAutoRewrite());
          self->object = object;
          self->parameters[0] = &::org::apache::lucene::search::PY_TYPE(BooleanQuery);

          return 0;
        }
        static PyObject *t_MultiTermQuery$ConstantScoreAutoRewrite_get__parameters_(t_MultiTermQuery$ConstantScoreAutoRewrite *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/range/DoubleRangeFacetCounts.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Filter.h"
#include "org/apache/lucene/facet/range/DoubleRange.h"
#include "org/apache/lucene/facet/FacetsCollector.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {

          ::java::lang::Class *DoubleRangeFacetCounts::class$ = NULL;
          jmethodID *DoubleRangeFacetCounts::mids$ = NULL;
          bool DoubleRangeFacetCounts::live$ = false;

          jclass DoubleRangeFacetCounts::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/range/DoubleRangeFacetCounts");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_9ae8847d] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/facet/FacetsCollector;[Lorg/apache/lucene/facet/range/DoubleRange;)V");
              mids$[mid_init$_828c1751] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/queries/function/ValueSource;Lorg/apache/lucene/facet/FacetsCollector;[Lorg/apache/lucene/facet/range/DoubleRange;)V");
              mids$[mid_init$_f6d04191] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/queries/function/ValueSource;Lorg/apache/lucene/facet/FacetsCollector;Lorg/apache/lucene/search/Filter;[Lorg/apache/lucene/facet/range/DoubleRange;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DoubleRangeFacetCounts::DoubleRangeFacetCounts(const ::java::lang::String & a0, const ::org::apache::lucene::facet::FacetsCollector & a1, const JArray< ::org::apache::lucene::facet::range::DoubleRange > & a2) : ::org::apache::lucene::facet::range::RangeFacetCounts(env->newObject(initializeClass, &mids$, mid_init$_9ae8847d, a0.this$, a1.this$, a2.this$)) {}

          DoubleRangeFacetCounts::DoubleRangeFacetCounts(const ::java::lang::String & a0, const ::org::apache::lucene::queries::function::ValueSource & a1, const ::org::apache::lucene::facet::FacetsCollector & a2, const JArray< ::org::apache::lucene::facet::range::DoubleRange > & a3) : ::org::apache::lucene::facet::range::RangeFacetCounts(env->newObject(initializeClass, &mids$, mid_init$_828c1751, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          DoubleRangeFacetCounts::DoubleRangeFacetCounts(const ::java::lang::String & a0, const ::org::apache::lucene::queries::function::ValueSource & a1, const ::org::apache::lucene::facet::FacetsCollector & a2, const ::org::apache::lucene::search::Filter & a3, const JArray< ::org::apache::lucene::facet::range::DoubleRange > & a4) : ::org::apache::lucene::facet::range::RangeFacetCounts(env->newObject(initializeClass, &mids$, mid_init$_f6d04191, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {
          static PyObject *t_DoubleRangeFacetCounts_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DoubleRangeFacetCounts_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DoubleRangeFacetCounts_init_(t_DoubleRangeFacetCounts *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_DoubleRangeFacetCounts__methods_[] = {
            DECLARE_METHOD(t_DoubleRangeFacetCounts, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DoubleRangeFacetCounts, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DoubleRangeFacetCounts, t_DoubleRangeFacetCounts, ::org::apache::lucene::facet::range::RangeFacetCounts, DoubleRangeFacetCounts, t_DoubleRangeFacetCounts_init_, 0, 0, 0, 0, 0);

          void t_DoubleRangeFacetCounts::install(PyObject *module)
          {
            installType(&PY_TYPE(DoubleRangeFacetCounts), module, "DoubleRangeFacetCounts", 0);
          }

          void t_DoubleRangeFacetCounts::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DoubleRangeFacetCounts).tp_dict, "class_", make_descriptor(DoubleRangeFacetCounts::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DoubleRangeFacetCounts).tp_dict, "wrapfn_", make_descriptor(t_DoubleRangeFacetCounts::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DoubleRangeFacetCounts).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DoubleRangeFacetCounts_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DoubleRangeFacetCounts::initializeClass, 1)))
              return NULL;
            return t_DoubleRangeFacetCounts::wrap_Object(DoubleRangeFacetCounts(((t_DoubleRangeFacetCounts *) arg)->object.this$));
          }
          static PyObject *t_DoubleRangeFacetCounts_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DoubleRangeFacetCounts::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DoubleRangeFacetCounts_init_(t_DoubleRangeFacetCounts *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a1((jobject) NULL);
                JArray< ::org::apache::lucene::facet::range::DoubleRange > a2((jobject) NULL);
                DoubleRangeFacetCounts object((jobject) NULL);

                if (!parseArgs(args, "sk[k", ::org::apache::lucene::facet::FacetsCollector::initializeClass, ::org::apache::lucene::facet::range::DoubleRange::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = DoubleRangeFacetCounts(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a2((jobject) NULL);
                JArray< ::org::apache::lucene::facet::range::DoubleRange > a3((jobject) NULL);
                DoubleRangeFacetCounts object((jobject) NULL);

                if (!parseArgs(args, "skk[k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, ::org::apache::lucene::facet::range::DoubleRange::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = DoubleRangeFacetCounts(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a2((jobject) NULL);
                ::org::apache::lucene::search::Filter a3((jobject) NULL);
                JArray< ::org::apache::lucene::facet::range::DoubleRange > a4((jobject) NULL);
                DoubleRangeFacetCounts object((jobject) NULL);

                if (!parseArgs(args, "skkk[k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::facet::range::DoubleRange::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = DoubleRangeFacetCounts(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cjk/CJKTokenizerFactory.h"
#include "org/apache/lucene/analysis/cjk/CJKTokenizer.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {

          ::java::lang::Class *CJKTokenizerFactory::class$ = NULL;
          jmethodID *CJKTokenizerFactory::mids$ = NULL;
          bool CJKTokenizerFactory::live$ = false;

          jclass CJKTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cjk/CJKTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_277e6a01] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/cjk/CJKTokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CJKTokenizerFactory::CJKTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::cjk::CJKTokenizer CJKTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::cjk::CJKTokenizer(env->callObjectMethod(this$, mids$[mid_create_277e6a01], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {
          static PyObject *t_CJKTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CJKTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CJKTokenizerFactory_init_(t_CJKTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CJKTokenizerFactory_create(t_CJKTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_CJKTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_CJKTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CJKTokenizerFactory, t_CJKTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, CJKTokenizerFactory, t_CJKTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_CJKTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(CJKTokenizerFactory), module, "CJKTokenizerFactory", 0);
          }

          void t_CJKTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CJKTokenizerFactory).tp_dict, "class_", make_descriptor(CJKTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CJKTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_CJKTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CJKTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CJKTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CJKTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_CJKTokenizerFactory::wrap_Object(CJKTokenizerFactory(((t_CJKTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_CJKTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CJKTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CJKTokenizerFactory_init_(t_CJKTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            CJKTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = CJKTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CJKTokenizerFactory_create(t_CJKTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::cjk::CJKTokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::cjk::t_CJKTokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CJKTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/br/BrazilianStemFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/br/BrazilianStemFilter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace br {

          ::java::lang::Class *BrazilianStemFilterFactory::class$ = NULL;
          jmethodID *BrazilianStemFilterFactory::mids$ = NULL;
          bool BrazilianStemFilterFactory::live$ = false;

          jclass BrazilianStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/br/BrazilianStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_84777f61] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/br/BrazilianStemFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BrazilianStemFilterFactory::BrazilianStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::br::BrazilianStemFilter BrazilianStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::br::BrazilianStemFilter(env->callObjectMethod(this$, mids$[mid_create_84777f61], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace br {
          static PyObject *t_BrazilianStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BrazilianStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BrazilianStemFilterFactory_init_(t_BrazilianStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BrazilianStemFilterFactory_create(t_BrazilianStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_BrazilianStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_BrazilianStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BrazilianStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BrazilianStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BrazilianStemFilterFactory, t_BrazilianStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, BrazilianStemFilterFactory, t_BrazilianStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_BrazilianStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(BrazilianStemFilterFactory), module, "BrazilianStemFilterFactory", 0);
          }

          void t_BrazilianStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BrazilianStemFilterFactory).tp_dict, "class_", make_descriptor(BrazilianStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BrazilianStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_BrazilianStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BrazilianStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BrazilianStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BrazilianStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_BrazilianStemFilterFactory::wrap_Object(BrazilianStemFilterFactory(((t_BrazilianStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_BrazilianStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BrazilianStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BrazilianStemFilterFactory_init_(t_BrazilianStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            BrazilianStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = BrazilianStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BrazilianStemFilterFactory_create(t_BrazilianStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::br::BrazilianStemFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::br::t_BrazilianStemFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(BrazilianStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/DirectWriter.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *DirectWriter::class$ = NULL;
          jmethodID *DirectWriter::mids$ = NULL;
          bool DirectWriter::live$ = false;

          jclass DirectWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/DirectWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_add_0ee6df2f] = env->getMethodID(cls, "add", "(J)V");
              mids$[mid_bitsRequired_0ee6df30] = env->getStaticMethodID(cls, "bitsRequired", "(J)I");
              mids$[mid_finish_54c6a166] = env->getMethodID(cls, "finish", "()V");
              mids$[mid_getInstance_3b8d11ee] = env->getStaticMethodID(cls, "getInstance", "(Lorg/apache/lucene/store/IndexOutput;JI)Lorg/apache/lucene/util/packed/DirectWriter;");
              mids$[mid_unsignedBitsRequired_0ee6df30] = env->getStaticMethodID(cls, "unsignedBitsRequired", "(J)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void DirectWriter::add(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_add_0ee6df2f], a0);
          }

          jint DirectWriter::bitsRequired(jlong a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_bitsRequired_0ee6df30], a0);
          }

          void DirectWriter::finish() const
          {
            env->callVoidMethod(this$, mids$[mid_finish_54c6a166]);
          }

          DirectWriter DirectWriter::getInstance(const ::org::apache::lucene::store::IndexOutput & a0, jlong a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            return DirectWriter(env->callStaticObjectMethod(cls, mids$[mid_getInstance_3b8d11ee], a0.this$, a1, a2));
          }

          jint DirectWriter::unsignedBitsRequired(jlong a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_unsignedBitsRequired_0ee6df30], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_DirectWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DirectWriter_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DirectWriter_add(t_DirectWriter *self, PyObject *arg);
          static PyObject *t_DirectWriter_bitsRequired(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DirectWriter_finish(t_DirectWriter *self);
          static PyObject *t_DirectWriter_getInstance(PyTypeObject *type, PyObject *args);
          static PyObject *t_DirectWriter_unsignedBitsRequired(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_DirectWriter__methods_[] = {
            DECLARE_METHOD(t_DirectWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DirectWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DirectWriter, add, METH_O),
            DECLARE_METHOD(t_DirectWriter, bitsRequired, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DirectWriter, finish, METH_NOARGS),
            DECLARE_METHOD(t_DirectWriter, getInstance, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_DirectWriter, unsignedBitsRequired, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DirectWriter, t_DirectWriter, ::java::lang::Object, DirectWriter, abstract_init, 0, 0, 0, 0, 0);

          void t_DirectWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(DirectWriter), module, "DirectWriter", 0);
          }

          void t_DirectWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DirectWriter).tp_dict, "class_", make_descriptor(DirectWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DirectWriter).tp_dict, "wrapfn_", make_descriptor(t_DirectWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DirectWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DirectWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DirectWriter::initializeClass, 1)))
              return NULL;
            return t_DirectWriter::wrap_Object(DirectWriter(((t_DirectWriter *) arg)->object.this$));
          }
          static PyObject *t_DirectWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DirectWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_DirectWriter_add(t_DirectWriter *self, PyObject *arg)
          {
            jlong a0;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(self->object.add(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "add", arg);
            return NULL;
          }

          static PyObject *t_DirectWriter_bitsRequired(PyTypeObject *type, PyObject *arg)
          {
            jlong a0;
            jint result;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::DirectWriter::bitsRequired(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "bitsRequired", arg);
            return NULL;
          }

          static PyObject *t_DirectWriter_finish(t_DirectWriter *self)
          {
            OBJ_CALL(self->object.finish());
            Py_RETURN_NONE;
          }

          static PyObject *t_DirectWriter_getInstance(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::store::IndexOutput a0((jobject) NULL);
            jlong a1;
            jint a2;
            DirectWriter result((jobject) NULL);

            if (!parseArgs(args, "kJI", ::org::apache::lucene::store::IndexOutput::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::DirectWriter::getInstance(a0, a1, a2));
              return t_DirectWriter::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getInstance", args);
            return NULL;
          }

          static PyObject *t_DirectWriter_unsignedBitsRequired(PyTypeObject *type, PyObject *arg)
          {
            jlong a0;
            jint result;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::DirectWriter::unsignedBitsRequired(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "unsignedBitsRequired", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/BytesRefFieldSource.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *BytesRefFieldSource::class$ = NULL;
            jmethodID *BytesRefFieldSource::mids$ = NULL;
            bool BytesRefFieldSource::live$ = false;

            jclass BytesRefFieldSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/BytesRefFieldSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            BytesRefFieldSource::BytesRefFieldSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            ::org::apache::lucene::queries::function::FunctionValues BytesRefFieldSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_BytesRefFieldSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BytesRefFieldSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_BytesRefFieldSource_init_(t_BytesRefFieldSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_BytesRefFieldSource_getValues(t_BytesRefFieldSource *self, PyObject *args);

            static PyMethodDef t_BytesRefFieldSource__methods_[] = {
              DECLARE_METHOD(t_BytesRefFieldSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BytesRefFieldSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BytesRefFieldSource, getValues, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(BytesRefFieldSource, t_BytesRefFieldSource, ::org::apache::lucene::queries::function::valuesource::FieldCacheSource, BytesRefFieldSource, t_BytesRefFieldSource_init_, 0, 0, 0, 0, 0);

            void t_BytesRefFieldSource::install(PyObject *module)
            {
              installType(&PY_TYPE(BytesRefFieldSource), module, "BytesRefFieldSource", 0);
            }

            void t_BytesRefFieldSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(BytesRefFieldSource).tp_dict, "class_", make_descriptor(BytesRefFieldSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(BytesRefFieldSource).tp_dict, "wrapfn_", make_descriptor(t_BytesRefFieldSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(BytesRefFieldSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_BytesRefFieldSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BytesRefFieldSource::initializeClass, 1)))
                return NULL;
              return t_BytesRefFieldSource::wrap_Object(BytesRefFieldSource(((t_BytesRefFieldSource *) arg)->object.this$));
            }
            static PyObject *t_BytesRefFieldSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BytesRefFieldSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_BytesRefFieldSource_init_(t_BytesRefFieldSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              BytesRefFieldSource object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = BytesRefFieldSource(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_BytesRefFieldSource_getValues(t_BytesRefFieldSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(BytesRefFieldSource), (PyObject *) self, "getValues", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexNotFoundException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexNotFoundException::class$ = NULL;
        jmethodID *IndexNotFoundException::mids$ = NULL;
        bool IndexNotFoundException::live$ = false;

        jclass IndexNotFoundException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexNotFoundException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexNotFoundException::IndexNotFoundException(const ::java::lang::String & a0) : ::java::io::FileNotFoundException(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexNotFoundException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexNotFoundException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IndexNotFoundException_init_(t_IndexNotFoundException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_IndexNotFoundException__methods_[] = {
          DECLARE_METHOD(t_IndexNotFoundException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexNotFoundException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexNotFoundException, t_IndexNotFoundException, ::java::io::FileNotFoundException, IndexNotFoundException, t_IndexNotFoundException_init_, 0, 0, 0, 0, 0);

        void t_IndexNotFoundException::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexNotFoundException), module, "IndexNotFoundException", 0);
        }

        void t_IndexNotFoundException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexNotFoundException).tp_dict, "class_", make_descriptor(IndexNotFoundException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexNotFoundException).tp_dict, "wrapfn_", make_descriptor(t_IndexNotFoundException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexNotFoundException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexNotFoundException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexNotFoundException::initializeClass, 1)))
            return NULL;
          return t_IndexNotFoundException::wrap_Object(IndexNotFoundException(((t_IndexNotFoundException *) arg)->object.this$));
        }
        static PyObject *t_IndexNotFoundException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexNotFoundException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IndexNotFoundException_init_(t_IndexNotFoundException *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          IndexNotFoundException object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = IndexNotFoundException(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Character.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Class.h"
#include "java/lang/Comparable.h"
#include "java/io/Serializable.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Character::class$ = NULL;
    jmethodID *Character::mids$ = NULL;
    bool Character::live$ = false;
    jbyte Character::COMBINING_SPACING_MARK = (jbyte) 0;
    jbyte Character::CONNECTOR_PUNCTUATION = (jbyte) 0;
    jbyte Character::CONTROL = (jbyte) 0;
    jbyte Character::CURRENCY_SYMBOL = (jbyte) 0;
    jbyte Character::DASH_PUNCTUATION = (jbyte) 0;
    jbyte Character::DECIMAL_DIGIT_NUMBER = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_ARABIC_NUMBER = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_BOUNDARY_NEUTRAL = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_COMMON_NUMBER_SEPARATOR = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_EUROPEAN_NUMBER = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_LEFT_TO_RIGHT = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_NONSPACING_MARK = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_OTHER_NEUTRALS = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_PARAGRAPH_SEPARATOR = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_POP_DIRECTIONAL_FORMAT = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_RIGHT_TO_LEFT = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_SEGMENT_SEPARATOR = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_UNDEFINED = (jbyte) 0;
    jbyte Character::DIRECTIONALITY_WHITESPACE = (jbyte) 0;
    jbyte Character::ENCLOSING_MARK = (jbyte) 0;
    jbyte Character::END_PUNCTUATION = (jbyte) 0;
    jbyte Character::FINAL_QUOTE_PUNCTUATION = (jbyte) 0;
    jbyte Character::FORMAT = (jbyte) 0;
    jbyte Character::INITIAL_QUOTE_PUNCTUATION = (jbyte) 0;
    jbyte Character::LETTER_NUMBER = (jbyte) 0;
    jbyte Character::LINE_SEPARATOR = (jbyte) 0;
    jbyte Character::LOWERCASE_LETTER = (jbyte) 0;
    jbyte Character::MATH_SYMBOL = (jbyte) 0;
    jint Character::MAX_CODE_POINT = (jint) 0;
    jchar Character::MAX_HIGH_SURROGATE = (jchar) 0;
    jchar Character::MAX_LOW_SURROGATE = (jchar) 0;
    jint Character::MAX_RADIX = (jint) 0;
    jchar Character::MAX_SURROGATE = (jchar) 0;
    jchar Character::MAX_VALUE = (jchar) 0;
    jint Character::MIN_CODE_POINT = (jint) 0;
    jchar Character::MIN_HIGH_SURROGATE = (jchar) 0;
    jchar Character::MIN_LOW_SURROGATE = (jchar) 0;
    jint Character::MIN_RADIX = (jint) 0;
    jint Character::MIN_SUPPLEMENTARY_CODE_POINT = (jint) 0;
    jchar Character::MIN_SURROGATE = (jchar) 0;
    jchar Character::MIN_VALUE = (jchar) 0;
    jbyte Character::MODIFIER_LETTER = (jbyte) 0;
    jbyte Character::MODIFIER_SYMBOL = (jbyte) 0;
    jbyte Character::NON_SPACING_MARK = (jbyte) 0;
    jbyte Character::OTHER_LETTER = (jbyte) 0;
    jbyte Character::OTHER_NUMBER = (jbyte) 0;
    jbyte Character::OTHER_PUNCTUATION = (jbyte) 0;
    jbyte Character::OTHER_SYMBOL = (jbyte) 0;
    jbyte Character::PARAGRAPH_SEPARATOR = (jbyte) 0;
    jbyte Character::PRIVATE_USE = (jbyte) 0;
    jint Character::SIZE = (jint) 0;
    jbyte Character::SPACE_SEPARATOR = (jbyte) 0;
    jbyte Character::START_PUNCTUATION = (jbyte) 0;
    jbyte Character::SURROGATE = (jbyte) 0;
    jbyte Character::TITLECASE_LETTER = (jbyte) 0;
    ::java::lang::Class *Character::TYPE = NULL;
    jbyte Character::UNASSIGNED = (jbyte) 0;
    jbyte Character::UPPERCASE_LETTER = (jbyte) 0;

    jclass Character::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Character");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_87fd545a] = env->getMethodID(cls, "<init>", "(C)V");
        mids$[mid_charCount_39c7bd23] = env->getStaticMethodID(cls, "charCount", "(I)I");
        mids$[mid_charValue_54c6a173] = env->getMethodID(cls, "charValue", "()C");
        mids$[mid_codePointAt_ec6430eb] = env->getStaticMethodID(cls, "codePointAt", "([CI)I");
        mids$[mid_codePointAt_2fbf15bf] = env->getStaticMethodID(cls, "codePointAt", "(Ljava/lang/CharSequence;I)I");
        mids$[mid_codePointAt_6f0bb349] = env->getStaticMethodID(cls, "codePointAt", "([CII)I");
        mids$[mid_codePointBefore_2fbf15bf] = env->getStaticMethodID(cls, "codePointBefore", "(Ljava/lang/CharSequence;I)I");
        mids$[mid_codePointBefore_ec6430eb] = env->getStaticMethodID(cls, "codePointBefore", "([CI)I");
        mids$[mid_codePointBefore_6f0bb349] = env->getStaticMethodID(cls, "codePointBefore", "([CII)I");
        mids$[mid_codePointCount_6cc8d7fd] = env->getStaticMethodID(cls, "codePointCount", "(Ljava/lang/CharSequence;II)I");
        mids$[mid_codePointCount_6f0bb349] = env->getStaticMethodID(cls, "codePointCount", "([CII)I");
        mids$[mid_compare_37c94831] = env->getStaticMethodID(cls, "compare", "(CC)I");
        mids$[mid_compareTo_35927258] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Character;)I");
        mids$[mid_digit_3108448f] = env->getStaticMethodID(cls, "digit", "(CI)I");
        mids$[mid_digit_d8d154b9] = env->getStaticMethodID(cls, "digit", "(II)I");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_forDigit_d8d154b3] = env->getStaticMethodID(cls, "forDigit", "(II)C");
        mids$[mid_getDirectionality_39c7bd28] = env->getStaticMethodID(cls, "getDirectionality", "(I)B");
        mids$[mid_getDirectionality_87fd544e] = env->getStaticMethodID(cls, "getDirectionality", "(C)B");
        mids$[mid_getName_141401b3] = env->getStaticMethodID(cls, "getName", "(I)Ljava/lang/String;");
        mids$[mid_getNumericValue_39c7bd23] = env->getStaticMethodID(cls, "getNumericValue", "(I)I");
        mids$[mid_getNumericValue_87fd5445] = env->getStaticMethodID(cls, "getNumericValue", "(C)I");
        mids$[mid_getType_87fd5445] = env->getStaticMethodID(cls, "getType", "(C)I");
        mids$[mid_getType_39c7bd23] = env->getStaticMethodID(cls, "getType", "(I)I");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_highSurrogate_39c7bd29] = env->getStaticMethodID(cls, "highSurrogate", "(I)C");
        mids$[mid_isAlphabetic_39c7bd30] = env->getStaticMethodID(cls, "isAlphabetic", "(I)Z");
        mids$[mid_isBmpCodePoint_39c7bd30] = env->getStaticMethodID(cls, "isBmpCodePoint", "(I)Z");
        mids$[mid_isDefined_87fd5456] = env->getStaticMethodID(cls, "isDefined", "(C)Z");
        mids$[mid_isDefined_39c7bd30] = env->getStaticMethodID(cls, "isDefined", "(I)Z");
        mids$[mid_isDigit_39c7bd30] = env->getStaticMethodID(cls, "isDigit", "(I)Z");
        mids$[mid_isDigit_87fd5456] = env->getStaticMethodID(cls, "isDigit", "(C)Z");
        mids$[mid_isHighSurrogate_87fd5456] = env->getStaticMethodID(cls, "isHighSurrogate", "(C)Z");
        mids$[mid_isISOControl_39c7bd30] = env->getStaticMethodID(cls, "isISOControl", "(I)Z");
        mids$[mid_isISOControl_87fd5456] = env->getStaticMethodID(cls, "isISOControl", "(C)Z");
        mids$[mid_isIdentifierIgnorable_39c7bd30] = env->getStaticMethodID(cls, "isIdentifierIgnorable", "(I)Z");
        mids$[mid_isIdentifierIgnorable_87fd5456] = env->getStaticMethodID(cls, "isIdentifierIgnorable", "(C)Z");
        mids$[mid_isIdeographic_39c7bd30] = env->getStaticMethodID(cls, "isIdeographic", "(I)Z");
        mids$[mid_isJavaIdentifierPart_39c7bd30] = env->getStaticMethodID(cls, "isJavaIdentifierPart", "(I)Z");
        mids$[mid_isJavaIdentifierPart_87fd5456] = env->getStaticMethodID(cls, "isJavaIdentifierPart", "(C)Z");
        mids$[mid_isJavaIdentifierStart_87fd5456] = env->getStaticMethodID(cls, "isJavaIdentifierStart", "(C)Z");
        mids$[mid_isJavaIdentifierStart_39c7bd30] = env->getStaticMethodID(cls, "isJavaIdentifierStart", "(I)Z");
        mids$[mid_isJavaLetter_87fd5456] = env->getStaticMethodID(cls, "isJavaLetter", "(C)Z");
        mids$[mid_isJavaLetterOrDigit_87fd5456] = env->getStaticMethodID(cls, "isJavaLetterOrDigit", "(C)Z");
        mids$[mid_isLetter_87fd5456] = env->getStaticMethodID(cls, "isLetter", "(C)Z");
        mids$[mid_isLetter_39c7bd30] = env->getStaticMethodID(cls, "isLetter", "(I)Z");
        mids$[mid_isLetterOrDigit_39c7bd30] = env->getStaticMethodID(cls, "isLetterOrDigit", "(I)Z");
        mids$[mid_isLetterOrDigit_87fd5456] = env->getStaticMethodID(cls, "isLetterOrDigit", "(C)Z");
        mids$[mid_isLowSurrogate_87fd5456] = env->getStaticMethodID(cls, "isLowSurrogate", "(C)Z");
        mids$[mid_isLowerCase_39c7bd30] = env->getStaticMethodID(cls, "isLowerCase", "(I)Z");
        mids$[mid_isLowerCase_87fd5456] = env->getStaticMethodID(cls, "isLowerCase", "(C)Z");
        mids$[mid_isMirrored_87fd5456] = env->getStaticMethodID(cls, "isMirrored", "(C)Z");
        mids$[mid_isMirrored_39c7bd30] = env->getStaticMethodID(cls, "isMirrored", "(I)Z");
        mids$[mid_isSpace_87fd5456] = env->getStaticMethodID(cls, "isSpace", "(C)Z");
        mids$[mid_isSpaceChar_87fd5456] = env->getStaticMethodID(cls, "isSpaceChar", "(C)Z");
        mids$[mid_isSpaceChar_39c7bd30] = env->getStaticMethodID(cls, "isSpaceChar", "(I)Z");
        mids$[mid_isSupplementaryCodePoint_39c7bd30] = env->getStaticMethodID(cls, "isSupplementaryCodePoint", "(I)Z");
        mids$[mid_isSurrogate_87fd5456] = env->getStaticMethodID(cls, "isSurrogate", "(C)Z");
        mids$[mid_isSurrogatePair_37c94822] = env->getStaticMethodID(cls, "isSurrogatePair", "(CC)Z");
        mids$[mid_isTitleCase_87fd5456] = env->getStaticMethodID(cls, "isTitleCase", "(C)Z");
        mids$[mid_isTitleCase_39c7bd30] = env->getStaticMethodID(cls, "isTitleCase", "(I)Z");
        mids$[mid_isUnicodeIdentifierPart_87fd5456] = env->getStaticMethodID(cls, "isUnicodeIdentifierPart", "(C)Z");
        mids$[mid_isUnicodeIdentifierPart_39c7bd30] = env->getStaticMethodID(cls, "isUnicodeIdentifierPart", "(I)Z");
        mids$[mid_isUnicodeIdentifierStart_39c7bd30] = env->getStaticMethodID(cls, "isUnicodeIdentifierStart", "(I)Z");
        mids$[mid_isUnicodeIdentifierStart_87fd5456] = env->getStaticMethodID(cls, "isUnicodeIdentifierStart", "(C)Z");
        mids$[mid_isUpperCase_39c7bd30] = env->getStaticMethodID(cls, "isUpperCase", "(I)Z");
        mids$[mid_isUpperCase_87fd5456] = env->getStaticMethodID(cls, "isUpperCase", "(C)Z");
        mids$[mid_isValidCodePoint_39c7bd30] = env->getStaticMethodID(cls, "isValidCodePoint", "(I)Z");
        mids$[mid_isWhitespace_87fd5456] = env->getStaticMethodID(cls, "isWhitespace", "(C)Z");
        mids$[mid_isWhitespace_39c7bd30] = env->getStaticMethodID(cls, "isWhitespace", "(I)Z");
        mids$[mid_lowSurrogate_39c7bd29] = env->getStaticMethodID(cls, "lowSurrogate", "(I)C");
        mids$[mid_offsetByCodePoints_6cc8d7fd] = env->getStaticMethodID(cls, "offsetByCodePoints", "(Ljava/lang/CharSequence;II)I");
        mids$[mid_offsetByCodePoints_f453ace9] = env->getStaticMethodID(cls, "offsetByCodePoints", "([CIIII)I");
        mids$[mid_reverseBytes_87fd544f] = env->getStaticMethodID(cls, "reverseBytes", "(C)C");
        mids$[mid_toChars_b4292e99] = env->getStaticMethodID(cls, "toChars", "(I)[C");
        mids$[mid_toChars_273c5d2d] = env->getStaticMethodID(cls, "toChars", "(I[CI)I");
        mids$[mid_toCodePoint_37c94831] = env->getStaticMethodID(cls, "toCodePoint", "(CC)I");
        mids$[mid_toLowerCase_39c7bd23] = env->getStaticMethodID(cls, "toLowerCase", "(I)I");
        mids$[mid_toLowerCase_87fd544f] = env->getStaticMethodID(cls, "toLowerCase", "(C)C");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_toString_7611a535] = env->getStaticMethodID(cls, "toString", "(C)Ljava/lang/String;");
        mids$[mid_toTitleCase_87fd544f] = env->getStaticMethodID(cls, "toTitleCase", "(C)C");
        mids$[mid_toTitleCase_39c7bd23] = env->getStaticMethodID(cls, "toTitleCase", "(I)I");
        mids$[mid_toUpperCase_39c7bd23] = env->getStaticMethodID(cls, "toUpperCase", "(I)I");
        mids$[mid_toUpperCase_87fd544f] = env->getStaticMethodID(cls, "toUpperCase", "(C)C");
        mids$[mid_valueOf_58724da6] = env->getStaticMethodID(cls, "valueOf", "(C)Ljava/lang/Character;");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        COMBINING_SPACING_MARK = env->getStaticByteField(cls, "COMBINING_SPACING_MARK");
        CONNECTOR_PUNCTUATION = env->getStaticByteField(cls, "CONNECTOR_PUNCTUATION");
        CONTROL = env->getStaticByteField(cls, "CONTROL");
        CURRENCY_SYMBOL = env->getStaticByteField(cls, "CURRENCY_SYMBOL");
        DASH_PUNCTUATION = env->getStaticByteField(cls, "DASH_PUNCTUATION");
        DECIMAL_DIGIT_NUMBER = env->getStaticByteField(cls, "DECIMAL_DIGIT_NUMBER");
        DIRECTIONALITY_ARABIC_NUMBER = env->getStaticByteField(cls, "DIRECTIONALITY_ARABIC_NUMBER");
        DIRECTIONALITY_BOUNDARY_NEUTRAL = env->getStaticByteField(cls, "DIRECTIONALITY_BOUNDARY_NEUTRAL");
        DIRECTIONALITY_COMMON_NUMBER_SEPARATOR = env->getStaticByteField(cls, "DIRECTIONALITY_COMMON_NUMBER_SEPARATOR");
        DIRECTIONALITY_EUROPEAN_NUMBER = env->getStaticByteField(cls, "DIRECTIONALITY_EUROPEAN_NUMBER");
        DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR = env->getStaticByteField(cls, "DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR");
        DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR = env->getStaticByteField(cls, "DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR");
        DIRECTIONALITY_LEFT_TO_RIGHT = env->getStaticByteField(cls, "DIRECTIONALITY_LEFT_TO_RIGHT");
        DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING = env->getStaticByteField(cls, "DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING");
        DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE = env->getStaticByteField(cls, "DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE");
        DIRECTIONALITY_NONSPACING_MARK = env->getStaticByteField(cls, "DIRECTIONALITY_NONSPACING_MARK");
        DIRECTIONALITY_OTHER_NEUTRALS = env->getStaticByteField(cls, "DIRECTIONALITY_OTHER_NEUTRALS");
        DIRECTIONALITY_PARAGRAPH_SEPARATOR = env->getStaticByteField(cls, "DIRECTIONALITY_PARAGRAPH_SEPARATOR");
        DIRECTIONALITY_POP_DIRECTIONAL_FORMAT = env->getStaticByteField(cls, "DIRECTIONALITY_POP_DIRECTIONAL_FORMAT");
        DIRECTIONALITY_RIGHT_TO_LEFT = env->getStaticByteField(cls, "DIRECTIONALITY_RIGHT_TO_LEFT");
        DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC = env->getStaticByteField(cls, "DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC");
        DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING = env->getStaticByteField(cls, "DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING");
        DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE = env->getStaticByteField(cls, "DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE");
        DIRECTIONALITY_SEGMENT_SEPARATOR = env->getStaticByteField(cls, "DIRECTIONALITY_SEGMENT_SEPARATOR");
        DIRECTIONALITY_UNDEFINED = env->getStaticByteField(cls, "DIRECTIONALITY_UNDEFINED");
        DIRECTIONALITY_WHITESPACE = env->getStaticByteField(cls, "DIRECTIONALITY_WHITESPACE");
        ENCLOSING_MARK = env->getStaticByteField(cls, "ENCLOSING_MARK");
        END_PUNCTUATION = env->getStaticByteField(cls, "END_PUNCTUATION");
        FINAL_QUOTE_PUNCTUATION = env->getStaticByteField(cls, "FINAL_QUOTE_PUNCTUATION");
        FORMAT = env->getStaticByteField(cls, "FORMAT");
        INITIAL_QUOTE_PUNCTUATION = env->getStaticByteField(cls, "INITIAL_QUOTE_PUNCTUATION");
        LETTER_NUMBER = env->getStaticByteField(cls, "LETTER_NUMBER");
        LINE_SEPARATOR = env->getStaticByteField(cls, "LINE_SEPARATOR");
        LOWERCASE_LETTER = env->getStaticByteField(cls, "LOWERCASE_LETTER");
        MATH_SYMBOL = env->getStaticByteField(cls, "MATH_SYMBOL");
        MAX_CODE_POINT = env->getStaticIntField(cls, "MAX_CODE_POINT");
        MAX_HIGH_SURROGATE = env->getStaticCharField(cls, "MAX_HIGH_SURROGATE");
        MAX_LOW_SURROGATE = env->getStaticCharField(cls, "MAX_LOW_SURROGATE");
        MAX_RADIX = env->getStaticIntField(cls, "MAX_RADIX");
        MAX_SURROGATE = env->getStaticCharField(cls, "MAX_SURROGATE");
        MAX_VALUE = env->getStaticCharField(cls, "MAX_VALUE");
        MIN_CODE_POINT = env->getStaticIntField(cls, "MIN_CODE_POINT");
        MIN_HIGH_SURROGATE = env->getStaticCharField(cls, "MIN_HIGH_SURROGATE");
        MIN_LOW_SURROGATE = env->getStaticCharField(cls, "MIN_LOW_SURROGATE");
        MIN_RADIX = env->getStaticIntField(cls, "MIN_RADIX");
        MIN_SUPPLEMENTARY_CODE_POINT = env->getStaticIntField(cls, "MIN_SUPPLEMENTARY_CODE_POINT");
        MIN_SURROGATE = env->getStaticCharField(cls, "MIN_SURROGATE");
        MIN_VALUE = env->getStaticCharField(cls, "MIN_VALUE");
        MODIFIER_LETTER = env->getStaticByteField(cls, "MODIFIER_LETTER");
        MODIFIER_SYMBOL = env->getStaticByteField(cls, "MODIFIER_SYMBOL");
        NON_SPACING_MARK = env->getStaticByteField(cls, "NON_SPACING_MARK");
        OTHER_LETTER = env->getStaticByteField(cls, "OTHER_LETTER");
        OTHER_NUMBER = env->getStaticByteField(cls, "OTHER_NUMBER");
        OTHER_PUNCTUATION = env->getStaticByteField(cls, "OTHER_PUNCTUATION");
        OTHER_SYMBOL = env->getStaticByteField(cls, "OTHER_SYMBOL");
        PARAGRAPH_SEPARATOR = env->getStaticByteField(cls, "PARAGRAPH_SEPARATOR");
        PRIVATE_USE = env->getStaticByteField(cls, "PRIVATE_USE");
        SIZE = env->getStaticIntField(cls, "SIZE");
        SPACE_SEPARATOR = env->getStaticByteField(cls, "SPACE_SEPARATOR");
        START_PUNCTUATION = env->getStaticByteField(cls, "START_PUNCTUATION");
        SURROGATE = env->getStaticByteField(cls, "SURROGATE");
        TITLECASE_LETTER = env->getStaticByteField(cls, "TITLECASE_LETTER");
        TYPE = new ::java::lang::Class(env->getStaticObjectField(cls, "TYPE", "Ljava/lang/Class;"));
        UNASSIGNED = env->getStaticByteField(cls, "UNASSIGNED");
        UPPERCASE_LETTER = env->getStaticByteField(cls, "UPPERCASE_LETTER");
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Character::Character(jchar a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_87fd545a, a0)) {}

    jint Character::charCount(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_charCount_39c7bd23], a0);
    }

    jchar Character::charValue() const
    {
      return env->callCharMethod(this$, mids$[mid_charValue_54c6a173]);
    }

    jint Character::codePointAt(const JArray< jchar > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_codePointAt_ec6430eb], a0.this$, a1);
    }

    jint Character::codePointAt(const ::java::lang::CharSequence & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_codePointAt_2fbf15bf], a0.this$, a1);
    }

    jint Character::codePointAt(const JArray< jchar > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_codePointAt_6f0bb349], a0.this$, a1, a2);
    }

    jint Character::codePointBefore(const ::java::lang::CharSequence & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_codePointBefore_2fbf15bf], a0.this$, a1);
    }

    jint Character::codePointBefore(const JArray< jchar > & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_codePointBefore_ec6430eb], a0.this$, a1);
    }

    jint Character::codePointBefore(const JArray< jchar > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_codePointBefore_6f0bb349], a0.this$, a1, a2);
    }

    jint Character::codePointCount(const ::java::lang::CharSequence & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_codePointCount_6cc8d7fd], a0.this$, a1, a2);
    }

    jint Character::codePointCount(const JArray< jchar > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_codePointCount_6f0bb349], a0.this$, a1, a2);
    }

    jint Character::compare(jchar a0, jchar a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_compare_37c94831], a0, a1);
    }

    jint Character::compareTo(const Character & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareTo_35927258], a0.this$);
    }

    jint Character::digit(jchar a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_digit_3108448f], a0, a1);
    }

    jint Character::digit(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_digit_d8d154b9], a0, a1);
    }

    jboolean Character::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    jchar Character::forDigit(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticCharMethod(cls, mids$[mid_forDigit_d8d154b3], a0, a1);
    }

    jbyte Character::getDirectionality(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticByteMethod(cls, mids$[mid_getDirectionality_39c7bd28], a0);
    }

    jbyte Character::getDirectionality(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticByteMethod(cls, mids$[mid_getDirectionality_87fd544e], a0);
    }

    ::java::lang::String Character::getName(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getName_141401b3], a0));
    }

    jint Character::getNumericValue(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_getNumericValue_39c7bd23], a0);
    }

    jint Character::getNumericValue(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_getNumericValue_87fd5445], a0);
    }

    jint Character::getType(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_getType_87fd5445], a0);
    }

    jint Character::getType(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_getType_39c7bd23], a0);
    }

    jint Character::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jchar Character::highSurrogate(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticCharMethod(cls, mids$[mid_highSurrogate_39c7bd29], a0);
    }

    jboolean Character::isAlphabetic(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isAlphabetic_39c7bd30], a0);
    }

    jboolean Character::isBmpCodePoint(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isBmpCodePoint_39c7bd30], a0);
    }

    jboolean Character::isDefined(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isDefined_87fd5456], a0);
    }

    jboolean Character::isDefined(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isDefined_39c7bd30], a0);
    }

    jboolean Character::isDigit(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isDigit_39c7bd30], a0);
    }

    jboolean Character::isDigit(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isDigit_87fd5456], a0);
    }

    jboolean Character::isHighSurrogate(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isHighSurrogate_87fd5456], a0);
    }

    jboolean Character::isISOControl(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isISOControl_39c7bd30], a0);
    }

    jboolean Character::isISOControl(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isISOControl_87fd5456], a0);
    }

    jboolean Character::isIdentifierIgnorable(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isIdentifierIgnorable_39c7bd30], a0);
    }

    jboolean Character::isIdentifierIgnorable(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isIdentifierIgnorable_87fd5456], a0);
    }

    jboolean Character::isIdeographic(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isIdeographic_39c7bd30], a0);
    }

    jboolean Character::isJavaIdentifierPart(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isJavaIdentifierPart_39c7bd30], a0);
    }

    jboolean Character::isJavaIdentifierPart(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isJavaIdentifierPart_87fd5456], a0);
    }

    jboolean Character::isJavaIdentifierStart(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isJavaIdentifierStart_87fd5456], a0);
    }

    jboolean Character::isJavaIdentifierStart(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isJavaIdentifierStart_39c7bd30], a0);
    }

    jboolean Character::isJavaLetter(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isJavaLetter_87fd5456], a0);
    }

    jboolean Character::isJavaLetterOrDigit(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isJavaLetterOrDigit_87fd5456], a0);
    }

    jboolean Character::isLetter(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isLetter_87fd5456], a0);
    }

    jboolean Character::isLetter(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isLetter_39c7bd30], a0);
    }

    jboolean Character::isLetterOrDigit(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isLetterOrDigit_39c7bd30], a0);
    }

    jboolean Character::isLetterOrDigit(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isLetterOrDigit_87fd5456], a0);
    }

    jboolean Character::isLowSurrogate(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isLowSurrogate_87fd5456], a0);
    }

    jboolean Character::isLowerCase(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isLowerCase_39c7bd30], a0);
    }

    jboolean Character::isLowerCase(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isLowerCase_87fd5456], a0);
    }

    jboolean Character::isMirrored(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isMirrored_87fd5456], a0);
    }

    jboolean Character::isMirrored(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isMirrored_39c7bd30], a0);
    }

    jboolean Character::isSpace(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isSpace_87fd5456], a0);
    }

    jboolean Character::isSpaceChar(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isSpaceChar_87fd5456], a0);
    }

    jboolean Character::isSpaceChar(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isSpaceChar_39c7bd30], a0);
    }

    jboolean Character::isSupplementaryCodePoint(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isSupplementaryCodePoint_39c7bd30], a0);
    }

    jboolean Character::isSurrogate(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isSurrogate_87fd5456], a0);
    }

    jboolean Character::isSurrogatePair(jchar a0, jchar a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isSurrogatePair_37c94822], a0, a1);
    }

    jboolean Character::isTitleCase(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isTitleCase_87fd5456], a0);
    }

    jboolean Character::isTitleCase(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isTitleCase_39c7bd30], a0);
    }

    jboolean Character::isUnicodeIdentifierPart(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isUnicodeIdentifierPart_87fd5456], a0);
    }

    jboolean Character::isUnicodeIdentifierPart(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isUnicodeIdentifierPart_39c7bd30], a0);
    }

    jboolean Character::isUnicodeIdentifierStart(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isUnicodeIdentifierStart_39c7bd30], a0);
    }

    jboolean Character::isUnicodeIdentifierStart(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isUnicodeIdentifierStart_87fd5456], a0);
    }

    jboolean Character::isUpperCase(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isUpperCase_39c7bd30], a0);
    }

    jboolean Character::isUpperCase(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isUpperCase_87fd5456], a0);
    }

    jboolean Character::isValidCodePoint(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isValidCodePoint_39c7bd30], a0);
    }

    jboolean Character::isWhitespace(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isWhitespace_87fd5456], a0);
    }

    jboolean Character::isWhitespace(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isWhitespace_39c7bd30], a0);
    }

    jchar Character::lowSurrogate(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticCharMethod(cls, mids$[mid_lowSurrogate_39c7bd29], a0);
    }

    jint Character::offsetByCodePoints(const ::java::lang::CharSequence & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_offsetByCodePoints_6cc8d7fd], a0.this$, a1, a2);
    }

    jint Character::offsetByCodePoints(const JArray< jchar > & a0, jint a1, jint a2, jint a3, jint a4)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_offsetByCodePoints_f453ace9], a0.this$, a1, a2, a3, a4);
    }

    jchar Character::reverseBytes(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticCharMethod(cls, mids$[mid_reverseBytes_87fd544f], a0);
    }

    JArray< jchar > Character::toChars(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< jchar >(env->callStaticObjectMethod(cls, mids$[mid_toChars_b4292e99], a0));
    }

    jint Character::toChars(jint a0, const JArray< jchar > & a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_toChars_273c5d2d], a0, a1.this$, a2);
    }

    jint Character::toCodePoint(jchar a0, jchar a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_toCodePoint_37c94831], a0, a1);
    }

    jint Character::toLowerCase(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_toLowerCase_39c7bd23], a0);
    }

    jchar Character::toLowerCase(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticCharMethod(cls, mids$[mid_toLowerCase_87fd544f], a0);
    }

    ::java::lang::String Character::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    ::java::lang::String Character::toString(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_7611a535], a0));
    }

    jchar Character::toTitleCase(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticCharMethod(cls, mids$[mid_toTitleCase_87fd544f], a0);
    }

    jint Character::toTitleCase(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_toTitleCase_39c7bd23], a0);
    }

    jint Character::toUpperCase(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_toUpperCase_39c7bd23], a0);
    }

    jchar Character::toUpperCase(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticCharMethod(cls, mids$[mid_toUpperCase_87fd544f], a0);
    }

    Character Character::valueOf(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Character(env->callStaticObjectMethod(cls, mids$[mid_valueOf_58724da6], a0));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Character_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Character_init_(t_Character *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Character_charCount(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_charValue(t_Character *self);
    static PyObject *t_Character_codePointAt(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_codePointBefore(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_codePointCount(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_compare(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_compareTo(t_Character *self, PyObject *arg);
    static PyObject *t_Character_digit(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_equals(t_Character *self, PyObject *args);
    static PyObject *t_Character_forDigit(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_getDirectionality(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_getName(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_getNumericValue(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_getType(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_hashCode(t_Character *self, PyObject *args);
    static PyObject *t_Character_highSurrogate(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isAlphabetic(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isBmpCodePoint(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isDefined(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isDigit(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isHighSurrogate(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isISOControl(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isIdentifierIgnorable(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isIdeographic(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isJavaIdentifierPart(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isJavaIdentifierStart(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isJavaLetter(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isJavaLetterOrDigit(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isLetter(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isLetterOrDigit(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isLowSurrogate(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isLowerCase(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isMirrored(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isSpace(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isSpaceChar(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isSupplementaryCodePoint(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isSurrogate(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isSurrogatePair(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isTitleCase(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isUnicodeIdentifierPart(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isUnicodeIdentifierStart(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isUpperCase(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_isValidCodePoint(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_isWhitespace(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_lowSurrogate(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_offsetByCodePoints(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_reverseBytes(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Character_toChars(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_toCodePoint(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_toLowerCase(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_toString(t_Character *self, PyObject *args);
    static PyObject *t_Character_toString_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_toTitleCase(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_toUpperCase(PyTypeObject *type, PyObject *args);
    static PyObject *t_Character_valueOf(PyTypeObject *type, PyObject *arg);

    static PyMethodDef t_Character__methods_[] = {
      DECLARE_METHOD(t_Character, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, charCount, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, charValue, METH_NOARGS),
      DECLARE_METHOD(t_Character, codePointAt, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, codePointBefore, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, codePointCount, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, compare, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, compareTo, METH_O),
      DECLARE_METHOD(t_Character, digit, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, equals, METH_VARARGS),
      DECLARE_METHOD(t_Character, forDigit, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, getDirectionality, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, getName, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, getNumericValue, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, getType, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Character, highSurrogate, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isAlphabetic, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isBmpCodePoint, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isDefined, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isDigit, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isHighSurrogate, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isISOControl, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isIdentifierIgnorable, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isIdeographic, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isJavaIdentifierPart, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isJavaIdentifierStart, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isJavaLetter, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isJavaLetterOrDigit, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isLetter, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isLetterOrDigit, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isLowSurrogate, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isLowerCase, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isMirrored, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isSpace, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isSpaceChar, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isSupplementaryCodePoint, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isSurrogate, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isSurrogatePair, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isTitleCase, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isUnicodeIdentifierPart, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isUnicodeIdentifierStart, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isUpperCase, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, isValidCodePoint, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, isWhitespace, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, lowSurrogate, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, offsetByCodePoints, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, reverseBytes, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, toChars, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, toCodePoint, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, toLowerCase, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, toString, METH_VARARGS),
      DECLARE_METHOD(t_Character, toString_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Character, toTitleCase, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, toUpperCase, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Character, valueOf, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Character, t_Character, ::java::lang::Object, Character, t_Character_init_, 0, 0, 0, 0, 0);

    void t_Character::install(PyObject *module)
    {
      installType(&PY_TYPE(Character), module, "Character", 0);
    }

    void t_Character::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "class_", make_descriptor(Character::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "wrapfn_", make_descriptor(unboxCharacter));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "boxfn_", make_descriptor(boxCharacter));
      env->getClass(Character::initializeClass);
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "COMBINING_SPACING_MARK", make_descriptor(Character::COMBINING_SPACING_MARK));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "CONNECTOR_PUNCTUATION", make_descriptor(Character::CONNECTOR_PUNCTUATION));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "CONTROL", make_descriptor(Character::CONTROL));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "CURRENCY_SYMBOL", make_descriptor(Character::CURRENCY_SYMBOL));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DASH_PUNCTUATION", make_descriptor(Character::DASH_PUNCTUATION));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DECIMAL_DIGIT_NUMBER", make_descriptor(Character::DECIMAL_DIGIT_NUMBER));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_ARABIC_NUMBER", make_descriptor(Character::DIRECTIONALITY_ARABIC_NUMBER));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_BOUNDARY_NEUTRAL", make_descriptor(Character::DIRECTIONALITY_BOUNDARY_NEUTRAL));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_COMMON_NUMBER_SEPARATOR", make_descriptor(Character::DIRECTIONALITY_COMMON_NUMBER_SEPARATOR));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_EUROPEAN_NUMBER", make_descriptor(Character::DIRECTIONALITY_EUROPEAN_NUMBER));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR", make_descriptor(Character::DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR", make_descriptor(Character::DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_LEFT_TO_RIGHT", make_descriptor(Character::DIRECTIONALITY_LEFT_TO_RIGHT));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING", make_descriptor(Character::DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE", make_descriptor(Character::DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_NONSPACING_MARK", make_descriptor(Character::DIRECTIONALITY_NONSPACING_MARK));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_OTHER_NEUTRALS", make_descriptor(Character::DIRECTIONALITY_OTHER_NEUTRALS));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_PARAGRAPH_SEPARATOR", make_descriptor(Character::DIRECTIONALITY_PARAGRAPH_SEPARATOR));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_POP_DIRECTIONAL_FORMAT", make_descriptor(Character::DIRECTIONALITY_POP_DIRECTIONAL_FORMAT));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_RIGHT_TO_LEFT", make_descriptor(Character::DIRECTIONALITY_RIGHT_TO_LEFT));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC", make_descriptor(Character::DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING", make_descriptor(Character::DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE", make_descriptor(Character::DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_SEGMENT_SEPARATOR", make_descriptor(Character::DIRECTIONALITY_SEGMENT_SEPARATOR));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_UNDEFINED", make_descriptor(Character::DIRECTIONALITY_UNDEFINED));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_WHITESPACE", make_descriptor(Character::DIRECTIONALITY_WHITESPACE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "ENCLOSING_MARK", make_descriptor(Character::ENCLOSING_MARK));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "END_PUNCTUATION", make_descriptor(Character::END_PUNCTUATION));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "FINAL_QUOTE_PUNCTUATION", make_descriptor(Character::FINAL_QUOTE_PUNCTUATION));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "FORMAT", make_descriptor(Character::FORMAT));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "INITIAL_QUOTE_PUNCTUATION", make_descriptor(Character::INITIAL_QUOTE_PUNCTUATION));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "LETTER_NUMBER", make_descriptor(Character::LETTER_NUMBER));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "LINE_SEPARATOR", make_descriptor(Character::LINE_SEPARATOR));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "LOWERCASE_LETTER", make_descriptor(Character::LOWERCASE_LETTER));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MATH_SYMBOL", make_descriptor(Character::MATH_SYMBOL));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MAX_CODE_POINT", make_descriptor(Character::MAX_CODE_POINT));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MAX_HIGH_SURROGATE", make_descriptor(Character::MAX_HIGH_SURROGATE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MAX_LOW_SURROGATE", make_descriptor(Character::MAX_LOW_SURROGATE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MAX_RADIX", make_descriptor(Character::MAX_RADIX));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MAX_SURROGATE", make_descriptor(Character::MAX_SURROGATE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MAX_VALUE", make_descriptor(Character::MAX_VALUE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MIN_CODE_POINT", make_descriptor(Character::MIN_CODE_POINT));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MIN_HIGH_SURROGATE", make_descriptor(Character::MIN_HIGH_SURROGATE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MIN_LOW_SURROGATE", make_descriptor(Character::MIN_LOW_SURROGATE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MIN_RADIX", make_descriptor(Character::MIN_RADIX));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MIN_SUPPLEMENTARY_CODE_POINT", make_descriptor(Character::MIN_SUPPLEMENTARY_CODE_POINT));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MIN_SURROGATE", make_descriptor(Character::MIN_SURROGATE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MIN_VALUE", make_descriptor(Character::MIN_VALUE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MODIFIER_LETTER", make_descriptor(Character::MODIFIER_LETTER));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MODIFIER_SYMBOL", make_descriptor(Character::MODIFIER_SYMBOL));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "NON_SPACING_MARK", make_descriptor(Character::NON_SPACING_MARK));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "OTHER_LETTER", make_descriptor(Character::OTHER_LETTER));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "OTHER_NUMBER", make_descriptor(Character::OTHER_NUMBER));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "OTHER_PUNCTUATION", make_descriptor(Character::OTHER_PUNCTUATION));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "OTHER_SYMBOL", make_descriptor(Character::OTHER_SYMBOL));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "PARAGRAPH_SEPARATOR", make_descriptor(Character::PARAGRAPH_SEPARATOR));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "PRIVATE_USE", make_descriptor(Character::PRIVATE_USE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "SIZE", make_descriptor(Character::SIZE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "SPACE_SEPARATOR", make_descriptor(Character::SPACE_SEPARATOR));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "START_PUNCTUATION", make_descriptor(Character::START_PUNCTUATION));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "SURROGATE", make_descriptor(Character::SURROGATE));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "TITLECASE_LETTER", make_descriptor(Character::TITLECASE_LETTER));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "TYPE", make_descriptor(::java::lang::t_Class::wrap_Object(*Character::TYPE)));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "UNASSIGNED", make_descriptor(Character::UNASSIGNED));
      PyDict_SetItemString(PY_TYPE(Character).tp_dict, "UPPERCASE_LETTER", make_descriptor(Character::UPPERCASE_LETTER));
    }

    static PyObject *t_Character_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Character::initializeClass, 1)))
        return NULL;
      return t_Character::wrap_Object(Character(((t_Character *) arg)->object.this$));
    }
    static PyObject *t_Character_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Character::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Character_init_(t_Character *self, PyObject *args, PyObject *kwds)
    {
      jchar a0;
      Character object((jobject) NULL);

      if (!parseArgs(args, "C", &a0))
      {
        INT_CALL(object = Character(a0));
        self->object = object;
      }
      else
      {
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_Character_charCount(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::charCount(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "charCount", arg);
      return NULL;
    }

    static PyObject *t_Character_charValue(t_Character *self)
    {
      jchar result;
      OBJ_CALL(result = self->object.charValue());
      return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
    }

    static PyObject *t_Character_codePointAt(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint result;

          if (!parseArgs(args, "[CI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Character::codePointAt(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          jint a1;
          jint result;

          if (!parseArgs(args, "OI", &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Character::codePointAt(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 3:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::Character::codePointAt(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "codePointAt", args);
      return NULL;
    }

    static PyObject *t_Character_codePointBefore(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          jint a1;
          jint result;

          if (!parseArgs(args, "OI", &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Character::codePointBefore(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint result;

          if (!parseArgs(args, "[CI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Character::codePointBefore(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 3:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::Character::codePointBefore(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "codePointBefore", args);
      return NULL;
    }

    static PyObject *t_Character_codePointCount(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 3:
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::Character::codePointCount(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::Character::codePointCount(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "codePointCount", args);
      return NULL;
    }

    static PyObject *t_Character_compare(PyTypeObject *type, PyObject *args)
    {
      jchar a0;
      jchar a1;
      jint result;

      if (!parseArgs(args, "CC", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Character::compare(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "compare", args);
      return NULL;
    }

    static PyObject *t_Character_compareTo(t_Character *self, PyObject *arg)
    {
      Character a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Character), &a0))
      {
        OBJ_CALL(result = self->object.compareTo(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
      return NULL;
    }

    static PyObject *t_Character_digit(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          jchar a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "CI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Character::digit(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Character::digit(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "digit", args);
      return NULL;
    }

    static PyObject *t_Character_equals(t_Character *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(Character), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Character_forDigit(PyTypeObject *type, PyObject *args)
    {
      jint a0;
      jint a1;
      jchar result;

      if (!parseArgs(args, "II", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Character::forDigit(a0, a1));
        return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
      }

      PyErr_SetArgsError(type, "forDigit", args);
      return NULL;
    }

    static PyObject *t_Character_getDirectionality(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jbyte result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::getDirectionality(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          jchar a0;
          jbyte result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::getDirectionality(a0));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "getDirectionality", args);
      return NULL;
    }

    static PyObject *t_Character_getName(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::getName(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "getName", arg);
      return NULL;
    }

    static PyObject *t_Character_getNumericValue(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::getNumericValue(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          jchar a0;
          jint result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::getNumericValue(a0));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "getNumericValue", args);
      return NULL;
    }

    static PyObject *t_Character_getType(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jint result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::getType(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::getType(a0));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "getType", args);
      return NULL;
    }

    static PyObject *t_Character_hashCode(t_Character *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Character), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Character_highSurrogate(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jchar result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::highSurrogate(a0));
        return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
      }

      PyErr_SetArgsError(type, "highSurrogate", arg);
      return NULL;
    }

    static PyObject *t_Character_isAlphabetic(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jboolean result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isAlphabetic(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isAlphabetic", arg);
      return NULL;
    }

    static PyObject *t_Character_isBmpCodePoint(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jboolean result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isBmpCodePoint(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isBmpCodePoint", arg);
      return NULL;
    }

    static PyObject *t_Character_isDefined(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isDefined(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isDefined(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isDefined", args);
      return NULL;
    }

    static PyObject *t_Character_isDigit(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isDigit(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isDigit(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isDigit", args);
      return NULL;
    }

    static PyObject *t_Character_isHighSurrogate(PyTypeObject *type, PyObject *arg)
    {
      jchar a0;
      jboolean result;

      if (!parseArg(arg, "C", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isHighSurrogate(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isHighSurrogate", arg);
      return NULL;
    }

    static PyObject *t_Character_isISOControl(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isISOControl(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isISOControl(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isISOControl", args);
      return NULL;
    }

    static PyObject *t_Character_isIdentifierIgnorable(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isIdentifierIgnorable(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isIdentifierIgnorable(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isIdentifierIgnorable", args);
      return NULL;
    }

    static PyObject *t_Character_isIdeographic(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jboolean result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isIdeographic(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isIdeographic", arg);
      return NULL;
    }

    static PyObject *t_Character_isJavaIdentifierPart(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isJavaIdentifierPart(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isJavaIdentifierPart(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isJavaIdentifierPart", args);
      return NULL;
    }

    static PyObject *t_Character_isJavaIdentifierStart(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isJavaIdentifierStart(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isJavaIdentifierStart(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isJavaIdentifierStart", args);
      return NULL;
    }

    static PyObject *t_Character_isJavaLetter(PyTypeObject *type, PyObject *arg)
    {
      jchar a0;
      jboolean result;

      if (!parseArg(arg, "C", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isJavaLetter(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isJavaLetter", arg);
      return NULL;
    }

    static PyObject *t_Character_isJavaLetterOrDigit(PyTypeObject *type, PyObject *arg)
    {
      jchar a0;
      jboolean result;

      if (!parseArg(arg, "C", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isJavaLetterOrDigit(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isJavaLetterOrDigit", arg);
      return NULL;
    }

    static PyObject *t_Character_isLetter(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isLetter(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isLetter(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isLetter", args);
      return NULL;
    }

    static PyObject *t_Character_isLetterOrDigit(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isLetterOrDigit(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isLetterOrDigit(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isLetterOrDigit", args);
      return NULL;
    }

    static PyObject *t_Character_isLowSurrogate(PyTypeObject *type, PyObject *arg)
    {
      jchar a0;
      jboolean result;

      if (!parseArg(arg, "C", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isLowSurrogate(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isLowSurrogate", arg);
      return NULL;
    }

    static PyObject *t_Character_isLowerCase(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isLowerCase(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isLowerCase(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isLowerCase", args);
      return NULL;
    }

    static PyObject *t_Character_isMirrored(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isMirrored(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isMirrored(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isMirrored", args);
      return NULL;
    }

    static PyObject *t_Character_isSpace(PyTypeObject *type, PyObject *arg)
    {
      jchar a0;
      jboolean result;

      if (!parseArg(arg, "C", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isSpace(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isSpace", arg);
      return NULL;
    }

    static PyObject *t_Character_isSpaceChar(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isSpaceChar(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isSpaceChar(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isSpaceChar", args);
      return NULL;
    }

    static PyObject *t_Character_isSupplementaryCodePoint(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jboolean result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isSupplementaryCodePoint(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isSupplementaryCodePoint", arg);
      return NULL;
    }

    static PyObject *t_Character_isSurrogate(PyTypeObject *type, PyObject *arg)
    {
      jchar a0;
      jboolean result;

      if (!parseArg(arg, "C", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isSurrogate(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isSurrogate", arg);
      return NULL;
    }

    static PyObject *t_Character_isSurrogatePair(PyTypeObject *type, PyObject *args)
    {
      jchar a0;
      jchar a1;
      jboolean result;

      if (!parseArgs(args, "CC", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Character::isSurrogatePair(a0, a1));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isSurrogatePair", args);
      return NULL;
    }

    static PyObject *t_Character_isTitleCase(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isTitleCase(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isTitleCase(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isTitleCase", args);
      return NULL;
    }

    static PyObject *t_Character_isUnicodeIdentifierPart(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isUnicodeIdentifierPart(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isUnicodeIdentifierPart(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isUnicodeIdentifierPart", args);
      return NULL;
    }

    static PyObject *t_Character_isUnicodeIdentifierStart(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isUnicodeIdentifierStart(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isUnicodeIdentifierStart(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isUnicodeIdentifierStart", args);
      return NULL;
    }

    static PyObject *t_Character_isUpperCase(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isUpperCase(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isUpperCase(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isUpperCase", args);
      return NULL;
    }

    static PyObject *t_Character_isValidCodePoint(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jboolean result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::isValidCodePoint(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isValidCodePoint", arg);
      return NULL;
    }

    static PyObject *t_Character_isWhitespace(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jboolean result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isWhitespace(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          jint a0;
          jboolean result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::isWhitespace(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError(type, "isWhitespace", args);
      return NULL;
    }

    static PyObject *t_Character_lowSurrogate(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jchar result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::lowSurrogate(a0));
        return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
      }

      PyErr_SetArgsError(type, "lowSurrogate", arg);
      return NULL;
    }

    static PyObject *t_Character_offsetByCodePoints(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 3:
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::Character::offsetByCodePoints(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 5:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint a3;
          jint a4;
          jint result;

          if (!parseArgs(args, "[CIIII", &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = ::java::lang::Character::offsetByCodePoints(a0, a1, a2, a3, a4));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "offsetByCodePoints", args);
      return NULL;
    }

    static PyObject *t_Character_reverseBytes(PyTypeObject *type, PyObject *arg)
    {
      jchar a0;
      jchar result;

      if (!parseArg(arg, "C", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::reverseBytes(a0));
        return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
      }

      PyErr_SetArgsError(type, "reverseBytes", arg);
      return NULL;
    }

    static PyObject *t_Character_toChars(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          JArray< jchar > result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::toChars(a0));
            return result.wrap();
          }
        }
        break;
       case 3:
        {
          jint a0;
          JArray< jchar > a1((jobject) NULL);
          jint a2;
          jint result;

          if (!parseArgs(args, "I[CI", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::Character::toChars(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "toChars", args);
      return NULL;
    }

    static PyObject *t_Character_toCodePoint(PyTypeObject *type, PyObject *args)
    {
      jchar a0;
      jchar a1;
      jint result;

      if (!parseArgs(args, "CC", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Character::toCodePoint(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "toCodePoint", args);
      return NULL;
    }

    static PyObject *t_Character_toLowerCase(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::toLowerCase(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          jchar a0;
          jchar result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::toLowerCase(a0));
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }
        }
      }

      PyErr_SetArgsError(type, "toLowerCase", args);
      return NULL;
    }

    static PyObject *t_Character_toString(t_Character *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(Character), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Character_toString_(PyTypeObject *type, PyObject *args)
    {
      jchar a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, "C", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::toString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toString_", args);
      return NULL;
    }

    static PyObject *t_Character_toTitleCase(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          jchar result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::toTitleCase(a0));
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }
        }
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::toTitleCase(a0));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "toTitleCase", args);
      return NULL;
    }

    static PyObject *t_Character_toUpperCase(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::toUpperCase(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          jchar a0;
          jchar result;

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::Character::toUpperCase(a0));
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }
        }
      }

      PyErr_SetArgsError(type, "toUpperCase", args);
      return NULL;
    }

    static PyObject *t_Character_valueOf(PyTypeObject *type, PyObject *arg)
    {
      jchar a0;
      Character result((jobject) NULL);

      if (!parseArg(arg, "C", &a0))
      {
        OBJ_CALL(result = ::java::lang::Character::valueOf(a0));
        return t_Character::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "valueOf", arg);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/AbstractAppendingLongBuffer.h"
#include "org/apache/lucene/util/packed/AbstractAppendingLongBuffer$Iterator.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *AbstractAppendingLongBuffer::class$ = NULL;
          jmethodID *AbstractAppendingLongBuffer::mids$ = NULL;
          bool AbstractAppendingLongBuffer::live$ = false;

          jclass AbstractAppendingLongBuffer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/AbstractAppendingLongBuffer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_add_0ee6df2f] = env->getMethodID(cls, "add", "(J)V");
              mids$[mid_freeze_54c6a166] = env->getMethodID(cls, "freeze", "()V");
              mids$[mid_get_0ee6df33] = env->getMethodID(cls, "get", "(J)J");
              mids$[mid_get_f0f66bc1] = env->getMethodID(cls, "get", "(J[JII)I");
              mids$[mid_iterator_583a9cb3] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/util/packed/AbstractAppendingLongBuffer$Iterator;");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_size_54c6a17a] = env->getMethodID(cls, "size", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void AbstractAppendingLongBuffer::add(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_add_0ee6df2f], a0);
          }

          void AbstractAppendingLongBuffer::freeze() const
          {
            env->callVoidMethod(this$, mids$[mid_freeze_54c6a166]);
          }

          jlong AbstractAppendingLongBuffer::get(jlong a0) const
          {
            return env->callLongMethod(this$, mids$[mid_get_0ee6df33], a0);
          }

          jint AbstractAppendingLongBuffer::get(jlong a0, const JArray< jlong > & a1, jint a2, jint a3) const
          {
            return env->callIntMethod(this$, mids$[mid_get_f0f66bc1], a0, a1.this$, a2, a3);
          }

          ::org::apache::lucene::util::packed::AbstractAppendingLongBuffer$Iterator AbstractAppendingLongBuffer::iterator() const
          {
            return ::org::apache::lucene::util::packed::AbstractAppendingLongBuffer$Iterator(env->callObjectMethod(this$, mids$[mid_iterator_583a9cb3]));
          }

          jlong AbstractAppendingLongBuffer::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }

          jlong AbstractAppendingLongBuffer::size() const
          {
            return env->callLongMethod(this$, mids$[mid_size_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_AbstractAppendingLongBuffer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractAppendingLongBuffer_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractAppendingLongBuffer_add(t_AbstractAppendingLongBuffer *self, PyObject *arg);
          static PyObject *t_AbstractAppendingLongBuffer_freeze(t_AbstractAppendingLongBuffer *self);
          static PyObject *t_AbstractAppendingLongBuffer_get(t_AbstractAppendingLongBuffer *self, PyObject *args);
          static PyObject *t_AbstractAppendingLongBuffer_iterator(t_AbstractAppendingLongBuffer *self);
          static PyObject *t_AbstractAppendingLongBuffer_ramBytesUsed(t_AbstractAppendingLongBuffer *self);
          static PyObject *t_AbstractAppendingLongBuffer_size(t_AbstractAppendingLongBuffer *self);

          static PyMethodDef t_AbstractAppendingLongBuffer__methods_[] = {
            DECLARE_METHOD(t_AbstractAppendingLongBuffer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractAppendingLongBuffer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractAppendingLongBuffer, add, METH_O),
            DECLARE_METHOD(t_AbstractAppendingLongBuffer, freeze, METH_NOARGS),
            DECLARE_METHOD(t_AbstractAppendingLongBuffer, get, METH_VARARGS),
            DECLARE_METHOD(t_AbstractAppendingLongBuffer, iterator, METH_NOARGS),
            DECLARE_METHOD(t_AbstractAppendingLongBuffer, ramBytesUsed, METH_NOARGS),
            DECLARE_METHOD(t_AbstractAppendingLongBuffer, size, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractAppendingLongBuffer, t_AbstractAppendingLongBuffer, ::org::apache::lucene::util::LongValues, AbstractAppendingLongBuffer, abstract_init, 0, 0, 0, 0, 0);

          void t_AbstractAppendingLongBuffer::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractAppendingLongBuffer), module, "AbstractAppendingLongBuffer", 0);
          }

          void t_AbstractAppendingLongBuffer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractAppendingLongBuffer).tp_dict, "class_", make_descriptor(AbstractAppendingLongBuffer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractAppendingLongBuffer).tp_dict, "wrapfn_", make_descriptor(t_AbstractAppendingLongBuffer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractAppendingLongBuffer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractAppendingLongBuffer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractAppendingLongBuffer::initializeClass, 1)))
              return NULL;
            return t_AbstractAppendingLongBuffer::wrap_Object(AbstractAppendingLongBuffer(((t_AbstractAppendingLongBuffer *) arg)->object.this$));
          }
          static PyObject *t_AbstractAppendingLongBuffer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractAppendingLongBuffer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AbstractAppendingLongBuffer_add(t_AbstractAppendingLongBuffer *self, PyObject *arg)
          {
            jlong a0;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(self->object.add(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "add", arg);
            return NULL;
          }

          static PyObject *t_AbstractAppendingLongBuffer_freeze(t_AbstractAppendingLongBuffer *self)
          {
            OBJ_CALL(self->object.freeze());
            Py_RETURN_NONE;
          }

          static PyObject *t_AbstractAppendingLongBuffer_get(t_AbstractAppendingLongBuffer *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jlong a0;
                jlong result;

                if (!parseArgs(args, "J", &a0))
                {
                  OBJ_CALL(result = self->object.get(a0));
                  return PyLong_FromLongLong((PY_LONG_LONG) result);
                }
              }
              break;
             case 4:
              {
                jlong a0;
                JArray< jlong > a1((jobject) NULL);
                jint a2;
                jint a3;
                jint result;

                if (!parseArgs(args, "J[JII", &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.get(a0, a1, a2, a3));
                  return PyInt_FromLong((long) result);
                }
              }
            }

            return callSuper(&PY_TYPE(AbstractAppendingLongBuffer), (PyObject *) self, "get", args, 2);
          }

          static PyObject *t_AbstractAppendingLongBuffer_iterator(t_AbstractAppendingLongBuffer *self)
          {
            ::org::apache::lucene::util::packed::AbstractAppendingLongBuffer$Iterator result((jobject) NULL);
            OBJ_CALL(result = self->object.iterator());
            return ::org::apache::lucene::util::packed::t_AbstractAppendingLongBuffer$Iterator::wrap_Object(result);
          }

          static PyObject *t_AbstractAppendingLongBuffer_ramBytesUsed(t_AbstractAppendingLongBuffer *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_AbstractAppendingLongBuffer_size(t_AbstractAppendingLongBuffer *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.size());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/charfilter/NormalizeCharMap.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {

          ::java::lang::Class *NormalizeCharMap::class$ = NULL;
          jmethodID *NormalizeCharMap::mids$ = NULL;
          bool NormalizeCharMap::live$ = false;

          jclass NormalizeCharMap::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/charfilter/NormalizeCharMap");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/analysis/charfilter/NormalizeCharMap$Builder.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {
          static PyObject *t_NormalizeCharMap_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NormalizeCharMap_instance_(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_NormalizeCharMap__methods_[] = {
            DECLARE_METHOD(t_NormalizeCharMap, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NormalizeCharMap, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NormalizeCharMap, t_NormalizeCharMap, ::java::lang::Object, NormalizeCharMap, abstract_init, 0, 0, 0, 0, 0);

          void t_NormalizeCharMap::install(PyObject *module)
          {
            installType(&PY_TYPE(NormalizeCharMap), module, "NormalizeCharMap", 0);
            PyDict_SetItemString(PY_TYPE(NormalizeCharMap).tp_dict, "Builder", make_descriptor(&PY_TYPE(NormalizeCharMap$Builder)));
          }

          void t_NormalizeCharMap::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NormalizeCharMap).tp_dict, "class_", make_descriptor(NormalizeCharMap::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NormalizeCharMap).tp_dict, "wrapfn_", make_descriptor(t_NormalizeCharMap::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NormalizeCharMap).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NormalizeCharMap_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NormalizeCharMap::initializeClass, 1)))
              return NULL;
            return t_NormalizeCharMap::wrap_Object(NormalizeCharMap(((t_NormalizeCharMap *) arg)->object.this$));
          }
          static PyObject *t_NormalizeCharMap_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NormalizeCharMap::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/ProductFloatFunction.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *ProductFloatFunction::class$ = NULL;
            jmethodID *ProductFloatFunction::mids$ = NULL;
            bool ProductFloatFunction::live$ = false;

            jclass ProductFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/ProductFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ee9922ca] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
                mids$[mid_func_d2e34bb9] = env->getMethodID(cls, "func", "(I[Lorg/apache/lucene/queries/function/FunctionValues;)F");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ProductFloatFunction::ProductFloatFunction(const JArray< ::org::apache::lucene::queries::function::ValueSource > & a0) : ::org::apache::lucene::queries::function::valuesource::MultiFloatFunction(env->newObject(initializeClass, &mids$, mid_init$_ee9922ca, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_ProductFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ProductFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ProductFloatFunction_init_(t_ProductFloatFunction *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_ProductFloatFunction__methods_[] = {
              DECLARE_METHOD(t_ProductFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ProductFloatFunction, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(ProductFloatFunction, t_ProductFloatFunction, ::org::apache::lucene::queries::function::valuesource::MultiFloatFunction, ProductFloatFunction, t_ProductFloatFunction_init_, 0, 0, 0, 0, 0);

            void t_ProductFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(ProductFloatFunction), module, "ProductFloatFunction", 0);
            }

            void t_ProductFloatFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(ProductFloatFunction).tp_dict, "class_", make_descriptor(ProductFloatFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(ProductFloatFunction).tp_dict, "wrapfn_", make_descriptor(t_ProductFloatFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(ProductFloatFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ProductFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ProductFloatFunction::initializeClass, 1)))
                return NULL;
              return t_ProductFloatFunction::wrap_Object(ProductFloatFunction(((t_ProductFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_ProductFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ProductFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ProductFloatFunction_init_(t_ProductFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              JArray< ::org::apache::lucene::queries::function::ValueSource > a0((jobject) NULL);
              ProductFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = ProductFloatFunction(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/gl/GalicianStemFilterFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {

          ::java::lang::Class *GalicianStemFilterFactory::class$ = NULL;
          jmethodID *GalicianStemFilterFactory::mids$ = NULL;
          bool GalicianStemFilterFactory::live$ = false;

          jclass GalicianStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/gl/GalicianStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GalicianStemFilterFactory::GalicianStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream GalicianStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {
          static PyObject *t_GalicianStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GalicianStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GalicianStemFilterFactory_init_(t_GalicianStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GalicianStemFilterFactory_create(t_GalicianStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_GalicianStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_GalicianStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GalicianStemFilterFactory, t_GalicianStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, GalicianStemFilterFactory, t_GalicianStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_GalicianStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(GalicianStemFilterFactory), module, "GalicianStemFilterFactory", 0);
          }

          void t_GalicianStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GalicianStemFilterFactory).tp_dict, "class_", make_descriptor(GalicianStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GalicianStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_GalicianStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GalicianStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GalicianStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GalicianStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_GalicianStemFilterFactory::wrap_Object(GalicianStemFilterFactory(((t_GalicianStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_GalicianStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GalicianStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GalicianStemFilterFactory_init_(t_GalicianStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            GalicianStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = GalicianStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GalicianStemFilterFactory_create(t_GalicianStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(GalicianStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/AutomatonQuery.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *AutomatonQuery::class$ = NULL;
        jmethodID *AutomatonQuery::mids$ = NULL;
        bool AutomatonQuery::live$ = false;

        jclass AutomatonQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/AutomatonQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_1b49cba7] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;Lorg/apache/lucene/util/automaton/Automaton;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getAutomaton_9b0d5999] = env->getMethodID(cls, "getAutomaton", "()Lorg/apache/lucene/util/automaton/Automaton;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_getTermsEnum_67b5a29a] = env->getMethodID(cls, "getTermsEnum", "(Lorg/apache/lucene/index/Terms;Lorg/apache/lucene/util/AttributeSource;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        AutomatonQuery::AutomatonQuery(const ::org::apache::lucene::index::Term & a0, const ::org::apache::lucene::util::automaton::Automaton & a1) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_1b49cba7, a0.this$, a1.this$)) {}

        jboolean AutomatonQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::util::automaton::Automaton AutomatonQuery::getAutomaton() const
        {
          return ::org::apache::lucene::util::automaton::Automaton(env->callObjectMethod(this$, mids$[mid_getAutomaton_9b0d5999]));
        }

        jint AutomatonQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String AutomatonQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_AutomatonQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AutomatonQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_AutomatonQuery_init_(t_AutomatonQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_AutomatonQuery_equals(t_AutomatonQuery *self, PyObject *args);
        static PyObject *t_AutomatonQuery_getAutomaton(t_AutomatonQuery *self);
        static PyObject *t_AutomatonQuery_hashCode(t_AutomatonQuery *self, PyObject *args);
        static PyObject *t_AutomatonQuery_toString(t_AutomatonQuery *self, PyObject *args);
        static PyObject *t_AutomatonQuery_get__automaton(t_AutomatonQuery *self, void *data);
        static PyGetSetDef t_AutomatonQuery__fields_[] = {
          DECLARE_GET_FIELD(t_AutomatonQuery, automaton),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_AutomatonQuery__methods_[] = {
          DECLARE_METHOD(t_AutomatonQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AutomatonQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AutomatonQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_AutomatonQuery, getAutomaton, METH_NOARGS),
          DECLARE_METHOD(t_AutomatonQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_AutomatonQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(AutomatonQuery, t_AutomatonQuery, ::org::apache::lucene::search::MultiTermQuery, AutomatonQuery, t_AutomatonQuery_init_, 0, 0, t_AutomatonQuery__fields_, 0, 0);

        void t_AutomatonQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(AutomatonQuery), module, "AutomatonQuery", 0);
        }

        void t_AutomatonQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(AutomatonQuery).tp_dict, "class_", make_descriptor(AutomatonQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(AutomatonQuery).tp_dict, "wrapfn_", make_descriptor(t_AutomatonQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(AutomatonQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_AutomatonQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AutomatonQuery::initializeClass, 1)))
            return NULL;
          return t_AutomatonQuery::wrap_Object(AutomatonQuery(((t_AutomatonQuery *) arg)->object.this$));
        }
        static PyObject *t_AutomatonQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AutomatonQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_AutomatonQuery_init_(t_AutomatonQuery *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          ::org::apache::lucene::util::automaton::Automaton a1((jobject) NULL);
          AutomatonQuery object((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
          {
            INT_CALL(object = AutomatonQuery(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_AutomatonQuery_equals(t_AutomatonQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(AutomatonQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_AutomatonQuery_getAutomaton(t_AutomatonQuery *self)
        {
          ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);
          OBJ_CALL(result = self->object.getAutomaton());
          return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
        }

        static PyObject *t_AutomatonQuery_hashCode(t_AutomatonQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(AutomatonQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_AutomatonQuery_toString(t_AutomatonQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(AutomatonQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_AutomatonQuery_get__automaton(t_AutomatonQuery *self, void *data)
        {
          ::org::apache::lucene::util::automaton::Automaton value((jobject) NULL);
          OBJ_CALL(value = self->object.getAutomaton());
          return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/LongBitSet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *LongBitSet::class$ = NULL;
        jmethodID *LongBitSet::mids$ = NULL;
        bool LongBitSet::live$ = false;

        jclass LongBitSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/LongBitSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_0ee6df2f] = env->getMethodID(cls, "<init>", "(J)V");
            mids$[mid_init$_4c830bd0] = env->getMethodID(cls, "<init>", "([JJ)V");
            mids$[mid_and_6e24e395] = env->getMethodID(cls, "and", "(Lorg/apache/lucene/util/LongBitSet;)V");
            mids$[mid_andNot_6e24e395] = env->getMethodID(cls, "andNot", "(Lorg/apache/lucene/util/LongBitSet;)V");
            mids$[mid_bits2words_0ee6df30] = env->getStaticMethodID(cls, "bits2words", "(J)I");
            mids$[mid_cardinality_54c6a17a] = env->getMethodID(cls, "cardinality", "()J");
            mids$[mid_clear_0ee6df2f] = env->getMethodID(cls, "clear", "(J)V");
            mids$[mid_clear_a7e12ca4] = env->getMethodID(cls, "clear", "(JJ)V");
            mids$[mid_clone_47551698] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/LongBitSet;");
            mids$[mid_ensureCapacity_b4f3a668] = env->getStaticMethodID(cls, "ensureCapacity", "(Lorg/apache/lucene/util/LongBitSet;J)Lorg/apache/lucene/util/LongBitSet;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_flip_a7e12ca4] = env->getMethodID(cls, "flip", "(JJ)V");
            mids$[mid_get_0ee6df23] = env->getMethodID(cls, "get", "(J)Z");
            mids$[mid_getAndClear_0ee6df23] = env->getMethodID(cls, "getAndClear", "(J)Z");
            mids$[mid_getAndSet_0ee6df23] = env->getMethodID(cls, "getAndSet", "(J)Z");
            mids$[mid_getBits_dab10e76] = env->getMethodID(cls, "getBits", "()[J");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_intersects_6e24e399] = env->getMethodID(cls, "intersects", "(Lorg/apache/lucene/util/LongBitSet;)Z");
            mids$[mid_length_54c6a17a] = env->getMethodID(cls, "length", "()J");
            mids$[mid_nextSetBit_0ee6df33] = env->getMethodID(cls, "nextSetBit", "(J)J");
            mids$[mid_or_6e24e395] = env->getMethodID(cls, "or", "(Lorg/apache/lucene/util/LongBitSet;)V");
            mids$[mid_prevSetBit_0ee6df33] = env->getMethodID(cls, "prevSetBit", "(J)J");
            mids$[mid_set_0ee6df2f] = env->getMethodID(cls, "set", "(J)V");
            mids$[mid_set_a7e12ca4] = env->getMethodID(cls, "set", "(JJ)V");
            mids$[mid_xor_6e24e395] = env->getMethodID(cls, "xor", "(Lorg/apache/lucene/util/LongBitSet;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LongBitSet::LongBitSet(jlong a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_0ee6df2f, a0)) {}

        LongBitSet::LongBitSet(const JArray< jlong > & a0, jlong a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4c830bd0, a0.this$, a1)) {}

        void LongBitSet::and$(const LongBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_and_6e24e395], a0.this$);
        }

        void LongBitSet::andNot(const LongBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_andNot_6e24e395], a0.this$);
        }

        jint LongBitSet::bits2words(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_bits2words_0ee6df30], a0);
        }

        jlong LongBitSet::cardinality() const
        {
          return env->callLongMethod(this$, mids$[mid_cardinality_54c6a17a]);
        }

        void LongBitSet::clear(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clear_0ee6df2f], a0);
        }

        void LongBitSet::clear(jlong a0, jlong a1) const
        {
          env->callVoidMethod(this$, mids$[mid_clear_a7e12ca4], a0, a1);
        }

        LongBitSet LongBitSet::clone() const
        {
          return LongBitSet(env->callObjectMethod(this$, mids$[mid_clone_47551698]));
        }

        LongBitSet LongBitSet::ensureCapacity(const LongBitSet & a0, jlong a1)
        {
          jclass cls = env->getClass(initializeClass);
          return LongBitSet(env->callStaticObjectMethod(cls, mids$[mid_ensureCapacity_b4f3a668], a0.this$, a1));
        }

        jboolean LongBitSet::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void LongBitSet::flip(jlong a0, jlong a1) const
        {
          env->callVoidMethod(this$, mids$[mid_flip_a7e12ca4], a0, a1);
        }

        jboolean LongBitSet::get(jlong a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_get_0ee6df23], a0);
        }

        jboolean LongBitSet::getAndClear(jlong a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_getAndClear_0ee6df23], a0);
        }

        jboolean LongBitSet::getAndSet(jlong a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_getAndSet_0ee6df23], a0);
        }

        JArray< jlong > LongBitSet::getBits() const
        {
          return JArray< jlong >(env->callObjectMethod(this$, mids$[mid_getBits_dab10e76]));
        }

        jint LongBitSet::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean LongBitSet::intersects(const LongBitSet & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_intersects_6e24e399], a0.this$);
        }

        jlong LongBitSet::length() const
        {
          return env->callLongMethod(this$, mids$[mid_length_54c6a17a]);
        }

        jlong LongBitSet::nextSetBit(jlong a0) const
        {
          return env->callLongMethod(this$, mids$[mid_nextSetBit_0ee6df33], a0);
        }

        void LongBitSet::or$(const LongBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_or_6e24e395], a0.this$);
        }

        jlong LongBitSet::prevSetBit(jlong a0) const
        {
          return env->callLongMethod(this$, mids$[mid_prevSetBit_0ee6df33], a0);
        }

        void LongBitSet::set(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_set_0ee6df2f], a0);
        }

        void LongBitSet::set(jlong a0, jlong a1) const
        {
          env->callVoidMethod(this$, mids$[mid_set_a7e12ca4], a0, a1);
        }

        void LongBitSet::xor$(const LongBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_xor_6e24e395], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_LongBitSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LongBitSet_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LongBitSet_init_(t_LongBitSet *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LongBitSet_and(t_LongBitSet *self, PyObject *arg);
        static PyObject *t_LongBitSet_andNot(t_LongBitSet *self, PyObject *arg);
        static PyObject *t_LongBitSet_bits2words(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LongBitSet_cardinality(t_LongBitSet *self);
        static PyObject *t_LongBitSet_clear(t_LongBitSet *self, PyObject *args);
        static PyObject *t_LongBitSet_clone(t_LongBitSet *self);
        static PyObject *t_LongBitSet_ensureCapacity(PyTypeObject *type, PyObject *args);
        static PyObject *t_LongBitSet_equals(t_LongBitSet *self, PyObject *args);
        static PyObject *t_LongBitSet_flip(t_LongBitSet *self, PyObject *args);
        static PyObject *t_LongBitSet_get(t_LongBitSet *self, PyObject *arg);
        static PyObject *t_LongBitSet_getAndClear(t_LongBitSet *self, PyObject *arg);
        static PyObject *t_LongBitSet_getAndSet(t_LongBitSet *self, PyObject *arg);
        static PyObject *t_LongBitSet_getBits(t_LongBitSet *self);
        static PyObject *t_LongBitSet_hashCode(t_LongBitSet *self, PyObject *args);
        static PyObject *t_LongBitSet_intersects(t_LongBitSet *self, PyObject *arg);
        static PyObject *t_LongBitSet_length(t_LongBitSet *self);
        static PyObject *t_LongBitSet_nextSetBit(t_LongBitSet *self, PyObject *arg);
        static PyObject *t_LongBitSet_or(t_LongBitSet *self, PyObject *arg);
        static PyObject *t_LongBitSet_prevSetBit(t_LongBitSet *self, PyObject *arg);
        static PyObject *t_LongBitSet_set(t_LongBitSet *self, PyObject *args);
        static PyObject *t_LongBitSet_xor(t_LongBitSet *self, PyObject *arg);
        static PyObject *t_LongBitSet_get__bits(t_LongBitSet *self, void *data);
        static PyGetSetDef t_LongBitSet__fields_[] = {
          DECLARE_GET_FIELD(t_LongBitSet, bits),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_LongBitSet__methods_[] = {
          DECLARE_METHOD(t_LongBitSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongBitSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongBitSet, and, METH_O),
          DECLARE_METHOD(t_LongBitSet, andNot, METH_O),
          DECLARE_METHOD(t_LongBitSet, bits2words, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongBitSet, cardinality, METH_NOARGS),
          DECLARE_METHOD(t_LongBitSet, clear, METH_VARARGS),
          DECLARE_METHOD(t_LongBitSet, clone, METH_NOARGS),
          DECLARE_METHOD(t_LongBitSet, ensureCapacity, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_LongBitSet, equals, METH_VARARGS),
          DECLARE_METHOD(t_LongBitSet, flip, METH_VARARGS),
          DECLARE_METHOD(t_LongBitSet, get, METH_O),
          DECLARE_METHOD(t_LongBitSet, getAndClear, METH_O),
          DECLARE_METHOD(t_LongBitSet, getAndSet, METH_O),
          DECLARE_METHOD(t_LongBitSet, getBits, METH_NOARGS),
          DECLARE_METHOD(t_LongBitSet, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_LongBitSet, intersects, METH_O),
          DECLARE_METHOD(t_LongBitSet, length, METH_NOARGS),
          DECLARE_METHOD(t_LongBitSet, nextSetBit, METH_O),
          DECLARE_METHOD(t_LongBitSet, or, METH_O),
          DECLARE_METHOD(t_LongBitSet, prevSetBit, METH_O),
          DECLARE_METHOD(t_LongBitSet, set, METH_VARARGS),
          DECLARE_METHOD(t_LongBitSet, xor, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LongBitSet, t_LongBitSet, ::java::lang::Object, LongBitSet, t_LongBitSet_init_, 0, 0, t_LongBitSet__fields_, 0, 0);

        void t_LongBitSet::install(PyObject *module)
        {
          installType(&PY_TYPE(LongBitSet), module, "LongBitSet", 0);
        }

        void t_LongBitSet::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LongBitSet).tp_dict, "class_", make_descriptor(LongBitSet::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LongBitSet).tp_dict, "wrapfn_", make_descriptor(t_LongBitSet::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LongBitSet).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LongBitSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LongBitSet::initializeClass, 1)))
            return NULL;
          return t_LongBitSet::wrap_Object(LongBitSet(((t_LongBitSet *) arg)->object.this$));
        }
        static PyObject *t_LongBitSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LongBitSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LongBitSet_init_(t_LongBitSet *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;
              LongBitSet object((jobject) NULL);

              if (!parseArgs(args, "J", &a0))
              {
                INT_CALL(object = LongBitSet(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              JArray< jlong > a0((jobject) NULL);
              jlong a1;
              LongBitSet object((jobject) NULL);

              if (!parseArgs(args, "[JJ", &a0, &a1))
              {
                INT_CALL(object = LongBitSet(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_LongBitSet_and(t_LongBitSet *self, PyObject *arg)
        {
          LongBitSet a0((jobject) NULL);

          if (!parseArg(arg, "k", LongBitSet::initializeClass, &a0))
          {
            OBJ_CALL(self->object.and$(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "and", arg);
          return NULL;
        }

        static PyObject *t_LongBitSet_andNot(t_LongBitSet *self, PyObject *arg)
        {
          LongBitSet a0((jobject) NULL);

          if (!parseArg(arg, "k", LongBitSet::initializeClass, &a0))
          {
            OBJ_CALL(self->object.andNot(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "andNot", arg);
          return NULL;
        }

        static PyObject *t_LongBitSet_bits2words(PyTypeObject *type, PyObject *arg)
        {
          jlong a0;
          jint result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::LongBitSet::bits2words(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "bits2words", arg);
          return NULL;
        }

        static PyObject *t_LongBitSet_cardinality(t_LongBitSet *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.cardinality());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_LongBitSet_clear(t_LongBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.clear(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              jlong a0;
              jlong a1;

              if (!parseArgs(args, "JJ", &a0, &a1))
              {
                OBJ_CALL(self->object.clear(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "clear", args);
          return NULL;
        }

        static PyObject *t_LongBitSet_clone(t_LongBitSet *self)
        {
          LongBitSet result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_LongBitSet::wrap_Object(result);
        }

        static PyObject *t_LongBitSet_ensureCapacity(PyTypeObject *type, PyObject *args)
        {
          LongBitSet a0((jobject) NULL);
          jlong a1;
          LongBitSet result((jobject) NULL);

          if (!parseArgs(args, "kJ", LongBitSet::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::LongBitSet::ensureCapacity(a0, a1));
            return t_LongBitSet::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "ensureCapacity", args);
          return NULL;
        }

        static PyObject *t_LongBitSet_equals(t_LongBitSet *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(LongBitSet), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_LongBitSet_flip(t_LongBitSet *self, PyObject *args)
        {
          jlong a0;
          jlong a1;

          if (!parseArgs(args, "JJ", &a0, &a1))
          {
            OBJ_CALL(self->object.flip(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "flip", args);
          return NULL;
        }

        static PyObject *t_LongBitSet_get(t_LongBitSet *self, PyObject *arg)
        {
          jlong a0;
          jboolean result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_LongBitSet_getAndClear(t_LongBitSet *self, PyObject *arg)
        {
          jlong a0;
          jboolean result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.getAndClear(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getAndClear", arg);
          return NULL;
        }

        static PyObject *t_LongBitSet_getAndSet(t_LongBitSet *self, PyObject *arg)
        {
          jlong a0;
          jboolean result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.getAndSet(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getAndSet", arg);
          return NULL;
        }

        static PyObject *t_LongBitSet_getBits(t_LongBitSet *self)
        {
          JArray< jlong > result((jobject) NULL);
          OBJ_CALL(result = self->object.getBits());
          return result.wrap();
        }

        static PyObject *t_LongBitSet_hashCode(t_LongBitSet *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(LongBitSet), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_LongBitSet_intersects(t_LongBitSet *self, PyObject *arg)
        {
          LongBitSet a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", LongBitSet::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.intersects(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "intersects", arg);
          return NULL;
        }

        static PyObject *t_LongBitSet_length(t_LongBitSet *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.length());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_LongBitSet_nextSetBit(t_LongBitSet *self, PyObject *arg)
        {
          jlong a0;
          jlong result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.nextSetBit(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "nextSetBit", arg);
          return NULL;
        }

        static PyObject *t_LongBitSet_or(t_LongBitSet *self, PyObject *arg)
        {
          LongBitSet a0((jobject) NULL);

          if (!parseArg(arg, "k", LongBitSet::initializeClass, &a0))
          {
            OBJ_CALL(self->object.or$(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "or", arg);
          return NULL;
        }

        static PyObject *t_LongBitSet_prevSetBit(t_LongBitSet *self, PyObject *arg)
        {
          jlong a0;
          jlong result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.prevSetBit(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "prevSetBit", arg);
          return NULL;
        }

        static PyObject *t_LongBitSet_set(t_LongBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.set(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              jlong a0;
              jlong a1;

              if (!parseArgs(args, "JJ", &a0, &a1))
              {
                OBJ_CALL(self->object.set(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "set", args);
          return NULL;
        }

        static PyObject *t_LongBitSet_xor(t_LongBitSet *self, PyObject *arg)
        {
          LongBitSet a0((jobject) NULL);

          if (!parseArg(arg, "k", LongBitSet::initializeClass, &a0))
          {
            OBJ_CALL(self->object.xor$(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "xor", arg);
          return NULL;
        }

        static PyObject *t_LongBitSet_get__bits(t_LongBitSet *self, void *data)
        {
          JArray< jlong > value((jobject) NULL);
          OBJ_CALL(value = self->object.getBits());
          return value.wrap();
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$conditional_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$conditional_return::class$ = NULL;
          jmethodID *JavascriptParser$conditional_return::mids$ = NULL;
          bool JavascriptParser$conditional_return::live$ = false;

          jclass JavascriptParser$conditional_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$conditional_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$conditional_return::JavascriptParser$conditional_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$conditional_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$conditional_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$conditional_return_init_(t_JavascriptParser$conditional_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$conditional_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$conditional_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$conditional_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$conditional_return, t_JavascriptParser$conditional_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$conditional_return, t_JavascriptParser$conditional_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$conditional_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$conditional_return), module, "JavascriptParser$conditional_return", 0);
          }

          void t_JavascriptParser$conditional_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$conditional_return).tp_dict, "class_", make_descriptor(JavascriptParser$conditional_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$conditional_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$conditional_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$conditional_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$conditional_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$conditional_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$conditional_return::wrap_Object(JavascriptParser$conditional_return(((t_JavascriptParser$conditional_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$conditional_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$conditional_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$conditional_return_init_(t_JavascriptParser$conditional_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$conditional_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$conditional_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/postingshighlight/Passage.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace postingshighlight {

          ::java::lang::Class *Passage::class$ = NULL;
          jmethodID *Passage::mids$ = NULL;
          bool Passage::live$ = false;

          jclass Passage::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/postingshighlight/Passage");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getEndOffset_54c6a179] = env->getMethodID(cls, "getEndOffset", "()I");
              mids$[mid_getMatchEnds_dab10e75] = env->getMethodID(cls, "getMatchEnds", "()[I");
              mids$[mid_getMatchStarts_dab10e75] = env->getMethodID(cls, "getMatchStarts", "()[I");
              mids$[mid_getMatchTerms_19d1f84d] = env->getMethodID(cls, "getMatchTerms", "()[Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_getNumMatches_54c6a179] = env->getMethodID(cls, "getNumMatches", "()I");
              mids$[mid_getScore_54c6a176] = env->getMethodID(cls, "getScore", "()F");
              mids$[mid_getStartOffset_54c6a179] = env->getMethodID(cls, "getStartOffset", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Passage::Passage() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint Passage::getEndOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getEndOffset_54c6a179]);
          }

          JArray< jint > Passage::getMatchEnds() const
          {
            return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getMatchEnds_dab10e75]));
          }

          JArray< jint > Passage::getMatchStarts() const
          {
            return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getMatchStarts_dab10e75]));
          }

          JArray< ::org::apache::lucene::util::BytesRef > Passage::getMatchTerms() const
          {
            return JArray< ::org::apache::lucene::util::BytesRef >(env->callObjectMethod(this$, mids$[mid_getMatchTerms_19d1f84d]));
          }

          jint Passage::getNumMatches() const
          {
            return env->callIntMethod(this$, mids$[mid_getNumMatches_54c6a179]);
          }

          jfloat Passage::getScore() const
          {
            return env->callFloatMethod(this$, mids$[mid_getScore_54c6a176]);
          }

          jint Passage::getStartOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getStartOffset_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace postingshighlight {
          static PyObject *t_Passage_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Passage_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Passage_init_(t_Passage *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Passage_getEndOffset(t_Passage *self);
          static PyObject *t_Passage_getMatchEnds(t_Passage *self);
          static PyObject *t_Passage_getMatchStarts(t_Passage *self);
          static PyObject *t_Passage_getMatchTerms(t_Passage *self);
          static PyObject *t_Passage_getNumMatches(t_Passage *self);
          static PyObject *t_Passage_getScore(t_Passage *self);
          static PyObject *t_Passage_getStartOffset(t_Passage *self);
          static PyObject *t_Passage_get__endOffset(t_Passage *self, void *data);
          static PyObject *t_Passage_get__matchEnds(t_Passage *self, void *data);
          static PyObject *t_Passage_get__matchStarts(t_Passage *self, void *data);
          static PyObject *t_Passage_get__matchTerms(t_Passage *self, void *data);
          static PyObject *t_Passage_get__numMatches(t_Passage *self, void *data);
          static PyObject *t_Passage_get__score(t_Passage *self, void *data);
          static PyObject *t_Passage_get__startOffset(t_Passage *self, void *data);
          static PyGetSetDef t_Passage__fields_[] = {
            DECLARE_GET_FIELD(t_Passage, endOffset),
            DECLARE_GET_FIELD(t_Passage, matchEnds),
            DECLARE_GET_FIELD(t_Passage, matchStarts),
            DECLARE_GET_FIELD(t_Passage, matchTerms),
            DECLARE_GET_FIELD(t_Passage, numMatches),
            DECLARE_GET_FIELD(t_Passage, score),
            DECLARE_GET_FIELD(t_Passage, startOffset),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Passage__methods_[] = {
            DECLARE_METHOD(t_Passage, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Passage, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Passage, getEndOffset, METH_NOARGS),
            DECLARE_METHOD(t_Passage, getMatchEnds, METH_NOARGS),
            DECLARE_METHOD(t_Passage, getMatchStarts, METH_NOARGS),
            DECLARE_METHOD(t_Passage, getMatchTerms, METH_NOARGS),
            DECLARE_METHOD(t_Passage, getNumMatches, METH_NOARGS),
            DECLARE_METHOD(t_Passage, getScore, METH_NOARGS),
            DECLARE_METHOD(t_Passage, getStartOffset, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Passage, t_Passage, ::java::lang::Object, Passage, t_Passage_init_, 0, 0, t_Passage__fields_, 0, 0);

          void t_Passage::install(PyObject *module)
          {
            installType(&PY_TYPE(Passage), module, "Passage", 0);
          }

          void t_Passage::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Passage).tp_dict, "class_", make_descriptor(Passage::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Passage).tp_dict, "wrapfn_", make_descriptor(t_Passage::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Passage).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Passage_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Passage::initializeClass, 1)))
              return NULL;
            return t_Passage::wrap_Object(Passage(((t_Passage *) arg)->object.this$));
          }
          static PyObject *t_Passage_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Passage::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Passage_init_(t_Passage *self, PyObject *args, PyObject *kwds)
          {
            Passage object((jobject) NULL);

            INT_CALL(object = Passage());
            self->object = object;

            return 0;
          }

          static PyObject *t_Passage_getEndOffset(t_Passage *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEndOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_Passage_getMatchEnds(t_Passage *self)
          {
            JArray< jint > result((jobject) NULL);
            OBJ_CALL(result = self->object.getMatchEnds());
            return result.wrap();
          }

          static PyObject *t_Passage_getMatchStarts(t_Passage *self)
          {
            JArray< jint > result((jobject) NULL);
            OBJ_CALL(result = self->object.getMatchStarts());
            return result.wrap();
          }

          static PyObject *t_Passage_getMatchTerms(t_Passage *self)
          {
            JArray< ::org::apache::lucene::util::BytesRef > result((jobject) NULL);
            OBJ_CALL(result = self->object.getMatchTerms());
            return JArray<jobject>(result.this$).wrap(::org::apache::lucene::util::t_BytesRef::wrap_jobject);
          }

          static PyObject *t_Passage_getNumMatches(t_Passage *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getNumMatches());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_Passage_getScore(t_Passage *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getScore());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_Passage_getStartOffset(t_Passage *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getStartOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_Passage_get__endOffset(t_Passage *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEndOffset());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_Passage_get__matchEnds(t_Passage *self, void *data)
          {
            JArray< jint > value((jobject) NULL);
            OBJ_CALL(value = self->object.getMatchEnds());
            return value.wrap();
          }

          static PyObject *t_Passage_get__matchStarts(t_Passage *self, void *data)
          {
            JArray< jint > value((jobject) NULL);
            OBJ_CALL(value = self->object.getMatchStarts());
            return value.wrap();
          }

          static PyObject *t_Passage_get__matchTerms(t_Passage *self, void *data)
          {
            JArray< ::org::apache::lucene::util::BytesRef > value((jobject) NULL);
            OBJ_CALL(value = self->object.getMatchTerms());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::util::t_BytesRef::wrap_jobject);
          }

          static PyObject *t_Passage_get__numMatches(t_Passage *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getNumMatches());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_Passage_get__score(t_Passage *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getScore());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_Passage_get__startOffset(t_Passage *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getStartOffset());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/AbstractAllGroupHeadsCollector$GroupHead.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *AbstractAllGroupHeadsCollector$GroupHead::class$ = NULL;
          jmethodID *AbstractAllGroupHeadsCollector$GroupHead::mids$ = NULL;
          jfieldID *AbstractAllGroupHeadsCollector$GroupHead::fids$ = NULL;
          bool AbstractAllGroupHeadsCollector$GroupHead::live$ = false;

          jclass AbstractAllGroupHeadsCollector$GroupHead::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/AbstractAllGroupHeadsCollector$GroupHead");

              mids$ = new jmethodID[max_mid];
              mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
              mids$[mid_updateDocHead_39c7bd3c] = env->getMethodID(cls, "updateDocHead", "(I)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_doc] = env->getFieldID(cls, "doc", "I");
              fids$[fid_groupValue] = env->getFieldID(cls, "groupValue", "Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint AbstractAllGroupHeadsCollector$GroupHead::_get_doc() const
          {
            return env->getIntField(this$, fids$[fid_doc]);
          }

          void AbstractAllGroupHeadsCollector$GroupHead::_set_doc(jint a0) const
          {
            env->setIntField(this$, fids$[fid_doc], a0);
          }

          ::java::lang::Object AbstractAllGroupHeadsCollector$GroupHead::_get_groupValue() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_groupValue]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_AbstractAllGroupHeadsCollector$GroupHead_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractAllGroupHeadsCollector$GroupHead_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractAllGroupHeadsCollector$GroupHead_of_(t_AbstractAllGroupHeadsCollector$GroupHead *self, PyObject *args);
          static PyObject *t_AbstractAllGroupHeadsCollector$GroupHead_get__doc(t_AbstractAllGroupHeadsCollector$GroupHead *self, void *data);
          static int t_AbstractAllGroupHeadsCollector$GroupHead_set__doc(t_AbstractAllGroupHeadsCollector$GroupHead *self, PyObject *arg, void *data);
          static PyObject *t_AbstractAllGroupHeadsCollector$GroupHead_get__groupValue(t_AbstractAllGroupHeadsCollector$GroupHead *self, void *data);

          static PyObject *t_AbstractAllGroupHeadsCollector$GroupHead_get__parameters_(t_AbstractAllGroupHeadsCollector$GroupHead *self, void *data);
          static PyGetSetDef t_AbstractAllGroupHeadsCollector$GroupHead__fields_[] = {
            DECLARE_GETSET_FIELD(t_AbstractAllGroupHeadsCollector$GroupHead, doc),
            DECLARE_GET_FIELD(t_AbstractAllGroupHeadsCollector$GroupHead, groupValue),
            DECLARE_GET_FIELD(t_AbstractAllGroupHeadsCollector$GroupHead, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AbstractAllGroupHeadsCollector$GroupHead__methods_[] = {
            DECLARE_METHOD(t_AbstractAllGroupHeadsCollector$GroupHead, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractAllGroupHeadsCollector$GroupHead, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractAllGroupHeadsCollector$GroupHead, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractAllGroupHeadsCollector$GroupHead, t_AbstractAllGroupHeadsCollector$GroupHead, ::java::lang::Object, AbstractAllGroupHeadsCollector$GroupHead, abstract_init, 0, 0, t_AbstractAllGroupHeadsCollector$GroupHead__fields_, 0, 0);
          PyObject *t_AbstractAllGroupHeadsCollector$GroupHead::wrap_Object(const AbstractAllGroupHeadsCollector$GroupHead& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractAllGroupHeadsCollector$GroupHead::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractAllGroupHeadsCollector$GroupHead *self = (t_AbstractAllGroupHeadsCollector$GroupHead *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_AbstractAllGroupHeadsCollector$GroupHead::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractAllGroupHeadsCollector$GroupHead::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractAllGroupHeadsCollector$GroupHead *self = (t_AbstractAllGroupHeadsCollector$GroupHead *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_AbstractAllGroupHeadsCollector$GroupHead::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractAllGroupHeadsCollector$GroupHead), module, "AbstractAllGroupHeadsCollector$GroupHead", 0);
          }

          void t_AbstractAllGroupHeadsCollector$GroupHead::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractAllGroupHeadsCollector$GroupHead).tp_dict, "class_", make_descriptor(AbstractAllGroupHeadsCollector$GroupHead::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractAllGroupHeadsCollector$GroupHead).tp_dict, "wrapfn_", make_descriptor(t_AbstractAllGroupHeadsCollector$GroupHead::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractAllGroupHeadsCollector$GroupHead).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractAllGroupHeadsCollector$GroupHead_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractAllGroupHeadsCollector$GroupHead::initializeClass, 1)))
              return NULL;
            return t_AbstractAllGroupHeadsCollector$GroupHead::wrap_Object(AbstractAllGroupHeadsCollector$GroupHead(((t_AbstractAllGroupHeadsCollector$GroupHead *) arg)->object.this$));
          }
          static PyObject *t_AbstractAllGroupHeadsCollector$GroupHead_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractAllGroupHeadsCollector$GroupHead::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AbstractAllGroupHeadsCollector$GroupHead_of_(t_AbstractAllGroupHeadsCollector$GroupHead *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }
          static PyObject *t_AbstractAllGroupHeadsCollector$GroupHead_get__parameters_(t_AbstractAllGroupHeadsCollector$GroupHead *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_AbstractAllGroupHeadsCollector$GroupHead_get__doc(t_AbstractAllGroupHeadsCollector$GroupHead *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_doc());
            return PyInt_FromLong((long) value);
          }
          static int t_AbstractAllGroupHeadsCollector$GroupHead_set__doc(t_AbstractAllGroupHeadsCollector$GroupHead *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_doc(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "doc", arg);
            return -1;
          }

          static PyObject *t_AbstractAllGroupHeadsCollector$GroupHead_get__groupValue(t_AbstractAllGroupHeadsCollector$GroupHead *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_groupValue());
            return ::java::lang::t_Object::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/MappingMultiDocsAndPositionsEnum.h"
#include "org/apache/lucene/index/MergeState.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/MultiDocsAndPositionsEnum$EnumWithSlice.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *MappingMultiDocsAndPositionsEnum::class$ = NULL;
        jmethodID *MappingMultiDocsAndPositionsEnum::mids$ = NULL;
        bool MappingMultiDocsAndPositionsEnum::live$ = false;

        jclass MappingMultiDocsAndPositionsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/MappingMultiDocsAndPositionsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_advance_39c7bd23] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_54c6a179] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_endOffset_54c6a179] = env->getMethodID(cls, "endOffset", "()I");
            mids$[mid_freq_54c6a179] = env->getMethodID(cls, "freq", "()I");
            mids$[mid_getNumSubs_54c6a179] = env->getMethodID(cls, "getNumSubs", "()I");
            mids$[mid_getPayload_4ae19461] = env->getMethodID(cls, "getPayload", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getSubs_451af4aa] = env->getMethodID(cls, "getSubs", "()[Lorg/apache/lucene/index/MultiDocsAndPositionsEnum$EnumWithSlice;");
            mids$[mid_nextDoc_54c6a179] = env->getMethodID(cls, "nextDoc", "()I");
            mids$[mid_nextPosition_54c6a179] = env->getMethodID(cls, "nextPosition", "()I");
            mids$[mid_setMergeState_fd0cfdf4] = env->getMethodID(cls, "setMergeState", "(Lorg/apache/lucene/index/MergeState;)V");
            mids$[mid_startOffset_54c6a179] = env->getMethodID(cls, "startOffset", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MappingMultiDocsAndPositionsEnum::MappingMultiDocsAndPositionsEnum() : ::org::apache::lucene::index::DocsAndPositionsEnum(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jint MappingMultiDocsAndPositionsEnum::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_39c7bd23], a0);
        }

        jlong MappingMultiDocsAndPositionsEnum::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
        }

        jint MappingMultiDocsAndPositionsEnum::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_54c6a179]);
        }

        jint MappingMultiDocsAndPositionsEnum::endOffset() const
        {
          return env->callIntMethod(this$, mids$[mid_endOffset_54c6a179]);
        }

        jint MappingMultiDocsAndPositionsEnum::freq() const
        {
          return env->callIntMethod(this$, mids$[mid_freq_54c6a179]);
        }

        jint MappingMultiDocsAndPositionsEnum::getNumSubs() const
        {
          return env->callIntMethod(this$, mids$[mid_getNumSubs_54c6a179]);
        }

        ::org::apache::lucene::util::BytesRef MappingMultiDocsAndPositionsEnum::getPayload() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getPayload_4ae19461]));
        }

        JArray< ::org::apache::lucene::index::MultiDocsAndPositionsEnum$EnumWithSlice > MappingMultiDocsAndPositionsEnum::getSubs() const
        {
          return JArray< ::org::apache::lucene::index::MultiDocsAndPositionsEnum$EnumWithSlice >(env->callObjectMethod(this$, mids$[mid_getSubs_451af4aa]));
        }

        jint MappingMultiDocsAndPositionsEnum::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_54c6a179]);
        }

        jint MappingMultiDocsAndPositionsEnum::nextPosition() const
        {
          return env->callIntMethod(this$, mids$[mid_nextPosition_54c6a179]);
        }

        void MappingMultiDocsAndPositionsEnum::setMergeState(const ::org::apache::lucene::index::MergeState & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMergeState_fd0cfdf4], a0.this$);
        }

        jint MappingMultiDocsAndPositionsEnum::startOffset() const
        {
          return env->callIntMethod(this$, mids$[mid_startOffset_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_MappingMultiDocsAndPositionsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MappingMultiDocsAndPositionsEnum_init_(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_advance(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_cost(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_docID(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_endOffset(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_freq(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_getNumSubs(t_MappingMultiDocsAndPositionsEnum *self);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_getPayload(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_getSubs(t_MappingMultiDocsAndPositionsEnum *self);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_nextDoc(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_nextPosition(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_setMergeState(t_MappingMultiDocsAndPositionsEnum *self, PyObject *arg);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_startOffset(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args);
        static int t_MappingMultiDocsAndPositionsEnum_set__mergeState(t_MappingMultiDocsAndPositionsEnum *self, PyObject *arg, void *data);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_get__numSubs(t_MappingMultiDocsAndPositionsEnum *self, void *data);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_get__payload(t_MappingMultiDocsAndPositionsEnum *self, void *data);
        static PyObject *t_MappingMultiDocsAndPositionsEnum_get__subs(t_MappingMultiDocsAndPositionsEnum *self, void *data);
        static PyGetSetDef t_MappingMultiDocsAndPositionsEnum__fields_[] = {
          DECLARE_SET_FIELD(t_MappingMultiDocsAndPositionsEnum, mergeState),
          DECLARE_GET_FIELD(t_MappingMultiDocsAndPositionsEnum, numSubs),
          DECLARE_GET_FIELD(t_MappingMultiDocsAndPositionsEnum, payload),
          DECLARE_GET_FIELD(t_MappingMultiDocsAndPositionsEnum, subs),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MappingMultiDocsAndPositionsEnum__methods_[] = {
          DECLARE_METHOD(t_MappingMultiDocsAndPositionsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MappingMultiDocsAndPositionsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MappingMultiDocsAndPositionsEnum, advance, METH_VARARGS),
          DECLARE_METHOD(t_MappingMultiDocsAndPositionsEnum, cost, METH_VARARGS),
          DECLARE_METHOD(t_MappingMultiDocsAndPositionsEnum, docID, METH_VARARGS),
          DECLARE_METHOD(t_MappingMultiDocsAndPositionsEnum, endOffset, METH_VARARGS),
          DECLARE_METHOD(t_MappingMultiDocsAndPositionsEnum, freq, METH_VARARGS),
          DECLARE_METHOD(t_MappingMultiDocsAndPositionsEnum, getNumSubs, METH_NOARGS),
          DECLARE_METHOD(t_MappingMultiDocsAndPositionsEnum, getPayload, METH_VARARGS),
          DECLARE_METHOD(t_MappingMultiDocsAndPositionsEnum, getSubs, METH_NOARGS),
          DECLARE_METHOD(t_MappingMultiDocsAndPositionsEnum, nextDoc, METH_VARARGS),
          DECLARE_METHOD(t_MappingMultiDocsAndPositionsEnum, nextPosition, METH_VARARGS),
          DECLARE_METHOD(t_MappingMultiDocsAndPositionsEnum, setMergeState, METH_O),
          DECLARE_METHOD(t_MappingMultiDocsAndPositionsEnum, startOffset, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MappingMultiDocsAndPositionsEnum, t_MappingMultiDocsAndPositionsEnum, ::org::apache::lucene::index::DocsAndPositionsEnum, MappingMultiDocsAndPositionsEnum, t_MappingMultiDocsAndPositionsEnum_init_, 0, 0, t_MappingMultiDocsAndPositionsEnum__fields_, 0, 0);

        void t_MappingMultiDocsAndPositionsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(MappingMultiDocsAndPositionsEnum), module, "MappingMultiDocsAndPositionsEnum", 0);
        }

        void t_MappingMultiDocsAndPositionsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MappingMultiDocsAndPositionsEnum).tp_dict, "class_", make_descriptor(MappingMultiDocsAndPositionsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MappingMultiDocsAndPositionsEnum).tp_dict, "wrapfn_", make_descriptor(t_MappingMultiDocsAndPositionsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MappingMultiDocsAndPositionsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MappingMultiDocsAndPositionsEnum::initializeClass, 1)))
            return NULL;
          return t_MappingMultiDocsAndPositionsEnum::wrap_Object(MappingMultiDocsAndPositionsEnum(((t_MappingMultiDocsAndPositionsEnum *) arg)->object.this$));
        }
        static PyObject *t_MappingMultiDocsAndPositionsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MappingMultiDocsAndPositionsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MappingMultiDocsAndPositionsEnum_init_(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args, PyObject *kwds)
        {
          MappingMultiDocsAndPositionsEnum object((jobject) NULL);

          INT_CALL(object = MappingMultiDocsAndPositionsEnum());
          self->object = object;

          return 0;
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_advance(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MappingMultiDocsAndPositionsEnum), (PyObject *) self, "advance", args, 2);
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_cost(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(MappingMultiDocsAndPositionsEnum), (PyObject *) self, "cost", args, 2);
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_docID(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MappingMultiDocsAndPositionsEnum), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_endOffset(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.endOffset());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MappingMultiDocsAndPositionsEnum), (PyObject *) self, "endOffset", args, 2);
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_freq(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.freq());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MappingMultiDocsAndPositionsEnum), (PyObject *) self, "freq", args, 2);
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_getNumSubs(t_MappingMultiDocsAndPositionsEnum *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getNumSubs());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_getPayload(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getPayload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MappingMultiDocsAndPositionsEnum), (PyObject *) self, "getPayload", args, 2);
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_getSubs(t_MappingMultiDocsAndPositionsEnum *self)
        {
          JArray< ::org::apache::lucene::index::MultiDocsAndPositionsEnum$EnumWithSlice > result((jobject) NULL);
          OBJ_CALL(result = self->object.getSubs());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::index::t_MultiDocsAndPositionsEnum$EnumWithSlice::wrap_jobject);
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_nextDoc(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MappingMultiDocsAndPositionsEnum), (PyObject *) self, "nextDoc", args, 2);
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_nextPosition(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextPosition());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MappingMultiDocsAndPositionsEnum), (PyObject *) self, "nextPosition", args, 2);
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_setMergeState(t_MappingMultiDocsAndPositionsEnum *self, PyObject *arg)
        {
          ::org::apache::lucene::index::MergeState a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::MergeState::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setMergeState(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMergeState", arg);
          return NULL;
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_startOffset(t_MappingMultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.startOffset());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MappingMultiDocsAndPositionsEnum), (PyObject *) self, "startOffset", args, 2);
        }

        static int t_MappingMultiDocsAndPositionsEnum_set__mergeState(t_MappingMultiDocsAndPositionsEnum *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::MergeState value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::MergeState::initializeClass, &value))
            {
              INT_CALL(self->object.setMergeState(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "mergeState", arg);
          return -1;
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_get__numSubs(t_MappingMultiDocsAndPositionsEnum *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getNumSubs());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_get__payload(t_MappingMultiDocsAndPositionsEnum *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getPayload());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }

        static PyObject *t_MappingMultiDocsAndPositionsEnum_get__subs(t_MappingMultiDocsAndPositionsEnum *self, void *data)
        {
          JArray< ::org::apache::lucene::index::MultiDocsAndPositionsEnum$EnumWithSlice > value((jobject) NULL);
          OBJ_CALL(value = self->object.getSubs());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_MultiDocsAndPositionsEnum$EnumWithSlice::wrap_jobject);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/Lookup.h"
#include "org/apache/lucene/search/spell/Dictionary.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/util/Set.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupResult.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/InputStream.h"
#include "java/util/List.h"
#include "java/io/OutputStream.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "org/apache/lucene/store/DataInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *Lookup::class$ = NULL;
          jmethodID *Lookup::mids$ = NULL;
          bool Lookup::live$ = false;
          ::java::util::Comparator *Lookup::CHARSEQUENCE_COMPARATOR = NULL;

          jclass Lookup::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/Lookup");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_build_1754a234] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/search/suggest/InputIterator;)V");
              mids$[mid_build_a0504881] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/search/spell/Dictionary;)V");
              mids$[mid_getCount_54c6a17a] = env->getMethodID(cls, "getCount", "()J");
              mids$[mid_load_f5d6a55d] = env->getMethodID(cls, "load", "(Lorg/apache/lucene/store/DataInput;)Z");
              mids$[mid_load_be2e4f9c] = env->getMethodID(cls, "load", "(Ljava/io/InputStream;)Z");
              mids$[mid_lookup_8aa7b45d] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;ZI)Ljava/util/List;");
              mids$[mid_lookup_dd3e9f51] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;ZI)Ljava/util/List;");
              mids$[mid_store_27875f5b] = env->getMethodID(cls, "store", "(Lorg/apache/lucene/store/DataOutput;)Z");
              mids$[mid_store_82d865f4] = env->getMethodID(cls, "store", "(Ljava/io/OutputStream;)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              CHARSEQUENCE_COMPARATOR = new ::java::util::Comparator(env->getStaticObjectField(cls, "CHARSEQUENCE_COMPARATOR", "Ljava/util/Comparator;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lookup::Lookup() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void Lookup::build(const ::org::apache::lucene::search::suggest::InputIterator & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_build_1754a234], a0.this$);
          }

          void Lookup::build(const ::org::apache::lucene::search::spell::Dictionary & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_build_a0504881], a0.this$);
          }

          jlong Lookup::getCount() const
          {
            return env->callLongMethod(this$, mids$[mid_getCount_54c6a17a]);
          }

          jboolean Lookup::load(const ::org::apache::lucene::store::DataInput & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_load_f5d6a55d], a0.this$);
          }

          jboolean Lookup::load(const ::java::io::InputStream & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_load_be2e4f9c], a0.this$);
          }

          ::java::util::List Lookup::lookup(const ::java::lang::CharSequence & a0, jboolean a1, jint a2) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_8aa7b45d], a0.this$, a1, a2));
          }

          ::java::util::List Lookup::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jboolean a2, jint a3) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_dd3e9f51], a0.this$, a1.this$, a2, a3));
          }

          jboolean Lookup::store(const ::org::apache::lucene::store::DataOutput & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_store_27875f5b], a0.this$);
          }

          jboolean Lookup::store(const ::java::io::OutputStream & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_store_82d865f4], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupPriorityQueue.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_Lookup_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lookup_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lookup_init_(t_Lookup *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lookup_build(t_Lookup *self, PyObject *args);
          static PyObject *t_Lookup_getCount(t_Lookup *self);
          static PyObject *t_Lookup_load(t_Lookup *self, PyObject *args);
          static PyObject *t_Lookup_lookup(t_Lookup *self, PyObject *args);
          static PyObject *t_Lookup_store(t_Lookup *self, PyObject *args);
          static PyObject *t_Lookup_get__count(t_Lookup *self, void *data);
          static PyGetSetDef t_Lookup__fields_[] = {
            DECLARE_GET_FIELD(t_Lookup, count),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lookup__methods_[] = {
            DECLARE_METHOD(t_Lookup, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lookup, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lookup, build, METH_VARARGS),
            DECLARE_METHOD(t_Lookup, getCount, METH_NOARGS),
            DECLARE_METHOD(t_Lookup, load, METH_VARARGS),
            DECLARE_METHOD(t_Lookup, lookup, METH_VARARGS),
            DECLARE_METHOD(t_Lookup, store, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lookup, t_Lookup, ::java::lang::Object, Lookup, t_Lookup_init_, 0, 0, t_Lookup__fields_, 0, 0);

          void t_Lookup::install(PyObject *module)
          {
            installType(&PY_TYPE(Lookup), module, "Lookup", 0);
            PyDict_SetItemString(PY_TYPE(Lookup).tp_dict, "LookupPriorityQueue", make_descriptor(&PY_TYPE(Lookup$LookupPriorityQueue)));
            PyDict_SetItemString(PY_TYPE(Lookup).tp_dict, "LookupResult", make_descriptor(&PY_TYPE(Lookup$LookupResult)));
          }

          void t_Lookup::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lookup).tp_dict, "class_", make_descriptor(Lookup::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lookup).tp_dict, "wrapfn_", make_descriptor(t_Lookup::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lookup).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Lookup::initializeClass);
            PyDict_SetItemString(PY_TYPE(Lookup).tp_dict, "CHARSEQUENCE_COMPARATOR", make_descriptor(::java::util::t_Comparator::wrap_Object(*Lookup::CHARSEQUENCE_COMPARATOR)));
          }

          static PyObject *t_Lookup_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lookup::initializeClass, 1)))
              return NULL;
            return t_Lookup::wrap_Object(Lookup(((t_Lookup *) arg)->object.this$));
          }
          static PyObject *t_Lookup_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lookup::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lookup_init_(t_Lookup *self, PyObject *args, PyObject *kwds)
          {
            Lookup object((jobject) NULL);

            INT_CALL(object = Lookup());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lookup_build(t_Lookup *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.build(a0));
                  Py_RETURN_NONE;
                }
              }
              {
                ::org::apache::lucene::search::spell::Dictionary a0((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::spell::Dictionary::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.build(a0));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "build", args);
            return NULL;
          }

          static PyObject *t_Lookup_getCount(t_Lookup *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getCount());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_Lookup_load(t_Lookup *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::store::DataInput a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.load(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              {
                ::java::io::InputStream a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.load(a0));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "load", args);
            return NULL;
          }

          static PyObject *t_Lookup_lookup(t_Lookup *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jboolean a1;
                jint a2;
                ::java::util::List result((jobject) NULL);

                if (!parseArgs(args, "OZI", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.lookup(a0, a1, a2));
                  return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                }
              }
              break;
             case 4:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::util::Set a1((jobject) NULL);
                PyTypeObject **p1;
                jboolean a2;
                jint a3;
                ::java::util::List result((jobject) NULL);

                if (!parseArgs(args, "OKZI", &::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3));
                  return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "lookup", args);
            return NULL;
          }

          static PyObject *t_Lookup_store(t_Lookup *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.store(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              {
                ::java::io::OutputStream a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "k", ::java::io::OutputStream::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.store(a0));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "store", args);
            return NULL;
          }

          static PyObject *t_Lookup_get__count(t_Lookup *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getCount());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SegmentReader.h"
#include "org/apache/lucene/index/AtomicReader$CoreClosedListener.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/Accountable.h"
#include "org/apache/lucene/codecs/TermVectorsReader.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "org/apache/lucene/index/Fields.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/StoredFieldVisitor.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/codecs/StoredFieldsReader.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SegmentReader::class$ = NULL;
        jmethodID *SegmentReader::mids$ = NULL;
        bool SegmentReader::live$ = false;

        jclass SegmentReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SegmentReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_20f5bc6a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/SegmentCommitInfo;ILorg/apache/lucene/store/IOContext;)V");
            mids$[mid_addCoreClosedListener_cbc2818f] = env->getMethodID(cls, "addCoreClosedListener", "(Lorg/apache/lucene/index/AtomicReader$CoreClosedListener;)V");
            mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
            mids$[mid_directory_1f3934bb] = env->getMethodID(cls, "directory", "()Lorg/apache/lucene/store/Directory;");
            mids$[mid_document_a2ea3ebe] = env->getMethodID(cls, "document", "(ILorg/apache/lucene/index/StoredFieldVisitor;)V");
            mids$[mid_fields_77db581d] = env->getMethodID(cls, "fields", "()Lorg/apache/lucene/index/Fields;");
            mids$[mid_getBinaryDocValues_ecab96be] = env->getMethodID(cls, "getBinaryDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/BinaryDocValues;");
            mids$[mid_getCombinedCoreAndDeletesKey_846352c3] = env->getMethodID(cls, "getCombinedCoreAndDeletesKey", "()Ljava/lang/Object;");
            mids$[mid_getCoreCacheKey_846352c3] = env->getMethodID(cls, "getCoreCacheKey", "()Ljava/lang/Object;");
            mids$[mid_getDocsWithField_e1c6a7db] = env->getMethodID(cls, "getDocsWithField", "(Ljava/lang/String;)Lorg/apache/lucene/util/Bits;");
            mids$[mid_getFieldInfos_9ba20825] = env->getMethodID(cls, "getFieldInfos", "()Lorg/apache/lucene/index/FieldInfos;");
            mids$[mid_getFieldsReader_ef585f0d] = env->getMethodID(cls, "getFieldsReader", "()Lorg/apache/lucene/codecs/StoredFieldsReader;");
            mids$[mid_getLiveDocs_03c2457d] = env->getMethodID(cls, "getLiveDocs", "()Lorg/apache/lucene/util/Bits;");
            mids$[mid_getNormValues_d2b19f49] = env->getMethodID(cls, "getNormValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getNumericDocValues_d2b19f49] = env->getMethodID(cls, "getNumericDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getSegmentInfo_5df298a9] = env->getMethodID(cls, "getSegmentInfo", "()Lorg/apache/lucene/index/SegmentCommitInfo;");
            mids$[mid_getSegmentName_14c7b5c5] = env->getMethodID(cls, "getSegmentName", "()Ljava/lang/String;");
            mids$[mid_getSortedDocValues_7b8b1a0a] = env->getMethodID(cls, "getSortedDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedDocValues;");
            mids$[mid_getSortedNumericDocValues_37cd1812] = env->getMethodID(cls, "getSortedNumericDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedNumericDocValues;");
            mids$[mid_getSortedSetDocValues_43e0e807] = env->getMethodID(cls, "getSortedSetDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedSetDocValues;");
            mids$[mid_getTermInfosIndexDivisor_54c6a179] = env->getMethodID(cls, "getTermInfosIndexDivisor", "()I");
            mids$[mid_getTermVectors_ef1c9c73] = env->getMethodID(cls, "getTermVectors", "(I)Lorg/apache/lucene/index/Fields;");
            mids$[mid_getTermVectorsReader_475a2624] = env->getMethodID(cls, "getTermVectorsReader", "()Lorg/apache/lucene/codecs/TermVectorsReader;");
            mids$[mid_maxDoc_54c6a179] = env->getMethodID(cls, "maxDoc", "()I");
            mids$[mid_numDocs_54c6a179] = env->getMethodID(cls, "numDocs", "()I");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_removeCoreClosedListener_cbc2818f] = env->getMethodID(cls, "removeCoreClosedListener", "(Lorg/apache/lucene/index/AtomicReader$CoreClosedListener;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_doClose_54c6a166] = env->getMethodID(cls, "doClose", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SegmentReader::SegmentReader(const ::org::apache::lucene::index::SegmentCommitInfo & a0, jint a1, const ::org::apache::lucene::store::IOContext & a2) : ::org::apache::lucene::index::AtomicReader(env->newObject(initializeClass, &mids$, mid_init$_20f5bc6a, a0.this$, a1, a2.this$)) {}

        void SegmentReader::addCoreClosedListener(const ::org::apache::lucene::index::AtomicReader$CoreClosedListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addCoreClosedListener_cbc2818f], a0.this$);
        }

        void SegmentReader::checkIntegrity() const
        {
          env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
        }

        ::org::apache::lucene::store::Directory SegmentReader::directory() const
        {
          return ::org::apache::lucene::store::Directory(env->callObjectMethod(this$, mids$[mid_directory_1f3934bb]));
        }

        void SegmentReader::document(jint a0, const ::org::apache::lucene::index::StoredFieldVisitor & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_document_a2ea3ebe], a0, a1.this$);
        }

        ::org::apache::lucene::index::Fields SegmentReader::fields() const
        {
          return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_fields_77db581d]));
        }

        ::org::apache::lucene::index::BinaryDocValues SegmentReader::getBinaryDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::BinaryDocValues(env->callObjectMethod(this$, mids$[mid_getBinaryDocValues_ecab96be], a0.this$));
        }

        ::java::lang::Object SegmentReader::getCombinedCoreAndDeletesKey() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getCombinedCoreAndDeletesKey_846352c3]));
        }

        ::java::lang::Object SegmentReader::getCoreCacheKey() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getCoreCacheKey_846352c3]));
        }

        ::org::apache::lucene::util::Bits SegmentReader::getDocsWithField(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getDocsWithField_e1c6a7db], a0.this$));
        }

        ::org::apache::lucene::index::FieldInfos SegmentReader::getFieldInfos() const
        {
          return ::org::apache::lucene::index::FieldInfos(env->callObjectMethod(this$, mids$[mid_getFieldInfos_9ba20825]));
        }

        ::org::apache::lucene::codecs::StoredFieldsReader SegmentReader::getFieldsReader() const
        {
          return ::org::apache::lucene::codecs::StoredFieldsReader(env->callObjectMethod(this$, mids$[mid_getFieldsReader_ef585f0d]));
        }

        ::org::apache::lucene::util::Bits SegmentReader::getLiveDocs() const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getLiveDocs_03c2457d]));
        }

        ::org::apache::lucene::index::NumericDocValues SegmentReader::getNormValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNormValues_d2b19f49], a0.this$));
        }

        ::org::apache::lucene::index::NumericDocValues SegmentReader::getNumericDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNumericDocValues_d2b19f49], a0.this$));
        }

        ::org::apache::lucene::index::SegmentCommitInfo SegmentReader::getSegmentInfo() const
        {
          return ::org::apache::lucene::index::SegmentCommitInfo(env->callObjectMethod(this$, mids$[mid_getSegmentInfo_5df298a9]));
        }

        ::java::lang::String SegmentReader::getSegmentName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getSegmentName_14c7b5c5]));
        }

        ::org::apache::lucene::index::SortedDocValues SegmentReader::getSortedDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedDocValues(env->callObjectMethod(this$, mids$[mid_getSortedDocValues_7b8b1a0a], a0.this$));
        }

        ::org::apache::lucene::index::SortedNumericDocValues SegmentReader::getSortedNumericDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedNumericDocValues(env->callObjectMethod(this$, mids$[mid_getSortedNumericDocValues_37cd1812], a0.this$));
        }

        ::org::apache::lucene::index::SortedSetDocValues SegmentReader::getSortedSetDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedSetDocValues(env->callObjectMethod(this$, mids$[mid_getSortedSetDocValues_43e0e807], a0.this$));
        }

        jint SegmentReader::getTermInfosIndexDivisor() const
        {
          return env->callIntMethod(this$, mids$[mid_getTermInfosIndexDivisor_54c6a179]);
        }

        ::org::apache::lucene::index::Fields SegmentReader::getTermVectors(jint a0) const
        {
          return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_getTermVectors_ef1c9c73], a0));
        }

        ::org::apache::lucene::codecs::TermVectorsReader SegmentReader::getTermVectorsReader() const
        {
          return ::org::apache::lucene::codecs::TermVectorsReader(env->callObjectMethod(this$, mids$[mid_getTermVectorsReader_475a2624]));
        }

        jint SegmentReader::maxDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_maxDoc_54c6a179]);
        }

        jint SegmentReader::numDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_numDocs_54c6a179]);
        }

        jlong SegmentReader::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }

        void SegmentReader::removeCoreClosedListener(const ::org::apache::lucene::index::AtomicReader$CoreClosedListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_removeCoreClosedListener_cbc2818f], a0.this$);
        }

        ::java::lang::String SegmentReader::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SegmentReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentReader_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SegmentReader_init_(t_SegmentReader *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SegmentReader_addCoreClosedListener(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_checkIntegrity(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_directory(t_SegmentReader *self);
        static PyObject *t_SegmentReader_document(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_fields(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getBinaryDocValues(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getCombinedCoreAndDeletesKey(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getCoreCacheKey(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getDocsWithField(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getFieldInfos(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getFieldsReader(t_SegmentReader *self);
        static PyObject *t_SegmentReader_getLiveDocs(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getNormValues(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getNumericDocValues(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getSegmentInfo(t_SegmentReader *self);
        static PyObject *t_SegmentReader_getSegmentName(t_SegmentReader *self);
        static PyObject *t_SegmentReader_getSortedDocValues(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getSortedNumericDocValues(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getSortedSetDocValues(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getTermInfosIndexDivisor(t_SegmentReader *self);
        static PyObject *t_SegmentReader_getTermVectors(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getTermVectorsReader(t_SegmentReader *self);
        static PyObject *t_SegmentReader_maxDoc(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_numDocs(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_ramBytesUsed(t_SegmentReader *self);
        static PyObject *t_SegmentReader_removeCoreClosedListener(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_toString(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_get__combinedCoreAndDeletesKey(t_SegmentReader *self, void *data);
        static PyObject *t_SegmentReader_get__coreCacheKey(t_SegmentReader *self, void *data);
        static PyObject *t_SegmentReader_get__fieldInfos(t_SegmentReader *self, void *data);
        static PyObject *t_SegmentReader_get__fieldsReader(t_SegmentReader *self, void *data);
        static PyObject *t_SegmentReader_get__liveDocs(t_SegmentReader *self, void *data);
        static PyObject *t_SegmentReader_get__segmentInfo(t_SegmentReader *self, void *data);
        static PyObject *t_SegmentReader_get__segmentName(t_SegmentReader *self, void *data);
        static PyObject *t_SegmentReader_get__termInfosIndexDivisor(t_SegmentReader *self, void *data);
        static PyObject *t_SegmentReader_get__termVectorsReader(t_SegmentReader *self, void *data);
        static PyGetSetDef t_SegmentReader__fields_[] = {
          DECLARE_GET_FIELD(t_SegmentReader, combinedCoreAndDeletesKey),
          DECLARE_GET_FIELD(t_SegmentReader, coreCacheKey),
          DECLARE_GET_FIELD(t_SegmentReader, fieldInfos),
          DECLARE_GET_FIELD(t_SegmentReader, fieldsReader),
          DECLARE_GET_FIELD(t_SegmentReader, liveDocs),
          DECLARE_GET_FIELD(t_SegmentReader, segmentInfo),
          DECLARE_GET_FIELD(t_SegmentReader, segmentName),
          DECLARE_GET_FIELD(t_SegmentReader, termInfosIndexDivisor),
          DECLARE_GET_FIELD(t_SegmentReader, termVectorsReader),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SegmentReader__methods_[] = {
          DECLARE_METHOD(t_SegmentReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentReader, addCoreClosedListener, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, checkIntegrity, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, directory, METH_NOARGS),
          DECLARE_METHOD(t_SegmentReader, document, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, fields, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getBinaryDocValues, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getCombinedCoreAndDeletesKey, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getCoreCacheKey, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getDocsWithField, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getFieldInfos, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getFieldsReader, METH_NOARGS),
          DECLARE_METHOD(t_SegmentReader, getLiveDocs, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getNormValues, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getNumericDocValues, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getSegmentInfo, METH_NOARGS),
          DECLARE_METHOD(t_SegmentReader, getSegmentName, METH_NOARGS),
          DECLARE_METHOD(t_SegmentReader, getSortedDocValues, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getSortedNumericDocValues, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getSortedSetDocValues, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getTermInfosIndexDivisor, METH_NOARGS),
          DECLARE_METHOD(t_SegmentReader, getTermVectors, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getTermVectorsReader, METH_NOARGS),
          DECLARE_METHOD(t_SegmentReader, maxDoc, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, numDocs, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, ramBytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_SegmentReader, removeCoreClosedListener, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SegmentReader, t_SegmentReader, ::org::apache::lucene::index::AtomicReader, SegmentReader, t_SegmentReader_init_, 0, 0, t_SegmentReader__fields_, 0, 0);

        void t_SegmentReader::install(PyObject *module)
        {
          installType(&PY_TYPE(SegmentReader), module, "SegmentReader", 0);
        }

        void t_SegmentReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SegmentReader).tp_dict, "class_", make_descriptor(SegmentReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SegmentReader).tp_dict, "wrapfn_", make_descriptor(t_SegmentReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SegmentReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SegmentReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SegmentReader::initializeClass, 1)))
            return NULL;
          return t_SegmentReader::wrap_Object(SegmentReader(((t_SegmentReader *) arg)->object.this$));
        }
        static PyObject *t_SegmentReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SegmentReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SegmentReader_init_(t_SegmentReader *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::SegmentCommitInfo a0((jobject) NULL);
          jint a1;
          ::org::apache::lucene::store::IOContext a2((jobject) NULL);
          SegmentReader object((jobject) NULL);

          if (!parseArgs(args, "kIk", ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
          {
            INT_CALL(object = SegmentReader(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SegmentReader_addCoreClosedListener(t_SegmentReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader$CoreClosedListener a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReader$CoreClosedListener::initializeClass, &a0))
          {
            OBJ_CALL(self->object.addCoreClosedListener(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "addCoreClosedListener", args, 2);
        }

        static PyObject *t_SegmentReader_checkIntegrity(t_SegmentReader *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.checkIntegrity());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "checkIntegrity", args, 2);
        }

        static PyObject *t_SegmentReader_directory(t_SegmentReader *self)
        {
          ::org::apache::lucene::store::Directory result((jobject) NULL);
          OBJ_CALL(result = self->object.directory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(result);
        }

        static PyObject *t_SegmentReader_document(t_SegmentReader *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::index::StoredFieldVisitor a1((jobject) NULL);

          if (!parseArgs(args, "Ik", ::org::apache::lucene::index::StoredFieldVisitor::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.document(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "document", args, 2);
        }

        static PyObject *t_SegmentReader_fields(t_SegmentReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::Fields result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.fields());
            return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "fields", args, 2);
        }

        static PyObject *t_SegmentReader_getBinaryDocValues(t_SegmentReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::BinaryDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getBinaryDocValues(a0));
            return ::org::apache::lucene::index::t_BinaryDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "getBinaryDocValues", args, 2);
        }

        static PyObject *t_SegmentReader_getCombinedCoreAndDeletesKey(t_SegmentReader *self, PyObject *args)
        {
          ::java::lang::Object result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getCombinedCoreAndDeletesKey());
            return ::java::lang::t_Object::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "getCombinedCoreAndDeletesKey", args, 2);
        }

        static PyObject *t_SegmentReader_getCoreCacheKey(t_SegmentReader *self, PyObject *args)
        {
          ::java::lang::Object result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getCoreCacheKey());
            return ::java::lang::t_Object::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "getCoreCacheKey", args, 2);
        }

        static PyObject *t_SegmentReader_getDocsWithField(t_SegmentReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getDocsWithField(a0));
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "getDocsWithField", args, 2);
        }

        static PyObject *t_SegmentReader_getFieldInfos(t_SegmentReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfos result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getFieldInfos());
            return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "getFieldInfos", args, 2);
        }

        static PyObject *t_SegmentReader_getFieldsReader(t_SegmentReader *self)
        {
          ::org::apache::lucene::codecs::StoredFieldsReader result((jobject) NULL);
          OBJ_CALL(result = self->object.getFieldsReader());
          return ::org::apache::lucene::codecs::t_StoredFieldsReader::wrap_Object(result);
        }

        static PyObject *t_SegmentReader_getLiveDocs(t_SegmentReader *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getLiveDocs());
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "getLiveDocs", args, 2);
        }

        static PyObject *t_SegmentReader_getNormValues(t_SegmentReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getNormValues(a0));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "getNormValues", args, 2);
        }

        static PyObject *t_SegmentReader_getNumericDocValues(t_SegmentReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getNumericDocValues(a0));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "getNumericDocValues", args, 2);
        }

        static PyObject *t_SegmentReader_getSegmentInfo(t_SegmentReader *self)
        {
          ::org::apache::lucene::index::SegmentCommitInfo result((jobject) NULL);
          OBJ_CALL(result = self->object.getSegmentInfo());
          return ::org::apache::lucene::index::t_SegmentCommitInfo::wrap_Object(result);
        }

        static PyObject *t_SegmentReader_getSegmentName(t_SegmentReader *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getSegmentName());
          return j2p(result);
        }

        static PyObject *t_SegmentReader_getSortedDocValues(t_SegmentReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedDocValues(a0));
            return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "getSortedDocValues", args, 2);
        }

        static PyObject *t_SegmentReader_getSortedNumericDocValues(t_SegmentReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedNumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedNumericDocValues(a0));
            return ::org::apache::lucene::index::t_SortedNumericDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "getSortedNumericDocValues", args, 2);
        }

        static PyObject *t_SegmentReader_getSortedSetDocValues(t_SegmentReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedSetDocValues(a0));
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "getSortedSetDocValues", args, 2);
        }

        static PyObject *t_SegmentReader_getTermInfosIndexDivisor(t_SegmentReader *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getTermInfosIndexDivisor());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_SegmentReader_getTermVectors(t_SegmentReader *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::index::Fields result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.getTermVectors(a0));
            return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "getTermVectors", args, 2);
        }

        static PyObject *t_SegmentReader_getTermVectorsReader(t_SegmentReader *self)
        {
          ::org::apache::lucene::codecs::TermVectorsReader result((jobject) NULL);
          OBJ_CALL(result = self->object.getTermVectorsReader());
          return ::org::apache::lucene::codecs::t_TermVectorsReader::wrap_Object(result);
        }

        static PyObject *t_SegmentReader_maxDoc(t_SegmentReader *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.maxDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "maxDoc", args, 2);
        }

        static PyObject *t_SegmentReader_numDocs(t_SegmentReader *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.numDocs());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "numDocs", args, 2);
        }

        static PyObject *t_SegmentReader_ramBytesUsed(t_SegmentReader *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SegmentReader_removeCoreClosedListener(t_SegmentReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader$CoreClosedListener a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReader$CoreClosedListener::initializeClass, &a0))
          {
            OBJ_CALL(self->object.removeCoreClosedListener(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "removeCoreClosedListener", args, 2);
        }

        static PyObject *t_SegmentReader_toString(t_SegmentReader *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_SegmentReader_get__combinedCoreAndDeletesKey(t_SegmentReader *self, void *data)
        {
          ::java::lang::Object value((jobject) NULL);
          OBJ_CALL(value = self->object.getCombinedCoreAndDeletesKey());
          return ::java::lang::t_Object::wrap_Object(value);
        }

        static PyObject *t_SegmentReader_get__coreCacheKey(t_SegmentReader *self, void *data)
        {
          ::java::lang::Object value((jobject) NULL);
          OBJ_CALL(value = self->object.getCoreCacheKey());
          return ::java::lang::t_Object::wrap_Object(value);
        }

        static PyObject *t_SegmentReader_get__fieldInfos(t_SegmentReader *self, void *data)
        {
          ::org::apache::lucene::index::FieldInfos value((jobject) NULL);
          OBJ_CALL(value = self->object.getFieldInfos());
          return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(value);
        }

        static PyObject *t_SegmentReader_get__fieldsReader(t_SegmentReader *self, void *data)
        {
          ::org::apache::lucene::codecs::StoredFieldsReader value((jobject) NULL);
          OBJ_CALL(value = self->object.getFieldsReader());
          return ::org::apache::lucene::codecs::t_StoredFieldsReader::wrap_Object(value);
        }

        static PyObject *t_SegmentReader_get__liveDocs(t_SegmentReader *self, void *data)
        {
          ::org::apache::lucene::util::Bits value((jobject) NULL);
          OBJ_CALL(value = self->object.getLiveDocs());
          return ::org::apache::lucene::util::t_Bits::wrap_Object(value);
        }

        static PyObject *t_SegmentReader_get__segmentInfo(t_SegmentReader *self, void *data)
        {
          ::org::apache::lucene::index::SegmentCommitInfo value((jobject) NULL);
          OBJ_CALL(value = self->object.getSegmentInfo());
          return ::org::apache::lucene::index::t_SegmentCommitInfo::wrap_Object(value);
        }

        static PyObject *t_SegmentReader_get__segmentName(t_SegmentReader *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getSegmentName());
          return j2p(value);
        }

        static PyObject *t_SegmentReader_get__termInfosIndexDivisor(t_SegmentReader *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getTermInfosIndexDivisor());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_SegmentReader_get__termVectorsReader(t_SegmentReader *self, void *data)
        {
          ::org::apache::lucene::codecs::TermVectorsReader value((jobject) NULL);
          OBJ_CALL(value = self->object.getTermVectorsReader());
          return ::org::apache::lucene::codecs::t_TermVectorsReader::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/KeywordTokenizer.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *KeywordTokenizer::class$ = NULL;
          jmethodID *KeywordTokenizer::mids$ = NULL;
          bool KeywordTokenizer::live$ = false;
          jint KeywordTokenizer::DEFAULT_BUFFER_SIZE = (jint) 0;

          jclass KeywordTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/KeywordTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_8c604f56] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;I)V");
              mids$[mid_init$_338c3a92] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;I)V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_BUFFER_SIZE = env->getStaticIntField(cls, "DEFAULT_BUFFER_SIZE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KeywordTokenizer::KeywordTokenizer(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          KeywordTokenizer::KeywordTokenizer(const ::java::io::Reader & a0, jint a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_8c604f56, a0.this$, a1)) {}

          KeywordTokenizer::KeywordTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1, jint a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_338c3a92, a0.this$, a1.this$, a2)) {}

          void KeywordTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean KeywordTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void KeywordTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_KeywordTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeywordTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KeywordTokenizer_init_(t_KeywordTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KeywordTokenizer_end(t_KeywordTokenizer *self, PyObject *args);
          static PyObject *t_KeywordTokenizer_incrementToken(t_KeywordTokenizer *self, PyObject *args);
          static PyObject *t_KeywordTokenizer_reset(t_KeywordTokenizer *self, PyObject *args);

          static PyMethodDef t_KeywordTokenizer__methods_[] = {
            DECLARE_METHOD(t_KeywordTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_KeywordTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_KeywordTokenizer, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(KeywordTokenizer, t_KeywordTokenizer, ::org::apache::lucene::analysis::Tokenizer, KeywordTokenizer, t_KeywordTokenizer_init_, 0, 0, 0, 0, 0);

          void t_KeywordTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(KeywordTokenizer), module, "KeywordTokenizer", 0);
          }

          void t_KeywordTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(KeywordTokenizer).tp_dict, "class_", make_descriptor(KeywordTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(KeywordTokenizer).tp_dict, "wrapfn_", make_descriptor(t_KeywordTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(KeywordTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(KeywordTokenizer::initializeClass);
            PyDict_SetItemString(PY_TYPE(KeywordTokenizer).tp_dict, "DEFAULT_BUFFER_SIZE", make_descriptor(KeywordTokenizer::DEFAULT_BUFFER_SIZE));
          }

          static PyObject *t_KeywordTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KeywordTokenizer::initializeClass, 1)))
              return NULL;
            return t_KeywordTokenizer::wrap_Object(KeywordTokenizer(((t_KeywordTokenizer *) arg)->object.this$));
          }
          static PyObject *t_KeywordTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KeywordTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KeywordTokenizer_init_(t_KeywordTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                KeywordTokenizer object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = KeywordTokenizer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::java::io::Reader a0((jobject) NULL);
                jint a1;
                KeywordTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kI", ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = KeywordTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                jint a2;
                KeywordTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kkI", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = KeywordTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_KeywordTokenizer_end(t_KeywordTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(KeywordTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_KeywordTokenizer_incrementToken(t_KeywordTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(KeywordTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_KeywordTokenizer_reset(t_KeywordTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(KeywordTokenizer), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/TermFreqIterator$TermFreqIteratorWrapper.h"
#include "org/apache/lucene/util/BytesRefIterator.h"
#include "org/apache/lucene/search/spell/TermFreqIterator.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "java/util/Comparator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *TermFreqIterator$TermFreqIteratorWrapper::class$ = NULL;
          jmethodID *TermFreqIterator$TermFreqIteratorWrapper::mids$ = NULL;
          bool TermFreqIterator$TermFreqIteratorWrapper::live$ = false;

          jclass TermFreqIterator$TermFreqIteratorWrapper::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/TermFreqIterator$TermFreqIteratorWrapper");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_506719fa] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/BytesRefIterator;)V");
              mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
              mids$[mid_next_4ae19461] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_weight_54c6a17a] = env->getMethodID(cls, "weight", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TermFreqIterator$TermFreqIteratorWrapper::TermFreqIterator$TermFreqIteratorWrapper(const ::org::apache::lucene::util::BytesRefIterator & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_506719fa, a0.this$)) {}

          ::java::util::Comparator TermFreqIterator$TermFreqIteratorWrapper::getComparator() const
          {
            return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
          }

          ::org::apache::lucene::util::BytesRef TermFreqIterator$TermFreqIteratorWrapper::next() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_4ae19461]));
          }

          jlong TermFreqIterator$TermFreqIteratorWrapper::weight() const
          {
            return env->callLongMethod(this$, mids$[mid_weight_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_TermFreqIterator$TermFreqIteratorWrapper_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TermFreqIterator$TermFreqIteratorWrapper_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TermFreqIterator$TermFreqIteratorWrapper_init_(t_TermFreqIterator$TermFreqIteratorWrapper *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TermFreqIterator$TermFreqIteratorWrapper_getComparator(t_TermFreqIterator$TermFreqIteratorWrapper *self);
          static PyObject *t_TermFreqIterator$TermFreqIteratorWrapper_next(t_TermFreqIterator$TermFreqIteratorWrapper *self);
          static PyObject *t_TermFreqIterator$TermFreqIteratorWrapper_weight(t_TermFreqIterator$TermFreqIteratorWrapper *self);
          static PyObject *t_TermFreqIterator$TermFreqIteratorWrapper_get__comparator(t_TermFreqIterator$TermFreqIteratorWrapper *self, void *data);
          static PyGetSetDef t_TermFreqIterator$TermFreqIteratorWrapper__fields_[] = {
            DECLARE_GET_FIELD(t_TermFreqIterator$TermFreqIteratorWrapper, comparator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TermFreqIterator$TermFreqIteratorWrapper__methods_[] = {
            DECLARE_METHOD(t_TermFreqIterator$TermFreqIteratorWrapper, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermFreqIterator$TermFreqIteratorWrapper, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermFreqIterator$TermFreqIteratorWrapper, getComparator, METH_NOARGS),
            DECLARE_METHOD(t_TermFreqIterator$TermFreqIteratorWrapper, next, METH_NOARGS),
            DECLARE_METHOD(t_TermFreqIterator$TermFreqIteratorWrapper, weight, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TermFreqIterator$TermFreqIteratorWrapper, t_TermFreqIterator$TermFreqIteratorWrapper, ::java::lang::Object, TermFreqIterator$TermFreqIteratorWrapper, t_TermFreqIterator$TermFreqIteratorWrapper_init_, PyObject_SelfIter, ((PyObject *(*)(t_TermFreqIterator$TermFreqIteratorWrapper *)) get_next< t_TermFreqIterator$TermFreqIteratorWrapper,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >), t_TermFreqIterator$TermFreqIteratorWrapper__fields_, 0, 0);

          void t_TermFreqIterator$TermFreqIteratorWrapper::install(PyObject *module)
          {
            installType(&PY_TYPE(TermFreqIterator$TermFreqIteratorWrapper), module, "TermFreqIterator$TermFreqIteratorWrapper", 0);
          }

          void t_TermFreqIterator$TermFreqIteratorWrapper::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TermFreqIterator$TermFreqIteratorWrapper).tp_dict, "class_", make_descriptor(TermFreqIterator$TermFreqIteratorWrapper::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TermFreqIterator$TermFreqIteratorWrapper).tp_dict, "wrapfn_", make_descriptor(t_TermFreqIterator$TermFreqIteratorWrapper::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TermFreqIterator$TermFreqIteratorWrapper).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TermFreqIterator$TermFreqIteratorWrapper_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TermFreqIterator$TermFreqIteratorWrapper::initializeClass, 1)))
              return NULL;
            return t_TermFreqIterator$TermFreqIteratorWrapper::wrap_Object(TermFreqIterator$TermFreqIteratorWrapper(((t_TermFreqIterator$TermFreqIteratorWrapper *) arg)->object.this$));
          }
          static PyObject *t_TermFreqIterator$TermFreqIteratorWrapper_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TermFreqIterator$TermFreqIteratorWrapper::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TermFreqIterator$TermFreqIteratorWrapper_init_(t_TermFreqIterator$TermFreqIteratorWrapper *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::BytesRefIterator a0((jobject) NULL);
            TermFreqIterator$TermFreqIteratorWrapper object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRefIterator::initializeClass, &a0))
            {
              INT_CALL(object = TermFreqIterator$TermFreqIteratorWrapper(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TermFreqIterator$TermFreqIteratorWrapper_getComparator(t_TermFreqIterator$TermFreqIteratorWrapper *self)
          {
            ::java::util::Comparator result((jobject) NULL);
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          static PyObject *t_TermFreqIterator$TermFreqIteratorWrapper_next(t_TermFreqIterator$TermFreqIteratorWrapper *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_TermFreqIterator$TermFreqIteratorWrapper_weight(t_TermFreqIterator$TermFreqIteratorWrapper *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.weight());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_TermFreqIterator$TermFreqIteratorWrapper_get__comparator(t_TermFreqIterator$TermFreqIteratorWrapper *self, void *data)
          {
            ::java::util::Comparator value((jobject) NULL);
            OBJ_CALL(value = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CheckIndex$Status$StoredFieldStatus.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CheckIndex$Status$StoredFieldStatus::class$ = NULL;
        jmethodID *CheckIndex$Status$StoredFieldStatus::mids$ = NULL;
        jfieldID *CheckIndex$Status$StoredFieldStatus::fids$ = NULL;
        bool CheckIndex$Status$StoredFieldStatus::live$ = false;

        jclass CheckIndex$Status$StoredFieldStatus::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CheckIndex$Status$StoredFieldStatus");

            fids$ = new jfieldID[max_fid];
            fids$[fid_docCount] = env->getFieldID(cls, "docCount", "I");
            fids$[fid_error] = env->getFieldID(cls, "error", "Ljava/lang/Throwable;");
            fids$[fid_totFields] = env->getFieldID(cls, "totFields", "J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint CheckIndex$Status$StoredFieldStatus::_get_docCount() const
        {
          return env->getIntField(this$, fids$[fid_docCount]);
        }

        void CheckIndex$Status$StoredFieldStatus::_set_docCount(jint a0) const
        {
          env->setIntField(this$, fids$[fid_docCount], a0);
        }

        ::java::lang::Throwable CheckIndex$Status$StoredFieldStatus::_get_error() const
        {
          return ::java::lang::Throwable(env->getObjectField(this$, fids$[fid_error]));
        }

        void CheckIndex$Status$StoredFieldStatus::_set_error(const ::java::lang::Throwable & a0) const
        {
          env->setObjectField(this$, fids$[fid_error], a0.this$);
        }

        jlong CheckIndex$Status$StoredFieldStatus::_get_totFields() const
        {
          return env->getLongField(this$, fids$[fid_totFields]);
        }

        void CheckIndex$Status$StoredFieldStatus::_set_totFields(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totFields], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CheckIndex$Status$StoredFieldStatus_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$StoredFieldStatus_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$StoredFieldStatus_get__docCount(t_CheckIndex$Status$StoredFieldStatus *self, void *data);
        static int t_CheckIndex$Status$StoredFieldStatus_set__docCount(t_CheckIndex$Status$StoredFieldStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$StoredFieldStatus_get__error(t_CheckIndex$Status$StoredFieldStatus *self, void *data);
        static int t_CheckIndex$Status$StoredFieldStatus_set__error(t_CheckIndex$Status$StoredFieldStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$StoredFieldStatus_get__totFields(t_CheckIndex$Status$StoredFieldStatus *self, void *data);
        static int t_CheckIndex$Status$StoredFieldStatus_set__totFields(t_CheckIndex$Status$StoredFieldStatus *self, PyObject *arg, void *data);

        static PyGetSetDef t_CheckIndex$Status$StoredFieldStatus__fields_[] = {
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$StoredFieldStatus, docCount),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$StoredFieldStatus, error),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$StoredFieldStatus, totFields),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CheckIndex$Status$StoredFieldStatus__methods_[] = {
          DECLARE_METHOD(t_CheckIndex$Status$StoredFieldStatus, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex$Status$StoredFieldStatus, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CheckIndex$Status$StoredFieldStatus, t_CheckIndex$Status$StoredFieldStatus, ::java::lang::Object, CheckIndex$Status$StoredFieldStatus, abstract_init, 0, 0, t_CheckIndex$Status$StoredFieldStatus__fields_, 0, 0);

        void t_CheckIndex$Status$StoredFieldStatus::install(PyObject *module)
        {
          installType(&PY_TYPE(CheckIndex$Status$StoredFieldStatus), module, "CheckIndex$Status$StoredFieldStatus", 0);
        }

        void t_CheckIndex$Status$StoredFieldStatus::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$StoredFieldStatus).tp_dict, "class_", make_descriptor(CheckIndex$Status$StoredFieldStatus::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$StoredFieldStatus).tp_dict, "wrapfn_", make_descriptor(t_CheckIndex$Status$StoredFieldStatus::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$StoredFieldStatus).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CheckIndex$Status$StoredFieldStatus_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CheckIndex$Status$StoredFieldStatus::initializeClass, 1)))
            return NULL;
          return t_CheckIndex$Status$StoredFieldStatus::wrap_Object(CheckIndex$Status$StoredFieldStatus(((t_CheckIndex$Status$StoredFieldStatus *) arg)->object.this$));
        }
        static PyObject *t_CheckIndex$Status$StoredFieldStatus_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CheckIndex$Status$StoredFieldStatus::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CheckIndex$Status$StoredFieldStatus_get__docCount(t_CheckIndex$Status$StoredFieldStatus *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_docCount());
          return PyInt_FromLong((long) value);
        }
        static int t_CheckIndex$Status$StoredFieldStatus_set__docCount(t_CheckIndex$Status$StoredFieldStatus *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_docCount(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "docCount", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$StoredFieldStatus_get__error(t_CheckIndex$Status$StoredFieldStatus *self, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          OBJ_CALL(value = self->object._get_error());
          return ::java::lang::t_Throwable::wrap_Object(value);
        }
        static int t_CheckIndex$Status$StoredFieldStatus_set__error(t_CheckIndex$Status$StoredFieldStatus *self, PyObject *arg, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          if (!parseArg(arg, "k", ::java::lang::Throwable::initializeClass, &value))
          {
            INT_CALL(self->object._set_error(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "error", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$StoredFieldStatus_get__totFields(t_CheckIndex$Status$StoredFieldStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totFields());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$StoredFieldStatus_set__totFields(t_CheckIndex$Status$StoredFieldStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totFields(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totFields", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fi/FinnishAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fi {

          ::java::lang::Class *FinnishAnalyzer::class$ = NULL;
          jmethodID *FinnishAnalyzer::mids$ = NULL;
          bool FinnishAnalyzer::live$ = false;
          ::java::lang::String *FinnishAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass FinnishAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fi/FinnishAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FinnishAnalyzer::FinnishAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          FinnishAnalyzer::FinnishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          FinnishAnalyzer::FinnishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet FinnishAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fi {
          static PyObject *t_FinnishAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FinnishAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FinnishAnalyzer_init_(t_FinnishAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FinnishAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_FinnishAnalyzer_get__defaultStopSet(t_FinnishAnalyzer *self, void *data);
          static PyGetSetDef t_FinnishAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_FinnishAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FinnishAnalyzer__methods_[] = {
            DECLARE_METHOD(t_FinnishAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FinnishAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FinnishAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FinnishAnalyzer, t_FinnishAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, FinnishAnalyzer, t_FinnishAnalyzer_init_, 0, 0, t_FinnishAnalyzer__fields_, 0, 0);

          void t_FinnishAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(FinnishAnalyzer), module, "FinnishAnalyzer", 0);
          }

          void t_FinnishAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FinnishAnalyzer).tp_dict, "class_", make_descriptor(FinnishAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FinnishAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_FinnishAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FinnishAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(FinnishAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(FinnishAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*FinnishAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_FinnishAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FinnishAnalyzer::initializeClass, 1)))
              return NULL;
            return t_FinnishAnalyzer::wrap_Object(FinnishAnalyzer(((t_FinnishAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_FinnishAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FinnishAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FinnishAnalyzer_init_(t_FinnishAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                FinnishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = FinnishAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                FinnishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = FinnishAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                FinnishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = FinnishAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FinnishAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::fi::FinnishAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_FinnishAnalyzer_get__defaultStopSet(t_FinnishAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/StandardBooleanQueryNode.h"
#include "java/util/List.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {

              ::java::lang::Class *StandardBooleanQueryNode::class$ = NULL;
              jmethodID *StandardBooleanQueryNode::mids$ = NULL;
              bool StandardBooleanQueryNode::live$ = false;

              jclass StandardBooleanQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/nodes/StandardBooleanQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_7eb182ec] = env->getMethodID(cls, "<init>", "(Ljava/util/List;Z)V");
                  mids$[mid_isDisableCoord_54c6a16a] = env->getMethodID(cls, "isDisableCoord", "()Z");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              StandardBooleanQueryNode::StandardBooleanQueryNode(const ::java::util::List & a0, jboolean a1) : ::org::apache::lucene::queryparser::flexible::core::nodes::BooleanQueryNode(env->newObject(initializeClass, &mids$, mid_init$_7eb182ec, a0.this$, a1)) {}

              jboolean StandardBooleanQueryNode::isDisableCoord() const
              {
                return env->callBooleanMethod(this$, mids$[mid_isDisableCoord_54c6a16a]);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {
              static PyObject *t_StandardBooleanQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardBooleanQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_StandardBooleanQueryNode_init_(t_StandardBooleanQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_StandardBooleanQueryNode_isDisableCoord(t_StandardBooleanQueryNode *self);
              static PyObject *t_StandardBooleanQueryNode_get__disableCoord(t_StandardBooleanQueryNode *self, void *data);
              static PyGetSetDef t_StandardBooleanQueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_StandardBooleanQueryNode, disableCoord),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_StandardBooleanQueryNode__methods_[] = {
                DECLARE_METHOD(t_StandardBooleanQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardBooleanQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardBooleanQueryNode, isDisableCoord, METH_NOARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(StandardBooleanQueryNode, t_StandardBooleanQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::BooleanQueryNode, StandardBooleanQueryNode, t_StandardBooleanQueryNode_init_, 0, 0, t_StandardBooleanQueryNode__fields_, 0, 0);

              void t_StandardBooleanQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(StandardBooleanQueryNode), module, "StandardBooleanQueryNode", 0);
              }

              void t_StandardBooleanQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(StandardBooleanQueryNode).tp_dict, "class_", make_descriptor(StandardBooleanQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(StandardBooleanQueryNode).tp_dict, "wrapfn_", make_descriptor(t_StandardBooleanQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(StandardBooleanQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_StandardBooleanQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StandardBooleanQueryNode::initializeClass, 1)))
                  return NULL;
                return t_StandardBooleanQueryNode::wrap_Object(StandardBooleanQueryNode(((t_StandardBooleanQueryNode *) arg)->object.this$));
              }
              static PyObject *t_StandardBooleanQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StandardBooleanQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_StandardBooleanQueryNode_init_(t_StandardBooleanQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::util::List a0((jobject) NULL);
                PyTypeObject **p0;
                jboolean a1;
                StandardBooleanQueryNode object((jobject) NULL);

                if (!parseArgs(args, "KZ", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1))
                {
                  INT_CALL(object = StandardBooleanQueryNode(a0, a1));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_StandardBooleanQueryNode_isDisableCoord(t_StandardBooleanQueryNode *self)
              {
                jboolean result;
                OBJ_CALL(result = self->object.isDisableCoord());
                Py_RETURN_BOOL(result);
              }

              static PyObject *t_StandardBooleanQueryNode_get__disableCoord(t_StandardBooleanQueryNode *self, void *data)
              {
                jboolean value;
                OBJ_CALL(value = self->object.isDisableCoord());
                Py_RETURN_BOOL(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/MappingMultiDocsEnum.h"
#include "org/apache/lucene/index/MergeState.h"
#include "org/apache/lucene/index/MultiDocsEnum$EnumWithSlice.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *MappingMultiDocsEnum::class$ = NULL;
        jmethodID *MappingMultiDocsEnum::mids$ = NULL;
        bool MappingMultiDocsEnum::live$ = false;

        jclass MappingMultiDocsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/MappingMultiDocsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_advance_39c7bd23] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_54c6a179] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_freq_54c6a179] = env->getMethodID(cls, "freq", "()I");
            mids$[mid_getNumSubs_54c6a179] = env->getMethodID(cls, "getNumSubs", "()I");
            mids$[mid_getSubs_1bdfab69] = env->getMethodID(cls, "getSubs", "()[Lorg/apache/lucene/index/MultiDocsEnum$EnumWithSlice;");
            mids$[mid_nextDoc_54c6a179] = env->getMethodID(cls, "nextDoc", "()I");
            mids$[mid_setMergeState_fd0cfdf4] = env->getMethodID(cls, "setMergeState", "(Lorg/apache/lucene/index/MergeState;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MappingMultiDocsEnum::MappingMultiDocsEnum() : ::org::apache::lucene::index::DocsEnum(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jint MappingMultiDocsEnum::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_39c7bd23], a0);
        }

        jlong MappingMultiDocsEnum::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
        }

        jint MappingMultiDocsEnum::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_54c6a179]);
        }

        jint MappingMultiDocsEnum::freq() const
        {
          return env->callIntMethod(this$, mids$[mid_freq_54c6a179]);
        }

        jint MappingMultiDocsEnum::getNumSubs() const
        {
          return env->callIntMethod(this$, mids$[mid_getNumSubs_54c6a179]);
        }

        JArray< ::org::apache::lucene::index::MultiDocsEnum$EnumWithSlice > MappingMultiDocsEnum::getSubs() const
        {
          return JArray< ::org::apache::lucene::index::MultiDocsEnum$EnumWithSlice >(env->callObjectMethod(this$, mids$[mid_getSubs_1bdfab69]));
        }

        jint MappingMultiDocsEnum::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_54c6a179]);
        }

        void MappingMultiDocsEnum::setMergeState(const ::org::apache::lucene::index::MergeState & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMergeState_fd0cfdf4], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_MappingMultiDocsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MappingMultiDocsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MappingMultiDocsEnum_init_(t_MappingMultiDocsEnum *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MappingMultiDocsEnum_advance(t_MappingMultiDocsEnum *self, PyObject *args);
        static PyObject *t_MappingMultiDocsEnum_cost(t_MappingMultiDocsEnum *self, PyObject *args);
        static PyObject *t_MappingMultiDocsEnum_docID(t_MappingMultiDocsEnum *self, PyObject *args);
        static PyObject *t_MappingMultiDocsEnum_freq(t_MappingMultiDocsEnum *self, PyObject *args);
        static PyObject *t_MappingMultiDocsEnum_getNumSubs(t_MappingMultiDocsEnum *self);
        static PyObject *t_MappingMultiDocsEnum_getSubs(t_MappingMultiDocsEnum *self);
        static PyObject *t_MappingMultiDocsEnum_nextDoc(t_MappingMultiDocsEnum *self, PyObject *args);
        static PyObject *t_MappingMultiDocsEnum_setMergeState(t_MappingMultiDocsEnum *self, PyObject *arg);
        static int t_MappingMultiDocsEnum_set__mergeState(t_MappingMultiDocsEnum *self, PyObject *arg, void *data);
        static PyObject *t_MappingMultiDocsEnum_get__numSubs(t_MappingMultiDocsEnum *self, void *data);
        static PyObject *t_MappingMultiDocsEnum_get__subs(t_MappingMultiDocsEnum *self, void *data);
        static PyGetSetDef t_MappingMultiDocsEnum__fields_[] = {
          DECLARE_SET_FIELD(t_MappingMultiDocsEnum, mergeState),
          DECLARE_GET_FIELD(t_MappingMultiDocsEnum, numSubs),
          DECLARE_GET_FIELD(t_MappingMultiDocsEnum, subs),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MappingMultiDocsEnum__methods_[] = {
          DECLARE_METHOD(t_MappingMultiDocsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MappingMultiDocsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MappingMultiDocsEnum, advance, METH_VARARGS),
          DECLARE_METHOD(t_MappingMultiDocsEnum, cost, METH_VARARGS),
          DECLARE_METHOD(t_MappingMultiDocsEnum, docID, METH_VARARGS),
          DECLARE_METHOD(t_MappingMultiDocsEnum, freq, METH_VARARGS),
          DECLARE_METHOD(t_MappingMultiDocsEnum, getNumSubs, METH_NOARGS),
          DECLARE_METHOD(t_MappingMultiDocsEnum, getSubs, METH_NOARGS),
          DECLARE_METHOD(t_MappingMultiDocsEnum, nextDoc, METH_VARARGS),
          DECLARE_METHOD(t_MappingMultiDocsEnum, setMergeState, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MappingMultiDocsEnum, t_MappingMultiDocsEnum, ::org::apache::lucene::index::DocsEnum, MappingMultiDocsEnum, t_MappingMultiDocsEnum_init_, 0, 0, t_MappingMultiDocsEnum__fields_, 0, 0);

        void t_MappingMultiDocsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(MappingMultiDocsEnum), module, "MappingMultiDocsEnum", 0);
        }

        void t_MappingMultiDocsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MappingMultiDocsEnum).tp_dict, "class_", make_descriptor(MappingMultiDocsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MappingMultiDocsEnum).tp_dict, "wrapfn_", make_descriptor(t_MappingMultiDocsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MappingMultiDocsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MappingMultiDocsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MappingMultiDocsEnum::initializeClass, 1)))
            return NULL;
          return t_MappingMultiDocsEnum::wrap_Object(MappingMultiDocsEnum(((t_MappingMultiDocsEnum *) arg)->object.this$));
        }
        static PyObject *t_MappingMultiDocsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MappingMultiDocsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MappingMultiDocsEnum_init_(t_MappingMultiDocsEnum *self, PyObject *args, PyObject *kwds)
        {
          MappingMultiDocsEnum object((jobject) NULL);

          INT_CALL(object = MappingMultiDocsEnum());
          self->object = object;

          return 0;
        }

        static PyObject *t_MappingMultiDocsEnum_advance(t_MappingMultiDocsEnum *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MappingMultiDocsEnum), (PyObject *) self, "advance", args, 2);
        }

        static PyObject *t_MappingMultiDocsEnum_cost(t_MappingMultiDocsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(MappingMultiDocsEnum), (PyObject *) self, "cost", args, 2);
        }

        static PyObject *t_MappingMultiDocsEnum_docID(t_MappingMultiDocsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MappingMultiDocsEnum), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_MappingMultiDocsEnum_freq(t_MappingMultiDocsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.freq());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MappingMultiDocsEnum), (PyObject *) self, "freq", args, 2);
        }

        static PyObject *t_MappingMultiDocsEnum_getNumSubs(t_MappingMultiDocsEnum *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getNumSubs());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_MappingMultiDocsEnum_getSubs(t_MappingMultiDocsEnum *self)
        {
          JArray< ::org::apache::lucene::index::MultiDocsEnum$EnumWithSlice > result((jobject) NULL);
          OBJ_CALL(result = self->object.getSubs());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::index::t_MultiDocsEnum$EnumWithSlice::wrap_jobject);
        }

        static PyObject *t_MappingMultiDocsEnum_nextDoc(t_MappingMultiDocsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MappingMultiDocsEnum), (PyObject *) self, "nextDoc", args, 2);
        }

        static PyObject *t_MappingMultiDocsEnum_setMergeState(t_MappingMultiDocsEnum *self, PyObject *arg)
        {
          ::org::apache::lucene::index::MergeState a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::MergeState::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setMergeState(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMergeState", arg);
          return NULL;
        }

        static int t_MappingMultiDocsEnum_set__mergeState(t_MappingMultiDocsEnum *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::MergeState value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::MergeState::initializeClass, &value))
            {
              INT_CALL(self->object.setMergeState(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "mergeState", arg);
          return -1;
        }

        static PyObject *t_MappingMultiDocsEnum_get__numSubs(t_MappingMultiDocsEnum *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getNumSubs());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_MappingMultiDocsEnum_get__subs(t_MappingMultiDocsEnum *self, void *data)
        {
          JArray< ::org::apache::lucene::index::MultiDocsEnum$EnumWithSlice > value((jobject) NULL);
          OBJ_CALL(value = self->object.getSubs());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_MultiDocsEnum$EnumWithSlice::wrap_jobject);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CompositeReaderContext.h"
#include "org/apache/lucene/index/CompositeReader.h"
#include "java/util/List.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CompositeReaderContext::class$ = NULL;
        jmethodID *CompositeReaderContext::mids$ = NULL;
        bool CompositeReaderContext::live$ = false;

        jclass CompositeReaderContext::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CompositeReaderContext");

            mids$ = new jmethodID[max_mid];
            mids$[mid_children_87851566] = env->getMethodID(cls, "children", "()Ljava/util/List;");
            mids$[mid_leaves_87851566] = env->getMethodID(cls, "leaves", "()Ljava/util/List;");
            mids$[mid_reader_d29e58f7] = env->getMethodID(cls, "reader", "()Lorg/apache/lucene/index/CompositeReader;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::List CompositeReaderContext::children() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_children_87851566]));
        }

        ::java::util::List CompositeReaderContext::leaves() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_leaves_87851566]));
        }

        ::org::apache::lucene::index::CompositeReader CompositeReaderContext::reader() const
        {
          return ::org::apache::lucene::index::CompositeReader(env->callObjectMethod(this$, mids$[mid_reader_d29e58f7]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CompositeReaderContext_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CompositeReaderContext_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CompositeReaderContext_children(t_CompositeReaderContext *self, PyObject *args);
        static PyObject *t_CompositeReaderContext_leaves(t_CompositeReaderContext *self, PyObject *args);
        static PyObject *t_CompositeReaderContext_reader(t_CompositeReaderContext *self, PyObject *args);

        static PyMethodDef t_CompositeReaderContext__methods_[] = {
          DECLARE_METHOD(t_CompositeReaderContext, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CompositeReaderContext, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CompositeReaderContext, children, METH_VARARGS),
          DECLARE_METHOD(t_CompositeReaderContext, leaves, METH_VARARGS),
          DECLARE_METHOD(t_CompositeReaderContext, reader, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CompositeReaderContext, t_CompositeReaderContext, ::org::apache::lucene::index::IndexReaderContext, CompositeReaderContext, abstract_init, 0, 0, 0, 0, 0);

        void t_CompositeReaderContext::install(PyObject *module)
        {
          installType(&PY_TYPE(CompositeReaderContext), module, "CompositeReaderContext", 0);
        }

        void t_CompositeReaderContext::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CompositeReaderContext).tp_dict, "class_", make_descriptor(CompositeReaderContext::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CompositeReaderContext).tp_dict, "wrapfn_", make_descriptor(t_CompositeReaderContext::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CompositeReaderContext).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CompositeReaderContext_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CompositeReaderContext::initializeClass, 1)))
            return NULL;
          return t_CompositeReaderContext::wrap_Object(CompositeReaderContext(((t_CompositeReaderContext *) arg)->object.this$));
        }
        static PyObject *t_CompositeReaderContext_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CompositeReaderContext::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CompositeReaderContext_children(t_CompositeReaderContext *self, PyObject *args)
        {
          ::java::util::List result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.children());
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(IndexReaderContext));
          }

          return callSuper(&PY_TYPE(CompositeReaderContext), (PyObject *) self, "children", args, 2);
        }

        static PyObject *t_CompositeReaderContext_leaves(t_CompositeReaderContext *self, PyObject *args)
        {
          ::java::util::List result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.leaves());
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(AtomicReaderContext));
          }

          return callSuper(&PY_TYPE(CompositeReaderContext), (PyObject *) self, "leaves", args, 2);
        }

        static PyObject *t_CompositeReaderContext_reader(t_CompositeReaderContext *self, PyObject *args)
        {
          ::org::apache::lucene::index::CompositeReader result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.reader());
            return ::org::apache::lucene::index::t_CompositeReader::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(CompositeReaderContext), (PyObject *) self, "reader", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/ElisionFilterFactory.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/ElisionFilter.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *ElisionFilterFactory::class$ = NULL;
          jmethodID *ElisionFilterFactory::mids$ = NULL;
          bool ElisionFilterFactory::live$ = false;

          jclass ElisionFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/ElisionFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_94c1814f] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/util/ElisionFilter;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ElisionFilterFactory::ElisionFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::util::ElisionFilter ElisionFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::util::ElisionFilter(env->callObjectMethod(this$, mids$[mid_create_94c1814f], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory ElisionFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }

          void ElisionFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_ElisionFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ElisionFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ElisionFilterFactory_init_(t_ElisionFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ElisionFilterFactory_create(t_ElisionFilterFactory *self, PyObject *args);
          static PyObject *t_ElisionFilterFactory_getMultiTermComponent(t_ElisionFilterFactory *self);
          static PyObject *t_ElisionFilterFactory_inform(t_ElisionFilterFactory *self, PyObject *arg);
          static PyObject *t_ElisionFilterFactory_get__multiTermComponent(t_ElisionFilterFactory *self, void *data);
          static PyGetSetDef t_ElisionFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_ElisionFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ElisionFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ElisionFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ElisionFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ElisionFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_ElisionFilterFactory, getMultiTermComponent, METH_NOARGS),
            DECLARE_METHOD(t_ElisionFilterFactory, inform, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ElisionFilterFactory, t_ElisionFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, ElisionFilterFactory, t_ElisionFilterFactory_init_, 0, 0, t_ElisionFilterFactory__fields_, 0, 0);

          void t_ElisionFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ElisionFilterFactory), module, "ElisionFilterFactory", 0);
          }

          void t_ElisionFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ElisionFilterFactory).tp_dict, "class_", make_descriptor(ElisionFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ElisionFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_ElisionFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ElisionFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ElisionFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ElisionFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ElisionFilterFactory::wrap_Object(ElisionFilterFactory(((t_ElisionFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ElisionFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ElisionFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ElisionFilterFactory_init_(t_ElisionFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ElisionFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ElisionFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ElisionFilterFactory_create(t_ElisionFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::util::ElisionFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::util::t_ElisionFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ElisionFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_ElisionFilterFactory_getMultiTermComponent(t_ElisionFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_ElisionFilterFactory_inform(t_ElisionFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }

          static PyObject *t_ElisionFilterFactory_get__multiTermComponent(t_ElisionFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexFormatTooNewException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexFormatTooNewException::class$ = NULL;
        jmethodID *IndexFormatTooNewException::mids$ = NULL;
        bool IndexFormatTooNewException::live$ = false;

        jclass IndexFormatTooNewException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexFormatTooNewException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_b8e753a2] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;III)V");
            mids$[mid_init$_9c112331] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/DataInput;III)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexFormatTooNewException::IndexFormatTooNewException(const ::java::lang::String & a0, jint a1, jint a2, jint a3) : ::org::apache::lucene::index::CorruptIndexException(env->newObject(initializeClass, &mids$, mid_init$_b8e753a2, a0.this$, a1, a2, a3)) {}

        IndexFormatTooNewException::IndexFormatTooNewException(const ::org::apache::lucene::store::DataInput & a0, jint a1, jint a2, jint a3) : ::org::apache::lucene::index::CorruptIndexException(env->newObject(initializeClass, &mids$, mid_init$_9c112331, a0.this$, a1, a2, a3)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexFormatTooNewException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexFormatTooNewException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IndexFormatTooNewException_init_(t_IndexFormatTooNewException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_IndexFormatTooNewException__methods_[] = {
          DECLARE_METHOD(t_IndexFormatTooNewException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexFormatTooNewException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexFormatTooNewException, t_IndexFormatTooNewException, ::org::apache::lucene::index::CorruptIndexException, IndexFormatTooNewException, t_IndexFormatTooNewException_init_, 0, 0, 0, 0, 0);

        void t_IndexFormatTooNewException::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexFormatTooNewException), module, "IndexFormatTooNewException", 0);
        }

        void t_IndexFormatTooNewException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexFormatTooNewException).tp_dict, "class_", make_descriptor(IndexFormatTooNewException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexFormatTooNewException).tp_dict, "wrapfn_", make_descriptor(t_IndexFormatTooNewException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexFormatTooNewException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexFormatTooNewException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexFormatTooNewException::initializeClass, 1)))
            return NULL;
          return t_IndexFormatTooNewException::wrap_Object(IndexFormatTooNewException(((t_IndexFormatTooNewException *) arg)->object.this$));
        }
        static PyObject *t_IndexFormatTooNewException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexFormatTooNewException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IndexFormatTooNewException_init_(t_IndexFormatTooNewException *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 4:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              IndexFormatTooNewException object((jobject) NULL);

              if (!parseArgs(args, "sIII", &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = IndexFormatTooNewException(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
            {
              ::org::apache::lucene::store::DataInput a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              IndexFormatTooNewException object((jobject) NULL);

              if (!parseArgs(args, "kIII", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = IndexFormatTooNewException(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/StandardAnalyzer.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *StandardAnalyzer::class$ = NULL;
          jmethodID *StandardAnalyzer::mids$ = NULL;
          bool StandardAnalyzer::live$ = false;
          jint StandardAnalyzer::DEFAULT_MAX_TOKEN_LENGTH = (jint) 0;
          ::org::apache::lucene::analysis::util::CharArraySet *StandardAnalyzer::STOP_WORDS_SET = NULL;

          jclass StandardAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/StandardAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getMaxTokenLength_54c6a179] = env->getMethodID(cls, "getMaxTokenLength", "()I");
              mids$[mid_setMaxTokenLength_39c7bd3c] = env->getMethodID(cls, "setMaxTokenLength", "(I)V");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_TOKEN_LENGTH = env->getStaticIntField(cls, "DEFAULT_MAX_TOKEN_LENGTH");
              STOP_WORDS_SET = new ::org::apache::lucene::analysis::util::CharArraySet(env->getStaticObjectField(cls, "STOP_WORDS_SET", "Lorg/apache/lucene/analysis/util/CharArraySet;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StandardAnalyzer::StandardAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          StandardAnalyzer::StandardAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          StandardAnalyzer::StandardAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          jint StandardAnalyzer::getMaxTokenLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxTokenLength_54c6a179]);
          }

          void StandardAnalyzer::setMaxTokenLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxTokenLength_39c7bd3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_StandardAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StandardAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StandardAnalyzer_init_(t_StandardAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StandardAnalyzer_getMaxTokenLength(t_StandardAnalyzer *self);
          static PyObject *t_StandardAnalyzer_setMaxTokenLength(t_StandardAnalyzer *self, PyObject *arg);
          static PyObject *t_StandardAnalyzer_get__maxTokenLength(t_StandardAnalyzer *self, void *data);
          static int t_StandardAnalyzer_set__maxTokenLength(t_StandardAnalyzer *self, PyObject *arg, void *data);
          static PyGetSetDef t_StandardAnalyzer__fields_[] = {
            DECLARE_GETSET_FIELD(t_StandardAnalyzer, maxTokenLength),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_StandardAnalyzer__methods_[] = {
            DECLARE_METHOD(t_StandardAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardAnalyzer, getMaxTokenLength, METH_NOARGS),
            DECLARE_METHOD(t_StandardAnalyzer, setMaxTokenLength, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StandardAnalyzer, t_StandardAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, StandardAnalyzer, t_StandardAnalyzer_init_, 0, 0, t_StandardAnalyzer__fields_, 0, 0);

          void t_StandardAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(StandardAnalyzer), module, "StandardAnalyzer", 0);
          }

          void t_StandardAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StandardAnalyzer).tp_dict, "class_", make_descriptor(StandardAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StandardAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_StandardAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StandardAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(StandardAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(StandardAnalyzer).tp_dict, "DEFAULT_MAX_TOKEN_LENGTH", make_descriptor(StandardAnalyzer::DEFAULT_MAX_TOKEN_LENGTH));
            PyDict_SetItemString(PY_TYPE(StandardAnalyzer).tp_dict, "STOP_WORDS_SET", make_descriptor(::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(*StandardAnalyzer::STOP_WORDS_SET)));
          }

          static PyObject *t_StandardAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StandardAnalyzer::initializeClass, 1)))
              return NULL;
            return t_StandardAnalyzer::wrap_Object(StandardAnalyzer(((t_StandardAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_StandardAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StandardAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StandardAnalyzer_init_(t_StandardAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                StandardAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = StandardAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                StandardAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = StandardAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                StandardAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = StandardAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StandardAnalyzer_getMaxTokenLength(t_StandardAnalyzer *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxTokenLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_StandardAnalyzer_setMaxTokenLength(t_StandardAnalyzer *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxTokenLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxTokenLength", arg);
            return NULL;
          }

          static PyObject *t_StandardAnalyzer_get__maxTokenLength(t_StandardAnalyzer *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxTokenLength());
            return PyInt_FromLong((long) value);
          }
          static int t_StandardAnalyzer_set__maxTokenLength(t_StandardAnalyzer *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxTokenLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxTokenLength", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/ConcurrentMergeScheduler.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *ConcurrentMergeScheduler::class$ = NULL;
        jmethodID *ConcurrentMergeScheduler::mids$ = NULL;
        bool ConcurrentMergeScheduler::live$ = false;
        jint ConcurrentMergeScheduler::DEFAULT_MAX_MERGE_COUNT = (jint) 0;
        jint ConcurrentMergeScheduler::DEFAULT_MAX_THREAD_COUNT = (jint) 0;

        jclass ConcurrentMergeScheduler::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/ConcurrentMergeScheduler");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_getMaxMergeCount_54c6a179] = env->getMethodID(cls, "getMaxMergeCount", "()I");
            mids$[mid_getMaxThreadCount_54c6a179] = env->getMethodID(cls, "getMaxThreadCount", "()I");
            mids$[mid_getMergeThreadPriority_54c6a179] = env->getMethodID(cls, "getMergeThreadPriority", "()I");
            mids$[mid_merge_5fd7a9f9] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/IndexWriter;Lorg/apache/lucene/index/MergeTrigger;Z)V");
            mids$[mid_setMaxMergesAndThreads_d8d154a6] = env->getMethodID(cls, "setMaxMergesAndThreads", "(II)V");
            mids$[mid_setMergeThreadPriority_39c7bd3c] = env->getMethodID(cls, "setMergeThreadPriority", "(I)V");
            mids$[mid_sync_54c6a166] = env->getMethodID(cls, "sync", "()V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_message_5fdc3f48] = env->getMethodID(cls, "message", "(Ljava/lang/String;)V");
            mids$[mid_verbose_54c6a16a] = env->getMethodID(cls, "verbose", "()Z");
            mids$[mid_handleMergeException_c5ec8ca4] = env->getMethodID(cls, "handleMergeException", "(Ljava/lang/Throwable;)V");
            mids$[mid_mergeThreadCount_54c6a179] = env->getMethodID(cls, "mergeThreadCount", "()I");
            mids$[mid_updateMergeThreads_54c6a166] = env->getMethodID(cls, "updateMergeThreads", "()V");
            mids$[mid_doMerge_54badd95] = env->getMethodID(cls, "doMerge", "(Lorg/apache/lucene/index/MergePolicy$OneMerge;)V");
            mids$[mid_getMergeThread_a2024ae6] = env->getMethodID(cls, "getMergeThread", "(Lorg/apache/lucene/index/IndexWriter;Lorg/apache/lucene/index/MergePolicy$OneMerge;)Lorg/apache/lucene/index/ConcurrentMergeScheduler$MergeThread;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_MAX_MERGE_COUNT = env->getStaticIntField(cls, "DEFAULT_MAX_MERGE_COUNT");
            DEFAULT_MAX_THREAD_COUNT = env->getStaticIntField(cls, "DEFAULT_MAX_THREAD_COUNT");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ConcurrentMergeScheduler::ConcurrentMergeScheduler() : ::org::apache::lucene::index::MergeScheduler(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void ConcurrentMergeScheduler::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        jint ConcurrentMergeScheduler::getMaxMergeCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxMergeCount_54c6a179]);
        }

        jint ConcurrentMergeScheduler::getMaxThreadCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxThreadCount_54c6a179]);
        }

        jint ConcurrentMergeScheduler::getMergeThreadPriority() const
        {
          return env->callIntMethod(this$, mids$[mid_getMergeThreadPriority_54c6a179]);
        }

        void ConcurrentMergeScheduler::merge(const ::org::apache::lucene::index::IndexWriter & a0, const ::org::apache::lucene::index::MergeTrigger & a1, jboolean a2) const
        {
          env->callVoidMethod(this$, mids$[mid_merge_5fd7a9f9], a0.this$, a1.this$, a2);
        }

        void ConcurrentMergeScheduler::setMaxMergesAndThreads(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setMaxMergesAndThreads_d8d154a6], a0, a1);
        }

        void ConcurrentMergeScheduler::setMergeThreadPriority(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMergeThreadPriority_39c7bd3c], a0);
        }

        void ConcurrentMergeScheduler::sync() const
        {
          env->callVoidMethod(this$, mids$[mid_sync_54c6a166]);
        }

        ::java::lang::String ConcurrentMergeScheduler::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_ConcurrentMergeScheduler_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ConcurrentMergeScheduler_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ConcurrentMergeScheduler_init_(t_ConcurrentMergeScheduler *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ConcurrentMergeScheduler_close(t_ConcurrentMergeScheduler *self, PyObject *args);
        static PyObject *t_ConcurrentMergeScheduler_getMaxMergeCount(t_ConcurrentMergeScheduler *self);
        static PyObject *t_ConcurrentMergeScheduler_getMaxThreadCount(t_ConcurrentMergeScheduler *self);
        static PyObject *t_ConcurrentMergeScheduler_getMergeThreadPriority(t_ConcurrentMergeScheduler *self);
        static PyObject *t_ConcurrentMergeScheduler_merge(t_ConcurrentMergeScheduler *self, PyObject *args);
        static PyObject *t_ConcurrentMergeScheduler_setMaxMergesAndThreads(t_ConcurrentMergeScheduler *self, PyObject *args);
        static PyObject *t_ConcurrentMergeScheduler_setMergeThreadPriority(t_ConcurrentMergeScheduler *self, PyObject *arg);
        static PyObject *t_ConcurrentMergeScheduler_sync(t_ConcurrentMergeScheduler *self);
        static PyObject *t_ConcurrentMergeScheduler_toString(t_ConcurrentMergeScheduler *self, PyObject *args);
        static PyObject *t_ConcurrentMergeScheduler_get__maxMergeCount(t_ConcurrentMergeScheduler *self, void *data);
        static PyObject *t_ConcurrentMergeScheduler_get__maxThreadCount(t_ConcurrentMergeScheduler *self, void *data);
        static PyObject *t_ConcurrentMergeScheduler_get__mergeThreadPriority(t_ConcurrentMergeScheduler *self, void *data);
        static int t_ConcurrentMergeScheduler_set__mergeThreadPriority(t_ConcurrentMergeScheduler *self, PyObject *arg, void *data);
        static PyGetSetDef t_ConcurrentMergeScheduler__fields_[] = {
          DECLARE_GET_FIELD(t_ConcurrentMergeScheduler, maxMergeCount),
          DECLARE_GET_FIELD(t_ConcurrentMergeScheduler, maxThreadCount),
          DECLARE_GETSET_FIELD(t_ConcurrentMergeScheduler, mergeThreadPriority),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ConcurrentMergeScheduler__methods_[] = {
          DECLARE_METHOD(t_ConcurrentMergeScheduler, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ConcurrentMergeScheduler, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ConcurrentMergeScheduler, close, METH_VARARGS),
          DECLARE_METHOD(t_ConcurrentMergeScheduler, getMaxMergeCount, METH_NOARGS),
          DECLARE_METHOD(t_ConcurrentMergeScheduler, getMaxThreadCount, METH_NOARGS),
          DECLARE_METHOD(t_ConcurrentMergeScheduler, getMergeThreadPriority, METH_NOARGS),
          DECLARE_METHOD(t_ConcurrentMergeScheduler, merge, METH_VARARGS),
          DECLARE_METHOD(t_ConcurrentMergeScheduler, setMaxMergesAndThreads, METH_VARARGS),
          DECLARE_METHOD(t_ConcurrentMergeScheduler, setMergeThreadPriority, METH_O),
          DECLARE_METHOD(t_ConcurrentMergeScheduler, sync, METH_NOARGS),
          DECLARE_METHOD(t_ConcurrentMergeScheduler, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ConcurrentMergeScheduler, t_ConcurrentMergeScheduler, ::org::apache::lucene::index::MergeScheduler, ConcurrentMergeScheduler, t_ConcurrentMergeScheduler_init_, 0, 0, t_ConcurrentMergeScheduler__fields_, 0, 0);

        void t_ConcurrentMergeScheduler::install(PyObject *module)
        {
          installType(&PY_TYPE(ConcurrentMergeScheduler), module, "ConcurrentMergeScheduler", 0);
        }

        void t_ConcurrentMergeScheduler::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ConcurrentMergeScheduler).tp_dict, "class_", make_descriptor(ConcurrentMergeScheduler::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ConcurrentMergeScheduler).tp_dict, "wrapfn_", make_descriptor(t_ConcurrentMergeScheduler::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ConcurrentMergeScheduler).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(ConcurrentMergeScheduler::initializeClass);
          PyDict_SetItemString(PY_TYPE(ConcurrentMergeScheduler).tp_dict, "DEFAULT_MAX_MERGE_COUNT", make_descriptor(ConcurrentMergeScheduler::DEFAULT_MAX_MERGE_COUNT));
          PyDict_SetItemString(PY_TYPE(ConcurrentMergeScheduler).tp_dict, "DEFAULT_MAX_THREAD_COUNT", make_descriptor(ConcurrentMergeScheduler::DEFAULT_MAX_THREAD_COUNT));
        }

        static PyObject *t_ConcurrentMergeScheduler_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ConcurrentMergeScheduler::initializeClass, 1)))
            return NULL;
          return t_ConcurrentMergeScheduler::wrap_Object(ConcurrentMergeScheduler(((t_ConcurrentMergeScheduler *) arg)->object.this$));
        }
        static PyObject *t_ConcurrentMergeScheduler_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ConcurrentMergeScheduler::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ConcurrentMergeScheduler_init_(t_ConcurrentMergeScheduler *self, PyObject *args, PyObject *kwds)
        {
          ConcurrentMergeScheduler object((jobject) NULL);

          INT_CALL(object = ConcurrentMergeScheduler());
          self->object = object;

          return 0;
        }

        static PyObject *t_ConcurrentMergeScheduler_close(t_ConcurrentMergeScheduler *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ConcurrentMergeScheduler), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_ConcurrentMergeScheduler_getMaxMergeCount(t_ConcurrentMergeScheduler *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxMergeCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_ConcurrentMergeScheduler_getMaxThreadCount(t_ConcurrentMergeScheduler *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxThreadCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_ConcurrentMergeScheduler_getMergeThreadPriority(t_ConcurrentMergeScheduler *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMergeThreadPriority());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_ConcurrentMergeScheduler_merge(t_ConcurrentMergeScheduler *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexWriter a0((jobject) NULL);
          ::org::apache::lucene::index::MergeTrigger a1((jobject) NULL);
          PyTypeObject **p1;
          jboolean a2;

          if (!parseArgs(args, "kKZ", ::org::apache::lucene::index::IndexWriter::initializeClass, ::org::apache::lucene::index::MergeTrigger::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::index::t_MergeTrigger::parameters_, &a2))
          {
            OBJ_CALL(self->object.merge(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ConcurrentMergeScheduler), (PyObject *) self, "merge", args, 2);
        }

        static PyObject *t_ConcurrentMergeScheduler_setMaxMergesAndThreads(t_ConcurrentMergeScheduler *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.setMaxMergesAndThreads(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxMergesAndThreads", args);
          return NULL;
        }

        static PyObject *t_ConcurrentMergeScheduler_setMergeThreadPriority(t_ConcurrentMergeScheduler *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setMergeThreadPriority(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMergeThreadPriority", arg);
          return NULL;
        }

        static PyObject *t_ConcurrentMergeScheduler_sync(t_ConcurrentMergeScheduler *self)
        {
          OBJ_CALL(self->object.sync());
          Py_RETURN_NONE;
        }

        static PyObject *t_ConcurrentMergeScheduler_toString(t_ConcurrentMergeScheduler *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(ConcurrentMergeScheduler), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_ConcurrentMergeScheduler_get__maxMergeCount(t_ConcurrentMergeScheduler *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxMergeCount());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_ConcurrentMergeScheduler_get__maxThreadCount(t_ConcurrentMergeScheduler *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxThreadCount());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_ConcurrentMergeScheduler_get__mergeThreadPriority(t_ConcurrentMergeScheduler *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMergeThreadPriority());
          return PyInt_FromLong((long) value);
        }
        static int t_ConcurrentMergeScheduler_set__mergeThreadPriority(t_ConcurrentMergeScheduler *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMergeThreadPriority(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "mergeThreadPriority", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/CharFilter.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *CharFilter::class$ = NULL;
        jmethodID *CharFilter::mids$ = NULL;
        bool CharFilter::live$ = false;

        jclass CharFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/CharFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_correctOffset_39c7bd23] = env->getMethodID(cls, "correctOffset", "(I)I");
            mids$[mid_correct_39c7bd23] = env->getMethodID(cls, "correct", "(I)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CharFilter::CharFilter(const ::java::io::Reader & a0) : ::java::io::Reader(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

        void CharFilter::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        jint CharFilter::correctOffset(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_correctOffset_39c7bd23], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_CharFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CharFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CharFilter_init_(t_CharFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CharFilter_close(t_CharFilter *self, PyObject *args);
        static PyObject *t_CharFilter_correctOffset(t_CharFilter *self, PyObject *arg);

        static PyMethodDef t_CharFilter__methods_[] = {
          DECLARE_METHOD(t_CharFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CharFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CharFilter, close, METH_VARARGS),
          DECLARE_METHOD(t_CharFilter, correctOffset, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CharFilter, t_CharFilter, ::java::io::Reader, CharFilter, t_CharFilter_init_, 0, 0, 0, 0, 0);

        void t_CharFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(CharFilter), module, "CharFilter", 0);
        }

        void t_CharFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CharFilter).tp_dict, "class_", make_descriptor(CharFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CharFilter).tp_dict, "wrapfn_", make_descriptor(t_CharFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CharFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CharFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CharFilter::initializeClass, 1)))
            return NULL;
          return t_CharFilter::wrap_Object(CharFilter(((t_CharFilter *) arg)->object.this$));
        }
        static PyObject *t_CharFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CharFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CharFilter_init_(t_CharFilter *self, PyObject *args, PyObject *kwds)
        {
          ::java::io::Reader a0((jobject) NULL);
          CharFilter object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
          {
            INT_CALL(object = CharFilter(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CharFilter_close(t_CharFilter *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(CharFilter), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_CharFilter_correctOffset(t_CharFilter *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.correctOffset(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "correctOffset", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/TokenFilterFactory.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/ClassLoader.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *TokenFilterFactory::class$ = NULL;
          jmethodID *TokenFilterFactory::mids$ = NULL;
          bool TokenFilterFactory::live$ = false;

          jclass TokenFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/TokenFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_availableTokenFilters_03e99967] = env->getStaticMethodID(cls, "availableTokenFilters", "()Ljava/util/Set;");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_forName_489c139a] = env->getStaticMethodID(cls, "forName", "(Ljava/lang/String;Ljava/util/Map;)Lorg/apache/lucene/analysis/util/TokenFilterFactory;");
              mids$[mid_lookupClass_7d663d97] = env->getStaticMethodID(cls, "lookupClass", "(Ljava/lang/String;)Ljava/lang/Class;");
              mids$[mid_reloadTokenFilters_9110048d] = env->getStaticMethodID(cls, "reloadTokenFilters", "(Ljava/lang/ClassLoader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::util::Set TokenFilterFactory::availableTokenFilters()
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_availableTokenFilters_03e99967]));
          }

          ::org::apache::lucene::analysis::TokenStream TokenFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          TokenFilterFactory TokenFilterFactory::forName(const ::java::lang::String & a0, const ::java::util::Map & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return TokenFilterFactory(env->callStaticObjectMethod(cls, mids$[mid_forName_489c139a], a0.this$, a1.this$));
          }

          ::java::lang::Class TokenFilterFactory::lookupClass(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::Class(env->callStaticObjectMethod(cls, mids$[mid_lookupClass_7d663d97], a0.this$));
          }

          void TokenFilterFactory::reloadTokenFilters(const ::java::lang::ClassLoader & a0)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_reloadTokenFilters_9110048d], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_TokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenFilterFactory_availableTokenFilters(PyTypeObject *type);
          static PyObject *t_TokenFilterFactory_create(t_TokenFilterFactory *self, PyObject *arg);
          static PyObject *t_TokenFilterFactory_forName(PyTypeObject *type, PyObject *args);
          static PyObject *t_TokenFilterFactory_lookupClass(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenFilterFactory_reloadTokenFilters(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_TokenFilterFactory__methods_[] = {
            DECLARE_METHOD(t_TokenFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenFilterFactory, availableTokenFilters, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_TokenFilterFactory, create, METH_O),
            DECLARE_METHOD(t_TokenFilterFactory, forName, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_TokenFilterFactory, lookupClass, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenFilterFactory, reloadTokenFilters, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TokenFilterFactory, t_TokenFilterFactory, ::org::apache::lucene::analysis::util::AbstractAnalysisFactory, TokenFilterFactory, abstract_init, 0, 0, 0, 0, 0);

          void t_TokenFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(TokenFilterFactory), module, "TokenFilterFactory", 0);
          }

          void t_TokenFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TokenFilterFactory).tp_dict, "class_", make_descriptor(TokenFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TokenFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_TokenFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TokenFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TokenFilterFactory::initializeClass, 1)))
              return NULL;
            return t_TokenFilterFactory::wrap_Object(TokenFilterFactory(((t_TokenFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_TokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TokenFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TokenFilterFactory_availableTokenFilters(PyTypeObject *type)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::util::TokenFilterFactory::availableTokenFilters());
            return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
          }

          static PyObject *t_TokenFilterFactory_create(t_TokenFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "create", arg);
            return NULL;
          }

          static PyObject *t_TokenFilterFactory_forName(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::util::Map a1((jobject) NULL);
            PyTypeObject **p1;
            TokenFilterFactory result((jobject) NULL);

            if (!parseArgs(args, "sK", ::java::util::Map::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::TokenFilterFactory::forName(a0, a1));
              return t_TokenFilterFactory::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "forName", args);
            return NULL;
          }

          static PyObject *t_TokenFilterFactory_lookupClass(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::Class result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::TokenFilterFactory::lookupClass(a0));
              return ::java::lang::t_Class::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "lookupClass", arg);
            return NULL;
          }

          static PyObject *t_TokenFilterFactory_reloadTokenFilters(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::ClassLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::lang::ClassLoader::initializeClass, &a0))
            {
              OBJ_CALL(::org::apache::lucene::analysis::util::TokenFilterFactory::reloadTokenFilters(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "reloadTokenFilters", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/CharacterUtils.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/util/Version.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/util/CharacterUtils$CharacterBuffer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *CharacterUtils::class$ = NULL;
          jmethodID *CharacterUtils::mids$ = NULL;
          bool CharacterUtils::live$ = false;

          jclass CharacterUtils::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/CharacterUtils");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_codePointAt_2fbf15bf] = env->getMethodID(cls, "codePointAt", "(Ljava/lang/CharSequence;I)I");
              mids$[mid_codePointAt_6f0bb349] = env->getMethodID(cls, "codePointAt", "([CII)I");
              mids$[mid_codePointCount_a8afc655] = env->getMethodID(cls, "codePointCount", "(Ljava/lang/CharSequence;)I");
              mids$[mid_fill_4a603207] = env->getMethodID(cls, "fill", "(Lorg/apache/lucene/analysis/util/CharacterUtils$CharacterBuffer;Ljava/io/Reader;)Z");
              mids$[mid_fill_907fec5b] = env->getMethodID(cls, "fill", "(Lorg/apache/lucene/analysis/util/CharacterUtils$CharacterBuffer;Ljava/io/Reader;I)Z");
              mids$[mid_getInstance_c0e3b02e] = env->getStaticMethodID(cls, "getInstance", "(Lorg/apache/lucene/util/Version;)Lorg/apache/lucene/analysis/util/CharacterUtils;");
              mids$[mid_getJava4Instance_2fcca481] = env->getStaticMethodID(cls, "getJava4Instance", "()Lorg/apache/lucene/analysis/util/CharacterUtils;");
              mids$[mid_newCharacterBuffer_531f8606] = env->getStaticMethodID(cls, "newCharacterBuffer", "(I)Lorg/apache/lucene/analysis/util/CharacterUtils$CharacterBuffer;");
              mids$[mid_offsetByCodePoints_f453ace9] = env->getMethodID(cls, "offsetByCodePoints", "([CIIII)I");
              mids$[mid_toChars_4c08f211] = env->getMethodID(cls, "toChars", "([III[CI)I");
              mids$[mid_toCodePoints_625a1e21] = env->getMethodID(cls, "toCodePoints", "([CII[II)I");
              mids$[mid_toLowerCase_6f0bb356] = env->getMethodID(cls, "toLowerCase", "([CII)V");
              mids$[mid_toUpperCase_6f0bb356] = env->getMethodID(cls, "toUpperCase", "([CII)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CharacterUtils::CharacterUtils() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint CharacterUtils::codePointAt(const ::java::lang::CharSequence & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_codePointAt_2fbf15bf], a0.this$, a1);
          }

          jint CharacterUtils::codePointAt(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return env->callIntMethod(this$, mids$[mid_codePointAt_6f0bb349], a0.this$, a1, a2);
          }

          jint CharacterUtils::codePointCount(const ::java::lang::CharSequence & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_codePointCount_a8afc655], a0.this$);
          }

          jboolean CharacterUtils::fill(const ::org::apache::lucene::analysis::util::CharacterUtils$CharacterBuffer & a0, const ::java::io::Reader & a1) const
          {
            return env->callBooleanMethod(this$, mids$[mid_fill_4a603207], a0.this$, a1.this$);
          }

          jboolean CharacterUtils::fill(const ::org::apache::lucene::analysis::util::CharacterUtils$CharacterBuffer & a0, const ::java::io::Reader & a1, jint a2) const
          {
            return env->callBooleanMethod(this$, mids$[mid_fill_907fec5b], a0.this$, a1.this$, a2);
          }

          CharacterUtils CharacterUtils::getInstance(const ::org::apache::lucene::util::Version & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return CharacterUtils(env->callStaticObjectMethod(cls, mids$[mid_getInstance_c0e3b02e], a0.this$));
          }

          CharacterUtils CharacterUtils::getJava4Instance()
          {
            jclass cls = env->getClass(initializeClass);
            return CharacterUtils(env->callStaticObjectMethod(cls, mids$[mid_getJava4Instance_2fcca481]));
          }

          ::org::apache::lucene::analysis::util::CharacterUtils$CharacterBuffer CharacterUtils::newCharacterBuffer(jint a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharacterUtils$CharacterBuffer(env->callStaticObjectMethod(cls, mids$[mid_newCharacterBuffer_531f8606], a0));
          }

          jint CharacterUtils::offsetByCodePoints(const JArray< jchar > & a0, jint a1, jint a2, jint a3, jint a4) const
          {
            return env->callIntMethod(this$, mids$[mid_offsetByCodePoints_f453ace9], a0.this$, a1, a2, a3, a4);
          }

          jint CharacterUtils::toChars(const JArray< jint > & a0, jint a1, jint a2, const JArray< jchar > & a3, jint a4) const
          {
            return env->callIntMethod(this$, mids$[mid_toChars_4c08f211], a0.this$, a1, a2, a3.this$, a4);
          }

          jint CharacterUtils::toCodePoints(const JArray< jchar > & a0, jint a1, jint a2, const JArray< jint > & a3, jint a4) const
          {
            return env->callIntMethod(this$, mids$[mid_toCodePoints_625a1e21], a0.this$, a1, a2, a3.this$, a4);
          }

          void CharacterUtils::toLowerCase(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            env->callVoidMethod(this$, mids$[mid_toLowerCase_6f0bb356], a0.this$, a1, a2);
          }

          void CharacterUtils::toUpperCase(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            env->callVoidMethod(this$, mids$[mid_toUpperCase_6f0bb356], a0.this$, a1, a2);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_CharacterUtils_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharacterUtils_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CharacterUtils_init_(t_CharacterUtils *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CharacterUtils_codePointAt(t_CharacterUtils *self, PyObject *args);
          static PyObject *t_CharacterUtils_codePointCount(t_CharacterUtils *self, PyObject *arg);
          static PyObject *t_CharacterUtils_fill(t_CharacterUtils *self, PyObject *args);
          static PyObject *t_CharacterUtils_getInstance(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharacterUtils_getJava4Instance(PyTypeObject *type);
          static PyObject *t_CharacterUtils_newCharacterBuffer(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharacterUtils_offsetByCodePoints(t_CharacterUtils *self, PyObject *args);
          static PyObject *t_CharacterUtils_toChars(t_CharacterUtils *self, PyObject *args);
          static PyObject *t_CharacterUtils_toCodePoints(t_CharacterUtils *self, PyObject *args);
          static PyObject *t_CharacterUtils_toLowerCase(t_CharacterUtils *self, PyObject *args);
          static PyObject *t_CharacterUtils_toUpperCase(t_CharacterUtils *self, PyObject *args);
          static PyObject *t_CharacterUtils_get__java4Instance(t_CharacterUtils *self, void *data);
          static PyGetSetDef t_CharacterUtils__fields_[] = {
            DECLARE_GET_FIELD(t_CharacterUtils, java4Instance),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CharacterUtils__methods_[] = {
            DECLARE_METHOD(t_CharacterUtils, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharacterUtils, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharacterUtils, codePointAt, METH_VARARGS),
            DECLARE_METHOD(t_CharacterUtils, codePointCount, METH_O),
            DECLARE_METHOD(t_CharacterUtils, fill, METH_VARARGS),
            DECLARE_METHOD(t_CharacterUtils, getInstance, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharacterUtils, getJava4Instance, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_CharacterUtils, newCharacterBuffer, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharacterUtils, offsetByCodePoints, METH_VARARGS),
            DECLARE_METHOD(t_CharacterUtils, toChars, METH_VARARGS),
            DECLARE_METHOD(t_CharacterUtils, toCodePoints, METH_VARARGS),
            DECLARE_METHOD(t_CharacterUtils, toLowerCase, METH_VARARGS),
            DECLARE_METHOD(t_CharacterUtils, toUpperCase, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CharacterUtils, t_CharacterUtils, ::java::lang::Object, CharacterUtils, t_CharacterUtils_init_, 0, 0, t_CharacterUtils__fields_, 0, 0);

          void t_CharacterUtils::install(PyObject *module)
          {
            installType(&PY_TYPE(CharacterUtils), module, "CharacterUtils", 0);
            PyDict_SetItemString(PY_TYPE(CharacterUtils).tp_dict, "CharacterBuffer", make_descriptor(&PY_TYPE(CharacterUtils$CharacterBuffer)));
          }

          void t_CharacterUtils::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CharacterUtils).tp_dict, "class_", make_descriptor(CharacterUtils::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CharacterUtils).tp_dict, "wrapfn_", make_descriptor(t_CharacterUtils::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CharacterUtils).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CharacterUtils_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharacterUtils::initializeClass, 1)))
              return NULL;
            return t_CharacterUtils::wrap_Object(CharacterUtils(((t_CharacterUtils *) arg)->object.this$));
          }
          static PyObject *t_CharacterUtils_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharacterUtils::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CharacterUtils_init_(t_CharacterUtils *self, PyObject *args, PyObject *kwds)
          {
            CharacterUtils object((jobject) NULL);

            INT_CALL(object = CharacterUtils());
            self->object = object;

            return 0;
          }

          static PyObject *t_CharacterUtils_codePointAt(t_CharacterUtils *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jint a1;
                jint result;

                if (!parseArgs(args, "OI", &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
                {
                  OBJ_CALL(result = self->object.codePointAt(a0, a1));
                  return PyInt_FromLong((long) result);
                }
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;
                jint result;

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.codePointAt(a0, a1, a2));
                  return PyInt_FromLong((long) result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "codePointAt", args);
            return NULL;
          }

          static PyObject *t_CharacterUtils_codePointCount(t_CharacterUtils *self, PyObject *arg)
          {
            ::java::lang::CharSequence a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
            {
              OBJ_CALL(result = self->object.codePointCount(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "codePointCount", arg);
            return NULL;
          }

          static PyObject *t_CharacterUtils_fill(t_CharacterUtils *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::util::CharacterUtils$CharacterBuffer a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::util::CharacterUtils$CharacterBuffer::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.fill(a0, a1));
                  Py_RETURN_BOOL(result);
                }
              }
              break;
             case 3:
              {
                ::org::apache::lucene::analysis::util::CharacterUtils$CharacterBuffer a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                jint a2;
                jboolean result;

                if (!parseArgs(args, "kkI", ::org::apache::lucene::analysis::util::CharacterUtils$CharacterBuffer::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.fill(a0, a1, a2));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "fill", args);
            return NULL;
          }

          static PyObject *t_CharacterUtils_getInstance(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            PyTypeObject **p0;
            CharacterUtils result((jobject) NULL);

            if (!parseArg(arg, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharacterUtils::getInstance(a0));
              return t_CharacterUtils::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getInstance", arg);
            return NULL;
          }

          static PyObject *t_CharacterUtils_getJava4Instance(PyTypeObject *type)
          {
            CharacterUtils result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharacterUtils::getJava4Instance());
            return t_CharacterUtils::wrap_Object(result);
          }

          static PyObject *t_CharacterUtils_newCharacterBuffer(PyTypeObject *type, PyObject *arg)
          {
            jint a0;
            ::org::apache::lucene::analysis::util::CharacterUtils$CharacterBuffer result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharacterUtils::newCharacterBuffer(a0));
              return ::org::apache::lucene::analysis::util::t_CharacterUtils$CharacterBuffer::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "newCharacterBuffer", arg);
            return NULL;
          }

          static PyObject *t_CharacterUtils_offsetByCodePoints(t_CharacterUtils *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint a2;
            jint a3;
            jint a4;
            jint result;

            if (!parseArgs(args, "[CIIII", &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.offsetByCodePoints(a0, a1, a2, a3, a4));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "offsetByCodePoints", args);
            return NULL;
          }

          static PyObject *t_CharacterUtils_toChars(t_CharacterUtils *self, PyObject *args)
          {
            JArray< jint > a0((jobject) NULL);
            jint a1;
            jint a2;
            JArray< jchar > a3((jobject) NULL);
            jint a4;
            jint result;

            if (!parseArgs(args, "[III[CI", &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.toChars(a0, a1, a2, a3, a4));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "toChars", args);
            return NULL;
          }

          static PyObject *t_CharacterUtils_toCodePoints(t_CharacterUtils *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint a2;
            JArray< jint > a3((jobject) NULL);
            jint a4;
            jint result;

            if (!parseArgs(args, "[CII[II", &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.toCodePoints(a0, a1, a2, a3, a4));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "toCodePoints", args);
            return NULL;
          }

          static PyObject *t_CharacterUtils_toLowerCase(t_CharacterUtils *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint a2;

            if (!parseArgs(args, "[CII", &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.toLowerCase(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "toLowerCase", args);
            return NULL;
          }

          static PyObject *t_CharacterUtils_toUpperCase(t_CharacterUtils *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint a2;

            if (!parseArgs(args, "[CII", &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.toUpperCase(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "toUpperCase", args);
            return NULL;
          }

          static PyObject *t_CharacterUtils_get__java4Instance(t_CharacterUtils *self, void *data)
          {
            CharacterUtils value((jobject) NULL);
            OBJ_CALL(value = self->object.getJava4Instance());
            return t_CharacterUtils::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/util/Map.h"
#include "java/lang/Cloneable.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *QueryNodeImpl::class$ = NULL;
              jmethodID *QueryNodeImpl::mids$ = NULL;
              bool QueryNodeImpl::live$ = false;
              ::java::lang::String *QueryNodeImpl::PLAINTEXT_FIELD_NAME = NULL;

              jclass QueryNodeImpl::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_add_cc04aeef] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)V");
                  mids$[mid_add_1fde8fc3] = env->getMethodID(cls, "add", "(Ljava/util/List;)V");
                  mids$[mid_clone_b387c5e6] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_containsTag_5fdc3f44] = env->getMethodID(cls, "containsTag", "(Ljava/lang/String;)Z");
                  mids$[mid_getChildren_87851566] = env->getMethodID(cls, "getChildren", "()Ljava/util/List;");
                  mids$[mid_getParent_b387c5e6] = env->getMethodID(cls, "getParent", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getTag_2a1c4d09] = env->getMethodID(cls, "getTag", "(Ljava/lang/String;)Ljava/lang/Object;");
                  mids$[mid_getTagMap_db60befd] = env->getMethodID(cls, "getTagMap", "()Ljava/util/Map;");
                  mids$[mid_isLeaf_54c6a16a] = env->getMethodID(cls, "isLeaf", "()Z");
                  mids$[mid_removeFromParent_54c6a166] = env->getMethodID(cls, "removeFromParent", "()V");
                  mids$[mid_set_1fde8fc3] = env->getMethodID(cls, "set", "(Ljava/util/List;)V");
                  mids$[mid_setTag_2da4da24] = env->getMethodID(cls, "setTag", "(Ljava/lang/String;Ljava/lang/Object;)V");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                  mids$[mid_unsetTag_5fdc3f48] = env->getMethodID(cls, "unsetTag", "(Ljava/lang/String;)V");
                  mids$[mid_allocate_54c6a166] = env->getMethodID(cls, "allocate", "()V");
                  mids$[mid_setLeaf_bb0c767f] = env->getMethodID(cls, "setLeaf", "(Z)V");
                  mids$[mid_isRoot_54c6a16a] = env->getMethodID(cls, "isRoot", "()Z");
                  mids$[mid_isDefaultField_a8afc646] = env->getMethodID(cls, "isDefaultField", "(Ljava/lang/CharSequence;)Z");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  cls = (jclass) class$->this$;

                  PLAINTEXT_FIELD_NAME = new ::java::lang::String(env->getStaticObjectField(cls, "PLAINTEXT_FIELD_NAME", "Ljava/lang/String;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              QueryNodeImpl::QueryNodeImpl() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              void QueryNodeImpl::add(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_add_cc04aeef], a0.this$);
              }

              void QueryNodeImpl::add(const ::java::util::List & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_add_1fde8fc3], a0.this$);
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode QueryNodeImpl::clone() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_clone_b387c5e6]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode QueryNodeImpl::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              jboolean QueryNodeImpl::containsTag(const ::java::lang::String & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_containsTag_5fdc3f44], a0.this$);
              }

              ::java::util::List QueryNodeImpl::getChildren() const
              {
                return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getChildren_87851566]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode QueryNodeImpl::getParent() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_getParent_b387c5e6]));
              }

              ::java::lang::Object QueryNodeImpl::getTag(const ::java::lang::String & a0) const
              {
                return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getTag_2a1c4d09], a0.this$));
              }

              ::java::util::Map QueryNodeImpl::getTagMap() const
              {
                return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getTagMap_db60befd]));
              }

              jboolean QueryNodeImpl::isLeaf() const
              {
                return env->callBooleanMethod(this$, mids$[mid_isLeaf_54c6a16a]);
              }

              void QueryNodeImpl::removeFromParent() const
              {
                env->callVoidMethod(this$, mids$[mid_removeFromParent_54c6a166]);
              }

              void QueryNodeImpl::set(const ::java::util::List & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_set_1fde8fc3], a0.this$);
              }

              void QueryNodeImpl::setTag(const ::java::lang::String & a0, const ::java::lang::Object & a1) const
              {
                env->callVoidMethod(this$, mids$[mid_setTag_2da4da24], a0.this$, a1.this$);
              }

              ::java::lang::String QueryNodeImpl::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }

              void QueryNodeImpl::unsetTag(const ::java::lang::String & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_unsetTag_5fdc3f48], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_QueryNodeImpl_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryNodeImpl_instance_(PyTypeObject *type, PyObject *arg);
              static int t_QueryNodeImpl_init_(t_QueryNodeImpl *self, PyObject *args, PyObject *kwds);
              static PyObject *t_QueryNodeImpl_add(t_QueryNodeImpl *self, PyObject *args);
              static PyObject *t_QueryNodeImpl_clone(t_QueryNodeImpl *self);
              static PyObject *t_QueryNodeImpl_cloneTree(t_QueryNodeImpl *self);
              static PyObject *t_QueryNodeImpl_containsTag(t_QueryNodeImpl *self, PyObject *arg);
              static PyObject *t_QueryNodeImpl_getChildren(t_QueryNodeImpl *self);
              static PyObject *t_QueryNodeImpl_getParent(t_QueryNodeImpl *self);
              static PyObject *t_QueryNodeImpl_getTag(t_QueryNodeImpl *self, PyObject *arg);
              static PyObject *t_QueryNodeImpl_getTagMap(t_QueryNodeImpl *self);
              static PyObject *t_QueryNodeImpl_isLeaf(t_QueryNodeImpl *self);
              static PyObject *t_QueryNodeImpl_removeFromParent(t_QueryNodeImpl *self);
              static PyObject *t_QueryNodeImpl_set(t_QueryNodeImpl *self, PyObject *arg);
              static PyObject *t_QueryNodeImpl_setTag(t_QueryNodeImpl *self, PyObject *args);
              static PyObject *t_QueryNodeImpl_toString(t_QueryNodeImpl *self, PyObject *args);
              static PyObject *t_QueryNodeImpl_unsetTag(t_QueryNodeImpl *self, PyObject *arg);
              static PyObject *t_QueryNodeImpl_get__children(t_QueryNodeImpl *self, void *data);
              static PyObject *t_QueryNodeImpl_get__leaf(t_QueryNodeImpl *self, void *data);
              static PyObject *t_QueryNodeImpl_get__parent(t_QueryNodeImpl *self, void *data);
              static PyObject *t_QueryNodeImpl_get__tagMap(t_QueryNodeImpl *self, void *data);
              static PyGetSetDef t_QueryNodeImpl__fields_[] = {
                DECLARE_GET_FIELD(t_QueryNodeImpl, children),
                DECLARE_GET_FIELD(t_QueryNodeImpl, leaf),
                DECLARE_GET_FIELD(t_QueryNodeImpl, parent),
                DECLARE_GET_FIELD(t_QueryNodeImpl, tagMap),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_QueryNodeImpl__methods_[] = {
                DECLARE_METHOD(t_QueryNodeImpl, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNodeImpl, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNodeImpl, add, METH_VARARGS),
                DECLARE_METHOD(t_QueryNodeImpl, clone, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeImpl, cloneTree, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeImpl, containsTag, METH_O),
                DECLARE_METHOD(t_QueryNodeImpl, getChildren, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeImpl, getParent, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeImpl, getTag, METH_O),
                DECLARE_METHOD(t_QueryNodeImpl, getTagMap, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeImpl, isLeaf, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeImpl, removeFromParent, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeImpl, set, METH_O),
                DECLARE_METHOD(t_QueryNodeImpl, setTag, METH_VARARGS),
                DECLARE_METHOD(t_QueryNodeImpl, toString, METH_VARARGS),
                DECLARE_METHOD(t_QueryNodeImpl, unsetTag, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(QueryNodeImpl, t_QueryNodeImpl, ::java::lang::Object, QueryNodeImpl, t_QueryNodeImpl_init_, 0, 0, t_QueryNodeImpl__fields_, 0, 0);

              void t_QueryNodeImpl::install(PyObject *module)
              {
                installType(&PY_TYPE(QueryNodeImpl), module, "QueryNodeImpl", 0);
              }

              void t_QueryNodeImpl::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(QueryNodeImpl).tp_dict, "class_", make_descriptor(QueryNodeImpl::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(QueryNodeImpl).tp_dict, "wrapfn_", make_descriptor(t_QueryNodeImpl::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(QueryNodeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
                env->getClass(QueryNodeImpl::initializeClass);
                PyDict_SetItemString(PY_TYPE(QueryNodeImpl).tp_dict, "PLAINTEXT_FIELD_NAME", make_descriptor(j2p(*QueryNodeImpl::PLAINTEXT_FIELD_NAME)));
              }

              static PyObject *t_QueryNodeImpl_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, QueryNodeImpl::initializeClass, 1)))
                  return NULL;
                return t_QueryNodeImpl::wrap_Object(QueryNodeImpl(((t_QueryNodeImpl *) arg)->object.this$));
              }
              static PyObject *t_QueryNodeImpl_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, QueryNodeImpl::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_QueryNodeImpl_init_(t_QueryNodeImpl *self, PyObject *args, PyObject *kwds)
              {
                QueryNodeImpl object((jobject) NULL);

                INT_CALL(object = QueryNodeImpl());
                self->object = object;

                return 0;
              }

              static PyObject *t_QueryNodeImpl_add(t_QueryNodeImpl *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                    {
                      OBJ_CALL(self->object.add(a0));
                      Py_RETURN_NONE;
                    }
                  }
                  {
                    ::java::util::List a0((jobject) NULL);
                    PyTypeObject **p0;

                    if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
                    {
                      OBJ_CALL(self->object.add(a0));
                      Py_RETURN_NONE;
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "add", args);
                return NULL;
              }

              static PyObject *t_QueryNodeImpl_clone(t_QueryNodeImpl *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.clone());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
              }

              static PyObject *t_QueryNodeImpl_cloneTree(t_QueryNodeImpl *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.cloneTree());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
              }

              static PyObject *t_QueryNodeImpl_containsTag(t_QueryNodeImpl *self, PyObject *arg)
              {
                ::java::lang::String a0((jobject) NULL);
                jboolean result;

                if (!parseArg(arg, "s", &a0))
                {
                  OBJ_CALL(result = self->object.containsTag(a0));
                  Py_RETURN_BOOL(result);
                }

                PyErr_SetArgsError((PyObject *) self, "containsTag", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeImpl_getChildren(t_QueryNodeImpl *self)
              {
                ::java::util::List result((jobject) NULL);
                OBJ_CALL(result = self->object.getChildren());
                return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::queryparser::flexible::core::nodes::PY_TYPE(QueryNode));
              }

              static PyObject *t_QueryNodeImpl_getParent(t_QueryNodeImpl *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.getParent());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
              }

              static PyObject *t_QueryNodeImpl_getTag(t_QueryNodeImpl *self, PyObject *arg)
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::Object result((jobject) NULL);

                if (!parseArg(arg, "s", &a0))
                {
                  OBJ_CALL(result = self->object.getTag(a0));
                  return ::java::lang::t_Object::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "getTag", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeImpl_getTagMap(t_QueryNodeImpl *self)
              {
                ::java::util::Map result((jobject) NULL);
                OBJ_CALL(result = self->object.getTagMap());
                return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(Object));
              }

              static PyObject *t_QueryNodeImpl_isLeaf(t_QueryNodeImpl *self)
              {
                jboolean result;
                OBJ_CALL(result = self->object.isLeaf());
                Py_RETURN_BOOL(result);
              }

              static PyObject *t_QueryNodeImpl_removeFromParent(t_QueryNodeImpl *self)
              {
                OBJ_CALL(self->object.removeFromParent());
                Py_RETURN_NONE;
              }

              static PyObject *t_QueryNodeImpl_set(t_QueryNodeImpl *self, PyObject *arg)
              {
                ::java::util::List a0((jobject) NULL);
                PyTypeObject **p0;

                if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
                {
                  OBJ_CALL(self->object.set(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "set", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeImpl_setTag(t_QueryNodeImpl *self, PyObject *args)
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::Object a1((jobject) NULL);

                if (!parseArgs(args, "so", &a0, &a1))
                {
                  OBJ_CALL(self->object.setTag(a0, a1));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setTag", args);
                return NULL;
              }

              static PyObject *t_QueryNodeImpl_toString(t_QueryNodeImpl *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(QueryNodeImpl), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_QueryNodeImpl_unsetTag(t_QueryNodeImpl *self, PyObject *arg)
              {
                ::java::lang::String a0((jobject) NULL);

                if (!parseArg(arg, "s", &a0))
                {
                  OBJ_CALL(self->object.unsetTag(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "unsetTag", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeImpl_get__children(t_QueryNodeImpl *self, void *data)
              {
                ::java::util::List value((jobject) NULL);
                OBJ_CALL(value = self->object.getChildren());
                return ::java::util::t_List::wrap_Object(value);
              }

              static PyObject *t_QueryNodeImpl_get__leaf(t_QueryNodeImpl *self, void *data)
              {
                jboolean value;
                OBJ_CALL(value = self->object.isLeaf());
                Py_RETURN_BOOL(value);
              }

              static PyObject *t_QueryNodeImpl_get__parent(t_QueryNodeImpl *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode value((jobject) NULL);
                OBJ_CALL(value = self->object.getParent());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(value);
              }

              static PyObject *t_QueryNodeImpl_get__tagMap(t_QueryNodeImpl *self, void *data)
              {
                ::java::util::Map value((jobject) NULL);
                OBJ_CALL(value = self->object.getTagMap());
                return ::java::util::t_Map::wrap_Object(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/std34/UAX29URLEmailTokenizerImpl34.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizerInterface.h"
#include "java/io/Reader.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          namespace std34 {

            ::java::lang::Class *UAX29URLEmailTokenizerImpl34::class$ = NULL;
            jmethodID *UAX29URLEmailTokenizerImpl34::mids$ = NULL;
            bool UAX29URLEmailTokenizerImpl34::live$ = false;
            jint UAX29URLEmailTokenizerImpl34::EMAIL_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl34::HANGUL_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl34::HIRAGANA_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl34::IDEOGRAPHIC_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl34::KATAKANA_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl34::NUMERIC_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl34::SOUTH_EAST_ASIAN_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl34::URL_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl34::WORD_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl34::YYEOF = (jint) 0;
            jint UAX29URLEmailTokenizerImpl34::YYINITIAL = (jint) 0;

            jclass UAX29URLEmailTokenizerImpl34::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/std34/UAX29URLEmailTokenizerImpl34");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                mids$[mid_getNextToken_54c6a179] = env->getMethodID(cls, "getNextToken", "()I");
                mids$[mid_getText_64c709f2] = env->getMethodID(cls, "getText", "(Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;)V");
                mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
                mids$[mid_yychar_54c6a179] = env->getMethodID(cls, "yychar", "()I");
                mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
                mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
                mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
                mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
                mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
                mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
                mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                EMAIL_TYPE = env->getStaticIntField(cls, "EMAIL_TYPE");
                HANGUL_TYPE = env->getStaticIntField(cls, "HANGUL_TYPE");
                HIRAGANA_TYPE = env->getStaticIntField(cls, "HIRAGANA_TYPE");
                IDEOGRAPHIC_TYPE = env->getStaticIntField(cls, "IDEOGRAPHIC_TYPE");
                KATAKANA_TYPE = env->getStaticIntField(cls, "KATAKANA_TYPE");
                NUMERIC_TYPE = env->getStaticIntField(cls, "NUMERIC_TYPE");
                SOUTH_EAST_ASIAN_TYPE = env->getStaticIntField(cls, "SOUTH_EAST_ASIAN_TYPE");
                URL_TYPE = env->getStaticIntField(cls, "URL_TYPE");
                WORD_TYPE = env->getStaticIntField(cls, "WORD_TYPE");
                YYEOF = env->getStaticIntField(cls, "YYEOF");
                YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            UAX29URLEmailTokenizerImpl34::UAX29URLEmailTokenizerImpl34(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

            jint UAX29URLEmailTokenizerImpl34::getNextToken() const
            {
              return env->callIntMethod(this$, mids$[mid_getNextToken_54c6a179]);
            }

            void UAX29URLEmailTokenizerImpl34::getText(const ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_getText_64c709f2], a0.this$);
            }

            void UAX29URLEmailTokenizerImpl34::yybegin(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
            }

            jint UAX29URLEmailTokenizerImpl34::yychar() const
            {
              return env->callIntMethod(this$, mids$[mid_yychar_54c6a179]);
            }

            jchar UAX29URLEmailTokenizerImpl34::yycharat(jint a0) const
            {
              return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
            }

            void UAX29URLEmailTokenizerImpl34::yyclose() const
            {
              env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
            }

            jint UAX29URLEmailTokenizerImpl34::yylength() const
            {
              return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
            }

            void UAX29URLEmailTokenizerImpl34::yypushback(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
            }

            void UAX29URLEmailTokenizerImpl34::yyreset(const ::java::io::Reader & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
            }

            jint UAX29URLEmailTokenizerImpl34::yystate() const
            {
              return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
            }

            ::java::lang::String UAX29URLEmailTokenizerImpl34::yytext() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          namespace std34 {
            static PyObject *t_UAX29URLEmailTokenizerImpl34_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl34_instance_(PyTypeObject *type, PyObject *arg);
            static int t_UAX29URLEmailTokenizerImpl34_init_(t_UAX29URLEmailTokenizerImpl34 *self, PyObject *args, PyObject *kwds);
            static PyObject *t_UAX29URLEmailTokenizerImpl34_getNextToken(t_UAX29URLEmailTokenizerImpl34 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl34_getText(t_UAX29URLEmailTokenizerImpl34 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl34_yybegin(t_UAX29URLEmailTokenizerImpl34 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl34_yychar(t_UAX29URLEmailTokenizerImpl34 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl34_yycharat(t_UAX29URLEmailTokenizerImpl34 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl34_yyclose(t_UAX29URLEmailTokenizerImpl34 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl34_yylength(t_UAX29URLEmailTokenizerImpl34 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl34_yypushback(t_UAX29URLEmailTokenizerImpl34 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl34_yyreset(t_UAX29URLEmailTokenizerImpl34 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl34_yystate(t_UAX29URLEmailTokenizerImpl34 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl34_yytext(t_UAX29URLEmailTokenizerImpl34 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl34_get__nextToken(t_UAX29URLEmailTokenizerImpl34 *self, void *data);
            static PyGetSetDef t_UAX29URLEmailTokenizerImpl34__fields_[] = {
              DECLARE_GET_FIELD(t_UAX29URLEmailTokenizerImpl34, nextToken),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_UAX29URLEmailTokenizerImpl34__methods_[] = {
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl34, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl34, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl34, getNextToken, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl34, getText, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl34, yybegin, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl34, yychar, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl34, yycharat, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl34, yyclose, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl34, yylength, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl34, yypushback, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl34, yyreset, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl34, yystate, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl34, yytext, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(UAX29URLEmailTokenizerImpl34, t_UAX29URLEmailTokenizerImpl34, ::java::lang::Object, UAX29URLEmailTokenizerImpl34, t_UAX29URLEmailTokenizerImpl34_init_, 0, 0, t_UAX29URLEmailTokenizerImpl34__fields_, 0, 0);

            void t_UAX29URLEmailTokenizerImpl34::install(PyObject *module)
            {
              installType(&PY_TYPE(UAX29URLEmailTokenizerImpl34), module, "UAX29URLEmailTokenizerImpl34", 0);
            }

            void t_UAX29URLEmailTokenizerImpl34::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl34).tp_dict, "class_", make_descriptor(UAX29URLEmailTokenizerImpl34::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl34).tp_dict, "wrapfn_", make_descriptor(t_UAX29URLEmailTokenizerImpl34::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl34).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(UAX29URLEmailTokenizerImpl34::initializeClass);
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl34).tp_dict, "EMAIL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl34::EMAIL_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl34).tp_dict, "HANGUL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl34::HANGUL_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl34).tp_dict, "HIRAGANA_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl34::HIRAGANA_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl34).tp_dict, "IDEOGRAPHIC_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl34::IDEOGRAPHIC_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl34).tp_dict, "KATAKANA_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl34::KATAKANA_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl34).tp_dict, "NUMERIC_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl34::NUMERIC_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl34).tp_dict, "SOUTH_EAST_ASIAN_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl34::SOUTH_EAST_ASIAN_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl34).tp_dict, "URL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl34::URL_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl34).tp_dict, "WORD_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl34::WORD_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl34).tp_dict, "YYEOF", make_descriptor(UAX29URLEmailTokenizerImpl34::YYEOF));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl34).tp_dict, "YYINITIAL", make_descriptor(UAX29URLEmailTokenizerImpl34::YYINITIAL));
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl34_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, UAX29URLEmailTokenizerImpl34::initializeClass, 1)))
                return NULL;
              return t_UAX29URLEmailTokenizerImpl34::wrap_Object(UAX29URLEmailTokenizerImpl34(((t_UAX29URLEmailTokenizerImpl34 *) arg)->object.this$));
            }
            static PyObject *t_UAX29URLEmailTokenizerImpl34_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, UAX29URLEmailTokenizerImpl34::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_UAX29URLEmailTokenizerImpl34_init_(t_UAX29URLEmailTokenizerImpl34 *self, PyObject *args, PyObject *kwds)
            {
              ::java::io::Reader a0((jobject) NULL);
              UAX29URLEmailTokenizerImpl34 object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
              {
                INT_CALL(object = UAX29URLEmailTokenizerImpl34(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl34_getNextToken(t_UAX29URLEmailTokenizerImpl34 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getNextToken());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl34_getText(t_UAX29URLEmailTokenizerImpl34 *self, PyObject *arg)
            {
              ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute::initializeClass, &a0))
              {
                OBJ_CALL(self->object.getText(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "getText", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl34_yybegin(t_UAX29URLEmailTokenizerImpl34 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.yybegin(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl34_yychar(t_UAX29URLEmailTokenizerImpl34 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yychar());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl34_yycharat(t_UAX29URLEmailTokenizerImpl34 *self, PyObject *arg)
            {
              jint a0;
              jchar result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.yycharat(a0));
                return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
              }

              PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl34_yyclose(t_UAX29URLEmailTokenizerImpl34 *self)
            {
              OBJ_CALL(self->object.yyclose());
              Py_RETURN_NONE;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl34_yylength(t_UAX29URLEmailTokenizerImpl34 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yylength());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl34_yypushback(t_UAX29URLEmailTokenizerImpl34 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.yypushback(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl34_yyreset(t_UAX29URLEmailTokenizerImpl34 *self, PyObject *arg)
            {
              ::java::io::Reader a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
              {
                OBJ_CALL(self->object.yyreset(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl34_yystate(t_UAX29URLEmailTokenizerImpl34 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yystate());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl34_yytext(t_UAX29URLEmailTokenizerImpl34 *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.yytext());
              return j2p(result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl34_get__nextToken(t_UAX29URLEmailTokenizerImpl34 *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getNextToken());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *JoinDocFreqValueSource::class$ = NULL;
            jmethodID *JoinDocFreqValueSource::mids$ = NULL;
            bool JoinDocFreqValueSource::live$ = false;
            ::java::lang::String *JoinDocFreqValueSource::NAME = NULL;

            jclass JoinDocFreqValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_4a264742] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            JoinDocFreqValueSource::JoinDocFreqValueSource(const ::java::lang::String & a0, const ::java::lang::String & a1) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_4a264742, a0.this$, a1.this$)) {}

            ::java::lang::String JoinDocFreqValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean JoinDocFreqValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues JoinDocFreqValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint JoinDocFreqValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_JoinDocFreqValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_JoinDocFreqValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_JoinDocFreqValueSource_init_(t_JoinDocFreqValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_JoinDocFreqValueSource_description(t_JoinDocFreqValueSource *self, PyObject *args);
            static PyObject *t_JoinDocFreqValueSource_equals(t_JoinDocFreqValueSource *self, PyObject *args);
            static PyObject *t_JoinDocFreqValueSource_getValues(t_JoinDocFreqValueSource *self, PyObject *args);
            static PyObject *t_JoinDocFreqValueSource_hashCode(t_JoinDocFreqValueSource *self, PyObject *args);

            static PyMethodDef t_JoinDocFreqValueSource__methods_[] = {
              DECLARE_METHOD(t_JoinDocFreqValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_JoinDocFreqValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_JoinDocFreqValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_JoinDocFreqValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_JoinDocFreqValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_JoinDocFreqValueSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(JoinDocFreqValueSource, t_JoinDocFreqValueSource, ::org::apache::lucene::queries::function::valuesource::FieldCacheSource, JoinDocFreqValueSource, t_JoinDocFreqValueSource_init_, 0, 0, 0, 0, 0);

            void t_JoinDocFreqValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(JoinDocFreqValueSource), module, "JoinDocFreqValueSource", 0);
            }

            void t_JoinDocFreqValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(JoinDocFreqValueSource).tp_dict, "class_", make_descriptor(JoinDocFreqValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(JoinDocFreqValueSource).tp_dict, "wrapfn_", make_descriptor(t_JoinDocFreqValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(JoinDocFreqValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(JoinDocFreqValueSource::initializeClass);
              PyDict_SetItemString(PY_TYPE(JoinDocFreqValueSource).tp_dict, "NAME", make_descriptor(j2p(*JoinDocFreqValueSource::NAME)));
            }

            static PyObject *t_JoinDocFreqValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, JoinDocFreqValueSource::initializeClass, 1)))
                return NULL;
              return t_JoinDocFreqValueSource::wrap_Object(JoinDocFreqValueSource(((t_JoinDocFreqValueSource *) arg)->object.this$));
            }
            static PyObject *t_JoinDocFreqValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, JoinDocFreqValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_JoinDocFreqValueSource_init_(t_JoinDocFreqValueSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              JoinDocFreqValueSource object((jobject) NULL);

              if (!parseArgs(args, "ss", &a0, &a1))
              {
                INT_CALL(object = JoinDocFreqValueSource(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_JoinDocFreqValueSource_description(t_JoinDocFreqValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(JoinDocFreqValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_JoinDocFreqValueSource_equals(t_JoinDocFreqValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(JoinDocFreqValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_JoinDocFreqValueSource_getValues(t_JoinDocFreqValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(JoinDocFreqValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_JoinDocFreqValueSource_hashCode(t_JoinDocFreqValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(JoinDocFreqValueSource), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$shift_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$shift_return::class$ = NULL;
          jmethodID *JavascriptParser$shift_return::mids$ = NULL;
          bool JavascriptParser$shift_return::live$ = false;

          jclass JavascriptParser$shift_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$shift_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$shift_return::JavascriptParser$shift_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$shift_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$shift_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$shift_return_init_(t_JavascriptParser$shift_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$shift_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$shift_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$shift_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$shift_return, t_JavascriptParser$shift_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$shift_return, t_JavascriptParser$shift_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$shift_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$shift_return), module, "JavascriptParser$shift_return", 0);
          }

          void t_JavascriptParser$shift_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$shift_return).tp_dict, "class_", make_descriptor(JavascriptParser$shift_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$shift_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$shift_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$shift_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$shift_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$shift_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$shift_return::wrap_Object(JavascriptParser$shift_return(((t_JavascriptParser$shift_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$shift_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$shift_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$shift_return_init_(t_JavascriptParser$shift_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$shift_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$shift_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cz/CzechAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cz {

          ::java::lang::Class *CzechAnalyzer::class$ = NULL;
          jmethodID *CzechAnalyzer::mids$ = NULL;
          bool CzechAnalyzer::live$ = false;
          ::java::lang::String *CzechAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass CzechAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cz/CzechAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CzechAnalyzer::CzechAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          CzechAnalyzer::CzechAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          CzechAnalyzer::CzechAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet CzechAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cz {
          static PyObject *t_CzechAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CzechAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CzechAnalyzer_init_(t_CzechAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CzechAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_CzechAnalyzer_get__defaultStopSet(t_CzechAnalyzer *self, void *data);
          static PyGetSetDef t_CzechAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_CzechAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CzechAnalyzer__methods_[] = {
            DECLARE_METHOD(t_CzechAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CzechAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CzechAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CzechAnalyzer, t_CzechAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, CzechAnalyzer, t_CzechAnalyzer_init_, 0, 0, t_CzechAnalyzer__fields_, 0, 0);

          void t_CzechAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(CzechAnalyzer), module, "CzechAnalyzer", 0);
          }

          void t_CzechAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CzechAnalyzer).tp_dict, "class_", make_descriptor(CzechAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CzechAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_CzechAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CzechAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CzechAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(CzechAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*CzechAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_CzechAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CzechAnalyzer::initializeClass, 1)))
              return NULL;
            return t_CzechAnalyzer::wrap_Object(CzechAnalyzer(((t_CzechAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_CzechAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CzechAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CzechAnalyzer_init_(t_CzechAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                CzechAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = CzechAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                CzechAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = CzechAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                CzechAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = CzechAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CzechAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::cz::CzechAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_CzechAnalyzer_get__defaultStopSet(t_CzechAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/PagedBytes$Reader.h"
#include "org/apache/lucene/util/Accountable.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *PagedBytes$Reader::class$ = NULL;
        jmethodID *PagedBytes$Reader::mids$ = NULL;
        bool PagedBytes$Reader::live$ = false;

        jclass PagedBytes$Reader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/PagedBytes$Reader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_fill_9e70a0dd] = env->getMethodID(cls, "fill", "(Lorg/apache/lucene/util/BytesRef;J)V");
            mids$[mid_fillSlice_8caa1345] = env->getMethodID(cls, "fillSlice", "(Lorg/apache/lucene/util/BytesRef;JI)V");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void PagedBytes$Reader::fill(const ::org::apache::lucene::util::BytesRef & a0, jlong a1) const
        {
          env->callVoidMethod(this$, mids$[mid_fill_9e70a0dd], a0.this$, a1);
        }

        void PagedBytes$Reader::fillSlice(const ::org::apache::lucene::util::BytesRef & a0, jlong a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_fillSlice_8caa1345], a0.this$, a1, a2);
        }

        jlong PagedBytes$Reader::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_PagedBytes$Reader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PagedBytes$Reader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PagedBytes$Reader_fill(t_PagedBytes$Reader *self, PyObject *args);
        static PyObject *t_PagedBytes$Reader_fillSlice(t_PagedBytes$Reader *self, PyObject *args);
        static PyObject *t_PagedBytes$Reader_ramBytesUsed(t_PagedBytes$Reader *self);

        static PyMethodDef t_PagedBytes$Reader__methods_[] = {
          DECLARE_METHOD(t_PagedBytes$Reader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PagedBytes$Reader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PagedBytes$Reader, fill, METH_VARARGS),
          DECLARE_METHOD(t_PagedBytes$Reader, fillSlice, METH_VARARGS),
          DECLARE_METHOD(t_PagedBytes$Reader, ramBytesUsed, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PagedBytes$Reader, t_PagedBytes$Reader, ::java::lang::Object, PagedBytes$Reader, abstract_init, 0, 0, 0, 0, 0);

        void t_PagedBytes$Reader::install(PyObject *module)
        {
          installType(&PY_TYPE(PagedBytes$Reader), module, "PagedBytes$Reader", 0);
        }

        void t_PagedBytes$Reader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PagedBytes$Reader).tp_dict, "class_", make_descriptor(PagedBytes$Reader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PagedBytes$Reader).tp_dict, "wrapfn_", make_descriptor(t_PagedBytes$Reader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PagedBytes$Reader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PagedBytes$Reader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PagedBytes$Reader::initializeClass, 1)))
            return NULL;
          return t_PagedBytes$Reader::wrap_Object(PagedBytes$Reader(((t_PagedBytes$Reader *) arg)->object.this$));
        }
        static PyObject *t_PagedBytes$Reader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PagedBytes$Reader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PagedBytes$Reader_fill(t_PagedBytes$Reader *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jlong a1;

          if (!parseArgs(args, "kJ", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.fill(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "fill", args);
          return NULL;
        }

        static PyObject *t_PagedBytes$Reader_fillSlice(t_PagedBytes$Reader *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jlong a1;
          jint a2;

          if (!parseArgs(args, "kJI", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.fillSlice(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "fillSlice", args);
          return NULL;
        }

        static PyObject *t_PagedBytes$Reader_ramBytesUsed(t_PagedBytes$Reader *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldComparator$RelevanceComparator.h"
#include "java/lang/Class.h"
#include "java/lang/Float.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldComparator$RelevanceComparator::class$ = NULL;
        jmethodID *FieldComparator$RelevanceComparator::mids$ = NULL;
        bool FieldComparator$RelevanceComparator::live$ = false;

        jclass FieldComparator$RelevanceComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldComparator$RelevanceComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
            mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
            mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
            mids$[mid_compareValues_f4628831] = env->getMethodID(cls, "compareValues", "(Ljava/lang/Float;Ljava/lang/Float;)I");
            mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");
            mids$[mid_setBottom_39c7bd3c] = env->getMethodID(cls, "setBottom", "(I)V");
            mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");
            mids$[mid_setTopValue_6b30eb6a] = env->getMethodID(cls, "setTopValue", "(Ljava/lang/Float;)V");
            mids$[mid_value_c4acb5a1] = env->getMethodID(cls, "value", "(I)Ljava/lang/Float;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint FieldComparator$RelevanceComparator::compare(jint a0, jint a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compare_d8d154b9], a0, a1);
        }

        jint FieldComparator$RelevanceComparator::compareBottom(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareBottom_39c7bd23], a0);
        }

        jint FieldComparator$RelevanceComparator::compareTop(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTop_39c7bd23], a0);
        }

        jint FieldComparator$RelevanceComparator::compareValues(const ::java::lang::Float & a0, const ::java::lang::Float & a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compareValues_f4628831], a0.this$, a1.this$);
        }

        void FieldComparator$RelevanceComparator::copy(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_d8d154a6], a0, a1);
        }

        void FieldComparator$RelevanceComparator::setBottom(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBottom_39c7bd3c], a0);
        }

        ::org::apache::lucene::search::FieldComparator FieldComparator$RelevanceComparator::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_setNextReader_6329aed7], a0.this$));
        }

        void FieldComparator$RelevanceComparator::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
        }

        void FieldComparator$RelevanceComparator::setTopValue(const ::java::lang::Float & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTopValue_6b30eb6a], a0.this$);
        }

        ::java::lang::Float FieldComparator$RelevanceComparator::value(jint a0) const
        {
          return ::java::lang::Float(env->callObjectMethod(this$, mids$[mid_value_c4acb5a1], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldComparator$RelevanceComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$RelevanceComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$RelevanceComparator_of_(t_FieldComparator$RelevanceComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$RelevanceComparator_compare(t_FieldComparator$RelevanceComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$RelevanceComparator_compareBottom(t_FieldComparator$RelevanceComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$RelevanceComparator_compareTop(t_FieldComparator$RelevanceComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$RelevanceComparator_compareValues(t_FieldComparator$RelevanceComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$RelevanceComparator_copy(t_FieldComparator$RelevanceComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$RelevanceComparator_setBottom(t_FieldComparator$RelevanceComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$RelevanceComparator_setNextReader(t_FieldComparator$RelevanceComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$RelevanceComparator_setScorer(t_FieldComparator$RelevanceComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$RelevanceComparator_setTopValue(t_FieldComparator$RelevanceComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$RelevanceComparator_value(t_FieldComparator$RelevanceComparator *self, PyObject *args);
        static int t_FieldComparator$RelevanceComparator_set__bottom(t_FieldComparator$RelevanceComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$RelevanceComparator_set__nextReader(t_FieldComparator$RelevanceComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$RelevanceComparator_set__scorer(t_FieldComparator$RelevanceComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$RelevanceComparator_set__topValue(t_FieldComparator$RelevanceComparator *self, PyObject *arg, void *data);
        static PyObject *t_FieldComparator$RelevanceComparator_get__parameters_(t_FieldComparator$RelevanceComparator *self, void *data);
        static PyGetSetDef t_FieldComparator$RelevanceComparator__fields_[] = {
          DECLARE_SET_FIELD(t_FieldComparator$RelevanceComparator, bottom),
          DECLARE_SET_FIELD(t_FieldComparator$RelevanceComparator, nextReader),
          DECLARE_SET_FIELD(t_FieldComparator$RelevanceComparator, scorer),
          DECLARE_SET_FIELD(t_FieldComparator$RelevanceComparator, topValue),
          DECLARE_GET_FIELD(t_FieldComparator$RelevanceComparator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldComparator$RelevanceComparator__methods_[] = {
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, compare, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, compareBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, compareTop, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, compareValues, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, copy, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, setBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, setScorer, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, setTopValue, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, value, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldComparator$RelevanceComparator, t_FieldComparator$RelevanceComparator, ::org::apache::lucene::search::FieldComparator, FieldComparator$RelevanceComparator, abstract_init, 0, 0, t_FieldComparator$RelevanceComparator__fields_, 0, 0);
        PyObject *t_FieldComparator$RelevanceComparator::wrap_Object(const FieldComparator$RelevanceComparator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$RelevanceComparator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$RelevanceComparator *self = (t_FieldComparator$RelevanceComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldComparator$RelevanceComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$RelevanceComparator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$RelevanceComparator *self = (t_FieldComparator$RelevanceComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldComparator$RelevanceComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldComparator$RelevanceComparator), module, "FieldComparator$RelevanceComparator", 0);
        }

        void t_FieldComparator$RelevanceComparator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldComparator$RelevanceComparator).tp_dict, "class_", make_descriptor(FieldComparator$RelevanceComparator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldComparator$RelevanceComparator).tp_dict, "wrapfn_", make_descriptor(t_FieldComparator$RelevanceComparator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldComparator$RelevanceComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldComparator$RelevanceComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldComparator$RelevanceComparator::initializeClass, 1)))
            return NULL;
          return t_FieldComparator$RelevanceComparator::wrap_Object(FieldComparator$RelevanceComparator(((t_FieldComparator$RelevanceComparator *) arg)->object.this$));
        }
        static PyObject *t_FieldComparator$RelevanceComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldComparator$RelevanceComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldComparator$RelevanceComparator_of_(t_FieldComparator$RelevanceComparator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_FieldComparator$RelevanceComparator_compare(t_FieldComparator$RelevanceComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$RelevanceComparator), (PyObject *) self, "compare", args, 2);
        }

        static PyObject *t_FieldComparator$RelevanceComparator_compareBottom(t_FieldComparator$RelevanceComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareBottom(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$RelevanceComparator), (PyObject *) self, "compareBottom", args, 2);
        }

        static PyObject *t_FieldComparator$RelevanceComparator_compareTop(t_FieldComparator$RelevanceComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareTop(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$RelevanceComparator), (PyObject *) self, "compareTop", args, 2);
        }

        static PyObject *t_FieldComparator$RelevanceComparator_compareValues(t_FieldComparator$RelevanceComparator *self, PyObject *args)
        {
          ::java::lang::Float a0((jobject) NULL);
          ::java::lang::Float a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "OO", &::java::lang::PY_TYPE(Float), &::java::lang::PY_TYPE(Float), &a0, &a1))
          {
            OBJ_CALL(result = self->object.compareValues(a0, a1));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$RelevanceComparator), (PyObject *) self, "compareValues", args, 2);
        }

        static PyObject *t_FieldComparator$RelevanceComparator_copy(t_FieldComparator$RelevanceComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.copy(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$RelevanceComparator), (PyObject *) self, "copy", args, 2);
        }

        static PyObject *t_FieldComparator$RelevanceComparator_setBottom(t_FieldComparator$RelevanceComparator *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.setBottom(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$RelevanceComparator), (PyObject *) self, "setBottom", args, 2);
        }

        static PyObject *t_FieldComparator$RelevanceComparator_setNextReader(t_FieldComparator$RelevanceComparator *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setNextReader(a0));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result, &::java::lang::PY_TYPE(Float));
          }

          return callSuper(&PY_TYPE(FieldComparator$RelevanceComparator), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_FieldComparator$RelevanceComparator_setScorer(t_FieldComparator$RelevanceComparator *self, PyObject *args)
        {
          ::org::apache::lucene::search::Scorer a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setScorer(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$RelevanceComparator), (PyObject *) self, "setScorer", args, 2);
        }

        static PyObject *t_FieldComparator$RelevanceComparator_setTopValue(t_FieldComparator$RelevanceComparator *self, PyObject *args)
        {
          ::java::lang::Float a0((jobject) NULL);

          if (!parseArgs(args, "O", &::java::lang::PY_TYPE(Float), &a0))
          {
            OBJ_CALL(self->object.setTopValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$RelevanceComparator), (PyObject *) self, "setTopValue", args, 2);
        }

        static PyObject *t_FieldComparator$RelevanceComparator_value(t_FieldComparator$RelevanceComparator *self, PyObject *args)
        {
          jint a0;
          ::java::lang::Float result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.value(a0));
            return ::java::lang::t_Float::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldComparator$RelevanceComparator), (PyObject *) self, "value", args, 2);
        }
        static PyObject *t_FieldComparator$RelevanceComparator_get__parameters_(t_FieldComparator$RelevanceComparator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static int t_FieldComparator$RelevanceComparator_set__bottom(t_FieldComparator$RelevanceComparator *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setBottom(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bottom", arg);
          return -1;
        }

        static int t_FieldComparator$RelevanceComparator_set__nextReader(t_FieldComparator$RelevanceComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_FieldComparator$RelevanceComparator_set__scorer(t_FieldComparator$RelevanceComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Scorer value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
            {
              INT_CALL(self->object.setScorer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "scorer", arg);
          return -1;
        }

        static int t_FieldComparator$RelevanceComparator_set__topValue(t_FieldComparator$RelevanceComparator *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::Float value((jobject) NULL);
            if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Float), &value))
            {
              INT_CALL(self->object.setTopValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "topValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/StoredFieldVisitor.h"
#include "org/apache/lucene/index/StoredFieldVisitor$Status.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *StoredFieldVisitor::class$ = NULL;
        jmethodID *StoredFieldVisitor::mids$ = NULL;
        bool StoredFieldVisitor::live$ = false;

        jclass StoredFieldVisitor::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/StoredFieldVisitor");

            mids$ = new jmethodID[max_mid];
            mids$[mid_binaryField_f0c94359] = env->getMethodID(cls, "binaryField", "(Lorg/apache/lucene/index/FieldInfo;[B)V");
            mids$[mid_doubleField_59cb8283] = env->getMethodID(cls, "doubleField", "(Lorg/apache/lucene/index/FieldInfo;D)V");
            mids$[mid_floatField_04c0e245] = env->getMethodID(cls, "floatField", "(Lorg/apache/lucene/index/FieldInfo;F)V");
            mids$[mid_intField_d8ebe062] = env->getMethodID(cls, "intField", "(Lorg/apache/lucene/index/FieldInfo;I)V");
            mids$[mid_longField_54f2c7e9] = env->getMethodID(cls, "longField", "(Lorg/apache/lucene/index/FieldInfo;J)V");
            mids$[mid_needsField_be88ccfe] = env->getMethodID(cls, "needsField", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/index/StoredFieldVisitor$Status;");
            mids$[mid_stringField_20e02bfa] = env->getMethodID(cls, "stringField", "(Lorg/apache/lucene/index/FieldInfo;Ljava/lang/String;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void StoredFieldVisitor::binaryField(const ::org::apache::lucene::index::FieldInfo & a0, const JArray< jbyte > & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_binaryField_f0c94359], a0.this$, a1.this$);
        }

        void StoredFieldVisitor::doubleField(const ::org::apache::lucene::index::FieldInfo & a0, jdouble a1) const
        {
          env->callVoidMethod(this$, mids$[mid_doubleField_59cb8283], a0.this$, a1);
        }

        void StoredFieldVisitor::floatField(const ::org::apache::lucene::index::FieldInfo & a0, jfloat a1) const
        {
          env->callVoidMethod(this$, mids$[mid_floatField_04c0e245], a0.this$, a1);
        }

        void StoredFieldVisitor::intField(const ::org::apache::lucene::index::FieldInfo & a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_intField_d8ebe062], a0.this$, a1);
        }

        void StoredFieldVisitor::longField(const ::org::apache::lucene::index::FieldInfo & a0, jlong a1) const
        {
          env->callVoidMethod(this$, mids$[mid_longField_54f2c7e9], a0.this$, a1);
        }

        ::org::apache::lucene::index::StoredFieldVisitor$Status StoredFieldVisitor::needsField(const ::org::apache::lucene::index::FieldInfo & a0) const
        {
          return ::org::apache::lucene::index::StoredFieldVisitor$Status(env->callObjectMethod(this$, mids$[mid_needsField_be88ccfe], a0.this$));
        }

        void StoredFieldVisitor::stringField(const ::org::apache::lucene::index::FieldInfo & a0, const ::java::lang::String & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_stringField_20e02bfa], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_StoredFieldVisitor_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StoredFieldVisitor_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StoredFieldVisitor_binaryField(t_StoredFieldVisitor *self, PyObject *args);
        static PyObject *t_StoredFieldVisitor_doubleField(t_StoredFieldVisitor *self, PyObject *args);
        static PyObject *t_StoredFieldVisitor_floatField(t_StoredFieldVisitor *self, PyObject *args);
        static PyObject *t_StoredFieldVisitor_intField(t_StoredFieldVisitor *self, PyObject *args);
        static PyObject *t_StoredFieldVisitor_longField(t_StoredFieldVisitor *self, PyObject *args);
        static PyObject *t_StoredFieldVisitor_needsField(t_StoredFieldVisitor *self, PyObject *arg);
        static PyObject *t_StoredFieldVisitor_stringField(t_StoredFieldVisitor *self, PyObject *args);

        static PyMethodDef t_StoredFieldVisitor__methods_[] = {
          DECLARE_METHOD(t_StoredFieldVisitor, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StoredFieldVisitor, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StoredFieldVisitor, binaryField, METH_VARARGS),
          DECLARE_METHOD(t_StoredFieldVisitor, doubleField, METH_VARARGS),
          DECLARE_METHOD(t_StoredFieldVisitor, floatField, METH_VARARGS),
          DECLARE_METHOD(t_StoredFieldVisitor, intField, METH_VARARGS),
          DECLARE_METHOD(t_StoredFieldVisitor, longField, METH_VARARGS),
          DECLARE_METHOD(t_StoredFieldVisitor, needsField, METH_O),
          DECLARE_METHOD(t_StoredFieldVisitor, stringField, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(StoredFieldVisitor, t_StoredFieldVisitor, ::java::lang::Object, StoredFieldVisitor, abstract_init, 0, 0, 0, 0, 0);

        void t_StoredFieldVisitor::install(PyObject *module)
        {
          installType(&PY_TYPE(StoredFieldVisitor), module, "StoredFieldVisitor", 0);
          PyDict_SetItemString(PY_TYPE(StoredFieldVisitor).tp_dict, "Status", make_descriptor(&PY_TYPE(StoredFieldVisitor$Status)));
        }

        void t_StoredFieldVisitor::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(StoredFieldVisitor).tp_dict, "class_", make_descriptor(StoredFieldVisitor::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(StoredFieldVisitor).tp_dict, "wrapfn_", make_descriptor(t_StoredFieldVisitor::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(StoredFieldVisitor).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_StoredFieldVisitor_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, StoredFieldVisitor::initializeClass, 1)))
            return NULL;
          return t_StoredFieldVisitor::wrap_Object(StoredFieldVisitor(((t_StoredFieldVisitor *) arg)->object.this$));
        }
        static PyObject *t_StoredFieldVisitor_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, StoredFieldVisitor::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_StoredFieldVisitor_binaryField(t_StoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          JArray< jbyte > a1((jobject) NULL);

          if (!parseArgs(args, "k[B", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.binaryField(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "binaryField", args);
          return NULL;
        }

        static PyObject *t_StoredFieldVisitor_doubleField(t_StoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          jdouble a1;

          if (!parseArgs(args, "kD", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.doubleField(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "doubleField", args);
          return NULL;
        }

        static PyObject *t_StoredFieldVisitor_floatField(t_StoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          jfloat a1;

          if (!parseArgs(args, "kF", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.floatField(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "floatField", args);
          return NULL;
        }

        static PyObject *t_StoredFieldVisitor_intField(t_StoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          jint a1;

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.intField(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "intField", args);
          return NULL;
        }

        static PyObject *t_StoredFieldVisitor_longField(t_StoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          jlong a1;

          if (!parseArgs(args, "kJ", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.longField(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "longField", args);
          return NULL;
        }

        static PyObject *t_StoredFieldVisitor_needsField(t_StoredFieldVisitor *self, PyObject *arg)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::StoredFieldVisitor$Status result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.needsField(a0));
            return ::org::apache::lucene::index::t_StoredFieldVisitor$Status::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "needsField", arg);
          return NULL;
        }

        static PyObject *t_StoredFieldVisitor_stringField(t_StoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.stringField(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "stringField", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/FastCharStream.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/classic/CharStream.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *FastCharStream::class$ = NULL;
          jmethodID *FastCharStream::mids$ = NULL;
          bool FastCharStream::live$ = false;

          jclass FastCharStream::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/FastCharStream");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_BeginToken_54c6a173] = env->getMethodID(cls, "BeginToken", "()C");
              mids$[mid_Done_54c6a166] = env->getMethodID(cls, "Done", "()V");
              mids$[mid_GetImage_14c7b5c5] = env->getMethodID(cls, "GetImage", "()Ljava/lang/String;");
              mids$[mid_GetSuffix_b4292e99] = env->getMethodID(cls, "GetSuffix", "(I)[C");
              mids$[mid_backup_39c7bd3c] = env->getMethodID(cls, "backup", "(I)V");
              mids$[mid_getBeginColumn_54c6a179] = env->getMethodID(cls, "getBeginColumn", "()I");
              mids$[mid_getBeginLine_54c6a179] = env->getMethodID(cls, "getBeginLine", "()I");
              mids$[mid_getColumn_54c6a179] = env->getMethodID(cls, "getColumn", "()I");
              mids$[mid_getEndColumn_54c6a179] = env->getMethodID(cls, "getEndColumn", "()I");
              mids$[mid_getEndLine_54c6a179] = env->getMethodID(cls, "getEndLine", "()I");
              mids$[mid_getLine_54c6a179] = env->getMethodID(cls, "getLine", "()I");
              mids$[mid_readChar_54c6a173] = env->getMethodID(cls, "readChar", "()C");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FastCharStream::FastCharStream(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          jchar FastCharStream::BeginToken() const
          {
            return env->callCharMethod(this$, mids$[mid_BeginToken_54c6a173]);
          }

          void FastCharStream::Done() const
          {
            env->callVoidMethod(this$, mids$[mid_Done_54c6a166]);
          }

          ::java::lang::String FastCharStream::GetImage() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_GetImage_14c7b5c5]));
          }

          JArray< jchar > FastCharStream::GetSuffix(jint a0) const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_GetSuffix_b4292e99], a0));
          }

          void FastCharStream::backup(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_backup_39c7bd3c], a0);
          }

          jint FastCharStream::getBeginColumn() const
          {
            return env->callIntMethod(this$, mids$[mid_getBeginColumn_54c6a179]);
          }

          jint FastCharStream::getBeginLine() const
          {
            return env->callIntMethod(this$, mids$[mid_getBeginLine_54c6a179]);
          }

          jint FastCharStream::getColumn() const
          {
            return env->callIntMethod(this$, mids$[mid_getColumn_54c6a179]);
          }

          jint FastCharStream::getEndColumn() const
          {
            return env->callIntMethod(this$, mids$[mid_getEndColumn_54c6a179]);
          }

          jint FastCharStream::getEndLine() const
          {
            return env->callIntMethod(this$, mids$[mid_getEndLine_54c6a179]);
          }

          jint FastCharStream::getLine() const
          {
            return env->callIntMethod(this$, mids$[mid_getLine_54c6a179]);
          }

          jchar FastCharStream::readChar() const
          {
            return env->callCharMethod(this$, mids$[mid_readChar_54c6a173]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_FastCharStream_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FastCharStream_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FastCharStream_init_(t_FastCharStream *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FastCharStream_BeginToken(t_FastCharStream *self);
          static PyObject *t_FastCharStream_Done(t_FastCharStream *self);
          static PyObject *t_FastCharStream_GetImage(t_FastCharStream *self);
          static PyObject *t_FastCharStream_GetSuffix(t_FastCharStream *self, PyObject *arg);
          static PyObject *t_FastCharStream_backup(t_FastCharStream *self, PyObject *arg);
          static PyObject *t_FastCharStream_getBeginColumn(t_FastCharStream *self);
          static PyObject *t_FastCharStream_getBeginLine(t_FastCharStream *self);
          static PyObject *t_FastCharStream_getColumn(t_FastCharStream *self);
          static PyObject *t_FastCharStream_getEndColumn(t_FastCharStream *self);
          static PyObject *t_FastCharStream_getEndLine(t_FastCharStream *self);
          static PyObject *t_FastCharStream_getLine(t_FastCharStream *self);
          static PyObject *t_FastCharStream_readChar(t_FastCharStream *self);
          static PyObject *t_FastCharStream_get__beginColumn(t_FastCharStream *self, void *data);
          static PyObject *t_FastCharStream_get__beginLine(t_FastCharStream *self, void *data);
          static PyObject *t_FastCharStream_get__column(t_FastCharStream *self, void *data);
          static PyObject *t_FastCharStream_get__endColumn(t_FastCharStream *self, void *data);
          static PyObject *t_FastCharStream_get__endLine(t_FastCharStream *self, void *data);
          static PyObject *t_FastCharStream_get__line(t_FastCharStream *self, void *data);
          static PyGetSetDef t_FastCharStream__fields_[] = {
            DECLARE_GET_FIELD(t_FastCharStream, beginColumn),
            DECLARE_GET_FIELD(t_FastCharStream, beginLine),
            DECLARE_GET_FIELD(t_FastCharStream, column),
            DECLARE_GET_FIELD(t_FastCharStream, endColumn),
            DECLARE_GET_FIELD(t_FastCharStream, endLine),
            DECLARE_GET_FIELD(t_FastCharStream, line),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FastCharStream__methods_[] = {
            DECLARE_METHOD(t_FastCharStream, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FastCharStream, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FastCharStream, BeginToken, METH_NOARGS),
            DECLARE_METHOD(t_FastCharStream, Done, METH_NOARGS),
            DECLARE_METHOD(t_FastCharStream, GetImage, METH_NOARGS),
            DECLARE_METHOD(t_FastCharStream, GetSuffix, METH_O),
            DECLARE_METHOD(t_FastCharStream, backup, METH_O),
            DECLARE_METHOD(t_FastCharStream, getBeginColumn, METH_NOARGS),
            DECLARE_METHOD(t_FastCharStream, getBeginLine, METH_NOARGS),
            DECLARE_METHOD(t_FastCharStream, getColumn, METH_NOARGS),
            DECLARE_METHOD(t_FastCharStream, getEndColumn, METH_NOARGS),
            DECLARE_METHOD(t_FastCharStream, getEndLine, METH_NOARGS),
            DECLARE_METHOD(t_FastCharStream, getLine, METH_NOARGS),
            DECLARE_METHOD(t_FastCharStream, readChar, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FastCharStream, t_FastCharStream, ::java::lang::Object, FastCharStream, t_FastCharStream_init_, 0, 0, t_FastCharStream__fields_, 0, 0);

          void t_FastCharStream::install(PyObject *module)
          {
            installType(&PY_TYPE(FastCharStream), module, "FastCharStream", 0);
          }

          void t_FastCharStream::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FastCharStream).tp_dict, "class_", make_descriptor(FastCharStream::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FastCharStream).tp_dict, "wrapfn_", make_descriptor(t_FastCharStream::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FastCharStream).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FastCharStream_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FastCharStream::initializeClass, 1)))
              return NULL;
            return t_FastCharStream::wrap_Object(FastCharStream(((t_FastCharStream *) arg)->object.this$));
          }
          static PyObject *t_FastCharStream_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FastCharStream::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FastCharStream_init_(t_FastCharStream *self, PyObject *args, PyObject *kwds)
          {
            ::java::io::Reader a0((jobject) NULL);
            FastCharStream object((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              INT_CALL(object = FastCharStream(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FastCharStream_BeginToken(t_FastCharStream *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.BeginToken());
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }

          static PyObject *t_FastCharStream_Done(t_FastCharStream *self)
          {
            OBJ_CALL(self->object.Done());
            Py_RETURN_NONE;
          }

          static PyObject *t_FastCharStream_GetImage(t_FastCharStream *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.GetImage());
            return j2p(result);
          }

          static PyObject *t_FastCharStream_GetSuffix(t_FastCharStream *self, PyObject *arg)
          {
            jint a0;
            JArray< jchar > result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.GetSuffix(a0));
              return result.wrap();
            }

            PyErr_SetArgsError((PyObject *) self, "GetSuffix", arg);
            return NULL;
          }

          static PyObject *t_FastCharStream_backup(t_FastCharStream *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.backup(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "backup", arg);
            return NULL;
          }

          static PyObject *t_FastCharStream_getBeginColumn(t_FastCharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getBeginColumn());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FastCharStream_getBeginLine(t_FastCharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getBeginLine());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FastCharStream_getColumn(t_FastCharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getColumn());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FastCharStream_getEndColumn(t_FastCharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEndColumn());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FastCharStream_getEndLine(t_FastCharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEndLine());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FastCharStream_getLine(t_FastCharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getLine());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FastCharStream_readChar(t_FastCharStream *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.readChar());
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }

          static PyObject *t_FastCharStream_get__beginColumn(t_FastCharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getBeginColumn());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FastCharStream_get__beginLine(t_FastCharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getBeginLine());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FastCharStream_get__column(t_FastCharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getColumn());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FastCharStream_get__endColumn(t_FastCharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEndColumn());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FastCharStream_get__endLine(t_FastCharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEndLine());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FastCharStream_get__line(t_FastCharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getLine());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoWriter.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40SegmentInfoWriter::class$ = NULL;
          jmethodID *Lucene40SegmentInfoWriter::mids$ = NULL;
          bool Lucene40SegmentInfoWriter::live$ = false;

          jclass Lucene40SegmentInfoWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_write_3589180f] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40SegmentInfoWriter::Lucene40SegmentInfoWriter() : ::org::apache::lucene::codecs::SegmentInfoWriter(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void Lucene40SegmentInfoWriter::write(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3) const
          {
            env->callVoidMethod(this$, mids$[mid_write_3589180f], a0.this$, a1.this$, a2.this$, a3.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40SegmentInfoWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40SegmentInfoWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40SegmentInfoWriter_init_(t_Lucene40SegmentInfoWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40SegmentInfoWriter_write(t_Lucene40SegmentInfoWriter *self, PyObject *args);

          static PyMethodDef t_Lucene40SegmentInfoWriter__methods_[] = {
            DECLARE_METHOD(t_Lucene40SegmentInfoWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40SegmentInfoWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40SegmentInfoWriter, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40SegmentInfoWriter, t_Lucene40SegmentInfoWriter, ::org::apache::lucene::codecs::SegmentInfoWriter, Lucene40SegmentInfoWriter, t_Lucene40SegmentInfoWriter_init_, 0, 0, 0, 0, 0);

          void t_Lucene40SegmentInfoWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40SegmentInfoWriter), module, "Lucene40SegmentInfoWriter", 0);
          }

          void t_Lucene40SegmentInfoWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40SegmentInfoWriter).tp_dict, "class_", make_descriptor(Lucene40SegmentInfoWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40SegmentInfoWriter).tp_dict, "wrapfn_", make_descriptor(t_Lucene40SegmentInfoWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40SegmentInfoWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40SegmentInfoWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40SegmentInfoWriter::initializeClass, 1)))
              return NULL;
            return t_Lucene40SegmentInfoWriter::wrap_Object(Lucene40SegmentInfoWriter(((t_Lucene40SegmentInfoWriter *) arg)->object.this$));
          }
          static PyObject *t_Lucene40SegmentInfoWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40SegmentInfoWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40SegmentInfoWriter_init_(t_Lucene40SegmentInfoWriter *self, PyObject *args, PyObject *kwds)
          {
            Lucene40SegmentInfoWriter object((jobject) NULL);

            INT_CALL(object = Lucene40SegmentInfoWriter());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene40SegmentInfoWriter_write(t_Lucene40SegmentInfoWriter *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);

            if (!parseArgs(args, "kkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(self->object.write(a0, a1, a2, a3));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40SegmentInfoWriter), (PyObject *) self, "write", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tr/TurkishAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tr {

          ::java::lang::Class *TurkishAnalyzer::class$ = NULL;
          jmethodID *TurkishAnalyzer::mids$ = NULL;
          bool TurkishAnalyzer::live$ = false;
          ::java::lang::String *TurkishAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass TurkishAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tr/TurkishAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TurkishAnalyzer::TurkishAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          TurkishAnalyzer::TurkishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          TurkishAnalyzer::TurkishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet TurkishAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tr {
          static PyObject *t_TurkishAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TurkishAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TurkishAnalyzer_init_(t_TurkishAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TurkishAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_TurkishAnalyzer_get__defaultStopSet(t_TurkishAnalyzer *self, void *data);
          static PyGetSetDef t_TurkishAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_TurkishAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TurkishAnalyzer__methods_[] = {
            DECLARE_METHOD(t_TurkishAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TurkishAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TurkishAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TurkishAnalyzer, t_TurkishAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, TurkishAnalyzer, t_TurkishAnalyzer_init_, 0, 0, t_TurkishAnalyzer__fields_, 0, 0);

          void t_TurkishAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(TurkishAnalyzer), module, "TurkishAnalyzer", 0);
          }

          void t_TurkishAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TurkishAnalyzer).tp_dict, "class_", make_descriptor(TurkishAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TurkishAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_TurkishAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TurkishAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(TurkishAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(TurkishAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*TurkishAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_TurkishAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TurkishAnalyzer::initializeClass, 1)))
              return NULL;
            return t_TurkishAnalyzer::wrap_Object(TurkishAnalyzer(((t_TurkishAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_TurkishAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TurkishAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TurkishAnalyzer_init_(t_TurkishAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                TurkishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = TurkishAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                TurkishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = TurkishAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                TurkishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = TurkishAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TurkishAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::tr::TurkishAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_TurkishAnalyzer_get__defaultStopSet(t_TurkishAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/processors/NoChildOptimizationQueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace processors {

              ::java::lang::Class *NoChildOptimizationQueryNodeProcessor::class$ = NULL;
              jmethodID *NoChildOptimizationQueryNodeProcessor::mids$ = NULL;
              bool NoChildOptimizationQueryNodeProcessor::live$ = false;

              jclass NoChildOptimizationQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/processors/NoChildOptimizationQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              NoChildOptimizationQueryNodeProcessor::NoChildOptimizationQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace processors {
              static PyObject *t_NoChildOptimizationQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_NoChildOptimizationQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_NoChildOptimizationQueryNodeProcessor_init_(t_NoChildOptimizationQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_NoChildOptimizationQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_NoChildOptimizationQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NoChildOptimizationQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(NoChildOptimizationQueryNodeProcessor, t_NoChildOptimizationQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, NoChildOptimizationQueryNodeProcessor, t_NoChildOptimizationQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_NoChildOptimizationQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(NoChildOptimizationQueryNodeProcessor), module, "NoChildOptimizationQueryNodeProcessor", 0);
              }

              void t_NoChildOptimizationQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(NoChildOptimizationQueryNodeProcessor).tp_dict, "class_", make_descriptor(NoChildOptimizationQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(NoChildOptimizationQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_NoChildOptimizationQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(NoChildOptimizationQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_NoChildOptimizationQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, NoChildOptimizationQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_NoChildOptimizationQueryNodeProcessor::wrap_Object(NoChildOptimizationQueryNodeProcessor(((t_NoChildOptimizationQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_NoChildOptimizationQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, NoChildOptimizationQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_NoChildOptimizationQueryNodeProcessor_init_(t_NoChildOptimizationQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                NoChildOptimizationQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = NoChildOptimizationQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/analysis/PythonTokenStream.h"
#include "java/lang/Throwable.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {

        ::java::lang::Class *PythonTokenStream::class$ = NULL;
        jmethodID *PythonTokenStream::mids$ = NULL;
        bool PythonTokenStream::live$ = false;

        jclass PythonTokenStream::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/analysis/PythonTokenStream");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonTokenStream::PythonTokenStream() : ::org::apache::lucene::analysis::TokenStream(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonTokenStream::close() const
        {
          env->callNonvirtualVoidMethod(this$, (jclass) ::org::apache::lucene::analysis::TokenStream::class$->this$, ::org::apache::lucene::analysis::TokenStream::mids$[::org::apache::lucene::analysis::TokenStream::mid_close_54c6a166]);
        }

        void PythonTokenStream::end() const
        {
          env->callNonvirtualVoidMethod(this$, (jclass) ::org::apache::lucene::analysis::TokenStream::class$->this$, ::org::apache::lucene::analysis::TokenStream::mids$[::org::apache::lucene::analysis::TokenStream::mid_end_54c6a166]);
        }

        void PythonTokenStream::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonTokenStream::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonTokenStream::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }

        void PythonTokenStream::reset() const
        {
          env->callNonvirtualVoidMethod(this$, (jclass) ::org::apache::lucene::analysis::TokenStream::class$->this$, ::org::apache::lucene::analysis::TokenStream::mids$[::org::apache::lucene::analysis::TokenStream::mid_reset_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {
        static PyObject *t_PythonTokenStream_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonTokenStream_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonTokenStream_init_(t_PythonTokenStream *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonTokenStream_close(t_PythonTokenStream *self, PyObject *args);
        static PyObject *t_PythonTokenStream_end(t_PythonTokenStream *self, PyObject *args);
        static PyObject *t_PythonTokenStream_finalize(t_PythonTokenStream *self);
        static PyObject *t_PythonTokenStream_pythonExtension(t_PythonTokenStream *self, PyObject *args);
        static PyObject *t_PythonTokenStream_reset(t_PythonTokenStream *self, PyObject *args);
        static void JNICALL t_PythonTokenStream_close0(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonTokenStream_end1(JNIEnv *jenv, jobject jobj);
        static jboolean JNICALL t_PythonTokenStream_incrementToken2(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonTokenStream_pythonDecRef3(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonTokenStream_reset4(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonTokenStream_get__self(t_PythonTokenStream *self, void *data);
        static PyGetSetDef t_PythonTokenStream__fields_[] = {
          DECLARE_GET_FIELD(t_PythonTokenStream, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonTokenStream__methods_[] = {
          DECLARE_METHOD(t_PythonTokenStream, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonTokenStream, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonTokenStream, close, METH_VARARGS),
          DECLARE_METHOD(t_PythonTokenStream, end, METH_VARARGS),
          DECLARE_METHOD(t_PythonTokenStream, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonTokenStream, pythonExtension, METH_VARARGS),
          DECLARE_METHOD(t_PythonTokenStream, reset, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonTokenStream, t_PythonTokenStream, ::org::apache::lucene::analysis::TokenStream, PythonTokenStream, t_PythonTokenStream_init_, 0, 0, t_PythonTokenStream__fields_, 0, 0);

        void t_PythonTokenStream::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonTokenStream), module, "PythonTokenStream", 1);
        }

        void t_PythonTokenStream::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonTokenStream).tp_dict, "class_", make_descriptor(PythonTokenStream::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonTokenStream).tp_dict, "wrapfn_", make_descriptor(t_PythonTokenStream::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonTokenStream).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonTokenStream::initializeClass);
          JNINativeMethod methods[] = {
            { "close", "()V", (void *) t_PythonTokenStream_close0 },
            { "end", "()V", (void *) t_PythonTokenStream_end1 },
            { "incrementToken", "()Z", (void *) t_PythonTokenStream_incrementToken2 },
            { "pythonDecRef", "()V", (void *) t_PythonTokenStream_pythonDecRef3 },
            { "reset", "()V", (void *) t_PythonTokenStream_reset4 },
          };
          env->registerNatives(cls, methods, 5);
        }

        static PyObject *t_PythonTokenStream_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonTokenStream::initializeClass, 1)))
            return NULL;
          return t_PythonTokenStream::wrap_Object(PythonTokenStream(((t_PythonTokenStream *) arg)->object.this$));
        }
        static PyObject *t_PythonTokenStream_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonTokenStream::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonTokenStream_init_(t_PythonTokenStream *self, PyObject *args, PyObject *kwds)
        {
          PythonTokenStream object((jobject) NULL);

          INT_CALL(object = PythonTokenStream());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonTokenStream_close(t_PythonTokenStream *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PythonTokenStream), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_PythonTokenStream_end(t_PythonTokenStream *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.end());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PythonTokenStream), (PyObject *) self, "end", args, 2);
        }

        static PyObject *t_PythonTokenStream_finalize(t_PythonTokenStream *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonTokenStream_pythonExtension(t_PythonTokenStream *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static PyObject *t_PythonTokenStream_reset(t_PythonTokenStream *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.reset());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PythonTokenStream), (PyObject *) self, "reset", args, 2);
        }

        static void JNICALL t_PythonTokenStream_close0(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonTokenStream::mids$[PythonTokenStream::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "close", "");
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static void JNICALL t_PythonTokenStream_end1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonTokenStream::mids$[PythonTokenStream::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "end", "");
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jboolean JNICALL t_PythonTokenStream_incrementToken2(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonTokenStream::mids$[PythonTokenStream::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *result = PyObject_CallMethod(obj, "incrementToken", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("incrementToken", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static void JNICALL t_PythonTokenStream_pythonDecRef3(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonTokenStream::mids$[PythonTokenStream::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonTokenStream::mids$[PythonTokenStream::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static void JNICALL t_PythonTokenStream_reset4(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonTokenStream::mids$[PythonTokenStream::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "reset", "");
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static PyObject *t_PythonTokenStream_get__self(t_PythonTokenStream *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/Terms.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *Terms::class$ = NULL;
        jmethodID *Terms::mids$ = NULL;
        bool Terms::live$ = false;
        JArray< Terms > *Terms::EMPTY_ARRAY = NULL;

        jclass Terms::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/Terms");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
            mids$[mid_getDocCount_54c6a179] = env->getMethodID(cls, "getDocCount", "()I");
            mids$[mid_getMax_4ae19461] = env->getMethodID(cls, "getMax", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getMin_4ae19461] = env->getMethodID(cls, "getMin", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getSumDocFreq_54c6a17a] = env->getMethodID(cls, "getSumDocFreq", "()J");
            mids$[mid_getSumTotalTermFreq_54c6a17a] = env->getMethodID(cls, "getSumTotalTermFreq", "()J");
            mids$[mid_hasFreqs_54c6a16a] = env->getMethodID(cls, "hasFreqs", "()Z");
            mids$[mid_hasOffsets_54c6a16a] = env->getMethodID(cls, "hasOffsets", "()Z");
            mids$[mid_hasPayloads_54c6a16a] = env->getMethodID(cls, "hasPayloads", "()Z");
            mids$[mid_hasPositions_54c6a16a] = env->getMethodID(cls, "hasPositions", "()Z");
            mids$[mid_intersect_b8f2b1bc] = env->getMethodID(cls, "intersect", "(Lorg/apache/lucene/util/automaton/CompiledAutomaton;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum;");
            mids$[mid_iterator_d737078b] = env->getMethodID(cls, "iterator", "(Lorg/apache/lucene/index/TermsEnum;)Lorg/apache/lucene/index/TermsEnum;");
            mids$[mid_size_54c6a17a] = env->getMethodID(cls, "size", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY_ARRAY = new JArray< Terms >(env->getStaticObjectField(cls, "EMPTY_ARRAY", "[Lorg/apache/lucene/index/Terms;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::Comparator Terms::getComparator() const
        {
          return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
        }

        jint Terms::getDocCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getDocCount_54c6a179]);
        }

        ::org::apache::lucene::util::BytesRef Terms::getMax() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getMax_4ae19461]));
        }

        ::org::apache::lucene::util::BytesRef Terms::getMin() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getMin_4ae19461]));
        }

        jlong Terms::getSumDocFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_getSumDocFreq_54c6a17a]);
        }

        jlong Terms::getSumTotalTermFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_getSumTotalTermFreq_54c6a17a]);
        }

        jboolean Terms::hasFreqs() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasFreqs_54c6a16a]);
        }

        jboolean Terms::hasOffsets() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasOffsets_54c6a16a]);
        }

        jboolean Terms::hasPayloads() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasPayloads_54c6a16a]);
        }

        jboolean Terms::hasPositions() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasPositions_54c6a16a]);
        }

        ::org::apache::lucene::index::TermsEnum Terms::intersect(const ::org::apache::lucene::util::automaton::CompiledAutomaton & a0, const ::org::apache::lucene::util::BytesRef & a1) const
        {
          return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_intersect_b8f2b1bc], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::TermsEnum Terms::iterator(const ::org::apache::lucene::index::TermsEnum & a0) const
        {
          return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_iterator_d737078b], a0.this$));
        }

        jlong Terms::size() const
        {
          return env->callLongMethod(this$, mids$[mid_size_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_Terms_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Terms_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Terms_getComparator(t_Terms *self);
        static PyObject *t_Terms_getDocCount(t_Terms *self);
        static PyObject *t_Terms_getMax(t_Terms *self);
        static PyObject *t_Terms_getMin(t_Terms *self);
        static PyObject *t_Terms_getSumDocFreq(t_Terms *self);
        static PyObject *t_Terms_getSumTotalTermFreq(t_Terms *self);
        static PyObject *t_Terms_hasFreqs(t_Terms *self);
        static PyObject *t_Terms_hasOffsets(t_Terms *self);
        static PyObject *t_Terms_hasPayloads(t_Terms *self);
        static PyObject *t_Terms_hasPositions(t_Terms *self);
        static PyObject *t_Terms_intersect(t_Terms *self, PyObject *args);
        static PyObject *t_Terms_iterator(t_Terms *self, PyObject *arg);
        static PyObject *t_Terms_size(t_Terms *self);
        static PyObject *t_Terms_get__comparator(t_Terms *self, void *data);
        static PyObject *t_Terms_get__docCount(t_Terms *self, void *data);
        static PyObject *t_Terms_get__max(t_Terms *self, void *data);
        static PyObject *t_Terms_get__min(t_Terms *self, void *data);
        static PyObject *t_Terms_get__sumDocFreq(t_Terms *self, void *data);
        static PyObject *t_Terms_get__sumTotalTermFreq(t_Terms *self, void *data);
        static PyGetSetDef t_Terms__fields_[] = {
          DECLARE_GET_FIELD(t_Terms, comparator),
          DECLARE_GET_FIELD(t_Terms, docCount),
          DECLARE_GET_FIELD(t_Terms, max),
          DECLARE_GET_FIELD(t_Terms, min),
          DECLARE_GET_FIELD(t_Terms, sumDocFreq),
          DECLARE_GET_FIELD(t_Terms, sumTotalTermFreq),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Terms__methods_[] = {
          DECLARE_METHOD(t_Terms, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Terms, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Terms, getComparator, METH_NOARGS),
          DECLARE_METHOD(t_Terms, getDocCount, METH_NOARGS),
          DECLARE_METHOD(t_Terms, getMax, METH_NOARGS),
          DECLARE_METHOD(t_Terms, getMin, METH_NOARGS),
          DECLARE_METHOD(t_Terms, getSumDocFreq, METH_NOARGS),
          DECLARE_METHOD(t_Terms, getSumTotalTermFreq, METH_NOARGS),
          DECLARE_METHOD(t_Terms, hasFreqs, METH_NOARGS),
          DECLARE_METHOD(t_Terms, hasOffsets, METH_NOARGS),
          DECLARE_METHOD(t_Terms, hasPayloads, METH_NOARGS),
          DECLARE_METHOD(t_Terms, hasPositions, METH_NOARGS),
          DECLARE_METHOD(t_Terms, intersect, METH_VARARGS),
          DECLARE_METHOD(t_Terms, iterator, METH_O),
          DECLARE_METHOD(t_Terms, size, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Terms, t_Terms, ::java::lang::Object, Terms, abstract_init, 0, 0, t_Terms__fields_, 0, 0);

        void t_Terms::install(PyObject *module)
        {
          installType(&PY_TYPE(Terms), module, "Terms", 0);
        }

        void t_Terms::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Terms).tp_dict, "class_", make_descriptor(Terms::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Terms).tp_dict, "wrapfn_", make_descriptor(t_Terms::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Terms).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(Terms::initializeClass);
          PyDict_SetItemString(PY_TYPE(Terms).tp_dict, "EMPTY_ARRAY", make_descriptor(JArray<jobject>(Terms::EMPTY_ARRAY->this$).wrap(t_Terms::wrap_jobject)));
        }

        static PyObject *t_Terms_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Terms::initializeClass, 1)))
            return NULL;
          return t_Terms::wrap_Object(Terms(((t_Terms *) arg)->object.this$));
        }
        static PyObject *t_Terms_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Terms::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Terms_getComparator(t_Terms *self)
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
        }

        static PyObject *t_Terms_getDocCount(t_Terms *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getDocCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_Terms_getMax(t_Terms *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getMax());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_Terms_getMin(t_Terms *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getMin());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_Terms_getSumDocFreq(t_Terms *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getSumDocFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_Terms_getSumTotalTermFreq(t_Terms *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getSumTotalTermFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_Terms_hasFreqs(t_Terms *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasFreqs());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Terms_hasOffsets(t_Terms *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasOffsets());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Terms_hasPayloads(t_Terms *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasPayloads());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Terms_hasPositions(t_Terms *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasPositions());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Terms_intersect(t_Terms *self, PyObject *args)
        {
          ::org::apache::lucene::util::automaton::CompiledAutomaton a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::util::automaton::CompiledAutomaton::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.intersect(a0, a1));
            return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "intersect", args);
          return NULL;
        }

        static PyObject *t_Terms_iterator(t_Terms *self, PyObject *arg)
        {
          ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.iterator(a0));
            return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "iterator", arg);
          return NULL;
        }

        static PyObject *t_Terms_size(t_Terms *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.size());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_Terms_get__comparator(t_Terms *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }

        static PyObject *t_Terms_get__docCount(t_Terms *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getDocCount());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_Terms_get__max(t_Terms *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getMax());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }

        static PyObject *t_Terms_get__min(t_Terms *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getMin());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }

        static PyObject *t_Terms_get__sumDocFreq(t_Terms *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getSumDocFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_Terms_get__sumTotalTermFreq(t_Terms *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getSumTotalTermFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/store/PythonIndexInput.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/Throwable.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace store {

        ::java::lang::Class *PythonIndexInput::class$ = NULL;
        jmethodID *PythonIndexInput::mids$ = NULL;
        bool PythonIndexInput::live$ = false;

        jclass PythonIndexInput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/store/PythonIndexInput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_init$_501c6f1c] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)V");
            mids$[mid_init$_6e53ccc6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;I)V");
            mids$[mid_clone_f5aaa2d0] = env->getMethodID(cls, "clone", "()Lorg/apache/pylucene/store/PythonIndexInput;");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_length_54c6a17a] = env->getMethodID(cls, "length", "()J");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_readInternal_e1cb0133] = env->getMethodID(cls, "readInternal", "(IJ)[B");
            mids$[mid_seekInternal_0ee6df2f] = env->getMethodID(cls, "seekInternal", "(J)V");
            mids$[mid_readInternal_86f4435f] = env->getMethodID(cls, "readInternal", "([BII)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonIndexInput::PythonIndexInput(const ::java::lang::String & a0) : ::org::apache::lucene::store::BufferedIndexInput(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        PythonIndexInput::PythonIndexInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) : ::org::apache::lucene::store::BufferedIndexInput(env->newObject(initializeClass, &mids$, mid_init$_501c6f1c, a0.this$, a1.this$)) {}

        PythonIndexInput::PythonIndexInput(const ::java::lang::String & a0, jint a1) : ::org::apache::lucene::store::BufferedIndexInput(env->newObject(initializeClass, &mids$, mid_init$_6e53ccc6, a0.this$, a1)) {}

        PythonIndexInput PythonIndexInput::clone() const
        {
          return PythonIndexInput(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::store::BufferedIndexInput::class$->this$, ::org::apache::lucene::store::BufferedIndexInput::mids$[::org::apache::lucene::store::BufferedIndexInput::mid_clone_c014db58]));
        }

        void PythonIndexInput::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonIndexInput::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonIndexInput::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace store {
        static PyObject *t_PythonIndexInput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonIndexInput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonIndexInput_init_(t_PythonIndexInput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonIndexInput_clone(t_PythonIndexInput *self, PyObject *arg);
        static PyObject *t_PythonIndexInput_finalize(t_PythonIndexInput *self);
        static PyObject *t_PythonIndexInput_pythonExtension(t_PythonIndexInput *self, PyObject *args);
        static jobject JNICALL t_PythonIndexInput_clone0(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonIndexInput_close1(JNIEnv *jenv, jobject jobj);
        static jlong JNICALL t_PythonIndexInput_length2(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonIndexInput_pythonDecRef3(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonIndexInput_readInternal4(JNIEnv *jenv, jobject jobj, jint a0, jlong a1);
        static void JNICALL t_PythonIndexInput_seekInternal5(JNIEnv *jenv, jobject jobj, jlong a0);
        static PyObject *t_PythonIndexInput_get__self(t_PythonIndexInput *self, void *data);
        static PyGetSetDef t_PythonIndexInput__fields_[] = {
          DECLARE_GET_FIELD(t_PythonIndexInput, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonIndexInput__methods_[] = {
          DECLARE_METHOD(t_PythonIndexInput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonIndexInput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonIndexInput, clone, METH_O),
          DECLARE_METHOD(t_PythonIndexInput, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonIndexInput, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonIndexInput, t_PythonIndexInput, ::org::apache::lucene::store::BufferedIndexInput, PythonIndexInput, t_PythonIndexInput_init_, 0, 0, t_PythonIndexInput__fields_, 0, 0);

        void t_PythonIndexInput::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonIndexInput), module, "PythonIndexInput", 1);
        }

        void t_PythonIndexInput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonIndexInput).tp_dict, "class_", make_descriptor(PythonIndexInput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonIndexInput).tp_dict, "wrapfn_", make_descriptor(t_PythonIndexInput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonIndexInput).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonIndexInput::initializeClass);
          JNINativeMethod methods[] = {
            { "clone", "()Lorg/apache/pylucene/store/PythonIndexInput;", (void *) t_PythonIndexInput_clone0 },
            { "close", "()V", (void *) t_PythonIndexInput_close1 },
            { "length", "()J", (void *) t_PythonIndexInput_length2 },
            { "pythonDecRef", "()V", (void *) t_PythonIndexInput_pythonDecRef3 },
            { "readInternal", "(IJ)[B", (void *) t_PythonIndexInput_readInternal4 },
            { "seekInternal", "(J)V", (void *) t_PythonIndexInput_seekInternal5 },
          };
          env->registerNatives(cls, methods, 6);
        }

        static PyObject *t_PythonIndexInput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonIndexInput::initializeClass, 1)))
            return NULL;
          return t_PythonIndexInput::wrap_Object(PythonIndexInput(((t_PythonIndexInput *) arg)->object.this$));
        }
        static PyObject *t_PythonIndexInput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonIndexInput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonIndexInput_init_(t_PythonIndexInput *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              PythonIndexInput object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = PythonIndexInput(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::store::IOContext a1((jobject) NULL);
              PythonIndexInput object((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
              {
                INT_CALL(object = PythonIndexInput(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              PythonIndexInput object((jobject) NULL);

              if (!parseArgs(args, "sI", &a0, &a1))
              {
                INT_CALL(object = PythonIndexInput(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonIndexInput_clone(t_PythonIndexInput *self, PyObject *arg)
        {
          PythonIndexInput result((jobject) NULL);

          if (arg)
          {
            OBJ_CALL(result = self->object.clone());

            PythonIndexInput object(result.this$);
            if (PyObject_TypeCheck(arg, &PY_TYPE(FinalizerProxy)) &&
                PyObject_TypeCheck(((t_fp *) arg)->object, self->ob_type))
            {
              PyObject *_arg = ((t_fp *) arg)->object;
              ((t_JObject *) _arg)->object = object;
              Py_INCREF(_arg);
              object.pythonExtension((jlong) (Py_intptr_t) (void *) _arg);
              Py_INCREF(arg);
              return arg;
            }
            return PyErr_SetArgsError("clone", arg);
          }

          return callSuper(&PY_TYPE(PythonIndexInput), (PyObject *) self, "clone", arg, 1);
        }

        static PyObject *t_PythonIndexInput_finalize(t_PythonIndexInput *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonIndexInput_pythonExtension(t_PythonIndexInput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jobject JNICALL t_PythonIndexInput_clone0(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexInput::mids$[PythonIndexInput::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PythonIndexInput value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "clone", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", PythonIndexInput::initializeClass, &value))
          {
            throwTypeError("clone", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static void JNICALL t_PythonIndexInput_close1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexInput::mids$[PythonIndexInput::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "close", "");
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jlong JNICALL t_PythonIndexInput_length2(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexInput::mids$[PythonIndexInput::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jlong value;
          PyObject *result = PyObject_CallMethod(obj, "length", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "J", &value))
          {
            throwTypeError("length", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jlong) 0;
        }

        static void JNICALL t_PythonIndexInput_pythonDecRef3(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexInput::mids$[PythonIndexInput::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonIndexInput::mids$[PythonIndexInput::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static jobject JNICALL t_PythonIndexInput_readInternal4(JNIEnv *jenv, jobject jobj, jint a0, jlong a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexInput::mids$[PythonIndexInput::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          JArray< jbyte > value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "readInternal", "iL", (int) a0, (long long) a1);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "[B", &value))
          {
            throwTypeError("readInternal", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static void JNICALL t_PythonIndexInput_seekInternal5(JNIEnv *jenv, jobject jobj, jlong a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexInput::mids$[PythonIndexInput::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "seekInternal", "L", (long long) a0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static PyObject *t_PythonIndexInput_get__self(t_PythonIndexInput *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/NumericTokenStream$NumericTermAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *NumericTokenStream$NumericTermAttribute::class$ = NULL;
        jmethodID *NumericTokenStream$NumericTermAttribute::mids$ = NULL;
        bool NumericTokenStream$NumericTermAttribute::live$ = false;

        jclass NumericTokenStream$NumericTermAttribute::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/NumericTokenStream$NumericTermAttribute");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getRawValue_54c6a17a] = env->getMethodID(cls, "getRawValue", "()J");
            mids$[mid_getShift_54c6a179] = env->getMethodID(cls, "getShift", "()I");
            mids$[mid_getValueSize_54c6a179] = env->getMethodID(cls, "getValueSize", "()I");
            mids$[mid_incShift_54c6a179] = env->getMethodID(cls, "incShift", "()I");
            mids$[mid_init_72e1d373] = env->getMethodID(cls, "init", "(JIII)V");
            mids$[mid_setShift_39c7bd3c] = env->getMethodID(cls, "setShift", "(I)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong NumericTokenStream$NumericTermAttribute::getRawValue() const
        {
          return env->callLongMethod(this$, mids$[mid_getRawValue_54c6a17a]);
        }

        jint NumericTokenStream$NumericTermAttribute::getShift() const
        {
          return env->callIntMethod(this$, mids$[mid_getShift_54c6a179]);
        }

        jint NumericTokenStream$NumericTermAttribute::getValueSize() const
        {
          return env->callIntMethod(this$, mids$[mid_getValueSize_54c6a179]);
        }

        jint NumericTokenStream$NumericTermAttribute::incShift() const
        {
          return env->callIntMethod(this$, mids$[mid_incShift_54c6a179]);
        }

        void NumericTokenStream$NumericTermAttribute::init(jlong a0, jint a1, jint a2, jint a3) const
        {
          env->callVoidMethod(this$, mids$[mid_init_72e1d373], a0, a1, a2, a3);
        }

        void NumericTokenStream$NumericTermAttribute::setShift(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setShift_39c7bd3c], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_NumericTokenStream$NumericTermAttribute_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericTokenStream$NumericTermAttribute_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericTokenStream$NumericTermAttribute_getRawValue(t_NumericTokenStream$NumericTermAttribute *self);
        static PyObject *t_NumericTokenStream$NumericTermAttribute_getShift(t_NumericTokenStream$NumericTermAttribute *self);
        static PyObject *t_NumericTokenStream$NumericTermAttribute_getValueSize(t_NumericTokenStream$NumericTermAttribute *self);
        static PyObject *t_NumericTokenStream$NumericTermAttribute_incShift(t_NumericTokenStream$NumericTermAttribute *self);
        static PyObject *t_NumericTokenStream$NumericTermAttribute_init(t_NumericTokenStream$NumericTermAttribute *self, PyObject *args);
        static PyObject *t_NumericTokenStream$NumericTermAttribute_setShift(t_NumericTokenStream$NumericTermAttribute *self, PyObject *arg);
        static PyObject *t_NumericTokenStream$NumericTermAttribute_get__rawValue(t_NumericTokenStream$NumericTermAttribute *self, void *data);
        static PyObject *t_NumericTokenStream$NumericTermAttribute_get__shift(t_NumericTokenStream$NumericTermAttribute *self, void *data);
        static int t_NumericTokenStream$NumericTermAttribute_set__shift(t_NumericTokenStream$NumericTermAttribute *self, PyObject *arg, void *data);
        static PyObject *t_NumericTokenStream$NumericTermAttribute_get__valueSize(t_NumericTokenStream$NumericTermAttribute *self, void *data);
        static PyGetSetDef t_NumericTokenStream$NumericTermAttribute__fields_[] = {
          DECLARE_GET_FIELD(t_NumericTokenStream$NumericTermAttribute, rawValue),
          DECLARE_GETSET_FIELD(t_NumericTokenStream$NumericTermAttribute, shift),
          DECLARE_GET_FIELD(t_NumericTokenStream$NumericTermAttribute, valueSize),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_NumericTokenStream$NumericTermAttribute__methods_[] = {
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttribute, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttribute, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttribute, getRawValue, METH_NOARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttribute, getShift, METH_NOARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttribute, getValueSize, METH_NOARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttribute, incShift, METH_NOARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttribute, init, METH_VARARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttribute, setShift, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NumericTokenStream$NumericTermAttribute, t_NumericTokenStream$NumericTermAttribute, ::org::apache::lucene::util::Attribute, NumericTokenStream$NumericTermAttribute, abstract_init, 0, 0, t_NumericTokenStream$NumericTermAttribute__fields_, 0, 0);

        void t_NumericTokenStream$NumericTermAttribute::install(PyObject *module)
        {
          installType(&PY_TYPE(NumericTokenStream$NumericTermAttribute), module, "NumericTokenStream$NumericTermAttribute", 0);
        }

        void t_NumericTokenStream$NumericTermAttribute::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NumericTokenStream$NumericTermAttribute).tp_dict, "class_", make_descriptor(NumericTokenStream$NumericTermAttribute::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NumericTokenStream$NumericTermAttribute).tp_dict, "wrapfn_", make_descriptor(t_NumericTokenStream$NumericTermAttribute::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NumericTokenStream$NumericTermAttribute).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NumericTokenStream$NumericTermAttribute_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NumericTokenStream$NumericTermAttribute::initializeClass, 1)))
            return NULL;
          return t_NumericTokenStream$NumericTermAttribute::wrap_Object(NumericTokenStream$NumericTermAttribute(((t_NumericTokenStream$NumericTermAttribute *) arg)->object.this$));
        }
        static PyObject *t_NumericTokenStream$NumericTermAttribute_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NumericTokenStream$NumericTermAttribute::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NumericTokenStream$NumericTermAttribute_getRawValue(t_NumericTokenStream$NumericTermAttribute *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getRawValue());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttribute_getShift(t_NumericTokenStream$NumericTermAttribute *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getShift());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttribute_getValueSize(t_NumericTokenStream$NumericTermAttribute *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getValueSize());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttribute_incShift(t_NumericTokenStream$NumericTermAttribute *self)
        {
          jint result;
          OBJ_CALL(result = self->object.incShift());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttribute_init(t_NumericTokenStream$NumericTermAttribute *self, PyObject *args)
        {
          jlong a0;
          jint a1;
          jint a2;
          jint a3;

          if (!parseArgs(args, "JIII", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.init(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "init", args);
          return NULL;
        }

        static PyObject *t_NumericTokenStream$NumericTermAttribute_setShift(t_NumericTokenStream$NumericTermAttribute *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setShift(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setShift", arg);
          return NULL;
        }

        static PyObject *t_NumericTokenStream$NumericTermAttribute_get__rawValue(t_NumericTokenStream$NumericTermAttribute *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getRawValue());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttribute_get__shift(t_NumericTokenStream$NumericTermAttribute *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getShift());
          return PyInt_FromLong((long) value);
        }
        static int t_NumericTokenStream$NumericTermAttribute_set__shift(t_NumericTokenStream$NumericTermAttribute *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setShift(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "shift", arg);
          return -1;
        }

        static PyObject *t_NumericTokenStream$NumericTermAttribute_get__valueSize(t_NumericTokenStream$NumericTermAttribute *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getValueSize());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/simple/SimpleQueryParser.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "java/lang/Float.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/util/Map.h"
#include "org/apache/lucene/search/BooleanClause$Occur.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace simple {

          ::java::lang::Class *SimpleQueryParser::class$ = NULL;
          jmethodID *SimpleQueryParser::mids$ = NULL;
          bool SimpleQueryParser::live$ = false;
          jint SimpleQueryParser::AND_OPERATOR = (jint) 0;
          jint SimpleQueryParser::ESCAPE_OPERATOR = (jint) 0;
          jint SimpleQueryParser::FUZZY_OPERATOR = (jint) 0;
          jint SimpleQueryParser::NEAR_OPERATOR = (jint) 0;
          jint SimpleQueryParser::NOT_OPERATOR = (jint) 0;
          jint SimpleQueryParser::OR_OPERATOR = (jint) 0;
          jint SimpleQueryParser::PHRASE_OPERATOR = (jint) 0;
          jint SimpleQueryParser::PRECEDENCE_OPERATORS = (jint) 0;
          jint SimpleQueryParser::PREFIX_OPERATOR = (jint) 0;
          jint SimpleQueryParser::WHITESPACE_OPERATOR = (jint) 0;

          jclass SimpleQueryParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/simple/SimpleQueryParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_b5f2d646] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/util/Map;)V");
              mids$[mid_init$_55ca1e02] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/lang/String;)V");
              mids$[mid_init$_284c8124] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/util/Map;I)V");
              mids$[mid_getDefaultOperator_157730ed] = env->getMethodID(cls, "getDefaultOperator", "()Lorg/apache/lucene/search/BooleanClause$Occur;");
              mids$[mid_parse_fbed2634] = env->getMethodID(cls, "parse", "(Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_setDefaultOperator_23bdc104] = env->getMethodID(cls, "setDefaultOperator", "(Lorg/apache/lucene/search/BooleanClause$Occur;)V");
              mids$[mid_newPrefixQuery_fbed2634] = env->getMethodID(cls, "newPrefixQuery", "(Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_newFuzzyQuery_936f6c82] = env->getMethodID(cls, "newFuzzyQuery", "(Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
              mids$[mid_newPhraseQuery_936f6c82] = env->getMethodID(cls, "newPhraseQuery", "(Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
              mids$[mid_simplify_1ffd0b56] = env->getMethodID(cls, "simplify", "(Lorg/apache/lucene/search/BooleanQuery;)Lorg/apache/lucene/search/Query;");
              mids$[mid_newDefaultQuery_fbed2634] = env->getMethodID(cls, "newDefaultQuery", "(Ljava/lang/String;)Lorg/apache/lucene/search/Query;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              AND_OPERATOR = env->getStaticIntField(cls, "AND_OPERATOR");
              ESCAPE_OPERATOR = env->getStaticIntField(cls, "ESCAPE_OPERATOR");
              FUZZY_OPERATOR = env->getStaticIntField(cls, "FUZZY_OPERATOR");
              NEAR_OPERATOR = env->getStaticIntField(cls, "NEAR_OPERATOR");
              NOT_OPERATOR = env->getStaticIntField(cls, "NOT_OPERATOR");
              OR_OPERATOR = env->getStaticIntField(cls, "OR_OPERATOR");
              PHRASE_OPERATOR = env->getStaticIntField(cls, "PHRASE_OPERATOR");
              PRECEDENCE_OPERATORS = env->getStaticIntField(cls, "PRECEDENCE_OPERATORS");
              PREFIX_OPERATOR = env->getStaticIntField(cls, "PREFIX_OPERATOR");
              WHITESPACE_OPERATOR = env->getStaticIntField(cls, "WHITESPACE_OPERATOR");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleQueryParser::SimpleQueryParser(const ::org::apache::lucene::analysis::Analyzer & a0, const ::java::util::Map & a1) : ::org::apache::lucene::util::QueryBuilder(env->newObject(initializeClass, &mids$, mid_init$_b5f2d646, a0.this$, a1.this$)) {}

          SimpleQueryParser::SimpleQueryParser(const ::org::apache::lucene::analysis::Analyzer & a0, const ::java::lang::String & a1) : ::org::apache::lucene::util::QueryBuilder(env->newObject(initializeClass, &mids$, mid_init$_55ca1e02, a0.this$, a1.this$)) {}

          SimpleQueryParser::SimpleQueryParser(const ::org::apache::lucene::analysis::Analyzer & a0, const ::java::util::Map & a1, jint a2) : ::org::apache::lucene::util::QueryBuilder(env->newObject(initializeClass, &mids$, mid_init$_284c8124, a0.this$, a1.this$, a2)) {}

          ::org::apache::lucene::search::BooleanClause$Occur SimpleQueryParser::getDefaultOperator() const
          {
            return ::org::apache::lucene::search::BooleanClause$Occur(env->callObjectMethod(this$, mids$[mid_getDefaultOperator_157730ed]));
          }

          ::org::apache::lucene::search::Query SimpleQueryParser::parse(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_parse_fbed2634], a0.this$));
          }

          void SimpleQueryParser::setDefaultOperator(const ::org::apache::lucene::search::BooleanClause$Occur & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setDefaultOperator_23bdc104], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace simple {
          static PyObject *t_SimpleQueryParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleQueryParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleQueryParser_init_(t_SimpleQueryParser *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleQueryParser_getDefaultOperator(t_SimpleQueryParser *self);
          static PyObject *t_SimpleQueryParser_parse(t_SimpleQueryParser *self, PyObject *arg);
          static PyObject *t_SimpleQueryParser_setDefaultOperator(t_SimpleQueryParser *self, PyObject *arg);
          static PyObject *t_SimpleQueryParser_get__defaultOperator(t_SimpleQueryParser *self, void *data);
          static int t_SimpleQueryParser_set__defaultOperator(t_SimpleQueryParser *self, PyObject *arg, void *data);
          static PyGetSetDef t_SimpleQueryParser__fields_[] = {
            DECLARE_GETSET_FIELD(t_SimpleQueryParser, defaultOperator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SimpleQueryParser__methods_[] = {
            DECLARE_METHOD(t_SimpleQueryParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleQueryParser, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleQueryParser, getDefaultOperator, METH_NOARGS),
            DECLARE_METHOD(t_SimpleQueryParser, parse, METH_O),
            DECLARE_METHOD(t_SimpleQueryParser, setDefaultOperator, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SimpleQueryParser, t_SimpleQueryParser, ::org::apache::lucene::util::QueryBuilder, SimpleQueryParser, t_SimpleQueryParser_init_, 0, 0, t_SimpleQueryParser__fields_, 0, 0);

          void t_SimpleQueryParser::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleQueryParser), module, "SimpleQueryParser", 0);
          }

          void t_SimpleQueryParser::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SimpleQueryParser).tp_dict, "class_", make_descriptor(SimpleQueryParser::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SimpleQueryParser).tp_dict, "wrapfn_", make_descriptor(t_SimpleQueryParser::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SimpleQueryParser).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SimpleQueryParser::initializeClass);
            PyDict_SetItemString(PY_TYPE(SimpleQueryParser).tp_dict, "AND_OPERATOR", make_descriptor(SimpleQueryParser::AND_OPERATOR));
            PyDict_SetItemString(PY_TYPE(SimpleQueryParser).tp_dict, "ESCAPE_OPERATOR", make_descriptor(SimpleQueryParser::ESCAPE_OPERATOR));
            PyDict_SetItemString(PY_TYPE(SimpleQueryParser).tp_dict, "FUZZY_OPERATOR", make_descriptor(SimpleQueryParser::FUZZY_OPERATOR));
            PyDict_SetItemString(PY_TYPE(SimpleQueryParser).tp_dict, "NEAR_OPERATOR", make_descriptor(SimpleQueryParser::NEAR_OPERATOR));
            PyDict_SetItemString(PY_TYPE(SimpleQueryParser).tp_dict, "NOT_OPERATOR", make_descriptor(SimpleQueryParser::NOT_OPERATOR));
            PyDict_SetItemString(PY_TYPE(SimpleQueryParser).tp_dict, "OR_OPERATOR", make_descriptor(SimpleQueryParser::OR_OPERATOR));
            PyDict_SetItemString(PY_TYPE(SimpleQueryParser).tp_dict, "PHRASE_OPERATOR", make_descriptor(SimpleQueryParser::PHRASE_OPERATOR));
            PyDict_SetItemString(PY_TYPE(SimpleQueryParser).tp_dict, "PRECEDENCE_OPERATORS", make_descriptor(SimpleQueryParser::PRECEDENCE_OPERATORS));
            PyDict_SetItemString(PY_TYPE(SimpleQueryParser).tp_dict, "PREFIX_OPERATOR", make_descriptor(SimpleQueryParser::PREFIX_OPERATOR));
            PyDict_SetItemString(PY_TYPE(SimpleQueryParser).tp_dict, "WHITESPACE_OPERATOR", make_descriptor(SimpleQueryParser::WHITESPACE_OPERATOR));
          }

          static PyObject *t_SimpleQueryParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleQueryParser::initializeClass, 1)))
              return NULL;
            return t_SimpleQueryParser::wrap_Object(SimpleQueryParser(((t_SimpleQueryParser *) arg)->object.this$));
          }
          static PyObject *t_SimpleQueryParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleQueryParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleQueryParser_init_(t_SimpleQueryParser *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                ::java::util::Map a1((jobject) NULL);
                PyTypeObject **p1;
                SimpleQueryParser object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_))
                {
                  INT_CALL(object = SimpleQueryParser(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                SimpleQueryParser object((jobject) NULL);

                if (!parseArgs(args, "ks", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = SimpleQueryParser(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                ::java::util::Map a1((jobject) NULL);
                PyTypeObject **p1;
                jint a2;
                SimpleQueryParser object((jobject) NULL);

                if (!parseArgs(args, "kKI", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_, &a2))
                {
                  INT_CALL(object = SimpleQueryParser(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SimpleQueryParser_getDefaultOperator(t_SimpleQueryParser *self)
          {
            ::org::apache::lucene::search::BooleanClause$Occur result((jobject) NULL);
            OBJ_CALL(result = self->object.getDefaultOperator());
            return ::org::apache::lucene::search::t_BooleanClause$Occur::wrap_Object(result);
          }

          static PyObject *t_SimpleQueryParser_parse(t_SimpleQueryParser *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.parse(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "parse", arg);
            return NULL;
          }

          static PyObject *t_SimpleQueryParser_setDefaultOperator(t_SimpleQueryParser *self, PyObject *arg)
          {
            ::org::apache::lucene::search::BooleanClause$Occur a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, &a0, &p0, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_))
            {
              OBJ_CALL(self->object.setDefaultOperator(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setDefaultOperator", arg);
            return NULL;
          }

          static PyObject *t_SimpleQueryParser_get__defaultOperator(t_SimpleQueryParser *self, void *data)
          {
            ::org::apache::lucene::search::BooleanClause$Occur value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultOperator());
            return ::org::apache::lucene::search::t_BooleanClause$Occur::wrap_Object(value);
          }
          static int t_SimpleQueryParser_set__defaultOperator(t_SimpleQueryParser *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::BooleanClause$Occur value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, &value))
              {
                INT_CALL(self->object.setDefaultOperator(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "defaultOperator", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/text/Collator.h"
#include "java/util/Locale.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/util/Comparator.h"
#include "java/lang/Cloneable.h"
#include "JArray.h"

namespace java {
  namespace text {

    ::java::lang::Class *Collator::class$ = NULL;
    jmethodID *Collator::mids$ = NULL;
    bool Collator::live$ = false;
    jint Collator::CANONICAL_DECOMPOSITION = (jint) 0;
    jint Collator::FULL_DECOMPOSITION = (jint) 0;
    jint Collator::IDENTICAL = (jint) 0;
    jint Collator::NO_DECOMPOSITION = (jint) 0;
    jint Collator::PRIMARY = (jint) 0;
    jint Collator::SECONDARY = (jint) 0;
    jint Collator::TERTIARY = (jint) 0;

    jclass Collator::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/text/Collator");

        mids$ = new jmethodID[max_mid];
        mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");
        mids$[mid_compare_466982ed] = env->getMethodID(cls, "compare", "(Ljava/lang/Object;Ljava/lang/Object;)I");
        mids$[mid_compare_4a26475d] = env->getMethodID(cls, "compare", "(Ljava/lang/String;Ljava/lang/String;)I");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_equals_4a26474e] = env->getMethodID(cls, "equals", "(Ljava/lang/String;Ljava/lang/String;)Z");
        mids$[mid_getAvailableLocales_59cb5b46] = env->getStaticMethodID(cls, "getAvailableLocales", "()[Ljava/util/Locale;");
        mids$[mid_getDecomposition_54c6a179] = env->getMethodID(cls, "getDecomposition", "()I");
        mids$[mid_getInstance_44b7fa29] = env->getStaticMethodID(cls, "getInstance", "()Ljava/text/Collator;");
        mids$[mid_getInstance_e12c63f2] = env->getStaticMethodID(cls, "getInstance", "(Ljava/util/Locale;)Ljava/text/Collator;");
        mids$[mid_getStrength_54c6a179] = env->getMethodID(cls, "getStrength", "()I");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_setDecomposition_39c7bd3c] = env->getMethodID(cls, "setDecomposition", "(I)V");
        mids$[mid_setStrength_39c7bd3c] = env->getMethodID(cls, "setStrength", "(I)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        CANONICAL_DECOMPOSITION = env->getStaticIntField(cls, "CANONICAL_DECOMPOSITION");
        FULL_DECOMPOSITION = env->getStaticIntField(cls, "FULL_DECOMPOSITION");
        IDENTICAL = env->getStaticIntField(cls, "IDENTICAL");
        NO_DECOMPOSITION = env->getStaticIntField(cls, "NO_DECOMPOSITION");
        PRIMARY = env->getStaticIntField(cls, "PRIMARY");
        SECONDARY = env->getStaticIntField(cls, "SECONDARY");
        TERTIARY = env->getStaticIntField(cls, "TERTIARY");
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    ::java::lang::Object Collator::clone() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_clone_846352c3]));
    }

    jint Collator::compare(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
    {
      return env->callIntMethod(this$, mids$[mid_compare_466982ed], a0.this$, a1.this$);
    }

    jint Collator::compare(const ::java::lang::String & a0, const ::java::lang::String & a1) const
    {
      return env->callIntMethod(this$, mids$[mid_compare_4a26475d], a0.this$, a1.this$);
    }

    jboolean Collator::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    jboolean Collator::equals(const ::java::lang::String & a0, const ::java::lang::String & a1) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_4a26474e], a0.this$, a1.this$);
    }

    JArray< ::java::util::Locale > Collator::getAvailableLocales()
    {
      jclass cls = env->getClass(initializeClass);
      return JArray< ::java::util::Locale >(env->callStaticObjectMethod(cls, mids$[mid_getAvailableLocales_59cb5b46]));
    }

    jint Collator::getDecomposition() const
    {
      return env->callIntMethod(this$, mids$[mid_getDecomposition_54c6a179]);
    }

    Collator Collator::getInstance()
    {
      jclass cls = env->getClass(initializeClass);
      return Collator(env->callStaticObjectMethod(cls, mids$[mid_getInstance_44b7fa29]));
    }

    Collator Collator::getInstance(const ::java::util::Locale & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Collator(env->callStaticObjectMethod(cls, mids$[mid_getInstance_e12c63f2], a0.this$));
    }

    jint Collator::getStrength() const
    {
      return env->callIntMethod(this$, mids$[mid_getStrength_54c6a179]);
    }

    jint Collator::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    void Collator::setDecomposition(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setDecomposition_39c7bd3c], a0);
    }

    void Collator::setStrength(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setStrength_39c7bd3c], a0);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace text {
    static PyObject *t_Collator_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collator_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collator_clone(t_Collator *self);
    static PyObject *t_Collator_compare(t_Collator *self, PyObject *args);
    static PyObject *t_Collator_equals(t_Collator *self, PyObject *args);
    static PyObject *t_Collator_getAvailableLocales(PyTypeObject *type);
    static PyObject *t_Collator_getDecomposition(t_Collator *self);
    static PyObject *t_Collator_getInstance(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collator_getStrength(t_Collator *self);
    static PyObject *t_Collator_hashCode(t_Collator *self, PyObject *args);
    static PyObject *t_Collator_setDecomposition(t_Collator *self, PyObject *arg);
    static PyObject *t_Collator_setStrength(t_Collator *self, PyObject *arg);
    static PyObject *t_Collator_get__availableLocales(t_Collator *self, void *data);
    static PyObject *t_Collator_get__decomposition(t_Collator *self, void *data);
    static int t_Collator_set__decomposition(t_Collator *self, PyObject *arg, void *data);
    static PyObject *t_Collator_get__instance(t_Collator *self, void *data);
    static PyObject *t_Collator_get__strength(t_Collator *self, void *data);
    static int t_Collator_set__strength(t_Collator *self, PyObject *arg, void *data);
    static PyGetSetDef t_Collator__fields_[] = {
      DECLARE_GET_FIELD(t_Collator, availableLocales),
      DECLARE_GETSET_FIELD(t_Collator, decomposition),
      DECLARE_GET_FIELD(t_Collator, instance),
      DECLARE_GETSET_FIELD(t_Collator, strength),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Collator__methods_[] = {
      DECLARE_METHOD(t_Collator, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collator, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collator, clone, METH_NOARGS),
      DECLARE_METHOD(t_Collator, compare, METH_VARARGS),
      DECLARE_METHOD(t_Collator, equals, METH_VARARGS),
      DECLARE_METHOD(t_Collator, getAvailableLocales, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Collator, getDecomposition, METH_NOARGS),
      DECLARE_METHOD(t_Collator, getInstance, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collator, getStrength, METH_NOARGS),
      DECLARE_METHOD(t_Collator, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Collator, setDecomposition, METH_O),
      DECLARE_METHOD(t_Collator, setStrength, METH_O),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Collator, t_Collator, ::java::lang::Object, Collator, abstract_init, 0, 0, t_Collator__fields_, 0, 0);

    void t_Collator::install(PyObject *module)
    {
      installType(&PY_TYPE(Collator), module, "Collator", 0);
    }

    void t_Collator::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Collator).tp_dict, "class_", make_descriptor(Collator::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Collator).tp_dict, "wrapfn_", make_descriptor(t_Collator::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Collator).tp_dict, "boxfn_", make_descriptor(boxObject));
      env->getClass(Collator::initializeClass);
      PyDict_SetItemString(PY_TYPE(Collator).tp_dict, "CANONICAL_DECOMPOSITION", make_descriptor(Collator::CANONICAL_DECOMPOSITION));
      PyDict_SetItemString(PY_TYPE(Collator).tp_dict, "FULL_DECOMPOSITION", make_descriptor(Collator::FULL_DECOMPOSITION));
      PyDict_SetItemString(PY_TYPE(Collator).tp_dict, "IDENTICAL", make_descriptor(Collator::IDENTICAL));
      PyDict_SetItemString(PY_TYPE(Collator).tp_dict, "NO_DECOMPOSITION", make_descriptor(Collator::NO_DECOMPOSITION));
      PyDict_SetItemString(PY_TYPE(Collator).tp_dict, "PRIMARY", make_descriptor(Collator::PRIMARY));
      PyDict_SetItemString(PY_TYPE(Collator).tp_dict, "SECONDARY", make_descriptor(Collator::SECONDARY));
      PyDict_SetItemString(PY_TYPE(Collator).tp_dict, "TERTIARY", make_descriptor(Collator::TERTIARY));
    }

    static PyObject *t_Collator_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Collator::initializeClass, 1)))
        return NULL;
      return t_Collator::wrap_Object(Collator(((t_Collator *) arg)->object.this$));
    }
    static PyObject *t_Collator_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Collator::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Collator_clone(t_Collator *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.clone());
      return ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_Collator_compare(t_Collator *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::Object a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "oo", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "compare", args);
      return NULL;
    }

    static PyObject *t_Collator_equals(t_Collator *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(result = self->object.equals(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
      }

      return callSuper(&PY_TYPE(Collator), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Collator_getAvailableLocales(PyTypeObject *type)
    {
      JArray< ::java::util::Locale > result((jobject) NULL);
      OBJ_CALL(result = ::java::text::Collator::getAvailableLocales());
      return JArray<jobject>(result.this$).wrap(::java::util::t_Locale::wrap_jobject);
    }

    static PyObject *t_Collator_getDecomposition(t_Collator *self)
    {
      jint result;
      OBJ_CALL(result = self->object.getDecomposition());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_Collator_getInstance(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          Collator result((jobject) NULL);
          OBJ_CALL(result = ::java::text::Collator::getInstance());
          return t_Collator::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          Collator result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = ::java::text::Collator::getInstance(a0));
            return t_Collator::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getInstance", args);
      return NULL;
    }

    static PyObject *t_Collator_getStrength(t_Collator *self)
    {
      jint result;
      OBJ_CALL(result = self->object.getStrength());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_Collator_hashCode(t_Collator *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Collator), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Collator_setDecomposition(t_Collator *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.setDecomposition(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setDecomposition", arg);
      return NULL;
    }

    static PyObject *t_Collator_setStrength(t_Collator *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.setStrength(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setStrength", arg);
      return NULL;
    }

    static PyObject *t_Collator_get__availableLocales(t_Collator *self, void *data)
    {
      JArray< ::java::util::Locale > value((jobject) NULL);
      OBJ_CALL(value = self->object.getAvailableLocales());
      return JArray<jobject>(value.this$).wrap(::java::util::t_Locale::wrap_jobject);
    }

    static PyObject *t_Collator_get__decomposition(t_Collator *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getDecomposition());
      return PyInt_FromLong((long) value);
    }
    static int t_Collator_set__decomposition(t_Collator *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setDecomposition(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "decomposition", arg);
      return -1;
    }

    static PyObject *t_Collator_get__instance(t_Collator *self, void *data)
    {
      Collator value((jobject) NULL);
      OBJ_CALL(value = self->object.getInstance());
      return t_Collator::wrap_Object(value);
    }

    static PyObject *t_Collator_get__strength(t_Collator *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getStrength());
      return PyInt_FromLong((long) value);
    }
    static int t_Collator_set__strength(t_Collator *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setStrength(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "strength", arg);
      return -1;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/NotQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/surround/query/SrndQuery.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/surround/query/BasicQueryFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *NotQuery::class$ = NULL;
            jmethodID *NotQuery::mids$ = NULL;
            bool NotQuery::live$ = false;

            jclass NotQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/NotQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f09ca325] = env->getMethodID(cls, "<init>", "(Ljava/util/List;Ljava/lang/String;)V");
                mids$[mid_makeLuceneQueryFieldNoBoost_1aaeee30] = env->getMethodID(cls, "makeLuceneQueryFieldNoBoost", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)Lorg/apache/lucene/search/Query;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            NotQuery::NotQuery(const ::java::util::List & a0, const ::java::lang::String & a1) : ::org::apache::lucene::queryparser::surround::query::ComposedQuery(env->newObject(initializeClass, &mids$, mid_init$_f09ca325, a0.this$, a1.this$)) {}

            ::org::apache::lucene::search::Query NotQuery::makeLuceneQueryFieldNoBoost(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a1) const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_makeLuceneQueryFieldNoBoost_1aaeee30], a0.this$, a1.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_NotQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NotQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_NotQuery_init_(t_NotQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_NotQuery_makeLuceneQueryFieldNoBoost(t_NotQuery *self, PyObject *args);

            static PyMethodDef t_NotQuery__methods_[] = {
              DECLARE_METHOD(t_NotQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NotQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NotQuery, makeLuceneQueryFieldNoBoost, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(NotQuery, t_NotQuery, ::org::apache::lucene::queryparser::surround::query::ComposedQuery, NotQuery, t_NotQuery_init_, 0, 0, 0, 0, 0);

            void t_NotQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(NotQuery), module, "NotQuery", 0);
            }

            void t_NotQuery::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(NotQuery).tp_dict, "class_", make_descriptor(NotQuery::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(NotQuery).tp_dict, "wrapfn_", make_descriptor(t_NotQuery::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(NotQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_NotQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, NotQuery::initializeClass, 1)))
                return NULL;
              return t_NotQuery::wrap_Object(NotQuery(((t_NotQuery *) arg)->object.this$));
            }
            static PyObject *t_NotQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, NotQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_NotQuery_init_(t_NotQuery *self, PyObject *args, PyObject *kwds)
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::lang::String a1((jobject) NULL);
              NotQuery object((jobject) NULL);

              if (!parseArgs(args, "Ks", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1))
              {
                INT_CALL(object = NotQuery(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_NotQuery_makeLuceneQueryFieldNoBoost(t_NotQuery *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.makeLuceneQueryFieldNoBoost(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(NotQuery), (PyObject *) self, "makeLuceneQueryFieldNoBoost", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/Codec.h"
#include "org/apache/lucene/util/NamedSPILoader$NamedSPI.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/TermVectorsFormat.h"
#include "org/apache/lucene/codecs/StoredFieldsFormat.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/PostingsFormat.h"
#include "org/apache/lucene/codecs/DocValuesFormat.h"
#include "java/lang/ClassLoader.h"
#include "org/apache/lucene/codecs/SegmentInfoFormat.h"
#include "org/apache/lucene/codecs/LiveDocsFormat.h"
#include "org/apache/lucene/codecs/NormsFormat.h"
#include "org/apache/lucene/codecs/FieldInfosFormat.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *Codec::class$ = NULL;
        jmethodID *Codec::mids$ = NULL;
        bool Codec::live$ = false;

        jclass Codec::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/Codec");

            mids$ = new jmethodID[max_mid];
            mids$[mid_availableCodecs_03e99967] = env->getStaticMethodID(cls, "availableCodecs", "()Ljava/util/Set;");
            mids$[mid_docValuesFormat_9a259760] = env->getMethodID(cls, "docValuesFormat", "()Lorg/apache/lucene/codecs/DocValuesFormat;");
            mids$[mid_fieldInfosFormat_82160220] = env->getMethodID(cls, "fieldInfosFormat", "()Lorg/apache/lucene/codecs/FieldInfosFormat;");
            mids$[mid_forName_e21a4685] = env->getStaticMethodID(cls, "forName", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/Codec;");
            mids$[mid_getDefault_27f0a02b] = env->getStaticMethodID(cls, "getDefault", "()Lorg/apache/lucene/codecs/Codec;");
            mids$[mid_getName_14c7b5c5] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");
            mids$[mid_liveDocsFormat_fcc69d9a] = env->getMethodID(cls, "liveDocsFormat", "()Lorg/apache/lucene/codecs/LiveDocsFormat;");
            mids$[mid_normsFormat_03b89e43] = env->getMethodID(cls, "normsFormat", "()Lorg/apache/lucene/codecs/NormsFormat;");
            mids$[mid_postingsFormat_d12d16c8] = env->getMethodID(cls, "postingsFormat", "()Lorg/apache/lucene/codecs/PostingsFormat;");
            mids$[mid_reloadCodecs_9110048d] = env->getStaticMethodID(cls, "reloadCodecs", "(Ljava/lang/ClassLoader;)V");
            mids$[mid_segmentInfoFormat_c24d8633] = env->getMethodID(cls, "segmentInfoFormat", "()Lorg/apache/lucene/codecs/SegmentInfoFormat;");
            mids$[mid_setDefault_848f310e] = env->getStaticMethodID(cls, "setDefault", "(Lorg/apache/lucene/codecs/Codec;)V");
            mids$[mid_storedFieldsFormat_2b977101] = env->getMethodID(cls, "storedFieldsFormat", "()Lorg/apache/lucene/codecs/StoredFieldsFormat;");
            mids$[mid_termVectorsFormat_bcd1d8b8] = env->getMethodID(cls, "termVectorsFormat", "()Lorg/apache/lucene/codecs/TermVectorsFormat;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::Set Codec::availableCodecs()
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_availableCodecs_03e99967]));
        }

        ::org::apache::lucene::codecs::DocValuesFormat Codec::docValuesFormat() const
        {
          return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_docValuesFormat_9a259760]));
        }

        ::org::apache::lucene::codecs::FieldInfosFormat Codec::fieldInfosFormat() const
        {
          return ::org::apache::lucene::codecs::FieldInfosFormat(env->callObjectMethod(this$, mids$[mid_fieldInfosFormat_82160220]));
        }

        Codec Codec::forName(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return Codec(env->callStaticObjectMethod(cls, mids$[mid_forName_e21a4685], a0.this$));
        }

        Codec Codec::getDefault()
        {
          jclass cls = env->getClass(initializeClass);
          return Codec(env->callStaticObjectMethod(cls, mids$[mid_getDefault_27f0a02b]));
        }

        ::java::lang::String Codec::getName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_14c7b5c5]));
        }

        ::org::apache::lucene::codecs::LiveDocsFormat Codec::liveDocsFormat() const
        {
          return ::org::apache::lucene::codecs::LiveDocsFormat(env->callObjectMethod(this$, mids$[mid_liveDocsFormat_fcc69d9a]));
        }

        ::org::apache::lucene::codecs::NormsFormat Codec::normsFormat() const
        {
          return ::org::apache::lucene::codecs::NormsFormat(env->callObjectMethod(this$, mids$[mid_normsFormat_03b89e43]));
        }

        ::org::apache::lucene::codecs::PostingsFormat Codec::postingsFormat() const
        {
          return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_postingsFormat_d12d16c8]));
        }

        void Codec::reloadCodecs(const ::java::lang::ClassLoader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_reloadCodecs_9110048d], a0.this$);
        }

        ::org::apache::lucene::codecs::SegmentInfoFormat Codec::segmentInfoFormat() const
        {
          return ::org::apache::lucene::codecs::SegmentInfoFormat(env->callObjectMethod(this$, mids$[mid_segmentInfoFormat_c24d8633]));
        }

        void Codec::setDefault(const Codec & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_setDefault_848f310e], a0.this$);
        }

        ::org::apache::lucene::codecs::StoredFieldsFormat Codec::storedFieldsFormat() const
        {
          return ::org::apache::lucene::codecs::StoredFieldsFormat(env->callObjectMethod(this$, mids$[mid_storedFieldsFormat_2b977101]));
        }

        ::org::apache::lucene::codecs::TermVectorsFormat Codec::termVectorsFormat() const
        {
          return ::org::apache::lucene::codecs::TermVectorsFormat(env->callObjectMethod(this$, mids$[mid_termVectorsFormat_bcd1d8b8]));
        }

        ::java::lang::String Codec::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_Codec_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Codec_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Codec_availableCodecs(PyTypeObject *type);
        static PyObject *t_Codec_docValuesFormat(t_Codec *self);
        static PyObject *t_Codec_fieldInfosFormat(t_Codec *self);
        static PyObject *t_Codec_forName(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Codec_getDefault(PyTypeObject *type);
        static PyObject *t_Codec_getName(t_Codec *self);
        static PyObject *t_Codec_liveDocsFormat(t_Codec *self);
        static PyObject *t_Codec_normsFormat(t_Codec *self);
        static PyObject *t_Codec_postingsFormat(t_Codec *self);
        static PyObject *t_Codec_reloadCodecs(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Codec_segmentInfoFormat(t_Codec *self);
        static PyObject *t_Codec_setDefault(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Codec_storedFieldsFormat(t_Codec *self);
        static PyObject *t_Codec_termVectorsFormat(t_Codec *self);
        static PyObject *t_Codec_toString(t_Codec *self, PyObject *args);
        static PyObject *t_Codec_get__default(t_Codec *self, void *data);
        static int t_Codec_set__default(t_Codec *self, PyObject *arg, void *data);
        static PyObject *t_Codec_get__name(t_Codec *self, void *data);
        static PyGetSetDef t_Codec__fields_[] = {
          DECLARE_GETSET_FIELD(t_Codec, default),
          DECLARE_GET_FIELD(t_Codec, name),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Codec__methods_[] = {
          DECLARE_METHOD(t_Codec, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Codec, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Codec, availableCodecs, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_Codec, docValuesFormat, METH_NOARGS),
          DECLARE_METHOD(t_Codec, fieldInfosFormat, METH_NOARGS),
          DECLARE_METHOD(t_Codec, forName, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Codec, getDefault, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_Codec, getName, METH_NOARGS),
          DECLARE_METHOD(t_Codec, liveDocsFormat, METH_NOARGS),
          DECLARE_METHOD(t_Codec, normsFormat, METH_NOARGS),
          DECLARE_METHOD(t_Codec, postingsFormat, METH_NOARGS),
          DECLARE_METHOD(t_Codec, reloadCodecs, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Codec, segmentInfoFormat, METH_NOARGS),
          DECLARE_METHOD(t_Codec, setDefault, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Codec, storedFieldsFormat, METH_NOARGS),
          DECLARE_METHOD(t_Codec, termVectorsFormat, METH_NOARGS),
          DECLARE_METHOD(t_Codec, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Codec, t_Codec, ::java::lang::Object, Codec, abstract_init, 0, 0, t_Codec__fields_, 0, 0);

        void t_Codec::install(PyObject *module)
        {
          installType(&PY_TYPE(Codec), module, "Codec", 0);
        }

        void t_Codec::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Codec).tp_dict, "class_", make_descriptor(Codec::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Codec).tp_dict, "wrapfn_", make_descriptor(t_Codec::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Codec).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Codec_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Codec::initializeClass, 1)))
            return NULL;
          return t_Codec::wrap_Object(Codec(((t_Codec *) arg)->object.this$));
        }
        static PyObject *t_Codec_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Codec::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Codec_availableCodecs(PyTypeObject *type)
        {
          ::java::util::Set result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::codecs::Codec::availableCodecs());
          return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_Codec_docValuesFormat(t_Codec *self)
        {
          ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);
          OBJ_CALL(result = self->object.docValuesFormat());
          return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
        }

        static PyObject *t_Codec_fieldInfosFormat(t_Codec *self)
        {
          ::org::apache::lucene::codecs::FieldInfosFormat result((jobject) NULL);
          OBJ_CALL(result = self->object.fieldInfosFormat());
          return ::org::apache::lucene::codecs::t_FieldInfosFormat::wrap_Object(result);
        }

        static PyObject *t_Codec_forName(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          Codec result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::Codec::forName(a0));
            return t_Codec::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "forName", arg);
          return NULL;
        }

        static PyObject *t_Codec_getDefault(PyTypeObject *type)
        {
          Codec result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::codecs::Codec::getDefault());
          return t_Codec::wrap_Object(result);
        }

        static PyObject *t_Codec_getName(t_Codec *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getName());
          return j2p(result);
        }

        static PyObject *t_Codec_liveDocsFormat(t_Codec *self)
        {
          ::org::apache::lucene::codecs::LiveDocsFormat result((jobject) NULL);
          OBJ_CALL(result = self->object.liveDocsFormat());
          return ::org::apache::lucene::codecs::t_LiveDocsFormat::wrap_Object(result);
        }

        static PyObject *t_Codec_normsFormat(t_Codec *self)
        {
          ::org::apache::lucene::codecs::NormsFormat result((jobject) NULL);
          OBJ_CALL(result = self->object.normsFormat());
          return ::org::apache::lucene::codecs::t_NormsFormat::wrap_Object(result);
        }

        static PyObject *t_Codec_postingsFormat(t_Codec *self)
        {
          ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);
          OBJ_CALL(result = self->object.postingsFormat());
          return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
        }

        static PyObject *t_Codec_reloadCodecs(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::ClassLoader a0((jobject) NULL);

          if (!parseArg(arg, "k", ::java::lang::ClassLoader::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::codecs::Codec::reloadCodecs(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "reloadCodecs", arg);
          return NULL;
        }

        static PyObject *t_Codec_segmentInfoFormat(t_Codec *self)
        {
          ::org::apache::lucene::codecs::SegmentInfoFormat result((jobject) NULL);
          OBJ_CALL(result = self->object.segmentInfoFormat());
          return ::org::apache::lucene::codecs::t_SegmentInfoFormat::wrap_Object(result);
        }

        static PyObject *t_Codec_setDefault(PyTypeObject *type, PyObject *arg)
        {
          Codec a0((jobject) NULL);

          if (!parseArg(arg, "k", Codec::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::codecs::Codec::setDefault(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "setDefault", arg);
          return NULL;
        }

        static PyObject *t_Codec_storedFieldsFormat(t_Codec *self)
        {
          ::org::apache::lucene::codecs::StoredFieldsFormat result((jobject) NULL);
          OBJ_CALL(result = self->object.storedFieldsFormat());
          return ::org::apache::lucene::codecs::t_StoredFieldsFormat::wrap_Object(result);
        }

        static PyObject *t_Codec_termVectorsFormat(t_Codec *self)
        {
          ::org::apache::lucene::codecs::TermVectorsFormat result((jobject) NULL);
          OBJ_CALL(result = self->object.termVectorsFormat());
          return ::org::apache::lucene::codecs::t_TermVectorsFormat::wrap_Object(result);
        }

        static PyObject *t_Codec_toString(t_Codec *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(Codec), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Codec_get__default(t_Codec *self, void *data)
        {
          Codec value((jobject) NULL);
          OBJ_CALL(value = self->object.getDefault());
          return t_Codec::wrap_Object(value);
        }
        static int t_Codec_set__default(t_Codec *self, PyObject *arg, void *data)
        {
          {
            Codec value((jobject) NULL);
            if (!parseArg(arg, "k", Codec::initializeClass, &value))
            {
              INT_CALL(self->object.setDefault(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "default", arg);
          return -1;
        }

        static PyObject *t_Codec_get__name(t_Codec *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getName());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/PrefixCodedTerms$Builder.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *PrefixCodedTerms$Builder::class$ = NULL;
        jmethodID *PrefixCodedTerms$Builder::mids$ = NULL;
        bool PrefixCodedTerms$Builder::live$ = false;

        jclass PrefixCodedTerms$Builder::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/PrefixCodedTerms$Builder");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_7eca6a81] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/index/Term;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PrefixCodedTerms$Builder::PrefixCodedTerms$Builder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PrefixCodedTerms$Builder::add(const ::org::apache::lucene::index::Term & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_7eca6a81], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_PrefixCodedTerms$Builder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PrefixCodedTerms$Builder_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PrefixCodedTerms$Builder_init_(t_PrefixCodedTerms$Builder *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PrefixCodedTerms$Builder_add(t_PrefixCodedTerms$Builder *self, PyObject *arg);

        static PyMethodDef t_PrefixCodedTerms$Builder__methods_[] = {
          DECLARE_METHOD(t_PrefixCodedTerms$Builder, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PrefixCodedTerms$Builder, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PrefixCodedTerms$Builder, add, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PrefixCodedTerms$Builder, t_PrefixCodedTerms$Builder, ::java::lang::Object, PrefixCodedTerms$Builder, t_PrefixCodedTerms$Builder_init_, 0, 0, 0, 0, 0);

        void t_PrefixCodedTerms$Builder::install(PyObject *module)
        {
          installType(&PY_TYPE(PrefixCodedTerms$Builder), module, "PrefixCodedTerms$Builder", 0);
        }

        void t_PrefixCodedTerms$Builder::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PrefixCodedTerms$Builder).tp_dict, "class_", make_descriptor(PrefixCodedTerms$Builder::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PrefixCodedTerms$Builder).tp_dict, "wrapfn_", make_descriptor(t_PrefixCodedTerms$Builder::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PrefixCodedTerms$Builder).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PrefixCodedTerms$Builder_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PrefixCodedTerms$Builder::initializeClass, 1)))
            return NULL;
          return t_PrefixCodedTerms$Builder::wrap_Object(PrefixCodedTerms$Builder(((t_PrefixCodedTerms$Builder *) arg)->object.this$));
        }
        static PyObject *t_PrefixCodedTerms$Builder_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PrefixCodedTerms$Builder::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PrefixCodedTerms$Builder_init_(t_PrefixCodedTerms$Builder *self, PyObject *args, PyObject *kwds)
        {
          PrefixCodedTerms$Builder object((jobject) NULL);

          INT_CALL(object = PrefixCodedTerms$Builder());
          self->object = object;

          return 0;
        }

        static PyObject *t_PrefixCodedTerms$Builder_add(t_PrefixCodedTerms$Builder *self, PyObject *arg)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            OBJ_CALL(self->object.add(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "add", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/ShortFieldSource.h"
#include "org/apache/lucene/search/FieldCache$ShortParser.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *ShortFieldSource::class$ = NULL;
            jmethodID *ShortFieldSource::mids$ = NULL;
            bool ShortFieldSource::live$ = false;

            jclass ShortFieldSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/ShortFieldSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_init$_0d9308c5] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$ShortParser;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ShortFieldSource::ShortFieldSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            ShortFieldSource::ShortFieldSource(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$ShortParser & a1) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_0d9308c5, a0.this$, a1.this$)) {}

            ::java::lang::String ShortFieldSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean ShortFieldSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues ShortFieldSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint ShortFieldSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_ShortFieldSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ShortFieldSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ShortFieldSource_init_(t_ShortFieldSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ShortFieldSource_description(t_ShortFieldSource *self, PyObject *args);
            static PyObject *t_ShortFieldSource_equals(t_ShortFieldSource *self, PyObject *args);
            static PyObject *t_ShortFieldSource_getValues(t_ShortFieldSource *self, PyObject *args);
            static PyObject *t_ShortFieldSource_hashCode(t_ShortFieldSource *self, PyObject *args);

            static PyMethodDef t_ShortFieldSource__methods_[] = {
              DECLARE_METHOD(t_ShortFieldSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ShortFieldSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ShortFieldSource, description, METH_VARARGS),
              DECLARE_METHOD(t_ShortFieldSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_ShortFieldSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_ShortFieldSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(ShortFieldSource, t_ShortFieldSource, ::org::apache::lucene::queries::function::valuesource::FieldCacheSource, ShortFieldSource, t_ShortFieldSource_init_, 0, 0, 0, 0, 0);

            void t_ShortFieldSource::install(PyObject *module)
            {
              installType(&PY_TYPE(ShortFieldSource), module, "ShortFieldSource", 0);
            }

            void t_ShortFieldSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(ShortFieldSource).tp_dict, "class_", make_descriptor(ShortFieldSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(ShortFieldSource).tp_dict, "wrapfn_", make_descriptor(t_ShortFieldSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(ShortFieldSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ShortFieldSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ShortFieldSource::initializeClass, 1)))
                return NULL;
              return t_ShortFieldSource::wrap_Object(ShortFieldSource(((t_ShortFieldSource *) arg)->object.this$));
            }
            static PyObject *t_ShortFieldSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ShortFieldSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ShortFieldSource_init_(t_ShortFieldSource *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ShortFieldSource object((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    INT_CALL(object = ShortFieldSource(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::org::apache::lucene::search::FieldCache$ShortParser a1((jobject) NULL);
                  ShortFieldSource object((jobject) NULL);

                  if (!parseArgs(args, "sk", ::org::apache::lucene::search::FieldCache$ShortParser::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = ShortFieldSource(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_ShortFieldSource_description(t_ShortFieldSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(ShortFieldSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_ShortFieldSource_equals(t_ShortFieldSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(ShortFieldSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_ShortFieldSource_getValues(t_ShortFieldSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(ShortFieldSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_ShortFieldSource_hashCode(t_ShortFieldSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(ShortFieldSource), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/NumDocsValueSource.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *NumDocsValueSource::class$ = NULL;
            jmethodID *NumDocsValueSource::mids$ = NULL;
            bool NumDocsValueSource::live$ = false;

            jclass NumDocsValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/NumDocsValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            NumDocsValueSource::NumDocsValueSource() : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            ::java::lang::String NumDocsValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean NumDocsValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues NumDocsValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint NumDocsValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }

            ::java::lang::String NumDocsValueSource::name() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_NumDocsValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NumDocsValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_NumDocsValueSource_init_(t_NumDocsValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_NumDocsValueSource_description(t_NumDocsValueSource *self, PyObject *args);
            static PyObject *t_NumDocsValueSource_equals(t_NumDocsValueSource *self, PyObject *args);
            static PyObject *t_NumDocsValueSource_getValues(t_NumDocsValueSource *self, PyObject *args);
            static PyObject *t_NumDocsValueSource_hashCode(t_NumDocsValueSource *self, PyObject *args);
            static PyObject *t_NumDocsValueSource_name(t_NumDocsValueSource *self);

            static PyMethodDef t_NumDocsValueSource__methods_[] = {
              DECLARE_METHOD(t_NumDocsValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NumDocsValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NumDocsValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_NumDocsValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_NumDocsValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_NumDocsValueSource, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_NumDocsValueSource, name, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(NumDocsValueSource, t_NumDocsValueSource, ::org::apache::lucene::queries::function::ValueSource, NumDocsValueSource, t_NumDocsValueSource_init_, 0, 0, 0, 0, 0);

            void t_NumDocsValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(NumDocsValueSource), module, "NumDocsValueSource", 0);
            }

            void t_NumDocsValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(NumDocsValueSource).tp_dict, "class_", make_descriptor(NumDocsValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(NumDocsValueSource).tp_dict, "wrapfn_", make_descriptor(t_NumDocsValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(NumDocsValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_NumDocsValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, NumDocsValueSource::initializeClass, 1)))
                return NULL;
              return t_NumDocsValueSource::wrap_Object(NumDocsValueSource(((t_NumDocsValueSource *) arg)->object.this$));
            }
            static PyObject *t_NumDocsValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, NumDocsValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_NumDocsValueSource_init_(t_NumDocsValueSource *self, PyObject *args, PyObject *kwds)
            {
              NumDocsValueSource object((jobject) NULL);

              INT_CALL(object = NumDocsValueSource());
              self->object = object;

              return 0;
            }

            static PyObject *t_NumDocsValueSource_description(t_NumDocsValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(NumDocsValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_NumDocsValueSource_equals(t_NumDocsValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(NumDocsValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_NumDocsValueSource_getValues(t_NumDocsValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(NumDocsValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_NumDocsValueSource_hashCode(t_NumDocsValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(NumDocsValueSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_NumDocsValueSource_name(t_NumDocsValueSource *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.name());
              return j2p(result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CheckIndex$Status$SegmentInfoStatus.h"
#include "org/apache/lucene/index/CheckIndex$Status$StoredFieldStatus.h"
#include "org/apache/lucene/index/CheckIndex$Status$TermIndexStatus.h"
#include "org/apache/lucene/index/CheckIndex$Status$TermVectorStatus.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/CheckIndex$Status$DocValuesStatus.h"
#include "org/apache/lucene/codecs/Codec.h"
#include "org/apache/lucene/index/CheckIndex$Status$FieldNormStatus.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CheckIndex$Status$SegmentInfoStatus::class$ = NULL;
        jmethodID *CheckIndex$Status$SegmentInfoStatus::mids$ = NULL;
        jfieldID *CheckIndex$Status$SegmentInfoStatus::fids$ = NULL;
        bool CheckIndex$Status$SegmentInfoStatus::live$ = false;

        jclass CheckIndex$Status$SegmentInfoStatus::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CheckIndex$Status$SegmentInfoStatus");

            fids$ = new jfieldID[max_fid];
            fids$[fid_codec] = env->getFieldID(cls, "codec", "Lorg/apache/lucene/codecs/Codec;");
            fids$[fid_compound] = env->getFieldID(cls, "compound", "Z");
            fids$[fid_deletionsGen] = env->getFieldID(cls, "deletionsGen", "J");
            fids$[fid_diagnostics] = env->getFieldID(cls, "diagnostics", "Ljava/util/Map;");
            fids$[fid_docCount] = env->getFieldID(cls, "docCount", "I");
            fids$[fid_docStoreCompoundFile] = env->getFieldID(cls, "docStoreCompoundFile", "Z");
            fids$[fid_docStoreOffset] = env->getFieldID(cls, "docStoreOffset", "I");
            fids$[fid_docStoreSegment] = env->getFieldID(cls, "docStoreSegment", "Ljava/lang/String;");
            fids$[fid_docValuesStatus] = env->getFieldID(cls, "docValuesStatus", "Lorg/apache/lucene/index/CheckIndex$Status$DocValuesStatus;");
            fids$[fid_fieldNormStatus] = env->getFieldID(cls, "fieldNormStatus", "Lorg/apache/lucene/index/CheckIndex$Status$FieldNormStatus;");
            fids$[fid_hasDeletions] = env->getFieldID(cls, "hasDeletions", "Z");
            fids$[fid_name] = env->getFieldID(cls, "name", "Ljava/lang/String;");
            fids$[fid_numDeleted] = env->getFieldID(cls, "numDeleted", "I");
            fids$[fid_numFiles] = env->getFieldID(cls, "numFiles", "I");
            fids$[fid_openReaderPassed] = env->getFieldID(cls, "openReaderPassed", "Z");
            fids$[fid_sizeMB] = env->getFieldID(cls, "sizeMB", "D");
            fids$[fid_storedFieldStatus] = env->getFieldID(cls, "storedFieldStatus", "Lorg/apache/lucene/index/CheckIndex$Status$StoredFieldStatus;");
            fids$[fid_termIndexStatus] = env->getFieldID(cls, "termIndexStatus", "Lorg/apache/lucene/index/CheckIndex$Status$TermIndexStatus;");
            fids$[fid_termVectorStatus] = env->getFieldID(cls, "termVectorStatus", "Lorg/apache/lucene/index/CheckIndex$Status$TermVectorStatus;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::codecs::Codec CheckIndex$Status$SegmentInfoStatus::_get_codec() const
        {
          return ::org::apache::lucene::codecs::Codec(env->getObjectField(this$, fids$[fid_codec]));
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_codec(const ::org::apache::lucene::codecs::Codec & a0) const
        {
          env->setObjectField(this$, fids$[fid_codec], a0.this$);
        }

        jboolean CheckIndex$Status$SegmentInfoStatus::_get_compound() const
        {
          return env->getBooleanField(this$, fids$[fid_compound]);
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_compound(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_compound], a0);
        }

        jlong CheckIndex$Status$SegmentInfoStatus::_get_deletionsGen() const
        {
          return env->getLongField(this$, fids$[fid_deletionsGen]);
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_deletionsGen(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_deletionsGen], a0);
        }

        ::java::util::Map CheckIndex$Status$SegmentInfoStatus::_get_diagnostics() const
        {
          return ::java::util::Map(env->getObjectField(this$, fids$[fid_diagnostics]));
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_diagnostics(const ::java::util::Map & a0) const
        {
          env->setObjectField(this$, fids$[fid_diagnostics], a0.this$);
        }

        jint CheckIndex$Status$SegmentInfoStatus::_get_docCount() const
        {
          return env->getIntField(this$, fids$[fid_docCount]);
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_docCount(jint a0) const
        {
          env->setIntField(this$, fids$[fid_docCount], a0);
        }

        jboolean CheckIndex$Status$SegmentInfoStatus::_get_docStoreCompoundFile() const
        {
          return env->getBooleanField(this$, fids$[fid_docStoreCompoundFile]);
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_docStoreCompoundFile(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_docStoreCompoundFile], a0);
        }

        jint CheckIndex$Status$SegmentInfoStatus::_get_docStoreOffset() const
        {
          return env->getIntField(this$, fids$[fid_docStoreOffset]);
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_docStoreOffset(jint a0) const
        {
          env->setIntField(this$, fids$[fid_docStoreOffset], a0);
        }

        ::java::lang::String CheckIndex$Status$SegmentInfoStatus::_get_docStoreSegment() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_docStoreSegment]));
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_docStoreSegment(const ::java::lang::String & a0) const
        {
          env->setObjectField(this$, fids$[fid_docStoreSegment], a0.this$);
        }

        ::org::apache::lucene::index::CheckIndex$Status$DocValuesStatus CheckIndex$Status$SegmentInfoStatus::_get_docValuesStatus() const
        {
          return ::org::apache::lucene::index::CheckIndex$Status$DocValuesStatus(env->getObjectField(this$, fids$[fid_docValuesStatus]));
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_docValuesStatus(const ::org::apache::lucene::index::CheckIndex$Status$DocValuesStatus & a0) const
        {
          env->setObjectField(this$, fids$[fid_docValuesStatus], a0.this$);
        }

        ::org::apache::lucene::index::CheckIndex$Status$FieldNormStatus CheckIndex$Status$SegmentInfoStatus::_get_fieldNormStatus() const
        {
          return ::org::apache::lucene::index::CheckIndex$Status$FieldNormStatus(env->getObjectField(this$, fids$[fid_fieldNormStatus]));
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_fieldNormStatus(const ::org::apache::lucene::index::CheckIndex$Status$FieldNormStatus & a0) const
        {
          env->setObjectField(this$, fids$[fid_fieldNormStatus], a0.this$);
        }

        jboolean CheckIndex$Status$SegmentInfoStatus::_get_hasDeletions() const
        {
          return env->getBooleanField(this$, fids$[fid_hasDeletions]);
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_hasDeletions(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_hasDeletions], a0);
        }

        ::java::lang::String CheckIndex$Status$SegmentInfoStatus::_get_name() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_name]));
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_name(const ::java::lang::String & a0) const
        {
          env->setObjectField(this$, fids$[fid_name], a0.this$);
        }

        jint CheckIndex$Status$SegmentInfoStatus::_get_numDeleted() const
        {
          return env->getIntField(this$, fids$[fid_numDeleted]);
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_numDeleted(jint a0) const
        {
          env->setIntField(this$, fids$[fid_numDeleted], a0);
        }

        jint CheckIndex$Status$SegmentInfoStatus::_get_numFiles() const
        {
          return env->getIntField(this$, fids$[fid_numFiles]);
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_numFiles(jint a0) const
        {
          env->setIntField(this$, fids$[fid_numFiles], a0);
        }

        jboolean CheckIndex$Status$SegmentInfoStatus::_get_openReaderPassed() const
        {
          return env->getBooleanField(this$, fids$[fid_openReaderPassed]);
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_openReaderPassed(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_openReaderPassed], a0);
        }

        jdouble CheckIndex$Status$SegmentInfoStatus::_get_sizeMB() const
        {
          return env->getDoubleField(this$, fids$[fid_sizeMB]);
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_sizeMB(jdouble a0) const
        {
          env->setDoubleField(this$, fids$[fid_sizeMB], a0);
        }

        ::org::apache::lucene::index::CheckIndex$Status$StoredFieldStatus CheckIndex$Status$SegmentInfoStatus::_get_storedFieldStatus() const
        {
          return ::org::apache::lucene::index::CheckIndex$Status$StoredFieldStatus(env->getObjectField(this$, fids$[fid_storedFieldStatus]));
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_storedFieldStatus(const ::org::apache::lucene::index::CheckIndex$Status$StoredFieldStatus & a0) const
        {
          env->setObjectField(this$, fids$[fid_storedFieldStatus], a0.this$);
        }

        ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus CheckIndex$Status$SegmentInfoStatus::_get_termIndexStatus() const
        {
          return ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus(env->getObjectField(this$, fids$[fid_termIndexStatus]));
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_termIndexStatus(const ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus & a0) const
        {
          env->setObjectField(this$, fids$[fid_termIndexStatus], a0.this$);
        }

        ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus CheckIndex$Status$SegmentInfoStatus::_get_termVectorStatus() const
        {
          return ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus(env->getObjectField(this$, fids$[fid_termVectorStatus]));
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_termVectorStatus(const ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus & a0) const
        {
          env->setObjectField(this$, fids$[fid_termVectorStatus], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__codec(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__codec(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__compound(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__compound(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__deletionsGen(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__deletionsGen(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__diagnostics(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__diagnostics(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__docCount(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__docCount(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__docStoreCompoundFile(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__docStoreCompoundFile(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__docStoreOffset(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__docStoreOffset(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__docStoreSegment(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__docStoreSegment(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__docValuesStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__docValuesStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__fieldNormStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__fieldNormStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__hasDeletions(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__hasDeletions(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__name(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__name(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__numDeleted(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__numDeleted(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__numFiles(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__numFiles(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__openReaderPassed(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__openReaderPassed(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__sizeMB(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__sizeMB(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__storedFieldStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__storedFieldStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__termIndexStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__termIndexStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__termVectorStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__termVectorStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);

        static PyGetSetDef t_CheckIndex$Status$SegmentInfoStatus__fields_[] = {
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, codec),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, compound),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, deletionsGen),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, diagnostics),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, docCount),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, docStoreCompoundFile),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, docStoreOffset),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, docStoreSegment),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, docValuesStatus),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, fieldNormStatus),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, hasDeletions),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, name),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, numDeleted),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, numFiles),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, openReaderPassed),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, sizeMB),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, storedFieldStatus),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, termIndexStatus),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, termVectorStatus),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CheckIndex$Status$SegmentInfoStatus__methods_[] = {
          DECLARE_METHOD(t_CheckIndex$Status$SegmentInfoStatus, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex$Status$SegmentInfoStatus, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CheckIndex$Status$SegmentInfoStatus, t_CheckIndex$Status$SegmentInfoStatus, ::java::lang::Object, CheckIndex$Status$SegmentInfoStatus, abstract_init, 0, 0, t_CheckIndex$Status$SegmentInfoStatus__fields_, 0, 0);

        void t_CheckIndex$Status$SegmentInfoStatus::install(PyObject *module)
        {
          installType(&PY_TYPE(CheckIndex$Status$SegmentInfoStatus), module, "CheckIndex$Status$SegmentInfoStatus", 0);
        }

        void t_CheckIndex$Status$SegmentInfoStatus::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$SegmentInfoStatus).tp_dict, "class_", make_descriptor(CheckIndex$Status$SegmentInfoStatus::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$SegmentInfoStatus).tp_dict, "wrapfn_", make_descriptor(t_CheckIndex$Status$SegmentInfoStatus::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$SegmentInfoStatus).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CheckIndex$Status$SegmentInfoStatus::initializeClass, 1)))
            return NULL;
          return t_CheckIndex$Status$SegmentInfoStatus::wrap_Object(CheckIndex$Status$SegmentInfoStatus(((t_CheckIndex$Status$SegmentInfoStatus *) arg)->object.this$));
        }
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CheckIndex$Status$SegmentInfoStatus::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__codec(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          ::org::apache::lucene::codecs::Codec value((jobject) NULL);
          OBJ_CALL(value = self->object._get_codec());
          return ::org::apache::lucene::codecs::t_Codec::wrap_Object(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__codec(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::codecs::Codec value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::codecs::Codec::initializeClass, &value))
          {
            INT_CALL(self->object._set_codec(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "codec", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__compound(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_compound());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__compound(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_compound(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "compound", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__deletionsGen(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_deletionsGen());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__deletionsGen(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_deletionsGen(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "deletionsGen", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__diagnostics(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          OBJ_CALL(value = self->object._get_diagnostics());
          return ::java::util::t_Map::wrap_Object(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__diagnostics(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          if (!parseArg(arg, "k", ::java::util::Map::initializeClass, &value))
          {
            INT_CALL(self->object._set_diagnostics(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "diagnostics", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__docCount(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_docCount());
          return PyInt_FromLong((long) value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__docCount(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_docCount(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "docCount", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__docStoreCompoundFile(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_docStoreCompoundFile());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__docStoreCompoundFile(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_docStoreCompoundFile(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "docStoreCompoundFile", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__docStoreOffset(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_docStoreOffset());
          return PyInt_FromLong((long) value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__docStoreOffset(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_docStoreOffset(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "docStoreOffset", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__docStoreSegment(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_docStoreSegment());
          return j2p(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__docStoreSegment(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          if (!parseArg(arg, "s", &value))
          {
            INT_CALL(self->object._set_docStoreSegment(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "docStoreSegment", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__docValuesStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$DocValuesStatus value((jobject) NULL);
          OBJ_CALL(value = self->object._get_docValuesStatus());
          return ::org::apache::lucene::index::t_CheckIndex$Status$DocValuesStatus::wrap_Object(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__docValuesStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$DocValuesStatus value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::index::CheckIndex$Status$DocValuesStatus::initializeClass, &value))
          {
            INT_CALL(self->object._set_docValuesStatus(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "docValuesStatus", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__fieldNormStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$FieldNormStatus value((jobject) NULL);
          OBJ_CALL(value = self->object._get_fieldNormStatus());
          return ::org::apache::lucene::index::t_CheckIndex$Status$FieldNormStatus::wrap_Object(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__fieldNormStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$FieldNormStatus value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::index::CheckIndex$Status$FieldNormStatus::initializeClass, &value))
          {
            INT_CALL(self->object._set_fieldNormStatus(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "fieldNormStatus", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__hasDeletions(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_hasDeletions());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__hasDeletions(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_hasDeletions(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "hasDeletions", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__name(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_name());
          return j2p(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__name(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          if (!parseArg(arg, "s", &value))
          {
            INT_CALL(self->object._set_name(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "name", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__numDeleted(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_numDeleted());
          return PyInt_FromLong((long) value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__numDeleted(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_numDeleted(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "numDeleted", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__numFiles(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_numFiles());
          return PyInt_FromLong((long) value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__numFiles(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_numFiles(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "numFiles", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__openReaderPassed(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_openReaderPassed());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__openReaderPassed(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_openReaderPassed(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "openReaderPassed", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__sizeMB(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object._get_sizeMB());
          return PyFloat_FromDouble((double) value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__sizeMB(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          jdouble value;
          if (!parseArg(arg, "D", &value))
          {
            INT_CALL(self->object._set_sizeMB(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "sizeMB", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__storedFieldStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$StoredFieldStatus value((jobject) NULL);
          OBJ_CALL(value = self->object._get_storedFieldStatus());
          return ::org::apache::lucene::index::t_CheckIndex$Status$StoredFieldStatus::wrap_Object(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__storedFieldStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$StoredFieldStatus value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::index::CheckIndex$Status$StoredFieldStatus::initializeClass, &value))
          {
            INT_CALL(self->object._set_storedFieldStatus(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "storedFieldStatus", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__termIndexStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus value((jobject) NULL);
          OBJ_CALL(value = self->object._get_termIndexStatus());
          return ::org::apache::lucene::index::t_CheckIndex$Status$TermIndexStatus::wrap_Object(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__termIndexStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus::initializeClass, &value))
          {
            INT_CALL(self->object._set_termIndexStatus(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "termIndexStatus", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__termVectorStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus value((jobject) NULL);
          OBJ_CALL(value = self->object._get_termVectorStatus());
          return ::org::apache::lucene::index::t_CheckIndex$Status$TermVectorStatus::wrap_Object(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__termVectorStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus::initializeClass, &value))
          {
            INT_CALL(self->object._set_termVectorStatus(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "termVectorStatus", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/MathUtil.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *MathUtil::class$ = NULL;
        jmethodID *MathUtil::mids$ = NULL;
        bool MathUtil::live$ = false;

        jclass MathUtil::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/MathUtil");

            mids$ = new jmethodID[max_mid];
            mids$[mid_acosh_5d1c7657] = env->getStaticMethodID(cls, "acosh", "(D)D");
            mids$[mid_asinh_5d1c7657] = env->getStaticMethodID(cls, "asinh", "(D)D");
            mids$[mid_atanh_5d1c7657] = env->getStaticMethodID(cls, "atanh", "(D)D");
            mids$[mid_gcd_a7e12cb8] = env->getStaticMethodID(cls, "gcd", "(JJ)J");
            mids$[mid_log_b1e2866a] = env->getStaticMethodID(cls, "log", "(DD)D");
            mids$[mid_log_25d05c90] = env->getStaticMethodID(cls, "log", "(JI)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jdouble MathUtil::acosh(jdouble a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_acosh_5d1c7657], a0);
        }

        jdouble MathUtil::asinh(jdouble a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_asinh_5d1c7657], a0);
        }

        jdouble MathUtil::atanh(jdouble a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_atanh_5d1c7657], a0);
        }

        jlong MathUtil::gcd(jlong a0, jlong a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_gcd_a7e12cb8], a0, a1);
        }

        jdouble MathUtil::log(jdouble a0, jdouble a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_log_b1e2866a], a0, a1);
        }

        jint MathUtil::log(jlong a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_log_25d05c90], a0, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_MathUtil_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MathUtil_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MathUtil_acosh(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MathUtil_asinh(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MathUtil_atanh(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MathUtil_gcd(PyTypeObject *type, PyObject *args);
        static PyObject *t_MathUtil_log(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_MathUtil__methods_[] = {
          DECLARE_METHOD(t_MathUtil, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MathUtil, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MathUtil, acosh, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MathUtil, asinh, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MathUtil, atanh, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MathUtil, gcd, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MathUtil, log, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MathUtil, t_MathUtil, ::java::lang::Object, MathUtil, abstract_init, 0, 0, 0, 0, 0);

        void t_MathUtil::install(PyObject *module)
        {
          installType(&PY_TYPE(MathUtil), module, "MathUtil", 0);
        }

        void t_MathUtil::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MathUtil).tp_dict, "class_", make_descriptor(MathUtil::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MathUtil).tp_dict, "wrapfn_", make_descriptor(t_MathUtil::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MathUtil).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MathUtil_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MathUtil::initializeClass, 1)))
            return NULL;
          return t_MathUtil::wrap_Object(MathUtil(((t_MathUtil *) arg)->object.this$));
        }
        static PyObject *t_MathUtil_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MathUtil::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MathUtil_acosh(PyTypeObject *type, PyObject *arg)
        {
          jdouble a0;
          jdouble result;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::MathUtil::acosh(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "acosh", arg);
          return NULL;
        }

        static PyObject *t_MathUtil_asinh(PyTypeObject *type, PyObject *arg)
        {
          jdouble a0;
          jdouble result;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::MathUtil::asinh(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "asinh", arg);
          return NULL;
        }

        static PyObject *t_MathUtil_atanh(PyTypeObject *type, PyObject *arg)
        {
          jdouble a0;
          jdouble result;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::MathUtil::atanh(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "atanh", arg);
          return NULL;
        }

        static PyObject *t_MathUtil_gcd(PyTypeObject *type, PyObject *args)
        {
          jlong a0;
          jlong a1;
          jlong result;

          if (!parseArgs(args, "JJ", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::MathUtil::gcd(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "gcd", args);
          return NULL;
        }

        static PyObject *t_MathUtil_log(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              jdouble a0;
              jdouble a1;
              jdouble result;

              if (!parseArgs(args, "DD", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::MathUtil::log(a0, a1));
                return PyFloat_FromDouble((double) result);
              }
            }
            {
              jlong a0;
              jint a1;
              jint result;

              if (!parseArgs(args, "JI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::MathUtil::log(a0, a1));
                return PyInt_FromLong((long) result);
              }
            }
          }

          PyErr_SetArgsError(type, "log", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/en/EnglishPossessiveFilterFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {

          ::java::lang::Class *EnglishPossessiveFilterFactory::class$ = NULL;
          jmethodID *EnglishPossessiveFilterFactory::mids$ = NULL;
          bool EnglishPossessiveFilterFactory::live$ = false;

          jclass EnglishPossessiveFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/en/EnglishPossessiveFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EnglishPossessiveFilterFactory::EnglishPossessiveFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream EnglishPossessiveFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {
          static PyObject *t_EnglishPossessiveFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EnglishPossessiveFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EnglishPossessiveFilterFactory_init_(t_EnglishPossessiveFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EnglishPossessiveFilterFactory_create(t_EnglishPossessiveFilterFactory *self, PyObject *args);

          static PyMethodDef t_EnglishPossessiveFilterFactory__methods_[] = {
            DECLARE_METHOD(t_EnglishPossessiveFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishPossessiveFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishPossessiveFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EnglishPossessiveFilterFactory, t_EnglishPossessiveFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, EnglishPossessiveFilterFactory, t_EnglishPossessiveFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_EnglishPossessiveFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(EnglishPossessiveFilterFactory), module, "EnglishPossessiveFilterFactory", 0);
          }

          void t_EnglishPossessiveFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EnglishPossessiveFilterFactory).tp_dict, "class_", make_descriptor(EnglishPossessiveFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EnglishPossessiveFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_EnglishPossessiveFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EnglishPossessiveFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_EnglishPossessiveFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EnglishPossessiveFilterFactory::initializeClass, 1)))
              return NULL;
            return t_EnglishPossessiveFilterFactory::wrap_Object(EnglishPossessiveFilterFactory(((t_EnglishPossessiveFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_EnglishPossessiveFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EnglishPossessiveFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EnglishPossessiveFilterFactory_init_(t_EnglishPossessiveFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            EnglishPossessiveFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = EnglishPossessiveFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_EnglishPossessiveFilterFactory_create(t_EnglishPossessiveFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(EnglishPossessiveFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder.h"
#include "org/apache/lucene/search/highlight/Encoder.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/vectorhighlight/FragmentsBuilder.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *BaseFragmentsBuilder::class$ = NULL;
          jmethodID *BaseFragmentsBuilder::mids$ = NULL;
          bool BaseFragmentsBuilder::live$ = false;
          JArray< ::java::lang::String > *BaseFragmentsBuilder::COLORED_POST_TAGS = NULL;
          JArray< ::java::lang::String > *BaseFragmentsBuilder::COLORED_PRE_TAGS = NULL;

          jclass BaseFragmentsBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_createFragment_dbdbadf3] = env->getMethodID(cls, "createFragment", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/search/vectorhighlight/FieldFragList;)Ljava/lang/String;");
              mids$[mid_createFragment_4ae15401] = env->getMethodID(cls, "createFragment", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/search/vectorhighlight/FieldFragList;[Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/search/highlight/Encoder;)Ljava/lang/String;");
              mids$[mid_createFragments_b5534699] = env->getMethodID(cls, "createFragments", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/search/vectorhighlight/FieldFragList;I)[Ljava/lang/String;");
              mids$[mid_createFragments_a6aed56f] = env->getMethodID(cls, "createFragments", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/search/vectorhighlight/FieldFragList;I[Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/search/highlight/Encoder;)[Ljava/lang/String;");
              mids$[mid_getMultiValuedSeparator_54c6a173] = env->getMethodID(cls, "getMultiValuedSeparator", "()C");
              mids$[mid_getWeightedFragInfoList_4f378251] = env->getMethodID(cls, "getWeightedFragInfoList", "(Ljava/util/List;)Ljava/util/List;");
              mids$[mid_isDiscreteMultiValueHighlighting_54c6a16a] = env->getMethodID(cls, "isDiscreteMultiValueHighlighting", "()Z");
              mids$[mid_setDiscreteMultiValueHighlighting_bb0c767f] = env->getMethodID(cls, "setDiscreteMultiValueHighlighting", "(Z)V");
              mids$[mid_setMultiValuedSeparator_87fd545a] = env->getMethodID(cls, "setMultiValuedSeparator", "(C)V");
              mids$[mid_getFields_cc0d693c] = env->getMethodID(cls, "getFields", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;)[Lorg/apache/lucene/document/Field;");
              mids$[mid_discreteMultiValueHighlighting_d191731d] = env->getMethodID(cls, "discreteMultiValueHighlighting", "(Ljava/util/List;[Lorg/apache/lucene/document/Field;)Ljava/util/List;");
              mids$[mid_makeFragment_b70fa26e] = env->getMethodID(cls, "makeFragment", "(Ljava/lang/StringBuilder;[I[Lorg/apache/lucene/document/Field;Lorg/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo;[Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/search/highlight/Encoder;)Ljava/lang/String;");
              mids$[mid_getFragmentSourceMSO_a32be9ad] = env->getMethodID(cls, "getFragmentSourceMSO", "(Ljava/lang/StringBuilder;[I[Lorg/apache/lucene/document/Field;II[I)Ljava/lang/String;");
              mids$[mid_getFragmentSource_771056c3] = env->getMethodID(cls, "getFragmentSource", "(Ljava/lang/StringBuilder;[I[Lorg/apache/lucene/document/Field;II)Ljava/lang/String;");
              mids$[mid_getPreTag_64aeb14d] = env->getMethodID(cls, "getPreTag", "([Ljava/lang/String;I)Ljava/lang/String;");
              mids$[mid_getPreTag_141401b3] = env->getMethodID(cls, "getPreTag", "(I)Ljava/lang/String;");
              mids$[mid_getPostTag_64aeb14d] = env->getMethodID(cls, "getPostTag", "([Ljava/lang/String;I)Ljava/lang/String;");
              mids$[mid_getPostTag_141401b3] = env->getMethodID(cls, "getPostTag", "(I)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              COLORED_POST_TAGS = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "COLORED_POST_TAGS", "[Ljava/lang/String;"));
              COLORED_PRE_TAGS = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "COLORED_PRE_TAGS", "[Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::String BaseFragmentsBuilder::createFragment(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::search::vectorhighlight::FieldFragList & a3) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_createFragment_dbdbadf3], a0.this$, a1, a2.this$, a3.this$));
          }

          ::java::lang::String BaseFragmentsBuilder::createFragment(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::search::vectorhighlight::FieldFragList & a3, const JArray< ::java::lang::String > & a4, const JArray< ::java::lang::String > & a5, const ::org::apache::lucene::search::highlight::Encoder & a6) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_createFragment_4ae15401], a0.this$, a1, a2.this$, a3.this$, a4.this$, a5.this$, a6.this$));
          }

          JArray< ::java::lang::String > BaseFragmentsBuilder::createFragments(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::search::vectorhighlight::FieldFragList & a3, jint a4) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_createFragments_b5534699], a0.this$, a1, a2.this$, a3.this$, a4));
          }

          JArray< ::java::lang::String > BaseFragmentsBuilder::createFragments(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::search::vectorhighlight::FieldFragList & a3, jint a4, const JArray< ::java::lang::String > & a5, const JArray< ::java::lang::String > & a6, const ::org::apache::lucene::search::highlight::Encoder & a7) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_createFragments_a6aed56f], a0.this$, a1, a2.this$, a3.this$, a4, a5.this$, a6.this$, a7.this$));
          }

          jchar BaseFragmentsBuilder::getMultiValuedSeparator() const
          {
            return env->callCharMethod(this$, mids$[mid_getMultiValuedSeparator_54c6a173]);
          }

          ::java::util::List BaseFragmentsBuilder::getWeightedFragInfoList(const ::java::util::List & a0) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getWeightedFragInfoList_4f378251], a0.this$));
          }

          jboolean BaseFragmentsBuilder::isDiscreteMultiValueHighlighting() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isDiscreteMultiValueHighlighting_54c6a16a]);
          }

          void BaseFragmentsBuilder::setDiscreteMultiValueHighlighting(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setDiscreteMultiValueHighlighting_bb0c767f], a0);
          }

          void BaseFragmentsBuilder::setMultiValuedSeparator(jchar a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMultiValuedSeparator_87fd545a], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_BaseFragmentsBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BaseFragmentsBuilder_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BaseFragmentsBuilder_createFragment(t_BaseFragmentsBuilder *self, PyObject *args);
          static PyObject *t_BaseFragmentsBuilder_createFragments(t_BaseFragmentsBuilder *self, PyObject *args);
          static PyObject *t_BaseFragmentsBuilder_getMultiValuedSeparator(t_BaseFragmentsBuilder *self);
          static PyObject *t_BaseFragmentsBuilder_getWeightedFragInfoList(t_BaseFragmentsBuilder *self, PyObject *arg);
          static PyObject *t_BaseFragmentsBuilder_isDiscreteMultiValueHighlighting(t_BaseFragmentsBuilder *self);
          static PyObject *t_BaseFragmentsBuilder_setDiscreteMultiValueHighlighting(t_BaseFragmentsBuilder *self, PyObject *arg);
          static PyObject *t_BaseFragmentsBuilder_setMultiValuedSeparator(t_BaseFragmentsBuilder *self, PyObject *arg);
          static PyObject *t_BaseFragmentsBuilder_get__discreteMultiValueHighlighting(t_BaseFragmentsBuilder *self, void *data);
          static int t_BaseFragmentsBuilder_set__discreteMultiValueHighlighting(t_BaseFragmentsBuilder *self, PyObject *arg, void *data);
          static PyObject *t_BaseFragmentsBuilder_get__multiValuedSeparator(t_BaseFragmentsBuilder *self, void *data);
          static int t_BaseFragmentsBuilder_set__multiValuedSeparator(t_BaseFragmentsBuilder *self, PyObject *arg, void *data);
          static PyGetSetDef t_BaseFragmentsBuilder__fields_[] = {
            DECLARE_GETSET_FIELD(t_BaseFragmentsBuilder, discreteMultiValueHighlighting),
            DECLARE_GETSET_FIELD(t_BaseFragmentsBuilder, multiValuedSeparator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BaseFragmentsBuilder__methods_[] = {
            DECLARE_METHOD(t_BaseFragmentsBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BaseFragmentsBuilder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BaseFragmentsBuilder, createFragment, METH_VARARGS),
            DECLARE_METHOD(t_BaseFragmentsBuilder, createFragments, METH_VARARGS),
            DECLARE_METHOD(t_BaseFragmentsBuilder, getMultiValuedSeparator, METH_NOARGS),
            DECLARE_METHOD(t_BaseFragmentsBuilder, getWeightedFragInfoList, METH_O),
            DECLARE_METHOD(t_BaseFragmentsBuilder, isDiscreteMultiValueHighlighting, METH_NOARGS),
            DECLARE_METHOD(t_BaseFragmentsBuilder, setDiscreteMultiValueHighlighting, METH_O),
            DECLARE_METHOD(t_BaseFragmentsBuilder, setMultiValuedSeparator, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BaseFragmentsBuilder, t_BaseFragmentsBuilder, ::java::lang::Object, BaseFragmentsBuilder, abstract_init, 0, 0, t_BaseFragmentsBuilder__fields_, 0, 0);

          void t_BaseFragmentsBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(BaseFragmentsBuilder), module, "BaseFragmentsBuilder", 0);
          }

          void t_BaseFragmentsBuilder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BaseFragmentsBuilder).tp_dict, "class_", make_descriptor(BaseFragmentsBuilder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BaseFragmentsBuilder).tp_dict, "wrapfn_", make_descriptor(t_BaseFragmentsBuilder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BaseFragmentsBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(BaseFragmentsBuilder::initializeClass);
            PyDict_SetItemString(PY_TYPE(BaseFragmentsBuilder).tp_dict, "COLORED_POST_TAGS", make_descriptor(JArray<jstring>(BaseFragmentsBuilder::COLORED_POST_TAGS->this$).wrap()));
            PyDict_SetItemString(PY_TYPE(BaseFragmentsBuilder).tp_dict, "COLORED_PRE_TAGS", make_descriptor(JArray<jstring>(BaseFragmentsBuilder::COLORED_PRE_TAGS->this$).wrap()));
          }

          static PyObject *t_BaseFragmentsBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BaseFragmentsBuilder::initializeClass, 1)))
              return NULL;
            return t_BaseFragmentsBuilder::wrap_Object(BaseFragmentsBuilder(((t_BaseFragmentsBuilder *) arg)->object.this$));
          }
          static PyObject *t_BaseFragmentsBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BaseFragmentsBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_BaseFragmentsBuilder_createFragment(t_BaseFragmentsBuilder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 4:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldFragList a3((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "kIsk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldFragList::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.createFragment(a0, a1, a2, a3));
                  return j2p(result);
                }
              }
              break;
             case 7:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldFragList a3((jobject) NULL);
                JArray< ::java::lang::String > a4((jobject) NULL);
                JArray< ::java::lang::String > a5((jobject) NULL);
                ::org::apache::lucene::search::highlight::Encoder a6((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "kIsk[s[sk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldFragList::initializeClass, ::org::apache::lucene::search::highlight::Encoder::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
                {
                  OBJ_CALL(result = self->object.createFragment(a0, a1, a2, a3, a4, a5, a6));
                  return j2p(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "createFragment", args);
            return NULL;
          }

          static PyObject *t_BaseFragmentsBuilder_createFragments(t_BaseFragmentsBuilder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 5:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldFragList a3((jobject) NULL);
                jint a4;
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "kIskI", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldFragList::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(result = self->object.createFragments(a0, a1, a2, a3, a4));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
              break;
             case 8:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldFragList a3((jobject) NULL);
                jint a4;
                JArray< ::java::lang::String > a5((jobject) NULL);
                JArray< ::java::lang::String > a6((jobject) NULL);
                ::org::apache::lucene::search::highlight::Encoder a7((jobject) NULL);
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "kIskI[s[sk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldFragList::initializeClass, ::org::apache::lucene::search::highlight::Encoder::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7))
                {
                  OBJ_CALL(result = self->object.createFragments(a0, a1, a2, a3, a4, a5, a6, a7));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "createFragments", args);
            return NULL;
          }

          static PyObject *t_BaseFragmentsBuilder_getMultiValuedSeparator(t_BaseFragmentsBuilder *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.getMultiValuedSeparator());
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }

          static PyObject *t_BaseFragmentsBuilder_getWeightedFragInfoList(t_BaseFragmentsBuilder *self, PyObject *arg)
          {
            ::java::util::List a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::util::List result((jobject) NULL);

            if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(result = self->object.getWeightedFragInfoList(a0));
              return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::vectorhighlight::PY_TYPE(FieldFragList$WeightedFragInfo));
            }

            PyErr_SetArgsError((PyObject *) self, "getWeightedFragInfoList", arg);
            return NULL;
          }

          static PyObject *t_BaseFragmentsBuilder_isDiscreteMultiValueHighlighting(t_BaseFragmentsBuilder *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isDiscreteMultiValueHighlighting());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_BaseFragmentsBuilder_setDiscreteMultiValueHighlighting(t_BaseFragmentsBuilder *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setDiscreteMultiValueHighlighting(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setDiscreteMultiValueHighlighting", arg);
            return NULL;
          }

          static PyObject *t_BaseFragmentsBuilder_setMultiValuedSeparator(t_BaseFragmentsBuilder *self, PyObject *arg)
          {
            jchar a0;

            if (!parseArg(arg, "C", &a0))
            {
              OBJ_CALL(self->object.setMultiValuedSeparator(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMultiValuedSeparator", arg);
            return NULL;
          }

          static PyObject *t_BaseFragmentsBuilder_get__discreteMultiValueHighlighting(t_BaseFragmentsBuilder *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isDiscreteMultiValueHighlighting());
            Py_RETURN_BOOL(value);
          }
          static int t_BaseFragmentsBuilder_set__discreteMultiValueHighlighting(t_BaseFragmentsBuilder *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setDiscreteMultiValueHighlighting(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "discreteMultiValueHighlighting", arg);
            return -1;
          }

          static PyObject *t_BaseFragmentsBuilder_get__multiValuedSeparator(t_BaseFragmentsBuilder *self, void *data)
          {
            jchar value;
            OBJ_CALL(value = self->object.getMultiValuedSeparator());
            return PyUnicode_FromUnicode((Py_UNICODE *) &value, 1);
          }
          static int t_BaseFragmentsBuilder_set__multiValuedSeparator(t_BaseFragmentsBuilder *self, PyObject *arg, void *data)
          {
            {
              jchar value;
              if (!parseArg(arg, "C", &value))
              {
                INT_CALL(self->object.setMultiValuedSeparator(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "multiValuedSeparator", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedDataInput.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedDataInput::class$ = NULL;
          jmethodID *PackedDataInput::mids$ = NULL;
          bool PackedDataInput::live$ = false;

          jclass PackedDataInput::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedDataInput");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f5d6a551] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/DataInput;)V");
              mids$[mid_readLong_39c7bd20] = env->getMethodID(cls, "readLong", "(I)J");
              mids$[mid_skipToNextByte_54c6a166] = env->getMethodID(cls, "skipToNextByte", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PackedDataInput::PackedDataInput(const ::org::apache::lucene::store::DataInput & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f5d6a551, a0.this$)) {}

          jlong PackedDataInput::readLong(jint a0) const
          {
            return env->callLongMethod(this$, mids$[mid_readLong_39c7bd20], a0);
          }

          void PackedDataInput::skipToNextByte() const
          {
            env->callVoidMethod(this$, mids$[mid_skipToNextByte_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedDataInput_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedDataInput_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PackedDataInput_init_(t_PackedDataInput *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PackedDataInput_readLong(t_PackedDataInput *self, PyObject *arg);
          static PyObject *t_PackedDataInput_skipToNextByte(t_PackedDataInput *self);

          static PyMethodDef t_PackedDataInput__methods_[] = {
            DECLARE_METHOD(t_PackedDataInput, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedDataInput, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedDataInput, readLong, METH_O),
            DECLARE_METHOD(t_PackedDataInput, skipToNextByte, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedDataInput, t_PackedDataInput, ::java::lang::Object, PackedDataInput, t_PackedDataInput_init_, 0, 0, 0, 0, 0);

          void t_PackedDataInput::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedDataInput), module, "PackedDataInput", 0);
          }

          void t_PackedDataInput::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedDataInput).tp_dict, "class_", make_descriptor(PackedDataInput::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedDataInput).tp_dict, "wrapfn_", make_descriptor(t_PackedDataInput::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedDataInput).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedDataInput_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedDataInput::initializeClass, 1)))
              return NULL;
            return t_PackedDataInput::wrap_Object(PackedDataInput(((t_PackedDataInput *) arg)->object.this$));
          }
          static PyObject *t_PackedDataInput_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedDataInput::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PackedDataInput_init_(t_PackedDataInput *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            PackedDataInput object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              INT_CALL(object = PackedDataInput(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PackedDataInput_readLong(t_PackedDataInput *self, PyObject *arg)
          {
            jint a0;
            jlong result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.readLong(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError((PyObject *) self, "readLong", arg);
            return NULL;
          }

          static PyObject *t_PackedDataInput_skipToNextByte(t_PackedDataInput *self)
          {
            OBJ_CALL(self->object.skipToNextByte());
            Py_RETURN_NONE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/StoredFieldVisitor$Status.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *StoredFieldVisitor$Status::class$ = NULL;
        jmethodID *StoredFieldVisitor$Status::mids$ = NULL;
        bool StoredFieldVisitor$Status::live$ = false;
        StoredFieldVisitor$Status *StoredFieldVisitor$Status::NO = NULL;
        StoredFieldVisitor$Status *StoredFieldVisitor$Status::STOP = NULL;
        StoredFieldVisitor$Status *StoredFieldVisitor$Status::YES = NULL;

        jclass StoredFieldVisitor$Status::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/StoredFieldVisitor$Status");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_92de5032] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/index/StoredFieldVisitor$Status;");
            mids$[mid_values_fd94bdd0] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/index/StoredFieldVisitor$Status;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            NO = new StoredFieldVisitor$Status(env->getStaticObjectField(cls, "NO", "Lorg/apache/lucene/index/StoredFieldVisitor$Status;"));
            STOP = new StoredFieldVisitor$Status(env->getStaticObjectField(cls, "STOP", "Lorg/apache/lucene/index/StoredFieldVisitor$Status;"));
            YES = new StoredFieldVisitor$Status(env->getStaticObjectField(cls, "YES", "Lorg/apache/lucene/index/StoredFieldVisitor$Status;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        StoredFieldVisitor$Status StoredFieldVisitor$Status::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return StoredFieldVisitor$Status(env->callStaticObjectMethod(cls, mids$[mid_valueOf_92de5032], a0.this$));
        }

        JArray< StoredFieldVisitor$Status > StoredFieldVisitor$Status::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< StoredFieldVisitor$Status >(env->callStaticObjectMethod(cls, mids$[mid_values_fd94bdd0]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_StoredFieldVisitor$Status_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StoredFieldVisitor$Status_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StoredFieldVisitor$Status_of_(t_StoredFieldVisitor$Status *self, PyObject *args);
        static PyObject *t_StoredFieldVisitor$Status_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_StoredFieldVisitor$Status_values(PyTypeObject *type);
        static PyObject *t_StoredFieldVisitor$Status_get__parameters_(t_StoredFieldVisitor$Status *self, void *data);
        static PyGetSetDef t_StoredFieldVisitor$Status__fields_[] = {
          DECLARE_GET_FIELD(t_StoredFieldVisitor$Status, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_StoredFieldVisitor$Status__methods_[] = {
          DECLARE_METHOD(t_StoredFieldVisitor$Status, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StoredFieldVisitor$Status, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StoredFieldVisitor$Status, of_, METH_VARARGS),
          DECLARE_METHOD(t_StoredFieldVisitor$Status, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_StoredFieldVisitor$Status, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(StoredFieldVisitor$Status, t_StoredFieldVisitor$Status, ::java::lang::Enum, StoredFieldVisitor$Status, abstract_init, 0, 0, t_StoredFieldVisitor$Status__fields_, 0, 0);
        PyObject *t_StoredFieldVisitor$Status::wrap_Object(const StoredFieldVisitor$Status& object, PyTypeObject *p0)
        {
          PyObject *obj = t_StoredFieldVisitor$Status::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_StoredFieldVisitor$Status *self = (t_StoredFieldVisitor$Status *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_StoredFieldVisitor$Status::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_StoredFieldVisitor$Status::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_StoredFieldVisitor$Status *self = (t_StoredFieldVisitor$Status *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_StoredFieldVisitor$Status::install(PyObject *module)
        {
          installType(&PY_TYPE(StoredFieldVisitor$Status), module, "StoredFieldVisitor$Status", 0);
        }

        void t_StoredFieldVisitor$Status::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(StoredFieldVisitor$Status).tp_dict, "class_", make_descriptor(StoredFieldVisitor$Status::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(StoredFieldVisitor$Status).tp_dict, "wrapfn_", make_descriptor(t_StoredFieldVisitor$Status::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(StoredFieldVisitor$Status).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(StoredFieldVisitor$Status::initializeClass);
          PyDict_SetItemString(PY_TYPE(StoredFieldVisitor$Status).tp_dict, "NO", make_descriptor(t_StoredFieldVisitor$Status::wrap_Object(*StoredFieldVisitor$Status::NO)));
          PyDict_SetItemString(PY_TYPE(StoredFieldVisitor$Status).tp_dict, "STOP", make_descriptor(t_StoredFieldVisitor$Status::wrap_Object(*StoredFieldVisitor$Status::STOP)));
          PyDict_SetItemString(PY_TYPE(StoredFieldVisitor$Status).tp_dict, "YES", make_descriptor(t_StoredFieldVisitor$Status::wrap_Object(*StoredFieldVisitor$Status::YES)));
        }

        static PyObject *t_StoredFieldVisitor$Status_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, StoredFieldVisitor$Status::initializeClass, 1)))
            return NULL;
          return t_StoredFieldVisitor$Status::wrap_Object(StoredFieldVisitor$Status(((t_StoredFieldVisitor$Status *) arg)->object.this$));
        }
        static PyObject *t_StoredFieldVisitor$Status_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, StoredFieldVisitor$Status::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_StoredFieldVisitor$Status_of_(t_StoredFieldVisitor$Status *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_StoredFieldVisitor$Status_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          StoredFieldVisitor$Status result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::StoredFieldVisitor$Status::valueOf(a0));
            return t_StoredFieldVisitor$Status::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_StoredFieldVisitor$Status_values(PyTypeObject *type)
        {
          JArray< StoredFieldVisitor$Status > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::StoredFieldVisitor$Status::values());
          return JArray<jobject>(result.this$).wrap(t_StoredFieldVisitor$Status::wrap_jobject);
        }
        static PyObject *t_StoredFieldVisitor$Status_get__parameters_(t_StoredFieldVisitor$Status *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/messages/Message.h"
#include "java/util/Locale.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/Throwable.h"
#include "org/apache/lucene/queryparser/flexible/messages/NLSException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {

            ::java::lang::Class *QueryNodeException::class$ = NULL;
            jmethodID *QueryNodeException::mids$ = NULL;
            bool QueryNodeException::live$ = false;

            jclass QueryNodeException::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/QueryNodeException");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_c5ec8ca4] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;)V");
                mids$[mid_init$_1dde9d59] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/messages/Message;)V");
                mids$[mid_init$_41dcc0ed] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/messages/Message;Ljava/lang/Throwable;)V");
                mids$[mid_getLocalizedMessage_14c7b5c5] = env->getMethodID(cls, "getLocalizedMessage", "()Ljava/lang/String;");
                mids$[mid_getLocalizedMessage_c0fb304e] = env->getMethodID(cls, "getLocalizedMessage", "(Ljava/util/Locale;)Ljava/lang/String;");
                mids$[mid_getMessage_14c7b5c5] = env->getMethodID(cls, "getMessage", "()Ljava/lang/String;");
                mids$[mid_getMessageObject_1bceed44] = env->getMethodID(cls, "getMessageObject", "()Lorg/apache/lucene/queryparser/flexible/messages/Message;");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            QueryNodeException::QueryNodeException(const ::java::lang::Throwable & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_c5ec8ca4, a0.this$)) {}

            QueryNodeException::QueryNodeException(const ::org::apache::lucene::queryparser::flexible::messages::Message & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_1dde9d59, a0.this$)) {}

            QueryNodeException::QueryNodeException(const ::org::apache::lucene::queryparser::flexible::messages::Message & a0, const ::java::lang::Throwable & a1) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_41dcc0ed, a0.this$, a1.this$)) {}

            ::java::lang::String QueryNodeException::getLocalizedMessage() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLocalizedMessage_14c7b5c5]));
            }

            ::java::lang::String QueryNodeException::getLocalizedMessage(const ::java::util::Locale & a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLocalizedMessage_c0fb304e], a0.this$));
            }

            ::java::lang::String QueryNodeException::getMessage() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getMessage_14c7b5c5]));
            }

            ::org::apache::lucene::queryparser::flexible::messages::Message QueryNodeException::getMessageObject() const
            {
              return ::org::apache::lucene::queryparser::flexible::messages::Message(env->callObjectMethod(this$, mids$[mid_getMessageObject_1bceed44]));
            }

            ::java::lang::String QueryNodeException::toString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            static PyObject *t_QueryNodeException_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_QueryNodeException_instance_(PyTypeObject *type, PyObject *arg);
            static int t_QueryNodeException_init_(t_QueryNodeException *self, PyObject *args, PyObject *kwds);
            static PyObject *t_QueryNodeException_getLocalizedMessage(t_QueryNodeException *self, PyObject *args);
            static PyObject *t_QueryNodeException_getMessage(t_QueryNodeException *self, PyObject *args);
            static PyObject *t_QueryNodeException_getMessageObject(t_QueryNodeException *self);
            static PyObject *t_QueryNodeException_toString(t_QueryNodeException *self, PyObject *args);
            static PyObject *t_QueryNodeException_get__localizedMessage(t_QueryNodeException *self, void *data);
            static PyObject *t_QueryNodeException_get__message(t_QueryNodeException *self, void *data);
            static PyObject *t_QueryNodeException_get__messageObject(t_QueryNodeException *self, void *data);
            static PyGetSetDef t_QueryNodeException__fields_[] = {
              DECLARE_GET_FIELD(t_QueryNodeException, localizedMessage),
              DECLARE_GET_FIELD(t_QueryNodeException, message),
              DECLARE_GET_FIELD(t_QueryNodeException, messageObject),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_QueryNodeException__methods_[] = {
              DECLARE_METHOD(t_QueryNodeException, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryNodeException, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryNodeException, getLocalizedMessage, METH_VARARGS),
              DECLARE_METHOD(t_QueryNodeException, getMessage, METH_VARARGS),
              DECLARE_METHOD(t_QueryNodeException, getMessageObject, METH_NOARGS),
              DECLARE_METHOD(t_QueryNodeException, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(QueryNodeException, t_QueryNodeException, ::java::lang::Exception, QueryNodeException, t_QueryNodeException_init_, 0, 0, t_QueryNodeException__fields_, 0, 0);

            void t_QueryNodeException::install(PyObject *module)
            {
              installType(&PY_TYPE(QueryNodeException), module, "QueryNodeException", 0);
            }

            void t_QueryNodeException::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(QueryNodeException).tp_dict, "class_", make_descriptor(QueryNodeException::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(QueryNodeException).tp_dict, "wrapfn_", make_descriptor(t_QueryNodeException::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(QueryNodeException).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_QueryNodeException_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, QueryNodeException::initializeClass, 1)))
                return NULL;
              return t_QueryNodeException::wrap_Object(QueryNodeException(((t_QueryNodeException *) arg)->object.this$));
            }
            static PyObject *t_QueryNodeException_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, QueryNodeException::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_QueryNodeException_init_(t_QueryNodeException *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::Throwable a0((jobject) NULL);
                  QueryNodeException object((jobject) NULL);

                  if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
                  {
                    INT_CALL(object = QueryNodeException(a0));
                    self->object = object;
                    break;
                  }
                }
                {
                  ::org::apache::lucene::queryparser::flexible::messages::Message a0((jobject) NULL);
                  QueryNodeException object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::messages::Message::initializeClass, &a0))
                  {
                    INT_CALL(object = QueryNodeException(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::org::apache::lucene::queryparser::flexible::messages::Message a0((jobject) NULL);
                  ::java::lang::Throwable a1((jobject) NULL);
                  QueryNodeException object((jobject) NULL);

                  if (!parseArgs(args, "kk", ::org::apache::lucene::queryparser::flexible::messages::Message::initializeClass, ::java::lang::Throwable::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = QueryNodeException(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_QueryNodeException_getLocalizedMessage(t_QueryNodeException *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  ::java::lang::String result((jobject) NULL);
                  OBJ_CALL(result = self->object.getLocalizedMessage());
                  return j2p(result);
                }
                break;
               case 1:
                {
                  ::java::util::Locale a0((jobject) NULL);
                  ::java::lang::String result((jobject) NULL);

                  if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
                  {
                    OBJ_CALL(result = self->object.getLocalizedMessage(a0));
                    return j2p(result);
                  }
                }
              }

              return callSuper(&PY_TYPE(QueryNodeException), (PyObject *) self, "getLocalizedMessage", args, 2);
            }

            static PyObject *t_QueryNodeException_getMessage(t_QueryNodeException *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getMessage());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(QueryNodeException), (PyObject *) self, "getMessage", args, 2);
            }

            static PyObject *t_QueryNodeException_getMessageObject(t_QueryNodeException *self)
            {
              ::org::apache::lucene::queryparser::flexible::messages::Message result((jobject) NULL);
              OBJ_CALL(result = self->object.getMessageObject());
              return ::org::apache::lucene::queryparser::flexible::messages::t_Message::wrap_Object(result);
            }

            static PyObject *t_QueryNodeException_toString(t_QueryNodeException *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(QueryNodeException), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_QueryNodeException_get__localizedMessage(t_QueryNodeException *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getLocalizedMessage());
              return j2p(value);
            }

            static PyObject *t_QueryNodeException_get__message(t_QueryNodeException *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getMessage());
              return j2p(value);
            }

            static PyObject *t_QueryNodeException_get__messageObject(t_QueryNodeException *self, void *data)
            {
              ::org::apache::lucene::queryparser::flexible::messages::Message value((jobject) NULL);
              OBJ_CALL(value = self->object.getMessageObject());
              return ::org::apache::lucene::queryparser::flexible::messages::t_Message::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/mutable/MutableValueLong.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {

          ::java::lang::Class *MutableValueLong::class$ = NULL;
          jmethodID *MutableValueLong::mids$ = NULL;
          jfieldID *MutableValueLong::fids$ = NULL;
          bool MutableValueLong::live$ = false;

          jclass MutableValueLong::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/mutable/MutableValueLong");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_compareSameType_290588f1] = env->getMethodID(cls, "compareSameType", "(Ljava/lang/Object;)I");
              mids$[mid_copy_d590ce7c] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/util/mutable/MutableValue;)V");
              mids$[mid_duplicate_15ab3811] = env->getMethodID(cls, "duplicate", "()Lorg/apache/lucene/util/mutable/MutableValue;");
              mids$[mid_equalsSameType_290588e2] = env->getMethodID(cls, "equalsSameType", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toObject_846352c3] = env->getMethodID(cls, "toObject", "()Ljava/lang/Object;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_value] = env->getFieldID(cls, "value", "J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MutableValueLong::MutableValueLong() : ::org::apache::lucene::util::mutable$::MutableValue(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint MutableValueLong::compareSameType(const ::java::lang::Object & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareSameType_290588f1], a0.this$);
          }

          void MutableValueLong::copy(const ::org::apache::lucene::util::mutable$::MutableValue & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copy_d590ce7c], a0.this$);
          }

          ::org::apache::lucene::util::mutable$::MutableValue MutableValueLong::duplicate() const
          {
            return ::org::apache::lucene::util::mutable$::MutableValue(env->callObjectMethod(this$, mids$[mid_duplicate_15ab3811]));
          }

          jboolean MutableValueLong::equalsSameType(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equalsSameType_290588e2], a0.this$);
          }

          jint MutableValueLong::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::Object MutableValueLong::toObject() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_toObject_846352c3]));
          }

          jlong MutableValueLong::_get_value() const
          {
            return env->getLongField(this$, fids$[fid_value]);
          }

          void MutableValueLong::_set_value(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_value], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {
          static PyObject *t_MutableValueLong_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MutableValueLong_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MutableValueLong_init_(t_MutableValueLong *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MutableValueLong_compareSameType(t_MutableValueLong *self, PyObject *args);
          static PyObject *t_MutableValueLong_copy(t_MutableValueLong *self, PyObject *args);
          static PyObject *t_MutableValueLong_duplicate(t_MutableValueLong *self, PyObject *args);
          static PyObject *t_MutableValueLong_equalsSameType(t_MutableValueLong *self, PyObject *args);
          static PyObject *t_MutableValueLong_hashCode(t_MutableValueLong *self, PyObject *args);
          static PyObject *t_MutableValueLong_toObject(t_MutableValueLong *self, PyObject *args);
          static PyObject *t_MutableValueLong_get__value(t_MutableValueLong *self, void *data);
          static int t_MutableValueLong_set__value(t_MutableValueLong *self, PyObject *arg, void *data);

          static PyGetSetDef t_MutableValueLong__fields_[] = {
            DECLARE_GETSET_FIELD(t_MutableValueLong, value),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_MutableValueLong__methods_[] = {
            DECLARE_METHOD(t_MutableValueLong, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueLong, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueLong, compareSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueLong, copy, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueLong, duplicate, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueLong, equalsSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueLong, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueLong, toObject, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MutableValueLong, t_MutableValueLong, ::org::apache::lucene::util::mutable$::MutableValue, MutableValueLong, t_MutableValueLong_init_, 0, 0, t_MutableValueLong__fields_, 0, 0);

          void t_MutableValueLong::install(PyObject *module)
          {
            installType(&PY_TYPE(MutableValueLong), module, "MutableValueLong", 0);
          }

          void t_MutableValueLong::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MutableValueLong).tp_dict, "class_", make_descriptor(MutableValueLong::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MutableValueLong).tp_dict, "wrapfn_", make_descriptor(t_MutableValueLong::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MutableValueLong).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MutableValueLong_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MutableValueLong::initializeClass, 1)))
              return NULL;
            return t_MutableValueLong::wrap_Object(MutableValueLong(((t_MutableValueLong *) arg)->object.this$));
          }
          static PyObject *t_MutableValueLong_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MutableValueLong::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MutableValueLong_init_(t_MutableValueLong *self, PyObject *args, PyObject *kwds)
          {
            MutableValueLong object((jobject) NULL);

            INT_CALL(object = MutableValueLong());
            self->object = object;

            return 0;
          }

          static PyObject *t_MutableValueLong_compareSameType(t_MutableValueLong *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.compareSameType(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MutableValueLong), (PyObject *) self, "compareSameType", args, 2);
          }

          static PyObject *t_MutableValueLong_copy(t_MutableValueLong *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::mutable$::MutableValue::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copy(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(MutableValueLong), (PyObject *) self, "copy", args, 2);
          }

          static PyObject *t_MutableValueLong_duplicate(t_MutableValueLong *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.duplicate());
              return ::org::apache::lucene::util::mutable$::t_MutableValue::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MutableValueLong), (PyObject *) self, "duplicate", args, 2);
          }

          static PyObject *t_MutableValueLong_equalsSameType(t_MutableValueLong *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equalsSameType(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(MutableValueLong), (PyObject *) self, "equalsSameType", args, 2);
          }

          static PyObject *t_MutableValueLong_hashCode(t_MutableValueLong *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MutableValueLong), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_MutableValueLong_toObject(t_MutableValueLong *self, PyObject *args)
          {
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toObject());
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MutableValueLong), (PyObject *) self, "toObject", args, 2);
          }

          static PyObject *t_MutableValueLong_get__value(t_MutableValueLong *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_value());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_MutableValueLong_set__value(t_MutableValueLong *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_value(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "value", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pt/PortugueseAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {

          ::java::lang::Class *PortugueseAnalyzer::class$ = NULL;
          jmethodID *PortugueseAnalyzer::mids$ = NULL;
          bool PortugueseAnalyzer::live$ = false;
          ::java::lang::String *PortugueseAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass PortugueseAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pt/PortugueseAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PortugueseAnalyzer::PortugueseAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          PortugueseAnalyzer::PortugueseAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          PortugueseAnalyzer::PortugueseAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet PortugueseAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {
          static PyObject *t_PortugueseAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PortugueseAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PortugueseAnalyzer_init_(t_PortugueseAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PortugueseAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_PortugueseAnalyzer_get__defaultStopSet(t_PortugueseAnalyzer *self, void *data);
          static PyGetSetDef t_PortugueseAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_PortugueseAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PortugueseAnalyzer__methods_[] = {
            DECLARE_METHOD(t_PortugueseAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PortugueseAnalyzer, t_PortugueseAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, PortugueseAnalyzer, t_PortugueseAnalyzer_init_, 0, 0, t_PortugueseAnalyzer__fields_, 0, 0);

          void t_PortugueseAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(PortugueseAnalyzer), module, "PortugueseAnalyzer", 0);
          }

          void t_PortugueseAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PortugueseAnalyzer).tp_dict, "class_", make_descriptor(PortugueseAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PortugueseAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_PortugueseAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PortugueseAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(PortugueseAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(PortugueseAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*PortugueseAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_PortugueseAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PortugueseAnalyzer::initializeClass, 1)))
              return NULL;
            return t_PortugueseAnalyzer::wrap_Object(PortugueseAnalyzer(((t_PortugueseAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_PortugueseAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PortugueseAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PortugueseAnalyzer_init_(t_PortugueseAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                PortugueseAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = PortugueseAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                PortugueseAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = PortugueseAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                PortugueseAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = PortugueseAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PortugueseAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::pt::PortugueseAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_PortugueseAnalyzer_get__defaultStopSet(t_PortugueseAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/TermVectorsFormat.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/codecs/TermVectorsReader.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/codecs/TermVectorsWriter.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *TermVectorsFormat::class$ = NULL;
        jmethodID *TermVectorsFormat::mids$ = NULL;
        bool TermVectorsFormat::live$ = false;

        jclass TermVectorsFormat::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/TermVectorsFormat");

            mids$ = new jmethodID[max_mid];
            mids$[mid_vectorsReader_9c23221f] = env->getMethodID(cls, "vectorsReader", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/TermVectorsReader;");
            mids$[mid_vectorsWriter_0c8458c9] = env->getMethodID(cls, "vectorsWriter", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/TermVectorsWriter;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::codecs::TermVectorsReader TermVectorsFormat::vectorsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3) const
        {
          return ::org::apache::lucene::codecs::TermVectorsReader(env->callObjectMethod(this$, mids$[mid_vectorsReader_9c23221f], a0.this$, a1.this$, a2.this$, a3.this$));
        }

        ::org::apache::lucene::codecs::TermVectorsWriter TermVectorsFormat::vectorsWriter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::store::IOContext & a2) const
        {
          return ::org::apache::lucene::codecs::TermVectorsWriter(env->callObjectMethod(this$, mids$[mid_vectorsWriter_0c8458c9], a0.this$, a1.this$, a2.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_TermVectorsFormat_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermVectorsFormat_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermVectorsFormat_vectorsReader(t_TermVectorsFormat *self, PyObject *args);
        static PyObject *t_TermVectorsFormat_vectorsWriter(t_TermVectorsFormat *self, PyObject *args);

        static PyMethodDef t_TermVectorsFormat__methods_[] = {
          DECLARE_METHOD(t_TermVectorsFormat, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermVectorsFormat, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermVectorsFormat, vectorsReader, METH_VARARGS),
          DECLARE_METHOD(t_TermVectorsFormat, vectorsWriter, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermVectorsFormat, t_TermVectorsFormat, ::java::lang::Object, TermVectorsFormat, abstract_init, 0, 0, 0, 0, 0);

        void t_TermVectorsFormat::install(PyObject *module)
        {
          installType(&PY_TYPE(TermVectorsFormat), module, "TermVectorsFormat", 0);
        }

        void t_TermVectorsFormat::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermVectorsFormat).tp_dict, "class_", make_descriptor(TermVectorsFormat::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermVectorsFormat).tp_dict, "wrapfn_", make_descriptor(t_TermVectorsFormat::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermVectorsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermVectorsFormat_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermVectorsFormat::initializeClass, 1)))
            return NULL;
          return t_TermVectorsFormat::wrap_Object(TermVectorsFormat(((t_TermVectorsFormat *) arg)->object.this$));
        }
        static PyObject *t_TermVectorsFormat_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermVectorsFormat::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TermVectorsFormat_vectorsReader(t_TermVectorsFormat *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
          ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
          ::org::apache::lucene::store::IOContext a3((jobject) NULL);
          ::org::apache::lucene::codecs::TermVectorsReader result((jobject) NULL);

          if (!parseArgs(args, "kkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = self->object.vectorsReader(a0, a1, a2, a3));
            return ::org::apache::lucene::codecs::t_TermVectorsReader::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "vectorsReader", args);
          return NULL;
        }

        static PyObject *t_TermVectorsFormat_vectorsWriter(t_TermVectorsFormat *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
          ::org::apache::lucene::store::IOContext a2((jobject) NULL);
          ::org::apache::lucene::codecs::TermVectorsWriter result((jobject) NULL);

          if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.vectorsWriter(a0, a1, a2));
            return ::org::apache::lucene::codecs::t_TermVectorsWriter::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "vectorsWriter", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Class.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/InstantiationException.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/Package.h"
#include "java/io/Serializable.h"
#include "java/io/InputStream.h"
#include "java/lang/SecurityException.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Class::class$ = NULL;
    jmethodID *Class::mids$ = NULL;
    bool Class::live$ = false;

    jclass Class::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Class");

        mids$ = new jmethodID[max_mid];
        mids$[mid_asSubclass_ecb22eb3] = env->getMethodID(cls, "asSubclass", "(Ljava/lang/Class;)Ljava/lang/Class;");
        mids$[mid_cast_a932a95f] = env->getMethodID(cls, "cast", "(Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_desiredAssertionStatus_54c6a16a] = env->getMethodID(cls, "desiredAssertionStatus", "()Z");
        mids$[mid_forName_7d663d97] = env->getStaticMethodID(cls, "forName", "(Ljava/lang/String;)Ljava/lang/Class;");
        mids$[mid_forName_4c5c10fb] = env->getStaticMethodID(cls, "forName", "(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class;");
        mids$[mid_getCanonicalName_14c7b5c5] = env->getMethodID(cls, "getCanonicalName", "()Ljava/lang/String;");
        mids$[mid_getClassLoader_8d2f11fc] = env->getMethodID(cls, "getClassLoader", "()Ljava/lang/ClassLoader;");
        mids$[mid_getClasses_ffb25e7d] = env->getMethodID(cls, "getClasses", "()[Ljava/lang/Class;");
        mids$[mid_getComponentType_44a5f2c9] = env->getMethodID(cls, "getComponentType", "()Ljava/lang/Class;");
        mids$[mid_getDeclaredClasses_ffb25e7d] = env->getMethodID(cls, "getDeclaredClasses", "()[Ljava/lang/Class;");
        mids$[mid_getDeclaringClass_44a5f2c9] = env->getMethodID(cls, "getDeclaringClass", "()Ljava/lang/Class;");
        mids$[mid_getEnclosingClass_44a5f2c9] = env->getMethodID(cls, "getEnclosingClass", "()Ljava/lang/Class;");
        mids$[mid_getEnumConstants_94e49c77] = env->getMethodID(cls, "getEnumConstants", "()[Ljava/lang/Object;");
        mids$[mid_getInterfaces_ffb25e7d] = env->getMethodID(cls, "getInterfaces", "()[Ljava/lang/Class;");
        mids$[mid_getModifiers_54c6a179] = env->getMethodID(cls, "getModifiers", "()I");
        mids$[mid_getName_14c7b5c5] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");
        mids$[mid_getPackage_b0f2f7bb] = env->getMethodID(cls, "getPackage", "()Ljava/lang/Package;");
        mids$[mid_getResourceAsStream_222e59eb] = env->getMethodID(cls, "getResourceAsStream", "(Ljava/lang/String;)Ljava/io/InputStream;");
        mids$[mid_getSigners_94e49c77] = env->getMethodID(cls, "getSigners", "()[Ljava/lang/Object;");
        mids$[mid_getSimpleName_14c7b5c5] = env->getMethodID(cls, "getSimpleName", "()Ljava/lang/String;");
        mids$[mid_getSuperclass_44a5f2c9] = env->getMethodID(cls, "getSuperclass", "()Ljava/lang/Class;");
        mids$[mid_isAnnotation_54c6a16a] = env->getMethodID(cls, "isAnnotation", "()Z");
        mids$[mid_isAnonymousClass_54c6a16a] = env->getMethodID(cls, "isAnonymousClass", "()Z");
        mids$[mid_isArray_54c6a16a] = env->getMethodID(cls, "isArray", "()Z");
        mids$[mid_isAssignableFrom_a5deaff8] = env->getMethodID(cls, "isAssignableFrom", "(Ljava/lang/Class;)Z");
        mids$[mid_isEnum_54c6a16a] = env->getMethodID(cls, "isEnum", "()Z");
        mids$[mid_isInstance_290588e2] = env->getMethodID(cls, "isInstance", "(Ljava/lang/Object;)Z");
        mids$[mid_isInterface_54c6a16a] = env->getMethodID(cls, "isInterface", "()Z");
        mids$[mid_isLocalClass_54c6a16a] = env->getMethodID(cls, "isLocalClass", "()Z");
        mids$[mid_isMemberClass_54c6a16a] = env->getMethodID(cls, "isMemberClass", "()Z");
        mids$[mid_isPrimitive_54c6a16a] = env->getMethodID(cls, "isPrimitive", "()Z");
        mids$[mid_isSynthetic_54c6a16a] = env->getMethodID(cls, "isSynthetic", "()Z");
        mids$[mid_newInstance_846352c3] = env->getMethodID(cls, "newInstance", "()Ljava/lang/Object;");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Class Class::asSubclass(const Class & a0) const
    {
      return Class(env->callObjectMethod(this$, mids$[mid_asSubclass_ecb22eb3], a0.this$));
    }

    ::java::lang::Object Class::cast(const ::java::lang::Object & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_cast_a932a95f], a0.this$));
    }

    jboolean Class::desiredAssertionStatus() const
    {
      return env->callBooleanMethod(this$, mids$[mid_desiredAssertionStatus_54c6a16a]);
    }

    Class Class::forName(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Class(env->callStaticObjectMethod(cls, mids$[mid_forName_7d663d97], a0.this$));
    }

    Class Class::forName(const ::java::lang::String & a0, jboolean a1, const ::java::lang::ClassLoader & a2)
    {
      jclass cls = env->getClass(initializeClass);
      return Class(env->callStaticObjectMethod(cls, mids$[mid_forName_4c5c10fb], a0.this$, a1, a2.this$));
    }

    ::java::lang::String Class::getCanonicalName() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getCanonicalName_14c7b5c5]));
    }

    ::java::lang::ClassLoader Class::getClassLoader() const
    {
      return ::java::lang::ClassLoader(env->callObjectMethod(this$, mids$[mid_getClassLoader_8d2f11fc]));
    }

    JArray< Class > Class::getClasses() const
    {
      return JArray< Class >(env->callObjectMethod(this$, mids$[mid_getClasses_ffb25e7d]));
    }

    Class Class::getComponentType() const
    {
      return Class(env->callObjectMethod(this$, mids$[mid_getComponentType_44a5f2c9]));
    }

    JArray< Class > Class::getDeclaredClasses() const
    {
      return JArray< Class >(env->callObjectMethod(this$, mids$[mid_getDeclaredClasses_ffb25e7d]));
    }

    Class Class::getDeclaringClass() const
    {
      return Class(env->callObjectMethod(this$, mids$[mid_getDeclaringClass_44a5f2c9]));
    }

    Class Class::getEnclosingClass() const
    {
      return Class(env->callObjectMethod(this$, mids$[mid_getEnclosingClass_44a5f2c9]));
    }

    JArray< ::java::lang::Object > Class::getEnumConstants() const
    {
      return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_getEnumConstants_94e49c77]));
    }

    JArray< Class > Class::getInterfaces() const
    {
      return JArray< Class >(env->callObjectMethod(this$, mids$[mid_getInterfaces_ffb25e7d]));
    }

    jint Class::getModifiers() const
    {
      return env->callIntMethod(this$, mids$[mid_getModifiers_54c6a179]);
    }

    ::java::lang::String Class::getName() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_14c7b5c5]));
    }

    ::java::lang::Package Class::getPackage() const
    {
      return ::java::lang::Package(env->callObjectMethod(this$, mids$[mid_getPackage_b0f2f7bb]));
    }

    ::java::io::InputStream Class::getResourceAsStream(const ::java::lang::String & a0) const
    {
      return ::java::io::InputStream(env->callObjectMethod(this$, mids$[mid_getResourceAsStream_222e59eb], a0.this$));
    }

    JArray< ::java::lang::Object > Class::getSigners() const
    {
      return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_getSigners_94e49c77]));
    }

    ::java::lang::String Class::getSimpleName() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getSimpleName_14c7b5c5]));
    }

    Class Class::getSuperclass() const
    {
      return Class(env->callObjectMethod(this$, mids$[mid_getSuperclass_44a5f2c9]));
    }

    jboolean Class::isAnnotation() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isAnnotation_54c6a16a]);
    }

    jboolean Class::isAnonymousClass() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isAnonymousClass_54c6a16a]);
    }

    jboolean Class::isArray() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isArray_54c6a16a]);
    }

    jboolean Class::isAssignableFrom(const Class & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_isAssignableFrom_a5deaff8], a0.this$);
    }

    jboolean Class::isEnum() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isEnum_54c6a16a]);
    }

    jboolean Class::isInstance(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_isInstance_290588e2], a0.this$);
    }

    jboolean Class::isInterface() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isInterface_54c6a16a]);
    }

    jboolean Class::isLocalClass() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isLocalClass_54c6a16a]);
    }

    jboolean Class::isMemberClass() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isMemberClass_54c6a16a]);
    }

    jboolean Class::isPrimitive() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isPrimitive_54c6a16a]);
    }

    jboolean Class::isSynthetic() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isSynthetic_54c6a16a]);
    }

    ::java::lang::Object Class::newInstance() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_newInstance_846352c3]));
    }

    ::java::lang::String Class::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Class_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Class_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Class_of_(t_Class *self, PyObject *args);
    static PyObject *t_Class_asSubclass(t_Class *self, PyObject *arg);
    static PyObject *t_Class_cast(t_Class *self, PyObject *arg);
    static PyObject *t_Class_desiredAssertionStatus(t_Class *self);
    static PyObject *t_Class_forName(PyTypeObject *type, PyObject *args);
    static PyObject *t_Class_getCanonicalName(t_Class *self);
    static PyObject *t_Class_getClassLoader(t_Class *self);
    static PyObject *t_Class_getClasses(t_Class *self);
    static PyObject *t_Class_getComponentType(t_Class *self);
    static PyObject *t_Class_getDeclaredClasses(t_Class *self);
    static PyObject *t_Class_getDeclaringClass(t_Class *self);
    static PyObject *t_Class_getEnclosingClass(t_Class *self);
    static PyObject *t_Class_getEnumConstants(t_Class *self);
    static PyObject *t_Class_getInterfaces(t_Class *self);
    static PyObject *t_Class_getModifiers(t_Class *self);
    static PyObject *t_Class_getName(t_Class *self);
    static PyObject *t_Class_getPackage(t_Class *self);
    static PyObject *t_Class_getResourceAsStream(t_Class *self, PyObject *arg);
    static PyObject *t_Class_getSigners(t_Class *self);
    static PyObject *t_Class_getSimpleName(t_Class *self);
    static PyObject *t_Class_getSuperclass(t_Class *self);
    static PyObject *t_Class_isAnnotation(t_Class *self);
    static PyObject *t_Class_isAnonymousClass(t_Class *self);
    static PyObject *t_Class_isArray(t_Class *self);
    static PyObject *t_Class_isAssignableFrom(t_Class *self, PyObject *arg);
    static PyObject *t_Class_isEnum(t_Class *self);
    static PyObject *t_Class_isInstance(t_Class *self, PyObject *arg);
    static PyObject *t_Class_isInterface(t_Class *self);
    static PyObject *t_Class_isLocalClass(t_Class *self);
    static PyObject *t_Class_isMemberClass(t_Class *self);
    static PyObject *t_Class_isPrimitive(t_Class *self);
    static PyObject *t_Class_isSynthetic(t_Class *self);
    static PyObject *t_Class_newInstance(t_Class *self);
    static PyObject *t_Class_toString(t_Class *self, PyObject *args);
    static PyObject *t_Class_get__annotation(t_Class *self, void *data);
    static PyObject *t_Class_get__anonymousClass(t_Class *self, void *data);
    static PyObject *t_Class_get__array(t_Class *self, void *data);
    static PyObject *t_Class_get__canonicalName(t_Class *self, void *data);
    static PyObject *t_Class_get__classLoader(t_Class *self, void *data);
    static PyObject *t_Class_get__classes(t_Class *self, void *data);
    static PyObject *t_Class_get__componentType(t_Class *self, void *data);
    static PyObject *t_Class_get__declaredClasses(t_Class *self, void *data);
    static PyObject *t_Class_get__declaringClass(t_Class *self, void *data);
    static PyObject *t_Class_get__enclosingClass(t_Class *self, void *data);
    static PyObject *t_Class_get__enum(t_Class *self, void *data);
    static PyObject *t_Class_get__enumConstants(t_Class *self, void *data);
    static PyObject *t_Class_get__interface(t_Class *self, void *data);
    static PyObject *t_Class_get__interfaces(t_Class *self, void *data);
    static PyObject *t_Class_get__localClass(t_Class *self, void *data);
    static PyObject *t_Class_get__memberClass(t_Class *self, void *data);
    static PyObject *t_Class_get__modifiers(t_Class *self, void *data);
    static PyObject *t_Class_get__name(t_Class *self, void *data);
    static PyObject *t_Class_get__package(t_Class *self, void *data);
    static PyObject *t_Class_get__primitive(t_Class *self, void *data);
    static PyObject *t_Class_get__signers(t_Class *self, void *data);
    static PyObject *t_Class_get__simpleName(t_Class *self, void *data);
    static PyObject *t_Class_get__superclass(t_Class *self, void *data);
    static PyObject *t_Class_get__synthetic(t_Class *self, void *data);
    static PyObject *t_Class_get__parameters_(t_Class *self, void *data);
    static PyGetSetDef t_Class__fields_[] = {
      DECLARE_GET_FIELD(t_Class, annotation),
      DECLARE_GET_FIELD(t_Class, anonymousClass),
      DECLARE_GET_FIELD(t_Class, array),
      DECLARE_GET_FIELD(t_Class, canonicalName),
      DECLARE_GET_FIELD(t_Class, classLoader),
      DECLARE_GET_FIELD(t_Class, classes),
      DECLARE_GET_FIELD(t_Class, componentType),
      DECLARE_GET_FIELD(t_Class, declaredClasses),
      DECLARE_GET_FIELD(t_Class, declaringClass),
      DECLARE_GET_FIELD(t_Class, enclosingClass),
      DECLARE_GET_FIELD(t_Class, enum),
      DECLARE_GET_FIELD(t_Class, enumConstants),
      DECLARE_GET_FIELD(t_Class, interface),
      DECLARE_GET_FIELD(t_Class, interfaces),
      DECLARE_GET_FIELD(t_Class, localClass),
      DECLARE_GET_FIELD(t_Class, memberClass),
      DECLARE_GET_FIELD(t_Class, modifiers),
      DECLARE_GET_FIELD(t_Class, name),
      DECLARE_GET_FIELD(t_Class, package),
      DECLARE_GET_FIELD(t_Class, primitive),
      DECLARE_GET_FIELD(t_Class, signers),
      DECLARE_GET_FIELD(t_Class, simpleName),
      DECLARE_GET_FIELD(t_Class, superclass),
      DECLARE_GET_FIELD(t_Class, synthetic),
      DECLARE_GET_FIELD(t_Class, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Class__methods_[] = {
      DECLARE_METHOD(t_Class, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Class, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Class, of_, METH_VARARGS),
      DECLARE_METHOD(t_Class, asSubclass, METH_O),
      DECLARE_METHOD(t_Class, cast, METH_O),
      DECLARE_METHOD(t_Class, desiredAssertionStatus, METH_NOARGS),
      DECLARE_METHOD(t_Class, forName, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Class, getCanonicalName, METH_NOARGS),
      DECLARE_METHOD(t_Class, getClassLoader, METH_NOARGS),
      DECLARE_METHOD(t_Class, getClasses, METH_NOARGS),
      DECLARE_METHOD(t_Class, getComponentType, METH_NOARGS),
      DECLARE_METHOD(t_Class, getDeclaredClasses, METH_NOARGS),
      DECLARE_METHOD(t_Class, getDeclaringClass, METH_NOARGS),
      DECLARE_METHOD(t_Class, getEnclosingClass, METH_NOARGS),
      DECLARE_METHOD(t_Class, getEnumConstants, METH_NOARGS),
      DECLARE_METHOD(t_Class, getInterfaces, METH_NOARGS),
      DECLARE_METHOD(t_Class, getModifiers, METH_NOARGS),
      DECLARE_METHOD(t_Class, getName, METH_NOARGS),
      DECLARE_METHOD(t_Class, getPackage, METH_NOARGS),
      DECLARE_METHOD(t_Class, getResourceAsStream, METH_O),
      DECLARE_METHOD(t_Class, getSigners, METH_NOARGS),
      DECLARE_METHOD(t_Class, getSimpleName, METH_NOARGS),
      DECLARE_METHOD(t_Class, getSuperclass, METH_NOARGS),
      DECLARE_METHOD(t_Class, isAnnotation, METH_NOARGS),
      DECLARE_METHOD(t_Class, isAnonymousClass, METH_NOARGS),
      DECLARE_METHOD(t_Class, isArray, METH_NOARGS),
      DECLARE_METHOD(t_Class, isAssignableFrom, METH_O),
      DECLARE_METHOD(t_Class, isEnum, METH_NOARGS),
      DECLARE_METHOD(t_Class, isInstance, METH_O),
      DECLARE_METHOD(t_Class, isInterface, METH_NOARGS),
      DECLARE_METHOD(t_Class, isLocalClass, METH_NOARGS),
      DECLARE_METHOD(t_Class, isMemberClass, METH_NOARGS),
      DECLARE_METHOD(t_Class, isPrimitive, METH_NOARGS),
      DECLARE_METHOD(t_Class, isSynthetic, METH_NOARGS),
      DECLARE_METHOD(t_Class, newInstance, METH_NOARGS),
      DECLARE_METHOD(t_Class, toString, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Class, t_Class, ::java::lang::Object, Class, abstract_init, 0, 0, t_Class__fields_, 0, 0);
    PyObject *t_Class::wrap_Object(const Class& object, PyTypeObject *p0)
    {
      PyObject *obj = t_Class::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_Class *self = (t_Class *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    PyObject *t_Class::wrap_jobject(const jobject& object, PyTypeObject *p0)
    {
      PyObject *obj = t_Class::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_Class *self = (t_Class *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    void t_Class::install(PyObject *module)
    {
      installType(&PY_TYPE(Class), module, "Class", 0);
    }

    void t_Class::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Class).tp_dict, "class_", make_descriptor(Class::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Class).tp_dict, "wrapfn_", make_descriptor(t_Class::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Class).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Class_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Class::initializeClass, 1)))
        return NULL;
      return t_Class::wrap_Object(Class(((t_Class *) arg)->object.this$));
    }
    static PyObject *t_Class_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Class::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Class_of_(t_Class *self, PyObject *args)
    {
      if (!parseArg(args, "T", 1, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static PyObject *t_Class_asSubclass(t_Class *self, PyObject *arg)
    {
      Class a0((jobject) NULL);
      PyTypeObject **p0;
      Class result((jobject) NULL);

      if (!parseArg(arg, "K", Class::initializeClass, &a0, &p0, t_Class::parameters_))
      {
        OBJ_CALL(result = self->object.asSubclass(a0));
        return t_Class::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "asSubclass", arg);
      return NULL;
    }

    static PyObject *t_Class_cast(t_Class *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = self->object.cast(a0));
        return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "cast", arg);
      return NULL;
    }

    static PyObject *t_Class_desiredAssertionStatus(t_Class *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.desiredAssertionStatus());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Class_forName(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          Class result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Class::forName(a0));
            return t_Class::wrap_Object(result);
          }
        }
        break;
       case 3:
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean a1;
          ::java::lang::ClassLoader a2((jobject) NULL);
          Class result((jobject) NULL);

          if (!parseArgs(args, "sZk", ::java::lang::ClassLoader::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::Class::forName(a0, a1, a2));
            return t_Class::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "forName", args);
      return NULL;
    }

    static PyObject *t_Class_getCanonicalName(t_Class *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.getCanonicalName());
      return j2p(result);
    }

    static PyObject *t_Class_getClassLoader(t_Class *self)
    {
      ::java::lang::ClassLoader result((jobject) NULL);
      OBJ_CALL(result = self->object.getClassLoader());
      return ::java::lang::t_ClassLoader::wrap_Object(result);
    }

    static PyObject *t_Class_getClasses(t_Class *self)
    {
      JArray< Class > result((jobject) NULL);
      OBJ_CALL(result = self->object.getClasses());
      return JArray<jobject>(result.this$).wrap(t_Class::wrap_jobject);
    }

    static PyObject *t_Class_getComponentType(t_Class *self)
    {
      Class result((jobject) NULL);
      OBJ_CALL(result = self->object.getComponentType());
      return t_Class::wrap_Object(result);
    }

    static PyObject *t_Class_getDeclaredClasses(t_Class *self)
    {
      JArray< Class > result((jobject) NULL);
      OBJ_CALL(result = self->object.getDeclaredClasses());
      return JArray<jobject>(result.this$).wrap(t_Class::wrap_jobject);
    }

    static PyObject *t_Class_getDeclaringClass(t_Class *self)
    {
      Class result((jobject) NULL);
      OBJ_CALL(result = self->object.getDeclaringClass());
      return t_Class::wrap_Object(result);
    }

    static PyObject *t_Class_getEnclosingClass(t_Class *self)
    {
      Class result((jobject) NULL);
      OBJ_CALL(result = self->object.getEnclosingClass());
      return t_Class::wrap_Object(result);
    }

    static PyObject *t_Class_getEnumConstants(t_Class *self)
    {
      JArray< ::java::lang::Object > result((jobject) NULL);
      OBJ_CALL(result = self->object.getEnumConstants());
      return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
    }

    static PyObject *t_Class_getInterfaces(t_Class *self)
    {
      JArray< Class > result((jobject) NULL);
      OBJ_CALL(result = self->object.getInterfaces());
      return JArray<jobject>(result.this$).wrap(t_Class::wrap_jobject);
    }

    static PyObject *t_Class_getModifiers(t_Class *self)
    {
      jint result;
      OBJ_CALL(result = self->object.getModifiers());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_Class_getName(t_Class *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.getName());
      return j2p(result);
    }

    static PyObject *t_Class_getPackage(t_Class *self)
    {
      ::java::lang::Package result((jobject) NULL);
      OBJ_CALL(result = self->object.getPackage());
      return ::java::lang::t_Package::wrap_Object(result);
    }

    static PyObject *t_Class_getResourceAsStream(t_Class *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      ::java::io::InputStream result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = self->object.getResourceAsStream(a0));
        return ::java::io::t_InputStream::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "getResourceAsStream", arg);
      return NULL;
    }

    static PyObject *t_Class_getSigners(t_Class *self)
    {
      JArray< ::java::lang::Object > result((jobject) NULL);
      OBJ_CALL(result = self->object.getSigners());
      return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
    }

    static PyObject *t_Class_getSimpleName(t_Class *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.getSimpleName());
      return j2p(result);
    }

    static PyObject *t_Class_getSuperclass(t_Class *self)
    {
      Class result((jobject) NULL);
      OBJ_CALL(result = self->object.getSuperclass());
      return t_Class::wrap_Object(result);
    }

    static PyObject *t_Class_isAnnotation(t_Class *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isAnnotation());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Class_isAnonymousClass(t_Class *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isAnonymousClass());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Class_isArray(t_Class *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isArray());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Class_isAssignableFrom(t_Class *self, PyObject *arg)
    {
      Class a0((jobject) NULL);
      PyTypeObject **p0;
      jboolean result;

      if (!parseArg(arg, "K", Class::initializeClass, &a0, &p0, t_Class::parameters_))
      {
        OBJ_CALL(result = self->object.isAssignableFrom(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "isAssignableFrom", arg);
      return NULL;
    }

    static PyObject *t_Class_isEnum(t_Class *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isEnum());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Class_isInstance(t_Class *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = self->object.isInstance(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "isInstance", arg);
      return NULL;
    }

    static PyObject *t_Class_isInterface(t_Class *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isInterface());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Class_isLocalClass(t_Class *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isLocalClass());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Class_isMemberClass(t_Class *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isMemberClass());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Class_isPrimitive(t_Class *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isPrimitive());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Class_isSynthetic(t_Class *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isSynthetic());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Class_newInstance(t_Class *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.newInstance());
      return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_Class_toString(t_Class *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(Class), (PyObject *) self, "toString", args, 2);
    }
    static PyObject *t_Class_get__parameters_(t_Class *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }

    static PyObject *t_Class_get__annotation(t_Class *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isAnnotation());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Class_get__anonymousClass(t_Class *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isAnonymousClass());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Class_get__array(t_Class *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isArray());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Class_get__canonicalName(t_Class *self, void *data)
    {
      ::java::lang::String value((jobject) NULL);
      OBJ_CALL(value = self->object.getCanonicalName());
      return j2p(value);
    }

    static PyObject *t_Class_get__classLoader(t_Class *self, void *data)
    {
      ::java::lang::ClassLoader value((jobject) NULL);
      OBJ_CALL(value = self->object.getClassLoader());
      return ::java::lang::t_ClassLoader::wrap_Object(value);
    }

    static PyObject *t_Class_get__classes(t_Class *self, void *data)
    {
      JArray< Class > value((jobject) NULL);
      OBJ_CALL(value = self->object.getClasses());
      return JArray<jobject>(value.this$).wrap(t_Class::wrap_jobject);
    }

    static PyObject *t_Class_get__componentType(t_Class *self, void *data)
    {
      Class value((jobject) NULL);
      OBJ_CALL(value = self->object.getComponentType());
      return t_Class::wrap_Object(value);
    }

    static PyObject *t_Class_get__declaredClasses(t_Class *self, void *data)
    {
      JArray< Class > value((jobject) NULL);
      OBJ_CALL(value = self->object.getDeclaredClasses());
      return JArray<jobject>(value.this$).wrap(t_Class::wrap_jobject);
    }

    static PyObject *t_Class_get__declaringClass(t_Class *self, void *data)
    {
      Class value((jobject) NULL);
      OBJ_CALL(value = self->object.getDeclaringClass());
      return t_Class::wrap_Object(value);
    }

    static PyObject *t_Class_get__enclosingClass(t_Class *self, void *data)
    {
      Class value((jobject) NULL);
      OBJ_CALL(value = self->object.getEnclosingClass());
      return t_Class::wrap_Object(value);
    }

    static PyObject *t_Class_get__enum(t_Class *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isEnum());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Class_get__enumConstants(t_Class *self, void *data)
    {
      JArray< ::java::lang::Object > value((jobject) NULL);
      OBJ_CALL(value = self->object.getEnumConstants());
      return JArray<jobject>(value.this$).wrap(::java::lang::t_Object::wrap_jobject);
    }

    static PyObject *t_Class_get__interface(t_Class *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isInterface());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Class_get__interfaces(t_Class *self, void *data)
    {
      JArray< Class > value((jobject) NULL);
      OBJ_CALL(value = self->object.getInterfaces());
      return JArray<jobject>(value.this$).wrap(t_Class::wrap_jobject);
    }

    static PyObject *t_Class_get__localClass(t_Class *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isLocalClass());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Class_get__memberClass(t_Class *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isMemberClass());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Class_get__modifiers(t_Class *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getModifiers());
      return PyInt_FromLong((long) value);
    }

    static PyObject *t_Class_get__name(t_Class *self, void *data)
    {
      ::java::lang::String value((jobject) NULL);
      OBJ_CALL(value = self->object.getName());
      return j2p(value);
    }

    static PyObject *t_Class_get__package(t_Class *self, void *data)
    {
      ::java::lang::Package value((jobject) NULL);
      OBJ_CALL(value = self->object.getPackage());
      return ::java::lang::t_Package::wrap_Object(value);
    }

    static PyObject *t_Class_get__primitive(t_Class *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isPrimitive());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Class_get__signers(t_Class *self, void *data)
    {
      JArray< ::java::lang::Object > value((jobject) NULL);
      OBJ_CALL(value = self->object.getSigners());
      return JArray<jobject>(value.this$).wrap(::java::lang::t_Object::wrap_jobject);
    }

    static PyObject *t_Class_get__simpleName(t_Class *self, void *data)
    {
      ::java::lang::String value((jobject) NULL);
      OBJ_CALL(value = self->object.getSimpleName());
      return j2p(value);
    }

    static PyObject *t_Class_get__superclass(t_Class *self, void *data)
    {
      Class value((jobject) NULL);
      OBJ_CALL(value = self->object.getSuperclass());
      return t_Class::wrap_Object(value);
    }

    static PyObject *t_Class_get__synthetic(t_Class *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isSynthetic());
      Py_RETURN_BOOL(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/ext/ExtensionQuery.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/classic/QueryParser.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace ext {

          ::java::lang::Class *ExtensionQuery::class$ = NULL;
          jmethodID *ExtensionQuery::mids$ = NULL;
          bool ExtensionQuery::live$ = false;

          jclass ExtensionQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/ext/ExtensionQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_a24cebd3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/classic/QueryParser;Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getRawQueryString_14c7b5c5] = env->getMethodID(cls, "getRawQueryString", "()Ljava/lang/String;");
              mids$[mid_getTopLevelParser_f96fcc72] = env->getMethodID(cls, "getTopLevelParser", "()Lorg/apache/lucene/queryparser/classic/QueryParser;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ExtensionQuery::ExtensionQuery(const ::org::apache::lucene::queryparser::classic::QueryParser & a0, const ::java::lang::String & a1, const ::java::lang::String & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a24cebd3, a0.this$, a1.this$, a2.this$)) {}

          ::java::lang::String ExtensionQuery::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
          }

          ::java::lang::String ExtensionQuery::getRawQueryString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getRawQueryString_14c7b5c5]));
          }

          ::org::apache::lucene::queryparser::classic::QueryParser ExtensionQuery::getTopLevelParser() const
          {
            return ::org::apache::lucene::queryparser::classic::QueryParser(env->callObjectMethod(this$, mids$[mid_getTopLevelParser_f96fcc72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace ext {
          static PyObject *t_ExtensionQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ExtensionQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ExtensionQuery_init_(t_ExtensionQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ExtensionQuery_getField(t_ExtensionQuery *self);
          static PyObject *t_ExtensionQuery_getRawQueryString(t_ExtensionQuery *self);
          static PyObject *t_ExtensionQuery_getTopLevelParser(t_ExtensionQuery *self);
          static PyObject *t_ExtensionQuery_get__field(t_ExtensionQuery *self, void *data);
          static PyObject *t_ExtensionQuery_get__rawQueryString(t_ExtensionQuery *self, void *data);
          static PyObject *t_ExtensionQuery_get__topLevelParser(t_ExtensionQuery *self, void *data);
          static PyGetSetDef t_ExtensionQuery__fields_[] = {
            DECLARE_GET_FIELD(t_ExtensionQuery, field),
            DECLARE_GET_FIELD(t_ExtensionQuery, rawQueryString),
            DECLARE_GET_FIELD(t_ExtensionQuery, topLevelParser),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ExtensionQuery__methods_[] = {
            DECLARE_METHOD(t_ExtensionQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ExtensionQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ExtensionQuery, getField, METH_NOARGS),
            DECLARE_METHOD(t_ExtensionQuery, getRawQueryString, METH_NOARGS),
            DECLARE_METHOD(t_ExtensionQuery, getTopLevelParser, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ExtensionQuery, t_ExtensionQuery, ::java::lang::Object, ExtensionQuery, t_ExtensionQuery_init_, 0, 0, t_ExtensionQuery__fields_, 0, 0);

          void t_ExtensionQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(ExtensionQuery), module, "ExtensionQuery", 0);
          }

          void t_ExtensionQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ExtensionQuery).tp_dict, "class_", make_descriptor(ExtensionQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ExtensionQuery).tp_dict, "wrapfn_", make_descriptor(t_ExtensionQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ExtensionQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ExtensionQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ExtensionQuery::initializeClass, 1)))
              return NULL;
            return t_ExtensionQuery::wrap_Object(ExtensionQuery(((t_ExtensionQuery *) arg)->object.this$));
          }
          static PyObject *t_ExtensionQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ExtensionQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ExtensionQuery_init_(t_ExtensionQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::queryparser::classic::QueryParser a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            ExtensionQuery object((jobject) NULL);

            if (!parseArgs(args, "kss", ::org::apache::lucene::queryparser::classic::QueryParser::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = ExtensionQuery(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ExtensionQuery_getField(t_ExtensionQuery *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getField());
            return j2p(result);
          }

          static PyObject *t_ExtensionQuery_getRawQueryString(t_ExtensionQuery *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getRawQueryString());
            return j2p(result);
          }

          static PyObject *t_ExtensionQuery_getTopLevelParser(t_ExtensionQuery *self)
          {
            ::org::apache::lucene::queryparser::classic::QueryParser result((jobject) NULL);
            OBJ_CALL(result = self->object.getTopLevelParser());
            return ::org::apache::lucene::queryparser::classic::t_QueryParser::wrap_Object(result);
          }

          static PyObject *t_ExtensionQuery_get__field(t_ExtensionQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }

          static PyObject *t_ExtensionQuery_get__rawQueryString(t_ExtensionQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getRawQueryString());
            return j2p(value);
          }

          static PyObject *t_ExtensionQuery_get__topLevelParser(t_ExtensionQuery *self, void *data)
          {
            ::org::apache::lucene::queryparser::classic::QueryParser value((jobject) NULL);
            OBJ_CALL(value = self->object.getTopLevelParser());
            return ::org::apache::lucene::queryparser::classic::t_QueryParser::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/ReaderSlice.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *ReaderSlice::class$ = NULL;
        jmethodID *ReaderSlice::mids$ = NULL;
        jfieldID *ReaderSlice::fids$ = NULL;
        bool ReaderSlice::live$ = false;
        JArray< ReaderSlice > *ReaderSlice::EMPTY_ARRAY = NULL;

        jclass ReaderSlice::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/ReaderSlice");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_d3236aa4] = env->getMethodID(cls, "<init>", "(III)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_length] = env->getFieldID(cls, "length", "I");
            fids$[fid_readerIndex] = env->getFieldID(cls, "readerIndex", "I");
            fids$[fid_start] = env->getFieldID(cls, "start", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY_ARRAY = new JArray< ReaderSlice >(env->getStaticObjectField(cls, "EMPTY_ARRAY", "[Lorg/apache/lucene/index/ReaderSlice;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ReaderSlice::ReaderSlice(jint a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d3236aa4, a0, a1, a2)) {}

        ::java::lang::String ReaderSlice::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        jint ReaderSlice::_get_length() const
        {
          return env->getIntField(this$, fids$[fid_length]);
        }

        jint ReaderSlice::_get_readerIndex() const
        {
          return env->getIntField(this$, fids$[fid_readerIndex]);
        }

        jint ReaderSlice::_get_start() const
        {
          return env->getIntField(this$, fids$[fid_start]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_ReaderSlice_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ReaderSlice_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ReaderSlice_init_(t_ReaderSlice *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ReaderSlice_toString(t_ReaderSlice *self, PyObject *args);
        static PyObject *t_ReaderSlice_get__length(t_ReaderSlice *self, void *data);
        static PyObject *t_ReaderSlice_get__readerIndex(t_ReaderSlice *self, void *data);
        static PyObject *t_ReaderSlice_get__start(t_ReaderSlice *self, void *data);

        static PyGetSetDef t_ReaderSlice__fields_[] = {
          DECLARE_GET_FIELD(t_ReaderSlice, length),
          DECLARE_GET_FIELD(t_ReaderSlice, readerIndex),
          DECLARE_GET_FIELD(t_ReaderSlice, start),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ReaderSlice__methods_[] = {
          DECLARE_METHOD(t_ReaderSlice, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ReaderSlice, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ReaderSlice, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ReaderSlice, t_ReaderSlice, ::java::lang::Object, ReaderSlice, t_ReaderSlice_init_, 0, 0, t_ReaderSlice__fields_, 0, 0);

        void t_ReaderSlice::install(PyObject *module)
        {
          installType(&PY_TYPE(ReaderSlice), module, "ReaderSlice", 0);
        }

        void t_ReaderSlice::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ReaderSlice).tp_dict, "class_", make_descriptor(ReaderSlice::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ReaderSlice).tp_dict, "wrapfn_", make_descriptor(t_ReaderSlice::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ReaderSlice).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(ReaderSlice::initializeClass);
          PyDict_SetItemString(PY_TYPE(ReaderSlice).tp_dict, "EMPTY_ARRAY", make_descriptor(JArray<jobject>(ReaderSlice::EMPTY_ARRAY->this$).wrap(t_ReaderSlice::wrap_jobject)));
        }

        static PyObject *t_ReaderSlice_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ReaderSlice::initializeClass, 1)))
            return NULL;
          return t_ReaderSlice::wrap_Object(ReaderSlice(((t_ReaderSlice *) arg)->object.this$));
        }
        static PyObject *t_ReaderSlice_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ReaderSlice::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ReaderSlice_init_(t_ReaderSlice *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          jint a1;
          jint a2;
          ReaderSlice object((jobject) NULL);

          if (!parseArgs(args, "III", &a0, &a1, &a2))
          {
            INT_CALL(object = ReaderSlice(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ReaderSlice_toString(t_ReaderSlice *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(ReaderSlice), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_ReaderSlice_get__length(t_ReaderSlice *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_length());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_ReaderSlice_get__readerIndex(t_ReaderSlice *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_readerIndex());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_ReaderSlice_get__start(t_ReaderSlice *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_start());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/memory/MemoryIndex.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/util/Collection.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        namespace memory {

          ::java::lang::Class *MemoryIndex::class$ = NULL;
          jmethodID *MemoryIndex::mids$ = NULL;
          bool MemoryIndex::live$ = false;

          jclass MemoryIndex::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/index/memory/MemoryIndex");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_bb0c767f] = env->getMethodID(cls, "<init>", "(Z)V");
              mids$[mid_addField_7d0c5392] = env->getMethodID(cls, "addField", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_addField_2f58d53f] = env->getMethodID(cls, "addField", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;F)V");
              mids$[mid_addField_94a4a674] = env->getMethodID(cls, "addField", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_addField_29c81a73] = env->getMethodID(cls, "addField", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;FI)V");
              mids$[mid_addField_6b38bf6f] = env->getMethodID(cls, "addField", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;FII)V");
              mids$[mid_createSearcher_cab79e71] = env->getMethodID(cls, "createSearcher", "()Lorg/apache/lucene/search/IndexSearcher;");
              mids$[mid_keywordTokenStream_f7dc1120] = env->getMethodID(cls, "keywordTokenStream", "(Ljava/util/Collection;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_search_6e301103] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/Query;)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MemoryIndex::MemoryIndex() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          MemoryIndex::MemoryIndex(jboolean a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_bb0c767f, a0)) {}

          void MemoryIndex::addField(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_addField_7d0c5392], a0.this$, a1.this$);
          }

          void MemoryIndex::addField(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1, jfloat a2) const
          {
            env->callVoidMethod(this$, mids$[mid_addField_2f58d53f], a0.this$, a1.this$, a2);
          }

          void MemoryIndex::addField(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer & a2) const
          {
            env->callVoidMethod(this$, mids$[mid_addField_94a4a674], a0.this$, a1.this$, a2.this$);
          }

          void MemoryIndex::addField(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1, jfloat a2, jint a3) const
          {
            env->callVoidMethod(this$, mids$[mid_addField_29c81a73], a0.this$, a1.this$, a2, a3);
          }

          void MemoryIndex::addField(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1, jfloat a2, jint a3, jint a4) const
          {
            env->callVoidMethod(this$, mids$[mid_addField_6b38bf6f], a0.this$, a1.this$, a2, a3, a4);
          }

          ::org::apache::lucene::search::IndexSearcher MemoryIndex::createSearcher() const
          {
            return ::org::apache::lucene::search::IndexSearcher(env->callObjectMethod(this$, mids$[mid_createSearcher_cab79e71]));
          }

          ::org::apache::lucene::analysis::TokenStream MemoryIndex::keywordTokenStream(const ::java::util::Collection & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_keywordTokenStream_f7dc1120], a0.this$));
          }

          void MemoryIndex::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }

          jfloat MemoryIndex::search(const ::org::apache::lucene::search::Query & a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_search_6e301103], a0.this$);
          }

          ::java::lang::String MemoryIndex::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        namespace memory {
          static PyObject *t_MemoryIndex_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MemoryIndex_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MemoryIndex_init_(t_MemoryIndex *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MemoryIndex_addField(t_MemoryIndex *self, PyObject *args);
          static PyObject *t_MemoryIndex_createSearcher(t_MemoryIndex *self);
          static PyObject *t_MemoryIndex_keywordTokenStream(t_MemoryIndex *self, PyObject *arg);
          static PyObject *t_MemoryIndex_reset(t_MemoryIndex *self);
          static PyObject *t_MemoryIndex_search(t_MemoryIndex *self, PyObject *arg);
          static PyObject *t_MemoryIndex_toString(t_MemoryIndex *self, PyObject *args);

          static PyMethodDef t_MemoryIndex__methods_[] = {
            DECLARE_METHOD(t_MemoryIndex, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MemoryIndex, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MemoryIndex, addField, METH_VARARGS),
            DECLARE_METHOD(t_MemoryIndex, createSearcher, METH_NOARGS),
            DECLARE_METHOD(t_MemoryIndex, keywordTokenStream, METH_O),
            DECLARE_METHOD(t_MemoryIndex, reset, METH_NOARGS),
            DECLARE_METHOD(t_MemoryIndex, search, METH_O),
            DECLARE_METHOD(t_MemoryIndex, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MemoryIndex, t_MemoryIndex, ::java::lang::Object, MemoryIndex, t_MemoryIndex_init_, 0, 0, 0, 0, 0);

          void t_MemoryIndex::install(PyObject *module)
          {
            installType(&PY_TYPE(MemoryIndex), module, "MemoryIndex", 0);
          }

          void t_MemoryIndex::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MemoryIndex).tp_dict, "class_", make_descriptor(MemoryIndex::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MemoryIndex).tp_dict, "wrapfn_", make_descriptor(t_MemoryIndex::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MemoryIndex).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MemoryIndex_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MemoryIndex::initializeClass, 1)))
              return NULL;
            return t_MemoryIndex::wrap_Object(MemoryIndex(((t_MemoryIndex *) arg)->object.this$));
          }
          static PyObject *t_MemoryIndex_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MemoryIndex::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MemoryIndex_init_(t_MemoryIndex *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                MemoryIndex object((jobject) NULL);

                INT_CALL(object = MemoryIndex());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jboolean a0;
                MemoryIndex object((jobject) NULL);

                if (!parseArgs(args, "Z", &a0))
                {
                  INT_CALL(object = MemoryIndex(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_MemoryIndex_addField(t_MemoryIndex *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);

                if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(self->object.addField(a0, a1));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 3:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                jfloat a2;

                if (!parseArgs(args, "skF", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(self->object.addField(a0, a1, a2));
                  Py_RETURN_NONE;
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);

                if (!parseArgs(args, "ssk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(self->object.addField(a0, a1, a2));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 4:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                jfloat a2;
                jint a3;

                if (!parseArgs(args, "skFI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(self->object.addField(a0, a1, a2, a3));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 5:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                jfloat a2;
                jint a3;
                jint a4;

                if (!parseArgs(args, "skFII", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(self->object.addField(a0, a1, a2, a3, a4));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "addField", args);
            return NULL;
          }

          static PyObject *t_MemoryIndex_createSearcher(t_MemoryIndex *self)
          {
            ::org::apache::lucene::search::IndexSearcher result((jobject) NULL);
            OBJ_CALL(result = self->object.createSearcher());
            return ::org::apache::lucene::search::t_IndexSearcher::wrap_Object(result);
          }

          static PyObject *t_MemoryIndex_keywordTokenStream(t_MemoryIndex *self, PyObject *arg)
          {
            ::java::util::Collection a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
            {
              OBJ_CALL(result = self->object.keywordTokenStream(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "keywordTokenStream", arg);
            return NULL;
          }

          static PyObject *t_MemoryIndex_reset(t_MemoryIndex *self)
          {
            OBJ_CALL(self->object.reset());
            Py_RETURN_NONE;
          }

          static PyObject *t_MemoryIndex_search(t_MemoryIndex *self, PyObject *arg)
          {
            ::org::apache::lucene::search::Query a0((jobject) NULL);
            jfloat result;

            if (!parseArg(arg, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.search(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "search", arg);
            return NULL;
          }

          static PyObject *t_MemoryIndex_toString(t_MemoryIndex *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(MemoryIndex), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TermCollectingRewrite.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TermCollectingRewrite::class$ = NULL;
        jmethodID *TermCollectingRewrite::mids$ = NULL;
        bool TermCollectingRewrite::live$ = false;

        jclass TermCollectingRewrite::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TermCollectingRewrite");

            mids$ = new jmethodID[max_mid];
            mids$[mid_addClause_6e72b6c4] = env->getMethodID(cls, "addClause", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/index/Term;IFLorg/apache/lucene/index/TermContext;)V");
            mids$[mid_addClause_5594f39b] = env->getMethodID(cls, "addClause", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/index/Term;IF)V");
            mids$[mid_getTopLevelQuery_97e3851a] = env->getMethodID(cls, "getTopLevelQuery", "()Lorg/apache/lucene/search/Query;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TermCollectingRewrite_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermCollectingRewrite_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermCollectingRewrite_of_(t_TermCollectingRewrite *self, PyObject *args);
        static PyObject *t_TermCollectingRewrite_get__parameters_(t_TermCollectingRewrite *self, void *data);
        static PyGetSetDef t_TermCollectingRewrite__fields_[] = {
          DECLARE_GET_FIELD(t_TermCollectingRewrite, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TermCollectingRewrite__methods_[] = {
          DECLARE_METHOD(t_TermCollectingRewrite, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermCollectingRewrite, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermCollectingRewrite, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermCollectingRewrite, t_TermCollectingRewrite, ::org::apache::lucene::search::MultiTermQuery$RewriteMethod, TermCollectingRewrite, abstract_init, 0, 0, t_TermCollectingRewrite__fields_, 0, 0);
        PyObject *t_TermCollectingRewrite::wrap_Object(const TermCollectingRewrite& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TermCollectingRewrite::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TermCollectingRewrite *self = (t_TermCollectingRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_TermCollectingRewrite::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TermCollectingRewrite::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TermCollectingRewrite *self = (t_TermCollectingRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_TermCollectingRewrite::install(PyObject *module)
        {
          installType(&PY_TYPE(TermCollectingRewrite), module, "TermCollectingRewrite", 0);
        }

        void t_TermCollectingRewrite::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermCollectingRewrite).tp_dict, "class_", make_descriptor(TermCollectingRewrite::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermCollectingRewrite).tp_dict, "wrapfn_", make_descriptor(t_TermCollectingRewrite::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermCollectingRewrite).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermCollectingRewrite_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermCollectingRewrite::initializeClass, 1)))
            return NULL;
          return t_TermCollectingRewrite::wrap_Object(TermCollectingRewrite(((t_TermCollectingRewrite *) arg)->object.this$));
        }
        static PyObject *t_TermCollectingRewrite_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermCollectingRewrite::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TermCollectingRewrite_of_(t_TermCollectingRewrite *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }
        static PyObject *t_TermCollectingRewrite_get__parameters_(t_TermCollectingRewrite *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/writercache/NameIntCacheLRU.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {

            ::java::lang::Class *NameIntCacheLRU::class$ = NULL;
            jmethodID *NameIntCacheLRU::mids$ = NULL;
            bool NameIntCacheLRU::live$ = false;

            jclass NameIntCacheLRU::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/writercache/NameIntCacheLRU");

                mids$ = new jmethodID[max_mid];
                mids$[mid_getMaxSize_54c6a179] = env->getMethodID(cls, "getMaxSize", "()I");
                mids$[mid_getSize_54c6a179] = env->getMethodID(cls, "getSize", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            jint NameIntCacheLRU::getMaxSize() const
            {
              return env->callIntMethod(this$, mids$[mid_getMaxSize_54c6a179]);
            }

            jint NameIntCacheLRU::getSize() const
            {
              return env->callIntMethod(this$, mids$[mid_getSize_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {
            static PyObject *t_NameIntCacheLRU_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NameIntCacheLRU_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NameIntCacheLRU_getMaxSize(t_NameIntCacheLRU *self);
            static PyObject *t_NameIntCacheLRU_getSize(t_NameIntCacheLRU *self);
            static PyObject *t_NameIntCacheLRU_get__maxSize(t_NameIntCacheLRU *self, void *data);
            static PyObject *t_NameIntCacheLRU_get__size(t_NameIntCacheLRU *self, void *data);
            static PyGetSetDef t_NameIntCacheLRU__fields_[] = {
              DECLARE_GET_FIELD(t_NameIntCacheLRU, maxSize),
              DECLARE_GET_FIELD(t_NameIntCacheLRU, size),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_NameIntCacheLRU__methods_[] = {
              DECLARE_METHOD(t_NameIntCacheLRU, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NameIntCacheLRU, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NameIntCacheLRU, getMaxSize, METH_NOARGS),
              DECLARE_METHOD(t_NameIntCacheLRU, getSize, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(NameIntCacheLRU, t_NameIntCacheLRU, ::java::lang::Object, NameIntCacheLRU, abstract_init, 0, 0, t_NameIntCacheLRU__fields_, 0, 0);

            void t_NameIntCacheLRU::install(PyObject *module)
            {
              installType(&PY_TYPE(NameIntCacheLRU), module, "NameIntCacheLRU", 0);
            }

            void t_NameIntCacheLRU::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(NameIntCacheLRU).tp_dict, "class_", make_descriptor(NameIntCacheLRU::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(NameIntCacheLRU).tp_dict, "wrapfn_", make_descriptor(t_NameIntCacheLRU::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(NameIntCacheLRU).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_NameIntCacheLRU_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, NameIntCacheLRU::initializeClass, 1)))
                return NULL;
              return t_NameIntCacheLRU::wrap_Object(NameIntCacheLRU(((t_NameIntCacheLRU *) arg)->object.this$));
            }
            static PyObject *t_NameIntCacheLRU_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, NameIntCacheLRU::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_NameIntCacheLRU_getMaxSize(t_NameIntCacheLRU *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getMaxSize());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_NameIntCacheLRU_getSize(t_NameIntCacheLRU *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getSize());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_NameIntCacheLRU_get__maxSize(t_NameIntCacheLRU *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getMaxSize());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_NameIntCacheLRU_get__size(t_NameIntCacheLRU *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getSize());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/CharSequenceOutputs.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/CharsRef.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *CharSequenceOutputs::class$ = NULL;
          jmethodID *CharSequenceOutputs::mids$ = NULL;
          bool CharSequenceOutputs::live$ = false;

          jclass CharSequenceOutputs::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/CharSequenceOutputs");

              mids$ = new jmethodID[max_mid];
              mids$[mid_add_8f9b8d9f] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/CharsRef;Lorg/apache/lucene/util/CharsRef;)Lorg/apache/lucene/util/CharsRef;");
              mids$[mid_common_8f9b8d9f] = env->getMethodID(cls, "common", "(Lorg/apache/lucene/util/CharsRef;Lorg/apache/lucene/util/CharsRef;)Lorg/apache/lucene/util/CharsRef;");
              mids$[mid_getNoOutput_399267bb] = env->getMethodID(cls, "getNoOutput", "()Lorg/apache/lucene/util/CharsRef;");
              mids$[mid_getSingleton_b8f978d1] = env->getStaticMethodID(cls, "getSingleton", "()Lorg/apache/lucene/util/fst/CharSequenceOutputs;");
              mids$[mid_outputToString_ea1848b1] = env->getMethodID(cls, "outputToString", "(Lorg/apache/lucene/util/CharsRef;)Ljava/lang/String;");
              mids$[mid_read_cbeddd00] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/DataInput;)Lorg/apache/lucene/util/CharsRef;");
              mids$[mid_skipOutput_f5d6a551] = env->getMethodID(cls, "skipOutput", "(Lorg/apache/lucene/store/DataInput;)V");
              mids$[mid_subtract_8f9b8d9f] = env->getMethodID(cls, "subtract", "(Lorg/apache/lucene/util/CharsRef;Lorg/apache/lucene/util/CharsRef;)Lorg/apache/lucene/util/CharsRef;");
              mids$[mid_write_9a0fad97] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/util/CharsRef;Lorg/apache/lucene/store/DataOutput;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::util::CharsRef CharSequenceOutputs::add(const ::org::apache::lucene::util::CharsRef & a0, const ::org::apache::lucene::util::CharsRef & a1) const
          {
            return ::org::apache::lucene::util::CharsRef(env->callObjectMethod(this$, mids$[mid_add_8f9b8d9f], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::CharsRef CharSequenceOutputs::common(const ::org::apache::lucene::util::CharsRef & a0, const ::org::apache::lucene::util::CharsRef & a1) const
          {
            return ::org::apache::lucene::util::CharsRef(env->callObjectMethod(this$, mids$[mid_common_8f9b8d9f], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::CharsRef CharSequenceOutputs::getNoOutput() const
          {
            return ::org::apache::lucene::util::CharsRef(env->callObjectMethod(this$, mids$[mid_getNoOutput_399267bb]));
          }

          CharSequenceOutputs CharSequenceOutputs::getSingleton()
          {
            jclass cls = env->getClass(initializeClass);
            return CharSequenceOutputs(env->callStaticObjectMethod(cls, mids$[mid_getSingleton_b8f978d1]));
          }

          ::java::lang::String CharSequenceOutputs::outputToString(const ::org::apache::lucene::util::CharsRef & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_outputToString_ea1848b1], a0.this$));
          }

          ::org::apache::lucene::util::CharsRef CharSequenceOutputs::read(const ::org::apache::lucene::store::DataInput & a0) const
          {
            return ::org::apache::lucene::util::CharsRef(env->callObjectMethod(this$, mids$[mid_read_cbeddd00], a0.this$));
          }

          void CharSequenceOutputs::skipOutput(const ::org::apache::lucene::store::DataInput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_skipOutput_f5d6a551], a0.this$);
          }

          ::org::apache::lucene::util::CharsRef CharSequenceOutputs::subtract(const ::org::apache::lucene::util::CharsRef & a0, const ::org::apache::lucene::util::CharsRef & a1) const
          {
            return ::org::apache::lucene::util::CharsRef(env->callObjectMethod(this$, mids$[mid_subtract_8f9b8d9f], a0.this$, a1.this$));
          }

          void CharSequenceOutputs::write(const ::org::apache::lucene::util::CharsRef & a0, const ::org::apache::lucene::store::DataOutput & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_write_9a0fad97], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_CharSequenceOutputs_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharSequenceOutputs_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharSequenceOutputs_of_(t_CharSequenceOutputs *self, PyObject *args);
          static PyObject *t_CharSequenceOutputs_add(t_CharSequenceOutputs *self, PyObject *args);
          static PyObject *t_CharSequenceOutputs_common(t_CharSequenceOutputs *self, PyObject *args);
          static PyObject *t_CharSequenceOutputs_getNoOutput(t_CharSequenceOutputs *self, PyObject *args);
          static PyObject *t_CharSequenceOutputs_getSingleton(PyTypeObject *type);
          static PyObject *t_CharSequenceOutputs_outputToString(t_CharSequenceOutputs *self, PyObject *args);
          static PyObject *t_CharSequenceOutputs_read(t_CharSequenceOutputs *self, PyObject *args);
          static PyObject *t_CharSequenceOutputs_skipOutput(t_CharSequenceOutputs *self, PyObject *args);
          static PyObject *t_CharSequenceOutputs_subtract(t_CharSequenceOutputs *self, PyObject *args);
          static PyObject *t_CharSequenceOutputs_write(t_CharSequenceOutputs *self, PyObject *args);
          static PyObject *t_CharSequenceOutputs_get__noOutput(t_CharSequenceOutputs *self, void *data);
          static PyObject *t_CharSequenceOutputs_get__singleton(t_CharSequenceOutputs *self, void *data);
          static PyObject *t_CharSequenceOutputs_get__parameters_(t_CharSequenceOutputs *self, void *data);
          static PyGetSetDef t_CharSequenceOutputs__fields_[] = {
            DECLARE_GET_FIELD(t_CharSequenceOutputs, noOutput),
            DECLARE_GET_FIELD(t_CharSequenceOutputs, singleton),
            DECLARE_GET_FIELD(t_CharSequenceOutputs, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CharSequenceOutputs__methods_[] = {
            DECLARE_METHOD(t_CharSequenceOutputs, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharSequenceOutputs, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharSequenceOutputs, of_, METH_VARARGS),
            DECLARE_METHOD(t_CharSequenceOutputs, add, METH_VARARGS),
            DECLARE_METHOD(t_CharSequenceOutputs, common, METH_VARARGS),
            DECLARE_METHOD(t_CharSequenceOutputs, getNoOutput, METH_VARARGS),
            DECLARE_METHOD(t_CharSequenceOutputs, getSingleton, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_CharSequenceOutputs, outputToString, METH_VARARGS),
            DECLARE_METHOD(t_CharSequenceOutputs, read, METH_VARARGS),
            DECLARE_METHOD(t_CharSequenceOutputs, skipOutput, METH_VARARGS),
            DECLARE_METHOD(t_CharSequenceOutputs, subtract, METH_VARARGS),
            DECLARE_METHOD(t_CharSequenceOutputs, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CharSequenceOutputs, t_CharSequenceOutputs, ::org::apache::lucene::util::fst::Outputs, CharSequenceOutputs, abstract_init, 0, 0, t_CharSequenceOutputs__fields_, 0, 0);
          PyObject *t_CharSequenceOutputs::wrap_Object(const CharSequenceOutputs& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CharSequenceOutputs::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CharSequenceOutputs *self = (t_CharSequenceOutputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_CharSequenceOutputs::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CharSequenceOutputs::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CharSequenceOutputs *self = (t_CharSequenceOutputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_CharSequenceOutputs::install(PyObject *module)
          {
            installType(&PY_TYPE(CharSequenceOutputs), module, "CharSequenceOutputs", 0);
          }

          void t_CharSequenceOutputs::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CharSequenceOutputs).tp_dict, "class_", make_descriptor(CharSequenceOutputs::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CharSequenceOutputs).tp_dict, "wrapfn_", make_descriptor(t_CharSequenceOutputs::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CharSequenceOutputs).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CharSequenceOutputs_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharSequenceOutputs::initializeClass, 1)))
              return NULL;
            return t_CharSequenceOutputs::wrap_Object(CharSequenceOutputs(((t_CharSequenceOutputs *) arg)->object.this$));
          }
          static PyObject *t_CharSequenceOutputs_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharSequenceOutputs::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CharSequenceOutputs_of_(t_CharSequenceOutputs *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_CharSequenceOutputs_add(t_CharSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::CharsRef a0((jobject) NULL);
            ::org::apache::lucene::util::CharsRef a1((jobject) NULL);
            ::org::apache::lucene::util::CharsRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::CharsRef::initializeClass, ::org::apache::lucene::util::CharsRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.add(a0, a1));
              return ::org::apache::lucene::util::t_CharsRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CharSequenceOutputs), (PyObject *) self, "add", args, 2);
          }

          static PyObject *t_CharSequenceOutputs_common(t_CharSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::CharsRef a0((jobject) NULL);
            ::org::apache::lucene::util::CharsRef a1((jobject) NULL);
            ::org::apache::lucene::util::CharsRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::CharsRef::initializeClass, ::org::apache::lucene::util::CharsRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.common(a0, a1));
              return ::org::apache::lucene::util::t_CharsRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CharSequenceOutputs), (PyObject *) self, "common", args, 2);
          }

          static PyObject *t_CharSequenceOutputs_getNoOutput(t_CharSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::CharsRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getNoOutput());
              return ::org::apache::lucene::util::t_CharsRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CharSequenceOutputs), (PyObject *) self, "getNoOutput", args, 2);
          }

          static PyObject *t_CharSequenceOutputs_getSingleton(PyTypeObject *type)
          {
            CharSequenceOutputs result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::fst::CharSequenceOutputs::getSingleton());
            return t_CharSequenceOutputs::wrap_Object(result);
          }

          static PyObject *t_CharSequenceOutputs_outputToString(t_CharSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::CharsRef a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::CharsRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.outputToString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(CharSequenceOutputs), (PyObject *) self, "outputToString", args, 2);
          }

          static PyObject *t_CharSequenceOutputs_read(t_CharSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::org::apache::lucene::util::CharsRef result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.read(a0));
              return ::org::apache::lucene::util::t_CharsRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CharSequenceOutputs), (PyObject *) self, "read", args, 2);
          }

          static PyObject *t_CharSequenceOutputs_skipOutput(t_CharSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.skipOutput(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CharSequenceOutputs), (PyObject *) self, "skipOutput", args, 2);
          }

          static PyObject *t_CharSequenceOutputs_subtract(t_CharSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::CharsRef a0((jobject) NULL);
            ::org::apache::lucene::util::CharsRef a1((jobject) NULL);
            ::org::apache::lucene::util::CharsRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::CharsRef::initializeClass, ::org::apache::lucene::util::CharsRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.subtract(a0, a1));
              return ::org::apache::lucene::util::t_CharsRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CharSequenceOutputs), (PyObject *) self, "subtract", args, 2);
          }

          static PyObject *t_CharSequenceOutputs_write(t_CharSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::CharsRef a0((jobject) NULL);
            ::org::apache::lucene::store::DataOutput a1((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::CharsRef::initializeClass, ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.write(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CharSequenceOutputs), (PyObject *) self, "write", args, 2);
          }
          static PyObject *t_CharSequenceOutputs_get__parameters_(t_CharSequenceOutputs *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_CharSequenceOutputs_get__noOutput(t_CharSequenceOutputs *self, void *data)
          {
            ::org::apache::lucene::util::CharsRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getNoOutput());
            return ::org::apache::lucene::util::t_CharsRef::wrap_Object(value);
          }

          static PyObject *t_CharSequenceOutputs_get__singleton(t_CharSequenceOutputs *self, void *data)
          {
            CharSequenceOutputs value((jobject) NULL);
            OBJ_CALL(value = self->object.getSingleton());
            return t_CharSequenceOutputs::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/Util$Result.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *Util$Result::class$ = NULL;
          jmethodID *Util$Result::mids$ = NULL;
          jfieldID *Util$Result::fids$ = NULL;
          bool Util$Result::live$ = false;

          jclass Util$Result::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/Util$Result");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_52197430] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/IntsRef;Ljava/lang/Object;)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_input] = env->getFieldID(cls, "input", "Lorg/apache/lucene/util/IntsRef;");
              fids$[fid_output] = env->getFieldID(cls, "output", "Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Util$Result::Util$Result(const ::org::apache::lucene::util::IntsRef & a0, const ::java::lang::Object & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_52197430, a0.this$, a1.this$)) {}

          ::org::apache::lucene::util::IntsRef Util$Result::_get_input() const
          {
            return ::org::apache::lucene::util::IntsRef(env->getObjectField(this$, fids$[fid_input]));
          }

          ::java::lang::Object Util$Result::_get_output() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_output]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_Util$Result_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Util$Result_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Util$Result_of_(t_Util$Result *self, PyObject *args);
          static int t_Util$Result_init_(t_Util$Result *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Util$Result_get__input(t_Util$Result *self, void *data);
          static PyObject *t_Util$Result_get__output(t_Util$Result *self, void *data);

          static PyObject *t_Util$Result_get__parameters_(t_Util$Result *self, void *data);
          static PyGetSetDef t_Util$Result__fields_[] = {
            DECLARE_GET_FIELD(t_Util$Result, input),
            DECLARE_GET_FIELD(t_Util$Result, output),
            DECLARE_GET_FIELD(t_Util$Result, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Util$Result__methods_[] = {
            DECLARE_METHOD(t_Util$Result, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Util$Result, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Util$Result, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Util$Result, t_Util$Result, ::java::lang::Object, Util$Result, t_Util$Result_init_, 0, 0, t_Util$Result__fields_, 0, 0);
          PyObject *t_Util$Result::wrap_Object(const Util$Result& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Util$Result::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Util$Result *self = (t_Util$Result *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_Util$Result::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Util$Result::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Util$Result *self = (t_Util$Result *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_Util$Result::install(PyObject *module)
          {
            installType(&PY_TYPE(Util$Result), module, "Util$Result", 0);
          }

          void t_Util$Result::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Util$Result).tp_dict, "class_", make_descriptor(Util$Result::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Util$Result).tp_dict, "wrapfn_", make_descriptor(t_Util$Result::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Util$Result).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Util$Result_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Util$Result::initializeClass, 1)))
              return NULL;
            return t_Util$Result::wrap_Object(Util$Result(((t_Util$Result *) arg)->object.this$));
          }
          static PyObject *t_Util$Result_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Util$Result::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Util$Result_of_(t_Util$Result *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_Util$Result_init_(t_Util$Result *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            Util$Result object((jobject) NULL);

            if (!parseArgs(args, "ko", ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &a1))
            {
              INT_CALL(object = Util$Result(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
          static PyObject *t_Util$Result_get__parameters_(t_Util$Result *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_Util$Result_get__input(t_Util$Result *self, void *data)
          {
            ::org::apache::lucene::util::IntsRef value((jobject) NULL);
            OBJ_CALL(value = self->object._get_input());
            return ::org::apache::lucene::util::t_IntsRef::wrap_Object(value);
          }

          static PyObject *t_Util$Result_get__output(t_Util$Result *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_output());
            return ::java::lang::t_Object::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/InputStreamReader.h"
#include "java/lang/String.h"
#include "java/io/InputStream.h"
#include "java/io/IOException.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace io {

    ::java::lang::Class *InputStreamReader::class$ = NULL;
    jmethodID *InputStreamReader::mids$ = NULL;
    bool InputStreamReader::live$ = false;

    jclass InputStreamReader::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/io/InputStreamReader");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
        mids$[mid_init$_32277d42] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;Ljava/lang/String;)V");
        mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
        mids$[mid_getEncoding_14c7b5c5] = env->getMethodID(cls, "getEncoding", "()Ljava/lang/String;");
        mids$[mid_read_54c6a179] = env->getMethodID(cls, "read", "()I");
        mids$[mid_read_6f0bb349] = env->getMethodID(cls, "read", "([CII)I");
        mids$[mid_ready_54c6a16a] = env->getMethodID(cls, "ready", "()Z");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    InputStreamReader::InputStreamReader(const ::java::io::InputStream & a0) : ::java::io::Reader(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

    InputStreamReader::InputStreamReader(const ::java::io::InputStream & a0, const ::java::lang::String & a1) : ::java::io::Reader(env->newObject(initializeClass, &mids$, mid_init$_32277d42, a0.this$, a1.this$)) {}

    void InputStreamReader::close() const
    {
      env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
    }

    ::java::lang::String InputStreamReader::getEncoding() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getEncoding_14c7b5c5]));
    }

    jint InputStreamReader::read() const
    {
      return env->callIntMethod(this$, mids$[mid_read_54c6a179]);
    }

    jint InputStreamReader::read(const JArray< jchar > & a0, jint a1, jint a2) const
    {
      return env->callIntMethod(this$, mids$[mid_read_6f0bb349], a0.this$, a1, a2);
    }

    jboolean InputStreamReader::ready() const
    {
      return env->callBooleanMethod(this$, mids$[mid_ready_54c6a16a]);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace io {
    static PyObject *t_InputStreamReader_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_InputStreamReader_instance_(PyTypeObject *type, PyObject *arg);
    static int t_InputStreamReader_init_(t_InputStreamReader *self, PyObject *args, PyObject *kwds);
    static PyObject *t_InputStreamReader_close(t_InputStreamReader *self, PyObject *args);
    static PyObject *t_InputStreamReader_getEncoding(t_InputStreamReader *self);
    static PyObject *t_InputStreamReader_read(t_InputStreamReader *self, PyObject *args);
    static PyObject *t_InputStreamReader_ready(t_InputStreamReader *self, PyObject *args);
    static PyObject *t_InputStreamReader_get__encoding(t_InputStreamReader *self, void *data);
    static PyGetSetDef t_InputStreamReader__fields_[] = {
      DECLARE_GET_FIELD(t_InputStreamReader, encoding),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_InputStreamReader__methods_[] = {
      DECLARE_METHOD(t_InputStreamReader, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_InputStreamReader, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_InputStreamReader, close, METH_VARARGS),
      DECLARE_METHOD(t_InputStreamReader, getEncoding, METH_NOARGS),
      DECLARE_METHOD(t_InputStreamReader, read, METH_VARARGS),
      DECLARE_METHOD(t_InputStreamReader, ready, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(InputStreamReader, t_InputStreamReader, ::java::io::Reader, InputStreamReader, t_InputStreamReader_init_, 0, 0, t_InputStreamReader__fields_, 0, 0);

    void t_InputStreamReader::install(PyObject *module)
    {
      installType(&PY_TYPE(InputStreamReader), module, "InputStreamReader", 0);
    }

    void t_InputStreamReader::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(InputStreamReader).tp_dict, "class_", make_descriptor(InputStreamReader::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(InputStreamReader).tp_dict, "wrapfn_", make_descriptor(t_InputStreamReader::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(InputStreamReader).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_InputStreamReader_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, InputStreamReader::initializeClass, 1)))
        return NULL;
      return t_InputStreamReader::wrap_Object(InputStreamReader(((t_InputStreamReader *) arg)->object.this$));
    }
    static PyObject *t_InputStreamReader_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, InputStreamReader::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_InputStreamReader_init_(t_InputStreamReader *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::io::InputStream a0((jobject) NULL);
          InputStreamReader object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
          {
            INT_CALL(object = InputStreamReader(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          ::java::io::InputStream a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          InputStreamReader object((jobject) NULL);

          if (!parseArgs(args, "ks", ::java::io::InputStream::initializeClass, &a0, &a1))
          {
            INT_CALL(object = InputStreamReader(a0, a1));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_InputStreamReader_close(t_InputStreamReader *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.close());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(InputStreamReader), (PyObject *) self, "close", args, 2);
    }

    static PyObject *t_InputStreamReader_getEncoding(t_InputStreamReader *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.getEncoding());
      return j2p(result);
    }

    static PyObject *t_InputStreamReader_read(t_InputStreamReader *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          jint result;
          OBJ_CALL(result = self->object.read());
          return PyInt_FromLong((long) result);
        }
        break;
       case 3:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.read(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
      }

      return callSuper(&PY_TYPE(InputStreamReader), (PyObject *) self, "read", args, 2);
    }

    static PyObject *t_InputStreamReader_ready(t_InputStreamReader *self, PyObject *args)
    {
      jboolean result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.ready());
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(InputStreamReader), (PyObject *) self, "ready", args, 2);
    }

    static PyObject *t_InputStreamReader_get__encoding(t_InputStreamReader *self, void *data)
    {
      ::java::lang::String value((jobject) NULL);
      OBJ_CALL(value = self->object.getEncoding());
      return j2p(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/TokenGroup.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/Token.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *TokenGroup::class$ = NULL;
          jmethodID *TokenGroup::mids$ = NULL;
          bool TokenGroup::live$ = false;

          jclass TokenGroup::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/TokenGroup");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_getEndOffset_54c6a179] = env->getMethodID(cls, "getEndOffset", "()I");
              mids$[mid_getNumTokens_54c6a179] = env->getMethodID(cls, "getNumTokens", "()I");
              mids$[mid_getScore_39c7bd2c] = env->getMethodID(cls, "getScore", "(I)F");
              mids$[mid_getStartOffset_54c6a179] = env->getMethodID(cls, "getStartOffset", "()I");
              mids$[mid_getToken_2e456a21] = env->getMethodID(cls, "getToken", "(I)Lorg/apache/lucene/analysis/Token;");
              mids$[mid_getTotalScore_54c6a176] = env->getMethodID(cls, "getTotalScore", "()F");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TokenGroup::TokenGroup(const ::org::apache::lucene::analysis::TokenStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jint TokenGroup::getEndOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getEndOffset_54c6a179]);
          }

          jint TokenGroup::getNumTokens() const
          {
            return env->callIntMethod(this$, mids$[mid_getNumTokens_54c6a179]);
          }

          jfloat TokenGroup::getScore(jint a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_getScore_39c7bd2c], a0);
          }

          jint TokenGroup::getStartOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getStartOffset_54c6a179]);
          }

          ::org::apache::lucene::analysis::Token TokenGroup::getToken(jint a0) const
          {
            return ::org::apache::lucene::analysis::Token(env->callObjectMethod(this$, mids$[mid_getToken_2e456a21], a0));
          }

          jfloat TokenGroup::getTotalScore() const
          {
            return env->callFloatMethod(this$, mids$[mid_getTotalScore_54c6a176]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_TokenGroup_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenGroup_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TokenGroup_init_(t_TokenGroup *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TokenGroup_getEndOffset(t_TokenGroup *self);
          static PyObject *t_TokenGroup_getNumTokens(t_TokenGroup *self);
          static PyObject *t_TokenGroup_getScore(t_TokenGroup *self, PyObject *arg);
          static PyObject *t_TokenGroup_getStartOffset(t_TokenGroup *self);
          static PyObject *t_TokenGroup_getToken(t_TokenGroup *self, PyObject *arg);
          static PyObject *t_TokenGroup_getTotalScore(t_TokenGroup *self);
          static PyObject *t_TokenGroup_get__endOffset(t_TokenGroup *self, void *data);
          static PyObject *t_TokenGroup_get__numTokens(t_TokenGroup *self, void *data);
          static PyObject *t_TokenGroup_get__startOffset(t_TokenGroup *self, void *data);
          static PyObject *t_TokenGroup_get__totalScore(t_TokenGroup *self, void *data);
          static PyGetSetDef t_TokenGroup__fields_[] = {
            DECLARE_GET_FIELD(t_TokenGroup, endOffset),
            DECLARE_GET_FIELD(t_TokenGroup, numTokens),
            DECLARE_GET_FIELD(t_TokenGroup, startOffset),
            DECLARE_GET_FIELD(t_TokenGroup, totalScore),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TokenGroup__methods_[] = {
            DECLARE_METHOD(t_TokenGroup, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenGroup, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenGroup, getEndOffset, METH_NOARGS),
            DECLARE_METHOD(t_TokenGroup, getNumTokens, METH_NOARGS),
            DECLARE_METHOD(t_TokenGroup, getScore, METH_O),
            DECLARE_METHOD(t_TokenGroup, getStartOffset, METH_NOARGS),
            DECLARE_METHOD(t_TokenGroup, getToken, METH_O),
            DECLARE_METHOD(t_TokenGroup, getTotalScore, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TokenGroup, t_TokenGroup, ::java::lang::Object, TokenGroup, t_TokenGroup_init_, 0, 0, t_TokenGroup__fields_, 0, 0);

          void t_TokenGroup::install(PyObject *module)
          {
            installType(&PY_TYPE(TokenGroup), module, "TokenGroup", 0);
          }

          void t_TokenGroup::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TokenGroup).tp_dict, "class_", make_descriptor(TokenGroup::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TokenGroup).tp_dict, "wrapfn_", make_descriptor(t_TokenGroup::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TokenGroup).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TokenGroup_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TokenGroup::initializeClass, 1)))
              return NULL;
            return t_TokenGroup::wrap_Object(TokenGroup(((t_TokenGroup *) arg)->object.this$));
          }
          static PyObject *t_TokenGroup_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TokenGroup::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TokenGroup_init_(t_TokenGroup *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            TokenGroup object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = TokenGroup(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TokenGroup_getEndOffset(t_TokenGroup *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEndOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_TokenGroup_getNumTokens(t_TokenGroup *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getNumTokens());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_TokenGroup_getScore(t_TokenGroup *self, PyObject *arg)
          {
            jint a0;
            jfloat result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.getScore(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "getScore", arg);
            return NULL;
          }

          static PyObject *t_TokenGroup_getStartOffset(t_TokenGroup *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getStartOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_TokenGroup_getToken(t_TokenGroup *self, PyObject *arg)
          {
            jint a0;
            ::org::apache::lucene::analysis::Token result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.getToken(a0));
              return ::org::apache::lucene::analysis::t_Token::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getToken", arg);
            return NULL;
          }

          static PyObject *t_TokenGroup_getTotalScore(t_TokenGroup *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getTotalScore());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_TokenGroup_get__endOffset(t_TokenGroup *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEndOffset());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_TokenGroup_get__numTokens(t_TokenGroup *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getNumTokens());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_TokenGroup_get__startOffset(t_TokenGroup *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getStartOffset());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_TokenGroup_get__totalScore(t_TokenGroup *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getTotalScore());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/Builder.h"
#include "org/apache/lucene/util/fst/Outputs.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "org/apache/lucene/util/fst/Builder$FreezeTail.h"
#include "org/apache/lucene/util/fst/FST$INPUT_TYPE.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *Builder::class$ = NULL;
          jmethodID *Builder::mids$ = NULL;
          bool Builder::live$ = false;

          jclass Builder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/Builder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_024447c3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/FST$INPUT_TYPE;Lorg/apache/lucene/util/fst/Outputs;)V");
              mids$[mid_init$_bbea4f98] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/FST$INPUT_TYPE;IIZZILorg/apache/lucene/util/fst/Outputs;Lorg/apache/lucene/util/fst/Builder$FreezeTail;ZFZI)V");
              mids$[mid_add_52197430] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/IntsRef;Ljava/lang/Object;)V");
              mids$[mid_finish_917b3659] = env->getMethodID(cls, "finish", "()Lorg/apache/lucene/util/fst/FST;");
              mids$[mid_fstRamBytesUsed_54c6a17a] = env->getMethodID(cls, "fstRamBytesUsed", "()J");
              mids$[mid_getMappedStateCount_54c6a17a] = env->getMethodID(cls, "getMappedStateCount", "()J");
              mids$[mid_getTermCount_54c6a17a] = env->getMethodID(cls, "getTermCount", "()J");
              mids$[mid_getTotStateCount_54c6a17a] = env->getMethodID(cls, "getTotStateCount", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Builder::Builder(const ::org::apache::lucene::util::fst::FST$INPUT_TYPE & a0, const ::org::apache::lucene::util::fst::Outputs & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_024447c3, a0.this$, a1.this$)) {}

          Builder::Builder(const ::org::apache::lucene::util::fst::FST$INPUT_TYPE & a0, jint a1, jint a2, jboolean a3, jboolean a4, jint a5, const ::org::apache::lucene::util::fst::Outputs & a6, const ::org::apache::lucene::util::fst::Builder$FreezeTail & a7, jboolean a8, jfloat a9, jboolean a10, jint a11) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_bbea4f98, a0.this$, a1, a2, a3, a4, a5, a6.this$, a7.this$, a8, a9, a10, a11)) {}

          void Builder::add(const ::org::apache::lucene::util::IntsRef & a0, const ::java::lang::Object & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_add_52197430], a0.this$, a1.this$);
          }

          ::org::apache::lucene::util::fst::FST Builder::finish() const
          {
            return ::org::apache::lucene::util::fst::FST(env->callObjectMethod(this$, mids$[mid_finish_917b3659]));
          }

          jlong Builder::fstRamBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_fstRamBytesUsed_54c6a17a]);
          }

          jlong Builder::getMappedStateCount() const
          {
            return env->callLongMethod(this$, mids$[mid_getMappedStateCount_54c6a17a]);
          }

          jlong Builder::getTermCount() const
          {
            return env->callLongMethod(this$, mids$[mid_getTermCount_54c6a17a]);
          }

          jlong Builder::getTotStateCount() const
          {
            return env->callLongMethod(this$, mids$[mid_getTotStateCount_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/fst/Builder$UnCompiledNode.h"
#include "org/apache/lucene/util/fst/Builder$Arc.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_Builder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Builder_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Builder_of_(t_Builder *self, PyObject *args);
          static int t_Builder_init_(t_Builder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Builder_add(t_Builder *self, PyObject *args);
          static PyObject *t_Builder_finish(t_Builder *self);
          static PyObject *t_Builder_fstRamBytesUsed(t_Builder *self);
          static PyObject *t_Builder_getMappedStateCount(t_Builder *self);
          static PyObject *t_Builder_getTermCount(t_Builder *self);
          static PyObject *t_Builder_getTotStateCount(t_Builder *self);
          static PyObject *t_Builder_get__mappedStateCount(t_Builder *self, void *data);
          static PyObject *t_Builder_get__termCount(t_Builder *self, void *data);
          static PyObject *t_Builder_get__totStateCount(t_Builder *self, void *data);
          static PyObject *t_Builder_get__parameters_(t_Builder *self, void *data);
          static PyGetSetDef t_Builder__fields_[] = {
            DECLARE_GET_FIELD(t_Builder, mappedStateCount),
            DECLARE_GET_FIELD(t_Builder, termCount),
            DECLARE_GET_FIELD(t_Builder, totStateCount),
            DECLARE_GET_FIELD(t_Builder, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Builder__methods_[] = {
            DECLARE_METHOD(t_Builder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Builder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Builder, of_, METH_VARARGS),
            DECLARE_METHOD(t_Builder, add, METH_VARARGS),
            DECLARE_METHOD(t_Builder, finish, METH_NOARGS),
            DECLARE_METHOD(t_Builder, fstRamBytesUsed, METH_NOARGS),
            DECLARE_METHOD(t_Builder, getMappedStateCount, METH_NOARGS),
            DECLARE_METHOD(t_Builder, getTermCount, METH_NOARGS),
            DECLARE_METHOD(t_Builder, getTotStateCount, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Builder, t_Builder, ::java::lang::Object, Builder, t_Builder_init_, 0, 0, t_Builder__fields_, 0, 0);
          PyObject *t_Builder::wrap_Object(const Builder& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Builder::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Builder *self = (t_Builder *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_Builder::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Builder::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Builder *self = (t_Builder *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_Builder::install(PyObject *module)
          {
            installType(&PY_TYPE(Builder), module, "Builder", 0);
            PyDict_SetItemString(PY_TYPE(Builder).tp_dict, "UnCompiledNode", make_descriptor(&PY_TYPE(Builder$UnCompiledNode)));
            PyDict_SetItemString(PY_TYPE(Builder).tp_dict, "Arc", make_descriptor(&PY_TYPE(Builder$Arc)));
            PyDict_SetItemString(PY_TYPE(Builder).tp_dict, "FreezeTail", make_descriptor(&PY_TYPE(Builder$FreezeTail)));
          }

          void t_Builder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Builder).tp_dict, "class_", make_descriptor(Builder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Builder).tp_dict, "wrapfn_", make_descriptor(t_Builder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Builder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Builder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Builder::initializeClass, 1)))
              return NULL;
            return t_Builder::wrap_Object(Builder(((t_Builder *) arg)->object.this$));
          }
          static PyObject *t_Builder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Builder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Builder_of_(t_Builder *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_Builder_init_(t_Builder *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::fst::FST$INPUT_TYPE a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::fst::Outputs a1((jobject) NULL);
                PyTypeObject **p1;
                Builder object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::fst::FST$INPUT_TYPE::initializeClass, ::org::apache::lucene::util::fst::Outputs::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST$INPUT_TYPE::parameters_, &a1, &p1, ::org::apache::lucene::util::fst::t_Outputs::parameters_))
                {
                  INT_CALL(object = Builder(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 12:
              {
                ::org::apache::lucene::util::fst::FST$INPUT_TYPE a0((jobject) NULL);
                PyTypeObject **p0;
                jint a1;
                jint a2;
                jboolean a3;
                jboolean a4;
                jint a5;
                ::org::apache::lucene::util::fst::Outputs a6((jobject) NULL);
                PyTypeObject **p6;
                ::org::apache::lucene::util::fst::Builder$FreezeTail a7((jobject) NULL);
                PyTypeObject **p7;
                jboolean a8;
                jfloat a9;
                jboolean a10;
                jint a11;
                Builder object((jobject) NULL);

                if (!parseArgs(args, "KIIZZIKKZFZI", ::org::apache::lucene::util::fst::FST$INPUT_TYPE::initializeClass, ::org::apache::lucene::util::fst::Outputs::initializeClass, ::org::apache::lucene::util::fst::Builder$FreezeTail::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST$INPUT_TYPE::parameters_, &a1, &a2, &a3, &a4, &a5, &a6, &p6, ::org::apache::lucene::util::fst::t_Outputs::parameters_, &a7, &p7, ::org::apache::lucene::util::fst::t_Builder$FreezeTail::parameters_, &a8, &a9, &a10, &a11))
                {
                  INT_CALL(object = Builder(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Builder_add(t_Builder *self, PyObject *args)
          {
            ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);

            if (!parseArgs(args, "kO", ::org::apache::lucene::util::IntsRef::initializeClass, self->parameters[0], &a0, &a1))
            {
              OBJ_CALL(self->object.add(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "add", args);
            return NULL;
          }

          static PyObject *t_Builder_finish(t_Builder *self)
          {
            ::org::apache::lucene::util::fst::FST result((jobject) NULL);
            OBJ_CALL(result = self->object.finish());
            return ::org::apache::lucene::util::fst::t_FST::wrap_Object(result, self->parameters[0]);
          }

          static PyObject *t_Builder_fstRamBytesUsed(t_Builder *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.fstRamBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_Builder_getMappedStateCount(t_Builder *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getMappedStateCount());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_Builder_getTermCount(t_Builder *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getTermCount());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_Builder_getTotStateCount(t_Builder *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getTotStateCount());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
          static PyObject *t_Builder_get__parameters_(t_Builder *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_Builder_get__mappedStateCount(t_Builder *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getMappedStateCount());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }

          static PyObject *t_Builder_get__termCount(t_Builder *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getTermCount());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }

          static PyObject *t_Builder_get__totStateCount(t_Builder *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getTotStateCount());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *DocValuesProducer::class$ = NULL;
        jmethodID *DocValuesProducer::mids$ = NULL;
        bool DocValuesProducer::live$ = false;

        jclass DocValuesProducer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/DocValuesProducer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
            mids$[mid_getBinary_97c169be] = env->getMethodID(cls, "getBinary", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/index/BinaryDocValues;");
            mids$[mid_getDocsWithField_e4c7eda7] = env->getMethodID(cls, "getDocsWithField", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/util/Bits;");
            mids$[mid_getNumeric_9eab6241] = env->getMethodID(cls, "getNumeric", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getSorted_984b8536] = env->getMethodID(cls, "getSorted", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/index/SortedDocValues;");
            mids$[mid_getSortedNumeric_ccea608a] = env->getMethodID(cls, "getSortedNumeric", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/index/SortedNumericDocValues;");
            mids$[mid_getSortedSet_05eaac8f] = env->getMethodID(cls, "getSortedSet", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/index/SortedSetDocValues;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void DocValuesProducer::checkIntegrity() const
        {
          env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
        }

        ::org::apache::lucene::index::BinaryDocValues DocValuesProducer::getBinary(const ::org::apache::lucene::index::FieldInfo & a0) const
        {
          return ::org::apache::lucene::index::BinaryDocValues(env->callObjectMethod(this$, mids$[mid_getBinary_97c169be], a0.this$));
        }

        ::org::apache::lucene::util::Bits DocValuesProducer::getDocsWithField(const ::org::apache::lucene::index::FieldInfo & a0) const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getDocsWithField_e4c7eda7], a0.this$));
        }

        ::org::apache::lucene::index::NumericDocValues DocValuesProducer::getNumeric(const ::org::apache::lucene::index::FieldInfo & a0) const
        {
          return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNumeric_9eab6241], a0.this$));
        }

        ::org::apache::lucene::index::SortedDocValues DocValuesProducer::getSorted(const ::org::apache::lucene::index::FieldInfo & a0) const
        {
          return ::org::apache::lucene::index::SortedDocValues(env->callObjectMethod(this$, mids$[mid_getSorted_984b8536], a0.this$));
        }

        ::org::apache::lucene::index::SortedNumericDocValues DocValuesProducer::getSortedNumeric(const ::org::apache::lucene::index::FieldInfo & a0) const
        {
          return ::org::apache::lucene::index::SortedNumericDocValues(env->callObjectMethod(this$, mids$[mid_getSortedNumeric_ccea608a], a0.this$));
        }

        ::org::apache::lucene::index::SortedSetDocValues DocValuesProducer::getSortedSet(const ::org::apache::lucene::index::FieldInfo & a0) const
        {
          return ::org::apache::lucene::index::SortedSetDocValues(env->callObjectMethod(this$, mids$[mid_getSortedSet_05eaac8f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_DocValuesProducer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesProducer_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesProducer_checkIntegrity(t_DocValuesProducer *self);
        static PyObject *t_DocValuesProducer_getBinary(t_DocValuesProducer *self, PyObject *arg);
        static PyObject *t_DocValuesProducer_getDocsWithField(t_DocValuesProducer *self, PyObject *arg);
        static PyObject *t_DocValuesProducer_getNumeric(t_DocValuesProducer *self, PyObject *arg);
        static PyObject *t_DocValuesProducer_getSorted(t_DocValuesProducer *self, PyObject *arg);
        static PyObject *t_DocValuesProducer_getSortedNumeric(t_DocValuesProducer *self, PyObject *arg);
        static PyObject *t_DocValuesProducer_getSortedSet(t_DocValuesProducer *self, PyObject *arg);

        static PyMethodDef t_DocValuesProducer__methods_[] = {
          DECLARE_METHOD(t_DocValuesProducer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesProducer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesProducer, checkIntegrity, METH_NOARGS),
          DECLARE_METHOD(t_DocValuesProducer, getBinary, METH_O),
          DECLARE_METHOD(t_DocValuesProducer, getDocsWithField, METH_O),
          DECLARE_METHOD(t_DocValuesProducer, getNumeric, METH_O),
          DECLARE_METHOD(t_DocValuesProducer, getSorted, METH_O),
          DECLARE_METHOD(t_DocValuesProducer, getSortedNumeric, METH_O),
          DECLARE_METHOD(t_DocValuesProducer, getSortedSet, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DocValuesProducer, t_DocValuesProducer, ::java::lang::Object, DocValuesProducer, abstract_init, 0, 0, 0, 0, 0);

        void t_DocValuesProducer::install(PyObject *module)
        {
          installType(&PY_TYPE(DocValuesProducer), module, "DocValuesProducer", 0);
        }

        void t_DocValuesProducer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DocValuesProducer).tp_dict, "class_", make_descriptor(DocValuesProducer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DocValuesProducer).tp_dict, "wrapfn_", make_descriptor(t_DocValuesProducer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DocValuesProducer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DocValuesProducer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocValuesProducer::initializeClass, 1)))
            return NULL;
          return t_DocValuesProducer::wrap_Object(DocValuesProducer(((t_DocValuesProducer *) arg)->object.this$));
        }
        static PyObject *t_DocValuesProducer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocValuesProducer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DocValuesProducer_checkIntegrity(t_DocValuesProducer *self)
        {
          OBJ_CALL(self->object.checkIntegrity());
          Py_RETURN_NONE;
        }

        static PyObject *t_DocValuesProducer_getBinary(t_DocValuesProducer *self, PyObject *arg)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::BinaryDocValues result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getBinary(a0));
            return ::org::apache::lucene::index::t_BinaryDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getBinary", arg);
          return NULL;
        }

        static PyObject *t_DocValuesProducer_getDocsWithField(t_DocValuesProducer *self, PyObject *arg)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getDocsWithField(a0));
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getDocsWithField", arg);
          return NULL;
        }

        static PyObject *t_DocValuesProducer_getNumeric(t_DocValuesProducer *self, PyObject *arg)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getNumeric(a0));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getNumeric", arg);
          return NULL;
        }

        static PyObject *t_DocValuesProducer_getSorted(t_DocValuesProducer *self, PyObject *arg)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getSorted(a0));
            return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSorted", arg);
          return NULL;
        }

        static PyObject *t_DocValuesProducer_getSortedNumeric(t_DocValuesProducer *self, PyObject *arg)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::SortedNumericDocValues result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getSortedNumeric(a0));
            return ::org::apache::lucene::index::t_SortedNumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSortedNumeric", arg);
          return NULL;
        }

        static PyObject *t_DocValuesProducer_getSortedSet(t_DocValuesProducer *self, PyObject *arg)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getSortedSet(a0));
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSortedSet", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/sv/SwedishLightStemFilterFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sv {

          ::java::lang::Class *SwedishLightStemFilterFactory::class$ = NULL;
          jmethodID *SwedishLightStemFilterFactory::mids$ = NULL;
          bool SwedishLightStemFilterFactory::live$ = false;

          jclass SwedishLightStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/sv/SwedishLightStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SwedishLightStemFilterFactory::SwedishLightStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream SwedishLightStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sv {
          static PyObject *t_SwedishLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SwedishLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SwedishLightStemFilterFactory_init_(t_SwedishLightStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SwedishLightStemFilterFactory_create(t_SwedishLightStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_SwedishLightStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_SwedishLightStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SwedishLightStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SwedishLightStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SwedishLightStemFilterFactory, t_SwedishLightStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, SwedishLightStemFilterFactory, t_SwedishLightStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_SwedishLightStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(SwedishLightStemFilterFactory), module, "SwedishLightStemFilterFactory", 0);
          }

          void t_SwedishLightStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SwedishLightStemFilterFactory).tp_dict, "class_", make_descriptor(SwedishLightStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SwedishLightStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_SwedishLightStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SwedishLightStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SwedishLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SwedishLightStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_SwedishLightStemFilterFactory::wrap_Object(SwedishLightStemFilterFactory(((t_SwedishLightStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_SwedishLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SwedishLightStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SwedishLightStemFilterFactory_init_(t_SwedishLightStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            SwedishLightStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = SwedishLightStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SwedishLightStemFilterFactory_create(t_SwedishLightStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SwedishLightStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/DisjunctionMaxQueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *DisjunctionMaxQueryBuilder::class$ = NULL;
            jmethodID *DisjunctionMaxQueryBuilder::mids$ = NULL;
            bool DisjunctionMaxQueryBuilder::live$ = false;

            jclass DisjunctionMaxQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/DisjunctionMaxQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_6566a539] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/xml/QueryBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DisjunctionMaxQueryBuilder::DisjunctionMaxQueryBuilder(const ::org::apache::lucene::queryparser::xml::QueryBuilder & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6566a539, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_DisjunctionMaxQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DisjunctionMaxQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DisjunctionMaxQueryBuilder_init_(t_DisjunctionMaxQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_DisjunctionMaxQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_DisjunctionMaxQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DisjunctionMaxQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DisjunctionMaxQueryBuilder, t_DisjunctionMaxQueryBuilder, ::java::lang::Object, DisjunctionMaxQueryBuilder, t_DisjunctionMaxQueryBuilder_init_, 0, 0, 0, 0, 0);

            void t_DisjunctionMaxQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(DisjunctionMaxQueryBuilder), module, "DisjunctionMaxQueryBuilder", 0);
            }

            void t_DisjunctionMaxQueryBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DisjunctionMaxQueryBuilder).tp_dict, "class_", make_descriptor(DisjunctionMaxQueryBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DisjunctionMaxQueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_DisjunctionMaxQueryBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DisjunctionMaxQueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DisjunctionMaxQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DisjunctionMaxQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_DisjunctionMaxQueryBuilder::wrap_Object(DisjunctionMaxQueryBuilder(((t_DisjunctionMaxQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_DisjunctionMaxQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DisjunctionMaxQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DisjunctionMaxQueryBuilder_init_(t_DisjunctionMaxQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queryparser::xml::QueryBuilder a0((jobject) NULL);
              DisjunctionMaxQueryBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::xml::QueryBuilder::initializeClass, &a0))
              {
                INT_CALL(object = DisjunctionMaxQueryBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/range/LongRangeFacetCounts.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/facet/range/LongRange.h"
#include "org/apache/lucene/search/Filter.h"
#include "org/apache/lucene/facet/FacetsCollector.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {

          ::java::lang::Class *LongRangeFacetCounts::class$ = NULL;
          jmethodID *LongRangeFacetCounts::mids$ = NULL;
          bool LongRangeFacetCounts::live$ = false;

          jclass LongRangeFacetCounts::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/range/LongRangeFacetCounts");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d97a5aae] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/facet/FacetsCollector;[Lorg/apache/lucene/facet/range/LongRange;)V");
              mids$[mid_init$_f040242a] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/queries/function/ValueSource;Lorg/apache/lucene/facet/FacetsCollector;[Lorg/apache/lucene/facet/range/LongRange;)V");
              mids$[mid_init$_9056893a] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/queries/function/ValueSource;Lorg/apache/lucene/facet/FacetsCollector;Lorg/apache/lucene/search/Filter;[Lorg/apache/lucene/facet/range/LongRange;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LongRangeFacetCounts::LongRangeFacetCounts(const ::java::lang::String & a0, const ::org::apache::lucene::facet::FacetsCollector & a1, const JArray< ::org::apache::lucene::facet::range::LongRange > & a2) : ::org::apache::lucene::facet::range::RangeFacetCounts(env->newObject(initializeClass, &mids$, mid_init$_d97a5aae, a0.this$, a1.this$, a2.this$)) {}

          LongRangeFacetCounts::LongRangeFacetCounts(const ::java::lang::String & a0, const ::org::apache::lucene::queries::function::ValueSource & a1, const ::org::apache::lucene::facet::FacetsCollector & a2, const JArray< ::org::apache::lucene::facet::range::LongRange > & a3) : ::org::apache::lucene::facet::range::RangeFacetCounts(env->newObject(initializeClass, &mids$, mid_init$_f040242a, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          LongRangeFacetCounts::LongRangeFacetCounts(const ::java::lang::String & a0, const ::org::apache::lucene::queries::function::ValueSource & a1, const ::org::apache::lucene::facet::FacetsCollector & a2, const ::org::apache::lucene::search::Filter & a3, const JArray< ::org::apache::lucene::facet::range::LongRange > & a4) : ::org::apache::lucene::facet::range::RangeFacetCounts(env->newObject(initializeClass, &mids$, mid_init$_9056893a, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {
          static PyObject *t_LongRangeFacetCounts_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LongRangeFacetCounts_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LongRangeFacetCounts_init_(t_LongRangeFacetCounts *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_LongRangeFacetCounts__methods_[] = {
            DECLARE_METHOD(t_LongRangeFacetCounts, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LongRangeFacetCounts, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LongRangeFacetCounts, t_LongRangeFacetCounts, ::org::apache::lucene::facet::range::RangeFacetCounts, LongRangeFacetCounts, t_LongRangeFacetCounts_init_, 0, 0, 0, 0, 0);

          void t_LongRangeFacetCounts::install(PyObject *module)
          {
            installType(&PY_TYPE(LongRangeFacetCounts), module, "LongRangeFacetCounts", 0);
          }

          void t_LongRangeFacetCounts::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LongRangeFacetCounts).tp_dict, "class_", make_descriptor(LongRangeFacetCounts::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LongRangeFacetCounts).tp_dict, "wrapfn_", make_descriptor(t_LongRangeFacetCounts::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LongRangeFacetCounts).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LongRangeFacetCounts_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LongRangeFacetCounts::initializeClass, 1)))
              return NULL;
            return t_LongRangeFacetCounts::wrap_Object(LongRangeFacetCounts(((t_LongRangeFacetCounts *) arg)->object.this$));
          }
          static PyObject *t_LongRangeFacetCounts_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LongRangeFacetCounts::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LongRangeFacetCounts_init_(t_LongRangeFacetCounts *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a1((jobject) NULL);
                JArray< ::org::apache::lucene::facet::range::LongRange > a2((jobject) NULL);
                LongRangeFacetCounts object((jobject) NULL);

                if (!parseArgs(args, "sk[k", ::org::apache::lucene::facet::FacetsCollector::initializeClass, ::org::apache::lucene::facet::range::LongRange::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = LongRangeFacetCounts(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a2((jobject) NULL);
                JArray< ::org::apache::lucene::facet::range::LongRange > a3((jobject) NULL);
                LongRangeFacetCounts object((jobject) NULL);

                if (!parseArgs(args, "skk[k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, ::org::apache::lucene::facet::range::LongRange::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = LongRangeFacetCounts(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a2((jobject) NULL);
                ::org::apache::lucene::search::Filter a3((jobject) NULL);
                JArray< ::org::apache::lucene::facet::range::LongRange > a4((jobject) NULL);
                LongRangeFacetCounts object((jobject) NULL);

                if (!parseArgs(args, "skkk[k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::facet::range::LongRange::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = LongRangeFacetCounts(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/CompoundFileDirectory$FileEntry.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *CompoundFileDirectory$FileEntry::class$ = NULL;
        jmethodID *CompoundFileDirectory$FileEntry::mids$ = NULL;
        bool CompoundFileDirectory$FileEntry::live$ = false;

        jclass CompoundFileDirectory$FileEntry::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/CompoundFileDirectory$FileEntry");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CompoundFileDirectory$FileEntry::CompoundFileDirectory$FileEntry() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_CompoundFileDirectory$FileEntry_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CompoundFileDirectory$FileEntry_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CompoundFileDirectory$FileEntry_init_(t_CompoundFileDirectory$FileEntry *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_CompoundFileDirectory$FileEntry__methods_[] = {
          DECLARE_METHOD(t_CompoundFileDirectory$FileEntry, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CompoundFileDirectory$FileEntry, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CompoundFileDirectory$FileEntry, t_CompoundFileDirectory$FileEntry, ::java::lang::Object, CompoundFileDirectory$FileEntry, t_CompoundFileDirectory$FileEntry_init_, 0, 0, 0, 0, 0);

        void t_CompoundFileDirectory$FileEntry::install(PyObject *module)
        {
          installType(&PY_TYPE(CompoundFileDirectory$FileEntry), module, "CompoundFileDirectory$FileEntry", 0);
        }

        void t_CompoundFileDirectory$FileEntry::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CompoundFileDirectory$FileEntry).tp_dict, "class_", make_descriptor(CompoundFileDirectory$FileEntry::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CompoundFileDirectory$FileEntry).tp_dict, "wrapfn_", make_descriptor(t_CompoundFileDirectory$FileEntry::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CompoundFileDirectory$FileEntry).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CompoundFileDirectory$FileEntry_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CompoundFileDirectory$FileEntry::initializeClass, 1)))
            return NULL;
          return t_CompoundFileDirectory$FileEntry::wrap_Object(CompoundFileDirectory$FileEntry(((t_CompoundFileDirectory$FileEntry *) arg)->object.this$));
        }
        static PyObject *t_CompoundFileDirectory$FileEntry_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CompoundFileDirectory$FileEntry::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CompoundFileDirectory$FileEntry_init_(t_CompoundFileDirectory$FileEntry *self, PyObject *args, PyObject *kwds)
        {
          CompoundFileDirectory$FileEntry object((jobject) NULL);

          INT_CALL(object = CompoundFileDirectory$FileEntry());
          self->object = object;

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ar/ArabicStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {

          ::java::lang::Class *ArabicStemFilter::class$ = NULL;
          jmethodID *ArabicStemFilter::mids$ = NULL;
          bool ArabicStemFilter::live$ = false;

          jclass ArabicStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ar/ArabicStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ArabicStemFilter::ArabicStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean ArabicStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {
          static PyObject *t_ArabicStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ArabicStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ArabicStemFilter_init_(t_ArabicStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ArabicStemFilter_incrementToken(t_ArabicStemFilter *self, PyObject *args);

          static PyMethodDef t_ArabicStemFilter__methods_[] = {
            DECLARE_METHOD(t_ArabicStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ArabicStemFilter, t_ArabicStemFilter, ::org::apache::lucene::analysis::TokenFilter, ArabicStemFilter, t_ArabicStemFilter_init_, 0, 0, 0, 0, 0);

          void t_ArabicStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ArabicStemFilter), module, "ArabicStemFilter", 0);
          }

          void t_ArabicStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ArabicStemFilter).tp_dict, "class_", make_descriptor(ArabicStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ArabicStemFilter).tp_dict, "wrapfn_", make_descriptor(t_ArabicStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ArabicStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ArabicStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ArabicStemFilter::initializeClass, 1)))
              return NULL;
            return t_ArabicStemFilter::wrap_Object(ArabicStemFilter(((t_ArabicStemFilter *) arg)->object.this$));
          }
          static PyObject *t_ArabicStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ArabicStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ArabicStemFilter_init_(t_ArabicStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ArabicStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = ArabicStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ArabicStemFilter_incrementToken(t_ArabicStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ArabicStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/Iterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *Iterator::class$ = NULL;
    jmethodID *Iterator::mids$ = NULL;
    bool Iterator::live$ = false;

    jclass Iterator::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/Iterator");

        mids$ = new jmethodID[max_mid];
        mids$[mid_hasNext_54c6a16a] = env->getMethodID(cls, "hasNext", "()Z");
        mids$[mid_next_846352c3] = env->getMethodID(cls, "next", "()Ljava/lang/Object;");
        mids$[mid_remove_54c6a166] = env->getMethodID(cls, "remove", "()V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    jboolean Iterator::hasNext() const
    {
      return env->callBooleanMethod(this$, mids$[mid_hasNext_54c6a16a]);
    }

    ::java::lang::Object Iterator::next() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_next_846352c3]));
    }

    void Iterator::remove() const
    {
      env->callVoidMethod(this$, mids$[mid_remove_54c6a166]);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_Iterator_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Iterator_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Iterator_of_(t_Iterator *self, PyObject *args);
    static PyObject *t_Iterator_hasNext(t_Iterator *self);
    static PyObject *t_Iterator_next(t_Iterator *self);
    static PyObject *t_Iterator_remove(t_Iterator *self);
    static PyObject *t_Iterator_get__parameters_(t_Iterator *self, void *data);
    static PyGetSetDef t_Iterator__fields_[] = {
      DECLARE_GET_FIELD(t_Iterator, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Iterator__methods_[] = {
      DECLARE_METHOD(t_Iterator, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Iterator, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Iterator, of_, METH_VARARGS),
      DECLARE_METHOD(t_Iterator, hasNext, METH_NOARGS),
      DECLARE_METHOD(t_Iterator, next, METH_NOARGS),
      DECLARE_METHOD(t_Iterator, remove, METH_NOARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Iterator, t_Iterator, ::java::lang::Object, Iterator, abstract_init, PyObject_SelfIter, ((PyObject *(*)(::java::util::t_Iterator *)) get_generic_iterator_next< ::java::util::t_Iterator,::java::lang::t_Object >), t_Iterator__fields_, 0, 0);
    PyObject *t_Iterator::wrap_Object(const Iterator& object, PyTypeObject *p0)
    {
      PyObject *obj = t_Iterator::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_Iterator *self = (t_Iterator *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    PyObject *t_Iterator::wrap_jobject(const jobject& object, PyTypeObject *p0)
    {
      PyObject *obj = t_Iterator::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_Iterator *self = (t_Iterator *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    void t_Iterator::install(PyObject *module)
    {
      installType(&PY_TYPE(Iterator), module, "Iterator", 0);
    }

    void t_Iterator::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Iterator).tp_dict, "class_", make_descriptor(Iterator::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Iterator).tp_dict, "wrapfn_", make_descriptor(t_Iterator::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Iterator).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Iterator_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Iterator::initializeClass, 1)))
        return NULL;
      return t_Iterator::wrap_Object(Iterator(((t_Iterator *) arg)->object.this$));
    }
    static PyObject *t_Iterator_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Iterator::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Iterator_of_(t_Iterator *self, PyObject *args)
    {
      if (!parseArg(args, "T", 1, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static PyObject *t_Iterator_hasNext(t_Iterator *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.hasNext());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Iterator_next(t_Iterator *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.next());
      return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_Iterator_remove(t_Iterator *self)
    {
      OBJ_CALL(self->object.remove());
      Py_RETURN_NONE;
    }
    static PyObject *t_Iterator_get__parameters_(t_Iterator *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/PythonFilter.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/lang/Throwable.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {

        ::java::lang::Class *PythonFilter::class$ = NULL;
        jmethodID *PythonFilter::mids$ = NULL;
        bool PythonFilter::live$ = false;

        jclass PythonFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/search/PythonFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_getDocIdSet_ccce0897] = env->getMethodID(cls, "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonFilter::PythonFilter() : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonFilter::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonFilter::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonFilter::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        static PyObject *t_PythonFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonFilter_init_(t_PythonFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonFilter_finalize(t_PythonFilter *self);
        static PyObject *t_PythonFilter_pythonExtension(t_PythonFilter *self, PyObject *args);
        static jobject JNICALL t_PythonFilter_getDocIdSet0(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1);
        static void JNICALL t_PythonFilter_pythonDecRef1(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonFilter_get__self(t_PythonFilter *self, void *data);
        static PyGetSetDef t_PythonFilter__fields_[] = {
          DECLARE_GET_FIELD(t_PythonFilter, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonFilter__methods_[] = {
          DECLARE_METHOD(t_PythonFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonFilter, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonFilter, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonFilter, t_PythonFilter, ::org::apache::lucene::search::Filter, PythonFilter, t_PythonFilter_init_, 0, 0, t_PythonFilter__fields_, 0, 0);

        void t_PythonFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonFilter), module, "PythonFilter", 1);
        }

        void t_PythonFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonFilter).tp_dict, "class_", make_descriptor(PythonFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonFilter).tp_dict, "wrapfn_", make_descriptor(t_PythonFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonFilter::initializeClass);
          JNINativeMethod methods[] = {
            { "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;", (void *) t_PythonFilter_getDocIdSet0 },
            { "pythonDecRef", "()V", (void *) t_PythonFilter_pythonDecRef1 },
          };
          env->registerNatives(cls, methods, 2);
        }

        static PyObject *t_PythonFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonFilter::initializeClass, 1)))
            return NULL;
          return t_PythonFilter::wrap_Object(PythonFilter(((t_PythonFilter *) arg)->object.this$));
        }
        static PyObject *t_PythonFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonFilter_init_(t_PythonFilter *self, PyObject *args, PyObject *kwds)
        {
          PythonFilter object((jobject) NULL);

          INT_CALL(object = PythonFilter());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonFilter_finalize(t_PythonFilter *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonFilter_pythonExtension(t_PythonFilter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jobject JNICALL t_PythonFilter_getDocIdSet0(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFilter::mids$[PythonFilter::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::search::DocIdSet value((jobject) NULL);
          PyObject *o0 = ::org::apache::lucene::index::t_AtomicReaderContext::wrap_Object(::org::apache::lucene::index::AtomicReaderContext(a0));
          PyObject *o1 = ::org::apache::lucene::util::t_Bits::wrap_Object(::org::apache::lucene::util::Bits(a1));
          PyObject *result = PyObject_CallMethod(obj, "getDocIdSet", "OO", o0, o1);
          Py_DECREF(o0);
          Py_DECREF(o1);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::search::DocIdSet::initializeClass, &value))
          {
            throwTypeError("getDocIdSet", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static void JNICALL t_PythonFilter_pythonDecRef1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFilter::mids$[PythonFilter::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonFilter::mids$[PythonFilter::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static PyObject *t_PythonFilter_get__self(t_PythonFilter *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldDoc.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldDoc::class$ = NULL;
        jmethodID *FieldDoc::mids$ = NULL;
        jfieldID *FieldDoc::fids$ = NULL;
        bool FieldDoc::live$ = false;

        jclass FieldDoc::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldDoc");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_abdf2c51] = env->getMethodID(cls, "<init>", "(IF)V");
            mids$[mid_init$_8f5d1bf7] = env->getMethodID(cls, "<init>", "(IF[Ljava/lang/Object;)V");
            mids$[mid_init$_87a6361f] = env->getMethodID(cls, "<init>", "(IF[Ljava/lang/Object;I)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_fields] = env->getFieldID(cls, "fields", "[Ljava/lang/Object;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldDoc::FieldDoc(jint a0, jfloat a1) : ::org::apache::lucene::search::ScoreDoc(env->newObject(initializeClass, &mids$, mid_init$_abdf2c51, a0, a1)) {}

        FieldDoc::FieldDoc(jint a0, jfloat a1, const JArray< ::java::lang::Object > & a2) : ::org::apache::lucene::search::ScoreDoc(env->newObject(initializeClass, &mids$, mid_init$_8f5d1bf7, a0, a1, a2.this$)) {}

        FieldDoc::FieldDoc(jint a0, jfloat a1, const JArray< ::java::lang::Object > & a2, jint a3) : ::org::apache::lucene::search::ScoreDoc(env->newObject(initializeClass, &mids$, mid_init$_87a6361f, a0, a1, a2.this$, a3)) {}

        ::java::lang::String FieldDoc::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        JArray< ::java::lang::Object > FieldDoc::_get_fields() const
        {
          return JArray< ::java::lang::Object >(env->getObjectField(this$, fids$[fid_fields]));
        }

        void FieldDoc::_set_fields(const JArray< ::java::lang::Object > & a0) const
        {
          env->setObjectField(this$, fids$[fid_fields], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldDoc_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldDoc_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldDoc_init_(t_FieldDoc *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldDoc_toString(t_FieldDoc *self, PyObject *args);
        static PyObject *t_FieldDoc_get__fields(t_FieldDoc *self, void *data);
        static int t_FieldDoc_set__fields(t_FieldDoc *self, PyObject *arg, void *data);

        static PyGetSetDef t_FieldDoc__fields_[] = {
          DECLARE_GETSET_FIELD(t_FieldDoc, fields),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldDoc__methods_[] = {
          DECLARE_METHOD(t_FieldDoc, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldDoc, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldDoc, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldDoc, t_FieldDoc, ::org::apache::lucene::search::ScoreDoc, FieldDoc, t_FieldDoc_init_, 0, 0, t_FieldDoc__fields_, 0, 0);

        void t_FieldDoc::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldDoc), module, "FieldDoc", 0);
        }

        void t_FieldDoc::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldDoc).tp_dict, "class_", make_descriptor(FieldDoc::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldDoc).tp_dict, "wrapfn_", make_descriptor(t_FieldDoc::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldDoc).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldDoc_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldDoc::initializeClass, 1)))
            return NULL;
          return t_FieldDoc::wrap_Object(FieldDoc(((t_FieldDoc *) arg)->object.this$));
        }
        static PyObject *t_FieldDoc_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldDoc::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldDoc_init_(t_FieldDoc *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              jint a0;
              jfloat a1;
              FieldDoc object((jobject) NULL);

              if (!parseArgs(args, "IF", &a0, &a1))
              {
                INT_CALL(object = FieldDoc(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              jint a0;
              jfloat a1;
              JArray< ::java::lang::Object > a2((jobject) NULL);
              FieldDoc object((jobject) NULL);

              if (!parseArgs(args, "IF[o", &a0, &a1, &a2))
              {
                INT_CALL(object = FieldDoc(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            goto err;
           case 4:
            {
              jint a0;
              jfloat a1;
              JArray< ::java::lang::Object > a2((jobject) NULL);
              jint a3;
              FieldDoc object((jobject) NULL);

              if (!parseArgs(args, "IF[oI", &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = FieldDoc(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldDoc_toString(t_FieldDoc *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FieldDoc), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FieldDoc_get__fields(t_FieldDoc *self, void *data)
        {
          JArray< ::java::lang::Object > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_fields());
          return JArray<jobject>(value.this$).wrap(::java::lang::t_Object::wrap_jobject);
        }
        static int t_FieldDoc_set__fields(t_FieldDoc *self, PyObject *arg, void *data)
        {
          JArray< ::java::lang::Object > value((jobject) NULL);
          if (!parseArg(arg, "[o", &value))
          {
            INT_CALL(self->object._set_fields(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "fields", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/GroupDocs.h"
#include "org/apache/lucene/search/ScoreDoc.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *GroupDocs::class$ = NULL;
          jmethodID *GroupDocs::mids$ = NULL;
          jfieldID *GroupDocs::fids$ = NULL;
          bool GroupDocs::live$ = false;

          jclass GroupDocs::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/GroupDocs");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e4916722] = env->getMethodID(cls, "<init>", "(FFI[Lorg/apache/lucene/search/ScoreDoc;Ljava/lang/Object;[Ljava/lang/Object;)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_groupSortValues] = env->getFieldID(cls, "groupSortValues", "[Ljava/lang/Object;");
              fids$[fid_groupValue] = env->getFieldID(cls, "groupValue", "Ljava/lang/Object;");
              fids$[fid_maxScore] = env->getFieldID(cls, "maxScore", "F");
              fids$[fid_score] = env->getFieldID(cls, "score", "F");
              fids$[fid_scoreDocs] = env->getFieldID(cls, "scoreDocs", "[Lorg/apache/lucene/search/ScoreDoc;");
              fids$[fid_totalHits] = env->getFieldID(cls, "totalHits", "I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GroupDocs::GroupDocs(jfloat a0, jfloat a1, jint a2, const JArray< ::org::apache::lucene::search::ScoreDoc > & a3, const ::java::lang::Object & a4, const JArray< ::java::lang::Object > & a5) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e4916722, a0, a1, a2, a3.this$, a4.this$, a5.this$)) {}

          JArray< ::java::lang::Object > GroupDocs::_get_groupSortValues() const
          {
            return JArray< ::java::lang::Object >(env->getObjectField(this$, fids$[fid_groupSortValues]));
          }

          ::java::lang::Object GroupDocs::_get_groupValue() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_groupValue]));
          }

          jfloat GroupDocs::_get_maxScore() const
          {
            return env->getFloatField(this$, fids$[fid_maxScore]);
          }

          jfloat GroupDocs::_get_score() const
          {
            return env->getFloatField(this$, fids$[fid_score]);
          }

          JArray< ::org::apache::lucene::search::ScoreDoc > GroupDocs::_get_scoreDocs() const
          {
            return JArray< ::org::apache::lucene::search::ScoreDoc >(env->getObjectField(this$, fids$[fid_scoreDocs]));
          }

          jint GroupDocs::_get_totalHits() const
          {
            return env->getIntField(this$, fids$[fid_totalHits]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_GroupDocs_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GroupDocs_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GroupDocs_of_(t_GroupDocs *self, PyObject *args);
          static int t_GroupDocs_init_(t_GroupDocs *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GroupDocs_get__groupSortValues(t_GroupDocs *self, void *data);
          static PyObject *t_GroupDocs_get__groupValue(t_GroupDocs *self, void *data);
          static PyObject *t_GroupDocs_get__maxScore(t_GroupDocs *self, void *data);
          static PyObject *t_GroupDocs_get__score(t_GroupDocs *self, void *data);
          static PyObject *t_GroupDocs_get__scoreDocs(t_GroupDocs *self, void *data);
          static PyObject *t_GroupDocs_get__totalHits(t_GroupDocs *self, void *data);

          static PyObject *t_GroupDocs_get__parameters_(t_GroupDocs *self, void *data);
          static PyGetSetDef t_GroupDocs__fields_[] = {
            DECLARE_GET_FIELD(t_GroupDocs, groupSortValues),
            DECLARE_GET_FIELD(t_GroupDocs, groupValue),
            DECLARE_GET_FIELD(t_GroupDocs, maxScore),
            DECLARE_GET_FIELD(t_GroupDocs, score),
            DECLARE_GET_FIELD(t_GroupDocs, scoreDocs),
            DECLARE_GET_FIELD(t_GroupDocs, totalHits),
            DECLARE_GET_FIELD(t_GroupDocs, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GroupDocs__methods_[] = {
            DECLARE_METHOD(t_GroupDocs, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GroupDocs, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GroupDocs, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GroupDocs, t_GroupDocs, ::java::lang::Object, GroupDocs, t_GroupDocs_init_, 0, 0, t_GroupDocs__fields_, 0, 0);
          PyObject *t_GroupDocs::wrap_Object(const GroupDocs& object, PyTypeObject *p0)
          {
            PyObject *obj = t_GroupDocs::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_GroupDocs *self = (t_GroupDocs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_GroupDocs::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_GroupDocs::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_GroupDocs *self = (t_GroupDocs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_GroupDocs::install(PyObject *module)
          {
            installType(&PY_TYPE(GroupDocs), module, "GroupDocs", 0);
          }

          void t_GroupDocs::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GroupDocs).tp_dict, "class_", make_descriptor(GroupDocs::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GroupDocs).tp_dict, "wrapfn_", make_descriptor(t_GroupDocs::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GroupDocs).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GroupDocs_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GroupDocs::initializeClass, 1)))
              return NULL;
            return t_GroupDocs::wrap_Object(GroupDocs(((t_GroupDocs *) arg)->object.this$));
          }
          static PyObject *t_GroupDocs_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GroupDocs::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_GroupDocs_of_(t_GroupDocs *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_GroupDocs_init_(t_GroupDocs *self, PyObject *args, PyObject *kwds)
          {
            jfloat a0;
            jfloat a1;
            jint a2;
            JArray< ::org::apache::lucene::search::ScoreDoc > a3((jobject) NULL);
            ::java::lang::Object a4((jobject) NULL);
            JArray< ::java::lang::Object > a5((jobject) NULL);
            GroupDocs object((jobject) NULL);

            if (!parseArgs(args, "FFI[ko[o", ::org::apache::lucene::search::ScoreDoc::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
            {
              INT_CALL(object = GroupDocs(a0, a1, a2, a3, a4, a5));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
          static PyObject *t_GroupDocs_get__parameters_(t_GroupDocs *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_GroupDocs_get__groupSortValues(t_GroupDocs *self, void *data)
          {
            JArray< ::java::lang::Object > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_groupSortValues());
            return JArray<jobject>(value.this$).wrap(::java::lang::t_Object::wrap_jobject);
          }

          static PyObject *t_GroupDocs_get__groupValue(t_GroupDocs *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_groupValue());
            return ::java::lang::t_Object::wrap_Object(value);
          }

          static PyObject *t_GroupDocs_get__maxScore(t_GroupDocs *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object._get_maxScore());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_GroupDocs_get__score(t_GroupDocs *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object._get_score());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_GroupDocs_get__scoreDocs(t_GroupDocs *self, void *data)
          {
            JArray< ::org::apache::lucene::search::ScoreDoc > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_scoreDocs());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::t_ScoreDoc::wrap_jobject);
          }

          static PyObject *t_GroupDocs_get__totalHits(t_GroupDocs *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_totalHits());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/function/FunctionAllGroupHeadsCollector$GroupHead.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/mutable/MutableValue.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace function {

            ::java::lang::Class *FunctionAllGroupHeadsCollector$GroupHead::class$ = NULL;
            jmethodID *FunctionAllGroupHeadsCollector$GroupHead::mids$ = NULL;
            bool FunctionAllGroupHeadsCollector$GroupHead::live$ = false;

            jclass FunctionAllGroupHeadsCollector$GroupHead::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/function/FunctionAllGroupHeadsCollector$GroupHead");

                mids$ = new jmethodID[max_mid];
                mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
                mids$[mid_updateDocHead_39c7bd3c] = env->getMethodID(cls, "updateDocHead", "(I)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            jint FunctionAllGroupHeadsCollector$GroupHead::compare(jint a0, jint a1) const
            {
              return env->callIntMethod(this$, mids$[mid_compare_d8d154b9], a0, a1);
            }

            void FunctionAllGroupHeadsCollector$GroupHead::updateDocHead(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_updateDocHead_39c7bd3c], a0);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace function {
            static PyObject *t_FunctionAllGroupHeadsCollector$GroupHead_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FunctionAllGroupHeadsCollector$GroupHead_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FunctionAllGroupHeadsCollector$GroupHead_of_(t_FunctionAllGroupHeadsCollector$GroupHead *self, PyObject *args);
            static PyObject *t_FunctionAllGroupHeadsCollector$GroupHead_compare(t_FunctionAllGroupHeadsCollector$GroupHead *self, PyObject *args);
            static PyObject *t_FunctionAllGroupHeadsCollector$GroupHead_updateDocHead(t_FunctionAllGroupHeadsCollector$GroupHead *self, PyObject *arg);
            static PyObject *t_FunctionAllGroupHeadsCollector$GroupHead_get__parameters_(t_FunctionAllGroupHeadsCollector$GroupHead *self, void *data);
            static PyGetSetDef t_FunctionAllGroupHeadsCollector$GroupHead__fields_[] = {
              DECLARE_GET_FIELD(t_FunctionAllGroupHeadsCollector$GroupHead, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FunctionAllGroupHeadsCollector$GroupHead__methods_[] = {
              DECLARE_METHOD(t_FunctionAllGroupHeadsCollector$GroupHead, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FunctionAllGroupHeadsCollector$GroupHead, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FunctionAllGroupHeadsCollector$GroupHead, of_, METH_VARARGS),
              DECLARE_METHOD(t_FunctionAllGroupHeadsCollector$GroupHead, compare, METH_VARARGS),
              DECLARE_METHOD(t_FunctionAllGroupHeadsCollector$GroupHead, updateDocHead, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FunctionAllGroupHeadsCollector$GroupHead, t_FunctionAllGroupHeadsCollector$GroupHead, ::org::apache::lucene::search::grouping::AbstractAllGroupHeadsCollector$GroupHead, FunctionAllGroupHeadsCollector$GroupHead, abstract_init, 0, 0, t_FunctionAllGroupHeadsCollector$GroupHead__fields_, 0, 0);
            PyObject *t_FunctionAllGroupHeadsCollector$GroupHead::wrap_Object(const FunctionAllGroupHeadsCollector$GroupHead& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FunctionAllGroupHeadsCollector$GroupHead::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FunctionAllGroupHeadsCollector$GroupHead *self = (t_FunctionAllGroupHeadsCollector$GroupHead *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_FunctionAllGroupHeadsCollector$GroupHead::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FunctionAllGroupHeadsCollector$GroupHead::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FunctionAllGroupHeadsCollector$GroupHead *self = (t_FunctionAllGroupHeadsCollector$GroupHead *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_FunctionAllGroupHeadsCollector$GroupHead::install(PyObject *module)
            {
              installType(&PY_TYPE(FunctionAllGroupHeadsCollector$GroupHead), module, "FunctionAllGroupHeadsCollector$GroupHead", 0);
            }

            void t_FunctionAllGroupHeadsCollector$GroupHead::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FunctionAllGroupHeadsCollector$GroupHead).tp_dict, "class_", make_descriptor(FunctionAllGroupHeadsCollector$GroupHead::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FunctionAllGroupHeadsCollector$GroupHead).tp_dict, "wrapfn_", make_descriptor(t_FunctionAllGroupHeadsCollector$GroupHead::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FunctionAllGroupHeadsCollector$GroupHead).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FunctionAllGroupHeadsCollector$GroupHead_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FunctionAllGroupHeadsCollector$GroupHead::initializeClass, 1)))
                return NULL;
              return t_FunctionAllGroupHeadsCollector$GroupHead::wrap_Object(FunctionAllGroupHeadsCollector$GroupHead(((t_FunctionAllGroupHeadsCollector$GroupHead *) arg)->object.this$));
            }
            static PyObject *t_FunctionAllGroupHeadsCollector$GroupHead_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FunctionAllGroupHeadsCollector$GroupHead::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_FunctionAllGroupHeadsCollector$GroupHead_of_(t_FunctionAllGroupHeadsCollector$GroupHead *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static PyObject *t_FunctionAllGroupHeadsCollector$GroupHead_compare(t_FunctionAllGroupHeadsCollector$GroupHead *self, PyObject *args)
            {
              jint a0;
              jint a1;
              jint result;

              if (!parseArgs(args, "II", &a0, &a1))
              {
                OBJ_CALL(result = self->object.compare(a0, a1));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "compare", args);
              return NULL;
            }

            static PyObject *t_FunctionAllGroupHeadsCollector$GroupHead_updateDocHead(t_FunctionAllGroupHeadsCollector$GroupHead *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.updateDocHead(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "updateDocHead", arg);
              return NULL;
            }
            static PyObject *t_FunctionAllGroupHeadsCollector$GroupHead_get__parameters_(t_FunctionAllGroupHeadsCollector$GroupHead *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ga/IrishLowerCaseFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ga {

          ::java::lang::Class *IrishLowerCaseFilterFactory::class$ = NULL;
          jmethodID *IrishLowerCaseFilterFactory::mids$ = NULL;
          bool IrishLowerCaseFilterFactory::live$ = false;

          jclass IrishLowerCaseFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ga/IrishLowerCaseFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IrishLowerCaseFilterFactory::IrishLowerCaseFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream IrishLowerCaseFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory IrishLowerCaseFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ga {
          static PyObject *t_IrishLowerCaseFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IrishLowerCaseFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IrishLowerCaseFilterFactory_init_(t_IrishLowerCaseFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IrishLowerCaseFilterFactory_create(t_IrishLowerCaseFilterFactory *self, PyObject *args);
          static PyObject *t_IrishLowerCaseFilterFactory_getMultiTermComponent(t_IrishLowerCaseFilterFactory *self);
          static PyObject *t_IrishLowerCaseFilterFactory_get__multiTermComponent(t_IrishLowerCaseFilterFactory *self, void *data);
          static PyGetSetDef t_IrishLowerCaseFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_IrishLowerCaseFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_IrishLowerCaseFilterFactory__methods_[] = {
            DECLARE_METHOD(t_IrishLowerCaseFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IrishLowerCaseFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IrishLowerCaseFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_IrishLowerCaseFilterFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IrishLowerCaseFilterFactory, t_IrishLowerCaseFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, IrishLowerCaseFilterFactory, t_IrishLowerCaseFilterFactory_init_, 0, 0, t_IrishLowerCaseFilterFactory__fields_, 0, 0);

          void t_IrishLowerCaseFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(IrishLowerCaseFilterFactory), module, "IrishLowerCaseFilterFactory", 0);
          }

          void t_IrishLowerCaseFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IrishLowerCaseFilterFactory).tp_dict, "class_", make_descriptor(IrishLowerCaseFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IrishLowerCaseFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_IrishLowerCaseFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IrishLowerCaseFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IrishLowerCaseFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IrishLowerCaseFilterFactory::initializeClass, 1)))
              return NULL;
            return t_IrishLowerCaseFilterFactory::wrap_Object(IrishLowerCaseFilterFactory(((t_IrishLowerCaseFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_IrishLowerCaseFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IrishLowerCaseFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IrishLowerCaseFilterFactory_init_(t_IrishLowerCaseFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            IrishLowerCaseFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = IrishLowerCaseFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IrishLowerCaseFilterFactory_create(t_IrishLowerCaseFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IrishLowerCaseFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_IrishLowerCaseFilterFactory_getMultiTermComponent(t_IrishLowerCaseFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_IrishLowerCaseFilterFactory_get__multiTermComponent(t_IrishLowerCaseFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/th/ThaiWordFilterFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/th/ThaiWordFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace th {

          ::java::lang::Class *ThaiWordFilterFactory::class$ = NULL;
          jmethodID *ThaiWordFilterFactory::mids$ = NULL;
          bool ThaiWordFilterFactory::live$ = false;

          jclass ThaiWordFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/th/ThaiWordFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_55090cc5] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/th/ThaiWordFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ThaiWordFilterFactory::ThaiWordFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::th::ThaiWordFilter ThaiWordFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::th::ThaiWordFilter(env->callObjectMethod(this$, mids$[mid_create_55090cc5], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace th {
          static PyObject *t_ThaiWordFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ThaiWordFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ThaiWordFilterFactory_init_(t_ThaiWordFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ThaiWordFilterFactory_create(t_ThaiWordFilterFactory *self, PyObject *args);

          static PyMethodDef t_ThaiWordFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ThaiWordFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ThaiWordFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ThaiWordFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ThaiWordFilterFactory, t_ThaiWordFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, ThaiWordFilterFactory, t_ThaiWordFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_ThaiWordFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ThaiWordFilterFactory), module, "ThaiWordFilterFactory", 0);
          }

          void t_ThaiWordFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ThaiWordFilterFactory).tp_dict, "class_", make_descriptor(ThaiWordFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ThaiWordFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_ThaiWordFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ThaiWordFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ThaiWordFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ThaiWordFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ThaiWordFilterFactory::wrap_Object(ThaiWordFilterFactory(((t_ThaiWordFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ThaiWordFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ThaiWordFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ThaiWordFilterFactory_init_(t_ThaiWordFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ThaiWordFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ThaiWordFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ThaiWordFilterFactory_create(t_ThaiWordFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::th::ThaiWordFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::th::t_ThaiWordFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ThaiWordFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene42/Lucene42DocValuesFormat.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/codecs/DocValuesConsumer.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene42 {

          ::java::lang::Class *Lucene42DocValuesFormat::class$ = NULL;
          jmethodID *Lucene42DocValuesFormat::mids$ = NULL;
          bool Lucene42DocValuesFormat::live$ = false;
          jint Lucene42DocValuesFormat::MAX_BINARY_FIELD_LENGTH = (jint) 0;

          jclass Lucene42DocValuesFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene42/Lucene42DocValuesFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_06298cab] = env->getMethodID(cls, "<init>", "(F)V");
              mids$[mid_fieldsConsumer_025deb44] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/DocValuesConsumer;");
              mids$[mid_fieldsProducer_9b0d4e4a] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/DocValuesProducer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              MAX_BINARY_FIELD_LENGTH = env->getStaticIntField(cls, "MAX_BINARY_FIELD_LENGTH");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene42DocValuesFormat::Lucene42DocValuesFormat() : ::org::apache::lucene::codecs::DocValuesFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          Lucene42DocValuesFormat::Lucene42DocValuesFormat(jfloat a0) : ::org::apache::lucene::codecs::DocValuesFormat(env->newObject(initializeClass, &mids$, mid_init$_06298cab, a0)) {}

          ::org::apache::lucene::codecs::DocValuesConsumer Lucene42DocValuesFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_025deb44], a0.this$));
          }

          ::org::apache::lucene::codecs::DocValuesProducer Lucene42DocValuesFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_9b0d4e4a], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene42 {
          static PyObject *t_Lucene42DocValuesFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene42DocValuesFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene42DocValuesFormat_init_(t_Lucene42DocValuesFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene42DocValuesFormat_fieldsConsumer(t_Lucene42DocValuesFormat *self, PyObject *args);
          static PyObject *t_Lucene42DocValuesFormat_fieldsProducer(t_Lucene42DocValuesFormat *self, PyObject *args);

          static PyMethodDef t_Lucene42DocValuesFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene42DocValuesFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene42DocValuesFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene42DocValuesFormat, fieldsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_Lucene42DocValuesFormat, fieldsProducer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene42DocValuesFormat, t_Lucene42DocValuesFormat, ::org::apache::lucene::codecs::DocValuesFormat, Lucene42DocValuesFormat, t_Lucene42DocValuesFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene42DocValuesFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene42DocValuesFormat), module, "Lucene42DocValuesFormat", 0);
          }

          void t_Lucene42DocValuesFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene42DocValuesFormat).tp_dict, "class_", make_descriptor(Lucene42DocValuesFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene42DocValuesFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene42DocValuesFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene42DocValuesFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene42DocValuesFormat::initializeClass);
            PyDict_SetItemString(PY_TYPE(Lucene42DocValuesFormat).tp_dict, "MAX_BINARY_FIELD_LENGTH", make_descriptor(Lucene42DocValuesFormat::MAX_BINARY_FIELD_LENGTH));
          }

          static PyObject *t_Lucene42DocValuesFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene42DocValuesFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene42DocValuesFormat::wrap_Object(Lucene42DocValuesFormat(((t_Lucene42DocValuesFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene42DocValuesFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene42DocValuesFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene42DocValuesFormat_init_(t_Lucene42DocValuesFormat *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                Lucene42DocValuesFormat object((jobject) NULL);

                INT_CALL(object = Lucene42DocValuesFormat());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jfloat a0;
                Lucene42DocValuesFormat object((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  INT_CALL(object = Lucene42DocValuesFormat(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene42DocValuesFormat_fieldsConsumer(t_Lucene42DocValuesFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsConsumer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesConsumer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene42DocValuesFormat), (PyObject *) self, "fieldsConsumer", args, 2);
          }

          static PyObject *t_Lucene42DocValuesFormat_fieldsProducer(t_Lucene42DocValuesFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsProducer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesProducer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene42DocValuesFormat), (PyObject *) self, "fieldsProducer", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pt/PortugueseLightStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {

          ::java::lang::Class *PortugueseLightStemFilter::class$ = NULL;
          jmethodID *PortugueseLightStemFilter::mids$ = NULL;
          bool PortugueseLightStemFilter::live$ = false;

          jclass PortugueseLightStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pt/PortugueseLightStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PortugueseLightStemFilter::PortugueseLightStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean PortugueseLightStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {
          static PyObject *t_PortugueseLightStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PortugueseLightStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PortugueseLightStemFilter_init_(t_PortugueseLightStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PortugueseLightStemFilter_incrementToken(t_PortugueseLightStemFilter *self, PyObject *args);

          static PyMethodDef t_PortugueseLightStemFilter__methods_[] = {
            DECLARE_METHOD(t_PortugueseLightStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseLightStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseLightStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PortugueseLightStemFilter, t_PortugueseLightStemFilter, ::org::apache::lucene::analysis::TokenFilter, PortugueseLightStemFilter, t_PortugueseLightStemFilter_init_, 0, 0, 0, 0, 0);

          void t_PortugueseLightStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PortugueseLightStemFilter), module, "PortugueseLightStemFilter", 0);
          }

          void t_PortugueseLightStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PortugueseLightStemFilter).tp_dict, "class_", make_descriptor(PortugueseLightStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PortugueseLightStemFilter).tp_dict, "wrapfn_", make_descriptor(t_PortugueseLightStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PortugueseLightStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PortugueseLightStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PortugueseLightStemFilter::initializeClass, 1)))
              return NULL;
            return t_PortugueseLightStemFilter::wrap_Object(PortugueseLightStemFilter(((t_PortugueseLightStemFilter *) arg)->object.this$));
          }
          static PyObject *t_PortugueseLightStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PortugueseLightStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PortugueseLightStemFilter_init_(t_PortugueseLightStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            PortugueseLightStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = PortugueseLightStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PortugueseLightStemFilter_incrementToken(t_PortugueseLightStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PortugueseLightStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/ScoreOrderFragmentsBuilder.h"
#include "org/apache/lucene/search/vectorhighlight/BoundaryScanner.h"
#include "java/lang/String.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *ScoreOrderFragmentsBuilder::class$ = NULL;
          jmethodID *ScoreOrderFragmentsBuilder::mids$ = NULL;
          bool ScoreOrderFragmentsBuilder::live$ = false;

          jclass ScoreOrderFragmentsBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/ScoreOrderFragmentsBuilder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_7f580ee7] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/vectorhighlight/BoundaryScanner;)V");
              mids$[mid_init$_60fab432] = env->getMethodID(cls, "<init>", "([Ljava/lang/String;[Ljava/lang/String;)V");
              mids$[mid_init$_b03db8ab] = env->getMethodID(cls, "<init>", "([Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/search/vectorhighlight/BoundaryScanner;)V");
              mids$[mid_getWeightedFragInfoList_4f378251] = env->getMethodID(cls, "getWeightedFragInfoList", "(Ljava/util/List;)Ljava/util/List;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ScoreOrderFragmentsBuilder::ScoreOrderFragmentsBuilder() : ::org::apache::lucene::search::vectorhighlight::BaseFragmentsBuilder(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ScoreOrderFragmentsBuilder::ScoreOrderFragmentsBuilder(const ::org::apache::lucene::search::vectorhighlight::BoundaryScanner & a0) : ::org::apache::lucene::search::vectorhighlight::BaseFragmentsBuilder(env->newObject(initializeClass, &mids$, mid_init$_7f580ee7, a0.this$)) {}

          ScoreOrderFragmentsBuilder::ScoreOrderFragmentsBuilder(const JArray< ::java::lang::String > & a0, const JArray< ::java::lang::String > & a1) : ::org::apache::lucene::search::vectorhighlight::BaseFragmentsBuilder(env->newObject(initializeClass, &mids$, mid_init$_60fab432, a0.this$, a1.this$)) {}

          ScoreOrderFragmentsBuilder::ScoreOrderFragmentsBuilder(const JArray< ::java::lang::String > & a0, const JArray< ::java::lang::String > & a1, const ::org::apache::lucene::search::vectorhighlight::BoundaryScanner & a2) : ::org::apache::lucene::search::vectorhighlight::BaseFragmentsBuilder(env->newObject(initializeClass, &mids$, mid_init$_b03db8ab, a0.this$, a1.this$, a2.this$)) {}

          ::java::util::List ScoreOrderFragmentsBuilder::getWeightedFragInfoList(const ::java::util::List & a0) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getWeightedFragInfoList_4f378251], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/vectorhighlight/ScoreOrderFragmentsBuilder$ScoreComparator.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_ScoreOrderFragmentsBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ScoreOrderFragmentsBuilder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ScoreOrderFragmentsBuilder_init_(t_ScoreOrderFragmentsBuilder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ScoreOrderFragmentsBuilder_getWeightedFragInfoList(t_ScoreOrderFragmentsBuilder *self, PyObject *args);

          static PyMethodDef t_ScoreOrderFragmentsBuilder__methods_[] = {
            DECLARE_METHOD(t_ScoreOrderFragmentsBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScoreOrderFragmentsBuilder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScoreOrderFragmentsBuilder, getWeightedFragInfoList, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ScoreOrderFragmentsBuilder, t_ScoreOrderFragmentsBuilder, ::org::apache::lucene::search::vectorhighlight::BaseFragmentsBuilder, ScoreOrderFragmentsBuilder, t_ScoreOrderFragmentsBuilder_init_, 0, 0, 0, 0, 0);

          void t_ScoreOrderFragmentsBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(ScoreOrderFragmentsBuilder), module, "ScoreOrderFragmentsBuilder", 0);
            PyDict_SetItemString(PY_TYPE(ScoreOrderFragmentsBuilder).tp_dict, "ScoreComparator", make_descriptor(&PY_TYPE(ScoreOrderFragmentsBuilder$ScoreComparator)));
          }

          void t_ScoreOrderFragmentsBuilder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ScoreOrderFragmentsBuilder).tp_dict, "class_", make_descriptor(ScoreOrderFragmentsBuilder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ScoreOrderFragmentsBuilder).tp_dict, "wrapfn_", make_descriptor(t_ScoreOrderFragmentsBuilder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ScoreOrderFragmentsBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ScoreOrderFragmentsBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ScoreOrderFragmentsBuilder::initializeClass, 1)))
              return NULL;
            return t_ScoreOrderFragmentsBuilder::wrap_Object(ScoreOrderFragmentsBuilder(((t_ScoreOrderFragmentsBuilder *) arg)->object.this$));
          }
          static PyObject *t_ScoreOrderFragmentsBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ScoreOrderFragmentsBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ScoreOrderFragmentsBuilder_init_(t_ScoreOrderFragmentsBuilder *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ScoreOrderFragmentsBuilder object((jobject) NULL);

                INT_CALL(object = ScoreOrderFragmentsBuilder());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::search::vectorhighlight::BoundaryScanner a0((jobject) NULL);
                ScoreOrderFragmentsBuilder object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::vectorhighlight::BoundaryScanner::initializeClass, &a0))
                {
                  INT_CALL(object = ScoreOrderFragmentsBuilder(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                JArray< ::java::lang::String > a0((jobject) NULL);
                JArray< ::java::lang::String > a1((jobject) NULL);
                ScoreOrderFragmentsBuilder object((jobject) NULL);

                if (!parseArgs(args, "[s[s", &a0, &a1))
                {
                  INT_CALL(object = ScoreOrderFragmentsBuilder(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                JArray< ::java::lang::String > a0((jobject) NULL);
                JArray< ::java::lang::String > a1((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::BoundaryScanner a2((jobject) NULL);
                ScoreOrderFragmentsBuilder object((jobject) NULL);

                if (!parseArgs(args, "[s[sk", ::org::apache::lucene::search::vectorhighlight::BoundaryScanner::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = ScoreOrderFragmentsBuilder(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ScoreOrderFragmentsBuilder_getWeightedFragInfoList(t_ScoreOrderFragmentsBuilder *self, PyObject *args)
          {
            ::java::util::List a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::util::List result((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(result = self->object.getWeightedFragInfoList(a0));
              return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::vectorhighlight::PY_TYPE(FieldFragList$WeightedFragInfo));
            }

            return callSuper(&PY_TYPE(ScoreOrderFragmentsBuilder), (PyObject *) self, "getWeightedFragInfoList", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/TokenStreamFromTermPositionVector.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/Terms.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *TokenStreamFromTermPositionVector::class$ = NULL;
          jmethodID *TokenStreamFromTermPositionVector::mids$ = NULL;
          bool TokenStreamFromTermPositionVector::live$ = false;

          jclass TokenStreamFromTermPositionVector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/TokenStreamFromTermPositionVector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d0b7bb17] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Terms;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TokenStreamFromTermPositionVector::TokenStreamFromTermPositionVector(const ::org::apache::lucene::index::Terms & a0) : ::org::apache::lucene::analysis::TokenStream(env->newObject(initializeClass, &mids$, mid_init$_d0b7bb17, a0.this$)) {}

          jboolean TokenStreamFromTermPositionVector::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void TokenStreamFromTermPositionVector::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_TokenStreamFromTermPositionVector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenStreamFromTermPositionVector_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TokenStreamFromTermPositionVector_init_(t_TokenStreamFromTermPositionVector *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TokenStreamFromTermPositionVector_incrementToken(t_TokenStreamFromTermPositionVector *self, PyObject *args);
          static PyObject *t_TokenStreamFromTermPositionVector_reset(t_TokenStreamFromTermPositionVector *self, PyObject *args);

          static PyMethodDef t_TokenStreamFromTermPositionVector__methods_[] = {
            DECLARE_METHOD(t_TokenStreamFromTermPositionVector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenStreamFromTermPositionVector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenStreamFromTermPositionVector, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_TokenStreamFromTermPositionVector, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TokenStreamFromTermPositionVector, t_TokenStreamFromTermPositionVector, ::org::apache::lucene::analysis::TokenStream, TokenStreamFromTermPositionVector, t_TokenStreamFromTermPositionVector_init_, 0, 0, 0, 0, 0);

          void t_TokenStreamFromTermPositionVector::install(PyObject *module)
          {
            installType(&PY_TYPE(TokenStreamFromTermPositionVector), module, "TokenStreamFromTermPositionVector", 0);
          }

          void t_TokenStreamFromTermPositionVector::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TokenStreamFromTermPositionVector).tp_dict, "class_", make_descriptor(TokenStreamFromTermPositionVector::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TokenStreamFromTermPositionVector).tp_dict, "wrapfn_", make_descriptor(t_TokenStreamFromTermPositionVector::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TokenStreamFromTermPositionVector).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TokenStreamFromTermPositionVector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TokenStreamFromTermPositionVector::initializeClass, 1)))
              return NULL;
            return t_TokenStreamFromTermPositionVector::wrap_Object(TokenStreamFromTermPositionVector(((t_TokenStreamFromTermPositionVector *) arg)->object.this$));
          }
          static PyObject *t_TokenStreamFromTermPositionVector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TokenStreamFromTermPositionVector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TokenStreamFromTermPositionVector_init_(t_TokenStreamFromTermPositionVector *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::Terms a0((jobject) NULL);
            TokenStreamFromTermPositionVector object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::Terms::initializeClass, &a0))
            {
              INT_CALL(object = TokenStreamFromTermPositionVector(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TokenStreamFromTermPositionVector_incrementToken(t_TokenStreamFromTermPositionVector *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TokenStreamFromTermPositionVector), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_TokenStreamFromTermPositionVector_reset(t_TokenStreamFromTermPositionVector *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(TokenStreamFromTermPositionVector), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/messages/NLS.h"
#include "java/util/Locale.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace messages {

            ::java::lang::Class *NLS::class$ = NULL;
            jmethodID *NLS::mids$ = NULL;
            bool NLS::live$ = false;

            jclass NLS::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/messages/NLS");

                mids$ = new jmethodID[max_mid];
                mids$[mid_getLocalizedMessage_97a5258f] = env->getStaticMethodID(cls, "getLocalizedMessage", "(Ljava/lang/String;)Ljava/lang/String;");
                mids$[mid_getLocalizedMessage_6ffeebd8] = env->getStaticMethodID(cls, "getLocalizedMessage", "(Ljava/lang/String;Ljava/util/Locale;)Ljava/lang/String;");
                mids$[mid_getLocalizedMessage_0fb26e3b] = env->getStaticMethodID(cls, "getLocalizedMessage", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;");
                mids$[mid_getLocalizedMessage_c901cda2] = env->getStaticMethodID(cls, "getLocalizedMessage", "(Ljava/lang/String;Ljava/util/Locale;[Ljava/lang/Object;)Ljava/lang/String;");
                mids$[mid_initializeMessages_c13be9ce] = env->getStaticMethodID(cls, "initializeMessages", "(Ljava/lang/String;Ljava/lang/Class;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ::java::lang::String NLS::getLocalizedMessage(const ::java::lang::String & a0)
            {
              jclass cls = env->getClass(initializeClass);
              return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getLocalizedMessage_97a5258f], a0.this$));
            }

            ::java::lang::String NLS::getLocalizedMessage(const ::java::lang::String & a0, const ::java::util::Locale & a1)
            {
              jclass cls = env->getClass(initializeClass);
              return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getLocalizedMessage_6ffeebd8], a0.this$, a1.this$));
            }

            ::java::lang::String NLS::getLocalizedMessage(const ::java::lang::String & a0, const JArray< ::java::lang::Object > & a1)
            {
              jclass cls = env->getClass(initializeClass);
              return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getLocalizedMessage_0fb26e3b], a0.this$, a1.this$));
            }

            ::java::lang::String NLS::getLocalizedMessage(const ::java::lang::String & a0, const ::java::util::Locale & a1, const JArray< ::java::lang::Object > & a2)
            {
              jclass cls = env->getClass(initializeClass);
              return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getLocalizedMessage_c901cda2], a0.this$, a1.this$, a2.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace messages {
            static PyObject *t_NLS_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NLS_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NLS_getLocalizedMessage(PyTypeObject *type, PyObject *args);

            static PyMethodDef t_NLS__methods_[] = {
              DECLARE_METHOD(t_NLS, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NLS, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NLS, getLocalizedMessage, METH_VARARGS | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(NLS, t_NLS, ::java::lang::Object, NLS, abstract_init, 0, 0, 0, 0, 0);

            void t_NLS::install(PyObject *module)
            {
              installType(&PY_TYPE(NLS), module, "NLS", 0);
            }

            void t_NLS::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(NLS).tp_dict, "class_", make_descriptor(NLS::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(NLS).tp_dict, "wrapfn_", make_descriptor(t_NLS::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(NLS).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_NLS_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, NLS::initializeClass, 1)))
                return NULL;
              return t_NLS::wrap_Object(NLS(((t_NLS *) arg)->object.this$));
            }
            static PyObject *t_NLS_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, NLS::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_NLS_getLocalizedMessage(PyTypeObject *type, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::java::lang::String result((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::messages::NLS::getLocalizedMessage(a0));
                    return j2p(result);
                  }
                }
                break;
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::java::util::Locale a1((jobject) NULL);
                  ::java::lang::String result((jobject) NULL);

                  if (!parseArgs(args, "sk", ::java::util::Locale::initializeClass, &a0, &a1))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::messages::NLS::getLocalizedMessage(a0, a1));
                    return j2p(result);
                  }
                }
                {
                  ::java::lang::String a0((jobject) NULL);
                  JArray< ::java::lang::Object > a1((jobject) NULL);
                  ::java::lang::String result((jobject) NULL);

                  if (!parseArgs(args, "s[o", &a0, &a1))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::messages::NLS::getLocalizedMessage(a0, a1));
                    return j2p(result);
                  }
                }
                break;
               case 3:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::java::util::Locale a1((jobject) NULL);
                  JArray< ::java::lang::Object > a2((jobject) NULL);
                  ::java::lang::String result((jobject) NULL);

                  if (!parseArgs(args, "sk[o", ::java::util::Locale::initializeClass, &a0, &a1, &a2))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::messages::NLS::getLocalizedMessage(a0, a1, a2));
                    return j2p(result);
                  }
                }
              }

              PyErr_SetArgsError(type, "getLocalizedMessage", args);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ru/RussianLetterTokenizer.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ru {

          ::java::lang::Class *RussianLetterTokenizer::class$ = NULL;
          jmethodID *RussianLetterTokenizer::mids$ = NULL;
          bool RussianLetterTokenizer::live$ = false;

          jclass RussianLetterTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ru/RussianLetterTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_be7a3ecf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_isTokenChar_39c7bd30] = env->getMethodID(cls, "isTokenChar", "(I)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RussianLetterTokenizer::RussianLetterTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::util::CharTokenizer(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          RussianLetterTokenizer::RussianLetterTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2) : ::org::apache::lucene::analysis::util::CharTokenizer(env->newObject(initializeClass, &mids$, mid_init$_be7a3ecf, a0.this$, a1.this$, a2.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ru {
          static PyObject *t_RussianLetterTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RussianLetterTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RussianLetterTokenizer_init_(t_RussianLetterTokenizer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_RussianLetterTokenizer__methods_[] = {
            DECLARE_METHOD(t_RussianLetterTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RussianLetterTokenizer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(RussianLetterTokenizer, t_RussianLetterTokenizer, ::org::apache::lucene::analysis::util::CharTokenizer, RussianLetterTokenizer, t_RussianLetterTokenizer_init_, 0, 0, 0, 0, 0);

          void t_RussianLetterTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(RussianLetterTokenizer), module, "RussianLetterTokenizer", 0);
          }

          void t_RussianLetterTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(RussianLetterTokenizer).tp_dict, "class_", make_descriptor(RussianLetterTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RussianLetterTokenizer).tp_dict, "wrapfn_", make_descriptor(t_RussianLetterTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RussianLetterTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_RussianLetterTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RussianLetterTokenizer::initializeClass, 1)))
              return NULL;
            return t_RussianLetterTokenizer::wrap_Object(RussianLetterTokenizer(((t_RussianLetterTokenizer *) arg)->object.this$));
          }
          static PyObject *t_RussianLetterTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RussianLetterTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RussianLetterTokenizer_init_(t_RussianLetterTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                RussianLetterTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = RussianLetterTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                RussianLetterTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kkk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = RussianLetterTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/br/BrazilianStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace br {

          ::java::lang::Class *BrazilianStemFilter::class$ = NULL;
          jmethodID *BrazilianStemFilter::mids$ = NULL;
          bool BrazilianStemFilter::live$ = false;

          jclass BrazilianStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/br/BrazilianStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BrazilianStemFilter::BrazilianStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean BrazilianStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace br {
          static PyObject *t_BrazilianStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BrazilianStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BrazilianStemFilter_init_(t_BrazilianStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BrazilianStemFilter_incrementToken(t_BrazilianStemFilter *self, PyObject *args);

          static PyMethodDef t_BrazilianStemFilter__methods_[] = {
            DECLARE_METHOD(t_BrazilianStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BrazilianStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BrazilianStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BrazilianStemFilter, t_BrazilianStemFilter, ::org::apache::lucene::analysis::TokenFilter, BrazilianStemFilter, t_BrazilianStemFilter_init_, 0, 0, 0, 0, 0);

          void t_BrazilianStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(BrazilianStemFilter), module, "BrazilianStemFilter", 0);
          }

          void t_BrazilianStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BrazilianStemFilter).tp_dict, "class_", make_descriptor(BrazilianStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BrazilianStemFilter).tp_dict, "wrapfn_", make_descriptor(t_BrazilianStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BrazilianStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BrazilianStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BrazilianStemFilter::initializeClass, 1)))
              return NULL;
            return t_BrazilianStemFilter::wrap_Object(BrazilianStemFilter(((t_BrazilianStemFilter *) arg)->object.this$));
          }
          static PyObject *t_BrazilianStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BrazilianStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BrazilianStemFilter_init_(t_BrazilianStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            BrazilianStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = BrazilianStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BrazilianStemFilter_incrementToken(t_BrazilianStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(BrazilianStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SegmentInfos$FindSegmentsFile.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SegmentInfos$FindSegmentsFile::class$ = NULL;
        jmethodID *SegmentInfos$FindSegmentsFile::mids$ = NULL;
        bool SegmentInfos$FindSegmentsFile::live$ = false;

        jclass SegmentInfos$FindSegmentsFile::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SegmentInfos$FindSegmentsFile");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_2e261ef2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_run_846352c3] = env->getMethodID(cls, "run", "()Ljava/lang/Object;");
            mids$[mid_run_38d34040] = env->getMethodID(cls, "run", "(Lorg/apache/lucene/index/IndexCommit;)Ljava/lang/Object;");
            mids$[mid_doBody_2a1c4d09] = env->getMethodID(cls, "doBody", "(Ljava/lang/String;)Ljava/lang/Object;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SegmentInfos$FindSegmentsFile::SegmentInfos$FindSegmentsFile(const ::org::apache::lucene::store::Directory & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_2e261ef2, a0.this$)) {}

        ::java::lang::Object SegmentInfos$FindSegmentsFile::run() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_run_846352c3]));
        }

        ::java::lang::Object SegmentInfos$FindSegmentsFile::run(const ::org::apache::lucene::index::IndexCommit & a0) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_run_38d34040], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SegmentInfos$FindSegmentsFile_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentInfos$FindSegmentsFile_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SegmentInfos$FindSegmentsFile_init_(t_SegmentInfos$FindSegmentsFile *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SegmentInfos$FindSegmentsFile_run(t_SegmentInfos$FindSegmentsFile *self, PyObject *args);

        static PyMethodDef t_SegmentInfos$FindSegmentsFile__methods_[] = {
          DECLARE_METHOD(t_SegmentInfos$FindSegmentsFile, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos$FindSegmentsFile, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos$FindSegmentsFile, run, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SegmentInfos$FindSegmentsFile, t_SegmentInfos$FindSegmentsFile, ::java::lang::Object, SegmentInfos$FindSegmentsFile, t_SegmentInfos$FindSegmentsFile_init_, 0, 0, 0, 0, 0);

        void t_SegmentInfos$FindSegmentsFile::install(PyObject *module)
        {
          installType(&PY_TYPE(SegmentInfos$FindSegmentsFile), module, "SegmentInfos$FindSegmentsFile", 0);
        }

        void t_SegmentInfos$FindSegmentsFile::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SegmentInfos$FindSegmentsFile).tp_dict, "class_", make_descriptor(SegmentInfos$FindSegmentsFile::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SegmentInfos$FindSegmentsFile).tp_dict, "wrapfn_", make_descriptor(t_SegmentInfos$FindSegmentsFile::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SegmentInfos$FindSegmentsFile).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SegmentInfos$FindSegmentsFile_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SegmentInfos$FindSegmentsFile::initializeClass, 1)))
            return NULL;
          return t_SegmentInfos$FindSegmentsFile::wrap_Object(SegmentInfos$FindSegmentsFile(((t_SegmentInfos$FindSegmentsFile *) arg)->object.this$));
        }
        static PyObject *t_SegmentInfos$FindSegmentsFile_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SegmentInfos$FindSegmentsFile::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SegmentInfos$FindSegmentsFile_init_(t_SegmentInfos$FindSegmentsFile *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          SegmentInfos$FindSegmentsFile object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
          {
            INT_CALL(object = SegmentInfos$FindSegmentsFile(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SegmentInfos$FindSegmentsFile_run(t_SegmentInfos$FindSegmentsFile *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ::java::lang::Object result((jobject) NULL);
              OBJ_CALL(result = self->object.run());
              return ::java::lang::t_Object::wrap_Object(result);
            }
            break;
           case 1:
            {
              ::org::apache::lucene::index::IndexCommit a0((jobject) NULL);
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexCommit::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.run(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "run", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/WordDelimiterIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *WordDelimiterIterator::class$ = NULL;
          jmethodID *WordDelimiterIterator::mids$ = NULL;
          bool WordDelimiterIterator::live$ = false;
          JArray< jbyte > *WordDelimiterIterator::DEFAULT_WORD_DELIM_TABLE = NULL;
          jint WordDelimiterIterator::DONE = (jint) 0;

          jclass WordDelimiterIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/WordDelimiterIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getType_39c7bd28] = env->getStaticMethodID(cls, "getType", "(I)B");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_WORD_DELIM_TABLE = new JArray< jbyte >(env->getStaticObjectField(cls, "DEFAULT_WORD_DELIM_TABLE", "[B"));
              DONE = env->getStaticIntField(cls, "DONE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jbyte WordDelimiterIterator::getType(jint a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticByteMethod(cls, mids$[mid_getType_39c7bd28], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_WordDelimiterIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WordDelimiterIterator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WordDelimiterIterator_getType(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_WordDelimiterIterator__methods_[] = {
            DECLARE_METHOD(t_WordDelimiterIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordDelimiterIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordDelimiterIterator, getType, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WordDelimiterIterator, t_WordDelimiterIterator, ::java::lang::Object, WordDelimiterIterator, abstract_init, 0, 0, 0, 0, 0);

          void t_WordDelimiterIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(WordDelimiterIterator), module, "WordDelimiterIterator", 0);
          }

          void t_WordDelimiterIterator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WordDelimiterIterator).tp_dict, "class_", make_descriptor(WordDelimiterIterator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WordDelimiterIterator).tp_dict, "wrapfn_", make_descriptor(t_WordDelimiterIterator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WordDelimiterIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(WordDelimiterIterator::initializeClass);
            PyDict_SetItemString(PY_TYPE(WordDelimiterIterator).tp_dict, "DEFAULT_WORD_DELIM_TABLE", make_descriptor(WordDelimiterIterator::DEFAULT_WORD_DELIM_TABLE->wrap()));
            PyDict_SetItemString(PY_TYPE(WordDelimiterIterator).tp_dict, "DONE", make_descriptor(WordDelimiterIterator::DONE));
          }

          static PyObject *t_WordDelimiterIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WordDelimiterIterator::initializeClass, 1)))
              return NULL;
            return t_WordDelimiterIterator::wrap_Object(WordDelimiterIterator(((t_WordDelimiterIterator *) arg)->object.this$));
          }
          static PyObject *t_WordDelimiterIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WordDelimiterIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_WordDelimiterIterator_getType(PyTypeObject *type, PyObject *arg)
          {
            jint a0;
            jbyte result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::miscellaneous::WordDelimiterIterator::getType(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "getType", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/BasicModelBE.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *BasicModelBE::class$ = NULL;
          jmethodID *BasicModelBE::mids$ = NULL;
          bool BasicModelBE::live$ = false;

          jclass BasicModelBE::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/BasicModelBE");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_score_076760a9] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;F)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BasicModelBE::BasicModelBE() : ::org::apache::lucene::search::similarities::BasicModel(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat BasicModelBE::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_076760a9], a0.this$, a1);
          }

          ::java::lang::String BasicModelBE::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_BasicModelBE_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicModelBE_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BasicModelBE_init_(t_BasicModelBE *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BasicModelBE_score(t_BasicModelBE *self, PyObject *args);
          static PyObject *t_BasicModelBE_toString(t_BasicModelBE *self, PyObject *args);

          static PyMethodDef t_BasicModelBE__methods_[] = {
            DECLARE_METHOD(t_BasicModelBE, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelBE, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelBE, score, METH_VARARGS),
            DECLARE_METHOD(t_BasicModelBE, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BasicModelBE, t_BasicModelBE, ::org::apache::lucene::search::similarities::BasicModel, BasicModelBE, t_BasicModelBE_init_, 0, 0, 0, 0, 0);

          void t_BasicModelBE::install(PyObject *module)
          {
            installType(&PY_TYPE(BasicModelBE), module, "BasicModelBE", 0);
          }

          void t_BasicModelBE::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BasicModelBE).tp_dict, "class_", make_descriptor(BasicModelBE::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BasicModelBE).tp_dict, "wrapfn_", make_descriptor(t_BasicModelBE::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BasicModelBE).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BasicModelBE_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BasicModelBE::initializeClass, 1)))
              return NULL;
            return t_BasicModelBE::wrap_Object(BasicModelBE(((t_BasicModelBE *) arg)->object.this$));
          }
          static PyObject *t_BasicModelBE_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BasicModelBE::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BasicModelBE_init_(t_BasicModelBE *self, PyObject *args, PyObject *kwds)
          {
            BasicModelBE object((jobject) NULL);

            INT_CALL(object = BasicModelBE());
            self->object = object;

            return 0;
          }

          static PyObject *t_BasicModelBE_score(t_BasicModelBE *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat result;

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(BasicModelBE), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_BasicModelBE_toString(t_BasicModelBE *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(BasicModelBE), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/ext/Extensions.h"
#include "org/apache/lucene/queryparser/ext/Extensions$Pair.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/ext/ParserExtension.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace ext {

          ::java::lang::Class *Extensions::class$ = NULL;
          jmethodID *Extensions::mids$ = NULL;
          bool Extensions::live$ = false;
          jchar Extensions::DEFAULT_EXTENSION_FIELD_DELIMITER = (jchar) 0;

          jclass Extensions::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/ext/Extensions");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_87fd545a] = env->getMethodID(cls, "<init>", "(C)V");
              mids$[mid_add_d7d984b9] = env->getMethodID(cls, "add", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/ext/ParserExtension;)V");
              mids$[mid_buildExtensionField_97a5258f] = env->getMethodID(cls, "buildExtensionField", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_buildExtensionField_aacea7e9] = env->getMethodID(cls, "buildExtensionField", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_escapeExtensionField_97a5258f] = env->getMethodID(cls, "escapeExtensionField", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_getExtension_a8956118] = env->getMethodID(cls, "getExtension", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/ext/ParserExtension;");
              mids$[mid_getExtensionFieldDelimiter_54c6a173] = env->getMethodID(cls, "getExtensionFieldDelimiter", "()C");
              mids$[mid_splitExtensionField_7a9e9194] = env->getMethodID(cls, "splitExtensionField", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/queryparser/ext/Extensions$Pair;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_EXTENSION_FIELD_DELIMITER = env->getStaticCharField(cls, "DEFAULT_EXTENSION_FIELD_DELIMITER");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Extensions::Extensions() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          Extensions::Extensions(jchar a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_87fd545a, a0)) {}

          void Extensions::add(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::ext::ParserExtension & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_add_d7d984b9], a0.this$, a1.this$);
          }

          ::java::lang::String Extensions::buildExtensionField(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_buildExtensionField_97a5258f], a0.this$));
          }

          ::java::lang::String Extensions::buildExtensionField(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_buildExtensionField_aacea7e9], a0.this$, a1.this$));
          }

          ::java::lang::String Extensions::escapeExtensionField(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_escapeExtensionField_97a5258f], a0.this$));
          }

          ::org::apache::lucene::queryparser::ext::ParserExtension Extensions::getExtension(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::queryparser::ext::ParserExtension(env->callObjectMethod(this$, mids$[mid_getExtension_a8956118], a0.this$));
          }

          jchar Extensions::getExtensionFieldDelimiter() const
          {
            return env->callCharMethod(this$, mids$[mid_getExtensionFieldDelimiter_54c6a173]);
          }

          ::org::apache::lucene::queryparser::ext::Extensions$Pair Extensions::splitExtensionField(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return ::org::apache::lucene::queryparser::ext::Extensions$Pair(env->callObjectMethod(this$, mids$[mid_splitExtensionField_7a9e9194], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace ext {
          static PyObject *t_Extensions_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Extensions_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Extensions_init_(t_Extensions *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Extensions_add(t_Extensions *self, PyObject *args);
          static PyObject *t_Extensions_buildExtensionField(t_Extensions *self, PyObject *args);
          static PyObject *t_Extensions_escapeExtensionField(t_Extensions *self, PyObject *arg);
          static PyObject *t_Extensions_getExtension(t_Extensions *self, PyObject *arg);
          static PyObject *t_Extensions_getExtensionFieldDelimiter(t_Extensions *self);
          static PyObject *t_Extensions_splitExtensionField(t_Extensions *self, PyObject *args);
          static PyObject *t_Extensions_get__extensionFieldDelimiter(t_Extensions *self, void *data);
          static PyGetSetDef t_Extensions__fields_[] = {
            DECLARE_GET_FIELD(t_Extensions, extensionFieldDelimiter),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Extensions__methods_[] = {
            DECLARE_METHOD(t_Extensions, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Extensions, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Extensions, add, METH_VARARGS),
            DECLARE_METHOD(t_Extensions, buildExtensionField, METH_VARARGS),
            DECLARE_METHOD(t_Extensions, escapeExtensionField, METH_O),
            DECLARE_METHOD(t_Extensions, getExtension, METH_O),
            DECLARE_METHOD(t_Extensions, getExtensionFieldDelimiter, METH_NOARGS),
            DECLARE_METHOD(t_Extensions, splitExtensionField, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Extensions, t_Extensions, ::java::lang::Object, Extensions, t_Extensions_init_, 0, 0, t_Extensions__fields_, 0, 0);

          void t_Extensions::install(PyObject *module)
          {
            installType(&PY_TYPE(Extensions), module, "Extensions", 0);
            PyDict_SetItemString(PY_TYPE(Extensions).tp_dict, "Pair", make_descriptor(&PY_TYPE(Extensions$Pair)));
          }

          void t_Extensions::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Extensions).tp_dict, "class_", make_descriptor(Extensions::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Extensions).tp_dict, "wrapfn_", make_descriptor(t_Extensions::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Extensions).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Extensions::initializeClass);
            PyDict_SetItemString(PY_TYPE(Extensions).tp_dict, "DEFAULT_EXTENSION_FIELD_DELIMITER", make_descriptor(Extensions::DEFAULT_EXTENSION_FIELD_DELIMITER));
          }

          static PyObject *t_Extensions_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Extensions::initializeClass, 1)))
              return NULL;
            return t_Extensions::wrap_Object(Extensions(((t_Extensions *) arg)->object.this$));
          }
          static PyObject *t_Extensions_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Extensions::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Extensions_init_(t_Extensions *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                Extensions object((jobject) NULL);

                INT_CALL(object = Extensions());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jchar a0;
                Extensions object((jobject) NULL);

                if (!parseArgs(args, "C", &a0))
                {
                  INT_CALL(object = Extensions(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Extensions_add(t_Extensions *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::queryparser::ext::ParserExtension a1((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::ext::ParserExtension::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.add(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "add", args);
            return NULL;
          }

          static PyObject *t_Extensions_buildExtensionField(t_Extensions *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = self->object.buildExtensionField(a0));
                  return j2p(result);
                }
              }
              break;
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "ss", &a0, &a1))
                {
                  OBJ_CALL(result = self->object.buildExtensionField(a0, a1));
                  return j2p(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "buildExtensionField", args);
            return NULL;
          }

          static PyObject *t_Extensions_escapeExtensionField(t_Extensions *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.escapeExtensionField(a0));
              return j2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "escapeExtensionField", arg);
            return NULL;
          }

          static PyObject *t_Extensions_getExtension(t_Extensions *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::queryparser::ext::ParserExtension result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getExtension(a0));
              return ::org::apache::lucene::queryparser::ext::t_ParserExtension::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getExtension", arg);
            return NULL;
          }

          static PyObject *t_Extensions_getExtensionFieldDelimiter(t_Extensions *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.getExtensionFieldDelimiter());
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }

          static PyObject *t_Extensions_splitExtensionField(t_Extensions *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::queryparser::ext::Extensions$Pair result((jobject) NULL);

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.splitExtensionField(a0, a1));
              return ::org::apache::lucene::queryparser::ext::t_Extensions$Pair::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
            }

            PyErr_SetArgsError((PyObject *) self, "splitExtensionField", args);
            return NULL;
          }

          static PyObject *t_Extensions_get__extensionFieldDelimiter(t_Extensions *self, void *data)
          {
            jchar value;
            OBJ_CALL(value = self->object.getExtensionFieldDelimiter());
            return PyUnicode_FromUnicode((Py_UNICODE *) &value, 1);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilterFactory.h"
#include "org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilter.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *HyphenatedWordsFilterFactory::class$ = NULL;
          jmethodID *HyphenatedWordsFilterFactory::mids$ = NULL;
          bool HyphenatedWordsFilterFactory::live$ = false;

          jclass HyphenatedWordsFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_4f2a8112] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HyphenatedWordsFilterFactory::HyphenatedWordsFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::miscellaneous::HyphenatedWordsFilter HyphenatedWordsFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::miscellaneous::HyphenatedWordsFilter(env->callObjectMethod(this$, mids$[mid_create_4f2a8112], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_HyphenatedWordsFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HyphenatedWordsFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HyphenatedWordsFilterFactory_init_(t_HyphenatedWordsFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HyphenatedWordsFilterFactory_create(t_HyphenatedWordsFilterFactory *self, PyObject *args);

          static PyMethodDef t_HyphenatedWordsFilterFactory__methods_[] = {
            DECLARE_METHOD(t_HyphenatedWordsFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HyphenatedWordsFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HyphenatedWordsFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HyphenatedWordsFilterFactory, t_HyphenatedWordsFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, HyphenatedWordsFilterFactory, t_HyphenatedWordsFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_HyphenatedWordsFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(HyphenatedWordsFilterFactory), module, "HyphenatedWordsFilterFactory", 0);
          }

          void t_HyphenatedWordsFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HyphenatedWordsFilterFactory).tp_dict, "class_", make_descriptor(HyphenatedWordsFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HyphenatedWordsFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_HyphenatedWordsFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HyphenatedWordsFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HyphenatedWordsFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HyphenatedWordsFilterFactory::initializeClass, 1)))
              return NULL;
            return t_HyphenatedWordsFilterFactory::wrap_Object(HyphenatedWordsFilterFactory(((t_HyphenatedWordsFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_HyphenatedWordsFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HyphenatedWordsFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HyphenatedWordsFilterFactory_init_(t_HyphenatedWordsFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            HyphenatedWordsFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = HyphenatedWordsFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HyphenatedWordsFilterFactory_create(t_HyphenatedWordsFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::miscellaneous::HyphenatedWordsFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::miscellaneous::t_HyphenatedWordsFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(HyphenatedWordsFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SearcherLifetimeManager.h"
#include "org/apache/lucene/search/SearcherLifetimeManager$Pruner.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/io/IOException.h"
#include "java/io/Closeable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SearcherLifetimeManager::class$ = NULL;
        jmethodID *SearcherLifetimeManager::mids$ = NULL;
        bool SearcherLifetimeManager::live$ = false;

        jclass SearcherLifetimeManager::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SearcherLifetimeManager");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_acquire_fc8f2eae] = env->getMethodID(cls, "acquire", "(J)Lorg/apache/lucene/search/IndexSearcher;");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_prune_da315acb] = env->getMethodID(cls, "prune", "(Lorg/apache/lucene/search/SearcherLifetimeManager$Pruner;)V");
            mids$[mid_record_474fe500] = env->getMethodID(cls, "record", "(Lorg/apache/lucene/search/IndexSearcher;)J");
            mids$[mid_release_474fe51c] = env->getMethodID(cls, "release", "(Lorg/apache/lucene/search/IndexSearcher;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SearcherLifetimeManager::SearcherLifetimeManager() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::search::IndexSearcher SearcherLifetimeManager::acquire(jlong a0) const
        {
          return ::org::apache::lucene::search::IndexSearcher(env->callObjectMethod(this$, mids$[mid_acquire_fc8f2eae], a0));
        }

        void SearcherLifetimeManager::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void SearcherLifetimeManager::prune(const ::org::apache::lucene::search::SearcherLifetimeManager$Pruner & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_prune_da315acb], a0.this$);
        }

        jlong SearcherLifetimeManager::record(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_record_474fe500], a0.this$);
        }

        void SearcherLifetimeManager::release(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_release_474fe51c], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/SearcherLifetimeManager$PruneByAge.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SearcherLifetimeManager_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SearcherLifetimeManager_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SearcherLifetimeManager_init_(t_SearcherLifetimeManager *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SearcherLifetimeManager_acquire(t_SearcherLifetimeManager *self, PyObject *arg);
        static PyObject *t_SearcherLifetimeManager_close(t_SearcherLifetimeManager *self);
        static PyObject *t_SearcherLifetimeManager_prune(t_SearcherLifetimeManager *self, PyObject *arg);
        static PyObject *t_SearcherLifetimeManager_record(t_SearcherLifetimeManager *self, PyObject *arg);
        static PyObject *t_SearcherLifetimeManager_release(t_SearcherLifetimeManager *self, PyObject *arg);

        static PyMethodDef t_SearcherLifetimeManager__methods_[] = {
          DECLARE_METHOD(t_SearcherLifetimeManager, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SearcherLifetimeManager, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SearcherLifetimeManager, acquire, METH_O),
          DECLARE_METHOD(t_SearcherLifetimeManager, close, METH_NOARGS),
          DECLARE_METHOD(t_SearcherLifetimeManager, prune, METH_O),
          DECLARE_METHOD(t_SearcherLifetimeManager, record, METH_O),
          DECLARE_METHOD(t_SearcherLifetimeManager, release, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SearcherLifetimeManager, t_SearcherLifetimeManager, ::java::lang::Object, SearcherLifetimeManager, t_SearcherLifetimeManager_init_, 0, 0, 0, 0, 0);

        void t_SearcherLifetimeManager::install(PyObject *module)
        {
          installType(&PY_TYPE(SearcherLifetimeManager), module, "SearcherLifetimeManager", 0);
          PyDict_SetItemString(PY_TYPE(SearcherLifetimeManager).tp_dict, "PruneByAge", make_descriptor(&PY_TYPE(SearcherLifetimeManager$PruneByAge)));
          PyDict_SetItemString(PY_TYPE(SearcherLifetimeManager).tp_dict, "Pruner", make_descriptor(&PY_TYPE(SearcherLifetimeManager$Pruner)));
        }

        void t_SearcherLifetimeManager::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SearcherLifetimeManager).tp_dict, "class_", make_descriptor(SearcherLifetimeManager::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SearcherLifetimeManager).tp_dict, "wrapfn_", make_descriptor(t_SearcherLifetimeManager::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SearcherLifetimeManager).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SearcherLifetimeManager_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SearcherLifetimeManager::initializeClass, 1)))
            return NULL;
          return t_SearcherLifetimeManager::wrap_Object(SearcherLifetimeManager(((t_SearcherLifetimeManager *) arg)->object.this$));
        }
        static PyObject *t_SearcherLifetimeManager_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SearcherLifetimeManager::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SearcherLifetimeManager_init_(t_SearcherLifetimeManager *self, PyObject *args, PyObject *kwds)
        {
          SearcherLifetimeManager object((jobject) NULL);

          INT_CALL(object = SearcherLifetimeManager());
          self->object = object;

          return 0;
        }

        static PyObject *t_SearcherLifetimeManager_acquire(t_SearcherLifetimeManager *self, PyObject *arg)
        {
          jlong a0;
          ::org::apache::lucene::search::IndexSearcher result((jobject) NULL);

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.acquire(a0));
            return ::org::apache::lucene::search::t_IndexSearcher::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "acquire", arg);
          return NULL;
        }

        static PyObject *t_SearcherLifetimeManager_close(t_SearcherLifetimeManager *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_SearcherLifetimeManager_prune(t_SearcherLifetimeManager *self, PyObject *arg)
        {
          ::org::apache::lucene::search::SearcherLifetimeManager$Pruner a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::SearcherLifetimeManager$Pruner::initializeClass, &a0))
          {
            OBJ_CALL(self->object.prune(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "prune", arg);
          return NULL;
        }

        static PyObject *t_SearcherLifetimeManager_record(t_SearcherLifetimeManager *self, PyObject *arg)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.record(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "record", arg);
          return NULL;
        }

        static PyObject *t_SearcherLifetimeManager_release(t_SearcherLifetimeManager *self, PyObject *arg)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(self->object.release(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "release", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Throwable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *IllegalStateException::class$ = NULL;
    jmethodID *IllegalStateException::mids$ = NULL;
    bool IllegalStateException::live$ = false;

    jclass IllegalStateException::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/IllegalStateException");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_c5ec8ca4] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;)V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_01646a2e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    IllegalStateException::IllegalStateException() : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    IllegalStateException::IllegalStateException(const ::java::lang::Throwable & a0) : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_c5ec8ca4, a0.this$)) {}

    IllegalStateException::IllegalStateException(const ::java::lang::String & a0) : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    IllegalStateException::IllegalStateException(const ::java::lang::String & a0, const ::java::lang::Throwable & a1) : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_01646a2e, a0.this$, a1.this$)) {}
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_IllegalStateException_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_IllegalStateException_instance_(PyTypeObject *type, PyObject *arg);
    static int t_IllegalStateException_init_(t_IllegalStateException *self, PyObject *args, PyObject *kwds);

    static PyMethodDef t_IllegalStateException__methods_[] = {
      DECLARE_METHOD(t_IllegalStateException, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_IllegalStateException, instance_, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(IllegalStateException, t_IllegalStateException, ::java::lang::RuntimeException, IllegalStateException, t_IllegalStateException_init_, 0, 0, 0, 0, 0);

    void t_IllegalStateException::install(PyObject *module)
    {
      installType(&PY_TYPE(IllegalStateException), module, "IllegalStateException", 0);
    }

    void t_IllegalStateException::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(IllegalStateException).tp_dict, "class_", make_descriptor(IllegalStateException::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(IllegalStateException).tp_dict, "wrapfn_", make_descriptor(t_IllegalStateException::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(IllegalStateException).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_IllegalStateException_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, IllegalStateException::initializeClass, 1)))
        return NULL;
      return t_IllegalStateException::wrap_Object(IllegalStateException(((t_IllegalStateException *) arg)->object.this$));
    }
    static PyObject *t_IllegalStateException_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, IllegalStateException::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_IllegalStateException_init_(t_IllegalStateException *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          IllegalStateException object((jobject) NULL);

          INT_CALL(object = IllegalStateException());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::lang::Throwable a0((jobject) NULL);
          IllegalStateException object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
          {
            INT_CALL(object = IllegalStateException(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          IllegalStateException object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = IllegalStateException(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Throwable a1((jobject) NULL);
          IllegalStateException object((jobject) NULL);

          if (!parseArgs(args, "sk", ::java::lang::Throwable::initializeClass, &a0, &a1))
          {
            INT_CALL(object = IllegalStateException(a0, a1));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedInts$Decoder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedInts$Decoder::class$ = NULL;
          jmethodID *PackedInts$Decoder::mids$ = NULL;
          bool PackedInts$Decoder::live$ = false;

          jclass PackedInts$Decoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedInts$Decoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_byteBlockCount_54c6a179] = env->getMethodID(cls, "byteBlockCount", "()I");
              mids$[mid_byteValueCount_54c6a179] = env->getMethodID(cls, "byteValueCount", "()I");
              mids$[mid_decode_d1f472ca] = env->getMethodID(cls, "decode", "([BI[JII)V");
              mids$[mid_decode_6b7ac502] = env->getMethodID(cls, "decode", "([JI[JII)V");
              mids$[mid_decode_9d91d181] = env->getMethodID(cls, "decode", "([BI[III)V");
              mids$[mid_decode_ff13be19] = env->getMethodID(cls, "decode", "([JI[III)V");
              mids$[mid_longBlockCount_54c6a179] = env->getMethodID(cls, "longBlockCount", "()I");
              mids$[mid_longValueCount_54c6a179] = env->getMethodID(cls, "longValueCount", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint PackedInts$Decoder::byteBlockCount() const
          {
            return env->callIntMethod(this$, mids$[mid_byteBlockCount_54c6a179]);
          }

          jint PackedInts$Decoder::byteValueCount() const
          {
            return env->callIntMethod(this$, mids$[mid_byteValueCount_54c6a179]);
          }

          void PackedInts$Decoder::decode(const JArray< jbyte > & a0, jint a1, const JArray< jlong > & a2, jint a3, jint a4) const
          {
            env->callVoidMethod(this$, mids$[mid_decode_d1f472ca], a0.this$, a1, a2.this$, a3, a4);
          }

          void PackedInts$Decoder::decode(const JArray< jlong > & a0, jint a1, const JArray< jlong > & a2, jint a3, jint a4) const
          {
            env->callVoidMethod(this$, mids$[mid_decode_6b7ac502], a0.this$, a1, a2.this$, a3, a4);
          }

          void PackedInts$Decoder::decode(const JArray< jbyte > & a0, jint a1, const JArray< jint > & a2, jint a3, jint a4) const
          {
            env->callVoidMethod(this$, mids$[mid_decode_9d91d181], a0.this$, a1, a2.this$, a3, a4);
          }

          void PackedInts$Decoder::decode(const JArray< jlong > & a0, jint a1, const JArray< jint > & a2, jint a3, jint a4) const
          {
            env->callVoidMethod(this$, mids$[mid_decode_ff13be19], a0.this$, a1, a2.this$, a3, a4);
          }

          jint PackedInts$Decoder::longBlockCount() const
          {
            return env->callIntMethod(this$, mids$[mid_longBlockCount_54c6a179]);
          }

          jint PackedInts$Decoder::longValueCount() const
          {
            return env->callIntMethod(this$, mids$[mid_longValueCount_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedInts$Decoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Decoder_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Decoder_byteBlockCount(t_PackedInts$Decoder *self);
          static PyObject *t_PackedInts$Decoder_byteValueCount(t_PackedInts$Decoder *self);
          static PyObject *t_PackedInts$Decoder_decode(t_PackedInts$Decoder *self, PyObject *args);
          static PyObject *t_PackedInts$Decoder_longBlockCount(t_PackedInts$Decoder *self);
          static PyObject *t_PackedInts$Decoder_longValueCount(t_PackedInts$Decoder *self);

          static PyMethodDef t_PackedInts$Decoder__methods_[] = {
            DECLARE_METHOD(t_PackedInts$Decoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Decoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Decoder, byteBlockCount, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$Decoder, byteValueCount, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$Decoder, decode, METH_VARARGS),
            DECLARE_METHOD(t_PackedInts$Decoder, longBlockCount, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$Decoder, longValueCount, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedInts$Decoder, t_PackedInts$Decoder, ::java::lang::Object, PackedInts$Decoder, abstract_init, 0, 0, 0, 0, 0);

          void t_PackedInts$Decoder::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedInts$Decoder), module, "PackedInts$Decoder", 0);
          }

          void t_PackedInts$Decoder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedInts$Decoder).tp_dict, "class_", make_descriptor(PackedInts$Decoder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedInts$Decoder).tp_dict, "wrapfn_", make_descriptor(t_PackedInts$Decoder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedInts$Decoder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedInts$Decoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedInts$Decoder::initializeClass, 1)))
              return NULL;
            return t_PackedInts$Decoder::wrap_Object(PackedInts$Decoder(((t_PackedInts$Decoder *) arg)->object.this$));
          }
          static PyObject *t_PackedInts$Decoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedInts$Decoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PackedInts$Decoder_byteBlockCount(t_PackedInts$Decoder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.byteBlockCount());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedInts$Decoder_byteValueCount(t_PackedInts$Decoder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.byteValueCount());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedInts$Decoder_decode(t_PackedInts$Decoder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 5:
              {
                JArray< jbyte > a0((jobject) NULL);
                jint a1;
                JArray< jlong > a2((jobject) NULL);
                jint a3;
                jint a4;

                if (!parseArgs(args, "[BI[JII", &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(self->object.decode(a0, a1, a2, a3, a4));
                  Py_RETURN_NONE;
                }
              }
              {
                JArray< jlong > a0((jobject) NULL);
                jint a1;
                JArray< jlong > a2((jobject) NULL);
                jint a3;
                jint a4;

                if (!parseArgs(args, "[JI[JII", &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(self->object.decode(a0, a1, a2, a3, a4));
                  Py_RETURN_NONE;
                }
              }
              {
                JArray< jbyte > a0((jobject) NULL);
                jint a1;
                JArray< jint > a2((jobject) NULL);
                jint a3;
                jint a4;

                if (!parseArgs(args, "[BI[III", &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(self->object.decode(a0, a1, a2, a3, a4));
                  Py_RETURN_NONE;
                }
              }
              {
                JArray< jlong > a0((jobject) NULL);
                jint a1;
                JArray< jint > a2((jobject) NULL);
                jint a3;
                jint a4;

                if (!parseArgs(args, "[JI[III", &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(self->object.decode(a0, a1, a2, a3, a4));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "decode", args);
            return NULL;
          }

          static PyObject *t_PackedInts$Decoder_longBlockCount(t_PackedInts$Decoder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.longBlockCount());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedInts$Decoder_longValueCount(t_PackedInts$Decoder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.longValueCount());
            return PyInt_FromLong((long) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/charfilter/MappingCharFilter.h"
#include "org/apache/lucene/analysis/charfilter/NormalizeCharMap.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {

          ::java::lang::Class *MappingCharFilter::class$ = NULL;
          jmethodID *MappingCharFilter::mids$ = NULL;
          bool MappingCharFilter::live$ = false;

          jclass MappingCharFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/charfilter/MappingCharFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0fc966df] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/charfilter/NormalizeCharMap;Ljava/io/Reader;)V");
              mids$[mid_read_54c6a179] = env->getMethodID(cls, "read", "()I");
              mids$[mid_read_6f0bb349] = env->getMethodID(cls, "read", "([CII)I");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MappingCharFilter::MappingCharFilter(const ::org::apache::lucene::analysis::charfilter::NormalizeCharMap & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::charfilter::BaseCharFilter(env->newObject(initializeClass, &mids$, mid_init$_0fc966df, a0.this$, a1.this$)) {}

          jint MappingCharFilter::read() const
          {
            return env->callIntMethod(this$, mids$[mid_read_54c6a179]);
          }

          jint MappingCharFilter::read(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return env->callIntMethod(this$, mids$[mid_read_6f0bb349], a0.this$, a1, a2);
          }

          void MappingCharFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {
          static PyObject *t_MappingCharFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MappingCharFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MappingCharFilter_init_(t_MappingCharFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MappingCharFilter_read(t_MappingCharFilter *self, PyObject *args);
          static PyObject *t_MappingCharFilter_reset(t_MappingCharFilter *self, PyObject *args);

          static PyMethodDef t_MappingCharFilter__methods_[] = {
            DECLARE_METHOD(t_MappingCharFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MappingCharFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MappingCharFilter, read, METH_VARARGS),
            DECLARE_METHOD(t_MappingCharFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MappingCharFilter, t_MappingCharFilter, ::org::apache::lucene::analysis::charfilter::BaseCharFilter, MappingCharFilter, t_MappingCharFilter_init_, 0, 0, 0, 0, 0);

          void t_MappingCharFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(MappingCharFilter), module, "MappingCharFilter", 0);
          }

          void t_MappingCharFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MappingCharFilter).tp_dict, "class_", make_descriptor(MappingCharFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MappingCharFilter).tp_dict, "wrapfn_", make_descriptor(t_MappingCharFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MappingCharFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MappingCharFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MappingCharFilter::initializeClass, 1)))
              return NULL;
            return t_MappingCharFilter::wrap_Object(MappingCharFilter(((t_MappingCharFilter *) arg)->object.this$));
          }
          static PyObject *t_MappingCharFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MappingCharFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MappingCharFilter_init_(t_MappingCharFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::charfilter::NormalizeCharMap a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            MappingCharFilter object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::charfilter::NormalizeCharMap::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              INT_CALL(object = MappingCharFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_MappingCharFilter_read(t_MappingCharFilter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jint result;
                OBJ_CALL(result = self->object.read());
                return PyInt_FromLong((long) result);
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;
                jint result;

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.read(a0, a1, a2));
                  return PyInt_FromLong((long) result);
                }
              }
            }

            return callSuper(&PY_TYPE(MappingCharFilter), (PyObject *) self, "read", args, 2);
          }

          static PyObject *t_MappingCharFilter_reset(t_MappingCharFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(MappingCharFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/CommandLineUtil.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Class.h"
#include "java/lang/InstantiationException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/NoSuchMethodException.h"
#include "java/io/File.h"
#include "org/apache/lucene/store/FSDirectory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *CommandLineUtil::class$ = NULL;
        jmethodID *CommandLineUtil::mids$ = NULL;
        bool CommandLineUtil::live$ = false;

        jclass CommandLineUtil::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/CommandLineUtil");

            mids$ = new jmethodID[max_mid];
            mids$[mid_loadDirectoryClass_7d663d97] = env->getStaticMethodID(cls, "loadDirectoryClass", "(Ljava/lang/String;)Ljava/lang/Class;");
            mids$[mid_loadFSDirectoryClass_7d663d97] = env->getStaticMethodID(cls, "loadFSDirectoryClass", "(Ljava/lang/String;)Ljava/lang/Class;");
            mids$[mid_newFSDirectory_96268b7b] = env->getStaticMethodID(cls, "newFSDirectory", "(Ljava/lang/Class;Ljava/io/File;)Lorg/apache/lucene/store/FSDirectory;");
            mids$[mid_newFSDirectory_75db4bef] = env->getStaticMethodID(cls, "newFSDirectory", "(Ljava/lang/String;Ljava/io/File;)Lorg/apache/lucene/store/FSDirectory;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::Class CommandLineUtil::loadDirectoryClass(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::Class(env->callStaticObjectMethod(cls, mids$[mid_loadDirectoryClass_7d663d97], a0.this$));
        }

        ::java::lang::Class CommandLineUtil::loadFSDirectoryClass(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::Class(env->callStaticObjectMethod(cls, mids$[mid_loadFSDirectoryClass_7d663d97], a0.this$));
        }

        ::org::apache::lucene::store::FSDirectory CommandLineUtil::newFSDirectory(const ::java::lang::Class & a0, const ::java::io::File & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::store::FSDirectory(env->callStaticObjectMethod(cls, mids$[mid_newFSDirectory_96268b7b], a0.this$, a1.this$));
        }

        ::org::apache::lucene::store::FSDirectory CommandLineUtil::newFSDirectory(const ::java::lang::String & a0, const ::java::io::File & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::store::FSDirectory(env->callStaticObjectMethod(cls, mids$[mid_newFSDirectory_75db4bef], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_CommandLineUtil_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CommandLineUtil_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CommandLineUtil_loadDirectoryClass(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CommandLineUtil_loadFSDirectoryClass(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CommandLineUtil_newFSDirectory(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_CommandLineUtil__methods_[] = {
          DECLARE_METHOD(t_CommandLineUtil, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CommandLineUtil, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CommandLineUtil, loadDirectoryClass, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CommandLineUtil, loadFSDirectoryClass, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CommandLineUtil, newFSDirectory, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CommandLineUtil, t_CommandLineUtil, ::java::lang::Object, CommandLineUtil, abstract_init, 0, 0, 0, 0, 0);

        void t_CommandLineUtil::install(PyObject *module)
        {
          installType(&PY_TYPE(CommandLineUtil), module, "CommandLineUtil", 0);
        }

        void t_CommandLineUtil::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CommandLineUtil).tp_dict, "class_", make_descriptor(CommandLineUtil::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CommandLineUtil).tp_dict, "wrapfn_", make_descriptor(t_CommandLineUtil::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CommandLineUtil).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CommandLineUtil_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CommandLineUtil::initializeClass, 1)))
            return NULL;
          return t_CommandLineUtil::wrap_Object(CommandLineUtil(((t_CommandLineUtil *) arg)->object.this$));
        }
        static PyObject *t_CommandLineUtil_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CommandLineUtil::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CommandLineUtil_loadDirectoryClass(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Class result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::CommandLineUtil::loadDirectoryClass(a0));
            return ::java::lang::t_Class::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "loadDirectoryClass", arg);
          return NULL;
        }

        static PyObject *t_CommandLineUtil_loadFSDirectoryClass(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Class result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::CommandLineUtil::loadFSDirectoryClass(a0));
            return ::java::lang::t_Class::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "loadFSDirectoryClass", arg);
          return NULL;
        }

        static PyObject *t_CommandLineUtil_newFSDirectory(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::Class a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::io::File a1((jobject) NULL);
              ::org::apache::lucene::store::FSDirectory result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::lang::Class::initializeClass, ::java::io::File::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::CommandLineUtil::newFSDirectory(a0, a1));
                return ::org::apache::lucene::store::t_FSDirectory::wrap_Object(result);
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::io::File a1((jobject) NULL);
              ::org::apache::lucene::store::FSDirectory result((jobject) NULL);

              if (!parseArgs(args, "sk", ::java::io::File::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::CommandLineUtil::newFSDirectory(a0, a1));
                return ::org::apache::lucene::store::t_FSDirectory::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "newFSDirectory", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ar/ArabicStemFilterFactory.h"
#include "org/apache/lucene/analysis/ar/ArabicStemFilter.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {

          ::java::lang::Class *ArabicStemFilterFactory::class$ = NULL;
          jmethodID *ArabicStemFilterFactory::mids$ = NULL;
          bool ArabicStemFilterFactory::live$ = false;

          jclass ArabicStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ar/ArabicStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_f95e0269] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/ar/ArabicStemFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ArabicStemFilterFactory::ArabicStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::ar::ArabicStemFilter ArabicStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::ar::ArabicStemFilter(env->callObjectMethod(this$, mids$[mid_create_f95e0269], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {
          static PyObject *t_ArabicStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ArabicStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ArabicStemFilterFactory_init_(t_ArabicStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ArabicStemFilterFactory_create(t_ArabicStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_ArabicStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ArabicStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ArabicStemFilterFactory, t_ArabicStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, ArabicStemFilterFactory, t_ArabicStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_ArabicStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ArabicStemFilterFactory), module, "ArabicStemFilterFactory", 0);
          }

          void t_ArabicStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ArabicStemFilterFactory).tp_dict, "class_", make_descriptor(ArabicStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ArabicStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_ArabicStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ArabicStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ArabicStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ArabicStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ArabicStemFilterFactory::wrap_Object(ArabicStemFilterFactory(((t_ArabicStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ArabicStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ArabicStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ArabicStemFilterFactory_init_(t_ArabicStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ArabicStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ArabicStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ArabicStemFilterFactory_create(t_ArabicStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::ar::ArabicStemFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::ar::t_ArabicStemFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ArabicStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TopScoreDocCollector.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/ScoreDoc.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TopScoreDocCollector::class$ = NULL;
        jmethodID *TopScoreDocCollector::mids$ = NULL;
        bool TopScoreDocCollector::live$ = false;

        jclass TopScoreDocCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TopScoreDocCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_create_ed0bbc86] = env->getStaticMethodID(cls, "create", "(IZ)Lorg/apache/lucene/search/TopScoreDocCollector;");
            mids$[mid_create_113a7b62] = env->getStaticMethodID(cls, "create", "(ILorg/apache/lucene/search/ScoreDoc;Z)Lorg/apache/lucene/search/TopScoreDocCollector;");
            mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
            mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");
            mids$[mid_newTopDocs_a5bceb12] = env->getMethodID(cls, "newTopDocs", "([Lorg/apache/lucene/search/ScoreDoc;I)Lorg/apache/lucene/search/TopDocs;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TopScoreDocCollector TopScoreDocCollector::create(jint a0, jboolean a1)
        {
          jclass cls = env->getClass(initializeClass);
          return TopScoreDocCollector(env->callStaticObjectMethod(cls, mids$[mid_create_ed0bbc86], a0, a1));
        }

        TopScoreDocCollector TopScoreDocCollector::create(jint a0, const ::org::apache::lucene::search::ScoreDoc & a1, jboolean a2)
        {
          jclass cls = env->getClass(initializeClass);
          return TopScoreDocCollector(env->callStaticObjectMethod(cls, mids$[mid_create_113a7b62], a0, a1.this$, a2));
        }

        void TopScoreDocCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
        }

        void TopScoreDocCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TopScoreDocCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopScoreDocCollector_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopScoreDocCollector_of_(t_TopScoreDocCollector *self, PyObject *args);
        static PyObject *t_TopScoreDocCollector_create(PyTypeObject *type, PyObject *args);
        static PyObject *t_TopScoreDocCollector_setNextReader(t_TopScoreDocCollector *self, PyObject *args);
        static PyObject *t_TopScoreDocCollector_setScorer(t_TopScoreDocCollector *self, PyObject *args);
        static int t_TopScoreDocCollector_set__nextReader(t_TopScoreDocCollector *self, PyObject *arg, void *data);
        static int t_TopScoreDocCollector_set__scorer(t_TopScoreDocCollector *self, PyObject *arg, void *data);
        static PyObject *t_TopScoreDocCollector_get__parameters_(t_TopScoreDocCollector *self, void *data);
        static PyGetSetDef t_TopScoreDocCollector__fields_[] = {
          DECLARE_SET_FIELD(t_TopScoreDocCollector, nextReader),
          DECLARE_SET_FIELD(t_TopScoreDocCollector, scorer),
          DECLARE_GET_FIELD(t_TopScoreDocCollector, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TopScoreDocCollector__methods_[] = {
          DECLARE_METHOD(t_TopScoreDocCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopScoreDocCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopScoreDocCollector, of_, METH_VARARGS),
          DECLARE_METHOD(t_TopScoreDocCollector, create, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_TopScoreDocCollector, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_TopScoreDocCollector, setScorer, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TopScoreDocCollector, t_TopScoreDocCollector, ::org::apache::lucene::search::TopDocsCollector, TopScoreDocCollector, abstract_init, 0, 0, t_TopScoreDocCollector__fields_, 0, 0);
        PyObject *t_TopScoreDocCollector::wrap_Object(const TopScoreDocCollector& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopScoreDocCollector::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopScoreDocCollector *self = (t_TopScoreDocCollector *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_TopScoreDocCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopScoreDocCollector::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopScoreDocCollector *self = (t_TopScoreDocCollector *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_TopScoreDocCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(TopScoreDocCollector), module, "TopScoreDocCollector", 0);
        }

        void t_TopScoreDocCollector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TopScoreDocCollector).tp_dict, "class_", make_descriptor(TopScoreDocCollector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TopScoreDocCollector).tp_dict, "wrapfn_", make_descriptor(t_TopScoreDocCollector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TopScoreDocCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TopScoreDocCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TopScoreDocCollector::initializeClass, 1)))
            return NULL;
          return t_TopScoreDocCollector::wrap_Object(TopScoreDocCollector(((t_TopScoreDocCollector *) arg)->object.this$));
        }
        static PyObject *t_TopScoreDocCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TopScoreDocCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TopScoreDocCollector_of_(t_TopScoreDocCollector *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_TopScoreDocCollector_create(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              jint a0;
              jboolean a1;
              TopScoreDocCollector result((jobject) NULL);

              if (!parseArgs(args, "IZ", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::TopScoreDocCollector::create(a0, a1));
                return t_TopScoreDocCollector::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              jint a0;
              ::org::apache::lucene::search::ScoreDoc a1((jobject) NULL);
              jboolean a2;
              TopScoreDocCollector result((jobject) NULL);

              if (!parseArgs(args, "IkZ", ::org::apache::lucene::search::ScoreDoc::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::TopScoreDocCollector::create(a0, a1, a2));
                return t_TopScoreDocCollector::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "create", args);
          return NULL;
        }

        static PyObject *t_TopScoreDocCollector_setNextReader(t_TopScoreDocCollector *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setNextReader(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TopScoreDocCollector), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_TopScoreDocCollector_setScorer(t_TopScoreDocCollector *self, PyObject *args)
        {
          ::org::apache::lucene::search::Scorer a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setScorer(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TopScoreDocCollector), (PyObject *) self, "setScorer", args, 2);
        }
        static PyObject *t_TopScoreDocCollector_get__parameters_(t_TopScoreDocCollector *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static int t_TopScoreDocCollector_set__nextReader(t_TopScoreDocCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_TopScoreDocCollector_set__scorer(t_TopScoreDocCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Scorer value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
            {
              INT_CALL(self->object.setScorer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "scorer", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MultiPhraseQuery.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Weight.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/util/Set.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MultiPhraseQuery::class$ = NULL;
        jmethodID *MultiPhraseQuery::mids$ = NULL;
        bool MultiPhraseQuery::live$ = false;

        jclass MultiPhraseQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MultiPhraseQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_c9f85e01] = env->getMethodID(cls, "add", "([Lorg/apache/lucene/index/Term;)V");
            mids$[mid_add_7eca6a81] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/index/Term;)V");
            mids$[mid_add_8f4de701] = env->getMethodID(cls, "add", "([Lorg/apache/lucene/index/Term;I)V");
            mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
            mids$[mid_getPositions_dab10e75] = env->getMethodID(cls, "getPositions", "()[I");
            mids$[mid_getSlop_54c6a179] = env->getMethodID(cls, "getSlop", "()I");
            mids$[mid_getTermArrays_87851566] = env->getMethodID(cls, "getTermArrays", "()Ljava/util/List;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_setSlop_39c7bd3c] = env->getMethodID(cls, "setSlop", "(I)V");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiPhraseQuery::MultiPhraseQuery() : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void MultiPhraseQuery::add(const JArray< ::org::apache::lucene::index::Term > & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_c9f85e01], a0.this$);
        }

        void MultiPhraseQuery::add(const ::org::apache::lucene::index::Term & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_7eca6a81], a0.this$);
        }

        void MultiPhraseQuery::add(const JArray< ::org::apache::lucene::index::Term > & a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_add_8f4de701], a0.this$, a1);
        }

        ::org::apache::lucene::search::Weight MultiPhraseQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
        }

        jboolean MultiPhraseQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void MultiPhraseQuery::extractTerms(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
        }

        JArray< jint > MultiPhraseQuery::getPositions() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getPositions_dab10e75]));
        }

        jint MultiPhraseQuery::getSlop() const
        {
          return env->callIntMethod(this$, mids$[mid_getSlop_54c6a179]);
        }

        ::java::util::List MultiPhraseQuery::getTermArrays() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getTermArrays_87851566]));
        }

        jint MultiPhraseQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::org::apache::lucene::search::Query MultiPhraseQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
        }

        void MultiPhraseQuery::setSlop(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setSlop_39c7bd3c], a0);
        }

        ::java::lang::String MultiPhraseQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MultiPhraseQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiPhraseQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiPhraseQuery_init_(t_MultiPhraseQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiPhraseQuery_add(t_MultiPhraseQuery *self, PyObject *args);
        static PyObject *t_MultiPhraseQuery_createWeight(t_MultiPhraseQuery *self, PyObject *args);
        static PyObject *t_MultiPhraseQuery_equals(t_MultiPhraseQuery *self, PyObject *args);
        static PyObject *t_MultiPhraseQuery_extractTerms(t_MultiPhraseQuery *self, PyObject *args);
        static PyObject *t_MultiPhraseQuery_getPositions(t_MultiPhraseQuery *self);
        static PyObject *t_MultiPhraseQuery_getSlop(t_MultiPhraseQuery *self);
        static PyObject *t_MultiPhraseQuery_getTermArrays(t_MultiPhraseQuery *self);
        static PyObject *t_MultiPhraseQuery_hashCode(t_MultiPhraseQuery *self, PyObject *args);
        static PyObject *t_MultiPhraseQuery_rewrite(t_MultiPhraseQuery *self, PyObject *args);
        static PyObject *t_MultiPhraseQuery_setSlop(t_MultiPhraseQuery *self, PyObject *arg);
        static PyObject *t_MultiPhraseQuery_toString(t_MultiPhraseQuery *self, PyObject *args);
        static PyObject *t_MultiPhraseQuery_get__positions(t_MultiPhraseQuery *self, void *data);
        static PyObject *t_MultiPhraseQuery_get__slop(t_MultiPhraseQuery *self, void *data);
        static int t_MultiPhraseQuery_set__slop(t_MultiPhraseQuery *self, PyObject *arg, void *data);
        static PyObject *t_MultiPhraseQuery_get__termArrays(t_MultiPhraseQuery *self, void *data);
        static PyGetSetDef t_MultiPhraseQuery__fields_[] = {
          DECLARE_GET_FIELD(t_MultiPhraseQuery, positions),
          DECLARE_GETSET_FIELD(t_MultiPhraseQuery, slop),
          DECLARE_GET_FIELD(t_MultiPhraseQuery, termArrays),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiPhraseQuery__methods_[] = {
          DECLARE_METHOD(t_MultiPhraseQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiPhraseQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiPhraseQuery, add, METH_VARARGS),
          DECLARE_METHOD(t_MultiPhraseQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_MultiPhraseQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_MultiPhraseQuery, extractTerms, METH_VARARGS),
          DECLARE_METHOD(t_MultiPhraseQuery, getPositions, METH_NOARGS),
          DECLARE_METHOD(t_MultiPhraseQuery, getSlop, METH_NOARGS),
          DECLARE_METHOD(t_MultiPhraseQuery, getTermArrays, METH_NOARGS),
          DECLARE_METHOD(t_MultiPhraseQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_MultiPhraseQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_MultiPhraseQuery, setSlop, METH_O),
          DECLARE_METHOD(t_MultiPhraseQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiPhraseQuery, t_MultiPhraseQuery, ::org::apache::lucene::search::Query, MultiPhraseQuery, t_MultiPhraseQuery_init_, 0, 0, t_MultiPhraseQuery__fields_, 0, 0);

        void t_MultiPhraseQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiPhraseQuery), module, "MultiPhraseQuery", 0);
        }

        void t_MultiPhraseQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiPhraseQuery).tp_dict, "class_", make_descriptor(MultiPhraseQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiPhraseQuery).tp_dict, "wrapfn_", make_descriptor(t_MultiPhraseQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiPhraseQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiPhraseQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiPhraseQuery::initializeClass, 1)))
            return NULL;
          return t_MultiPhraseQuery::wrap_Object(MultiPhraseQuery(((t_MultiPhraseQuery *) arg)->object.this$));
        }
        static PyObject *t_MultiPhraseQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiPhraseQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiPhraseQuery_init_(t_MultiPhraseQuery *self, PyObject *args, PyObject *kwds)
        {
          MultiPhraseQuery object((jobject) NULL);

          INT_CALL(object = MultiPhraseQuery());
          self->object = object;

          return 0;
        }

        static PyObject *t_MultiPhraseQuery_add(t_MultiPhraseQuery *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::org::apache::lucene::index::Term > a0((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                OBJ_CALL(self->object.add(a0));
                Py_RETURN_NONE;
              }
            }
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                OBJ_CALL(self->object.add(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              JArray< ::org::apache::lucene::index::Term > a0((jobject) NULL);
              jint a1;

              if (!parseArgs(args, "[kI", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.add(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "add", args);
          return NULL;
        }

        static PyObject *t_MultiPhraseQuery_createWeight(t_MultiPhraseQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.createWeight(a0));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiPhraseQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_MultiPhraseQuery_equals(t_MultiPhraseQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(MultiPhraseQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_MultiPhraseQuery_extractTerms(t_MultiPhraseQuery *self, PyObject *args)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.extractTerms(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(MultiPhraseQuery), (PyObject *) self, "extractTerms", args, 2);
        }

        static PyObject *t_MultiPhraseQuery_getPositions(t_MultiPhraseQuery *self)
        {
          JArray< jint > result((jobject) NULL);
          OBJ_CALL(result = self->object.getPositions());
          return result.wrap();
        }

        static PyObject *t_MultiPhraseQuery_getSlop(t_MultiPhraseQuery *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getSlop());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_MultiPhraseQuery_getTermArrays(t_MultiPhraseQuery *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.getTermArrays());
          return ::java::util::t_List::wrap_Object(result, &::java::lang::PY_TYPE(Object));
        }

        static PyObject *t_MultiPhraseQuery_hashCode(t_MultiPhraseQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiPhraseQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_MultiPhraseQuery_rewrite(t_MultiPhraseQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiPhraseQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_MultiPhraseQuery_setSlop(t_MultiPhraseQuery *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setSlop(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setSlop", arg);
          return NULL;
        }

        static PyObject *t_MultiPhraseQuery_toString(t_MultiPhraseQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(MultiPhraseQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_MultiPhraseQuery_get__positions(t_MultiPhraseQuery *self, void *data)
        {
          JArray< jint > value((jobject) NULL);
          OBJ_CALL(value = self->object.getPositions());
          return value.wrap();
        }

        static PyObject *t_MultiPhraseQuery_get__slop(t_MultiPhraseQuery *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getSlop());
          return PyInt_FromLong((long) value);
        }
        static int t_MultiPhraseQuery_set__slop(t_MultiPhraseQuery *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setSlop(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "slop", arg);
          return -1;
        }

        static PyObject *t_MultiPhraseQuery_get__termArrays(t_MultiPhraseQuery *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object.getTermArrays());
          return ::java::util::t_List::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/NumericTokenStream$NumericTermAttributeImpl.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/analysis/tokenattributes/TermToBytesRefAttribute.h"
#include "org/apache/lucene/analysis/NumericTokenStream$NumericTermAttribute.h"
#include "org/apache/lucene/util/AttributeReflector.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *NumericTokenStream$NumericTermAttributeImpl::class$ = NULL;
        jmethodID *NumericTokenStream$NumericTermAttributeImpl::mids$ = NULL;
        bool NumericTokenStream$NumericTermAttributeImpl::live$ = false;

        jclass NumericTokenStream$NumericTermAttributeImpl::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/NumericTokenStream$NumericTermAttributeImpl");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
            mids$[mid_fillBytesRef_54c6a166] = env->getMethodID(cls, "fillBytesRef", "()V");
            mids$[mid_getBytesRef_4ae19461] = env->getMethodID(cls, "getBytesRef", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getRawValue_54c6a17a] = env->getMethodID(cls, "getRawValue", "()J");
            mids$[mid_getShift_54c6a179] = env->getMethodID(cls, "getShift", "()I");
            mids$[mid_getValueSize_54c6a179] = env->getMethodID(cls, "getValueSize", "()I");
            mids$[mid_incShift_54c6a179] = env->getMethodID(cls, "incShift", "()I");
            mids$[mid_init_72e1d373] = env->getMethodID(cls, "init", "(JIII)V");
            mids$[mid_reflectWith_5f3f5102] = env->getMethodID(cls, "reflectWith", "(Lorg/apache/lucene/util/AttributeReflector;)V");
            mids$[mid_setShift_39c7bd3c] = env->getMethodID(cls, "setShift", "(I)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NumericTokenStream$NumericTermAttributeImpl::NumericTokenStream$NumericTermAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void NumericTokenStream$NumericTermAttributeImpl::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        void NumericTokenStream$NumericTermAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
        }

        void NumericTokenStream$NumericTermAttributeImpl::fillBytesRef() const
        {
          env->callVoidMethod(this$, mids$[mid_fillBytesRef_54c6a166]);
        }

        ::org::apache::lucene::util::BytesRef NumericTokenStream$NumericTermAttributeImpl::getBytesRef() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getBytesRef_4ae19461]));
        }

        jlong NumericTokenStream$NumericTermAttributeImpl::getRawValue() const
        {
          return env->callLongMethod(this$, mids$[mid_getRawValue_54c6a17a]);
        }

        jint NumericTokenStream$NumericTermAttributeImpl::getShift() const
        {
          return env->callIntMethod(this$, mids$[mid_getShift_54c6a179]);
        }

        jint NumericTokenStream$NumericTermAttributeImpl::getValueSize() const
        {
          return env->callIntMethod(this$, mids$[mid_getValueSize_54c6a179]);
        }

        jint NumericTokenStream$NumericTermAttributeImpl::incShift() const
        {
          return env->callIntMethod(this$, mids$[mid_incShift_54c6a179]);
        }

        void NumericTokenStream$NumericTermAttributeImpl::init(jlong a0, jint a1, jint a2, jint a3) const
        {
          env->callVoidMethod(this$, mids$[mid_init_72e1d373], a0, a1, a2, a3);
        }

        void NumericTokenStream$NumericTermAttributeImpl::reflectWith(const ::org::apache::lucene::util::AttributeReflector & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_reflectWith_5f3f5102], a0.this$);
        }

        void NumericTokenStream$NumericTermAttributeImpl::setShift(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setShift_39c7bd3c], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NumericTokenStream$NumericTermAttributeImpl_init_(t_NumericTokenStream$NumericTermAttributeImpl *self, PyObject *args, PyObject *kwds);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_clear(t_NumericTokenStream$NumericTermAttributeImpl *self, PyObject *args);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_copyTo(t_NumericTokenStream$NumericTermAttributeImpl *self, PyObject *args);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_fillBytesRef(t_NumericTokenStream$NumericTermAttributeImpl *self);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_getBytesRef(t_NumericTokenStream$NumericTermAttributeImpl *self);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_getRawValue(t_NumericTokenStream$NumericTermAttributeImpl *self);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_getShift(t_NumericTokenStream$NumericTermAttributeImpl *self);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_getValueSize(t_NumericTokenStream$NumericTermAttributeImpl *self);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_incShift(t_NumericTokenStream$NumericTermAttributeImpl *self);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_init(t_NumericTokenStream$NumericTermAttributeImpl *self, PyObject *args);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_reflectWith(t_NumericTokenStream$NumericTermAttributeImpl *self, PyObject *args);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_setShift(t_NumericTokenStream$NumericTermAttributeImpl *self, PyObject *arg);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_get__bytesRef(t_NumericTokenStream$NumericTermAttributeImpl *self, void *data);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_get__rawValue(t_NumericTokenStream$NumericTermAttributeImpl *self, void *data);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_get__shift(t_NumericTokenStream$NumericTermAttributeImpl *self, void *data);
        static int t_NumericTokenStream$NumericTermAttributeImpl_set__shift(t_NumericTokenStream$NumericTermAttributeImpl *self, PyObject *arg, void *data);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_get__valueSize(t_NumericTokenStream$NumericTermAttributeImpl *self, void *data);
        static PyGetSetDef t_NumericTokenStream$NumericTermAttributeImpl__fields_[] = {
          DECLARE_GET_FIELD(t_NumericTokenStream$NumericTermAttributeImpl, bytesRef),
          DECLARE_GET_FIELD(t_NumericTokenStream$NumericTermAttributeImpl, rawValue),
          DECLARE_GETSET_FIELD(t_NumericTokenStream$NumericTermAttributeImpl, shift),
          DECLARE_GET_FIELD(t_NumericTokenStream$NumericTermAttributeImpl, valueSize),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_NumericTokenStream$NumericTermAttributeImpl__methods_[] = {
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttributeImpl, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttributeImpl, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttributeImpl, clear, METH_VARARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttributeImpl, copyTo, METH_VARARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttributeImpl, fillBytesRef, METH_NOARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttributeImpl, getBytesRef, METH_NOARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttributeImpl, getRawValue, METH_NOARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttributeImpl, getShift, METH_NOARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttributeImpl, getValueSize, METH_NOARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttributeImpl, incShift, METH_NOARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttributeImpl, init, METH_VARARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttributeImpl, reflectWith, METH_VARARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttributeImpl, setShift, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NumericTokenStream$NumericTermAttributeImpl, t_NumericTokenStream$NumericTermAttributeImpl, ::org::apache::lucene::util::AttributeImpl, NumericTokenStream$NumericTermAttributeImpl, t_NumericTokenStream$NumericTermAttributeImpl_init_, 0, 0, t_NumericTokenStream$NumericTermAttributeImpl__fields_, 0, 0);

        void t_NumericTokenStream$NumericTermAttributeImpl::install(PyObject *module)
        {
          installType(&PY_TYPE(NumericTokenStream$NumericTermAttributeImpl), module, "NumericTokenStream$NumericTermAttributeImpl", 0);
        }

        void t_NumericTokenStream$NumericTermAttributeImpl::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NumericTokenStream$NumericTermAttributeImpl).tp_dict, "class_", make_descriptor(NumericTokenStream$NumericTermAttributeImpl::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NumericTokenStream$NumericTermAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_NumericTokenStream$NumericTermAttributeImpl::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NumericTokenStream$NumericTermAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NumericTokenStream$NumericTermAttributeImpl::initializeClass, 1)))
            return NULL;
          return t_NumericTokenStream$NumericTermAttributeImpl::wrap_Object(NumericTokenStream$NumericTermAttributeImpl(((t_NumericTokenStream$NumericTermAttributeImpl *) arg)->object.this$));
        }
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NumericTokenStream$NumericTermAttributeImpl::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NumericTokenStream$NumericTermAttributeImpl_init_(t_NumericTokenStream$NumericTermAttributeImpl *self, PyObject *args, PyObject *kwds)
        {
          NumericTokenStream$NumericTermAttributeImpl object((jobject) NULL);

          INT_CALL(object = NumericTokenStream$NumericTermAttributeImpl());
          self->object = object;

          return 0;
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_clear(t_NumericTokenStream$NumericTermAttributeImpl *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.clear());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NumericTokenStream$NumericTermAttributeImpl), (PyObject *) self, "clear", args, 2);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_copyTo(t_NumericTokenStream$NumericTermAttributeImpl *self, PyObject *args)
        {
          ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyTo(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NumericTokenStream$NumericTermAttributeImpl), (PyObject *) self, "copyTo", args, 2);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_fillBytesRef(t_NumericTokenStream$NumericTermAttributeImpl *self)
        {
          OBJ_CALL(self->object.fillBytesRef());
          Py_RETURN_NONE;
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_getBytesRef(t_NumericTokenStream$NumericTermAttributeImpl *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getBytesRef());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_getRawValue(t_NumericTokenStream$NumericTermAttributeImpl *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getRawValue());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_getShift(t_NumericTokenStream$NumericTermAttributeImpl *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getShift());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_getValueSize(t_NumericTokenStream$NumericTermAttributeImpl *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getValueSize());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_incShift(t_NumericTokenStream$NumericTermAttributeImpl *self)
        {
          jint result;
          OBJ_CALL(result = self->object.incShift());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_init(t_NumericTokenStream$NumericTermAttributeImpl *self, PyObject *args)
        {
          jlong a0;
          jint a1;
          jint a2;
          jint a3;

          if (!parseArgs(args, "JIII", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.init(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "init", args);
          return NULL;
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_reflectWith(t_NumericTokenStream$NumericTermAttributeImpl *self, PyObject *args)
        {
          ::org::apache::lucene::util::AttributeReflector a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeReflector::initializeClass, &a0))
          {
            OBJ_CALL(self->object.reflectWith(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NumericTokenStream$NumericTermAttributeImpl), (PyObject *) self, "reflectWith", args, 2);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_setShift(t_NumericTokenStream$NumericTermAttributeImpl *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setShift(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setShift", arg);
          return NULL;
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_get__bytesRef(t_NumericTokenStream$NumericTermAttributeImpl *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getBytesRef());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_get__rawValue(t_NumericTokenStream$NumericTermAttributeImpl *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getRawValue());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_get__shift(t_NumericTokenStream$NumericTermAttributeImpl *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getShift());
          return PyInt_FromLong((long) value);
        }
        static int t_NumericTokenStream$NumericTermAttributeImpl_set__shift(t_NumericTokenStream$NumericTermAttributeImpl *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setShift(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "shift", arg);
          return -1;
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_get__valueSize(t_NumericTokenStream$NumericTermAttributeImpl *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getValueSize());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *Bits::class$ = NULL;
        jmethodID *Bits::mids$ = NULL;
        bool Bits::live$ = false;
        JArray< Bits > *Bits::EMPTY_ARRAY = NULL;

        jclass Bits::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/Bits");

            mids$ = new jmethodID[max_mid];
            mids$[mid_get_39c7bd30] = env->getMethodID(cls, "get", "(I)Z");
            mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY_ARRAY = new JArray< Bits >(env->getStaticObjectField(cls, "EMPTY_ARRAY", "[Lorg/apache/lucene/util/Bits;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean Bits::get(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_get_39c7bd30], a0);
        }

        jint Bits::length() const
        {
          return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/Bits$MatchNoBits.h"
#include "org/apache/lucene/util/Bits$MatchAllBits.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_Bits_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Bits_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Bits_get(t_Bits *self, PyObject *arg);
        static PyObject *t_Bits_length(t_Bits *self);

        static PyMethodDef t_Bits__methods_[] = {
          DECLARE_METHOD(t_Bits, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Bits, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Bits, get, METH_O),
          DECLARE_METHOD(t_Bits, length, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Bits, t_Bits, ::java::lang::Object, Bits, abstract_init, 0, 0, 0, 0, 0);

        void t_Bits::install(PyObject *module)
        {
          installType(&PY_TYPE(Bits), module, "Bits", 0);
          PyDict_SetItemString(PY_TYPE(Bits).tp_dict, "MatchNoBits", make_descriptor(&PY_TYPE(Bits$MatchNoBits)));
          PyDict_SetItemString(PY_TYPE(Bits).tp_dict, "MatchAllBits", make_descriptor(&PY_TYPE(Bits$MatchAllBits)));
        }

        void t_Bits::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Bits).tp_dict, "class_", make_descriptor(Bits::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Bits).tp_dict, "wrapfn_", make_descriptor(t_Bits::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Bits).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(Bits::initializeClass);
          PyDict_SetItemString(PY_TYPE(Bits).tp_dict, "EMPTY_ARRAY", make_descriptor(JArray<jobject>(Bits::EMPTY_ARRAY->this$).wrap(t_Bits::wrap_jobject)));
        }

        static PyObject *t_Bits_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Bits::initializeClass, 1)))
            return NULL;
          return t_Bits::wrap_Object(Bits(((t_Bits *) arg)->object.this$));
        }
        static PyObject *t_Bits_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Bits::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Bits_get(t_Bits *self, PyObject *arg)
        {
          jint a0;
          jboolean result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_Bits_length(t_Bits *self)
        {
          jint result;
          OBJ_CALL(result = self->object.length());
          return PyInt_FromLong((long) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/BasicModelIF.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *BasicModelIF::class$ = NULL;
          jmethodID *BasicModelIF::mids$ = NULL;
          bool BasicModelIF::live$ = false;

          jclass BasicModelIF::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/BasicModelIF");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_score_076760a9] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;F)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BasicModelIF::BasicModelIF() : ::org::apache::lucene::search::similarities::BasicModel(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat BasicModelIF::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_076760a9], a0.this$, a1);
          }

          ::java::lang::String BasicModelIF::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_BasicModelIF_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicModelIF_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BasicModelIF_init_(t_BasicModelIF *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BasicModelIF_score(t_BasicModelIF *self, PyObject *args);
          static PyObject *t_BasicModelIF_toString(t_BasicModelIF *self, PyObject *args);

          static PyMethodDef t_BasicModelIF__methods_[] = {
            DECLARE_METHOD(t_BasicModelIF, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelIF, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelIF, score, METH_VARARGS),
            DECLARE_METHOD(t_BasicModelIF, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BasicModelIF, t_BasicModelIF, ::org::apache::lucene::search::similarities::BasicModel, BasicModelIF, t_BasicModelIF_init_, 0, 0, 0, 0, 0);

          void t_BasicModelIF::install(PyObject *module)
          {
            installType(&PY_TYPE(BasicModelIF), module, "BasicModelIF", 0);
          }

          void t_BasicModelIF::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BasicModelIF).tp_dict, "class_", make_descriptor(BasicModelIF::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BasicModelIF).tp_dict, "wrapfn_", make_descriptor(t_BasicModelIF::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BasicModelIF).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BasicModelIF_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BasicModelIF::initializeClass, 1)))
              return NULL;
            return t_BasicModelIF::wrap_Object(BasicModelIF(((t_BasicModelIF *) arg)->object.this$));
          }
          static PyObject *t_BasicModelIF_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BasicModelIF::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BasicModelIF_init_(t_BasicModelIF *self, PyObject *args, PyObject *kwds)
          {
            BasicModelIF object((jobject) NULL);

            INT_CALL(object = BasicModelIF());
            self->object = object;

            return 0;
          }

          static PyObject *t_BasicModelIF_score(t_BasicModelIF *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat result;

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(BasicModelIF), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_BasicModelIF_toString(t_BasicModelIF *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(BasicModelIF), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/StringDistance.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *StringDistance::class$ = NULL;
          jmethodID *StringDistance::mids$ = NULL;
          bool StringDistance::live$ = false;

          jclass StringDistance::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/StringDistance");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getDistance_4a264752] = env->getMethodID(cls, "getDistance", "(Ljava/lang/String;Ljava/lang/String;)F");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jfloat StringDistance::getDistance(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_getDistance_4a264752], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_StringDistance_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StringDistance_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StringDistance_getDistance(t_StringDistance *self, PyObject *args);

          static PyMethodDef t_StringDistance__methods_[] = {
            DECLARE_METHOD(t_StringDistance, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StringDistance, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StringDistance, getDistance, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StringDistance, t_StringDistance, ::java::lang::Object, StringDistance, abstract_init, 0, 0, 0, 0, 0);

          void t_StringDistance::install(PyObject *module)
          {
            installType(&PY_TYPE(StringDistance), module, "StringDistance", 0);
          }

          void t_StringDistance::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StringDistance).tp_dict, "class_", make_descriptor(StringDistance::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StringDistance).tp_dict, "wrapfn_", make_descriptor(t_StringDistance::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StringDistance).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StringDistance_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StringDistance::initializeClass, 1)))
              return NULL;
            return t_StringDistance::wrap_Object(StringDistance(((t_StringDistance *) arg)->object.this$));
          }
          static PyObject *t_StringDistance_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StringDistance::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_StringDistance_getDistance(t_StringDistance *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jfloat result;

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getDistance(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "getDistance", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FilterDirectoryReader$StandardReaderWrapper.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FilterDirectoryReader$StandardReaderWrapper::class$ = NULL;
        jmethodID *FilterDirectoryReader$StandardReaderWrapper::mids$ = NULL;
        bool FilterDirectoryReader$StandardReaderWrapper::live$ = false;

        jclass FilterDirectoryReader$StandardReaderWrapper::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FilterDirectoryReader$StandardReaderWrapper");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_wrap_3b1ad795] = env->getMethodID(cls, "wrap", "(Lorg/apache/lucene/index/AtomicReader;)Lorg/apache/lucene/index/AtomicReader;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterDirectoryReader$StandardReaderWrapper::FilterDirectoryReader$StandardReaderWrapper() : ::org::apache::lucene::index::FilterDirectoryReader$SubReaderWrapper(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::index::AtomicReader FilterDirectoryReader$StandardReaderWrapper::wrap(const ::org::apache::lucene::index::AtomicReader & a0) const
        {
          return ::org::apache::lucene::index::AtomicReader(env->callObjectMethod(this$, mids$[mid_wrap_3b1ad795], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FilterDirectoryReader$StandardReaderWrapper_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterDirectoryReader$StandardReaderWrapper_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterDirectoryReader$StandardReaderWrapper_of_(t_FilterDirectoryReader$StandardReaderWrapper *self, PyObject *args);
        static int t_FilterDirectoryReader$StandardReaderWrapper_init_(t_FilterDirectoryReader$StandardReaderWrapper *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterDirectoryReader$StandardReaderWrapper_wrap(t_FilterDirectoryReader$StandardReaderWrapper *self, PyObject *args);
        static PyObject *t_FilterDirectoryReader$StandardReaderWrapper_get__parameters_(t_FilterDirectoryReader$StandardReaderWrapper *self, void *data);
        static PyGetSetDef t_FilterDirectoryReader$StandardReaderWrapper__fields_[] = {
          DECLARE_GET_FIELD(t_FilterDirectoryReader$StandardReaderWrapper, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilterDirectoryReader$StandardReaderWrapper__methods_[] = {
          DECLARE_METHOD(t_FilterDirectoryReader$StandardReaderWrapper, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterDirectoryReader$StandardReaderWrapper, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterDirectoryReader$StandardReaderWrapper, of_, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectoryReader$StandardReaderWrapper, wrap, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilterDirectoryReader$StandardReaderWrapper, t_FilterDirectoryReader$StandardReaderWrapper, ::org::apache::lucene::index::FilterDirectoryReader$SubReaderWrapper, FilterDirectoryReader$StandardReaderWrapper, t_FilterDirectoryReader$StandardReaderWrapper_init_, 0, 0, t_FilterDirectoryReader$StandardReaderWrapper__fields_, 0, 0);
        PyObject *t_FilterDirectoryReader$StandardReaderWrapper::wrap_Object(const FilterDirectoryReader$StandardReaderWrapper& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FilterDirectoryReader$StandardReaderWrapper::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FilterDirectoryReader$StandardReaderWrapper *self = (t_FilterDirectoryReader$StandardReaderWrapper *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FilterDirectoryReader$StandardReaderWrapper::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FilterDirectoryReader$StandardReaderWrapper::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FilterDirectoryReader$StandardReaderWrapper *self = (t_FilterDirectoryReader$StandardReaderWrapper *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FilterDirectoryReader$StandardReaderWrapper::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterDirectoryReader$StandardReaderWrapper), module, "FilterDirectoryReader$StandardReaderWrapper", 0);
        }

        void t_FilterDirectoryReader$StandardReaderWrapper::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilterDirectoryReader$StandardReaderWrapper).tp_dict, "class_", make_descriptor(FilterDirectoryReader$StandardReaderWrapper::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilterDirectoryReader$StandardReaderWrapper).tp_dict, "wrapfn_", make_descriptor(t_FilterDirectoryReader$StandardReaderWrapper::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilterDirectoryReader$StandardReaderWrapper).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterDirectoryReader$StandardReaderWrapper_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterDirectoryReader$StandardReaderWrapper::initializeClass, 1)))
            return NULL;
          return t_FilterDirectoryReader$StandardReaderWrapper::wrap_Object(FilterDirectoryReader$StandardReaderWrapper(((t_FilterDirectoryReader$StandardReaderWrapper *) arg)->object.this$));
        }
        static PyObject *t_FilterDirectoryReader$StandardReaderWrapper_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterDirectoryReader$StandardReaderWrapper::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FilterDirectoryReader$StandardReaderWrapper_of_(t_FilterDirectoryReader$StandardReaderWrapper *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_FilterDirectoryReader$StandardReaderWrapper_init_(t_FilterDirectoryReader$StandardReaderWrapper *self, PyObject *args, PyObject *kwds)
        {
          FilterDirectoryReader$StandardReaderWrapper object((jobject) NULL);

          INT_CALL(object = FilterDirectoryReader$StandardReaderWrapper());
          self->object = object;
          self->parameters[0] = &::org::apache::lucene::index::PY_TYPE(AtomicReader);

          return 0;
        }

        static PyObject *t_FilterDirectoryReader$StandardReaderWrapper_wrap(t_FilterDirectoryReader$StandardReaderWrapper *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::org::apache::lucene::index::AtomicReader result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.wrap(a0));
            return ::org::apache::lucene::index::t_AtomicReader::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterDirectoryReader$StandardReaderWrapper), (PyObject *) self, "wrap", args, 2);
        }
        static PyObject *t_FilterDirectoryReader$StandardReaderWrapper_get__parameters_(t_FilterDirectoryReader$StandardReaderWrapper *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *DocsAndPositionsEnum::class$ = NULL;
        jmethodID *DocsAndPositionsEnum::mids$ = NULL;
        bool DocsAndPositionsEnum::live$ = false;
        jint DocsAndPositionsEnum::FLAG_OFFSETS = (jint) 0;
        jint DocsAndPositionsEnum::FLAG_PAYLOADS = (jint) 0;

        jclass DocsAndPositionsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/DocsAndPositionsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_endOffset_54c6a179] = env->getMethodID(cls, "endOffset", "()I");
            mids$[mid_getPayload_4ae19461] = env->getMethodID(cls, "getPayload", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_nextPosition_54c6a179] = env->getMethodID(cls, "nextPosition", "()I");
            mids$[mid_startOffset_54c6a179] = env->getMethodID(cls, "startOffset", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            FLAG_OFFSETS = env->getStaticIntField(cls, "FLAG_OFFSETS");
            FLAG_PAYLOADS = env->getStaticIntField(cls, "FLAG_PAYLOADS");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint DocsAndPositionsEnum::endOffset() const
        {
          return env->callIntMethod(this$, mids$[mid_endOffset_54c6a179]);
        }

        ::org::apache::lucene::util::BytesRef DocsAndPositionsEnum::getPayload() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getPayload_4ae19461]));
        }

        jint DocsAndPositionsEnum::nextPosition() const
        {
          return env->callIntMethod(this$, mids$[mid_nextPosition_54c6a179]);
        }

        jint DocsAndPositionsEnum::startOffset() const
        {
          return env->callIntMethod(this$, mids$[mid_startOffset_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_DocsAndPositionsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocsAndPositionsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocsAndPositionsEnum_endOffset(t_DocsAndPositionsEnum *self);
        static PyObject *t_DocsAndPositionsEnum_getPayload(t_DocsAndPositionsEnum *self);
        static PyObject *t_DocsAndPositionsEnum_nextPosition(t_DocsAndPositionsEnum *self);
        static PyObject *t_DocsAndPositionsEnum_startOffset(t_DocsAndPositionsEnum *self);
        static PyObject *t_DocsAndPositionsEnum_get__payload(t_DocsAndPositionsEnum *self, void *data);
        static PyGetSetDef t_DocsAndPositionsEnum__fields_[] = {
          DECLARE_GET_FIELD(t_DocsAndPositionsEnum, payload),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DocsAndPositionsEnum__methods_[] = {
          DECLARE_METHOD(t_DocsAndPositionsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocsAndPositionsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocsAndPositionsEnum, endOffset, METH_NOARGS),
          DECLARE_METHOD(t_DocsAndPositionsEnum, getPayload, METH_NOARGS),
          DECLARE_METHOD(t_DocsAndPositionsEnum, nextPosition, METH_NOARGS),
          DECLARE_METHOD(t_DocsAndPositionsEnum, startOffset, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DocsAndPositionsEnum, t_DocsAndPositionsEnum, ::org::apache::lucene::index::DocsEnum, DocsAndPositionsEnum, abstract_init, 0, 0, t_DocsAndPositionsEnum__fields_, 0, 0);

        void t_DocsAndPositionsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(DocsAndPositionsEnum), module, "DocsAndPositionsEnum", 0);
        }

        void t_DocsAndPositionsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DocsAndPositionsEnum).tp_dict, "class_", make_descriptor(DocsAndPositionsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DocsAndPositionsEnum).tp_dict, "wrapfn_", make_descriptor(t_DocsAndPositionsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DocsAndPositionsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(DocsAndPositionsEnum::initializeClass);
          PyDict_SetItemString(PY_TYPE(DocsAndPositionsEnum).tp_dict, "FLAG_OFFSETS", make_descriptor(DocsAndPositionsEnum::FLAG_OFFSETS));
          PyDict_SetItemString(PY_TYPE(DocsAndPositionsEnum).tp_dict, "FLAG_PAYLOADS", make_descriptor(DocsAndPositionsEnum::FLAG_PAYLOADS));
        }

        static PyObject *t_DocsAndPositionsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocsAndPositionsEnum::initializeClass, 1)))
            return NULL;
          return t_DocsAndPositionsEnum::wrap_Object(DocsAndPositionsEnum(((t_DocsAndPositionsEnum *) arg)->object.this$));
        }
        static PyObject *t_DocsAndPositionsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocsAndPositionsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DocsAndPositionsEnum_endOffset(t_DocsAndPositionsEnum *self)
        {
          jint result;
          OBJ_CALL(result = self->object.endOffset());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_DocsAndPositionsEnum_getPayload(t_DocsAndPositionsEnum *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getPayload());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_DocsAndPositionsEnum_nextPosition(t_DocsAndPositionsEnum *self)
        {
          jint result;
          OBJ_CALL(result = self->object.nextPosition());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_DocsAndPositionsEnum_startOffset(t_DocsAndPositionsEnum *self)
        {
          jint result;
          OBJ_CALL(result = self->object.startOffset());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_DocsAndPositionsEnum_get__payload(t_DocsAndPositionsEnum *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getPayload());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/QueryTermExtractor.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/highlight/WeightedTerm.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *QueryTermExtractor::class$ = NULL;
          jmethodID *QueryTermExtractor::mids$ = NULL;
          bool QueryTermExtractor::live$ = false;

          jclass QueryTermExtractor::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/QueryTermExtractor");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getIdfWeightedTerms_90fb48ad] = env->getStaticMethodID(cls, "getIdfWeightedTerms", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)[Lorg/apache/lucene/search/highlight/WeightedTerm;");
              mids$[mid_getTerms_ec0cbfa8] = env->getStaticMethodID(cls, "getTerms", "(Lorg/apache/lucene/search/Query;)[Lorg/apache/lucene/search/highlight/WeightedTerm;");
              mids$[mid_getTerms_6d5da3e1] = env->getStaticMethodID(cls, "getTerms", "(Lorg/apache/lucene/search/Query;Z)[Lorg/apache/lucene/search/highlight/WeightedTerm;");
              mids$[mid_getTerms_ac3fa253] = env->getStaticMethodID(cls, "getTerms", "(Lorg/apache/lucene/search/Query;ZLjava/lang/String;)[Lorg/apache/lucene/search/highlight/WeightedTerm;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          QueryTermExtractor::QueryTermExtractor() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          JArray< ::org::apache::lucene::search::highlight::WeightedTerm > QueryTermExtractor::getIdfWeightedTerms(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::index::IndexReader & a1, const ::java::lang::String & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< ::org::apache::lucene::search::highlight::WeightedTerm >(env->callStaticObjectMethod(cls, mids$[mid_getIdfWeightedTerms_90fb48ad], a0.this$, a1.this$, a2.this$));
          }

          JArray< ::org::apache::lucene::search::highlight::WeightedTerm > QueryTermExtractor::getTerms(const ::org::apache::lucene::search::Query & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< ::org::apache::lucene::search::highlight::WeightedTerm >(env->callStaticObjectMethod(cls, mids$[mid_getTerms_ec0cbfa8], a0.this$));
          }

          JArray< ::org::apache::lucene::search::highlight::WeightedTerm > QueryTermExtractor::getTerms(const ::org::apache::lucene::search::Query & a0, jboolean a1)
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< ::org::apache::lucene::search::highlight::WeightedTerm >(env->callStaticObjectMethod(cls, mids$[mid_getTerms_6d5da3e1], a0.this$, a1));
          }

          JArray< ::org::apache::lucene::search::highlight::WeightedTerm > QueryTermExtractor::getTerms(const ::org::apache::lucene::search::Query & a0, jboolean a1, const ::java::lang::String & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< ::org::apache::lucene::search::highlight::WeightedTerm >(env->callStaticObjectMethod(cls, mids$[mid_getTerms_ac3fa253], a0.this$, a1, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_QueryTermExtractor_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryTermExtractor_instance_(PyTypeObject *type, PyObject *arg);
          static int t_QueryTermExtractor_init_(t_QueryTermExtractor *self, PyObject *args, PyObject *kwds);
          static PyObject *t_QueryTermExtractor_getIdfWeightedTerms(PyTypeObject *type, PyObject *args);
          static PyObject *t_QueryTermExtractor_getTerms(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_QueryTermExtractor__methods_[] = {
            DECLARE_METHOD(t_QueryTermExtractor, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryTermExtractor, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryTermExtractor, getIdfWeightedTerms, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_QueryTermExtractor, getTerms, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(QueryTermExtractor, t_QueryTermExtractor, ::java::lang::Object, QueryTermExtractor, t_QueryTermExtractor_init_, 0, 0, 0, 0, 0);

          void t_QueryTermExtractor::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryTermExtractor), module, "QueryTermExtractor", 0);
          }

          void t_QueryTermExtractor::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(QueryTermExtractor).tp_dict, "class_", make_descriptor(QueryTermExtractor::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(QueryTermExtractor).tp_dict, "wrapfn_", make_descriptor(t_QueryTermExtractor::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(QueryTermExtractor).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_QueryTermExtractor_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryTermExtractor::initializeClass, 1)))
              return NULL;
            return t_QueryTermExtractor::wrap_Object(QueryTermExtractor(((t_QueryTermExtractor *) arg)->object.this$));
          }
          static PyObject *t_QueryTermExtractor_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryTermExtractor::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_QueryTermExtractor_init_(t_QueryTermExtractor *self, PyObject *args, PyObject *kwds)
          {
            QueryTermExtractor object((jobject) NULL);

            INT_CALL(object = QueryTermExtractor());
            self->object = object;

            return 0;
          }

          static PyObject *t_QueryTermExtractor_getIdfWeightedTerms(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::search::Query a0((jobject) NULL);
            ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            JArray< ::org::apache::lucene::search::highlight::WeightedTerm > result((jobject) NULL);

            if (!parseArgs(args, "kks", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::highlight::QueryTermExtractor::getIdfWeightedTerms(a0, a1, a2));
              return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::highlight::t_WeightedTerm::wrap_jobject);
            }

            PyErr_SetArgsError(type, "getIdfWeightedTerms", args);
            return NULL;
          }

          static PyObject *t_QueryTermExtractor_getTerms(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                JArray< ::org::apache::lucene::search::highlight::WeightedTerm > result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::highlight::QueryTermExtractor::getTerms(a0));
                  return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::highlight::t_WeightedTerm::wrap_jobject);
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                jboolean a1;
                JArray< ::org::apache::lucene::search::highlight::WeightedTerm > result((jobject) NULL);

                if (!parseArgs(args, "kZ", ::org::apache::lucene::search::Query::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::highlight::QueryTermExtractor::getTerms(a0, a1));
                  return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::highlight::t_WeightedTerm::wrap_jobject);
                }
              }
              break;
             case 3:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                jboolean a1;
                ::java::lang::String a2((jobject) NULL);
                JArray< ::org::apache::lucene::search::highlight::WeightedTerm > result((jobject) NULL);

                if (!parseArgs(args, "kZs", ::org::apache::lucene::search::Query::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::highlight::QueryTermExtractor::getTerms(a0, a1, a2));
                  return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::highlight::t_WeightedTerm::wrap_jobject);
                }
              }
            }

            PyErr_SetArgsError(type, "getTerms", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/MonotonicBlockPackedWriter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *MonotonicBlockPackedWriter::class$ = NULL;
          jmethodID *MonotonicBlockPackedWriter::mids$ = NULL;
          bool MonotonicBlockPackedWriter::live$ = false;

          jclass MonotonicBlockPackedWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/MonotonicBlockPackedWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f4663c33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/DataOutput;I)V");
              mids$[mid_add_0ee6df2f] = env->getMethodID(cls, "add", "(J)V");
              mids$[mid_flush_54c6a166] = env->getMethodID(cls, "flush", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MonotonicBlockPackedWriter::MonotonicBlockPackedWriter(const ::org::apache::lucene::store::DataOutput & a0, jint a1) : ::org::apache::lucene::util::packed::AbstractBlockPackedWriter(env->newObject(initializeClass, &mids$, mid_init$_f4663c33, a0.this$, a1)) {}

          void MonotonicBlockPackedWriter::add(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_add_0ee6df2f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_MonotonicBlockPackedWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MonotonicBlockPackedWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MonotonicBlockPackedWriter_init_(t_MonotonicBlockPackedWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MonotonicBlockPackedWriter_add(t_MonotonicBlockPackedWriter *self, PyObject *args);

          static PyMethodDef t_MonotonicBlockPackedWriter__methods_[] = {
            DECLARE_METHOD(t_MonotonicBlockPackedWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MonotonicBlockPackedWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MonotonicBlockPackedWriter, add, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MonotonicBlockPackedWriter, t_MonotonicBlockPackedWriter, ::org::apache::lucene::util::packed::AbstractBlockPackedWriter, MonotonicBlockPackedWriter, t_MonotonicBlockPackedWriter_init_, 0, 0, 0, 0, 0);

          void t_MonotonicBlockPackedWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(MonotonicBlockPackedWriter), module, "MonotonicBlockPackedWriter", 0);
          }

          void t_MonotonicBlockPackedWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MonotonicBlockPackedWriter).tp_dict, "class_", make_descriptor(MonotonicBlockPackedWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MonotonicBlockPackedWriter).tp_dict, "wrapfn_", make_descriptor(t_MonotonicBlockPackedWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MonotonicBlockPackedWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MonotonicBlockPackedWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MonotonicBlockPackedWriter::initializeClass, 1)))
              return NULL;
            return t_MonotonicBlockPackedWriter::wrap_Object(MonotonicBlockPackedWriter(((t_MonotonicBlockPackedWriter *) arg)->object.this$));
          }
          static PyObject *t_MonotonicBlockPackedWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MonotonicBlockPackedWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MonotonicBlockPackedWriter_init_(t_MonotonicBlockPackedWriter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
            jint a1;
            MonotonicBlockPackedWriter object((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
            {
              INT_CALL(object = MonotonicBlockPackedWriter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_MonotonicBlockPackedWriter_add(t_MonotonicBlockPackedWriter *self, PyObject *args)
          {
            jlong a0;

            if (!parseArgs(args, "J", &a0))
            {
              OBJ_CALL(self->object.add(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(MonotonicBlockPackedWriter), (PyObject *) self, "add", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/std40/StandardTokenizerImpl40.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizerInterface.h"
#include "java/io/Reader.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          namespace std40 {

            ::java::lang::Class *StandardTokenizerImpl40::class$ = NULL;
            jmethodID *StandardTokenizerImpl40::mids$ = NULL;
            bool StandardTokenizerImpl40::live$ = false;
            jint StandardTokenizerImpl40::HANGUL_TYPE = (jint) 0;
            jint StandardTokenizerImpl40::HIRAGANA_TYPE = (jint) 0;
            jint StandardTokenizerImpl40::IDEOGRAPHIC_TYPE = (jint) 0;
            jint StandardTokenizerImpl40::KATAKANA_TYPE = (jint) 0;
            jint StandardTokenizerImpl40::NUMERIC_TYPE = (jint) 0;
            jint StandardTokenizerImpl40::SOUTH_EAST_ASIAN_TYPE = (jint) 0;
            jint StandardTokenizerImpl40::WORD_TYPE = (jint) 0;
            jint StandardTokenizerImpl40::YYEOF = (jint) 0;
            jint StandardTokenizerImpl40::YYINITIAL = (jint) 0;

            jclass StandardTokenizerImpl40::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/std40/StandardTokenizerImpl40");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                mids$[mid_getNextToken_54c6a179] = env->getMethodID(cls, "getNextToken", "()I");
                mids$[mid_getText_64c709f2] = env->getMethodID(cls, "getText", "(Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;)V");
                mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
                mids$[mid_yychar_54c6a179] = env->getMethodID(cls, "yychar", "()I");
                mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
                mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
                mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
                mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
                mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
                mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
                mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                HANGUL_TYPE = env->getStaticIntField(cls, "HANGUL_TYPE");
                HIRAGANA_TYPE = env->getStaticIntField(cls, "HIRAGANA_TYPE");
                IDEOGRAPHIC_TYPE = env->getStaticIntField(cls, "IDEOGRAPHIC_TYPE");
                KATAKANA_TYPE = env->getStaticIntField(cls, "KATAKANA_TYPE");
                NUMERIC_TYPE = env->getStaticIntField(cls, "NUMERIC_TYPE");
                SOUTH_EAST_ASIAN_TYPE = env->getStaticIntField(cls, "SOUTH_EAST_ASIAN_TYPE");
                WORD_TYPE = env->getStaticIntField(cls, "WORD_TYPE");
                YYEOF = env->getStaticIntField(cls, "YYEOF");
                YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            StandardTokenizerImpl40::StandardTokenizerImpl40(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

            jint StandardTokenizerImpl40::getNextToken() const
            {
              return env->callIntMethod(this$, mids$[mid_getNextToken_54c6a179]);
            }

            void StandardTokenizerImpl40::getText(const ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_getText_64c709f2], a0.this$);
            }

            void StandardTokenizerImpl40::yybegin(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
            }

            jint StandardTokenizerImpl40::yychar() const
            {
              return env->callIntMethod(this$, mids$[mid_yychar_54c6a179]);
            }

            jchar StandardTokenizerImpl40::yycharat(jint a0) const
            {
              return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
            }

            void StandardTokenizerImpl40::yyclose() const
            {
              env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
            }

            jint StandardTokenizerImpl40::yylength() const
            {
              return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
            }

            void StandardTokenizerImpl40::yypushback(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
            }

            void StandardTokenizerImpl40::yyreset(const ::java::io::Reader & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
            }

            jint StandardTokenizerImpl40::yystate() const
            {
              return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
            }

            ::java::lang::String StandardTokenizerImpl40::yytext() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          namespace std40 {
            static PyObject *t_StandardTokenizerImpl40_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl40_instance_(PyTypeObject *type, PyObject *arg);
            static int t_StandardTokenizerImpl40_init_(t_StandardTokenizerImpl40 *self, PyObject *args, PyObject *kwds);
            static PyObject *t_StandardTokenizerImpl40_getNextToken(t_StandardTokenizerImpl40 *self);
            static PyObject *t_StandardTokenizerImpl40_getText(t_StandardTokenizerImpl40 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl40_yybegin(t_StandardTokenizerImpl40 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl40_yychar(t_StandardTokenizerImpl40 *self);
            static PyObject *t_StandardTokenizerImpl40_yycharat(t_StandardTokenizerImpl40 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl40_yyclose(t_StandardTokenizerImpl40 *self);
            static PyObject *t_StandardTokenizerImpl40_yylength(t_StandardTokenizerImpl40 *self);
            static PyObject *t_StandardTokenizerImpl40_yypushback(t_StandardTokenizerImpl40 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl40_yyreset(t_StandardTokenizerImpl40 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl40_yystate(t_StandardTokenizerImpl40 *self);
            static PyObject *t_StandardTokenizerImpl40_yytext(t_StandardTokenizerImpl40 *self);
            static PyObject *t_StandardTokenizerImpl40_get__nextToken(t_StandardTokenizerImpl40 *self, void *data);
            static PyGetSetDef t_StandardTokenizerImpl40__fields_[] = {
              DECLARE_GET_FIELD(t_StandardTokenizerImpl40, nextToken),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_StandardTokenizerImpl40__methods_[] = {
              DECLARE_METHOD(t_StandardTokenizerImpl40, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_StandardTokenizerImpl40, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_StandardTokenizerImpl40, getNextToken, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl40, getText, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl40, yybegin, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl40, yychar, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl40, yycharat, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl40, yyclose, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl40, yylength, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl40, yypushback, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl40, yyreset, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl40, yystate, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl40, yytext, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(StandardTokenizerImpl40, t_StandardTokenizerImpl40, ::java::lang::Object, StandardTokenizerImpl40, t_StandardTokenizerImpl40_init_, 0, 0, t_StandardTokenizerImpl40__fields_, 0, 0);

            void t_StandardTokenizerImpl40::install(PyObject *module)
            {
              installType(&PY_TYPE(StandardTokenizerImpl40), module, "StandardTokenizerImpl40", 0);
            }

            void t_StandardTokenizerImpl40::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl40).tp_dict, "class_", make_descriptor(StandardTokenizerImpl40::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl40).tp_dict, "wrapfn_", make_descriptor(t_StandardTokenizerImpl40::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl40).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(StandardTokenizerImpl40::initializeClass);
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl40).tp_dict, "HANGUL_TYPE", make_descriptor(StandardTokenizerImpl40::HANGUL_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl40).tp_dict, "HIRAGANA_TYPE", make_descriptor(StandardTokenizerImpl40::HIRAGANA_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl40).tp_dict, "IDEOGRAPHIC_TYPE", make_descriptor(StandardTokenizerImpl40::IDEOGRAPHIC_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl40).tp_dict, "KATAKANA_TYPE", make_descriptor(StandardTokenizerImpl40::KATAKANA_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl40).tp_dict, "NUMERIC_TYPE", make_descriptor(StandardTokenizerImpl40::NUMERIC_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl40).tp_dict, "SOUTH_EAST_ASIAN_TYPE", make_descriptor(StandardTokenizerImpl40::SOUTH_EAST_ASIAN_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl40).tp_dict, "WORD_TYPE", make_descriptor(StandardTokenizerImpl40::WORD_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl40).tp_dict, "YYEOF", make_descriptor(StandardTokenizerImpl40::YYEOF));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl40).tp_dict, "YYINITIAL", make_descriptor(StandardTokenizerImpl40::YYINITIAL));
            }

            static PyObject *t_StandardTokenizerImpl40_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, StandardTokenizerImpl40::initializeClass, 1)))
                return NULL;
              return t_StandardTokenizerImpl40::wrap_Object(StandardTokenizerImpl40(((t_StandardTokenizerImpl40 *) arg)->object.this$));
            }
            static PyObject *t_StandardTokenizerImpl40_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, StandardTokenizerImpl40::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_StandardTokenizerImpl40_init_(t_StandardTokenizerImpl40 *self, PyObject *args, PyObject *kwds)
            {
              ::java::io::Reader a0((jobject) NULL);
              StandardTokenizerImpl40 object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
              {
                INT_CALL(object = StandardTokenizerImpl40(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_StandardTokenizerImpl40_getNextToken(t_StandardTokenizerImpl40 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getNextToken());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_StandardTokenizerImpl40_getText(t_StandardTokenizerImpl40 *self, PyObject *arg)
            {
              ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute::initializeClass, &a0))
              {
                OBJ_CALL(self->object.getText(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "getText", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl40_yybegin(t_StandardTokenizerImpl40 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.yybegin(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl40_yychar(t_StandardTokenizerImpl40 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yychar());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_StandardTokenizerImpl40_yycharat(t_StandardTokenizerImpl40 *self, PyObject *arg)
            {
              jint a0;
              jchar result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.yycharat(a0));
                return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
              }

              PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl40_yyclose(t_StandardTokenizerImpl40 *self)
            {
              OBJ_CALL(self->object.yyclose());
              Py_RETURN_NONE;
            }

            static PyObject *t_StandardTokenizerImpl40_yylength(t_StandardTokenizerImpl40 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yylength());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_StandardTokenizerImpl40_yypushback(t_StandardTokenizerImpl40 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.yypushback(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl40_yyreset(t_StandardTokenizerImpl40 *self, PyObject *arg)
            {
              ::java::io::Reader a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
              {
                OBJ_CALL(self->object.yyreset(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl40_yystate(t_StandardTokenizerImpl40 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yystate());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_StandardTokenizerImpl40_yytext(t_StandardTokenizerImpl40 *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.yytext());
              return j2p(result);
            }

            static PyObject *t_StandardTokenizerImpl40_get__nextToken(t_StandardTokenizerImpl40 *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getNextToken());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ckb/SoraniAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {

          ::java::lang::Class *SoraniAnalyzer::class$ = NULL;
          jmethodID *SoraniAnalyzer::mids$ = NULL;
          bool SoraniAnalyzer::live$ = false;
          ::java::lang::String *SoraniAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass SoraniAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ckb/SoraniAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SoraniAnalyzer::SoraniAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          SoraniAnalyzer::SoraniAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          SoraniAnalyzer::SoraniAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet SoraniAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {
          static PyObject *t_SoraniAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SoraniAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SoraniAnalyzer_init_(t_SoraniAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SoraniAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_SoraniAnalyzer_get__defaultStopSet(t_SoraniAnalyzer *self, void *data);
          static PyGetSetDef t_SoraniAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_SoraniAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SoraniAnalyzer__methods_[] = {
            DECLARE_METHOD(t_SoraniAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SoraniAnalyzer, t_SoraniAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, SoraniAnalyzer, t_SoraniAnalyzer_init_, 0, 0, t_SoraniAnalyzer__fields_, 0, 0);

          void t_SoraniAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(SoraniAnalyzer), module, "SoraniAnalyzer", 0);
          }

          void t_SoraniAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SoraniAnalyzer).tp_dict, "class_", make_descriptor(SoraniAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SoraniAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_SoraniAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SoraniAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SoraniAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(SoraniAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*SoraniAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_SoraniAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SoraniAnalyzer::initializeClass, 1)))
              return NULL;
            return t_SoraniAnalyzer::wrap_Object(SoraniAnalyzer(((t_SoraniAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_SoraniAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SoraniAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SoraniAnalyzer_init_(t_SoraniAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                SoraniAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = SoraniAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                SoraniAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = SoraniAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                SoraniAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = SoraniAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SoraniAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::ckb::SoraniAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_SoraniAnalyzer_get__defaultStopSet(t_SoraniAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/FileSwitchDirectory.h"
#include "java/io/IOException.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *FileSwitchDirectory::class$ = NULL;
        jmethodID *FileSwitchDirectory::mids$ = NULL;
        bool FileSwitchDirectory::live$ = false;

        jclass FileSwitchDirectory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/FileSwitchDirectory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4575167f] = env->getMethodID(cls, "<init>", "(Ljava/util/Set;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/store/Directory;Z)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_createOutput_5ad5358d] = env->getMethodID(cls, "createOutput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_deleteFile_5fdc3f48] = env->getMethodID(cls, "deleteFile", "(Ljava/lang/String;)V");
            mids$[mid_fileExists_5fdc3f44] = env->getMethodID(cls, "fileExists", "(Ljava/lang/String;)Z");
            mids$[mid_fileLength_5fdc3f54] = env->getMethodID(cls, "fileLength", "(Ljava/lang/String;)J");
            mids$[mid_getExtension_97a5258f] = env->getStaticMethodID(cls, "getExtension", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_getPrimaryDir_1f3934bb] = env->getMethodID(cls, "getPrimaryDir", "()Lorg/apache/lucene/store/Directory;");
            mids$[mid_getSecondaryDir_1f3934bb] = env->getMethodID(cls, "getSecondaryDir", "()Lorg/apache/lucene/store/Directory;");
            mids$[mid_listAll_2e6d5245] = env->getMethodID(cls, "listAll", "()[Ljava/lang/String;");
            mids$[mid_openInput_3e1b5375] = env->getMethodID(cls, "openInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_sync_9bfb370d] = env->getMethodID(cls, "sync", "(Ljava/util/Collection;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FileSwitchDirectory::FileSwitchDirectory(const ::java::util::Set & a0, const ::org::apache::lucene::store::Directory & a1, const ::org::apache::lucene::store::Directory & a2, jboolean a3) : ::org::apache::lucene::store::BaseDirectory(env->newObject(initializeClass, &mids$, mid_init$_4575167f, a0.this$, a1.this$, a2.this$, a3)) {}

        void FileSwitchDirectory::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        ::org::apache::lucene::store::IndexOutput FileSwitchDirectory::createOutput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexOutput(env->callObjectMethod(this$, mids$[mid_createOutput_5ad5358d], a0.this$, a1.this$));
        }

        void FileSwitchDirectory::deleteFile(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_deleteFile_5fdc3f48], a0.this$);
        }

        jboolean FileSwitchDirectory::fileExists(const ::java::lang::String & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_fileExists_5fdc3f44], a0.this$);
        }

        jlong FileSwitchDirectory::fileLength(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_fileLength_5fdc3f54], a0.this$);
        }

        ::java::lang::String FileSwitchDirectory::getExtension(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getExtension_97a5258f], a0.this$));
        }

        ::org::apache::lucene::store::Directory FileSwitchDirectory::getPrimaryDir() const
        {
          return ::org::apache::lucene::store::Directory(env->callObjectMethod(this$, mids$[mid_getPrimaryDir_1f3934bb]));
        }

        ::org::apache::lucene::store::Directory FileSwitchDirectory::getSecondaryDir() const
        {
          return ::org::apache::lucene::store::Directory(env->callObjectMethod(this$, mids$[mid_getSecondaryDir_1f3934bb]));
        }

        JArray< ::java::lang::String > FileSwitchDirectory::listAll() const
        {
          return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_listAll_2e6d5245]));
        }

        ::org::apache::lucene::store::IndexInput FileSwitchDirectory::openInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_openInput_3e1b5375], a0.this$, a1.this$));
        }

        void FileSwitchDirectory::sync(const ::java::util::Collection & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_sync_9bfb370d], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_FileSwitchDirectory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FileSwitchDirectory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FileSwitchDirectory_init_(t_FileSwitchDirectory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FileSwitchDirectory_close(t_FileSwitchDirectory *self, PyObject *args);
        static PyObject *t_FileSwitchDirectory_createOutput(t_FileSwitchDirectory *self, PyObject *args);
        static PyObject *t_FileSwitchDirectory_deleteFile(t_FileSwitchDirectory *self, PyObject *args);
        static PyObject *t_FileSwitchDirectory_fileExists(t_FileSwitchDirectory *self, PyObject *args);
        static PyObject *t_FileSwitchDirectory_fileLength(t_FileSwitchDirectory *self, PyObject *args);
        static PyObject *t_FileSwitchDirectory_getExtension(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FileSwitchDirectory_getPrimaryDir(t_FileSwitchDirectory *self);
        static PyObject *t_FileSwitchDirectory_getSecondaryDir(t_FileSwitchDirectory *self);
        static PyObject *t_FileSwitchDirectory_listAll(t_FileSwitchDirectory *self, PyObject *args);
        static PyObject *t_FileSwitchDirectory_openInput(t_FileSwitchDirectory *self, PyObject *args);
        static PyObject *t_FileSwitchDirectory_sync(t_FileSwitchDirectory *self, PyObject *args);
        static PyObject *t_FileSwitchDirectory_get__primaryDir(t_FileSwitchDirectory *self, void *data);
        static PyObject *t_FileSwitchDirectory_get__secondaryDir(t_FileSwitchDirectory *self, void *data);
        static PyGetSetDef t_FileSwitchDirectory__fields_[] = {
          DECLARE_GET_FIELD(t_FileSwitchDirectory, primaryDir),
          DECLARE_GET_FIELD(t_FileSwitchDirectory, secondaryDir),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FileSwitchDirectory__methods_[] = {
          DECLARE_METHOD(t_FileSwitchDirectory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FileSwitchDirectory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FileSwitchDirectory, close, METH_VARARGS),
          DECLARE_METHOD(t_FileSwitchDirectory, createOutput, METH_VARARGS),
          DECLARE_METHOD(t_FileSwitchDirectory, deleteFile, METH_VARARGS),
          DECLARE_METHOD(t_FileSwitchDirectory, fileExists, METH_VARARGS),
          DECLARE_METHOD(t_FileSwitchDirectory, fileLength, METH_VARARGS),
          DECLARE_METHOD(t_FileSwitchDirectory, getExtension, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FileSwitchDirectory, getPrimaryDir, METH_NOARGS),
          DECLARE_METHOD(t_FileSwitchDirectory, getSecondaryDir, METH_NOARGS),
          DECLARE_METHOD(t_FileSwitchDirectory, listAll, METH_VARARGS),
          DECLARE_METHOD(t_FileSwitchDirectory, openInput, METH_VARARGS),
          DECLARE_METHOD(t_FileSwitchDirectory, sync, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FileSwitchDirectory, t_FileSwitchDirectory, ::org::apache::lucene::store::BaseDirectory, FileSwitchDirectory, t_FileSwitchDirectory_init_, 0, 0, t_FileSwitchDirectory__fields_, 0, 0);

        void t_FileSwitchDirectory::install(PyObject *module)
        {
          installType(&PY_TYPE(FileSwitchDirectory), module, "FileSwitchDirectory", 0);
        }

        void t_FileSwitchDirectory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FileSwitchDirectory).tp_dict, "class_", make_descriptor(FileSwitchDirectory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FileSwitchDirectory).tp_dict, "wrapfn_", make_descriptor(t_FileSwitchDirectory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FileSwitchDirectory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FileSwitchDirectory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FileSwitchDirectory::initializeClass, 1)))
            return NULL;
          return t_FileSwitchDirectory::wrap_Object(FileSwitchDirectory(((t_FileSwitchDirectory *) arg)->object.this$));
        }
        static PyObject *t_FileSwitchDirectory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FileSwitchDirectory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FileSwitchDirectory_init_(t_FileSwitchDirectory *self, PyObject *args, PyObject *kwds)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::store::Directory a1((jobject) NULL);
          ::org::apache::lucene::store::Directory a2((jobject) NULL);
          jboolean a3;
          FileSwitchDirectory object((jobject) NULL);

          if (!parseArgs(args, "KkkZ", ::java::util::Set::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_, &a1, &a2, &a3))
          {
            INT_CALL(object = FileSwitchDirectory(a0, a1, a2, a3));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FileSwitchDirectory_close(t_FileSwitchDirectory *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FileSwitchDirectory), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_FileSwitchDirectory_createOutput(t_FileSwitchDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexOutput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.createOutput(a0, a1));
            return ::org::apache::lucene::store::t_IndexOutput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FileSwitchDirectory), (PyObject *) self, "createOutput", args, 2);
        }

        static PyObject *t_FileSwitchDirectory_deleteFile(t_FileSwitchDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.deleteFile(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FileSwitchDirectory), (PyObject *) self, "deleteFile", args, 2);
        }

        static PyObject *t_FileSwitchDirectory_fileExists(t_FileSwitchDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileExists(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FileSwitchDirectory), (PyObject *) self, "fileExists", args, 2);
        }

        static PyObject *t_FileSwitchDirectory_fileLength(t_FileSwitchDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileLength(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FileSwitchDirectory), (PyObject *) self, "fileLength", args, 2);
        }

        static PyObject *t_FileSwitchDirectory_getExtension(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::store::FileSwitchDirectory::getExtension(a0));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "getExtension", arg);
          return NULL;
        }

        static PyObject *t_FileSwitchDirectory_getPrimaryDir(t_FileSwitchDirectory *self)
        {
          ::org::apache::lucene::store::Directory result((jobject) NULL);
          OBJ_CALL(result = self->object.getPrimaryDir());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(result);
        }

        static PyObject *t_FileSwitchDirectory_getSecondaryDir(t_FileSwitchDirectory *self)
        {
          ::org::apache::lucene::store::Directory result((jobject) NULL);
          OBJ_CALL(result = self->object.getSecondaryDir());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(result);
        }

        static PyObject *t_FileSwitchDirectory_listAll(t_FileSwitchDirectory *self, PyObject *args)
        {
          JArray< ::java::lang::String > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.listAll());
            return JArray<jstring>(result.this$).wrap();
          }

          return callSuper(&PY_TYPE(FileSwitchDirectory), (PyObject *) self, "listAll", args, 2);
        }

        static PyObject *t_FileSwitchDirectory_openInput(t_FileSwitchDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.openInput(a0, a1));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FileSwitchDirectory), (PyObject *) self, "openInput", args, 2);
        }

        static PyObject *t_FileSwitchDirectory_sync(t_FileSwitchDirectory *self, PyObject *args)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(self->object.sync(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FileSwitchDirectory), (PyObject *) self, "sync", args, 2);
        }

        static PyObject *t_FileSwitchDirectory_get__primaryDir(t_FileSwitchDirectory *self, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          OBJ_CALL(value = self->object.getPrimaryDir());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
        }

        static PyObject *t_FileSwitchDirectory_get__secondaryDir(t_FileSwitchDirectory *self, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          OBJ_CALL(value = self->object.getSecondaryDir());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/BufferedInputIterator.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *BufferedInputIterator::class$ = NULL;
          jmethodID *BufferedInputIterator::mids$ = NULL;
          bool BufferedInputIterator::live$ = false;

          jclass BufferedInputIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/BufferedInputIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_1754a234] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/suggest/InputIterator;)V");
              mids$[mid_contexts_03e99967] = env->getMethodID(cls, "contexts", "()Ljava/util/Set;");
              mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
              mids$[mid_hasContexts_54c6a16a] = env->getMethodID(cls, "hasContexts", "()Z");
              mids$[mid_hasPayloads_54c6a16a] = env->getMethodID(cls, "hasPayloads", "()Z");
              mids$[mid_next_4ae19461] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_payload_4ae19461] = env->getMethodID(cls, "payload", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_weight_54c6a17a] = env->getMethodID(cls, "weight", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BufferedInputIterator::BufferedInputIterator(const ::org::apache::lucene::search::suggest::InputIterator & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_1754a234, a0.this$)) {}

          ::java::util::Set BufferedInputIterator::contexts() const
          {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_contexts_03e99967]));
          }

          ::java::util::Comparator BufferedInputIterator::getComparator() const
          {
            return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
          }

          jboolean BufferedInputIterator::hasContexts() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasContexts_54c6a16a]);
          }

          jboolean BufferedInputIterator::hasPayloads() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasPayloads_54c6a16a]);
          }

          ::org::apache::lucene::util::BytesRef BufferedInputIterator::next() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_4ae19461]));
          }

          ::org::apache::lucene::util::BytesRef BufferedInputIterator::payload() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_payload_4ae19461]));
          }

          jlong BufferedInputIterator::weight() const
          {
            return env->callLongMethod(this$, mids$[mid_weight_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_BufferedInputIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BufferedInputIterator_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BufferedInputIterator_init_(t_BufferedInputIterator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BufferedInputIterator_contexts(t_BufferedInputIterator *self);
          static PyObject *t_BufferedInputIterator_getComparator(t_BufferedInputIterator *self);
          static PyObject *t_BufferedInputIterator_hasContexts(t_BufferedInputIterator *self);
          static PyObject *t_BufferedInputIterator_hasPayloads(t_BufferedInputIterator *self);
          static PyObject *t_BufferedInputIterator_next(t_BufferedInputIterator *self);
          static PyObject *t_BufferedInputIterator_payload(t_BufferedInputIterator *self);
          static PyObject *t_BufferedInputIterator_weight(t_BufferedInputIterator *self);
          static PyObject *t_BufferedInputIterator_get__comparator(t_BufferedInputIterator *self, void *data);
          static PyGetSetDef t_BufferedInputIterator__fields_[] = {
            DECLARE_GET_FIELD(t_BufferedInputIterator, comparator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BufferedInputIterator__methods_[] = {
            DECLARE_METHOD(t_BufferedInputIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BufferedInputIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BufferedInputIterator, contexts, METH_NOARGS),
            DECLARE_METHOD(t_BufferedInputIterator, getComparator, METH_NOARGS),
            DECLARE_METHOD(t_BufferedInputIterator, hasContexts, METH_NOARGS),
            DECLARE_METHOD(t_BufferedInputIterator, hasPayloads, METH_NOARGS),
            DECLARE_METHOD(t_BufferedInputIterator, next, METH_NOARGS),
            DECLARE_METHOD(t_BufferedInputIterator, payload, METH_NOARGS),
            DECLARE_METHOD(t_BufferedInputIterator, weight, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BufferedInputIterator, t_BufferedInputIterator, ::java::lang::Object, BufferedInputIterator, t_BufferedInputIterator_init_, PyObject_SelfIter, ((PyObject *(*)(t_BufferedInputIterator *)) get_next< t_BufferedInputIterator,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >), t_BufferedInputIterator__fields_, 0, 0);

          void t_BufferedInputIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(BufferedInputIterator), module, "BufferedInputIterator", 0);
          }

          void t_BufferedInputIterator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BufferedInputIterator).tp_dict, "class_", make_descriptor(BufferedInputIterator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BufferedInputIterator).tp_dict, "wrapfn_", make_descriptor(t_BufferedInputIterator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BufferedInputIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BufferedInputIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BufferedInputIterator::initializeClass, 1)))
              return NULL;
            return t_BufferedInputIterator::wrap_Object(BufferedInputIterator(((t_BufferedInputIterator *) arg)->object.this$));
          }
          static PyObject *t_BufferedInputIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BufferedInputIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BufferedInputIterator_init_(t_BufferedInputIterator *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);
            BufferedInputIterator object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0))
            {
              INT_CALL(object = BufferedInputIterator(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BufferedInputIterator_contexts(t_BufferedInputIterator *self)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = self->object.contexts());
            return ::java::util::t_Set::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          static PyObject *t_BufferedInputIterator_getComparator(t_BufferedInputIterator *self)
          {
            ::java::util::Comparator result((jobject) NULL);
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          static PyObject *t_BufferedInputIterator_hasContexts(t_BufferedInputIterator *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.hasContexts());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_BufferedInputIterator_hasPayloads(t_BufferedInputIterator *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.hasPayloads());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_BufferedInputIterator_next(t_BufferedInputIterator *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_BufferedInputIterator_payload(t_BufferedInputIterator *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.payload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_BufferedInputIterator_weight(t_BufferedInputIterator *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.weight());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_BufferedInputIterator_get__comparator(t_BufferedInputIterator *self, void *data)
          {
            ::java::util::Comparator value((jobject) NULL);
            OBJ_CALL(value = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/LevenshteinAutomata.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *LevenshteinAutomata::class$ = NULL;
          jmethodID *LevenshteinAutomata::mids$ = NULL;
          bool LevenshteinAutomata::live$ = false;
          jint LevenshteinAutomata::MAXIMUM_SUPPORTED_DISTANCE = (jint) 0;

          jclass LevenshteinAutomata::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/LevenshteinAutomata");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f3691645] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Z)V");
              mids$[mid_init$_1525174f] = env->getMethodID(cls, "<init>", "([IIZ)V");
              mids$[mid_toAutomaton_d5b8a843] = env->getMethodID(cls, "toAutomaton", "(I)Lorg/apache/lucene/util/automaton/Automaton;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              MAXIMUM_SUPPORTED_DISTANCE = env->getStaticIntField(cls, "MAXIMUM_SUPPORTED_DISTANCE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LevenshteinAutomata::LevenshteinAutomata(const ::java::lang::String & a0, jboolean a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f3691645, a0.this$, a1)) {}

          LevenshteinAutomata::LevenshteinAutomata(const JArray< jint > & a0, jint a1, jboolean a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_1525174f, a0.this$, a1, a2)) {}

          ::org::apache::lucene::util::automaton::Automaton LevenshteinAutomata::toAutomaton(jint a0) const
          {
            return ::org::apache::lucene::util::automaton::Automaton(env->callObjectMethod(this$, mids$[mid_toAutomaton_d5b8a843], a0));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_LevenshteinAutomata_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LevenshteinAutomata_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LevenshteinAutomata_init_(t_LevenshteinAutomata *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LevenshteinAutomata_toAutomaton(t_LevenshteinAutomata *self, PyObject *arg);

          static PyMethodDef t_LevenshteinAutomata__methods_[] = {
            DECLARE_METHOD(t_LevenshteinAutomata, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LevenshteinAutomata, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LevenshteinAutomata, toAutomaton, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LevenshteinAutomata, t_LevenshteinAutomata, ::java::lang::Object, LevenshteinAutomata, t_LevenshteinAutomata_init_, 0, 0, 0, 0, 0);

          void t_LevenshteinAutomata::install(PyObject *module)
          {
            installType(&PY_TYPE(LevenshteinAutomata), module, "LevenshteinAutomata", 0);
          }

          void t_LevenshteinAutomata::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LevenshteinAutomata).tp_dict, "class_", make_descriptor(LevenshteinAutomata::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LevenshteinAutomata).tp_dict, "wrapfn_", make_descriptor(t_LevenshteinAutomata::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LevenshteinAutomata).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(LevenshteinAutomata::initializeClass);
            PyDict_SetItemString(PY_TYPE(LevenshteinAutomata).tp_dict, "MAXIMUM_SUPPORTED_DISTANCE", make_descriptor(LevenshteinAutomata::MAXIMUM_SUPPORTED_DISTANCE));
          }

          static PyObject *t_LevenshteinAutomata_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LevenshteinAutomata::initializeClass, 1)))
              return NULL;
            return t_LevenshteinAutomata::wrap_Object(LevenshteinAutomata(((t_LevenshteinAutomata *) arg)->object.this$));
          }
          static PyObject *t_LevenshteinAutomata_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LevenshteinAutomata::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LevenshteinAutomata_init_(t_LevenshteinAutomata *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                jboolean a1;
                LevenshteinAutomata object((jobject) NULL);

                if (!parseArgs(args, "sZ", &a0, &a1))
                {
                  INT_CALL(object = LevenshteinAutomata(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                JArray< jint > a0((jobject) NULL);
                jint a1;
                jboolean a2;
                LevenshteinAutomata object((jobject) NULL);

                if (!parseArgs(args, "[IIZ", &a0, &a1, &a2))
                {
                  INT_CALL(object = LevenshteinAutomata(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LevenshteinAutomata_toAutomaton(t_LevenshteinAutomata *self, PyObject *arg)
          {
            jint a0;
            ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.toAutomaton(a0));
              return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "toAutomaton", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/range/LongRangeCounter$LongRangeNode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {

          ::java::lang::Class *LongRangeCounter$LongRangeNode::class$ = NULL;
          jmethodID *LongRangeCounter$LongRangeNode::mids$ = NULL;
          bool LongRangeCounter$LongRangeNode::live$ = false;

          jclass LongRangeCounter$LongRangeNode::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/range/LongRangeCounter$LongRangeNode");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_ec849fce] = env->getMethodID(cls, "<init>", "(JJLorg/apache/lucene/facet/range/LongRangeCounter$LongRangeNode;Lorg/apache/lucene/facet/range/LongRangeCounter$LongRangeNode;I)V");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LongRangeCounter$LongRangeNode::LongRangeCounter$LongRangeNode(jlong a0, jlong a1, const LongRangeCounter$LongRangeNode & a2, const LongRangeCounter$LongRangeNode & a3, jint a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ec849fce, a0, a1, a2.this$, a3.this$, a4)) {}

          ::java::lang::String LongRangeCounter$LongRangeNode::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {
          static PyObject *t_LongRangeCounter$LongRangeNode_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LongRangeCounter$LongRangeNode_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LongRangeCounter$LongRangeNode_init_(t_LongRangeCounter$LongRangeNode *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LongRangeCounter$LongRangeNode_toString(t_LongRangeCounter$LongRangeNode *self, PyObject *args);

          static PyMethodDef t_LongRangeCounter$LongRangeNode__methods_[] = {
            DECLARE_METHOD(t_LongRangeCounter$LongRangeNode, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LongRangeCounter$LongRangeNode, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LongRangeCounter$LongRangeNode, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LongRangeCounter$LongRangeNode, t_LongRangeCounter$LongRangeNode, ::java::lang::Object, LongRangeCounter$LongRangeNode, t_LongRangeCounter$LongRangeNode_init_, 0, 0, 0, 0, 0);

          void t_LongRangeCounter$LongRangeNode::install(PyObject *module)
          {
            installType(&PY_TYPE(LongRangeCounter$LongRangeNode), module, "LongRangeCounter$LongRangeNode", 0);
          }

          void t_LongRangeCounter$LongRangeNode::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LongRangeCounter$LongRangeNode).tp_dict, "class_", make_descriptor(LongRangeCounter$LongRangeNode::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LongRangeCounter$LongRangeNode).tp_dict, "wrapfn_", make_descriptor(t_LongRangeCounter$LongRangeNode::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LongRangeCounter$LongRangeNode).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LongRangeCounter$LongRangeNode_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LongRangeCounter$LongRangeNode::initializeClass, 1)))
              return NULL;
            return t_LongRangeCounter$LongRangeNode::wrap_Object(LongRangeCounter$LongRangeNode(((t_LongRangeCounter$LongRangeNode *) arg)->object.this$));
          }
          static PyObject *t_LongRangeCounter$LongRangeNode_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LongRangeCounter$LongRangeNode::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LongRangeCounter$LongRangeNode_init_(t_LongRangeCounter$LongRangeNode *self, PyObject *args, PyObject *kwds)
          {
            jlong a0;
            jlong a1;
            LongRangeCounter$LongRangeNode a2((jobject) NULL);
            LongRangeCounter$LongRangeNode a3((jobject) NULL);
            jint a4;
            LongRangeCounter$LongRangeNode object((jobject) NULL);

            if (!parseArgs(args, "JJkkI", LongRangeCounter$LongRangeNode::initializeClass, LongRangeCounter$LongRangeNode::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = LongRangeCounter$LongRangeNode(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LongRangeCounter$LongRangeNode_toString(t_LongRangeCounter$LongRangeNode *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(LongRangeCounter$LongRangeNode), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$unary_operator_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$unary_operator_return::class$ = NULL;
          jmethodID *JavascriptParser$unary_operator_return::mids$ = NULL;
          bool JavascriptParser$unary_operator_return::live$ = false;

          jclass JavascriptParser$unary_operator_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$unary_operator_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$unary_operator_return::JavascriptParser$unary_operator_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$unary_operator_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$unary_operator_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$unary_operator_return_init_(t_JavascriptParser$unary_operator_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$unary_operator_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$unary_operator_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$unary_operator_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$unary_operator_return, t_JavascriptParser$unary_operator_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$unary_operator_return, t_JavascriptParser$unary_operator_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$unary_operator_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$unary_operator_return), module, "JavascriptParser$unary_operator_return", 0);
          }

          void t_JavascriptParser$unary_operator_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$unary_operator_return).tp_dict, "class_", make_descriptor(JavascriptParser$unary_operator_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$unary_operator_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$unary_operator_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$unary_operator_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$unary_operator_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$unary_operator_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$unary_operator_return::wrap_Object(JavascriptParser$unary_operator_return(((t_JavascriptParser$unary_operator_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$unary_operator_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$unary_operator_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$unary_operator_return_init_(t_JavascriptParser$unary_operator_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$unary_operator_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$unary_operator_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanPayloadCheckQuery.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/lang/Object.h"
#include "java/util/Collection.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanPayloadCheckQuery::class$ = NULL;
          jmethodID *SpanPayloadCheckQuery::mids$ = NULL;
          bool SpanPayloadCheckQuery::live$ = false;

          jclass SpanPayloadCheckQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanPayloadCheckQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8621bfa8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanQuery;Ljava/util/Collection;)V");
              mids$[mid_clone_5574a424] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/search/spans/SpanPayloadCheckQuery;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_acceptPosition_5342f73f] = env->getMethodID(cls, "acceptPosition", "(Lorg/apache/lucene/search/spans/Spans;)Lorg/apache/lucene/search/spans/SpanPositionCheckQuery$AcceptStatus;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanPayloadCheckQuery::SpanPayloadCheckQuery(const ::org::apache::lucene::search::spans::SpanQuery & a0, const ::java::util::Collection & a1) : ::org::apache::lucene::search::spans::SpanPositionCheckQuery(env->newObject(initializeClass, &mids$, mid_init$_8621bfa8, a0.this$, a1.this$)) {}

          SpanPayloadCheckQuery SpanPayloadCheckQuery::clone() const
          {
            return SpanPayloadCheckQuery(env->callObjectMethod(this$, mids$[mid_clone_5574a424]));
          }

          jboolean SpanPayloadCheckQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint SpanPayloadCheckQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String SpanPayloadCheckQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanPayloadCheckQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanPayloadCheckQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanPayloadCheckQuery_init_(t_SpanPayloadCheckQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanPayloadCheckQuery_clone(t_SpanPayloadCheckQuery *self, PyObject *args);
          static PyObject *t_SpanPayloadCheckQuery_equals(t_SpanPayloadCheckQuery *self, PyObject *args);
          static PyObject *t_SpanPayloadCheckQuery_hashCode(t_SpanPayloadCheckQuery *self, PyObject *args);
          static PyObject *t_SpanPayloadCheckQuery_toString(t_SpanPayloadCheckQuery *self, PyObject *args);

          static PyMethodDef t_SpanPayloadCheckQuery__methods_[] = {
            DECLARE_METHOD(t_SpanPayloadCheckQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanPayloadCheckQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanPayloadCheckQuery, clone, METH_VARARGS),
            DECLARE_METHOD(t_SpanPayloadCheckQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_SpanPayloadCheckQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SpanPayloadCheckQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanPayloadCheckQuery, t_SpanPayloadCheckQuery, ::org::apache::lucene::search::spans::SpanPositionCheckQuery, SpanPayloadCheckQuery, t_SpanPayloadCheckQuery_init_, 0, 0, 0, 0, 0);

          void t_SpanPayloadCheckQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanPayloadCheckQuery), module, "SpanPayloadCheckQuery", 0);
          }

          void t_SpanPayloadCheckQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanPayloadCheckQuery).tp_dict, "class_", make_descriptor(SpanPayloadCheckQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanPayloadCheckQuery).tp_dict, "wrapfn_", make_descriptor(t_SpanPayloadCheckQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanPayloadCheckQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanPayloadCheckQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanPayloadCheckQuery::initializeClass, 1)))
              return NULL;
            return t_SpanPayloadCheckQuery::wrap_Object(SpanPayloadCheckQuery(((t_SpanPayloadCheckQuery *) arg)->object.this$));
          }
          static PyObject *t_SpanPayloadCheckQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanPayloadCheckQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanPayloadCheckQuery_init_(t_SpanPayloadCheckQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spans::SpanQuery a0((jobject) NULL);
            ::java::util::Collection a1((jobject) NULL);
            PyTypeObject **p1;
            SpanPayloadCheckQuery object((jobject) NULL);

            if (!parseArgs(args, "kK", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, ::java::util::Collection::initializeClass, &a0, &a1, &p1, ::java::util::t_Collection::parameters_))
            {
              INT_CALL(object = SpanPayloadCheckQuery(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanPayloadCheckQuery_clone(t_SpanPayloadCheckQuery *self, PyObject *args)
          {
            SpanPayloadCheckQuery result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_SpanPayloadCheckQuery::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanPayloadCheckQuery), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_SpanPayloadCheckQuery_equals(t_SpanPayloadCheckQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SpanPayloadCheckQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SpanPayloadCheckQuery_hashCode(t_SpanPayloadCheckQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SpanPayloadCheckQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SpanPayloadCheckQuery_toString(t_SpanPayloadCheckQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanPayloadCheckQuery), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/CollectedSearchGroup.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *CollectedSearchGroup::class$ = NULL;
          jmethodID *CollectedSearchGroup::mids$ = NULL;
          bool CollectedSearchGroup::live$ = false;

          jclass CollectedSearchGroup::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/CollectedSearchGroup");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CollectedSearchGroup::CollectedSearchGroup() : ::org::apache::lucene::search::grouping::SearchGroup(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_CollectedSearchGroup_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CollectedSearchGroup_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CollectedSearchGroup_of_(t_CollectedSearchGroup *self, PyObject *args);
          static int t_CollectedSearchGroup_init_(t_CollectedSearchGroup *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CollectedSearchGroup_get__parameters_(t_CollectedSearchGroup *self, void *data);
          static PyGetSetDef t_CollectedSearchGroup__fields_[] = {
            DECLARE_GET_FIELD(t_CollectedSearchGroup, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CollectedSearchGroup__methods_[] = {
            DECLARE_METHOD(t_CollectedSearchGroup, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CollectedSearchGroup, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CollectedSearchGroup, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CollectedSearchGroup, t_CollectedSearchGroup, ::org::apache::lucene::search::grouping::SearchGroup, CollectedSearchGroup, t_CollectedSearchGroup_init_, 0, 0, t_CollectedSearchGroup__fields_, 0, 0);
          PyObject *t_CollectedSearchGroup::wrap_Object(const CollectedSearchGroup& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CollectedSearchGroup::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CollectedSearchGroup *self = (t_CollectedSearchGroup *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_CollectedSearchGroup::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CollectedSearchGroup::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CollectedSearchGroup *self = (t_CollectedSearchGroup *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_CollectedSearchGroup::install(PyObject *module)
          {
            installType(&PY_TYPE(CollectedSearchGroup), module, "CollectedSearchGroup", 0);
          }

          void t_CollectedSearchGroup::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CollectedSearchGroup).tp_dict, "class_", make_descriptor(CollectedSearchGroup::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CollectedSearchGroup).tp_dict, "wrapfn_", make_descriptor(t_CollectedSearchGroup::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CollectedSearchGroup).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CollectedSearchGroup_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CollectedSearchGroup::initializeClass, 1)))
              return NULL;
            return t_CollectedSearchGroup::wrap_Object(CollectedSearchGroup(((t_CollectedSearchGroup *) arg)->object.this$));
          }
          static PyObject *t_CollectedSearchGroup_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CollectedSearchGroup::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CollectedSearchGroup_of_(t_CollectedSearchGroup *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_CollectedSearchGroup_init_(t_CollectedSearchGroup *self, PyObject *args, PyObject *kwds)
          {
            CollectedSearchGroup object((jobject) NULL);

            INT_CALL(object = CollectedSearchGroup());
            self->object = object;

            return 0;
          }
          static PyObject *t_CollectedSearchGroup_get__parameters_(t_CollectedSearchGroup *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CompositeReader.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/CompositeReaderContext.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CompositeReader::class$ = NULL;
        jmethodID *CompositeReader::mids$ = NULL;
        bool CompositeReader::live$ = false;

        jclass CompositeReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CompositeReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getContext_00eb2977] = env->getMethodID(cls, "getContext", "()Lorg/apache/lucene/index/CompositeReaderContext;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_getSequentialSubReaders_87851566] = env->getMethodID(cls, "getSequentialSubReaders", "()Ljava/util/List;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::CompositeReaderContext CompositeReader::getContext() const
        {
          return ::org::apache::lucene::index::CompositeReaderContext(env->callObjectMethod(this$, mids$[mid_getContext_00eb2977]));
        }

        ::java::lang::String CompositeReader::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CompositeReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CompositeReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CompositeReader_getContext(t_CompositeReader *self, PyObject *args);
        static PyObject *t_CompositeReader_toString(t_CompositeReader *self, PyObject *args);
        static PyObject *t_CompositeReader_get__context(t_CompositeReader *self, void *data);
        static PyGetSetDef t_CompositeReader__fields_[] = {
          DECLARE_GET_FIELD(t_CompositeReader, context),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CompositeReader__methods_[] = {
          DECLARE_METHOD(t_CompositeReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CompositeReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CompositeReader, getContext, METH_VARARGS),
          DECLARE_METHOD(t_CompositeReader, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CompositeReader, t_CompositeReader, ::org::apache::lucene::index::IndexReader, CompositeReader, abstract_init, 0, 0, t_CompositeReader__fields_, 0, 0);

        void t_CompositeReader::install(PyObject *module)
        {
          installType(&PY_TYPE(CompositeReader), module, "CompositeReader", 0);
        }

        void t_CompositeReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CompositeReader).tp_dict, "class_", make_descriptor(CompositeReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CompositeReader).tp_dict, "wrapfn_", make_descriptor(t_CompositeReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CompositeReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CompositeReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CompositeReader::initializeClass, 1)))
            return NULL;
          return t_CompositeReader::wrap_Object(CompositeReader(((t_CompositeReader *) arg)->object.this$));
        }
        static PyObject *t_CompositeReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CompositeReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CompositeReader_getContext(t_CompositeReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::CompositeReaderContext result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getContext());
            return ::org::apache::lucene::index::t_CompositeReaderContext::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(CompositeReader), (PyObject *) self, "getContext", args, 2);
        }

        static PyObject *t_CompositeReader_toString(t_CompositeReader *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(CompositeReader), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_CompositeReader_get__context(t_CompositeReader *self, void *data)
        {
          ::org::apache::lucene::index::CompositeReaderContext value((jobject) NULL);
          OBJ_CALL(value = self->object.getContext());
          return ::org::apache::lucene::index::t_CompositeReaderContext::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/VerifyingLockFactory.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "org/apache/lucene/store/Lock.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *VerifyingLockFactory::class$ = NULL;
        jmethodID *VerifyingLockFactory::mids$ = NULL;
        bool VerifyingLockFactory::live$ = false;

        jclass VerifyingLockFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/VerifyingLockFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_118c9b94] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/LockFactory;Ljava/io/InputStream;Ljava/io/OutputStream;)V");
            mids$[mid_clearLock_5fdc3f48] = env->getMethodID(cls, "clearLock", "(Ljava/lang/String;)V");
            mids$[mid_makeLock_f26bb9a8] = env->getMethodID(cls, "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        VerifyingLockFactory::VerifyingLockFactory(const ::org::apache::lucene::store::LockFactory & a0, const ::java::io::InputStream & a1, const ::java::io::OutputStream & a2) : ::org::apache::lucene::store::LockFactory(env->newObject(initializeClass, &mids$, mid_init$_118c9b94, a0.this$, a1.this$, a2.this$)) {}

        void VerifyingLockFactory::clearLock(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clearLock_5fdc3f48], a0.this$);
        }

        ::org::apache::lucene::store::Lock VerifyingLockFactory::makeLock(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::store::Lock(env->callObjectMethod(this$, mids$[mid_makeLock_f26bb9a8], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_VerifyingLockFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_VerifyingLockFactory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_VerifyingLockFactory_init_(t_VerifyingLockFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_VerifyingLockFactory_clearLock(t_VerifyingLockFactory *self, PyObject *args);
        static PyObject *t_VerifyingLockFactory_makeLock(t_VerifyingLockFactory *self, PyObject *args);

        static PyMethodDef t_VerifyingLockFactory__methods_[] = {
          DECLARE_METHOD(t_VerifyingLockFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_VerifyingLockFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_VerifyingLockFactory, clearLock, METH_VARARGS),
          DECLARE_METHOD(t_VerifyingLockFactory, makeLock, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(VerifyingLockFactory, t_VerifyingLockFactory, ::org::apache::lucene::store::LockFactory, VerifyingLockFactory, t_VerifyingLockFactory_init_, 0, 0, 0, 0, 0);

        void t_VerifyingLockFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(VerifyingLockFactory), module, "VerifyingLockFactory", 0);
        }

        void t_VerifyingLockFactory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(VerifyingLockFactory).tp_dict, "class_", make_descriptor(VerifyingLockFactory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(VerifyingLockFactory).tp_dict, "wrapfn_", make_descriptor(t_VerifyingLockFactory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(VerifyingLockFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_VerifyingLockFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, VerifyingLockFactory::initializeClass, 1)))
            return NULL;
          return t_VerifyingLockFactory::wrap_Object(VerifyingLockFactory(((t_VerifyingLockFactory *) arg)->object.this$));
        }
        static PyObject *t_VerifyingLockFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, VerifyingLockFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_VerifyingLockFactory_init_(t_VerifyingLockFactory *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::store::LockFactory a0((jobject) NULL);
          ::java::io::InputStream a1((jobject) NULL);
          ::java::io::OutputStream a2((jobject) NULL);
          VerifyingLockFactory object((jobject) NULL);

          if (!parseArgs(args, "kkk", ::org::apache::lucene::store::LockFactory::initializeClass, ::java::io::InputStream::initializeClass, ::java::io::OutputStream::initializeClass, &a0, &a1, &a2))
          {
            INT_CALL(object = VerifyingLockFactory(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_VerifyingLockFactory_clearLock(t_VerifyingLockFactory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.clearLock(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(VerifyingLockFactory), (PyObject *) self, "clearLock", args, 2);
        }

        static PyObject *t_VerifyingLockFactory_makeLock(t_VerifyingLockFactory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::Lock result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.makeLock(a0));
            return ::org::apache::lucene::store::t_Lock::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(VerifyingLockFactory), (PyObject *) self, "makeLock", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/SlowCollatedTermRangeTermsEnum.h"
#include "java/text/Collator.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {

          ::java::lang::Class *SlowCollatedTermRangeTermsEnum::class$ = NULL;
          jmethodID *SlowCollatedTermRangeTermsEnum::mids$ = NULL;
          bool SlowCollatedTermRangeTermsEnum::live$ = false;

          jclass SlowCollatedTermRangeTermsEnum::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/SlowCollatedTermRangeTermsEnum");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_b77b0cda] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/TermsEnum;Ljava/lang/String;Ljava/lang/String;ZZLjava/text/Collator;)V");
              mids$[mid_accept_30bc08e1] = env->getMethodID(cls, "accept", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/FilteredTermsEnum$AcceptStatus;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SlowCollatedTermRangeTermsEnum::SlowCollatedTermRangeTermsEnum(const ::org::apache::lucene::index::TermsEnum & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3, jboolean a4, const ::java::text::Collator & a5) : ::org::apache::lucene::index::FilteredTermsEnum(env->newObject(initializeClass, &mids$, mid_init$_b77b0cda, a0.this$, a1.this$, a2.this$, a3, a4, a5.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          static PyObject *t_SlowCollatedTermRangeTermsEnum_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SlowCollatedTermRangeTermsEnum_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SlowCollatedTermRangeTermsEnum_init_(t_SlowCollatedTermRangeTermsEnum *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_SlowCollatedTermRangeTermsEnum__methods_[] = {
            DECLARE_METHOD(t_SlowCollatedTermRangeTermsEnum, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SlowCollatedTermRangeTermsEnum, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SlowCollatedTermRangeTermsEnum, t_SlowCollatedTermRangeTermsEnum, ::org::apache::lucene::index::FilteredTermsEnum, SlowCollatedTermRangeTermsEnum, t_SlowCollatedTermRangeTermsEnum_init_, 0, 0, 0, 0, 0);

          void t_SlowCollatedTermRangeTermsEnum::install(PyObject *module)
          {
            installType(&PY_TYPE(SlowCollatedTermRangeTermsEnum), module, "SlowCollatedTermRangeTermsEnum", 0);
          }

          void t_SlowCollatedTermRangeTermsEnum::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SlowCollatedTermRangeTermsEnum).tp_dict, "class_", make_descriptor(SlowCollatedTermRangeTermsEnum::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SlowCollatedTermRangeTermsEnum).tp_dict, "wrapfn_", make_descriptor(t_SlowCollatedTermRangeTermsEnum::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SlowCollatedTermRangeTermsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SlowCollatedTermRangeTermsEnum_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SlowCollatedTermRangeTermsEnum::initializeClass, 1)))
              return NULL;
            return t_SlowCollatedTermRangeTermsEnum::wrap_Object(SlowCollatedTermRangeTermsEnum(((t_SlowCollatedTermRangeTermsEnum *) arg)->object.this$));
          }
          static PyObject *t_SlowCollatedTermRangeTermsEnum_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SlowCollatedTermRangeTermsEnum::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SlowCollatedTermRangeTermsEnum_init_(t_SlowCollatedTermRangeTermsEnum *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            jboolean a3;
            jboolean a4;
            ::java::text::Collator a5((jobject) NULL);
            SlowCollatedTermRangeTermsEnum object((jobject) NULL);

            if (!parseArgs(args, "kssZZk", ::org::apache::lucene::index::TermsEnum::initializeClass, ::java::text::Collator::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
            {
              INT_CALL(object = SlowCollatedTermRangeTermsEnum(a0, a1, a2, a3, a4, a5));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SortedSetDocValues::class$ = NULL;
        jmethodID *SortedSetDocValues::mids$ = NULL;
        bool SortedSetDocValues::live$ = false;
        jlong SortedSetDocValues::NO_MORE_ORDS = (jlong) 0;

        jclass SortedSetDocValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SortedSetDocValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getValueCount_54c6a17a] = env->getMethodID(cls, "getValueCount", "()J");
            mids$[mid_lookupOrd_9c59b7f4] = env->getMethodID(cls, "lookupOrd", "(J)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_lookupTerm_7bc03dd8] = env->getMethodID(cls, "lookupTerm", "(Lorg/apache/lucene/util/BytesRef;)J");
            mids$[mid_nextOrd_54c6a17a] = env->getMethodID(cls, "nextOrd", "()J");
            mids$[mid_setDocument_39c7bd3c] = env->getMethodID(cls, "setDocument", "(I)V");
            mids$[mid_termsEnum_ea7afd9f] = env->getMethodID(cls, "termsEnum", "()Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            NO_MORE_ORDS = env->getStaticLongField(cls, "NO_MORE_ORDS");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong SortedSetDocValues::getValueCount() const
        {
          return env->callLongMethod(this$, mids$[mid_getValueCount_54c6a17a]);
        }

        ::org::apache::lucene::util::BytesRef SortedSetDocValues::lookupOrd(jlong a0) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_lookupOrd_9c59b7f4], a0));
        }

        jlong SortedSetDocValues::lookupTerm(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_lookupTerm_7bc03dd8], a0.this$);
        }

        jlong SortedSetDocValues::nextOrd() const
        {
          return env->callLongMethod(this$, mids$[mid_nextOrd_54c6a17a]);
        }

        void SortedSetDocValues::setDocument(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setDocument_39c7bd3c], a0);
        }

        ::org::apache::lucene::index::TermsEnum SortedSetDocValues::termsEnum() const
        {
          return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_termsEnum_ea7afd9f]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SortedSetDocValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedSetDocValues_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedSetDocValues_getValueCount(t_SortedSetDocValues *self);
        static PyObject *t_SortedSetDocValues_lookupOrd(t_SortedSetDocValues *self, PyObject *arg);
        static PyObject *t_SortedSetDocValues_lookupTerm(t_SortedSetDocValues *self, PyObject *arg);
        static PyObject *t_SortedSetDocValues_nextOrd(t_SortedSetDocValues *self);
        static PyObject *t_SortedSetDocValues_setDocument(t_SortedSetDocValues *self, PyObject *arg);
        static PyObject *t_SortedSetDocValues_termsEnum(t_SortedSetDocValues *self);
        static int t_SortedSetDocValues_set__document(t_SortedSetDocValues *self, PyObject *arg, void *data);
        static PyObject *t_SortedSetDocValues_get__valueCount(t_SortedSetDocValues *self, void *data);
        static PyGetSetDef t_SortedSetDocValues__fields_[] = {
          DECLARE_SET_FIELD(t_SortedSetDocValues, document),
          DECLARE_GET_FIELD(t_SortedSetDocValues, valueCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SortedSetDocValues__methods_[] = {
          DECLARE_METHOD(t_SortedSetDocValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedSetDocValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedSetDocValues, getValueCount, METH_NOARGS),
          DECLARE_METHOD(t_SortedSetDocValues, lookupOrd, METH_O),
          DECLARE_METHOD(t_SortedSetDocValues, lookupTerm, METH_O),
          DECLARE_METHOD(t_SortedSetDocValues, nextOrd, METH_NOARGS),
          DECLARE_METHOD(t_SortedSetDocValues, setDocument, METH_O),
          DECLARE_METHOD(t_SortedSetDocValues, termsEnum, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SortedSetDocValues, t_SortedSetDocValues, ::java::lang::Object, SortedSetDocValues, abstract_init, 0, 0, t_SortedSetDocValues__fields_, 0, 0);

        void t_SortedSetDocValues::install(PyObject *module)
        {
          installType(&PY_TYPE(SortedSetDocValues), module, "SortedSetDocValues", 0);
        }

        void t_SortedSetDocValues::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SortedSetDocValues).tp_dict, "class_", make_descriptor(SortedSetDocValues::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SortedSetDocValues).tp_dict, "wrapfn_", make_descriptor(t_SortedSetDocValues::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SortedSetDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(SortedSetDocValues::initializeClass);
          PyDict_SetItemString(PY_TYPE(SortedSetDocValues).tp_dict, "NO_MORE_ORDS", make_descriptor(SortedSetDocValues::NO_MORE_ORDS));
        }

        static PyObject *t_SortedSetDocValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortedSetDocValues::initializeClass, 1)))
            return NULL;
          return t_SortedSetDocValues::wrap_Object(SortedSetDocValues(((t_SortedSetDocValues *) arg)->object.this$));
        }
        static PyObject *t_SortedSetDocValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortedSetDocValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SortedSetDocValues_getValueCount(t_SortedSetDocValues *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getValueCount());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SortedSetDocValues_lookupOrd(t_SortedSetDocValues *self, PyObject *arg)
        {
          jlong a0;
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.lookupOrd(a0));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "lookupOrd", arg);
          return NULL;
        }

        static PyObject *t_SortedSetDocValues_lookupTerm(t_SortedSetDocValues *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.lookupTerm(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "lookupTerm", arg);
          return NULL;
        }

        static PyObject *t_SortedSetDocValues_nextOrd(t_SortedSetDocValues *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.nextOrd());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SortedSetDocValues_setDocument(t_SortedSetDocValues *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setDocument(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setDocument", arg);
          return NULL;
        }

        static PyObject *t_SortedSetDocValues_termsEnum(t_SortedSetDocValues *self)
        {
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);
          OBJ_CALL(result = self->object.termsEnum());
          return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
        }

        static int t_SortedSetDocValues_set__document(t_SortedSetDocValues *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setDocument(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "document", arg);
          return -1;
        }

        static PyObject *t_SortedSetDocValues_get__valueCount(t_SortedSetDocValues *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getValueCount());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
