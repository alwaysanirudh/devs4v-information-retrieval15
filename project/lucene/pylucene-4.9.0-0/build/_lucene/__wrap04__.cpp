#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/OfflineSorter$SortInfo.h"
#include "org/apache/lucene/util/OfflineSorter.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *OfflineSorter$SortInfo::class$ = NULL;
        jmethodID *OfflineSorter$SortInfo::mids$ = NULL;
        jfieldID *OfflineSorter$SortInfo::fids$ = NULL;
        bool OfflineSorter$SortInfo::live$ = false;

        jclass OfflineSorter$SortInfo::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/OfflineSorter$SortInfo");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_6859decd] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/OfflineSorter;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_bufferSize] = env->getFieldID(cls, "bufferSize", "J");
            fids$[fid_lines] = env->getFieldID(cls, "lines", "I");
            fids$[fid_mergeRounds] = env->getFieldID(cls, "mergeRounds", "I");
            fids$[fid_mergeTime] = env->getFieldID(cls, "mergeTime", "J");
            fids$[fid_readTime] = env->getFieldID(cls, "readTime", "J");
            fids$[fid_sortTime] = env->getFieldID(cls, "sortTime", "J");
            fids$[fid_tempMergeFiles] = env->getFieldID(cls, "tempMergeFiles", "I");
            fids$[fid_totalTime] = env->getFieldID(cls, "totalTime", "J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        OfflineSorter$SortInfo::OfflineSorter$SortInfo(const ::org::apache::lucene::util::OfflineSorter & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6859decd, a0.this$)) {}

        ::java::lang::String OfflineSorter$SortInfo::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        jlong OfflineSorter$SortInfo::_get_bufferSize() const
        {
          return env->getLongField(this$, fids$[fid_bufferSize]);
        }

        jint OfflineSorter$SortInfo::_get_lines() const
        {
          return env->getIntField(this$, fids$[fid_lines]);
        }

        void OfflineSorter$SortInfo::_set_lines(jint a0) const
        {
          env->setIntField(this$, fids$[fid_lines], a0);
        }

        jint OfflineSorter$SortInfo::_get_mergeRounds() const
        {
          return env->getIntField(this$, fids$[fid_mergeRounds]);
        }

        void OfflineSorter$SortInfo::_set_mergeRounds(jint a0) const
        {
          env->setIntField(this$, fids$[fid_mergeRounds], a0);
        }

        jlong OfflineSorter$SortInfo::_get_mergeTime() const
        {
          return env->getLongField(this$, fids$[fid_mergeTime]);
        }

        void OfflineSorter$SortInfo::_set_mergeTime(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_mergeTime], a0);
        }

        jlong OfflineSorter$SortInfo::_get_readTime() const
        {
          return env->getLongField(this$, fids$[fid_readTime]);
        }

        void OfflineSorter$SortInfo::_set_readTime(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_readTime], a0);
        }

        jlong OfflineSorter$SortInfo::_get_sortTime() const
        {
          return env->getLongField(this$, fids$[fid_sortTime]);
        }

        void OfflineSorter$SortInfo::_set_sortTime(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_sortTime], a0);
        }

        jint OfflineSorter$SortInfo::_get_tempMergeFiles() const
        {
          return env->getIntField(this$, fids$[fid_tempMergeFiles]);
        }

        void OfflineSorter$SortInfo::_set_tempMergeFiles(jint a0) const
        {
          env->setIntField(this$, fids$[fid_tempMergeFiles], a0);
        }

        jlong OfflineSorter$SortInfo::_get_totalTime() const
        {
          return env->getLongField(this$, fids$[fid_totalTime]);
        }

        void OfflineSorter$SortInfo::_set_totalTime(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totalTime], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_OfflineSorter$SortInfo_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OfflineSorter$SortInfo_instance_(PyTypeObject *type, PyObject *arg);
        static int t_OfflineSorter$SortInfo_init_(t_OfflineSorter$SortInfo *self, PyObject *args, PyObject *kwds);
        static PyObject *t_OfflineSorter$SortInfo_toString(t_OfflineSorter$SortInfo *self, PyObject *args);
        static PyObject *t_OfflineSorter$SortInfo_get__bufferSize(t_OfflineSorter$SortInfo *self, void *data);
        static PyObject *t_OfflineSorter$SortInfo_get__lines(t_OfflineSorter$SortInfo *self, void *data);
        static int t_OfflineSorter$SortInfo_set__lines(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data);
        static PyObject *t_OfflineSorter$SortInfo_get__mergeRounds(t_OfflineSorter$SortInfo *self, void *data);
        static int t_OfflineSorter$SortInfo_set__mergeRounds(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data);
        static PyObject *t_OfflineSorter$SortInfo_get__mergeTime(t_OfflineSorter$SortInfo *self, void *data);
        static int t_OfflineSorter$SortInfo_set__mergeTime(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data);
        static PyObject *t_OfflineSorter$SortInfo_get__readTime(t_OfflineSorter$SortInfo *self, void *data);
        static int t_OfflineSorter$SortInfo_set__readTime(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data);
        static PyObject *t_OfflineSorter$SortInfo_get__sortTime(t_OfflineSorter$SortInfo *self, void *data);
        static int t_OfflineSorter$SortInfo_set__sortTime(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data);
        static PyObject *t_OfflineSorter$SortInfo_get__tempMergeFiles(t_OfflineSorter$SortInfo *self, void *data);
        static int t_OfflineSorter$SortInfo_set__tempMergeFiles(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data);
        static PyObject *t_OfflineSorter$SortInfo_get__totalTime(t_OfflineSorter$SortInfo *self, void *data);
        static int t_OfflineSorter$SortInfo_set__totalTime(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data);

        static PyGetSetDef t_OfflineSorter$SortInfo__fields_[] = {
          DECLARE_GET_FIELD(t_OfflineSorter$SortInfo, bufferSize),
          DECLARE_GETSET_FIELD(t_OfflineSorter$SortInfo, lines),
          DECLARE_GETSET_FIELD(t_OfflineSorter$SortInfo, mergeRounds),
          DECLARE_GETSET_FIELD(t_OfflineSorter$SortInfo, mergeTime),
          DECLARE_GETSET_FIELD(t_OfflineSorter$SortInfo, readTime),
          DECLARE_GETSET_FIELD(t_OfflineSorter$SortInfo, sortTime),
          DECLARE_GETSET_FIELD(t_OfflineSorter$SortInfo, tempMergeFiles),
          DECLARE_GETSET_FIELD(t_OfflineSorter$SortInfo, totalTime),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_OfflineSorter$SortInfo__methods_[] = {
          DECLARE_METHOD(t_OfflineSorter$SortInfo, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter$SortInfo, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter$SortInfo, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(OfflineSorter$SortInfo, t_OfflineSorter$SortInfo, ::java::lang::Object, OfflineSorter$SortInfo, t_OfflineSorter$SortInfo_init_, 0, 0, t_OfflineSorter$SortInfo__fields_, 0, 0);

        void t_OfflineSorter$SortInfo::install(PyObject *module)
        {
          installType(&PY_TYPE(OfflineSorter$SortInfo), module, "OfflineSorter$SortInfo", 0);
        }

        void t_OfflineSorter$SortInfo::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(OfflineSorter$SortInfo).tp_dict, "class_", make_descriptor(OfflineSorter$SortInfo::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(OfflineSorter$SortInfo).tp_dict, "wrapfn_", make_descriptor(t_OfflineSorter$SortInfo::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(OfflineSorter$SortInfo).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_OfflineSorter$SortInfo_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, OfflineSorter$SortInfo::initializeClass, 1)))
            return NULL;
          return t_OfflineSorter$SortInfo::wrap_Object(OfflineSorter$SortInfo(((t_OfflineSorter$SortInfo *) arg)->object.this$));
        }
        static PyObject *t_OfflineSorter$SortInfo_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, OfflineSorter$SortInfo::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_OfflineSorter$SortInfo_init_(t_OfflineSorter$SortInfo *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::OfflineSorter a0((jobject) NULL);
          OfflineSorter$SortInfo object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::OfflineSorter::initializeClass, &a0))
          {
            INT_CALL(object = OfflineSorter$SortInfo(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_OfflineSorter$SortInfo_toString(t_OfflineSorter$SortInfo *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(OfflineSorter$SortInfo), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_OfflineSorter$SortInfo_get__bufferSize(t_OfflineSorter$SortInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_bufferSize());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_OfflineSorter$SortInfo_get__lines(t_OfflineSorter$SortInfo *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_lines());
          return PyInt_FromLong((long) value);
        }
        static int t_OfflineSorter$SortInfo_set__lines(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_lines(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "lines", arg);
          return -1;
        }

        static PyObject *t_OfflineSorter$SortInfo_get__mergeRounds(t_OfflineSorter$SortInfo *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_mergeRounds());
          return PyInt_FromLong((long) value);
        }
        static int t_OfflineSorter$SortInfo_set__mergeRounds(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_mergeRounds(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "mergeRounds", arg);
          return -1;
        }

        static PyObject *t_OfflineSorter$SortInfo_get__mergeTime(t_OfflineSorter$SortInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_mergeTime());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_OfflineSorter$SortInfo_set__mergeTime(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_mergeTime(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "mergeTime", arg);
          return -1;
        }

        static PyObject *t_OfflineSorter$SortInfo_get__readTime(t_OfflineSorter$SortInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_readTime());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_OfflineSorter$SortInfo_set__readTime(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_readTime(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "readTime", arg);
          return -1;
        }

        static PyObject *t_OfflineSorter$SortInfo_get__sortTime(t_OfflineSorter$SortInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_sortTime());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_OfflineSorter$SortInfo_set__sortTime(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_sortTime(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "sortTime", arg);
          return -1;
        }

        static PyObject *t_OfflineSorter$SortInfo_get__tempMergeFiles(t_OfflineSorter$SortInfo *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_tempMergeFiles());
          return PyInt_FromLong((long) value);
        }
        static int t_OfflineSorter$SortInfo_set__tempMergeFiles(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_tempMergeFiles(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "tempMergeFiles", arg);
          return -1;
        }

        static PyObject *t_OfflineSorter$SortInfo_get__totalTime(t_OfflineSorter$SortInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totalTime());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_OfflineSorter$SortInfo_set__totalTime(t_OfflineSorter$SortInfo *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totalTime(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totalTime", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/postingshighlight/PassageScorer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace postingshighlight {

          ::java::lang::Class *PassageScorer::class$ = NULL;
          jmethodID *PassageScorer::mids$ = NULL;
          bool PassageScorer::live$ = false;

          jclass PassageScorer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/postingshighlight/PassageScorer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_5348eb2d] = env->getMethodID(cls, "<init>", "(FFF)V");
              mids$[mid_norm_39c7bd2c] = env->getMethodID(cls, "norm", "(I)F");
              mids$[mid_tf_d8d154b6] = env->getMethodID(cls, "tf", "(II)F");
              mids$[mid_weight_d8d154b6] = env->getMethodID(cls, "weight", "(II)F");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PassageScorer::PassageScorer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          PassageScorer::PassageScorer(jfloat a0, jfloat a1, jfloat a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5348eb2d, a0, a1, a2)) {}

          jfloat PassageScorer::norm(jint a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_norm_39c7bd2c], a0);
          }

          jfloat PassageScorer::tf(jint a0, jint a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_tf_d8d154b6], a0, a1);
          }

          jfloat PassageScorer::weight(jint a0, jint a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_weight_d8d154b6], a0, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace postingshighlight {
          static PyObject *t_PassageScorer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PassageScorer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PassageScorer_init_(t_PassageScorer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PassageScorer_norm(t_PassageScorer *self, PyObject *arg);
          static PyObject *t_PassageScorer_tf(t_PassageScorer *self, PyObject *args);
          static PyObject *t_PassageScorer_weight(t_PassageScorer *self, PyObject *args);

          static PyMethodDef t_PassageScorer__methods_[] = {
            DECLARE_METHOD(t_PassageScorer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PassageScorer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PassageScorer, norm, METH_O),
            DECLARE_METHOD(t_PassageScorer, tf, METH_VARARGS),
            DECLARE_METHOD(t_PassageScorer, weight, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PassageScorer, t_PassageScorer, ::java::lang::Object, PassageScorer, t_PassageScorer_init_, 0, 0, 0, 0, 0);

          void t_PassageScorer::install(PyObject *module)
          {
            installType(&PY_TYPE(PassageScorer), module, "PassageScorer", 0);
          }

          void t_PassageScorer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PassageScorer).tp_dict, "class_", make_descriptor(PassageScorer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PassageScorer).tp_dict, "wrapfn_", make_descriptor(t_PassageScorer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PassageScorer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PassageScorer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PassageScorer::initializeClass, 1)))
              return NULL;
            return t_PassageScorer::wrap_Object(PassageScorer(((t_PassageScorer *) arg)->object.this$));
          }
          static PyObject *t_PassageScorer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PassageScorer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PassageScorer_init_(t_PassageScorer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                PassageScorer object((jobject) NULL);

                INT_CALL(object = PassageScorer());
                self->object = object;
                break;
              }
              goto err;
             case 3:
              {
                jfloat a0;
                jfloat a1;
                jfloat a2;
                PassageScorer object((jobject) NULL);

                if (!parseArgs(args, "FFF", &a0, &a1, &a2))
                {
                  INT_CALL(object = PassageScorer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PassageScorer_norm(t_PassageScorer *self, PyObject *arg)
          {
            jint a0;
            jfloat result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.norm(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "norm", arg);
            return NULL;
          }

          static PyObject *t_PassageScorer_tf(t_PassageScorer *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jfloat result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.tf(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "tf", args);
            return NULL;
          }

          static PyObject *t_PassageScorer_weight(t_PassageScorer *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jfloat result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.weight(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "weight", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/payloads/PayloadNearQuery$PayloadNearSpanScorer.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {

          ::java::lang::Class *PayloadNearQuery$PayloadNearSpanScorer::class$ = NULL;
          jmethodID *PayloadNearQuery$PayloadNearSpanScorer::mids$ = NULL;
          bool PayloadNearQuery$PayloadNearSpanScorer::live$ = false;

          jclass PayloadNearQuery$PayloadNearSpanScorer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/payloads/PayloadNearQuery$PayloadNearSpanScorer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getPayloads_a306eb3e] = env->getMethodID(cls, "getPayloads", "([Lorg/apache/lucene/search/spans/Spans;)V");
              mids$[mid_score_54c6a176] = env->getMethodID(cls, "score", "()F");
              mids$[mid_setFreqCurrentDoc_54c6a16a] = env->getMethodID(cls, "setFreqCurrentDoc", "()Z");
              mids$[mid_processPayloads_c09a1e75] = env->getMethodID(cls, "processPayloads", "(Ljava/util/Collection;II)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void PayloadNearQuery$PayloadNearSpanScorer::getPayloads(const JArray< ::org::apache::lucene::search::spans::Spans > & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_getPayloads_a306eb3e], a0.this$);
          }

          jfloat PayloadNearQuery$PayloadNearSpanScorer::score() const
          {
            return env->callFloatMethod(this$, mids$[mid_score_54c6a176]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {
          static PyObject *t_PayloadNearQuery$PayloadNearSpanScorer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadNearQuery$PayloadNearSpanScorer_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadNearQuery$PayloadNearSpanScorer_getPayloads(t_PayloadNearQuery$PayloadNearSpanScorer *self, PyObject *arg);
          static PyObject *t_PayloadNearQuery$PayloadNearSpanScorer_score(t_PayloadNearQuery$PayloadNearSpanScorer *self, PyObject *args);

          static PyMethodDef t_PayloadNearQuery$PayloadNearSpanScorer__methods_[] = {
            DECLARE_METHOD(t_PayloadNearQuery$PayloadNearSpanScorer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadNearQuery$PayloadNearSpanScorer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadNearQuery$PayloadNearSpanScorer, getPayloads, METH_O),
            DECLARE_METHOD(t_PayloadNearQuery$PayloadNearSpanScorer, score, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PayloadNearQuery$PayloadNearSpanScorer, t_PayloadNearQuery$PayloadNearSpanScorer, ::org::apache::lucene::search::spans::SpanScorer, PayloadNearQuery$PayloadNearSpanScorer, abstract_init, 0, 0, 0, 0, 0);

          void t_PayloadNearQuery$PayloadNearSpanScorer::install(PyObject *module)
          {
            installType(&PY_TYPE(PayloadNearQuery$PayloadNearSpanScorer), module, "PayloadNearQuery$PayloadNearSpanScorer", 0);
          }

          void t_PayloadNearQuery$PayloadNearSpanScorer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PayloadNearQuery$PayloadNearSpanScorer).tp_dict, "class_", make_descriptor(PayloadNearQuery$PayloadNearSpanScorer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PayloadNearQuery$PayloadNearSpanScorer).tp_dict, "wrapfn_", make_descriptor(t_PayloadNearQuery$PayloadNearSpanScorer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PayloadNearQuery$PayloadNearSpanScorer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PayloadNearQuery$PayloadNearSpanScorer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PayloadNearQuery$PayloadNearSpanScorer::initializeClass, 1)))
              return NULL;
            return t_PayloadNearQuery$PayloadNearSpanScorer::wrap_Object(PayloadNearQuery$PayloadNearSpanScorer(((t_PayloadNearQuery$PayloadNearSpanScorer *) arg)->object.this$));
          }
          static PyObject *t_PayloadNearQuery$PayloadNearSpanScorer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PayloadNearQuery$PayloadNearSpanScorer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PayloadNearQuery$PayloadNearSpanScorer_getPayloads(t_PayloadNearQuery$PayloadNearSpanScorer *self, PyObject *arg)
          {
            JArray< ::org::apache::lucene::search::spans::Spans > a0((jobject) NULL);

            if (!parseArg(arg, "[k", ::org::apache::lucene::search::spans::Spans::initializeClass, &a0))
            {
              OBJ_CALL(self->object.getPayloads(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "getPayloads", arg);
            return NULL;
          }

          static PyObject *t_PayloadNearQuery$PayloadNearSpanScorer_score(t_PayloadNearQuery$PayloadNearSpanScorer *self, PyObject *args)
          {
            jfloat result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.score());
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(PayloadNearQuery$PayloadNearSpanScorer), (PyObject *) self, "score", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/OutputStreamDataOutput.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/io/OutputStream.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *OutputStreamDataOutput::class$ = NULL;
        jmethodID *OutputStreamDataOutput::mids$ = NULL;
        bool OutputStreamDataOutput::live$ = false;

        jclass OutputStreamDataOutput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/OutputStreamDataOutput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_82d865f8] = env->getMethodID(cls, "<init>", "(Ljava/io/OutputStream;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_writeByte_b2271687] = env->getMethodID(cls, "writeByte", "(B)V");
            mids$[mid_writeBytes_86f4435f] = env->getMethodID(cls, "writeBytes", "([BII)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        OutputStreamDataOutput::OutputStreamDataOutput(const ::java::io::OutputStream & a0) : ::org::apache::lucene::store::DataOutput(env->newObject(initializeClass, &mids$, mid_init$_82d865f8, a0.this$)) {}

        void OutputStreamDataOutput::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void OutputStreamDataOutput::writeByte(jbyte a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeByte_b2271687], a0);
        }

        void OutputStreamDataOutput::writeBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_writeBytes_86f4435f], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_OutputStreamDataOutput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OutputStreamDataOutput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_OutputStreamDataOutput_init_(t_OutputStreamDataOutput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_OutputStreamDataOutput_close(t_OutputStreamDataOutput *self);
        static PyObject *t_OutputStreamDataOutput_writeByte(t_OutputStreamDataOutput *self, PyObject *args);
        static PyObject *t_OutputStreamDataOutput_writeBytes(t_OutputStreamDataOutput *self, PyObject *args);

        static PyMethodDef t_OutputStreamDataOutput__methods_[] = {
          DECLARE_METHOD(t_OutputStreamDataOutput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OutputStreamDataOutput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OutputStreamDataOutput, close, METH_NOARGS),
          DECLARE_METHOD(t_OutputStreamDataOutput, writeByte, METH_VARARGS),
          DECLARE_METHOD(t_OutputStreamDataOutput, writeBytes, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(OutputStreamDataOutput, t_OutputStreamDataOutput, ::org::apache::lucene::store::DataOutput, OutputStreamDataOutput, t_OutputStreamDataOutput_init_, 0, 0, 0, 0, 0);

        void t_OutputStreamDataOutput::install(PyObject *module)
        {
          installType(&PY_TYPE(OutputStreamDataOutput), module, "OutputStreamDataOutput", 0);
        }

        void t_OutputStreamDataOutput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(OutputStreamDataOutput).tp_dict, "class_", make_descriptor(OutputStreamDataOutput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(OutputStreamDataOutput).tp_dict, "wrapfn_", make_descriptor(t_OutputStreamDataOutput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(OutputStreamDataOutput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_OutputStreamDataOutput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, OutputStreamDataOutput::initializeClass, 1)))
            return NULL;
          return t_OutputStreamDataOutput::wrap_Object(OutputStreamDataOutput(((t_OutputStreamDataOutput *) arg)->object.this$));
        }
        static PyObject *t_OutputStreamDataOutput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, OutputStreamDataOutput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_OutputStreamDataOutput_init_(t_OutputStreamDataOutput *self, PyObject *args, PyObject *kwds)
        {
          ::java::io::OutputStream a0((jobject) NULL);
          OutputStreamDataOutput object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::OutputStream::initializeClass, &a0))
          {
            INT_CALL(object = OutputStreamDataOutput(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_OutputStreamDataOutput_close(t_OutputStreamDataOutput *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_OutputStreamDataOutput_writeByte(t_OutputStreamDataOutput *self, PyObject *args)
        {
          jbyte a0;

          if (!parseArgs(args, "B", &a0))
          {
            OBJ_CALL(self->object.writeByte(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(OutputStreamDataOutput), (PyObject *) self, "writeByte", args, 2);
        }

        static PyObject *t_OutputStreamDataOutput_writeBytes(t_OutputStreamDataOutput *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.writeBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(OutputStreamDataOutput), (PyObject *) self, "writeBytes", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState$OrdRange.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace sortedset {

          ::java::lang::Class *SortedSetDocValuesReaderState$OrdRange::class$ = NULL;
          jmethodID *SortedSetDocValuesReaderState$OrdRange::mids$ = NULL;
          jfieldID *SortedSetDocValuesReaderState$OrdRange::fids$ = NULL;
          bool SortedSetDocValuesReaderState$OrdRange::live$ = false;

          jclass SortedSetDocValuesReaderState$OrdRange::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState$OrdRange");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d8d154a6] = env->getMethodID(cls, "<init>", "(II)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_end] = env->getFieldID(cls, "end", "I");
              fids$[fid_start] = env->getFieldID(cls, "start", "I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SortedSetDocValuesReaderState$OrdRange::SortedSetDocValuesReaderState$OrdRange(jint a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d8d154a6, a0, a1)) {}

          jint SortedSetDocValuesReaderState$OrdRange::_get_end() const
          {
            return env->getIntField(this$, fids$[fid_end]);
          }

          jint SortedSetDocValuesReaderState$OrdRange::_get_start() const
          {
            return env->getIntField(this$, fids$[fid_start]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace sortedset {
          static PyObject *t_SortedSetDocValuesReaderState$OrdRange_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SortedSetDocValuesReaderState$OrdRange_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SortedSetDocValuesReaderState$OrdRange_init_(t_SortedSetDocValuesReaderState$OrdRange *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SortedSetDocValuesReaderState$OrdRange_get__end(t_SortedSetDocValuesReaderState$OrdRange *self, void *data);
          static PyObject *t_SortedSetDocValuesReaderState$OrdRange_get__start(t_SortedSetDocValuesReaderState$OrdRange *self, void *data);

          static PyGetSetDef t_SortedSetDocValuesReaderState$OrdRange__fields_[] = {
            DECLARE_GET_FIELD(t_SortedSetDocValuesReaderState$OrdRange, end),
            DECLARE_GET_FIELD(t_SortedSetDocValuesReaderState$OrdRange, start),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SortedSetDocValuesReaderState$OrdRange__methods_[] = {
            DECLARE_METHOD(t_SortedSetDocValuesReaderState$OrdRange, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedSetDocValuesReaderState$OrdRange, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SortedSetDocValuesReaderState$OrdRange, t_SortedSetDocValuesReaderState$OrdRange, ::java::lang::Object, SortedSetDocValuesReaderState$OrdRange, t_SortedSetDocValuesReaderState$OrdRange_init_, 0, 0, t_SortedSetDocValuesReaderState$OrdRange__fields_, 0, 0);

          void t_SortedSetDocValuesReaderState$OrdRange::install(PyObject *module)
          {
            installType(&PY_TYPE(SortedSetDocValuesReaderState$OrdRange), module, "SortedSetDocValuesReaderState$OrdRange", 0);
          }

          void t_SortedSetDocValuesReaderState$OrdRange::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SortedSetDocValuesReaderState$OrdRange).tp_dict, "class_", make_descriptor(SortedSetDocValuesReaderState$OrdRange::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SortedSetDocValuesReaderState$OrdRange).tp_dict, "wrapfn_", make_descriptor(t_SortedSetDocValuesReaderState$OrdRange::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SortedSetDocValuesReaderState$OrdRange).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SortedSetDocValuesReaderState$OrdRange_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SortedSetDocValuesReaderState$OrdRange::initializeClass, 1)))
              return NULL;
            return t_SortedSetDocValuesReaderState$OrdRange::wrap_Object(SortedSetDocValuesReaderState$OrdRange(((t_SortedSetDocValuesReaderState$OrdRange *) arg)->object.this$));
          }
          static PyObject *t_SortedSetDocValuesReaderState$OrdRange_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SortedSetDocValuesReaderState$OrdRange::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SortedSetDocValuesReaderState$OrdRange_init_(t_SortedSetDocValuesReaderState$OrdRange *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            jint a1;
            SortedSetDocValuesReaderState$OrdRange object((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              INT_CALL(object = SortedSetDocValuesReaderState$OrdRange(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SortedSetDocValuesReaderState$OrdRange_get__end(t_SortedSetDocValuesReaderState$OrdRange *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_end());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_SortedSetDocValuesReaderState$OrdRange_get__start(t_SortedSetDocValuesReaderState$OrdRange *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_start());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/LambdaTTF.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *LambdaTTF::class$ = NULL;
          jmethodID *LambdaTTF::mids$ = NULL;
          bool LambdaTTF::live$ = false;

          jclass LambdaTTF::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/LambdaTTF");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_eddc6641] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_lambda_cb225ea0] = env->getMethodID(cls, "lambda", "(Lorg/apache/lucene/search/similarities/BasicStats;)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LambdaTTF::LambdaTTF() : ::org::apache::lucene::search::similarities::Lambda(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::Explanation LambdaTTF::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_eddc6641], a0.this$));
          }

          jfloat LambdaTTF::lambda(const ::org::apache::lucene::search::similarities::BasicStats & a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_lambda_cb225ea0], a0.this$);
          }

          ::java::lang::String LambdaTTF::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_LambdaTTF_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LambdaTTF_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LambdaTTF_init_(t_LambdaTTF *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LambdaTTF_explain(t_LambdaTTF *self, PyObject *args);
          static PyObject *t_LambdaTTF_lambda(t_LambdaTTF *self, PyObject *args);
          static PyObject *t_LambdaTTF_toString(t_LambdaTTF *self, PyObject *args);

          static PyMethodDef t_LambdaTTF__methods_[] = {
            DECLARE_METHOD(t_LambdaTTF, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LambdaTTF, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LambdaTTF, explain, METH_VARARGS),
            DECLARE_METHOD(t_LambdaTTF, lambda, METH_VARARGS),
            DECLARE_METHOD(t_LambdaTTF, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LambdaTTF, t_LambdaTTF, ::org::apache::lucene::search::similarities::Lambda, LambdaTTF, t_LambdaTTF_init_, 0, 0, 0, 0, 0);

          void t_LambdaTTF::install(PyObject *module)
          {
            installType(&PY_TYPE(LambdaTTF), module, "LambdaTTF", 0);
          }

          void t_LambdaTTF::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LambdaTTF).tp_dict, "class_", make_descriptor(LambdaTTF::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LambdaTTF).tp_dict, "wrapfn_", make_descriptor(t_LambdaTTF::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LambdaTTF).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LambdaTTF_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LambdaTTF::initializeClass, 1)))
              return NULL;
            return t_LambdaTTF::wrap_Object(LambdaTTF(((t_LambdaTTF *) arg)->object.this$));
          }
          static PyObject *t_LambdaTTF_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LambdaTTF::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LambdaTTF_init_(t_LambdaTTF *self, PyObject *args, PyObject *kwds)
          {
            LambdaTTF object((jobject) NULL);

            INT_CALL(object = LambdaTTF());
            self->object = object;

            return 0;
          }

          static PyObject *t_LambdaTTF_explain(t_LambdaTTF *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.explain(a0));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(LambdaTTF), (PyObject *) self, "explain", args, 2);
          }

          static PyObject *t_LambdaTTF_lambda(t_LambdaTTF *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat result;

            if (!parseArgs(args, "k", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.lambda(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(LambdaTTF), (PyObject *) self, "lambda", args, 2);
          }

          static PyObject *t_LambdaTTF_toString(t_LambdaTTF *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(LambdaTTF), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/sv/SwedishAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sv {

          ::java::lang::Class *SwedishAnalyzer::class$ = NULL;
          jmethodID *SwedishAnalyzer::mids$ = NULL;
          bool SwedishAnalyzer::live$ = false;
          ::java::lang::String *SwedishAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass SwedishAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/sv/SwedishAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SwedishAnalyzer::SwedishAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          SwedishAnalyzer::SwedishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          SwedishAnalyzer::SwedishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet SwedishAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sv {
          static PyObject *t_SwedishAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SwedishAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SwedishAnalyzer_init_(t_SwedishAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SwedishAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_SwedishAnalyzer_get__defaultStopSet(t_SwedishAnalyzer *self, void *data);
          static PyGetSetDef t_SwedishAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_SwedishAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SwedishAnalyzer__methods_[] = {
            DECLARE_METHOD(t_SwedishAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SwedishAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SwedishAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SwedishAnalyzer, t_SwedishAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, SwedishAnalyzer, t_SwedishAnalyzer_init_, 0, 0, t_SwedishAnalyzer__fields_, 0, 0);

          void t_SwedishAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(SwedishAnalyzer), module, "SwedishAnalyzer", 0);
          }

          void t_SwedishAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SwedishAnalyzer).tp_dict, "class_", make_descriptor(SwedishAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SwedishAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_SwedishAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SwedishAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SwedishAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(SwedishAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*SwedishAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_SwedishAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SwedishAnalyzer::initializeClass, 1)))
              return NULL;
            return t_SwedishAnalyzer::wrap_Object(SwedishAnalyzer(((t_SwedishAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_SwedishAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SwedishAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SwedishAnalyzer_init_(t_SwedishAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                SwedishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = SwedishAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                SwedishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = SwedishAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                SwedishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = SwedishAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SwedishAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::sv::SwedishAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_SwedishAnalyzer_get__defaultStopSet(t_SwedishAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/PythonFloatParser.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/Terms.h"
#include "java/lang/Throwable.h"
#include "org/apache/lucene/search/FieldCache$FloatParser.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {

        ::java::lang::Class *PythonFloatParser::class$ = NULL;
        jmethodID *PythonFloatParser::mids$ = NULL;
        bool PythonFloatParser::live$ = false;

        jclass PythonFloatParser::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/search/PythonFloatParser");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_parseFloat_7bc03dd4] = env->getMethodID(cls, "parseFloat", "(Lorg/apache/lucene/util/BytesRef;)F");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_termsEnum_fb3ac14e] = env->getMethodID(cls, "termsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonFloatParser::PythonFloatParser() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonFloatParser::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonFloatParser::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonFloatParser::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        static PyObject *t_PythonFloatParser_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonFloatParser_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonFloatParser_init_(t_PythonFloatParser *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonFloatParser_finalize(t_PythonFloatParser *self);
        static PyObject *t_PythonFloatParser_pythonExtension(t_PythonFloatParser *self, PyObject *args);
        static jfloat JNICALL t_PythonFloatParser_parseFloat0(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonFloatParser_pythonDecRef1(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonFloatParser_termsEnum2(JNIEnv *jenv, jobject jobj, jobject a0);
        static PyObject *t_PythonFloatParser_get__self(t_PythonFloatParser *self, void *data);
        static PyGetSetDef t_PythonFloatParser__fields_[] = {
          DECLARE_GET_FIELD(t_PythonFloatParser, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonFloatParser__methods_[] = {
          DECLARE_METHOD(t_PythonFloatParser, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonFloatParser, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonFloatParser, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonFloatParser, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonFloatParser, t_PythonFloatParser, ::java::lang::Object, PythonFloatParser, t_PythonFloatParser_init_, 0, 0, t_PythonFloatParser__fields_, 0, 0);

        void t_PythonFloatParser::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonFloatParser), module, "PythonFloatParser", 1);
        }

        void t_PythonFloatParser::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonFloatParser).tp_dict, "class_", make_descriptor(PythonFloatParser::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonFloatParser).tp_dict, "wrapfn_", make_descriptor(t_PythonFloatParser::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonFloatParser).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonFloatParser::initializeClass);
          JNINativeMethod methods[] = {
            { "parseFloat", "(Lorg/apache/lucene/util/BytesRef;)F", (void *) t_PythonFloatParser_parseFloat0 },
            { "pythonDecRef", "()V", (void *) t_PythonFloatParser_pythonDecRef1 },
            { "termsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;", (void *) t_PythonFloatParser_termsEnum2 },
          };
          env->registerNatives(cls, methods, 3);
        }

        static PyObject *t_PythonFloatParser_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonFloatParser::initializeClass, 1)))
            return NULL;
          return t_PythonFloatParser::wrap_Object(PythonFloatParser(((t_PythonFloatParser *) arg)->object.this$));
        }
        static PyObject *t_PythonFloatParser_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonFloatParser::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonFloatParser_init_(t_PythonFloatParser *self, PyObject *args, PyObject *kwds)
        {
          PythonFloatParser object((jobject) NULL);

          INT_CALL(object = PythonFloatParser());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonFloatParser_finalize(t_PythonFloatParser *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonFloatParser_pythonExtension(t_PythonFloatParser *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jfloat JNICALL t_PythonFloatParser_parseFloat0(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFloatParser::mids$[PythonFloatParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jfloat value;
          PyObject *o0 = ::org::apache::lucene::util::t_BytesRef::wrap_Object(::org::apache::lucene::util::BytesRef(a0));
          PyObject *result = PyObject_CallMethod(obj, "parseFloat", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "F", &value))
          {
            throwTypeError("parseFloat", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jfloat) 0;
        }

        static void JNICALL t_PythonFloatParser_pythonDecRef1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFloatParser::mids$[PythonFloatParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonFloatParser::mids$[PythonFloatParser::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static jobject JNICALL t_PythonFloatParser_termsEnum2(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFloatParser::mids$[PythonFloatParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::index::TermsEnum value((jobject) NULL);
          PyObject *o0 = ::org::apache::lucene::index::t_Terms::wrap_Object(::org::apache::lucene::index::Terms(a0));
          PyObject *result = PyObject_CallMethod(obj, "termsEnum", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &value))
          {
            throwTypeError("termsEnum", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static PyObject *t_PythonFloatParser_get__self(t_PythonFloatParser *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/Comparator.h"
#include "java/lang/Comparable.h"
#include "java/lang/Cloneable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *BytesRef::class$ = NULL;
        jmethodID *BytesRef::mids$ = NULL;
        jfieldID *BytesRef::fids$ = NULL;
        bool BytesRef::live$ = false;
        JArray< jbyte > *BytesRef::EMPTY_BYTES = NULL;

        jclass BytesRef::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/BytesRef");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_a8afc64a] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;)V");
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_init$_49b4f12b] = env->getMethodID(cls, "<init>", "([B)V");
            mids$[mid_init$_86f4435f] = env->getMethodID(cls, "<init>", "([BII)V");
            mids$[mid_append_7bc03dc4] = env->getMethodID(cls, "append", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_bytesEquals_7bc03dc8] = env->getMethodID(cls, "bytesEquals", "(Lorg/apache/lucene/util/BytesRef;)Z");
            mids$[mid_clone_4ae19461] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_compareTo_7bc03ddb] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_copyBytes_7bc03dc4] = env->getMethodID(cls, "copyBytes", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_copyChars_a8afc64a] = env->getMethodID(cls, "copyChars", "(Ljava/lang/CharSequence;)V");
            mids$[mid_deepCopyOf_21e43cb7] = env->getStaticMethodID(cls, "deepCopyOf", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getUTF8SortedAsUTF16Comparator_5a7ff2fc] = env->getStaticMethodID(cls, "getUTF8SortedAsUTF16Comparator", "()Ljava/util/Comparator;");
            mids$[mid_getUTF8SortedAsUnicodeComparator_5a7ff2fc] = env->getStaticMethodID(cls, "getUTF8SortedAsUnicodeComparator", "()Ljava/util/Comparator;");
            mids$[mid_grow_39c7bd3c] = env->getMethodID(cls, "grow", "(I)V");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_isValid_54c6a16a] = env->getMethodID(cls, "isValid", "()Z");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_utf8ToString_14c7b5c5] = env->getMethodID(cls, "utf8ToString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_bytes] = env->getFieldID(cls, "bytes", "[B");
            fids$[fid_length] = env->getFieldID(cls, "length", "I");
            fids$[fid_offset] = env->getFieldID(cls, "offset", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY_BYTES = new JArray< jbyte >(env->getStaticObjectField(cls, "EMPTY_BYTES", "[B"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BytesRef::BytesRef() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        BytesRef::BytesRef(const ::java::lang::CharSequence & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a8afc64a, a0.this$)) {}

        BytesRef::BytesRef(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        BytesRef::BytesRef(const JArray< jbyte > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_49b4f12b, a0.this$)) {}

        BytesRef::BytesRef(const JArray< jbyte > & a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_86f4435f, a0.this$, a1, a2)) {}

        void BytesRef::append(const BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_append_7bc03dc4], a0.this$);
        }

        jboolean BytesRef::bytesEquals(const BytesRef & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_bytesEquals_7bc03dc8], a0.this$);
        }

        BytesRef BytesRef::clone() const
        {
          return BytesRef(env->callObjectMethod(this$, mids$[mid_clone_4ae19461]));
        }

        jint BytesRef::compareTo(const BytesRef & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTo_7bc03ddb], a0.this$);
        }

        void BytesRef::copyBytes(const BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyBytes_7bc03dc4], a0.this$);
        }

        void BytesRef::copyChars(const ::java::lang::CharSequence & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyChars_a8afc64a], a0.this$);
        }

        BytesRef BytesRef::deepCopyOf(const BytesRef & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return BytesRef(env->callStaticObjectMethod(cls, mids$[mid_deepCopyOf_21e43cb7], a0.this$));
        }

        jboolean BytesRef::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::java::util::Comparator BytesRef::getUTF8SortedAsUTF16Comparator()
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::Comparator(env->callStaticObjectMethod(cls, mids$[mid_getUTF8SortedAsUTF16Comparator_5a7ff2fc]));
        }

        ::java::util::Comparator BytesRef::getUTF8SortedAsUnicodeComparator()
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::Comparator(env->callStaticObjectMethod(cls, mids$[mid_getUTF8SortedAsUnicodeComparator_5a7ff2fc]));
        }

        void BytesRef::grow(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_grow_39c7bd3c], a0);
        }

        jint BytesRef::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean BytesRef::isValid() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isValid_54c6a16a]);
        }

        ::java::lang::String BytesRef::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::java::lang::String BytesRef::utf8ToString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_utf8ToString_14c7b5c5]));
        }

        JArray< jbyte > BytesRef::_get_bytes() const
        {
          return JArray< jbyte >(env->getObjectField(this$, fids$[fid_bytes]));
        }

        void BytesRef::_set_bytes(const JArray< jbyte > & a0) const
        {
          env->setObjectField(this$, fids$[fid_bytes], a0.this$);
        }

        jint BytesRef::_get_length() const
        {
          return env->getIntField(this$, fids$[fid_length]);
        }

        void BytesRef::_set_length(jint a0) const
        {
          env->setIntField(this$, fids$[fid_length], a0);
        }

        jint BytesRef::_get_offset() const
        {
          return env->getIntField(this$, fids$[fid_offset]);
        }

        void BytesRef::_set_offset(jint a0) const
        {
          env->setIntField(this$, fids$[fid_offset], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_BytesRef_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BytesRef_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BytesRef_init_(t_BytesRef *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BytesRef_append(t_BytesRef *self, PyObject *arg);
        static PyObject *t_BytesRef_bytesEquals(t_BytesRef *self, PyObject *arg);
        static PyObject *t_BytesRef_clone(t_BytesRef *self);
        static PyObject *t_BytesRef_compareTo(t_BytesRef *self, PyObject *arg);
        static PyObject *t_BytesRef_copyBytes(t_BytesRef *self, PyObject *arg);
        static PyObject *t_BytesRef_copyChars(t_BytesRef *self, PyObject *arg);
        static PyObject *t_BytesRef_deepCopyOf(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BytesRef_equals(t_BytesRef *self, PyObject *args);
        static PyObject *t_BytesRef_getUTF8SortedAsUTF16Comparator(PyTypeObject *type);
        static PyObject *t_BytesRef_getUTF8SortedAsUnicodeComparator(PyTypeObject *type);
        static PyObject *t_BytesRef_grow(t_BytesRef *self, PyObject *arg);
        static PyObject *t_BytesRef_hashCode(t_BytesRef *self, PyObject *args);
        static PyObject *t_BytesRef_isValid(t_BytesRef *self);
        static PyObject *t_BytesRef_toString(t_BytesRef *self, PyObject *args);
        static PyObject *t_BytesRef_utf8ToString(t_BytesRef *self);
        static PyObject *t_BytesRef_get__bytes(t_BytesRef *self, void *data);
        static int t_BytesRef_set__bytes(t_BytesRef *self, PyObject *arg, void *data);
        static PyObject *t_BytesRef_get__length(t_BytesRef *self, void *data);
        static int t_BytesRef_set__length(t_BytesRef *self, PyObject *arg, void *data);
        static PyObject *t_BytesRef_get__offset(t_BytesRef *self, void *data);
        static int t_BytesRef_set__offset(t_BytesRef *self, PyObject *arg, void *data);

        static PyObject *t_BytesRef_get__uTF8SortedAsUTF16Comparator(t_BytesRef *self, void *data);
        static PyObject *t_BytesRef_get__uTF8SortedAsUnicodeComparator(t_BytesRef *self, void *data);
        static PyObject *t_BytesRef_get__valid(t_BytesRef *self, void *data);
        static PyGetSetDef t_BytesRef__fields_[] = {
          DECLARE_GETSET_FIELD(t_BytesRef, bytes),
          DECLARE_GETSET_FIELD(t_BytesRef, length),
          DECLARE_GETSET_FIELD(t_BytesRef, offset),
          DECLARE_GET_FIELD(t_BytesRef, uTF8SortedAsUTF16Comparator),
          DECLARE_GET_FIELD(t_BytesRef, uTF8SortedAsUnicodeComparator),
          DECLARE_GET_FIELD(t_BytesRef, valid),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BytesRef__methods_[] = {
          DECLARE_METHOD(t_BytesRef, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRef, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRef, append, METH_O),
          DECLARE_METHOD(t_BytesRef, bytesEquals, METH_O),
          DECLARE_METHOD(t_BytesRef, clone, METH_NOARGS),
          DECLARE_METHOD(t_BytesRef, compareTo, METH_O),
          DECLARE_METHOD(t_BytesRef, copyBytes, METH_O),
          DECLARE_METHOD(t_BytesRef, copyChars, METH_O),
          DECLARE_METHOD(t_BytesRef, deepCopyOf, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRef, equals, METH_VARARGS),
          DECLARE_METHOD(t_BytesRef, getUTF8SortedAsUTF16Comparator, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_BytesRef, getUTF8SortedAsUnicodeComparator, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_BytesRef, grow, METH_O),
          DECLARE_METHOD(t_BytesRef, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_BytesRef, isValid, METH_NOARGS),
          DECLARE_METHOD(t_BytesRef, toString, METH_VARARGS),
          DECLARE_METHOD(t_BytesRef, utf8ToString, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BytesRef, t_BytesRef, ::java::lang::Object, BytesRef, t_BytesRef_init_, 0, 0, t_BytesRef__fields_, 0, 0);

        void t_BytesRef::install(PyObject *module)
        {
          installType(&PY_TYPE(BytesRef), module, "BytesRef", 0);
        }

        void t_BytesRef::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BytesRef).tp_dict, "class_", make_descriptor(BytesRef::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BytesRef).tp_dict, "wrapfn_", make_descriptor(t_BytesRef::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BytesRef).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(BytesRef::initializeClass);
          PyDict_SetItemString(PY_TYPE(BytesRef).tp_dict, "EMPTY_BYTES", make_descriptor(BytesRef::EMPTY_BYTES->wrap()));
        }

        static PyObject *t_BytesRef_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BytesRef::initializeClass, 1)))
            return NULL;
          return t_BytesRef::wrap_Object(BytesRef(((t_BytesRef *) arg)->object.this$));
        }
        static PyObject *t_BytesRef_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BytesRef::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BytesRef_init_(t_BytesRef *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              BytesRef object((jobject) NULL);

              INT_CALL(object = BytesRef());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              BytesRef object((jobject) NULL);

              if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
              {
                INT_CALL(object = BytesRef(a0));
                self->object = object;
                break;
              }
            }
            {
              jint a0;
              BytesRef object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = BytesRef(a0));
                self->object = object;
                break;
              }
            }
            {
              JArray< jbyte > a0((jobject) NULL);
              BytesRef object((jobject) NULL);

              if (!parseArgs(args, "[B", &a0))
              {
                INT_CALL(object = BytesRef(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              BytesRef object((jobject) NULL);

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                INT_CALL(object = BytesRef(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BytesRef_append(t_BytesRef *self, PyObject *arg)
        {
          BytesRef a0((jobject) NULL);

          if (!parseArg(arg, "k", BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(self->object.append(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "append", arg);
          return NULL;
        }

        static PyObject *t_BytesRef_bytesEquals(t_BytesRef *self, PyObject *arg)
        {
          BytesRef a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.bytesEquals(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "bytesEquals", arg);
          return NULL;
        }

        static PyObject *t_BytesRef_clone(t_BytesRef *self)
        {
          BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_BytesRef_compareTo(t_BytesRef *self, PyObject *arg)
        {
          BytesRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.compareTo(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
          return NULL;
        }

        static PyObject *t_BytesRef_copyBytes(t_BytesRef *self, PyObject *arg)
        {
          BytesRef a0((jobject) NULL);

          if (!parseArg(arg, "k", BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyBytes(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "copyBytes", arg);
          return NULL;
        }

        static PyObject *t_BytesRef_copyChars(t_BytesRef *self, PyObject *arg)
        {
          ::java::lang::CharSequence a0((jobject) NULL);

          if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
          {
            OBJ_CALL(self->object.copyChars(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "copyChars", arg);
          return NULL;
        }

        static PyObject *t_BytesRef_deepCopyOf(PyTypeObject *type, PyObject *arg)
        {
          BytesRef a0((jobject) NULL);
          BytesRef result((jobject) NULL);

          if (!parseArg(arg, "k", BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BytesRef::deepCopyOf(a0));
            return t_BytesRef::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "deepCopyOf", arg);
          return NULL;
        }

        static PyObject *t_BytesRef_equals(t_BytesRef *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(BytesRef), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_BytesRef_getUTF8SortedAsUTF16Comparator(PyTypeObject *type)
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::util::BytesRef::getUTF8SortedAsUTF16Comparator());
          return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
        }

        static PyObject *t_BytesRef_getUTF8SortedAsUnicodeComparator(PyTypeObject *type)
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::util::BytesRef::getUTF8SortedAsUnicodeComparator());
          return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
        }

        static PyObject *t_BytesRef_grow(t_BytesRef *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.grow(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "grow", arg);
          return NULL;
        }

        static PyObject *t_BytesRef_hashCode(t_BytesRef *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(BytesRef), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_BytesRef_isValid(t_BytesRef *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isValid());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_BytesRef_toString(t_BytesRef *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(BytesRef), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_BytesRef_utf8ToString(t_BytesRef *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.utf8ToString());
          return j2p(result);
        }

        static PyObject *t_BytesRef_get__bytes(t_BytesRef *self, void *data)
        {
          JArray< jbyte > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_bytes());
          return value.wrap();
        }
        static int t_BytesRef_set__bytes(t_BytesRef *self, PyObject *arg, void *data)
        {
          JArray< jbyte > value((jobject) NULL);
          if (!parseArg(arg, "[B", &value))
          {
            INT_CALL(self->object._set_bytes(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "bytes", arg);
          return -1;
        }

        static PyObject *t_BytesRef_get__length(t_BytesRef *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_length());
          return PyInt_FromLong((long) value);
        }
        static int t_BytesRef_set__length(t_BytesRef *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_length(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "length", arg);
          return -1;
        }

        static PyObject *t_BytesRef_get__offset(t_BytesRef *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_offset());
          return PyInt_FromLong((long) value);
        }
        static int t_BytesRef_set__offset(t_BytesRef *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_offset(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "offset", arg);
          return -1;
        }

        static PyObject *t_BytesRef_get__uTF8SortedAsUTF16Comparator(t_BytesRef *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getUTF8SortedAsUTF16Comparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }

        static PyObject *t_BytesRef_get__uTF8SortedAsUnicodeComparator(t_BytesRef *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getUTF8SortedAsUnicodeComparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }

        static PyObject *t_BytesRef_get__valid(t_BytesRef *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isValid());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SortedNumericSelector$Type.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SortedNumericSelector$Type::class$ = NULL;
        jmethodID *SortedNumericSelector$Type::mids$ = NULL;
        bool SortedNumericSelector$Type::live$ = false;
        SortedNumericSelector$Type *SortedNumericSelector$Type::MAX = NULL;
        SortedNumericSelector$Type *SortedNumericSelector$Type::MIN = NULL;

        jclass SortedNumericSelector$Type::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SortedNumericSelector$Type");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_46e516f8] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/search/SortedNumericSelector$Type;");
            mids$[mid_values_26c59952] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/search/SortedNumericSelector$Type;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            MAX = new SortedNumericSelector$Type(env->getStaticObjectField(cls, "MAX", "Lorg/apache/lucene/search/SortedNumericSelector$Type;"));
            MIN = new SortedNumericSelector$Type(env->getStaticObjectField(cls, "MIN", "Lorg/apache/lucene/search/SortedNumericSelector$Type;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SortedNumericSelector$Type SortedNumericSelector$Type::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return SortedNumericSelector$Type(env->callStaticObjectMethod(cls, mids$[mid_valueOf_46e516f8], a0.this$));
        }

        JArray< SortedNumericSelector$Type > SortedNumericSelector$Type::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< SortedNumericSelector$Type >(env->callStaticObjectMethod(cls, mids$[mid_values_26c59952]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SortedNumericSelector$Type_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedNumericSelector$Type_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedNumericSelector$Type_of_(t_SortedNumericSelector$Type *self, PyObject *args);
        static PyObject *t_SortedNumericSelector$Type_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_SortedNumericSelector$Type_values(PyTypeObject *type);
        static PyObject *t_SortedNumericSelector$Type_get__parameters_(t_SortedNumericSelector$Type *self, void *data);
        static PyGetSetDef t_SortedNumericSelector$Type__fields_[] = {
          DECLARE_GET_FIELD(t_SortedNumericSelector$Type, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SortedNumericSelector$Type__methods_[] = {
          DECLARE_METHOD(t_SortedNumericSelector$Type, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedNumericSelector$Type, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedNumericSelector$Type, of_, METH_VARARGS),
          DECLARE_METHOD(t_SortedNumericSelector$Type, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SortedNumericSelector$Type, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SortedNumericSelector$Type, t_SortedNumericSelector$Type, ::java::lang::Enum, SortedNumericSelector$Type, abstract_init, 0, 0, t_SortedNumericSelector$Type__fields_, 0, 0);
        PyObject *t_SortedNumericSelector$Type::wrap_Object(const SortedNumericSelector$Type& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SortedNumericSelector$Type::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SortedNumericSelector$Type *self = (t_SortedNumericSelector$Type *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_SortedNumericSelector$Type::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SortedNumericSelector$Type::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SortedNumericSelector$Type *self = (t_SortedNumericSelector$Type *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_SortedNumericSelector$Type::install(PyObject *module)
        {
          installType(&PY_TYPE(SortedNumericSelector$Type), module, "SortedNumericSelector$Type", 0);
        }

        void t_SortedNumericSelector$Type::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SortedNumericSelector$Type).tp_dict, "class_", make_descriptor(SortedNumericSelector$Type::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SortedNumericSelector$Type).tp_dict, "wrapfn_", make_descriptor(t_SortedNumericSelector$Type::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SortedNumericSelector$Type).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(SortedNumericSelector$Type::initializeClass);
          PyDict_SetItemString(PY_TYPE(SortedNumericSelector$Type).tp_dict, "MAX", make_descriptor(t_SortedNumericSelector$Type::wrap_Object(*SortedNumericSelector$Type::MAX)));
          PyDict_SetItemString(PY_TYPE(SortedNumericSelector$Type).tp_dict, "MIN", make_descriptor(t_SortedNumericSelector$Type::wrap_Object(*SortedNumericSelector$Type::MIN)));
        }

        static PyObject *t_SortedNumericSelector$Type_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortedNumericSelector$Type::initializeClass, 1)))
            return NULL;
          return t_SortedNumericSelector$Type::wrap_Object(SortedNumericSelector$Type(((t_SortedNumericSelector$Type *) arg)->object.this$));
        }
        static PyObject *t_SortedNumericSelector$Type_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortedNumericSelector$Type::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SortedNumericSelector$Type_of_(t_SortedNumericSelector$Type *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_SortedNumericSelector$Type_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          SortedNumericSelector$Type result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::SortedNumericSelector$Type::valueOf(a0));
            return t_SortedNumericSelector$Type::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_SortedNumericSelector$Type_values(PyTypeObject *type)
        {
          JArray< SortedNumericSelector$Type > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::search::SortedNumericSelector$Type::values());
          return JArray<jobject>(result.this$).wrap(t_SortedNumericSelector$Type::wrap_jobject);
        }
        static PyObject *t_SortedNumericSelector$Type_get__parameters_(t_SortedNumericSelector$Type *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/CollectionUtil.h"
#include "java/util/Comparator.h"
#include "java/lang/Class.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *CollectionUtil::class$ = NULL;
        jmethodID *CollectionUtil::mids$ = NULL;
        bool CollectionUtil::live$ = false;

        jclass CollectionUtil::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/CollectionUtil");

            mids$ = new jmethodID[max_mid];
            mids$[mid_introSort_1fde8fc3] = env->getStaticMethodID(cls, "introSort", "(Ljava/util/List;)V");
            mids$[mid_introSort_b59215b8] = env->getStaticMethodID(cls, "introSort", "(Ljava/util/List;Ljava/util/Comparator;)V");
            mids$[mid_timSort_1fde8fc3] = env->getStaticMethodID(cls, "timSort", "(Ljava/util/List;)V");
            mids$[mid_timSort_b59215b8] = env->getStaticMethodID(cls, "timSort", "(Ljava/util/List;Ljava/util/Comparator;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void CollectionUtil::introSort(const ::java::util::List & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_introSort_1fde8fc3], a0.this$);
        }

        void CollectionUtil::introSort(const ::java::util::List & a0, const ::java::util::Comparator & a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_introSort_b59215b8], a0.this$, a1.this$);
        }

        void CollectionUtil::timSort(const ::java::util::List & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_timSort_1fde8fc3], a0.this$);
        }

        void CollectionUtil::timSort(const ::java::util::List & a0, const ::java::util::Comparator & a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_timSort_b59215b8], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_CollectionUtil_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CollectionUtil_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CollectionUtil_introSort(PyTypeObject *type, PyObject *args);
        static PyObject *t_CollectionUtil_timSort(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_CollectionUtil__methods_[] = {
          DECLARE_METHOD(t_CollectionUtil, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollectionUtil, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollectionUtil, introSort, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CollectionUtil, timSort, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CollectionUtil, t_CollectionUtil, ::java::lang::Object, CollectionUtil, abstract_init, 0, 0, 0, 0, 0);

        void t_CollectionUtil::install(PyObject *module)
        {
          installType(&PY_TYPE(CollectionUtil), module, "CollectionUtil", 0);
        }

        void t_CollectionUtil::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CollectionUtil).tp_dict, "class_", make_descriptor(CollectionUtil::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CollectionUtil).tp_dict, "wrapfn_", make_descriptor(t_CollectionUtil::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CollectionUtil).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CollectionUtil_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CollectionUtil::initializeClass, 1)))
            return NULL;
          return t_CollectionUtil::wrap_Object(CollectionUtil(((t_CollectionUtil *) arg)->object.this$));
        }
        static PyObject *t_CollectionUtil_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CollectionUtil::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CollectionUtil_introSort(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::CollectionUtil::introSort(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::util::Comparator a1((jobject) NULL);
              PyTypeObject **p1;

              if (!parseArgs(args, "KK", ::java::util::List::initializeClass, ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &p1, ::java::util::t_Comparator::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::CollectionUtil::introSort(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError(type, "introSort", args);
          return NULL;
        }

        static PyObject *t_CollectionUtil_timSort(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::CollectionUtil::timSort(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::util::Comparator a1((jobject) NULL);
              PyTypeObject **p1;

              if (!parseArgs(args, "KK", ::java::util::List::initializeClass, ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &p1, ::java::util::t_Comparator::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::CollectionUtil::timSort(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError(type, "timSort", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter.h"
#include "org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter$StemmerOverrideMap.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *StemmerOverrideFilter::class$ = NULL;
          jmethodID *StemmerOverrideFilter::mids$ = NULL;
          bool StemmerOverrideFilter::live$ = false;

          jclass StemmerOverrideFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d4e7ec87] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter$StemmerOverrideMap;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StemmerOverrideFilter::StemmerOverrideFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::miscellaneous::StemmerOverrideFilter$StemmerOverrideMap & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_d4e7ec87, a0.this$, a1.this$)) {}

          jboolean StemmerOverrideFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter$Builder.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_StemmerOverrideFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StemmerOverrideFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StemmerOverrideFilter_init_(t_StemmerOverrideFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StemmerOverrideFilter_incrementToken(t_StemmerOverrideFilter *self, PyObject *args);

          static PyMethodDef t_StemmerOverrideFilter__methods_[] = {
            DECLARE_METHOD(t_StemmerOverrideFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StemmerOverrideFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StemmerOverrideFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StemmerOverrideFilter, t_StemmerOverrideFilter, ::org::apache::lucene::analysis::TokenFilter, StemmerOverrideFilter, t_StemmerOverrideFilter_init_, 0, 0, 0, 0, 0);

          void t_StemmerOverrideFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(StemmerOverrideFilter), module, "StemmerOverrideFilter", 0);
            PyDict_SetItemString(PY_TYPE(StemmerOverrideFilter).tp_dict, "Builder", make_descriptor(&PY_TYPE(StemmerOverrideFilter$Builder)));
            PyDict_SetItemString(PY_TYPE(StemmerOverrideFilter).tp_dict, "StemmerOverrideMap", make_descriptor(&PY_TYPE(StemmerOverrideFilter$StemmerOverrideMap)));
          }

          void t_StemmerOverrideFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StemmerOverrideFilter).tp_dict, "class_", make_descriptor(StemmerOverrideFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StemmerOverrideFilter).tp_dict, "wrapfn_", make_descriptor(t_StemmerOverrideFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StemmerOverrideFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StemmerOverrideFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StemmerOverrideFilter::initializeClass, 1)))
              return NULL;
            return t_StemmerOverrideFilter::wrap_Object(StemmerOverrideFilter(((t_StemmerOverrideFilter *) arg)->object.this$));
          }
          static PyObject *t_StemmerOverrideFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StemmerOverrideFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StemmerOverrideFilter_init_(t_StemmerOverrideFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::miscellaneous::StemmerOverrideFilter$StemmerOverrideMap a1((jobject) NULL);
            StemmerOverrideFilter object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::miscellaneous::StemmerOverrideFilter$StemmerOverrideMap::initializeClass, &a0, &a1))
            {
              INT_CALL(object = StemmerOverrideFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StemmerOverrideFilter_incrementToken(t_StemmerOverrideFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(StemmerOverrideFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/BufferedIndexInput.h"
#include "org/apache/lucene/store/RandomAccessInput.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IOContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *BufferedIndexInput::class$ = NULL;
        jmethodID *BufferedIndexInput::mids$ = NULL;
        bool BufferedIndexInput::live$ = false;
        jint BufferedIndexInput::BUFFER_SIZE = (jint) 0;
        jint BufferedIndexInput::MERGE_BUFFER_SIZE = (jint) 0;
        jint BufferedIndexInput::MIN_BUFFER_SIZE = (jint) 0;

        jclass BufferedIndexInput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/BufferedIndexInput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_init$_501c6f1c] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)V");
            mids$[mid_init$_6e53ccc6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;I)V");
            mids$[mid_bufferSize_e43288a5] = env->getStaticMethodID(cls, "bufferSize", "(Lorg/apache/lucene/store/IOContext;)I");
            mids$[mid_clone_c014db58] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/store/BufferedIndexInput;");
            mids$[mid_getBufferSize_54c6a179] = env->getMethodID(cls, "getBufferSize", "()I");
            mids$[mid_getFilePointer_54c6a17a] = env->getMethodID(cls, "getFilePointer", "()J");
            mids$[mid_readByte_54c6a172] = env->getMethodID(cls, "readByte", "()B");
            mids$[mid_readByte_0ee6df3b] = env->getMethodID(cls, "readByte", "(J)B");
            mids$[mid_readBytes_86f4435f] = env->getMethodID(cls, "readBytes", "([BII)V");
            mids$[mid_readBytes_717964e8] = env->getMethodID(cls, "readBytes", "([BIIZ)V");
            mids$[mid_readInt_54c6a179] = env->getMethodID(cls, "readInt", "()I");
            mids$[mid_readInt_0ee6df30] = env->getMethodID(cls, "readInt", "(J)I");
            mids$[mid_readLong_54c6a17a] = env->getMethodID(cls, "readLong", "()J");
            mids$[mid_readLong_0ee6df33] = env->getMethodID(cls, "readLong", "(J)J");
            mids$[mid_readShort_54c6a163] = env->getMethodID(cls, "readShort", "()S");
            mids$[mid_readShort_0ee6df2a] = env->getMethodID(cls, "readShort", "(J)S");
            mids$[mid_readVInt_54c6a179] = env->getMethodID(cls, "readVInt", "()I");
            mids$[mid_readVLong_54c6a17a] = env->getMethodID(cls, "readVLong", "()J");
            mids$[mid_seek_0ee6df2f] = env->getMethodID(cls, "seek", "(J)V");
            mids$[mid_setBufferSize_39c7bd3c] = env->getMethodID(cls, "setBufferSize", "(I)V");
            mids$[mid_slice_d00c83eb] = env->getMethodID(cls, "slice", "(Ljava/lang/String;JJ)Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_wrap_3bd7a9bc] = env->getStaticMethodID(cls, "wrap", "(Ljava/lang/String;Lorg/apache/lucene/store/IndexInput;JJ)Lorg/apache/lucene/store/BufferedIndexInput;");
            mids$[mid_flushBuffer_b3b465fc] = env->getMethodID(cls, "flushBuffer", "(Lorg/apache/lucene/store/IndexOutput;J)I");
            mids$[mid_newBuffer_49b4f12b] = env->getMethodID(cls, "newBuffer", "([B)V");
            mids$[mid_readInternal_86f4435f] = env->getMethodID(cls, "readInternal", "([BII)V");
            mids$[mid_seekInternal_0ee6df2f] = env->getMethodID(cls, "seekInternal", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            BUFFER_SIZE = env->getStaticIntField(cls, "BUFFER_SIZE");
            MERGE_BUFFER_SIZE = env->getStaticIntField(cls, "MERGE_BUFFER_SIZE");
            MIN_BUFFER_SIZE = env->getStaticIntField(cls, "MIN_BUFFER_SIZE");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BufferedIndexInput::BufferedIndexInput(const ::java::lang::String & a0) : ::org::apache::lucene::store::IndexInput(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        BufferedIndexInput::BufferedIndexInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) : ::org::apache::lucene::store::IndexInput(env->newObject(initializeClass, &mids$, mid_init$_501c6f1c, a0.this$, a1.this$)) {}

        BufferedIndexInput::BufferedIndexInput(const ::java::lang::String & a0, jint a1) : ::org::apache::lucene::store::IndexInput(env->newObject(initializeClass, &mids$, mid_init$_6e53ccc6, a0.this$, a1)) {}

        jint BufferedIndexInput::bufferSize(const ::org::apache::lucene::store::IOContext & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_bufferSize_e43288a5], a0.this$);
        }

        BufferedIndexInput BufferedIndexInput::clone() const
        {
          return BufferedIndexInput(env->callObjectMethod(this$, mids$[mid_clone_c014db58]));
        }

        jint BufferedIndexInput::getBufferSize() const
        {
          return env->callIntMethod(this$, mids$[mid_getBufferSize_54c6a179]);
        }

        jlong BufferedIndexInput::getFilePointer() const
        {
          return env->callLongMethod(this$, mids$[mid_getFilePointer_54c6a17a]);
        }

        jbyte BufferedIndexInput::readByte() const
        {
          return env->callByteMethod(this$, mids$[mid_readByte_54c6a172]);
        }

        jbyte BufferedIndexInput::readByte(jlong a0) const
        {
          return env->callByteMethod(this$, mids$[mid_readByte_0ee6df3b], a0);
        }

        void BufferedIndexInput::readBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_readBytes_86f4435f], a0.this$, a1, a2);
        }

        void BufferedIndexInput::readBytes(const JArray< jbyte > & a0, jint a1, jint a2, jboolean a3) const
        {
          env->callVoidMethod(this$, mids$[mid_readBytes_717964e8], a0.this$, a1, a2, a3);
        }

        jint BufferedIndexInput::readInt() const
        {
          return env->callIntMethod(this$, mids$[mid_readInt_54c6a179]);
        }

        jint BufferedIndexInput::readInt(jlong a0) const
        {
          return env->callIntMethod(this$, mids$[mid_readInt_0ee6df30], a0);
        }

        jlong BufferedIndexInput::readLong() const
        {
          return env->callLongMethod(this$, mids$[mid_readLong_54c6a17a]);
        }

        jlong BufferedIndexInput::readLong(jlong a0) const
        {
          return env->callLongMethod(this$, mids$[mid_readLong_0ee6df33], a0);
        }

        jshort BufferedIndexInput::readShort() const
        {
          return env->callShortMethod(this$, mids$[mid_readShort_54c6a163]);
        }

        jshort BufferedIndexInput::readShort(jlong a0) const
        {
          return env->callShortMethod(this$, mids$[mid_readShort_0ee6df2a], a0);
        }

        jint BufferedIndexInput::readVInt() const
        {
          return env->callIntMethod(this$, mids$[mid_readVInt_54c6a179]);
        }

        jlong BufferedIndexInput::readVLong() const
        {
          return env->callLongMethod(this$, mids$[mid_readVLong_54c6a17a]);
        }

        void BufferedIndexInput::seek(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_seek_0ee6df2f], a0);
        }

        void BufferedIndexInput::setBufferSize(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBufferSize_39c7bd3c], a0);
        }

        ::org::apache::lucene::store::IndexInput BufferedIndexInput::slice(const ::java::lang::String & a0, jlong a1, jlong a2) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_slice_d00c83eb], a0.this$, a1, a2));
        }

        BufferedIndexInput BufferedIndexInput::wrap(const ::java::lang::String & a0, const ::org::apache::lucene::store::IndexInput & a1, jlong a2, jlong a3)
        {
          jclass cls = env->getClass(initializeClass);
          return BufferedIndexInput(env->callStaticObjectMethod(cls, mids$[mid_wrap_3bd7a9bc], a0.this$, a1.this$, a2, a3));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_BufferedIndexInput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BufferedIndexInput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BufferedIndexInput_init_(t_BufferedIndexInput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BufferedIndexInput_bufferSize(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BufferedIndexInput_clone(t_BufferedIndexInput *self, PyObject *args);
        static PyObject *t_BufferedIndexInput_getBufferSize(t_BufferedIndexInput *self);
        static PyObject *t_BufferedIndexInput_getFilePointer(t_BufferedIndexInput *self, PyObject *args);
        static PyObject *t_BufferedIndexInput_readByte(t_BufferedIndexInput *self, PyObject *args);
        static PyObject *t_BufferedIndexInput_readBytes(t_BufferedIndexInput *self, PyObject *args);
        static PyObject *t_BufferedIndexInput_readInt(t_BufferedIndexInput *self, PyObject *args);
        static PyObject *t_BufferedIndexInput_readLong(t_BufferedIndexInput *self, PyObject *args);
        static PyObject *t_BufferedIndexInput_readShort(t_BufferedIndexInput *self, PyObject *args);
        static PyObject *t_BufferedIndexInput_readVInt(t_BufferedIndexInput *self, PyObject *args);
        static PyObject *t_BufferedIndexInput_readVLong(t_BufferedIndexInput *self, PyObject *args);
        static PyObject *t_BufferedIndexInput_seek(t_BufferedIndexInput *self, PyObject *args);
        static PyObject *t_BufferedIndexInput_setBufferSize(t_BufferedIndexInput *self, PyObject *arg);
        static PyObject *t_BufferedIndexInput_slice(t_BufferedIndexInput *self, PyObject *args);
        static PyObject *t_BufferedIndexInput_wrap(PyTypeObject *type, PyObject *args);
        static PyObject *t_BufferedIndexInput_get__filePointer(t_BufferedIndexInput *self, void *data);
        static PyGetSetDef t_BufferedIndexInput__fields_[] = {
          DECLARE_GET_FIELD(t_BufferedIndexInput, filePointer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BufferedIndexInput__methods_[] = {
          DECLARE_METHOD(t_BufferedIndexInput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BufferedIndexInput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BufferedIndexInput, bufferSize, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BufferedIndexInput, clone, METH_VARARGS),
          DECLARE_METHOD(t_BufferedIndexInput, getBufferSize, METH_NOARGS),
          DECLARE_METHOD(t_BufferedIndexInput, getFilePointer, METH_VARARGS),
          DECLARE_METHOD(t_BufferedIndexInput, readByte, METH_VARARGS),
          DECLARE_METHOD(t_BufferedIndexInput, readBytes, METH_VARARGS),
          DECLARE_METHOD(t_BufferedIndexInput, readInt, METH_VARARGS),
          DECLARE_METHOD(t_BufferedIndexInput, readLong, METH_VARARGS),
          DECLARE_METHOD(t_BufferedIndexInput, readShort, METH_VARARGS),
          DECLARE_METHOD(t_BufferedIndexInput, readVInt, METH_VARARGS),
          DECLARE_METHOD(t_BufferedIndexInput, readVLong, METH_VARARGS),
          DECLARE_METHOD(t_BufferedIndexInput, seek, METH_VARARGS),
          DECLARE_METHOD(t_BufferedIndexInput, setBufferSize, METH_O),
          DECLARE_METHOD(t_BufferedIndexInput, slice, METH_VARARGS),
          DECLARE_METHOD(t_BufferedIndexInput, wrap, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BufferedIndexInput, t_BufferedIndexInput, ::org::apache::lucene::store::IndexInput, BufferedIndexInput, t_BufferedIndexInput_init_, 0, 0, t_BufferedIndexInput__fields_, 0, 0);

        void t_BufferedIndexInput::install(PyObject *module)
        {
          installType(&PY_TYPE(BufferedIndexInput), module, "BufferedIndexInput", 0);
        }

        void t_BufferedIndexInput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BufferedIndexInput).tp_dict, "class_", make_descriptor(BufferedIndexInput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BufferedIndexInput).tp_dict, "wrapfn_", make_descriptor(t_BufferedIndexInput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BufferedIndexInput).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(BufferedIndexInput::initializeClass);
          PyDict_SetItemString(PY_TYPE(BufferedIndexInput).tp_dict, "BUFFER_SIZE", make_descriptor(BufferedIndexInput::BUFFER_SIZE));
          PyDict_SetItemString(PY_TYPE(BufferedIndexInput).tp_dict, "MERGE_BUFFER_SIZE", make_descriptor(BufferedIndexInput::MERGE_BUFFER_SIZE));
          PyDict_SetItemString(PY_TYPE(BufferedIndexInput).tp_dict, "MIN_BUFFER_SIZE", make_descriptor(BufferedIndexInput::MIN_BUFFER_SIZE));
        }

        static PyObject *t_BufferedIndexInput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BufferedIndexInput::initializeClass, 1)))
            return NULL;
          return t_BufferedIndexInput::wrap_Object(BufferedIndexInput(((t_BufferedIndexInput *) arg)->object.this$));
        }
        static PyObject *t_BufferedIndexInput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BufferedIndexInput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BufferedIndexInput_init_(t_BufferedIndexInput *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              BufferedIndexInput object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = BufferedIndexInput(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::store::IOContext a1((jobject) NULL);
              BufferedIndexInput object((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
              {
                INT_CALL(object = BufferedIndexInput(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              BufferedIndexInput object((jobject) NULL);

              if (!parseArgs(args, "sI", &a0, &a1))
              {
                INT_CALL(object = BufferedIndexInput(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BufferedIndexInput_bufferSize(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::store::IOContext a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::store::IOContext::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::store::BufferedIndexInput::bufferSize(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "bufferSize", arg);
          return NULL;
        }

        static PyObject *t_BufferedIndexInput_clone(t_BufferedIndexInput *self, PyObject *args)
        {
          BufferedIndexInput result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.clone());
            return t_BufferedIndexInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(BufferedIndexInput), (PyObject *) self, "clone", args, 2);
        }

        static PyObject *t_BufferedIndexInput_getBufferSize(t_BufferedIndexInput *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getBufferSize());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_BufferedIndexInput_getFilePointer(t_BufferedIndexInput *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getFilePointer());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(BufferedIndexInput), (PyObject *) self, "getFilePointer", args, 2);
        }

        static PyObject *t_BufferedIndexInput_readByte(t_BufferedIndexInput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jbyte result;
              OBJ_CALL(result = self->object.readByte());
              return PyInt_FromLong((long) result);
            }
            break;
           case 1:
            {
              jlong a0;
              jbyte result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.readByte(a0));
                return PyInt_FromLong((long) result);
              }
            }
          }

          return callSuper(&PY_TYPE(BufferedIndexInput), (PyObject *) self, "readByte", args, 2);
        }

        static PyObject *t_BufferedIndexInput_readBytes(t_BufferedIndexInput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.readBytes(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
            break;
           case 4:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              jboolean a3;

              if (!parseArgs(args, "[BIIZ", &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(self->object.readBytes(a0, a1, a2, a3));
                Py_RETURN_NONE;
              }
            }
          }

          return callSuper(&PY_TYPE(BufferedIndexInput), (PyObject *) self, "readBytes", args, 2);
        }

        static PyObject *t_BufferedIndexInput_readInt(t_BufferedIndexInput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jint result;
              OBJ_CALL(result = self->object.readInt());
              return PyInt_FromLong((long) result);
            }
            break;
           case 1:
            {
              jlong a0;
              jint result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.readInt(a0));
                return PyInt_FromLong((long) result);
              }
            }
          }

          return callSuper(&PY_TYPE(BufferedIndexInput), (PyObject *) self, "readInt", args, 2);
        }

        static PyObject *t_BufferedIndexInput_readLong(t_BufferedIndexInput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.readLong());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;
              jlong result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.readLong(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          return callSuper(&PY_TYPE(BufferedIndexInput), (PyObject *) self, "readLong", args, 2);
        }

        static PyObject *t_BufferedIndexInput_readShort(t_BufferedIndexInput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jshort result;
              OBJ_CALL(result = self->object.readShort());
              return PyInt_FromLong((long) result);
            }
            break;
           case 1:
            {
              jlong a0;
              jshort result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.readShort(a0));
                return PyInt_FromLong((long) result);
              }
            }
          }

          return callSuper(&PY_TYPE(BufferedIndexInput), (PyObject *) self, "readShort", args, 2);
        }

        static PyObject *t_BufferedIndexInput_readVInt(t_BufferedIndexInput *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readVInt());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(BufferedIndexInput), (PyObject *) self, "readVInt", args, 2);
        }

        static PyObject *t_BufferedIndexInput_readVLong(t_BufferedIndexInput *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readVLong());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(BufferedIndexInput), (PyObject *) self, "readVLong", args, 2);
        }

        static PyObject *t_BufferedIndexInput_seek(t_BufferedIndexInput *self, PyObject *args)
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.seek(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(BufferedIndexInput), (PyObject *) self, "seek", args, 2);
        }

        static PyObject *t_BufferedIndexInput_setBufferSize(t_BufferedIndexInput *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setBufferSize(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setBufferSize", arg);
          return NULL;
        }

        static PyObject *t_BufferedIndexInput_slice(t_BufferedIndexInput *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong a1;
          jlong a2;
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sJJ", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.slice(a0, a1, a2));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(BufferedIndexInput), (PyObject *) self, "slice", args, 2);
        }

        static PyObject *t_BufferedIndexInput_wrap(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IndexInput a1((jobject) NULL);
          jlong a2;
          jlong a3;
          BufferedIndexInput result((jobject) NULL);

          if (!parseArgs(args, "skJJ", ::org::apache::lucene::store::IndexInput::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::org::apache::lucene::store::BufferedIndexInput::wrap(a0, a1, a2, a3));
            return t_BufferedIndexInput::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "wrap", args);
          return NULL;
        }

        static PyObject *t_BufferedIndexInput_get__filePointer(t_BufferedIndexInput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getFilePointer());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/VectorValueSource.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *VectorValueSource::class$ = NULL;
            jmethodID *VectorValueSource::mids$ = NULL;
            bool VectorValueSource::live$ = false;

            jclass VectorValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/VectorValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_1fde8fc3] = env->getMethodID(cls, "<init>", "(Ljava/util/List;)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_dimension_54c6a179] = env->getMethodID(cls, "dimension", "()I");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getSources_87851566] = env->getMethodID(cls, "getSources", "()Ljava/util/List;");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            VectorValueSource::VectorValueSource(const ::java::util::List & a0) : ::org::apache::lucene::queries::function::valuesource::MultiValueSource(env->newObject(initializeClass, &mids$, mid_init$_1fde8fc3, a0.this$)) {}

            void VectorValueSource::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String VectorValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jint VectorValueSource::dimension() const
            {
              return env->callIntMethod(this$, mids$[mid_dimension_54c6a179]);
            }

            jboolean VectorValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::java::util::List VectorValueSource::getSources() const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getSources_87851566]));
            }

            ::org::apache::lucene::queries::function::FunctionValues VectorValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint VectorValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }

            ::java::lang::String VectorValueSource::name() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_VectorValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_VectorValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_VectorValueSource_init_(t_VectorValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_VectorValueSource_createWeight(t_VectorValueSource *self, PyObject *args);
            static PyObject *t_VectorValueSource_description(t_VectorValueSource *self, PyObject *args);
            static PyObject *t_VectorValueSource_dimension(t_VectorValueSource *self, PyObject *args);
            static PyObject *t_VectorValueSource_equals(t_VectorValueSource *self, PyObject *args);
            static PyObject *t_VectorValueSource_getSources(t_VectorValueSource *self);
            static PyObject *t_VectorValueSource_getValues(t_VectorValueSource *self, PyObject *args);
            static PyObject *t_VectorValueSource_hashCode(t_VectorValueSource *self, PyObject *args);
            static PyObject *t_VectorValueSource_name(t_VectorValueSource *self);
            static PyObject *t_VectorValueSource_get__sources(t_VectorValueSource *self, void *data);
            static PyGetSetDef t_VectorValueSource__fields_[] = {
              DECLARE_GET_FIELD(t_VectorValueSource, sources),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_VectorValueSource__methods_[] = {
              DECLARE_METHOD(t_VectorValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_VectorValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_VectorValueSource, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_VectorValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_VectorValueSource, dimension, METH_VARARGS),
              DECLARE_METHOD(t_VectorValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_VectorValueSource, getSources, METH_NOARGS),
              DECLARE_METHOD(t_VectorValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_VectorValueSource, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_VectorValueSource, name, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(VectorValueSource, t_VectorValueSource, ::org::apache::lucene::queries::function::valuesource::MultiValueSource, VectorValueSource, t_VectorValueSource_init_, 0, 0, t_VectorValueSource__fields_, 0, 0);

            void t_VectorValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(VectorValueSource), module, "VectorValueSource", 0);
            }

            void t_VectorValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(VectorValueSource).tp_dict, "class_", make_descriptor(VectorValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(VectorValueSource).tp_dict, "wrapfn_", make_descriptor(t_VectorValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(VectorValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_VectorValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, VectorValueSource::initializeClass, 1)))
                return NULL;
              return t_VectorValueSource::wrap_Object(VectorValueSource(((t_VectorValueSource *) arg)->object.this$));
            }
            static PyObject *t_VectorValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, VectorValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_VectorValueSource_init_(t_VectorValueSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              VectorValueSource object((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
              {
                INT_CALL(object = VectorValueSource(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_VectorValueSource_createWeight(t_VectorValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(VectorValueSource), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_VectorValueSource_description(t_VectorValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(VectorValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_VectorValueSource_dimension(t_VectorValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.dimension());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(VectorValueSource), (PyObject *) self, "dimension", args, 2);
            }

            static PyObject *t_VectorValueSource_equals(t_VectorValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(VectorValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_VectorValueSource_getSources(t_VectorValueSource *self)
            {
              ::java::util::List result((jobject) NULL);
              OBJ_CALL(result = self->object.getSources());
              return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::queries::function::PY_TYPE(ValueSource));
            }

            static PyObject *t_VectorValueSource_getValues(t_VectorValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(VectorValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_VectorValueSource_hashCode(t_VectorValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(VectorValueSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_VectorValueSource_name(t_VectorValueSource *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.name());
              return j2p(result);
            }

            static PyObject *t_VectorValueSource_get__sources(t_VectorValueSource *self, void *data)
            {
              ::java::util::List value((jobject) NULL);
              OBJ_CALL(value = self->object.getSources());
              return ::java::util::t_List::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/FST$BytesReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *FST$BytesReader::class$ = NULL;
          jmethodID *FST$BytesReader::mids$ = NULL;
          bool FST$BytesReader::live$ = false;

          jclass FST$BytesReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/FST$BytesReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getPosition_54c6a17a] = env->getMethodID(cls, "getPosition", "()J");
              mids$[mid_reversed_54c6a16a] = env->getMethodID(cls, "reversed", "()Z");
              mids$[mid_setPosition_0ee6df2f] = env->getMethodID(cls, "setPosition", "(J)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FST$BytesReader::FST$BytesReader() : ::org::apache::lucene::store::DataInput(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jlong FST$BytesReader::getPosition() const
          {
            return env->callLongMethod(this$, mids$[mid_getPosition_54c6a17a]);
          }

          jboolean FST$BytesReader::reversed() const
          {
            return env->callBooleanMethod(this$, mids$[mid_reversed_54c6a16a]);
          }

          void FST$BytesReader::setPosition(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPosition_0ee6df2f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_FST$BytesReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FST$BytesReader_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FST$BytesReader_of_(t_FST$BytesReader *self, PyObject *args);
          static int t_FST$BytesReader_init_(t_FST$BytesReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FST$BytesReader_getPosition(t_FST$BytesReader *self);
          static PyObject *t_FST$BytesReader_reversed(t_FST$BytesReader *self);
          static PyObject *t_FST$BytesReader_setPosition(t_FST$BytesReader *self, PyObject *arg);
          static PyObject *t_FST$BytesReader_get__position(t_FST$BytesReader *self, void *data);
          static int t_FST$BytesReader_set__position(t_FST$BytesReader *self, PyObject *arg, void *data);
          static PyObject *t_FST$BytesReader_get__parameters_(t_FST$BytesReader *self, void *data);
          static PyGetSetDef t_FST$BytesReader__fields_[] = {
            DECLARE_GETSET_FIELD(t_FST$BytesReader, position),
            DECLARE_GET_FIELD(t_FST$BytesReader, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FST$BytesReader__methods_[] = {
            DECLARE_METHOD(t_FST$BytesReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FST$BytesReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FST$BytesReader, of_, METH_VARARGS),
            DECLARE_METHOD(t_FST$BytesReader, getPosition, METH_NOARGS),
            DECLARE_METHOD(t_FST$BytesReader, reversed, METH_NOARGS),
            DECLARE_METHOD(t_FST$BytesReader, setPosition, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FST$BytesReader, t_FST$BytesReader, ::org::apache::lucene::store::DataInput, FST$BytesReader, t_FST$BytesReader_init_, 0, 0, t_FST$BytesReader__fields_, 0, 0);
          PyObject *t_FST$BytesReader::wrap_Object(const FST$BytesReader& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FST$BytesReader::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FST$BytesReader *self = (t_FST$BytesReader *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_FST$BytesReader::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FST$BytesReader::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FST$BytesReader *self = (t_FST$BytesReader *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_FST$BytesReader::install(PyObject *module)
          {
            installType(&PY_TYPE(FST$BytesReader), module, "FST$BytesReader", 0);
          }

          void t_FST$BytesReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FST$BytesReader).tp_dict, "class_", make_descriptor(FST$BytesReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FST$BytesReader).tp_dict, "wrapfn_", make_descriptor(t_FST$BytesReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FST$BytesReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FST$BytesReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FST$BytesReader::initializeClass, 1)))
              return NULL;
            return t_FST$BytesReader::wrap_Object(FST$BytesReader(((t_FST$BytesReader *) arg)->object.this$));
          }
          static PyObject *t_FST$BytesReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FST$BytesReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FST$BytesReader_of_(t_FST$BytesReader *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_FST$BytesReader_init_(t_FST$BytesReader *self, PyObject *args, PyObject *kwds)
          {
            FST$BytesReader object((jobject) NULL);

            INT_CALL(object = FST$BytesReader());
            self->object = object;

            return 0;
          }

          static PyObject *t_FST$BytesReader_getPosition(t_FST$BytesReader *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getPosition());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_FST$BytesReader_reversed(t_FST$BytesReader *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.reversed());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_FST$BytesReader_setPosition(t_FST$BytesReader *self, PyObject *arg)
          {
            jlong a0;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(self->object.setPosition(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPosition", arg);
            return NULL;
          }
          static PyObject *t_FST$BytesReader_get__parameters_(t_FST$BytesReader *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_FST$BytesReader_get__position(t_FST$BytesReader *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getPosition());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_FST$BytesReader_set__position(t_FST$BytesReader *self, PyObject *arg, void *data)
          {
            {
              jlong value;
              if (!parseArg(arg, "J", &value))
              {
                INT_CALL(self->object.setPosition(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "position", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/NoMergePolicy.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "org/apache/lucene/index/SegmentInfos.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/MergePolicy$MergeSpecification.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "java/lang/Boolean.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *NoMergePolicy::class$ = NULL;
        jmethodID *NoMergePolicy::mids$ = NULL;
        bool NoMergePolicy::live$ = false;
        ::org::apache::lucene::index::MergePolicy *NoMergePolicy::INSTANCE = NULL;

        jclass NoMergePolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/NoMergePolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_findForcedDeletesMerges_581dbc49] = env->getMethodID(cls, "findForcedDeletesMerges", "(Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_findForcedMerges_4fe4a5b5] = env->getMethodID(cls, "findForcedMerges", "(Lorg/apache/lucene/index/SegmentInfos;ILjava/util/Map;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_findMerges_cada0df0] = env->getMethodID(cls, "findMerges", "(Lorg/apache/lucene/index/MergeTrigger;Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_useCompoundFile_70dc8488] = env->getMethodID(cls, "useCompoundFile", "(Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/index/IndexWriter;)Z");
            mids$[mid_size_5454cb07] = env->getMethodID(cls, "size", "(Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/index/IndexWriter;)J");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            INSTANCE = new ::org::apache::lucene::index::MergePolicy(env->getStaticObjectField(cls, "INSTANCE", "Lorg/apache/lucene/index/MergePolicy;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void NoMergePolicy::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification NoMergePolicy::findForcedDeletesMerges(const ::org::apache::lucene::index::SegmentInfos & a0, const ::org::apache::lucene::index::IndexWriter & a1) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findForcedDeletesMerges_581dbc49], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification NoMergePolicy::findForcedMerges(const ::org::apache::lucene::index::SegmentInfos & a0, jint a1, const ::java::util::Map & a2, const ::org::apache::lucene::index::IndexWriter & a3) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findForcedMerges_4fe4a5b5], a0.this$, a1, a2.this$, a3.this$));
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification NoMergePolicy::findMerges(const ::org::apache::lucene::index::MergeTrigger & a0, const ::org::apache::lucene::index::SegmentInfos & a1, const ::org::apache::lucene::index::IndexWriter & a2) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findMerges_cada0df0], a0.this$, a1.this$, a2.this$));
        }

        ::java::lang::String NoMergePolicy::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        jboolean NoMergePolicy::useCompoundFile(const ::org::apache::lucene::index::SegmentInfos & a0, const ::org::apache::lucene::index::SegmentCommitInfo & a1, const ::org::apache::lucene::index::IndexWriter & a2) const
        {
          return env->callBooleanMethod(this$, mids$[mid_useCompoundFile_70dc8488], a0.this$, a1.this$, a2.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_NoMergePolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NoMergePolicy_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NoMergePolicy_close(t_NoMergePolicy *self, PyObject *args);
        static PyObject *t_NoMergePolicy_findForcedDeletesMerges(t_NoMergePolicy *self, PyObject *args);
        static PyObject *t_NoMergePolicy_findForcedMerges(t_NoMergePolicy *self, PyObject *args);
        static PyObject *t_NoMergePolicy_findMerges(t_NoMergePolicy *self, PyObject *args);
        static PyObject *t_NoMergePolicy_toString(t_NoMergePolicy *self, PyObject *args);
        static PyObject *t_NoMergePolicy_useCompoundFile(t_NoMergePolicy *self, PyObject *args);

        static PyMethodDef t_NoMergePolicy__methods_[] = {
          DECLARE_METHOD(t_NoMergePolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NoMergePolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NoMergePolicy, close, METH_VARARGS),
          DECLARE_METHOD(t_NoMergePolicy, findForcedDeletesMerges, METH_VARARGS),
          DECLARE_METHOD(t_NoMergePolicy, findForcedMerges, METH_VARARGS),
          DECLARE_METHOD(t_NoMergePolicy, findMerges, METH_VARARGS),
          DECLARE_METHOD(t_NoMergePolicy, toString, METH_VARARGS),
          DECLARE_METHOD(t_NoMergePolicy, useCompoundFile, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NoMergePolicy, t_NoMergePolicy, ::org::apache::lucene::index::MergePolicy, NoMergePolicy, abstract_init, 0, 0, 0, 0, 0);

        void t_NoMergePolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(NoMergePolicy), module, "NoMergePolicy", 0);
        }

        void t_NoMergePolicy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NoMergePolicy).tp_dict, "class_", make_descriptor(NoMergePolicy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NoMergePolicy).tp_dict, "wrapfn_", make_descriptor(t_NoMergePolicy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NoMergePolicy).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(NoMergePolicy::initializeClass);
          PyDict_SetItemString(PY_TYPE(NoMergePolicy).tp_dict, "INSTANCE", make_descriptor(::org::apache::lucene::index::t_MergePolicy::wrap_Object(*NoMergePolicy::INSTANCE)));
        }

        static PyObject *t_NoMergePolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NoMergePolicy::initializeClass, 1)))
            return NULL;
          return t_NoMergePolicy::wrap_Object(NoMergePolicy(((t_NoMergePolicy *) arg)->object.this$));
        }
        static PyObject *t_NoMergePolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NoMergePolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NoMergePolicy_close(t_NoMergePolicy *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NoMergePolicy), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_NoMergePolicy_findForcedDeletesMerges(t_NoMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          ::org::apache::lucene::index::IndexWriter a1((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.findForcedDeletesMerges(a0, a1));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(NoMergePolicy), (PyObject *) self, "findForcedDeletesMerges", args, 2);
        }

        static PyObject *t_NoMergePolicy_findForcedMerges(t_NoMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          jint a1;
          ::java::util::Map a2((jobject) NULL);
          PyTypeObject **p2;
          ::org::apache::lucene::index::IndexWriter a3((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "kIKk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::java::util::Map::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_, &a3))
          {
            OBJ_CALL(result = self->object.findForcedMerges(a0, a1, a2, a3));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(NoMergePolicy), (PyObject *) self, "findForcedMerges", args, 2);
        }

        static PyObject *t_NoMergePolicy_findMerges(t_NoMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergeTrigger a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::index::SegmentInfos a1((jobject) NULL);
          ::org::apache::lucene::index::IndexWriter a2((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "Kkk", ::org::apache::lucene::index::MergeTrigger::initializeClass, ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_MergeTrigger::parameters_, &a1, &a2))
          {
            OBJ_CALL(result = self->object.findMerges(a0, a1, a2));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(NoMergePolicy), (PyObject *) self, "findMerges", args, 2);
        }

        static PyObject *t_NoMergePolicy_toString(t_NoMergePolicy *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(NoMergePolicy), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_NoMergePolicy_useCompoundFile(t_NoMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          ::org::apache::lucene::index::SegmentCommitInfo a1((jobject) NULL);
          ::org::apache::lucene::index::IndexWriter a2((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "kkk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.useCompoundFile(a0, a1, a2));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(NoMergePolicy), (PyObject *) self, "useCompoundFile", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ar/ArabicLetterTokenizer.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {

          ::java::lang::Class *ArabicLetterTokenizer::class$ = NULL;
          jmethodID *ArabicLetterTokenizer::mids$ = NULL;
          bool ArabicLetterTokenizer::live$ = false;

          jclass ArabicLetterTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ar/ArabicLetterTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_be7a3ecf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_isTokenChar_39c7bd30] = env->getMethodID(cls, "isTokenChar", "(I)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ArabicLetterTokenizer::ArabicLetterTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::core::LetterTokenizer(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          ArabicLetterTokenizer::ArabicLetterTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2) : ::org::apache::lucene::analysis::core::LetterTokenizer(env->newObject(initializeClass, &mids$, mid_init$_be7a3ecf, a0.this$, a1.this$, a2.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {
          static PyObject *t_ArabicLetterTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ArabicLetterTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ArabicLetterTokenizer_init_(t_ArabicLetterTokenizer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_ArabicLetterTokenizer__methods_[] = {
            DECLARE_METHOD(t_ArabicLetterTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicLetterTokenizer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ArabicLetterTokenizer, t_ArabicLetterTokenizer, ::org::apache::lucene::analysis::core::LetterTokenizer, ArabicLetterTokenizer, t_ArabicLetterTokenizer_init_, 0, 0, 0, 0, 0);

          void t_ArabicLetterTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(ArabicLetterTokenizer), module, "ArabicLetterTokenizer", 0);
          }

          void t_ArabicLetterTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ArabicLetterTokenizer).tp_dict, "class_", make_descriptor(ArabicLetterTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ArabicLetterTokenizer).tp_dict, "wrapfn_", make_descriptor(t_ArabicLetterTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ArabicLetterTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ArabicLetterTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ArabicLetterTokenizer::initializeClass, 1)))
              return NULL;
            return t_ArabicLetterTokenizer::wrap_Object(ArabicLetterTokenizer(((t_ArabicLetterTokenizer *) arg)->object.this$));
          }
          static PyObject *t_ArabicLetterTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ArabicLetterTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ArabicLetterTokenizer_init_(t_ArabicLetterTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                ArabicLetterTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = ArabicLetterTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                ArabicLetterTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kkk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = ArabicLetterTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/analysis/PythonTokenStream.h"
#include "java/lang/Throwable.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {

        ::java::lang::Class *PythonTokenStream::class$ = NULL;
        jmethodID *PythonTokenStream::mids$ = NULL;
        bool PythonTokenStream::live$ = false;

        jclass PythonTokenStream::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/analysis/PythonTokenStream");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonTokenStream::PythonTokenStream() : ::org::apache::lucene::analysis::TokenStream(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonTokenStream::close() const
        {
          env->callNonvirtualVoidMethod(this$, (jclass) ::org::apache::lucene::analysis::TokenStream::class$->this$, ::org::apache::lucene::analysis::TokenStream::mids$[::org::apache::lucene::analysis::TokenStream::mid_close_54c6a166]);
        }

        void PythonTokenStream::end() const
        {
          env->callNonvirtualVoidMethod(this$, (jclass) ::org::apache::lucene::analysis::TokenStream::class$->this$, ::org::apache::lucene::analysis::TokenStream::mids$[::org::apache::lucene::analysis::TokenStream::mid_end_54c6a166]);
        }

        void PythonTokenStream::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonTokenStream::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonTokenStream::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }

        void PythonTokenStream::reset() const
        {
          env->callNonvirtualVoidMethod(this$, (jclass) ::org::apache::lucene::analysis::TokenStream::class$->this$, ::org::apache::lucene::analysis::TokenStream::mids$[::org::apache::lucene::analysis::TokenStream::mid_reset_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {
        static PyObject *t_PythonTokenStream_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonTokenStream_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonTokenStream_init_(t_PythonTokenStream *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonTokenStream_close(t_PythonTokenStream *self, PyObject *args);
        static PyObject *t_PythonTokenStream_end(t_PythonTokenStream *self, PyObject *args);
        static PyObject *t_PythonTokenStream_finalize(t_PythonTokenStream *self);
        static PyObject *t_PythonTokenStream_pythonExtension(t_PythonTokenStream *self, PyObject *args);
        static PyObject *t_PythonTokenStream_reset(t_PythonTokenStream *self, PyObject *args);
        static void JNICALL t_PythonTokenStream_close0(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonTokenStream_end1(JNIEnv *jenv, jobject jobj);
        static jboolean JNICALL t_PythonTokenStream_incrementToken2(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonTokenStream_pythonDecRef3(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonTokenStream_reset4(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonTokenStream_get__self(t_PythonTokenStream *self, void *data);
        static PyGetSetDef t_PythonTokenStream__fields_[] = {
          DECLARE_GET_FIELD(t_PythonTokenStream, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonTokenStream__methods_[] = {
          DECLARE_METHOD(t_PythonTokenStream, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonTokenStream, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonTokenStream, close, METH_VARARGS),
          DECLARE_METHOD(t_PythonTokenStream, end, METH_VARARGS),
          DECLARE_METHOD(t_PythonTokenStream, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonTokenStream, pythonExtension, METH_VARARGS),
          DECLARE_METHOD(t_PythonTokenStream, reset, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonTokenStream, t_PythonTokenStream, ::org::apache::lucene::analysis::TokenStream, PythonTokenStream, t_PythonTokenStream_init_, 0, 0, t_PythonTokenStream__fields_, 0, 0);

        void t_PythonTokenStream::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonTokenStream), module, "PythonTokenStream", 1);
        }

        void t_PythonTokenStream::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonTokenStream).tp_dict, "class_", make_descriptor(PythonTokenStream::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonTokenStream).tp_dict, "wrapfn_", make_descriptor(t_PythonTokenStream::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonTokenStream).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonTokenStream::initializeClass);
          JNINativeMethod methods[] = {
            { "close", "()V", (void *) t_PythonTokenStream_close0 },
            { "end", "()V", (void *) t_PythonTokenStream_end1 },
            { "incrementToken", "()Z", (void *) t_PythonTokenStream_incrementToken2 },
            { "pythonDecRef", "()V", (void *) t_PythonTokenStream_pythonDecRef3 },
            { "reset", "()V", (void *) t_PythonTokenStream_reset4 },
          };
          env->registerNatives(cls, methods, 5);
        }

        static PyObject *t_PythonTokenStream_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonTokenStream::initializeClass, 1)))
            return NULL;
          return t_PythonTokenStream::wrap_Object(PythonTokenStream(((t_PythonTokenStream *) arg)->object.this$));
        }
        static PyObject *t_PythonTokenStream_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonTokenStream::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonTokenStream_init_(t_PythonTokenStream *self, PyObject *args, PyObject *kwds)
        {
          PythonTokenStream object((jobject) NULL);

          INT_CALL(object = PythonTokenStream());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonTokenStream_close(t_PythonTokenStream *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PythonTokenStream), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_PythonTokenStream_end(t_PythonTokenStream *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.end());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PythonTokenStream), (PyObject *) self, "end", args, 2);
        }

        static PyObject *t_PythonTokenStream_finalize(t_PythonTokenStream *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonTokenStream_pythonExtension(t_PythonTokenStream *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static PyObject *t_PythonTokenStream_reset(t_PythonTokenStream *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.reset());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PythonTokenStream), (PyObject *) self, "reset", args, 2);
        }

        static void JNICALL t_PythonTokenStream_close0(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonTokenStream::mids$[PythonTokenStream::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "close", "");
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static void JNICALL t_PythonTokenStream_end1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonTokenStream::mids$[PythonTokenStream::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "end", "");
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jboolean JNICALL t_PythonTokenStream_incrementToken2(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonTokenStream::mids$[PythonTokenStream::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *result = PyObject_CallMethod(obj, "incrementToken", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("incrementToken", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static void JNICALL t_PythonTokenStream_pythonDecRef3(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonTokenStream::mids$[PythonTokenStream::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonTokenStream::mids$[PythonTokenStream::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static void JNICALL t_PythonTokenStream_reset4(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonTokenStream::mids$[PythonTokenStream::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "reset", "");
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static PyObject *t_PythonTokenStream_get__self(t_PythonTokenStream *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/PatternKeywordMarkerFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/util/regex/Pattern.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *PatternKeywordMarkerFilter::class$ = NULL;
          jmethodID *PatternKeywordMarkerFilter::mids$ = NULL;
          bool PatternKeywordMarkerFilter::live$ = false;

          jclass PatternKeywordMarkerFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/PatternKeywordMarkerFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_df7fd280] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/util/regex/Pattern;)V");
              mids$[mid_isKeyword_54c6a16a] = env->getMethodID(cls, "isKeyword", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PatternKeywordMarkerFilter::PatternKeywordMarkerFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::util::regex::Pattern & a1) : ::org::apache::lucene::analysis::miscellaneous::KeywordMarkerFilter(env->newObject(initializeClass, &mids$, mid_init$_df7fd280, a0.this$, a1.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_PatternKeywordMarkerFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PatternKeywordMarkerFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PatternKeywordMarkerFilter_init_(t_PatternKeywordMarkerFilter *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_PatternKeywordMarkerFilter__methods_[] = {
            DECLARE_METHOD(t_PatternKeywordMarkerFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternKeywordMarkerFilter, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PatternKeywordMarkerFilter, t_PatternKeywordMarkerFilter, ::org::apache::lucene::analysis::miscellaneous::KeywordMarkerFilter, PatternKeywordMarkerFilter, t_PatternKeywordMarkerFilter_init_, 0, 0, 0, 0, 0);

          void t_PatternKeywordMarkerFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PatternKeywordMarkerFilter), module, "PatternKeywordMarkerFilter", 0);
          }

          void t_PatternKeywordMarkerFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PatternKeywordMarkerFilter).tp_dict, "class_", make_descriptor(PatternKeywordMarkerFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PatternKeywordMarkerFilter).tp_dict, "wrapfn_", make_descriptor(t_PatternKeywordMarkerFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PatternKeywordMarkerFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PatternKeywordMarkerFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PatternKeywordMarkerFilter::initializeClass, 1)))
              return NULL;
            return t_PatternKeywordMarkerFilter::wrap_Object(PatternKeywordMarkerFilter(((t_PatternKeywordMarkerFilter *) arg)->object.this$));
          }
          static PyObject *t_PatternKeywordMarkerFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PatternKeywordMarkerFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PatternKeywordMarkerFilter_init_(t_PatternKeywordMarkerFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::java::util::regex::Pattern a1((jobject) NULL);
            PatternKeywordMarkerFilter object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::java::util::regex::Pattern::initializeClass, &a0, &a1))
            {
              INT_CALL(object = PatternKeywordMarkerFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/fst/WFSTCompletionLookup.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupResult.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {

            ::java::lang::Class *WFSTCompletionLookup::class$ = NULL;
            jmethodID *WFSTCompletionLookup::mids$ = NULL;
            bool WFSTCompletionLookup::live$ = false;

            jclass WFSTCompletionLookup::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/fst/WFSTCompletionLookup");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_bb0c767f] = env->getMethodID(cls, "<init>", "(Z)V");
                mids$[mid_build_1754a234] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/search/suggest/InputIterator;)V");
                mids$[mid_get_a739ccff] = env->getMethodID(cls, "get", "(Ljava/lang/CharSequence;)Ljava/lang/Object;");
                mids$[mid_getCount_54c6a17a] = env->getMethodID(cls, "getCount", "()J");
                mids$[mid_load_f5d6a55d] = env->getMethodID(cls, "load", "(Lorg/apache/lucene/store/DataInput;)Z");
                mids$[mid_lookup_dd3e9f51] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;ZI)Ljava/util/List;");
                mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
                mids$[mid_store_27875f5b] = env->getMethodID(cls, "store", "(Lorg/apache/lucene/store/DataOutput;)Z");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            WFSTCompletionLookup::WFSTCompletionLookup() : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            WFSTCompletionLookup::WFSTCompletionLookup(jboolean a0) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_bb0c767f, a0)) {}

            void WFSTCompletionLookup::build(const ::org::apache::lucene::search::suggest::InputIterator & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_build_1754a234], a0.this$);
            }

            ::java::lang::Object WFSTCompletionLookup::get(const ::java::lang::CharSequence & a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_a739ccff], a0.this$));
            }

            jlong WFSTCompletionLookup::getCount() const
            {
              return env->callLongMethod(this$, mids$[mid_getCount_54c6a17a]);
            }

            jboolean WFSTCompletionLookup::load(const ::org::apache::lucene::store::DataInput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_load_f5d6a55d], a0.this$);
            }

            ::java::util::List WFSTCompletionLookup::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jboolean a2, jint a3) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_dd3e9f51], a0.this$, a1.this$, a2, a3));
            }

            jlong WFSTCompletionLookup::ramBytesUsed() const
            {
              return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
            }

            jboolean WFSTCompletionLookup::store(const ::org::apache::lucene::store::DataOutput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_store_27875f5b], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {
            static PyObject *t_WFSTCompletionLookup_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_WFSTCompletionLookup_instance_(PyTypeObject *type, PyObject *arg);
            static int t_WFSTCompletionLookup_init_(t_WFSTCompletionLookup *self, PyObject *args, PyObject *kwds);
            static PyObject *t_WFSTCompletionLookup_build(t_WFSTCompletionLookup *self, PyObject *args);
            static PyObject *t_WFSTCompletionLookup_get(t_WFSTCompletionLookup *self, PyObject *arg);
            static PyObject *t_WFSTCompletionLookup_getCount(t_WFSTCompletionLookup *self, PyObject *args);
            static PyObject *t_WFSTCompletionLookup_load(t_WFSTCompletionLookup *self, PyObject *args);
            static PyObject *t_WFSTCompletionLookup_lookup(t_WFSTCompletionLookup *self, PyObject *args);
            static PyObject *t_WFSTCompletionLookup_ramBytesUsed(t_WFSTCompletionLookup *self, PyObject *args);
            static PyObject *t_WFSTCompletionLookup_store(t_WFSTCompletionLookup *self, PyObject *args);
            static PyObject *t_WFSTCompletionLookup_get__count(t_WFSTCompletionLookup *self, void *data);
            static PyGetSetDef t_WFSTCompletionLookup__fields_[] = {
              DECLARE_GET_FIELD(t_WFSTCompletionLookup, count),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_WFSTCompletionLookup__methods_[] = {
              DECLARE_METHOD(t_WFSTCompletionLookup, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_WFSTCompletionLookup, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_WFSTCompletionLookup, build, METH_VARARGS),
              DECLARE_METHOD(t_WFSTCompletionLookup, get, METH_O),
              DECLARE_METHOD(t_WFSTCompletionLookup, getCount, METH_VARARGS),
              DECLARE_METHOD(t_WFSTCompletionLookup, load, METH_VARARGS),
              DECLARE_METHOD(t_WFSTCompletionLookup, lookup, METH_VARARGS),
              DECLARE_METHOD(t_WFSTCompletionLookup, ramBytesUsed, METH_VARARGS),
              DECLARE_METHOD(t_WFSTCompletionLookup, store, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(WFSTCompletionLookup, t_WFSTCompletionLookup, ::org::apache::lucene::search::suggest::Lookup, WFSTCompletionLookup, t_WFSTCompletionLookup_init_, 0, 0, t_WFSTCompletionLookup__fields_, 0, 0);

            void t_WFSTCompletionLookup::install(PyObject *module)
            {
              installType(&PY_TYPE(WFSTCompletionLookup), module, "WFSTCompletionLookup", 0);
            }

            void t_WFSTCompletionLookup::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(WFSTCompletionLookup).tp_dict, "class_", make_descriptor(WFSTCompletionLookup::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(WFSTCompletionLookup).tp_dict, "wrapfn_", make_descriptor(t_WFSTCompletionLookup::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(WFSTCompletionLookup).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_WFSTCompletionLookup_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, WFSTCompletionLookup::initializeClass, 1)))
                return NULL;
              return t_WFSTCompletionLookup::wrap_Object(WFSTCompletionLookup(((t_WFSTCompletionLookup *) arg)->object.this$));
            }
            static PyObject *t_WFSTCompletionLookup_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, WFSTCompletionLookup::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_WFSTCompletionLookup_init_(t_WFSTCompletionLookup *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  WFSTCompletionLookup object((jobject) NULL);

                  INT_CALL(object = WFSTCompletionLookup());
                  self->object = object;
                  break;
                }
                goto err;
               case 1:
                {
                  jboolean a0;
                  WFSTCompletionLookup object((jobject) NULL);

                  if (!parseArgs(args, "Z", &a0))
                  {
                    INT_CALL(object = WFSTCompletionLookup(a0));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_WFSTCompletionLookup_build(t_WFSTCompletionLookup *self, PyObject *args)
            {
              ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0))
              {
                OBJ_CALL(self->object.build(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(WFSTCompletionLookup), (PyObject *) self, "build", args, 2);
            }

            static PyObject *t_WFSTCompletionLookup_get(t_WFSTCompletionLookup *self, PyObject *arg)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::lang::Object result((jobject) NULL);

              if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_WFSTCompletionLookup_getCount(t_WFSTCompletionLookup *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getCount());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(WFSTCompletionLookup), (PyObject *) self, "getCount", args, 2);
            }

            static PyObject *t_WFSTCompletionLookup_load(t_WFSTCompletionLookup *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataInput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.load(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(WFSTCompletionLookup), (PyObject *) self, "load", args, 2);
            }

            static PyObject *t_WFSTCompletionLookup_lookup(t_WFSTCompletionLookup *self, PyObject *args)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::util::Set a1((jobject) NULL);
              PyTypeObject **p1;
              jboolean a2;
              jint a3;
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, "OKZI", &::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3))
              {
                OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3));
                return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
              }

              return callSuper(&PY_TYPE(WFSTCompletionLookup), (PyObject *) self, "lookup", args, 2);
            }

            static PyObject *t_WFSTCompletionLookup_ramBytesUsed(t_WFSTCompletionLookup *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.ramBytesUsed());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(WFSTCompletionLookup), (PyObject *) self, "ramBytesUsed", args, 2);
            }

            static PyObject *t_WFSTCompletionLookup_store(t_WFSTCompletionLookup *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.store(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(WFSTCompletionLookup), (PyObject *) self, "store", args, 2);
            }

            static PyObject *t_WFSTCompletionLookup_get__count(t_WFSTCompletionLookup *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object.getCount());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/NumericPayloadTokenFilter.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *NumericPayloadTokenFilter::class$ = NULL;
          jmethodID *NumericPayloadTokenFilter::mids$ = NULL;
          bool NumericPayloadTokenFilter::live$ = false;

          jclass NumericPayloadTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/NumericPayloadTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_333172df] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;FLjava/lang/String;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NumericPayloadTokenFilter::NumericPayloadTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jfloat a1, const ::java::lang::String & a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_333172df, a0.this$, a1, a2.this$)) {}

          jboolean NumericPayloadTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_NumericPayloadTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NumericPayloadTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NumericPayloadTokenFilter_init_(t_NumericPayloadTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NumericPayloadTokenFilter_incrementToken(t_NumericPayloadTokenFilter *self, PyObject *args);

          static PyMethodDef t_NumericPayloadTokenFilter__methods_[] = {
            DECLARE_METHOD(t_NumericPayloadTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NumericPayloadTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NumericPayloadTokenFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NumericPayloadTokenFilter, t_NumericPayloadTokenFilter, ::org::apache::lucene::analysis::TokenFilter, NumericPayloadTokenFilter, t_NumericPayloadTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_NumericPayloadTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(NumericPayloadTokenFilter), module, "NumericPayloadTokenFilter", 0);
          }

          void t_NumericPayloadTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NumericPayloadTokenFilter).tp_dict, "class_", make_descriptor(NumericPayloadTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NumericPayloadTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_NumericPayloadTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NumericPayloadTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NumericPayloadTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NumericPayloadTokenFilter::initializeClass, 1)))
              return NULL;
            return t_NumericPayloadTokenFilter::wrap_Object(NumericPayloadTokenFilter(((t_NumericPayloadTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_NumericPayloadTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NumericPayloadTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NumericPayloadTokenFilter_init_(t_NumericPayloadTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            jfloat a1;
            ::java::lang::String a2((jobject) NULL);
            NumericPayloadTokenFilter object((jobject) NULL);

            if (!parseArgs(args, "kFs", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = NumericPayloadTokenFilter(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NumericPayloadTokenFilter_incrementToken(t_NumericPayloadTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(NumericPayloadTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/CharacterUtils.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/analysis/util/CharacterUtils$CharacterBuffer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *CharacterUtils::class$ = NULL;
          jmethodID *CharacterUtils::mids$ = NULL;
          bool CharacterUtils::live$ = false;

          jclass CharacterUtils::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/CharacterUtils");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_codePointAt_2fbf15bf] = env->getMethodID(cls, "codePointAt", "(Ljava/lang/CharSequence;I)I");
              mids$[mid_codePointAt_6f0bb349] = env->getMethodID(cls, "codePointAt", "([CII)I");
              mids$[mid_codePointCount_a8afc655] = env->getMethodID(cls, "codePointCount", "(Ljava/lang/CharSequence;)I");
              mids$[mid_fill_4a603207] = env->getMethodID(cls, "fill", "(Lorg/apache/lucene/analysis/util/CharacterUtils$CharacterBuffer;Ljava/io/Reader;)Z");
              mids$[mid_fill_907fec5b] = env->getMethodID(cls, "fill", "(Lorg/apache/lucene/analysis/util/CharacterUtils$CharacterBuffer;Ljava/io/Reader;I)Z");
              mids$[mid_getInstance_c0e3b02e] = env->getStaticMethodID(cls, "getInstance", "(Lorg/apache/lucene/util/Version;)Lorg/apache/lucene/analysis/util/CharacterUtils;");
              mids$[mid_getJava4Instance_2fcca481] = env->getStaticMethodID(cls, "getJava4Instance", "()Lorg/apache/lucene/analysis/util/CharacterUtils;");
              mids$[mid_newCharacterBuffer_531f8606] = env->getStaticMethodID(cls, "newCharacterBuffer", "(I)Lorg/apache/lucene/analysis/util/CharacterUtils$CharacterBuffer;");
              mids$[mid_offsetByCodePoints_f453ace9] = env->getMethodID(cls, "offsetByCodePoints", "([CIIII)I");
              mids$[mid_toChars_4c08f211] = env->getMethodID(cls, "toChars", "([III[CI)I");
              mids$[mid_toCodePoints_625a1e21] = env->getMethodID(cls, "toCodePoints", "([CII[II)I");
              mids$[mid_toLowerCase_6f0bb356] = env->getMethodID(cls, "toLowerCase", "([CII)V");
              mids$[mid_toUpperCase_6f0bb356] = env->getMethodID(cls, "toUpperCase", "([CII)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CharacterUtils::CharacterUtils() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint CharacterUtils::codePointAt(const ::java::lang::CharSequence & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_codePointAt_2fbf15bf], a0.this$, a1);
          }

          jint CharacterUtils::codePointAt(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return env->callIntMethod(this$, mids$[mid_codePointAt_6f0bb349], a0.this$, a1, a2);
          }

          jint CharacterUtils::codePointCount(const ::java::lang::CharSequence & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_codePointCount_a8afc655], a0.this$);
          }

          jboolean CharacterUtils::fill(const ::org::apache::lucene::analysis::util::CharacterUtils$CharacterBuffer & a0, const ::java::io::Reader & a1) const
          {
            return env->callBooleanMethod(this$, mids$[mid_fill_4a603207], a0.this$, a1.this$);
          }

          jboolean CharacterUtils::fill(const ::org::apache::lucene::analysis::util::CharacterUtils$CharacterBuffer & a0, const ::java::io::Reader & a1, jint a2) const
          {
            return env->callBooleanMethod(this$, mids$[mid_fill_907fec5b], a0.this$, a1.this$, a2);
          }

          CharacterUtils CharacterUtils::getInstance(const ::org::apache::lucene::util::Version & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return CharacterUtils(env->callStaticObjectMethod(cls, mids$[mid_getInstance_c0e3b02e], a0.this$));
          }

          CharacterUtils CharacterUtils::getJava4Instance()
          {
            jclass cls = env->getClass(initializeClass);
            return CharacterUtils(env->callStaticObjectMethod(cls, mids$[mid_getJava4Instance_2fcca481]));
          }

          ::org::apache::lucene::analysis::util::CharacterUtils$CharacterBuffer CharacterUtils::newCharacterBuffer(jint a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharacterUtils$CharacterBuffer(env->callStaticObjectMethod(cls, mids$[mid_newCharacterBuffer_531f8606], a0));
          }

          jint CharacterUtils::offsetByCodePoints(const JArray< jchar > & a0, jint a1, jint a2, jint a3, jint a4) const
          {
            return env->callIntMethod(this$, mids$[mid_offsetByCodePoints_f453ace9], a0.this$, a1, a2, a3, a4);
          }

          jint CharacterUtils::toChars(const JArray< jint > & a0, jint a1, jint a2, const JArray< jchar > & a3, jint a4) const
          {
            return env->callIntMethod(this$, mids$[mid_toChars_4c08f211], a0.this$, a1, a2, a3.this$, a4);
          }

          jint CharacterUtils::toCodePoints(const JArray< jchar > & a0, jint a1, jint a2, const JArray< jint > & a3, jint a4) const
          {
            return env->callIntMethod(this$, mids$[mid_toCodePoints_625a1e21], a0.this$, a1, a2, a3.this$, a4);
          }

          void CharacterUtils::toLowerCase(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            env->callVoidMethod(this$, mids$[mid_toLowerCase_6f0bb356], a0.this$, a1, a2);
          }

          void CharacterUtils::toUpperCase(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            env->callVoidMethod(this$, mids$[mid_toUpperCase_6f0bb356], a0.this$, a1, a2);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_CharacterUtils_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharacterUtils_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CharacterUtils_init_(t_CharacterUtils *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CharacterUtils_codePointAt(t_CharacterUtils *self, PyObject *args);
          static PyObject *t_CharacterUtils_codePointCount(t_CharacterUtils *self, PyObject *arg);
          static PyObject *t_CharacterUtils_fill(t_CharacterUtils *self, PyObject *args);
          static PyObject *t_CharacterUtils_getInstance(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharacterUtils_getJava4Instance(PyTypeObject *type);
          static PyObject *t_CharacterUtils_newCharacterBuffer(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharacterUtils_offsetByCodePoints(t_CharacterUtils *self, PyObject *args);
          static PyObject *t_CharacterUtils_toChars(t_CharacterUtils *self, PyObject *args);
          static PyObject *t_CharacterUtils_toCodePoints(t_CharacterUtils *self, PyObject *args);
          static PyObject *t_CharacterUtils_toLowerCase(t_CharacterUtils *self, PyObject *args);
          static PyObject *t_CharacterUtils_toUpperCase(t_CharacterUtils *self, PyObject *args);
          static PyObject *t_CharacterUtils_get__java4Instance(t_CharacterUtils *self, void *data);
          static PyGetSetDef t_CharacterUtils__fields_[] = {
            DECLARE_GET_FIELD(t_CharacterUtils, java4Instance),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CharacterUtils__methods_[] = {
            DECLARE_METHOD(t_CharacterUtils, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharacterUtils, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharacterUtils, codePointAt, METH_VARARGS),
            DECLARE_METHOD(t_CharacterUtils, codePointCount, METH_O),
            DECLARE_METHOD(t_CharacterUtils, fill, METH_VARARGS),
            DECLARE_METHOD(t_CharacterUtils, getInstance, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharacterUtils, getJava4Instance, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_CharacterUtils, newCharacterBuffer, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharacterUtils, offsetByCodePoints, METH_VARARGS),
            DECLARE_METHOD(t_CharacterUtils, toChars, METH_VARARGS),
            DECLARE_METHOD(t_CharacterUtils, toCodePoints, METH_VARARGS),
            DECLARE_METHOD(t_CharacterUtils, toLowerCase, METH_VARARGS),
            DECLARE_METHOD(t_CharacterUtils, toUpperCase, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CharacterUtils, t_CharacterUtils, ::java::lang::Object, CharacterUtils, t_CharacterUtils_init_, 0, 0, t_CharacterUtils__fields_, 0, 0);

          void t_CharacterUtils::install(PyObject *module)
          {
            installType(&PY_TYPE(CharacterUtils), module, "CharacterUtils", 0);
            PyDict_SetItemString(PY_TYPE(CharacterUtils).tp_dict, "CharacterBuffer", make_descriptor(&PY_TYPE(CharacterUtils$CharacterBuffer)));
          }

          void t_CharacterUtils::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CharacterUtils).tp_dict, "class_", make_descriptor(CharacterUtils::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CharacterUtils).tp_dict, "wrapfn_", make_descriptor(t_CharacterUtils::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CharacterUtils).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CharacterUtils_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharacterUtils::initializeClass, 1)))
              return NULL;
            return t_CharacterUtils::wrap_Object(CharacterUtils(((t_CharacterUtils *) arg)->object.this$));
          }
          static PyObject *t_CharacterUtils_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharacterUtils::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CharacterUtils_init_(t_CharacterUtils *self, PyObject *args, PyObject *kwds)
          {
            CharacterUtils object((jobject) NULL);

            INT_CALL(object = CharacterUtils());
            self->object = object;

            return 0;
          }

          static PyObject *t_CharacterUtils_codePointAt(t_CharacterUtils *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jint a1;
                jint result;

                if (!parseArgs(args, "OI", &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
                {
                  OBJ_CALL(result = self->object.codePointAt(a0, a1));
                  return PyInt_FromLong((long) result);
                }
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;
                jint result;

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.codePointAt(a0, a1, a2));
                  return PyInt_FromLong((long) result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "codePointAt", args);
            return NULL;
          }

          static PyObject *t_CharacterUtils_codePointCount(t_CharacterUtils *self, PyObject *arg)
          {
            ::java::lang::CharSequence a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
            {
              OBJ_CALL(result = self->object.codePointCount(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "codePointCount", arg);
            return NULL;
          }

          static PyObject *t_CharacterUtils_fill(t_CharacterUtils *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::util::CharacterUtils$CharacterBuffer a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::util::CharacterUtils$CharacterBuffer::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.fill(a0, a1));
                  Py_RETURN_BOOL(result);
                }
              }
              break;
             case 3:
              {
                ::org::apache::lucene::analysis::util::CharacterUtils$CharacterBuffer a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                jint a2;
                jboolean result;

                if (!parseArgs(args, "kkI", ::org::apache::lucene::analysis::util::CharacterUtils$CharacterBuffer::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.fill(a0, a1, a2));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "fill", args);
            return NULL;
          }

          static PyObject *t_CharacterUtils_getInstance(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            PyTypeObject **p0;
            CharacterUtils result((jobject) NULL);

            if (!parseArg(arg, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharacterUtils::getInstance(a0));
              return t_CharacterUtils::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getInstance", arg);
            return NULL;
          }

          static PyObject *t_CharacterUtils_getJava4Instance(PyTypeObject *type)
          {
            CharacterUtils result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharacterUtils::getJava4Instance());
            return t_CharacterUtils::wrap_Object(result);
          }

          static PyObject *t_CharacterUtils_newCharacterBuffer(PyTypeObject *type, PyObject *arg)
          {
            jint a0;
            ::org::apache::lucene::analysis::util::CharacterUtils$CharacterBuffer result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharacterUtils::newCharacterBuffer(a0));
              return ::org::apache::lucene::analysis::util::t_CharacterUtils$CharacterBuffer::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "newCharacterBuffer", arg);
            return NULL;
          }

          static PyObject *t_CharacterUtils_offsetByCodePoints(t_CharacterUtils *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint a2;
            jint a3;
            jint a4;
            jint result;

            if (!parseArgs(args, "[CIIII", &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.offsetByCodePoints(a0, a1, a2, a3, a4));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "offsetByCodePoints", args);
            return NULL;
          }

          static PyObject *t_CharacterUtils_toChars(t_CharacterUtils *self, PyObject *args)
          {
            JArray< jint > a0((jobject) NULL);
            jint a1;
            jint a2;
            JArray< jchar > a3((jobject) NULL);
            jint a4;
            jint result;

            if (!parseArgs(args, "[III[CI", &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.toChars(a0, a1, a2, a3, a4));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "toChars", args);
            return NULL;
          }

          static PyObject *t_CharacterUtils_toCodePoints(t_CharacterUtils *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint a2;
            JArray< jint > a3((jobject) NULL);
            jint a4;
            jint result;

            if (!parseArgs(args, "[CII[II", &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.toCodePoints(a0, a1, a2, a3, a4));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "toCodePoints", args);
            return NULL;
          }

          static PyObject *t_CharacterUtils_toLowerCase(t_CharacterUtils *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint a2;

            if (!parseArgs(args, "[CII", &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.toLowerCase(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "toLowerCase", args);
            return NULL;
          }

          static PyObject *t_CharacterUtils_toUpperCase(t_CharacterUtils *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint a2;

            if (!parseArgs(args, "[CII", &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.toUpperCase(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "toUpperCase", args);
            return NULL;
          }

          static PyObject *t_CharacterUtils_get__java4Instance(t_CharacterUtils *self, void *data)
          {
            CharacterUtils value((jobject) NULL);
            OBJ_CALL(value = self->object.getJava4Instance());
            return t_CharacterUtils::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/DiffIt.h"
#include "java/lang/Exception.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *DiffIt::class$ = NULL;
      jmethodID *DiffIt::mids$ = NULL;
      bool DiffIt::live$ = false;

      jclass DiffIt::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/DiffIt");

          mids$ = new jmethodID[max_mid];
          mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      void DiffIt::main(const JArray< ::java::lang::String > & a0)
      {
        jclass cls = env->getClass(initializeClass);
        env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_DiffIt_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_DiffIt_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_DiffIt_main(PyTypeObject *type, PyObject *arg);

      static PyMethodDef t_DiffIt__methods_[] = {
        DECLARE_METHOD(t_DiffIt, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_DiffIt, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_DiffIt, main, METH_O | METH_CLASS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(DiffIt, t_DiffIt, ::java::lang::Object, DiffIt, abstract_init, 0, 0, 0, 0, 0);

      void t_DiffIt::install(PyObject *module)
      {
        installType(&PY_TYPE(DiffIt), module, "DiffIt", 0);
      }

      void t_DiffIt::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(DiffIt).tp_dict, "class_", make_descriptor(DiffIt::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(DiffIt).tp_dict, "wrapfn_", make_descriptor(t_DiffIt::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(DiffIt).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_DiffIt_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, DiffIt::initializeClass, 1)))
          return NULL;
        return t_DiffIt::wrap_Object(DiffIt(((t_DiffIt *) arg)->object.this$));
      }
      static PyObject *t_DiffIt_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, DiffIt::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_DiffIt_main(PyTypeObject *type, PyObject *arg)
      {
        JArray< ::java::lang::String > a0((jobject) NULL);

        if (!parseArg(arg, "[s", &a0))
        {
          OBJ_CALL(::org::egothor::stemmer::DiffIt::main(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError(type, "main", arg);
        return NULL;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *JoinDocFreqValueSource::class$ = NULL;
            jmethodID *JoinDocFreqValueSource::mids$ = NULL;
            bool JoinDocFreqValueSource::live$ = false;
            ::java::lang::String *JoinDocFreqValueSource::NAME = NULL;

            jclass JoinDocFreqValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_4a264742] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                NAME = new ::java::lang::String(env->getStaticObjectField(cls, "NAME", "Ljava/lang/String;"));
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            JoinDocFreqValueSource::JoinDocFreqValueSource(const ::java::lang::String & a0, const ::java::lang::String & a1) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_4a264742, a0.this$, a1.this$)) {}

            ::java::lang::String JoinDocFreqValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean JoinDocFreqValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues JoinDocFreqValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint JoinDocFreqValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_JoinDocFreqValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_JoinDocFreqValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_JoinDocFreqValueSource_init_(t_JoinDocFreqValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_JoinDocFreqValueSource_description(t_JoinDocFreqValueSource *self, PyObject *args);
            static PyObject *t_JoinDocFreqValueSource_equals(t_JoinDocFreqValueSource *self, PyObject *args);
            static PyObject *t_JoinDocFreqValueSource_getValues(t_JoinDocFreqValueSource *self, PyObject *args);
            static PyObject *t_JoinDocFreqValueSource_hashCode(t_JoinDocFreqValueSource *self, PyObject *args);

            static PyMethodDef t_JoinDocFreqValueSource__methods_[] = {
              DECLARE_METHOD(t_JoinDocFreqValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_JoinDocFreqValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_JoinDocFreqValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_JoinDocFreqValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_JoinDocFreqValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_JoinDocFreqValueSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(JoinDocFreqValueSource, t_JoinDocFreqValueSource, ::org::apache::lucene::queries::function::valuesource::FieldCacheSource, JoinDocFreqValueSource, t_JoinDocFreqValueSource_init_, 0, 0, 0, 0, 0);

            void t_JoinDocFreqValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(JoinDocFreqValueSource), module, "JoinDocFreqValueSource", 0);
            }

            void t_JoinDocFreqValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(JoinDocFreqValueSource).tp_dict, "class_", make_descriptor(JoinDocFreqValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(JoinDocFreqValueSource).tp_dict, "wrapfn_", make_descriptor(t_JoinDocFreqValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(JoinDocFreqValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(JoinDocFreqValueSource::initializeClass);
              PyDict_SetItemString(PY_TYPE(JoinDocFreqValueSource).tp_dict, "NAME", make_descriptor(j2p(*JoinDocFreqValueSource::NAME)));
            }

            static PyObject *t_JoinDocFreqValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, JoinDocFreqValueSource::initializeClass, 1)))
                return NULL;
              return t_JoinDocFreqValueSource::wrap_Object(JoinDocFreqValueSource(((t_JoinDocFreqValueSource *) arg)->object.this$));
            }
            static PyObject *t_JoinDocFreqValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, JoinDocFreqValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_JoinDocFreqValueSource_init_(t_JoinDocFreqValueSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              JoinDocFreqValueSource object((jobject) NULL);

              if (!parseArgs(args, "ss", &a0, &a1))
              {
                INT_CALL(object = JoinDocFreqValueSource(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_JoinDocFreqValueSource_description(t_JoinDocFreqValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(JoinDocFreqValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_JoinDocFreqValueSource_equals(t_JoinDocFreqValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(JoinDocFreqValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_JoinDocFreqValueSource_getValues(t_JoinDocFreqValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(JoinDocFreqValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_JoinDocFreqValueSource_hashCode(t_JoinDocFreqValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(JoinDocFreqValueSource), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/TermsQueryBuilder.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *TermsQueryBuilder::class$ = NULL;
            jmethodID *TermsQueryBuilder::mids$ = NULL;
            bool TermsQueryBuilder::live$ = false;

            jclass TermsQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/TermsQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_31619410] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TermsQueryBuilder::TermsQueryBuilder(const ::org::apache::lucene::analysis::Analyzer & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_31619410, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_TermsQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermsQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TermsQueryBuilder_init_(t_TermsQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_TermsQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_TermsQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermsQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TermsQueryBuilder, t_TermsQueryBuilder, ::java::lang::Object, TermsQueryBuilder, t_TermsQueryBuilder_init_, 0, 0, 0, 0, 0);

            void t_TermsQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(TermsQueryBuilder), module, "TermsQueryBuilder", 0);
            }

            void t_TermsQueryBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TermsQueryBuilder).tp_dict, "class_", make_descriptor(TermsQueryBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TermsQueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_TermsQueryBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TermsQueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TermsQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TermsQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_TermsQueryBuilder::wrap_Object(TermsQueryBuilder(((t_TermsQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_TermsQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TermsQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TermsQueryBuilder_init_(t_TermsQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
              TermsQueryBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
              {
                INT_CALL(object = TermsQueryBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/FileSwitchDirectory.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *FileSwitchDirectory::class$ = NULL;
        jmethodID *FileSwitchDirectory::mids$ = NULL;
        bool FileSwitchDirectory::live$ = false;

        jclass FileSwitchDirectory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/FileSwitchDirectory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4575167f] = env->getMethodID(cls, "<init>", "(Ljava/util/Set;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/store/Directory;Z)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_createOutput_5ad5358d] = env->getMethodID(cls, "createOutput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_deleteFile_5fdc3f48] = env->getMethodID(cls, "deleteFile", "(Ljava/lang/String;)V");
            mids$[mid_fileExists_5fdc3f44] = env->getMethodID(cls, "fileExists", "(Ljava/lang/String;)Z");
            mids$[mid_fileLength_5fdc3f54] = env->getMethodID(cls, "fileLength", "(Ljava/lang/String;)J");
            mids$[mid_getExtension_97a5258f] = env->getStaticMethodID(cls, "getExtension", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_getPrimaryDir_1f3934bb] = env->getMethodID(cls, "getPrimaryDir", "()Lorg/apache/lucene/store/Directory;");
            mids$[mid_getSecondaryDir_1f3934bb] = env->getMethodID(cls, "getSecondaryDir", "()Lorg/apache/lucene/store/Directory;");
            mids$[mid_listAll_2e6d5245] = env->getMethodID(cls, "listAll", "()[Ljava/lang/String;");
            mids$[mid_openInput_3e1b5375] = env->getMethodID(cls, "openInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_sync_9bfb370d] = env->getMethodID(cls, "sync", "(Ljava/util/Collection;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FileSwitchDirectory::FileSwitchDirectory(const ::java::util::Set & a0, const ::org::apache::lucene::store::Directory & a1, const ::org::apache::lucene::store::Directory & a2, jboolean a3) : ::org::apache::lucene::store::BaseDirectory(env->newObject(initializeClass, &mids$, mid_init$_4575167f, a0.this$, a1.this$, a2.this$, a3)) {}

        void FileSwitchDirectory::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        ::org::apache::lucene::store::IndexOutput FileSwitchDirectory::createOutput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexOutput(env->callObjectMethod(this$, mids$[mid_createOutput_5ad5358d], a0.this$, a1.this$));
        }

        void FileSwitchDirectory::deleteFile(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_deleteFile_5fdc3f48], a0.this$);
        }

        jboolean FileSwitchDirectory::fileExists(const ::java::lang::String & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_fileExists_5fdc3f44], a0.this$);
        }

        jlong FileSwitchDirectory::fileLength(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_fileLength_5fdc3f54], a0.this$);
        }

        ::java::lang::String FileSwitchDirectory::getExtension(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getExtension_97a5258f], a0.this$));
        }

        ::org::apache::lucene::store::Directory FileSwitchDirectory::getPrimaryDir() const
        {
          return ::org::apache::lucene::store::Directory(env->callObjectMethod(this$, mids$[mid_getPrimaryDir_1f3934bb]));
        }

        ::org::apache::lucene::store::Directory FileSwitchDirectory::getSecondaryDir() const
        {
          return ::org::apache::lucene::store::Directory(env->callObjectMethod(this$, mids$[mid_getSecondaryDir_1f3934bb]));
        }

        JArray< ::java::lang::String > FileSwitchDirectory::listAll() const
        {
          return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_listAll_2e6d5245]));
        }

        ::org::apache::lucene::store::IndexInput FileSwitchDirectory::openInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_openInput_3e1b5375], a0.this$, a1.this$));
        }

        void FileSwitchDirectory::sync(const ::java::util::Collection & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_sync_9bfb370d], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_FileSwitchDirectory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FileSwitchDirectory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FileSwitchDirectory_init_(t_FileSwitchDirectory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FileSwitchDirectory_close(t_FileSwitchDirectory *self, PyObject *args);
        static PyObject *t_FileSwitchDirectory_createOutput(t_FileSwitchDirectory *self, PyObject *args);
        static PyObject *t_FileSwitchDirectory_deleteFile(t_FileSwitchDirectory *self, PyObject *args);
        static PyObject *t_FileSwitchDirectory_fileExists(t_FileSwitchDirectory *self, PyObject *args);
        static PyObject *t_FileSwitchDirectory_fileLength(t_FileSwitchDirectory *self, PyObject *args);
        static PyObject *t_FileSwitchDirectory_getExtension(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FileSwitchDirectory_getPrimaryDir(t_FileSwitchDirectory *self);
        static PyObject *t_FileSwitchDirectory_getSecondaryDir(t_FileSwitchDirectory *self);
        static PyObject *t_FileSwitchDirectory_listAll(t_FileSwitchDirectory *self, PyObject *args);
        static PyObject *t_FileSwitchDirectory_openInput(t_FileSwitchDirectory *self, PyObject *args);
        static PyObject *t_FileSwitchDirectory_sync(t_FileSwitchDirectory *self, PyObject *args);
        static PyObject *t_FileSwitchDirectory_get__primaryDir(t_FileSwitchDirectory *self, void *data);
        static PyObject *t_FileSwitchDirectory_get__secondaryDir(t_FileSwitchDirectory *self, void *data);
        static PyGetSetDef t_FileSwitchDirectory__fields_[] = {
          DECLARE_GET_FIELD(t_FileSwitchDirectory, primaryDir),
          DECLARE_GET_FIELD(t_FileSwitchDirectory, secondaryDir),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FileSwitchDirectory__methods_[] = {
          DECLARE_METHOD(t_FileSwitchDirectory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FileSwitchDirectory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FileSwitchDirectory, close, METH_VARARGS),
          DECLARE_METHOD(t_FileSwitchDirectory, createOutput, METH_VARARGS),
          DECLARE_METHOD(t_FileSwitchDirectory, deleteFile, METH_VARARGS),
          DECLARE_METHOD(t_FileSwitchDirectory, fileExists, METH_VARARGS),
          DECLARE_METHOD(t_FileSwitchDirectory, fileLength, METH_VARARGS),
          DECLARE_METHOD(t_FileSwitchDirectory, getExtension, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FileSwitchDirectory, getPrimaryDir, METH_NOARGS),
          DECLARE_METHOD(t_FileSwitchDirectory, getSecondaryDir, METH_NOARGS),
          DECLARE_METHOD(t_FileSwitchDirectory, listAll, METH_VARARGS),
          DECLARE_METHOD(t_FileSwitchDirectory, openInput, METH_VARARGS),
          DECLARE_METHOD(t_FileSwitchDirectory, sync, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FileSwitchDirectory, t_FileSwitchDirectory, ::org::apache::lucene::store::BaseDirectory, FileSwitchDirectory, t_FileSwitchDirectory_init_, 0, 0, t_FileSwitchDirectory__fields_, 0, 0);

        void t_FileSwitchDirectory::install(PyObject *module)
        {
          installType(&PY_TYPE(FileSwitchDirectory), module, "FileSwitchDirectory", 0);
        }

        void t_FileSwitchDirectory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FileSwitchDirectory).tp_dict, "class_", make_descriptor(FileSwitchDirectory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FileSwitchDirectory).tp_dict, "wrapfn_", make_descriptor(t_FileSwitchDirectory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FileSwitchDirectory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FileSwitchDirectory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FileSwitchDirectory::initializeClass, 1)))
            return NULL;
          return t_FileSwitchDirectory::wrap_Object(FileSwitchDirectory(((t_FileSwitchDirectory *) arg)->object.this$));
        }
        static PyObject *t_FileSwitchDirectory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FileSwitchDirectory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FileSwitchDirectory_init_(t_FileSwitchDirectory *self, PyObject *args, PyObject *kwds)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::store::Directory a1((jobject) NULL);
          ::org::apache::lucene::store::Directory a2((jobject) NULL);
          jboolean a3;
          FileSwitchDirectory object((jobject) NULL);

          if (!parseArgs(args, "KkkZ", ::java::util::Set::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_, &a1, &a2, &a3))
          {
            INT_CALL(object = FileSwitchDirectory(a0, a1, a2, a3));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FileSwitchDirectory_close(t_FileSwitchDirectory *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FileSwitchDirectory), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_FileSwitchDirectory_createOutput(t_FileSwitchDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexOutput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.createOutput(a0, a1));
            return ::org::apache::lucene::store::t_IndexOutput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FileSwitchDirectory), (PyObject *) self, "createOutput", args, 2);
        }

        static PyObject *t_FileSwitchDirectory_deleteFile(t_FileSwitchDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.deleteFile(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FileSwitchDirectory), (PyObject *) self, "deleteFile", args, 2);
        }

        static PyObject *t_FileSwitchDirectory_fileExists(t_FileSwitchDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileExists(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FileSwitchDirectory), (PyObject *) self, "fileExists", args, 2);
        }

        static PyObject *t_FileSwitchDirectory_fileLength(t_FileSwitchDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileLength(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FileSwitchDirectory), (PyObject *) self, "fileLength", args, 2);
        }

        static PyObject *t_FileSwitchDirectory_getExtension(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::store::FileSwitchDirectory::getExtension(a0));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "getExtension", arg);
          return NULL;
        }

        static PyObject *t_FileSwitchDirectory_getPrimaryDir(t_FileSwitchDirectory *self)
        {
          ::org::apache::lucene::store::Directory result((jobject) NULL);
          OBJ_CALL(result = self->object.getPrimaryDir());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(result);
        }

        static PyObject *t_FileSwitchDirectory_getSecondaryDir(t_FileSwitchDirectory *self)
        {
          ::org::apache::lucene::store::Directory result((jobject) NULL);
          OBJ_CALL(result = self->object.getSecondaryDir());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(result);
        }

        static PyObject *t_FileSwitchDirectory_listAll(t_FileSwitchDirectory *self, PyObject *args)
        {
          JArray< ::java::lang::String > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.listAll());
            return JArray<jstring>(result.this$).wrap();
          }

          return callSuper(&PY_TYPE(FileSwitchDirectory), (PyObject *) self, "listAll", args, 2);
        }

        static PyObject *t_FileSwitchDirectory_openInput(t_FileSwitchDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.openInput(a0, a1));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FileSwitchDirectory), (PyObject *) self, "openInput", args, 2);
        }

        static PyObject *t_FileSwitchDirectory_sync(t_FileSwitchDirectory *self, PyObject *args)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(self->object.sync(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FileSwitchDirectory), (PyObject *) self, "sync", args, 2);
        }

        static PyObject *t_FileSwitchDirectory_get__primaryDir(t_FileSwitchDirectory *self, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          OBJ_CALL(value = self->object.getPrimaryDir());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
        }

        static PyObject *t_FileSwitchDirectory_get__secondaryDir(t_FileSwitchDirectory *self, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          OBJ_CALL(value = self->object.getSecondaryDir());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/TokenMgrError.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *TokenMgrError::class$ = NULL;
          jmethodID *TokenMgrError::mids$ = NULL;
          bool TokenMgrError::live$ = false;

          jclass TokenMgrError::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/TokenMgrError");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_6e53ccc6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;I)V");
              mids$[mid_init$_8aaeec67] = env->getMethodID(cls, "<init>", "(ZIIILjava/lang/String;CI)V");
              mids$[mid_getMessage_14c7b5c5] = env->getMethodID(cls, "getMessage", "()Ljava/lang/String;");
              mids$[mid_LexicalError_e888c5f6] = env->getStaticMethodID(cls, "LexicalError", "(ZIIILjava/lang/String;C)Ljava/lang/String;");
              mids$[mid_addEscapes_97a5258f] = env->getStaticMethodID(cls, "addEscapes", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TokenMgrError::TokenMgrError() : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          TokenMgrError::TokenMgrError(const ::java::lang::String & a0, jint a1) : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_6e53ccc6, a0.this$, a1)) {}

          TokenMgrError::TokenMgrError(jboolean a0, jint a1, jint a2, jint a3, const ::java::lang::String & a4, jchar a5, jint a6) : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_8aaeec67, a0, a1, a2, a3, a4.this$, a5, a6)) {}

          ::java::lang::String TokenMgrError::getMessage() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getMessage_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_TokenMgrError_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenMgrError_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TokenMgrError_init_(t_TokenMgrError *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TokenMgrError_getMessage(t_TokenMgrError *self, PyObject *args);
          static PyObject *t_TokenMgrError_get__message(t_TokenMgrError *self, void *data);
          static PyGetSetDef t_TokenMgrError__fields_[] = {
            DECLARE_GET_FIELD(t_TokenMgrError, message),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TokenMgrError__methods_[] = {
            DECLARE_METHOD(t_TokenMgrError, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenMgrError, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenMgrError, getMessage, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TokenMgrError, t_TokenMgrError, ::java::lang::Error, TokenMgrError, t_TokenMgrError_init_, 0, 0, t_TokenMgrError__fields_, 0, 0);

          void t_TokenMgrError::install(PyObject *module)
          {
            installType(&PY_TYPE(TokenMgrError), module, "TokenMgrError", 0);
          }

          void t_TokenMgrError::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TokenMgrError).tp_dict, "class_", make_descriptor(TokenMgrError::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TokenMgrError).tp_dict, "wrapfn_", make_descriptor(t_TokenMgrError::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TokenMgrError).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TokenMgrError_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TokenMgrError::initializeClass, 1)))
              return NULL;
            return t_TokenMgrError::wrap_Object(TokenMgrError(((t_TokenMgrError *) arg)->object.this$));
          }
          static PyObject *t_TokenMgrError_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TokenMgrError::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TokenMgrError_init_(t_TokenMgrError *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                TokenMgrError object((jobject) NULL);

                INT_CALL(object = TokenMgrError());
                self->object = object;
                break;
              }
              goto err;
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                jint a1;
                TokenMgrError object((jobject) NULL);

                if (!parseArgs(args, "sI", &a0, &a1))
                {
                  INT_CALL(object = TokenMgrError(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 7:
              {
                jboolean a0;
                jint a1;
                jint a2;
                jint a3;
                ::java::lang::String a4((jobject) NULL);
                jchar a5;
                jint a6;
                TokenMgrError object((jobject) NULL);

                if (!parseArgs(args, "ZIIIsCI", &a0, &a1, &a2, &a3, &a4, &a5, &a6))
                {
                  INT_CALL(object = TokenMgrError(a0, a1, a2, a3, a4, a5, a6));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TokenMgrError_getMessage(t_TokenMgrError *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getMessage());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(TokenMgrError), (PyObject *) self, "getMessage", args, 2);
          }

          static PyObject *t_TokenMgrError_get__message(t_TokenMgrError *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getMessage());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexWriter.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {

          ::java::lang::Class *CompressingStoredFieldsIndexWriter::class$ = NULL;
          jmethodID *CompressingStoredFieldsIndexWriter::mids$ = NULL;
          bool CompressingStoredFieldsIndexWriter::live$ = false;

          jclass CompressingStoredFieldsIndexWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void CompressingStoredFieldsIndexWriter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {
          static PyObject *t_CompressingStoredFieldsIndexWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressingStoredFieldsIndexWriter_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressingStoredFieldsIndexWriter_close(t_CompressingStoredFieldsIndexWriter *self);

          static PyMethodDef t_CompressingStoredFieldsIndexWriter__methods_[] = {
            DECLARE_METHOD(t_CompressingStoredFieldsIndexWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingStoredFieldsIndexWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingStoredFieldsIndexWriter, close, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CompressingStoredFieldsIndexWriter, t_CompressingStoredFieldsIndexWriter, ::java::lang::Object, CompressingStoredFieldsIndexWriter, abstract_init, 0, 0, 0, 0, 0);

          void t_CompressingStoredFieldsIndexWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(CompressingStoredFieldsIndexWriter), module, "CompressingStoredFieldsIndexWriter", 0);
          }

          void t_CompressingStoredFieldsIndexWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsIndexWriter).tp_dict, "class_", make_descriptor(CompressingStoredFieldsIndexWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsIndexWriter).tp_dict, "wrapfn_", make_descriptor(t_CompressingStoredFieldsIndexWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsIndexWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CompressingStoredFieldsIndexWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompressingStoredFieldsIndexWriter::initializeClass, 1)))
              return NULL;
            return t_CompressingStoredFieldsIndexWriter::wrap_Object(CompressingStoredFieldsIndexWriter(((t_CompressingStoredFieldsIndexWriter *) arg)->object.this$));
          }
          static PyObject *t_CompressingStoredFieldsIndexWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompressingStoredFieldsIndexWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CompressingStoredFieldsIndexWriter_close(t_CompressingStoredFieldsIndexWriter *self)
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/AbstractPagedMutable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *AbstractPagedMutable::class$ = NULL;
          jmethodID *AbstractPagedMutable::mids$ = NULL;
          bool AbstractPagedMutable::live$ = false;

          jclass AbstractPagedMutable::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/AbstractPagedMutable");

              mids$ = new jmethodID[max_mid];
              mids$[mid_get_0ee6df33] = env->getMethodID(cls, "get", "(J)J");
              mids$[mid_grow_3bfef47c] = env->getMethodID(cls, "grow", "()Lorg/apache/lucene/util/packed/AbstractPagedMutable;");
              mids$[mid_grow_5f2a2a5f] = env->getMethodID(cls, "grow", "(J)Lorg/apache/lucene/util/packed/AbstractPagedMutable;");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_resize_5f2a2a5f] = env->getMethodID(cls, "resize", "(J)Lorg/apache/lucene/util/packed/AbstractPagedMutable;");
              mids$[mid_set_a7e12ca4] = env->getMethodID(cls, "set", "(JJ)V");
              mids$[mid_size_54c6a17a] = env->getMethodID(cls, "size", "()J");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_fillPages_54c6a166] = env->getMethodID(cls, "fillPages", "()V");
              mids$[mid_newMutable_48ebd249] = env->getMethodID(cls, "newMutable", "(II)Lorg/apache/lucene/util/packed/PackedInts$Mutable;");
              mids$[mid_newUnfilledCopy_5f2a2a5f] = env->getMethodID(cls, "newUnfilledCopy", "(J)Lorg/apache/lucene/util/packed/AbstractPagedMutable;");
              mids$[mid_baseRamBytesUsed_54c6a17a] = env->getMethodID(cls, "baseRamBytesUsed", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jlong AbstractPagedMutable::get(jlong a0) const
          {
            return env->callLongMethod(this$, mids$[mid_get_0ee6df33], a0);
          }

          AbstractPagedMutable AbstractPagedMutable::grow() const
          {
            return AbstractPagedMutable(env->callObjectMethod(this$, mids$[mid_grow_3bfef47c]));
          }

          AbstractPagedMutable AbstractPagedMutable::grow(jlong a0) const
          {
            return AbstractPagedMutable(env->callObjectMethod(this$, mids$[mid_grow_5f2a2a5f], a0));
          }

          jlong AbstractPagedMutable::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }

          AbstractPagedMutable AbstractPagedMutable::resize(jlong a0) const
          {
            return AbstractPagedMutable(env->callObjectMethod(this$, mids$[mid_resize_5f2a2a5f], a0));
          }

          void AbstractPagedMutable::set(jlong a0, jlong a1) const
          {
            env->callVoidMethod(this$, mids$[mid_set_a7e12ca4], a0, a1);
          }

          jlong AbstractPagedMutable::size() const
          {
            return env->callLongMethod(this$, mids$[mid_size_54c6a17a]);
          }

          ::java::lang::String AbstractPagedMutable::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_AbstractPagedMutable_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractPagedMutable_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractPagedMutable_of_(t_AbstractPagedMutable *self, PyObject *args);
          static PyObject *t_AbstractPagedMutable_get(t_AbstractPagedMutable *self, PyObject *args);
          static PyObject *t_AbstractPagedMutable_grow(t_AbstractPagedMutable *self, PyObject *args);
          static PyObject *t_AbstractPagedMutable_ramBytesUsed(t_AbstractPagedMutable *self);
          static PyObject *t_AbstractPagedMutable_resize(t_AbstractPagedMutable *self, PyObject *arg);
          static PyObject *t_AbstractPagedMutable_set(t_AbstractPagedMutable *self, PyObject *args);
          static PyObject *t_AbstractPagedMutable_size(t_AbstractPagedMutable *self);
          static PyObject *t_AbstractPagedMutable_toString(t_AbstractPagedMutable *self, PyObject *args);
          static PyObject *t_AbstractPagedMutable_get__parameters_(t_AbstractPagedMutable *self, void *data);
          static PyGetSetDef t_AbstractPagedMutable__fields_[] = {
            DECLARE_GET_FIELD(t_AbstractPagedMutable, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AbstractPagedMutable__methods_[] = {
            DECLARE_METHOD(t_AbstractPagedMutable, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractPagedMutable, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractPagedMutable, of_, METH_VARARGS),
            DECLARE_METHOD(t_AbstractPagedMutable, get, METH_VARARGS),
            DECLARE_METHOD(t_AbstractPagedMutable, grow, METH_VARARGS),
            DECLARE_METHOD(t_AbstractPagedMutable, ramBytesUsed, METH_NOARGS),
            DECLARE_METHOD(t_AbstractPagedMutable, resize, METH_O),
            DECLARE_METHOD(t_AbstractPagedMutable, set, METH_VARARGS),
            DECLARE_METHOD(t_AbstractPagedMutable, size, METH_NOARGS),
            DECLARE_METHOD(t_AbstractPagedMutable, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractPagedMutable, t_AbstractPagedMutable, ::org::apache::lucene::util::LongValues, AbstractPagedMutable, abstract_init, 0, 0, t_AbstractPagedMutable__fields_, 0, 0);
          PyObject *t_AbstractPagedMutable::wrap_Object(const AbstractPagedMutable& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractPagedMutable::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractPagedMutable *self = (t_AbstractPagedMutable *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_AbstractPagedMutable::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractPagedMutable::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractPagedMutable *self = (t_AbstractPagedMutable *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_AbstractPagedMutable::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractPagedMutable), module, "AbstractPagedMutable", 0);
          }

          void t_AbstractPagedMutable::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractPagedMutable).tp_dict, "class_", make_descriptor(AbstractPagedMutable::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractPagedMutable).tp_dict, "wrapfn_", make_descriptor(t_AbstractPagedMutable::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractPagedMutable).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractPagedMutable_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractPagedMutable::initializeClass, 1)))
              return NULL;
            return t_AbstractPagedMutable::wrap_Object(AbstractPagedMutable(((t_AbstractPagedMutable *) arg)->object.this$));
          }
          static PyObject *t_AbstractPagedMutable_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractPagedMutable::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AbstractPagedMutable_of_(t_AbstractPagedMutable *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_AbstractPagedMutable_get(t_AbstractPagedMutable *self, PyObject *args)
          {
            jlong a0;
            jlong result;

            if (!parseArgs(args, "J", &a0))
            {
              OBJ_CALL(result = self->object.get(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(AbstractPagedMutable), (PyObject *) self, "get", args, 2);
          }

          static PyObject *t_AbstractPagedMutable_grow(t_AbstractPagedMutable *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                AbstractPagedMutable result((jobject) NULL);
                OBJ_CALL(result = self->object.grow());
                return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : t_AbstractPagedMutable::wrap_Object(result);
              }
              break;
             case 1:
              {
                jlong a0;
                AbstractPagedMutable result((jobject) NULL);

                if (!parseArgs(args, "J", &a0))
                {
                  OBJ_CALL(result = self->object.grow(a0));
                  return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : t_AbstractPagedMutable::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "grow", args);
            return NULL;
          }

          static PyObject *t_AbstractPagedMutable_ramBytesUsed(t_AbstractPagedMutable *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_AbstractPagedMutable_resize(t_AbstractPagedMutable *self, PyObject *arg)
          {
            jlong a0;
            AbstractPagedMutable result((jobject) NULL);

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(result = self->object.resize(a0));
              return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : t_AbstractPagedMutable::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "resize", arg);
            return NULL;
          }

          static PyObject *t_AbstractPagedMutable_set(t_AbstractPagedMutable *self, PyObject *args)
          {
            jlong a0;
            jlong a1;

            if (!parseArgs(args, "JJ", &a0, &a1))
            {
              OBJ_CALL(self->object.set(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "set", args);
            return NULL;
          }

          static PyObject *t_AbstractPagedMutable_size(t_AbstractPagedMutable *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.size());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_AbstractPagedMutable_toString(t_AbstractPagedMutable *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(AbstractPagedMutable), (PyObject *) self, "toString", args, 2);
          }
          static PyObject *t_AbstractPagedMutable_get__parameters_(t_AbstractPagedMutable *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/RollingCharBuffer.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *RollingCharBuffer::class$ = NULL;
          jmethodID *RollingCharBuffer::mids$ = NULL;
          bool RollingCharBuffer::live$ = false;

          jclass RollingCharBuffer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/RollingCharBuffer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_freeBefore_39c7bd3c] = env->getMethodID(cls, "freeBefore", "(I)V");
              mids$[mid_get_39c7bd23] = env->getMethodID(cls, "get", "(I)I");
              mids$[mid_get_acd005cf] = env->getMethodID(cls, "get", "(II)[C");
              mids$[mid_reset_cf2e3c10] = env->getMethodID(cls, "reset", "(Ljava/io/Reader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RollingCharBuffer::RollingCharBuffer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void RollingCharBuffer::freeBefore(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_freeBefore_39c7bd3c], a0);
          }

          jint RollingCharBuffer::get(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_get_39c7bd23], a0);
          }

          JArray< jchar > RollingCharBuffer::get(jint a0, jint a1) const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_get_acd005cf], a0, a1));
          }

          void RollingCharBuffer::reset(const ::java::io::Reader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_reset_cf2e3c10], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_RollingCharBuffer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RollingCharBuffer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RollingCharBuffer_init_(t_RollingCharBuffer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_RollingCharBuffer_freeBefore(t_RollingCharBuffer *self, PyObject *arg);
          static PyObject *t_RollingCharBuffer_get(t_RollingCharBuffer *self, PyObject *args);
          static PyObject *t_RollingCharBuffer_reset(t_RollingCharBuffer *self, PyObject *arg);

          static PyMethodDef t_RollingCharBuffer__methods_[] = {
            DECLARE_METHOD(t_RollingCharBuffer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RollingCharBuffer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RollingCharBuffer, freeBefore, METH_O),
            DECLARE_METHOD(t_RollingCharBuffer, get, METH_VARARGS),
            DECLARE_METHOD(t_RollingCharBuffer, reset, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(RollingCharBuffer, t_RollingCharBuffer, ::java::lang::Object, RollingCharBuffer, t_RollingCharBuffer_init_, 0, 0, 0, 0, 0);

          void t_RollingCharBuffer::install(PyObject *module)
          {
            installType(&PY_TYPE(RollingCharBuffer), module, "RollingCharBuffer", 0);
          }

          void t_RollingCharBuffer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(RollingCharBuffer).tp_dict, "class_", make_descriptor(RollingCharBuffer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RollingCharBuffer).tp_dict, "wrapfn_", make_descriptor(t_RollingCharBuffer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RollingCharBuffer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_RollingCharBuffer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RollingCharBuffer::initializeClass, 1)))
              return NULL;
            return t_RollingCharBuffer::wrap_Object(RollingCharBuffer(((t_RollingCharBuffer *) arg)->object.this$));
          }
          static PyObject *t_RollingCharBuffer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RollingCharBuffer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RollingCharBuffer_init_(t_RollingCharBuffer *self, PyObject *args, PyObject *kwds)
          {
            RollingCharBuffer object((jobject) NULL);

            INT_CALL(object = RollingCharBuffer());
            self->object = object;

            return 0;
          }

          static PyObject *t_RollingCharBuffer_freeBefore(t_RollingCharBuffer *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.freeBefore(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "freeBefore", arg);
            return NULL;
          }

          static PyObject *t_RollingCharBuffer_get(t_RollingCharBuffer *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                jint result;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.get(a0));
                  return PyInt_FromLong((long) result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                jint a1;
                JArray< jchar > result((jobject) NULL);

                if (!parseArgs(args, "II", &a0, &a1))
                {
                  OBJ_CALL(result = self->object.get(a0, a1));
                  return result.wrap();
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "get", args);
            return NULL;
          }

          static PyObject *t_RollingCharBuffer_reset(t_RollingCharBuffer *self, PyObject *arg)
          {
            ::java::io::Reader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.reset(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "reset", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/OutputStreamIndexOutput.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/io/OutputStream.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *OutputStreamIndexOutput::class$ = NULL;
        jmethodID *OutputStreamIndexOutput::mids$ = NULL;
        bool OutputStreamIndexOutput::live$ = false;

        jclass OutputStreamIndexOutput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/OutputStreamIndexOutput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_20acd1f6] = env->getMethodID(cls, "<init>", "(Ljava/io/OutputStream;I)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_flush_54c6a166] = env->getMethodID(cls, "flush", "()V");
            mids$[mid_getChecksum_54c6a17a] = env->getMethodID(cls, "getChecksum", "()J");
            mids$[mid_getFilePointer_54c6a17a] = env->getMethodID(cls, "getFilePointer", "()J");
            mids$[mid_writeByte_b2271687] = env->getMethodID(cls, "writeByte", "(B)V");
            mids$[mid_writeBytes_86f4435f] = env->getMethodID(cls, "writeBytes", "([BII)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        OutputStreamIndexOutput::OutputStreamIndexOutput(const ::java::io::OutputStream & a0, jint a1) : ::org::apache::lucene::store::IndexOutput(env->newObject(initializeClass, &mids$, mid_init$_20acd1f6, a0.this$, a1)) {}

        void OutputStreamIndexOutput::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void OutputStreamIndexOutput::flush() const
        {
          env->callVoidMethod(this$, mids$[mid_flush_54c6a166]);
        }

        jlong OutputStreamIndexOutput::getChecksum() const
        {
          return env->callLongMethod(this$, mids$[mid_getChecksum_54c6a17a]);
        }

        jlong OutputStreamIndexOutput::getFilePointer() const
        {
          return env->callLongMethod(this$, mids$[mid_getFilePointer_54c6a17a]);
        }

        void OutputStreamIndexOutput::writeByte(jbyte a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeByte_b2271687], a0);
        }

        void OutputStreamIndexOutput::writeBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_writeBytes_86f4435f], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_OutputStreamIndexOutput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OutputStreamIndexOutput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_OutputStreamIndexOutput_init_(t_OutputStreamIndexOutput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_OutputStreamIndexOutput_close(t_OutputStreamIndexOutput *self, PyObject *args);
        static PyObject *t_OutputStreamIndexOutput_flush(t_OutputStreamIndexOutput *self, PyObject *args);
        static PyObject *t_OutputStreamIndexOutput_getChecksum(t_OutputStreamIndexOutput *self, PyObject *args);
        static PyObject *t_OutputStreamIndexOutput_getFilePointer(t_OutputStreamIndexOutput *self, PyObject *args);
        static PyObject *t_OutputStreamIndexOutput_writeByte(t_OutputStreamIndexOutput *self, PyObject *args);
        static PyObject *t_OutputStreamIndexOutput_writeBytes(t_OutputStreamIndexOutput *self, PyObject *args);
        static PyObject *t_OutputStreamIndexOutput_get__checksum(t_OutputStreamIndexOutput *self, void *data);
        static PyObject *t_OutputStreamIndexOutput_get__filePointer(t_OutputStreamIndexOutput *self, void *data);
        static PyGetSetDef t_OutputStreamIndexOutput__fields_[] = {
          DECLARE_GET_FIELD(t_OutputStreamIndexOutput, checksum),
          DECLARE_GET_FIELD(t_OutputStreamIndexOutput, filePointer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_OutputStreamIndexOutput__methods_[] = {
          DECLARE_METHOD(t_OutputStreamIndexOutput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OutputStreamIndexOutput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OutputStreamIndexOutput, close, METH_VARARGS),
          DECLARE_METHOD(t_OutputStreamIndexOutput, flush, METH_VARARGS),
          DECLARE_METHOD(t_OutputStreamIndexOutput, getChecksum, METH_VARARGS),
          DECLARE_METHOD(t_OutputStreamIndexOutput, getFilePointer, METH_VARARGS),
          DECLARE_METHOD(t_OutputStreamIndexOutput, writeByte, METH_VARARGS),
          DECLARE_METHOD(t_OutputStreamIndexOutput, writeBytes, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(OutputStreamIndexOutput, t_OutputStreamIndexOutput, ::org::apache::lucene::store::IndexOutput, OutputStreamIndexOutput, t_OutputStreamIndexOutput_init_, 0, 0, t_OutputStreamIndexOutput__fields_, 0, 0);

        void t_OutputStreamIndexOutput::install(PyObject *module)
        {
          installType(&PY_TYPE(OutputStreamIndexOutput), module, "OutputStreamIndexOutput", 0);
        }

        void t_OutputStreamIndexOutput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(OutputStreamIndexOutput).tp_dict, "class_", make_descriptor(OutputStreamIndexOutput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(OutputStreamIndexOutput).tp_dict, "wrapfn_", make_descriptor(t_OutputStreamIndexOutput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(OutputStreamIndexOutput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_OutputStreamIndexOutput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, OutputStreamIndexOutput::initializeClass, 1)))
            return NULL;
          return t_OutputStreamIndexOutput::wrap_Object(OutputStreamIndexOutput(((t_OutputStreamIndexOutput *) arg)->object.this$));
        }
        static PyObject *t_OutputStreamIndexOutput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, OutputStreamIndexOutput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_OutputStreamIndexOutput_init_(t_OutputStreamIndexOutput *self, PyObject *args, PyObject *kwds)
        {
          ::java::io::OutputStream a0((jobject) NULL);
          jint a1;
          OutputStreamIndexOutput object((jobject) NULL);

          if (!parseArgs(args, "kI", ::java::io::OutputStream::initializeClass, &a0, &a1))
          {
            INT_CALL(object = OutputStreamIndexOutput(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_OutputStreamIndexOutput_close(t_OutputStreamIndexOutput *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(OutputStreamIndexOutput), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_OutputStreamIndexOutput_flush(t_OutputStreamIndexOutput *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.flush());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(OutputStreamIndexOutput), (PyObject *) self, "flush", args, 2);
        }

        static PyObject *t_OutputStreamIndexOutput_getChecksum(t_OutputStreamIndexOutput *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getChecksum());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(OutputStreamIndexOutput), (PyObject *) self, "getChecksum", args, 2);
        }

        static PyObject *t_OutputStreamIndexOutput_getFilePointer(t_OutputStreamIndexOutput *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getFilePointer());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(OutputStreamIndexOutput), (PyObject *) self, "getFilePointer", args, 2);
        }

        static PyObject *t_OutputStreamIndexOutput_writeByte(t_OutputStreamIndexOutput *self, PyObject *args)
        {
          jbyte a0;

          if (!parseArgs(args, "B", &a0))
          {
            OBJ_CALL(self->object.writeByte(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(OutputStreamIndexOutput), (PyObject *) self, "writeByte", args, 2);
        }

        static PyObject *t_OutputStreamIndexOutput_writeBytes(t_OutputStreamIndexOutput *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.writeBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(OutputStreamIndexOutput), (PyObject *) self, "writeBytes", args, 2);
        }

        static PyObject *t_OutputStreamIndexOutput_get__checksum(t_OutputStreamIndexOutput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getChecksum());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_OutputStreamIndexOutput_get__filePointer(t_OutputStreamIndexOutput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getFilePointer());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Short.h"
#include "java/lang/Comparable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Short::class$ = NULL;
    jmethodID *Short::mids$ = NULL;
    bool Short::live$ = false;
    jshort Short::MAX_VALUE = (jshort) 0;
    jshort Short::MIN_VALUE = (jshort) 0;
    jint Short::SIZE = (jint) 0;
    ::java::lang::Class *Short::TYPE = NULL;

    jclass Short::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Short");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_3bc40c6a] = env->getMethodID(cls, "<init>", "(S)V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_byteValue_54c6a172] = env->getMethodID(cls, "byteValue", "()B");
        mids$[mid_compare_5729c2d1] = env->getStaticMethodID(cls, "compare", "(SS)I");
        mids$[mid_compareTo_6b8573d1] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Short;)I");
        mids$[mid_decode_88c4db41] = env->getStaticMethodID(cls, "decode", "(Ljava/lang/String;)Ljava/lang/Short;");
        mids$[mid_doubleValue_54c6a174] = env->getMethodID(cls, "doubleValue", "()D");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_floatValue_54c6a176] = env->getMethodID(cls, "floatValue", "()F");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_intValue_54c6a179] = env->getMethodID(cls, "intValue", "()I");
        mids$[mid_longValue_54c6a17a] = env->getMethodID(cls, "longValue", "()J");
        mids$[mid_parseShort_5fdc3f4d] = env->getStaticMethodID(cls, "parseShort", "(Ljava/lang/String;)S");
        mids$[mid_parseShort_6e53ccc3] = env->getStaticMethodID(cls, "parseShort", "(Ljava/lang/String;I)S");
        mids$[mid_reverseBytes_3bc40c6f] = env->getStaticMethodID(cls, "reverseBytes", "(S)S");
        mids$[mid_shortValue_54c6a163] = env->getMethodID(cls, "shortValue", "()S");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_toString_9c2e4c45] = env->getStaticMethodID(cls, "toString", "(S)Ljava/lang/String;");
        mids$[mid_valueOf_5d563b1b] = env->getStaticMethodID(cls, "valueOf", "(S)Ljava/lang/Short;");
        mids$[mid_valueOf_88c4db41] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Ljava/lang/Short;");
        mids$[mid_valueOf_0f6bcb23] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;I)Ljava/lang/Short;");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        MAX_VALUE = env->getStaticShortField(cls, "MAX_VALUE");
        MIN_VALUE = env->getStaticShortField(cls, "MIN_VALUE");
        SIZE = env->getStaticIntField(cls, "SIZE");
        TYPE = new ::java::lang::Class(env->getStaticObjectField(cls, "TYPE", "Ljava/lang/Class;"));
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Short::Short(jshort a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_3bc40c6a, a0)) {}

    Short::Short(const ::java::lang::String & a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    jbyte Short::byteValue() const
    {
      return env->callByteMethod(this$, mids$[mid_byteValue_54c6a172]);
    }

    jint Short::compare(jshort a0, jshort a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_compare_5729c2d1], a0, a1);
    }

    jint Short::compareTo(const Short & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareTo_6b8573d1], a0.this$);
    }

    Short Short::decode(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Short(env->callStaticObjectMethod(cls, mids$[mid_decode_88c4db41], a0.this$));
    }

    jdouble Short::doubleValue() const
    {
      return env->callDoubleMethod(this$, mids$[mid_doubleValue_54c6a174]);
    }

    jboolean Short::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    jfloat Short::floatValue() const
    {
      return env->callFloatMethod(this$, mids$[mid_floatValue_54c6a176]);
    }

    jint Short::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jint Short::intValue() const
    {
      return env->callIntMethod(this$, mids$[mid_intValue_54c6a179]);
    }

    jlong Short::longValue() const
    {
      return env->callLongMethod(this$, mids$[mid_longValue_54c6a17a]);
    }

    jshort Short::parseShort(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticShortMethod(cls, mids$[mid_parseShort_5fdc3f4d], a0.this$);
    }

    jshort Short::parseShort(const ::java::lang::String & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticShortMethod(cls, mids$[mid_parseShort_6e53ccc3], a0.this$, a1);
    }

    jshort Short::reverseBytes(jshort a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticShortMethod(cls, mids$[mid_reverseBytes_3bc40c6f], a0);
    }

    jshort Short::shortValue() const
    {
      return env->callShortMethod(this$, mids$[mid_shortValue_54c6a163]);
    }

    ::java::lang::String Short::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    ::java::lang::String Short::toString(jshort a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_9c2e4c45], a0));
    }

    Short Short::valueOf(jshort a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Short(env->callStaticObjectMethod(cls, mids$[mid_valueOf_5d563b1b], a0));
    }

    Short Short::valueOf(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Short(env->callStaticObjectMethod(cls, mids$[mid_valueOf_88c4db41], a0.this$));
    }

    Short Short::valueOf(const ::java::lang::String & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return Short(env->callStaticObjectMethod(cls, mids$[mid_valueOf_0f6bcb23], a0.this$, a1));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Short_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Short_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Short_init_(t_Short *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Short_byteValue(t_Short *self, PyObject *args);
    static PyObject *t_Short_compare(PyTypeObject *type, PyObject *args);
    static PyObject *t_Short_compareTo(t_Short *self, PyObject *arg);
    static PyObject *t_Short_decode(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Short_doubleValue(t_Short *self, PyObject *args);
    static PyObject *t_Short_equals(t_Short *self, PyObject *args);
    static PyObject *t_Short_floatValue(t_Short *self, PyObject *args);
    static PyObject *t_Short_hashCode(t_Short *self, PyObject *args);
    static PyObject *t_Short_intValue(t_Short *self, PyObject *args);
    static PyObject *t_Short_longValue(t_Short *self, PyObject *args);
    static PyObject *t_Short_parseShort(PyTypeObject *type, PyObject *args);
    static PyObject *t_Short_reverseBytes(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Short_shortValue(t_Short *self, PyObject *args);
    static PyObject *t_Short_toString(t_Short *self, PyObject *args);
    static PyObject *t_Short_toString_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Short_valueOf(PyTypeObject *type, PyObject *args);

    static PyMethodDef t_Short__methods_[] = {
      DECLARE_METHOD(t_Short, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Short, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Short, byteValue, METH_VARARGS),
      DECLARE_METHOD(t_Short, compare, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Short, compareTo, METH_O),
      DECLARE_METHOD(t_Short, decode, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Short, doubleValue, METH_VARARGS),
      DECLARE_METHOD(t_Short, equals, METH_VARARGS),
      DECLARE_METHOD(t_Short, floatValue, METH_VARARGS),
      DECLARE_METHOD(t_Short, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Short, intValue, METH_VARARGS),
      DECLARE_METHOD(t_Short, longValue, METH_VARARGS),
      DECLARE_METHOD(t_Short, parseShort, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Short, reverseBytes, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Short, shortValue, METH_VARARGS),
      DECLARE_METHOD(t_Short, toString, METH_VARARGS),
      DECLARE_METHOD(t_Short, toString_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Short, valueOf, METH_VARARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Short, t_Short, ::java::lang::Number, Short, t_Short_init_, 0, 0, 0, 0, 0);

    void t_Short::install(PyObject *module)
    {
      installType(&PY_TYPE(Short), module, "Short", 0);
    }

    void t_Short::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Short).tp_dict, "class_", make_descriptor(Short::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Short).tp_dict, "wrapfn_", make_descriptor(unboxShort));
      PyDict_SetItemString(PY_TYPE(Short).tp_dict, "boxfn_", make_descriptor(boxShort));
      env->getClass(Short::initializeClass);
      PyDict_SetItemString(PY_TYPE(Short).tp_dict, "MAX_VALUE", make_descriptor(Short::MAX_VALUE));
      PyDict_SetItemString(PY_TYPE(Short).tp_dict, "MIN_VALUE", make_descriptor(Short::MIN_VALUE));
      PyDict_SetItemString(PY_TYPE(Short).tp_dict, "SIZE", make_descriptor(Short::SIZE));
      PyDict_SetItemString(PY_TYPE(Short).tp_dict, "TYPE", make_descriptor(::java::lang::t_Class::wrap_Object(*Short::TYPE)));
    }

    static PyObject *t_Short_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Short::initializeClass, 1)))
        return NULL;
      return t_Short::wrap_Object(Short(((t_Short *) arg)->object.this$));
    }
    static PyObject *t_Short_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Short::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Short_init_(t_Short *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jshort a0;
          Short object((jobject) NULL);

          if (!parseArgs(args, "S", &a0))
          {
            INT_CALL(object = Short(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Short object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Short(a0));
            self->object = object;
            break;
          }
        }
       default:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_Short_byteValue(t_Short *self, PyObject *args)
    {
      jbyte result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.byteValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Short), (PyObject *) self, "byteValue", args, 2);
    }

    static PyObject *t_Short_compare(PyTypeObject *type, PyObject *args)
    {
      jshort a0;
      jshort a1;
      jint result;

      if (!parseArgs(args, "SS", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Short::compare(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "compare", args);
      return NULL;
    }

    static PyObject *t_Short_compareTo(t_Short *self, PyObject *arg)
    {
      Short a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Short), &a0))
      {
        OBJ_CALL(result = self->object.compareTo(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
      return NULL;
    }

    static PyObject *t_Short_decode(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      Short result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = ::java::lang::Short::decode(a0));
        return t_Short::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "decode", arg);
      return NULL;
    }

    static PyObject *t_Short_doubleValue(t_Short *self, PyObject *args)
    {
      jdouble result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.doubleValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(&PY_TYPE(Short), (PyObject *) self, "doubleValue", args, 2);
    }

    static PyObject *t_Short_equals(t_Short *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(Short), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Short_floatValue(t_Short *self, PyObject *args)
    {
      jfloat result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.floatValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(&PY_TYPE(Short), (PyObject *) self, "floatValue", args, 2);
    }

    static PyObject *t_Short_hashCode(t_Short *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Short), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Short_intValue(t_Short *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.intValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Short), (PyObject *) self, "intValue", args, 2);
    }

    static PyObject *t_Short_longValue(t_Short *self, PyObject *args)
    {
      jlong result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.longValue());
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      return callSuper(&PY_TYPE(Short), (PyObject *) self, "longValue", args, 2);
    }

    static PyObject *t_Short_parseShort(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          jshort result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Short::parseShort(a0));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          jshort result;

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Short::parseShort(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "parseShort", args);
      return NULL;
    }

    static PyObject *t_Short_reverseBytes(PyTypeObject *type, PyObject *arg)
    {
      jshort a0;
      jshort result;

      if (!parseArg(arg, "S", &a0))
      {
        OBJ_CALL(result = ::java::lang::Short::reverseBytes(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "reverseBytes", arg);
      return NULL;
    }

    static PyObject *t_Short_shortValue(t_Short *self, PyObject *args)
    {
      jshort result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.shortValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Short), (PyObject *) self, "shortValue", args, 2);
    }

    static PyObject *t_Short_toString(t_Short *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(Short), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Short_toString_(PyTypeObject *type, PyObject *args)
    {
      jshort a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, "S", &a0))
      {
        OBJ_CALL(result = ::java::lang::Short::toString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toString_", args);
      return NULL;
    }

    static PyObject *t_Short_valueOf(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jshort a0;
          Short result((jobject) NULL);

          if (!parseArgs(args, "S", &a0))
          {
            OBJ_CALL(result = ::java::lang::Short::valueOf(a0));
            return t_Short::wrap_Object(result);
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Short result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Short::valueOf(a0));
            return t_Short::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          Short result((jobject) NULL);

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Short::valueOf(a0, a1));
            return t_Short::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "valueOf", args);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/MultiTermQuery$RewriteMethod.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MultiTermQuery::class$ = NULL;
        jmethodID *MultiTermQuery::mids$ = NULL;
        bool MultiTermQuery::live$ = false;
        ::org::apache::lucene::search::MultiTermQuery$RewriteMethod *MultiTermQuery::CONSTANT_SCORE_AUTO_REWRITE_DEFAULT = NULL;
        ::org::apache::lucene::search::MultiTermQuery$RewriteMethod *MultiTermQuery::CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE = NULL;
        ::org::apache::lucene::search::MultiTermQuery$RewriteMethod *MultiTermQuery::CONSTANT_SCORE_FILTER_REWRITE = NULL;
        ::org::apache::lucene::search::MultiTermQuery$RewriteMethod *MultiTermQuery::SCORING_BOOLEAN_QUERY_REWRITE = NULL;

        jclass MultiTermQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MultiTermQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
            mids$[mid_getRewriteMethod_8919154b] = env->getMethodID(cls, "getRewriteMethod", "()Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_setRewriteMethod_c3c3909e] = env->getMethodID(cls, "setRewriteMethod", "(Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;)V");
            mids$[mid_getTermsEnum_fb3ac14e] = env->getMethodID(cls, "getTermsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;");
            mids$[mid_getTermsEnum_67b5a29a] = env->getMethodID(cls, "getTermsEnum", "(Lorg/apache/lucene/index/Terms;Lorg/apache/lucene/util/AttributeSource;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            CONSTANT_SCORE_AUTO_REWRITE_DEFAULT = new ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->getStaticObjectField(cls, "CONSTANT_SCORE_AUTO_REWRITE_DEFAULT", "Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;"));
            CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE = new ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->getStaticObjectField(cls, "CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE", "Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;"));
            CONSTANT_SCORE_FILTER_REWRITE = new ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->getStaticObjectField(cls, "CONSTANT_SCORE_FILTER_REWRITE", "Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;"));
            SCORING_BOOLEAN_QUERY_REWRITE = new ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->getStaticObjectField(cls, "SCORING_BOOLEAN_QUERY_REWRITE", "Lorg/apache/lucene/search/MultiTermQuery$RewriteMethod;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiTermQuery::MultiTermQuery(const ::java::lang::String & a0) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        jboolean MultiTermQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::java::lang::String MultiTermQuery::getField() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
        }

        ::org::apache::lucene::search::MultiTermQuery$RewriteMethod MultiTermQuery::getRewriteMethod() const
        {
          return ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->callObjectMethod(this$, mids$[mid_getRewriteMethod_8919154b]));
        }

        jint MultiTermQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::org::apache::lucene::search::Query MultiTermQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
        }

        void MultiTermQuery::setRewriteMethod(const ::org::apache::lucene::search::MultiTermQuery$RewriteMethod & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setRewriteMethod_c3c3909e], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/MultiTermQuery$ConstantScoreAutoRewrite.h"
#include "org/apache/lucene/search/MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite.h"
#include "org/apache/lucene/search/MultiTermQuery$TopTermsScoringBooleanQueryRewrite.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MultiTermQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTermQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiTermQuery_init_(t_MultiTermQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiTermQuery_equals(t_MultiTermQuery *self, PyObject *args);
        static PyObject *t_MultiTermQuery_getField(t_MultiTermQuery *self);
        static PyObject *t_MultiTermQuery_getRewriteMethod(t_MultiTermQuery *self);
        static PyObject *t_MultiTermQuery_hashCode(t_MultiTermQuery *self, PyObject *args);
        static PyObject *t_MultiTermQuery_rewrite(t_MultiTermQuery *self, PyObject *args);
        static PyObject *t_MultiTermQuery_setRewriteMethod(t_MultiTermQuery *self, PyObject *arg);
        static PyObject *t_MultiTermQuery_get__field(t_MultiTermQuery *self, void *data);
        static PyObject *t_MultiTermQuery_get__rewriteMethod(t_MultiTermQuery *self, void *data);
        static int t_MultiTermQuery_set__rewriteMethod(t_MultiTermQuery *self, PyObject *arg, void *data);
        static PyGetSetDef t_MultiTermQuery__fields_[] = {
          DECLARE_GET_FIELD(t_MultiTermQuery, field),
          DECLARE_GETSET_FIELD(t_MultiTermQuery, rewriteMethod),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiTermQuery__methods_[] = {
          DECLARE_METHOD(t_MultiTermQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermQuery, getField, METH_NOARGS),
          DECLARE_METHOD(t_MultiTermQuery, getRewriteMethod, METH_NOARGS),
          DECLARE_METHOD(t_MultiTermQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermQuery, setRewriteMethod, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiTermQuery, t_MultiTermQuery, ::org::apache::lucene::search::Query, MultiTermQuery, t_MultiTermQuery_init_, 0, 0, t_MultiTermQuery__fields_, 0, 0);

        void t_MultiTermQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiTermQuery), module, "MultiTermQuery", 0);
          PyDict_SetItemString(PY_TYPE(MultiTermQuery).tp_dict, "ConstantScoreAutoRewrite", make_descriptor(&PY_TYPE(MultiTermQuery$ConstantScoreAutoRewrite)));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery).tp_dict, "TopTermsBoostOnlyBooleanQueryRewrite", make_descriptor(&PY_TYPE(MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite)));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery).tp_dict, "TopTermsScoringBooleanQueryRewrite", make_descriptor(&PY_TYPE(MultiTermQuery$TopTermsScoringBooleanQueryRewrite)));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery).tp_dict, "RewriteMethod", make_descriptor(&PY_TYPE(MultiTermQuery$RewriteMethod)));
        }

        void t_MultiTermQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiTermQuery).tp_dict, "class_", make_descriptor(MultiTermQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery).tp_dict, "wrapfn_", make_descriptor(t_MultiTermQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(MultiTermQuery::initializeClass);
          PyDict_SetItemString(PY_TYPE(MultiTermQuery).tp_dict, "CONSTANT_SCORE_AUTO_REWRITE_DEFAULT", make_descriptor(::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(*MultiTermQuery::CONSTANT_SCORE_AUTO_REWRITE_DEFAULT)));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery).tp_dict, "CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE", make_descriptor(::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(*MultiTermQuery::CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE)));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery).tp_dict, "CONSTANT_SCORE_FILTER_REWRITE", make_descriptor(::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(*MultiTermQuery::CONSTANT_SCORE_FILTER_REWRITE)));
          PyDict_SetItemString(PY_TYPE(MultiTermQuery).tp_dict, "SCORING_BOOLEAN_QUERY_REWRITE", make_descriptor(::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(*MultiTermQuery::SCORING_BOOLEAN_QUERY_REWRITE)));
        }

        static PyObject *t_MultiTermQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiTermQuery::initializeClass, 1)))
            return NULL;
          return t_MultiTermQuery::wrap_Object(MultiTermQuery(((t_MultiTermQuery *) arg)->object.this$));
        }
        static PyObject *t_MultiTermQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiTermQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiTermQuery_init_(t_MultiTermQuery *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          MultiTermQuery object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = MultiTermQuery(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MultiTermQuery_equals(t_MultiTermQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(MultiTermQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_MultiTermQuery_getField(t_MultiTermQuery *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getField());
          return j2p(result);
        }

        static PyObject *t_MultiTermQuery_getRewriteMethod(t_MultiTermQuery *self)
        {
          ::org::apache::lucene::search::MultiTermQuery$RewriteMethod result((jobject) NULL);
          OBJ_CALL(result = self->object.getRewriteMethod());
          return ::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(result);
        }

        static PyObject *t_MultiTermQuery_hashCode(t_MultiTermQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiTermQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_MultiTermQuery_rewrite(t_MultiTermQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiTermQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_MultiTermQuery_setRewriteMethod(t_MultiTermQuery *self, PyObject *arg)
        {
          ::org::apache::lucene::search::MultiTermQuery$RewriteMethod a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::MultiTermQuery$RewriteMethod::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setRewriteMethod(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setRewriteMethod", arg);
          return NULL;
        }

        static PyObject *t_MultiTermQuery_get__field(t_MultiTermQuery *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getField());
          return j2p(value);
        }

        static PyObject *t_MultiTermQuery_get__rewriteMethod(t_MultiTermQuery *self, void *data)
        {
          ::org::apache::lucene::search::MultiTermQuery$RewriteMethod value((jobject) NULL);
          OBJ_CALL(value = self->object.getRewriteMethod());
          return ::org::apache::lucene::search::t_MultiTermQuery$RewriteMethod::wrap_Object(value);
        }
        static int t_MultiTermQuery_set__rewriteMethod(t_MultiTermQuery *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::MultiTermQuery$RewriteMethod value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::MultiTermQuery$RewriteMethod::initializeClass, &value))
            {
              INT_CALL(self->object.setRewriteMethod(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "rewriteMethod", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/RandomSamplingFacetsCollector.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "org/apache/lucene/facet/FacetsCollector$MatchingDocs.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/FacetResult.h"
#include "org/apache/lucene/facet/FacetsConfig.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *RandomSamplingFacetsCollector::class$ = NULL;
        jmethodID *RandomSamplingFacetsCollector::mids$ = NULL;
        bool RandomSamplingFacetsCollector::live$ = false;

        jclass RandomSamplingFacetsCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/RandomSamplingFacetsCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_init$_03b232b5] = env->getMethodID(cls, "<init>", "(IJ)V");
            mids$[mid_amortizeFacetCounts_25b169d3] = env->getMethodID(cls, "amortizeFacetCounts", "(Lorg/apache/lucene/facet/FacetResult;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/facet/FacetResult;");
            mids$[mid_getMatchingDocs_87851566] = env->getMethodID(cls, "getMatchingDocs", "()Ljava/util/List;");
            mids$[mid_getOriginalMatchingDocs_87851566] = env->getMethodID(cls, "getOriginalMatchingDocs", "()Ljava/util/List;");
            mids$[mid_getSamplingRate_54c6a174] = env->getMethodID(cls, "getSamplingRate", "()D");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RandomSamplingFacetsCollector::RandomSamplingFacetsCollector(jint a0) : ::org::apache::lucene::facet::FacetsCollector(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        RandomSamplingFacetsCollector::RandomSamplingFacetsCollector(jint a0, jlong a1) : ::org::apache::lucene::facet::FacetsCollector(env->newObject(initializeClass, &mids$, mid_init$_03b232b5, a0, a1)) {}

        ::org::apache::lucene::facet::FacetResult RandomSamplingFacetsCollector::amortizeFacetCounts(const ::org::apache::lucene::facet::FacetResult & a0, const ::org::apache::lucene::facet::FacetsConfig & a1, const ::org::apache::lucene::search::IndexSearcher & a2) const
        {
          return ::org::apache::lucene::facet::FacetResult(env->callObjectMethod(this$, mids$[mid_amortizeFacetCounts_25b169d3], a0.this$, a1.this$, a2.this$));
        }

        ::java::util::List RandomSamplingFacetsCollector::getMatchingDocs() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getMatchingDocs_87851566]));
        }

        ::java::util::List RandomSamplingFacetsCollector::getOriginalMatchingDocs() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getOriginalMatchingDocs_87851566]));
        }

        jdouble RandomSamplingFacetsCollector::getSamplingRate() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getSamplingRate_54c6a174]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_RandomSamplingFacetsCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RandomSamplingFacetsCollector_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RandomSamplingFacetsCollector_init_(t_RandomSamplingFacetsCollector *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RandomSamplingFacetsCollector_amortizeFacetCounts(t_RandomSamplingFacetsCollector *self, PyObject *args);
        static PyObject *t_RandomSamplingFacetsCollector_getMatchingDocs(t_RandomSamplingFacetsCollector *self, PyObject *args);
        static PyObject *t_RandomSamplingFacetsCollector_getOriginalMatchingDocs(t_RandomSamplingFacetsCollector *self);
        static PyObject *t_RandomSamplingFacetsCollector_getSamplingRate(t_RandomSamplingFacetsCollector *self);
        static PyObject *t_RandomSamplingFacetsCollector_get__matchingDocs(t_RandomSamplingFacetsCollector *self, void *data);
        static PyObject *t_RandomSamplingFacetsCollector_get__originalMatchingDocs(t_RandomSamplingFacetsCollector *self, void *data);
        static PyObject *t_RandomSamplingFacetsCollector_get__samplingRate(t_RandomSamplingFacetsCollector *self, void *data);
        static PyGetSetDef t_RandomSamplingFacetsCollector__fields_[] = {
          DECLARE_GET_FIELD(t_RandomSamplingFacetsCollector, matchingDocs),
          DECLARE_GET_FIELD(t_RandomSamplingFacetsCollector, originalMatchingDocs),
          DECLARE_GET_FIELD(t_RandomSamplingFacetsCollector, samplingRate),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RandomSamplingFacetsCollector__methods_[] = {
          DECLARE_METHOD(t_RandomSamplingFacetsCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RandomSamplingFacetsCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RandomSamplingFacetsCollector, amortizeFacetCounts, METH_VARARGS),
          DECLARE_METHOD(t_RandomSamplingFacetsCollector, getMatchingDocs, METH_VARARGS),
          DECLARE_METHOD(t_RandomSamplingFacetsCollector, getOriginalMatchingDocs, METH_NOARGS),
          DECLARE_METHOD(t_RandomSamplingFacetsCollector, getSamplingRate, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RandomSamplingFacetsCollector, t_RandomSamplingFacetsCollector, ::org::apache::lucene::facet::FacetsCollector, RandomSamplingFacetsCollector, t_RandomSamplingFacetsCollector_init_, 0, 0, t_RandomSamplingFacetsCollector__fields_, 0, 0);

        void t_RandomSamplingFacetsCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(RandomSamplingFacetsCollector), module, "RandomSamplingFacetsCollector", 0);
        }

        void t_RandomSamplingFacetsCollector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RandomSamplingFacetsCollector).tp_dict, "class_", make_descriptor(RandomSamplingFacetsCollector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RandomSamplingFacetsCollector).tp_dict, "wrapfn_", make_descriptor(t_RandomSamplingFacetsCollector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RandomSamplingFacetsCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RandomSamplingFacetsCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RandomSamplingFacetsCollector::initializeClass, 1)))
            return NULL;
          return t_RandomSamplingFacetsCollector::wrap_Object(RandomSamplingFacetsCollector(((t_RandomSamplingFacetsCollector *) arg)->object.this$));
        }
        static PyObject *t_RandomSamplingFacetsCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RandomSamplingFacetsCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RandomSamplingFacetsCollector_init_(t_RandomSamplingFacetsCollector *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              RandomSamplingFacetsCollector object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = RandomSamplingFacetsCollector(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              jint a0;
              jlong a1;
              RandomSamplingFacetsCollector object((jobject) NULL);

              if (!parseArgs(args, "IJ", &a0, &a1))
              {
                INT_CALL(object = RandomSamplingFacetsCollector(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_RandomSamplingFacetsCollector_amortizeFacetCounts(t_RandomSamplingFacetsCollector *self, PyObject *args)
        {
          ::org::apache::lucene::facet::FacetResult a0((jobject) NULL);
          ::org::apache::lucene::facet::FacetsConfig a1((jobject) NULL);
          ::org::apache::lucene::search::IndexSearcher a2((jobject) NULL);
          ::org::apache::lucene::facet::FacetResult result((jobject) NULL);

          if (!parseArgs(args, "kkk", ::org::apache::lucene::facet::FacetResult::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.amortizeFacetCounts(a0, a1, a2));
            return ::org::apache::lucene::facet::t_FacetResult::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "amortizeFacetCounts", args);
          return NULL;
        }

        static PyObject *t_RandomSamplingFacetsCollector_getMatchingDocs(t_RandomSamplingFacetsCollector *self, PyObject *args)
        {
          ::java::util::List result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMatchingDocs());
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::facet::PY_TYPE(FacetsCollector$MatchingDocs));
          }

          return callSuper(&PY_TYPE(RandomSamplingFacetsCollector), (PyObject *) self, "getMatchingDocs", args, 2);
        }

        static PyObject *t_RandomSamplingFacetsCollector_getOriginalMatchingDocs(t_RandomSamplingFacetsCollector *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.getOriginalMatchingDocs());
          return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::facet::PY_TYPE(FacetsCollector$MatchingDocs));
        }

        static PyObject *t_RandomSamplingFacetsCollector_getSamplingRate(t_RandomSamplingFacetsCollector *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getSamplingRate());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_RandomSamplingFacetsCollector_get__matchingDocs(t_RandomSamplingFacetsCollector *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object.getMatchingDocs());
          return ::java::util::t_List::wrap_Object(value);
        }

        static PyObject *t_RandomSamplingFacetsCollector_get__originalMatchingDocs(t_RandomSamplingFacetsCollector *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object.getOriginalMatchingDocs());
          return ::java::util::t_List::wrap_Object(value);
        }

        static PyObject *t_RandomSamplingFacetsCollector_get__samplingRate(t_RandomSamplingFacetsCollector *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getSamplingRate());
          return PyFloat_FromDouble((double) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Boolean.h"
#include "java/lang/Comparable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/io/Serializable.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Boolean::class$ = NULL;
    jmethodID *Boolean::mids$ = NULL;
    bool Boolean::live$ = false;
    Boolean *Boolean::FALSE = NULL;
    Boolean *Boolean::TRUE = NULL;
    ::java::lang::Class *Boolean::TYPE = NULL;

    jclass Boolean::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Boolean");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_bb0c767f] = env->getMethodID(cls, "<init>", "(Z)V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_booleanValue_54c6a16a] = env->getMethodID(cls, "booleanValue", "()Z");
        mids$[mid_compare_46f2e2db] = env->getStaticMethodID(cls, "compare", "(ZZ)I");
        mids$[mid_compareTo_d07f0c91] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Boolean;)I");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_getBoolean_5fdc3f44] = env->getStaticMethodID(cls, "getBoolean", "(Ljava/lang/String;)Z");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_parseBoolean_5fdc3f44] = env->getStaticMethodID(cls, "parseBoolean", "(Ljava/lang/String;)Z");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_toString_445a175e] = env->getStaticMethodID(cls, "toString", "(Z)Ljava/lang/String;");
        mids$[mid_valueOf_a98d5bba] = env->getStaticMethodID(cls, "valueOf", "(Z)Ljava/lang/Boolean;");
        mids$[mid_valueOf_9d4a8ff9] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Ljava/lang/Boolean;");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        FALSE = new Boolean(env->getStaticObjectField(cls, "FALSE", "Ljava/lang/Boolean;"));
        TRUE = new Boolean(env->getStaticObjectField(cls, "TRUE", "Ljava/lang/Boolean;"));
        TYPE = new ::java::lang::Class(env->getStaticObjectField(cls, "TYPE", "Ljava/lang/Class;"));
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Boolean::Boolean(jboolean a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_bb0c767f, a0)) {}

    Boolean::Boolean(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    jboolean Boolean::booleanValue() const
    {
      return env->callBooleanMethod(this$, mids$[mid_booleanValue_54c6a16a]);
    }

    jint Boolean::compare(jboolean a0, jboolean a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_compare_46f2e2db], a0, a1);
    }

    jint Boolean::compareTo(const Boolean & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareTo_d07f0c91], a0.this$);
    }

    jboolean Boolean::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    jboolean Boolean::getBoolean(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_getBoolean_5fdc3f44], a0.this$);
    }

    jint Boolean::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jboolean Boolean::parseBoolean(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_parseBoolean_5fdc3f44], a0.this$);
    }

    ::java::lang::String Boolean::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    ::java::lang::String Boolean::toString(jboolean a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_445a175e], a0));
    }

    Boolean Boolean::valueOf(jboolean a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Boolean(env->callStaticObjectMethod(cls, mids$[mid_valueOf_a98d5bba], a0));
    }

    Boolean Boolean::valueOf(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Boolean(env->callStaticObjectMethod(cls, mids$[mid_valueOf_9d4a8ff9], a0.this$));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Boolean_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Boolean_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Boolean_init_(t_Boolean *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Boolean_booleanValue(t_Boolean *self);
    static PyObject *t_Boolean_compare(PyTypeObject *type, PyObject *args);
    static PyObject *t_Boolean_compareTo(t_Boolean *self, PyObject *arg);
    static PyObject *t_Boolean_equals(t_Boolean *self, PyObject *args);
    static PyObject *t_Boolean_getBoolean(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Boolean_hashCode(t_Boolean *self, PyObject *args);
    static PyObject *t_Boolean_parseBoolean(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Boolean_toString(t_Boolean *self, PyObject *args);
    static PyObject *t_Boolean_toString_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Boolean_valueOf(PyTypeObject *type, PyObject *args);

    static PyMethodDef t_Boolean__methods_[] = {
      DECLARE_METHOD(t_Boolean, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Boolean, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Boolean, booleanValue, METH_NOARGS),
      DECLARE_METHOD(t_Boolean, compare, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Boolean, compareTo, METH_O),
      DECLARE_METHOD(t_Boolean, equals, METH_VARARGS),
      DECLARE_METHOD(t_Boolean, getBoolean, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Boolean, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Boolean, parseBoolean, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Boolean, toString, METH_VARARGS),
      DECLARE_METHOD(t_Boolean, toString_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Boolean, valueOf, METH_VARARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Boolean, t_Boolean, ::java::lang::Object, Boolean, t_Boolean_init_, 0, 0, 0, 0, 0);

    void t_Boolean::install(PyObject *module)
    {
      installType(&PY_TYPE(Boolean), module, "Boolean", 0);
    }

    void t_Boolean::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Boolean).tp_dict, "class_", make_descriptor(Boolean::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Boolean).tp_dict, "wrapfn_", make_descriptor(unboxBoolean));
      PyDict_SetItemString(PY_TYPE(Boolean).tp_dict, "boxfn_", make_descriptor(boxBoolean));
      env->getClass(Boolean::initializeClass);
      PyDict_SetItemString(PY_TYPE(Boolean).tp_dict, "FALSE", make_descriptor(t_Boolean::wrap_Object(*Boolean::FALSE)));
      PyDict_SetItemString(PY_TYPE(Boolean).tp_dict, "TRUE", make_descriptor(t_Boolean::wrap_Object(*Boolean::TRUE)));
      PyDict_SetItemString(PY_TYPE(Boolean).tp_dict, "TYPE", make_descriptor(::java::lang::t_Class::wrap_Object(*Boolean::TYPE)));
    }

    static PyObject *t_Boolean_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Boolean::initializeClass, 1)))
        return NULL;
      return t_Boolean::wrap_Object(Boolean(((t_Boolean *) arg)->object.this$));
    }
    static PyObject *t_Boolean_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Boolean::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Boolean_init_(t_Boolean *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jboolean a0;
          Boolean object((jobject) NULL);

          if (!parseArgs(args, "Z", &a0))
          {
            INT_CALL(object = Boolean(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Boolean object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Boolean(a0));
            self->object = object;
            break;
          }
        }
       default:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_Boolean_booleanValue(t_Boolean *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.booleanValue());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Boolean_compare(PyTypeObject *type, PyObject *args)
    {
      jboolean a0;
      jboolean a1;
      jint result;

      if (!parseArgs(args, "ZZ", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Boolean::compare(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "compare", args);
      return NULL;
    }

    static PyObject *t_Boolean_compareTo(t_Boolean *self, PyObject *arg)
    {
      Boolean a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Boolean), &a0))
      {
        OBJ_CALL(result = self->object.compareTo(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
      return NULL;
    }

    static PyObject *t_Boolean_equals(t_Boolean *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(Boolean), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Boolean_getBoolean(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = ::java::lang::Boolean::getBoolean(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "getBoolean", arg);
      return NULL;
    }

    static PyObject *t_Boolean_hashCode(t_Boolean *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Boolean), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Boolean_parseBoolean(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = ::java::lang::Boolean::parseBoolean(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "parseBoolean", arg);
      return NULL;
    }

    static PyObject *t_Boolean_toString(t_Boolean *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(Boolean), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Boolean_toString_(PyTypeObject *type, PyObject *args)
    {
      jboolean a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, "Z", &a0))
      {
        OBJ_CALL(result = ::java::lang::Boolean::toString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toString_", args);
      return NULL;
    }

    static PyObject *t_Boolean_valueOf(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jboolean a0;
          Boolean result((jobject) NULL);

          if (!parseArgs(args, "Z", &a0))
          {
            OBJ_CALL(result = ::java::lang::Boolean::valueOf(a0));
            return t_Boolean::wrap_Object(result);
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Boolean result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Boolean::valueOf(a0));
            return t_Boolean::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "valueOf", args);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FilterAtomicReader$FilterTerms.h"
#include "java/util/Comparator.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FilterAtomicReader$FilterTerms::class$ = NULL;
        jmethodID *FilterAtomicReader$FilterTerms::mids$ = NULL;
        bool FilterAtomicReader$FilterTerms::live$ = false;

        jclass FilterAtomicReader$FilterTerms::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FilterAtomicReader$FilterTerms");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_d0b7bb17] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Terms;)V");
            mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
            mids$[mid_getDocCount_54c6a179] = env->getMethodID(cls, "getDocCount", "()I");
            mids$[mid_getSumDocFreq_54c6a17a] = env->getMethodID(cls, "getSumDocFreq", "()J");
            mids$[mid_getSumTotalTermFreq_54c6a17a] = env->getMethodID(cls, "getSumTotalTermFreq", "()J");
            mids$[mid_hasFreqs_54c6a16a] = env->getMethodID(cls, "hasFreqs", "()Z");
            mids$[mid_hasOffsets_54c6a16a] = env->getMethodID(cls, "hasOffsets", "()Z");
            mids$[mid_hasPayloads_54c6a16a] = env->getMethodID(cls, "hasPayloads", "()Z");
            mids$[mid_hasPositions_54c6a16a] = env->getMethodID(cls, "hasPositions", "()Z");
            mids$[mid_iterator_d737078b] = env->getMethodID(cls, "iterator", "(Lorg/apache/lucene/index/TermsEnum;)Lorg/apache/lucene/index/TermsEnum;");
            mids$[mid_size_54c6a17a] = env->getMethodID(cls, "size", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterAtomicReader$FilterTerms::FilterAtomicReader$FilterTerms(const ::org::apache::lucene::index::Terms & a0) : ::org::apache::lucene::index::Terms(env->newObject(initializeClass, &mids$, mid_init$_d0b7bb17, a0.this$)) {}

        ::java::util::Comparator FilterAtomicReader$FilterTerms::getComparator() const
        {
          return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
        }

        jint FilterAtomicReader$FilterTerms::getDocCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getDocCount_54c6a179]);
        }

        jlong FilterAtomicReader$FilterTerms::getSumDocFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_getSumDocFreq_54c6a17a]);
        }

        jlong FilterAtomicReader$FilterTerms::getSumTotalTermFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_getSumTotalTermFreq_54c6a17a]);
        }

        jboolean FilterAtomicReader$FilterTerms::hasFreqs() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasFreqs_54c6a16a]);
        }

        jboolean FilterAtomicReader$FilterTerms::hasOffsets() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasOffsets_54c6a16a]);
        }

        jboolean FilterAtomicReader$FilterTerms::hasPayloads() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasPayloads_54c6a16a]);
        }

        jboolean FilterAtomicReader$FilterTerms::hasPositions() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasPositions_54c6a16a]);
        }

        ::org::apache::lucene::index::TermsEnum FilterAtomicReader$FilterTerms::iterator(const ::org::apache::lucene::index::TermsEnum & a0) const
        {
          return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_iterator_d737078b], a0.this$));
        }

        jlong FilterAtomicReader$FilterTerms::size() const
        {
          return env->callLongMethod(this$, mids$[mid_size_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FilterAtomicReader$FilterTerms_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterAtomicReader$FilterTerms_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilterAtomicReader$FilterTerms_init_(t_FilterAtomicReader$FilterTerms *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterAtomicReader$FilterTerms_getComparator(t_FilterAtomicReader$FilterTerms *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTerms_getDocCount(t_FilterAtomicReader$FilterTerms *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTerms_getSumDocFreq(t_FilterAtomicReader$FilterTerms *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTerms_getSumTotalTermFreq(t_FilterAtomicReader$FilterTerms *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTerms_hasFreqs(t_FilterAtomicReader$FilterTerms *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTerms_hasOffsets(t_FilterAtomicReader$FilterTerms *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTerms_hasPayloads(t_FilterAtomicReader$FilterTerms *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTerms_hasPositions(t_FilterAtomicReader$FilterTerms *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTerms_iterator(t_FilterAtomicReader$FilterTerms *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTerms_size(t_FilterAtomicReader$FilterTerms *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterTerms_get__comparator(t_FilterAtomicReader$FilterTerms *self, void *data);
        static PyObject *t_FilterAtomicReader$FilterTerms_get__docCount(t_FilterAtomicReader$FilterTerms *self, void *data);
        static PyObject *t_FilterAtomicReader$FilterTerms_get__sumDocFreq(t_FilterAtomicReader$FilterTerms *self, void *data);
        static PyObject *t_FilterAtomicReader$FilterTerms_get__sumTotalTermFreq(t_FilterAtomicReader$FilterTerms *self, void *data);
        static PyGetSetDef t_FilterAtomicReader$FilterTerms__fields_[] = {
          DECLARE_GET_FIELD(t_FilterAtomicReader$FilterTerms, comparator),
          DECLARE_GET_FIELD(t_FilterAtomicReader$FilterTerms, docCount),
          DECLARE_GET_FIELD(t_FilterAtomicReader$FilterTerms, sumDocFreq),
          DECLARE_GET_FIELD(t_FilterAtomicReader$FilterTerms, sumTotalTermFreq),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilterAtomicReader$FilterTerms__methods_[] = {
          DECLARE_METHOD(t_FilterAtomicReader$FilterTerms, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTerms, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTerms, getComparator, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTerms, getDocCount, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTerms, getSumDocFreq, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTerms, getSumTotalTermFreq, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTerms, hasFreqs, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTerms, hasOffsets, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTerms, hasPayloads, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTerms, hasPositions, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTerms, iterator, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterTerms, size, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilterAtomicReader$FilterTerms, t_FilterAtomicReader$FilterTerms, ::org::apache::lucene::index::Terms, FilterAtomicReader$FilterTerms, t_FilterAtomicReader$FilterTerms_init_, 0, 0, t_FilterAtomicReader$FilterTerms__fields_, 0, 0);

        void t_FilterAtomicReader$FilterTerms::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterAtomicReader$FilterTerms), module, "FilterAtomicReader$FilterTerms", 0);
        }

        void t_FilterAtomicReader$FilterTerms::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterTerms).tp_dict, "class_", make_descriptor(FilterAtomicReader$FilterTerms::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterTerms).tp_dict, "wrapfn_", make_descriptor(t_FilterAtomicReader$FilterTerms::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterTerms).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterAtomicReader$FilterTerms::initializeClass, 1)))
            return NULL;
          return t_FilterAtomicReader$FilterTerms::wrap_Object(FilterAtomicReader$FilterTerms(((t_FilterAtomicReader$FilterTerms *) arg)->object.this$));
        }
        static PyObject *t_FilterAtomicReader$FilterTerms_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterAtomicReader$FilterTerms::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilterAtomicReader$FilterTerms_init_(t_FilterAtomicReader$FilterTerms *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::Terms a0((jobject) NULL);
          FilterAtomicReader$FilterTerms object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::Terms::initializeClass, &a0))
          {
            INT_CALL(object = FilterAtomicReader$FilterTerms(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_getComparator(t_FilterAtomicReader$FilterTerms *self, PyObject *args)
        {
          ::java::util::Comparator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTerms), (PyObject *) self, "getComparator", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_getDocCount(t_FilterAtomicReader$FilterTerms *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getDocCount());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTerms), (PyObject *) self, "getDocCount", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_getSumDocFreq(t_FilterAtomicReader$FilterTerms *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getSumDocFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTerms), (PyObject *) self, "getSumDocFreq", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_getSumTotalTermFreq(t_FilterAtomicReader$FilterTerms *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getSumTotalTermFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTerms), (PyObject *) self, "getSumTotalTermFreq", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_hasFreqs(t_FilterAtomicReader$FilterTerms *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hasFreqs());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTerms), (PyObject *) self, "hasFreqs", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_hasOffsets(t_FilterAtomicReader$FilterTerms *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hasOffsets());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTerms), (PyObject *) self, "hasOffsets", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_hasPayloads(t_FilterAtomicReader$FilterTerms *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hasPayloads());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTerms), (PyObject *) self, "hasPayloads", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_hasPositions(t_FilterAtomicReader$FilterTerms *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hasPositions());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTerms), (PyObject *) self, "hasPositions", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_iterator(t_FilterAtomicReader$FilterTerms *self, PyObject *args)
        {
          ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.iterator(a0));
            return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTerms), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_size(t_FilterAtomicReader$FilterTerms *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.size());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterTerms), (PyObject *) self, "size", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_get__comparator(t_FilterAtomicReader$FilterTerms *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_get__docCount(t_FilterAtomicReader$FilterTerms *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getDocCount());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_get__sumDocFreq(t_FilterAtomicReader$FilterTerms *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getSumDocFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_FilterAtomicReader$FilterTerms_get__sumTotalTermFreq(t_FilterAtomicReader$FilterTerms *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getSumTotalTermFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/SnowballProgram.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {

      ::java::lang::Class *SnowballProgram::class$ = NULL;
      jmethodID *SnowballProgram::mids$ = NULL;
      bool SnowballProgram::live$ = false;

      jclass SnowballProgram::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/tartarus/snowball/SnowballProgram");

          mids$ = new jmethodID[max_mid];
          mids$[mid_getCurrent_14c7b5c5] = env->getMethodID(cls, "getCurrent", "()Ljava/lang/String;");
          mids$[mid_getCurrentBuffer_dab10e7f] = env->getMethodID(cls, "getCurrentBuffer", "()[C");
          mids$[mid_getCurrentBufferLength_54c6a179] = env->getMethodID(cls, "getCurrentBufferLength", "()I");
          mids$[mid_setCurrent_5fdc3f48] = env->getMethodID(cls, "setCurrent", "(Ljava/lang/String;)V");
          mids$[mid_setCurrent_ec6430f4] = env->getMethodID(cls, "setCurrent", "([CI)V");
          mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");
          mids$[mid_insert_cb918b82] = env->getMethodID(cls, "insert", "(IILjava/lang/CharSequence;)V");
          mids$[mid_in_range_d8d154aa] = env->getMethodID(cls, "in_range", "(II)Z");
          mids$[mid_copy_from_cbe15af1] = env->getMethodID(cls, "copy_from", "(Lorg/tartarus/snowball/SnowballProgram;)V");
          mids$[mid_in_grouping_6f0bb35a] = env->getMethodID(cls, "in_grouping", "([CII)Z");
          mids$[mid_out_grouping_6f0bb35a] = env->getMethodID(cls, "out_grouping", "([CII)Z");
          mids$[mid_find_among_b_0795632a] = env->getMethodID(cls, "find_among_b", "([Lorg/tartarus/snowball/Among;I)I");
          mids$[mid_slice_del_54c6a166] = env->getMethodID(cls, "slice_del", "()V");
          mids$[mid_in_grouping_b_6f0bb35a] = env->getMethodID(cls, "in_grouping_b", "([CII)Z");
          mids$[mid_slice_from_a8afc64a] = env->getMethodID(cls, "slice_from", "(Ljava/lang/CharSequence;)V");
          mids$[mid_out_grouping_b_6f0bb35a] = env->getMethodID(cls, "out_grouping_b", "([CII)Z");
          mids$[mid_in_range_b_d8d154aa] = env->getMethodID(cls, "in_range_b", "(II)Z");
          mids$[mid_out_range_d8d154aa] = env->getMethodID(cls, "out_range", "(II)Z");
          mids$[mid_out_range_b_d8d154aa] = env->getMethodID(cls, "out_range_b", "(II)Z");
          mids$[mid_eq_s_9145fa84] = env->getMethodID(cls, "eq_s", "(ILjava/lang/CharSequence;)Z");
          mids$[mid_eq_s_b_9145fa84] = env->getMethodID(cls, "eq_s_b", "(ILjava/lang/CharSequence;)Z");
          mids$[mid_eq_v_a8afc646] = env->getMethodID(cls, "eq_v", "(Ljava/lang/CharSequence;)Z");
          mids$[mid_eq_v_b_a8afc646] = env->getMethodID(cls, "eq_v_b", "(Ljava/lang/CharSequence;)Z");
          mids$[mid_find_among_0795632a] = env->getMethodID(cls, "find_among", "([Lorg/tartarus/snowball/Among;I)I");
          mids$[mid_replace_s_cb918b9d] = env->getMethodID(cls, "replace_s", "(IILjava/lang/CharSequence;)I");
          mids$[mid_slice_check_54c6a166] = env->getMethodID(cls, "slice_check", "()V");
          mids$[mid_slice_to_468cbe57] = env->getMethodID(cls, "slice_to", "(Ljava/lang/StringBuilder;)Ljava/lang/StringBuilder;");
          mids$[mid_assign_to_468cbe57] = env->getMethodID(cls, "assign_to", "(Ljava/lang/StringBuilder;)Ljava/lang/StringBuilder;");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      ::java::lang::String SnowballProgram::getCurrent() const
      {
        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getCurrent_14c7b5c5]));
      }

      JArray< jchar > SnowballProgram::getCurrentBuffer() const
      {
        return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_getCurrentBuffer_dab10e7f]));
      }

      jint SnowballProgram::getCurrentBufferLength() const
      {
        return env->callIntMethod(this$, mids$[mid_getCurrentBufferLength_54c6a179]);
      }

      void SnowballProgram::setCurrent(const ::java::lang::String & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_setCurrent_5fdc3f48], a0.this$);
      }

      void SnowballProgram::setCurrent(const JArray< jchar > & a0, jint a1) const
      {
        env->callVoidMethod(this$, mids$[mid_setCurrent_ec6430f4], a0.this$, a1);
      }

      jboolean SnowballProgram::stem() const
      {
        return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      static PyObject *t_SnowballProgram_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_SnowballProgram_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_SnowballProgram_getCurrent(t_SnowballProgram *self);
      static PyObject *t_SnowballProgram_getCurrentBuffer(t_SnowballProgram *self);
      static PyObject *t_SnowballProgram_getCurrentBufferLength(t_SnowballProgram *self);
      static PyObject *t_SnowballProgram_setCurrent(t_SnowballProgram *self, PyObject *args);
      static PyObject *t_SnowballProgram_stem(t_SnowballProgram *self);
      static PyObject *t_SnowballProgram_get__current(t_SnowballProgram *self, void *data);
      static int t_SnowballProgram_set__current(t_SnowballProgram *self, PyObject *arg, void *data);
      static PyObject *t_SnowballProgram_get__currentBuffer(t_SnowballProgram *self, void *data);
      static PyObject *t_SnowballProgram_get__currentBufferLength(t_SnowballProgram *self, void *data);
      static PyGetSetDef t_SnowballProgram__fields_[] = {
        DECLARE_GETSET_FIELD(t_SnowballProgram, current),
        DECLARE_GET_FIELD(t_SnowballProgram, currentBuffer),
        DECLARE_GET_FIELD(t_SnowballProgram, currentBufferLength),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_SnowballProgram__methods_[] = {
        DECLARE_METHOD(t_SnowballProgram, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_SnowballProgram, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_SnowballProgram, getCurrent, METH_NOARGS),
        DECLARE_METHOD(t_SnowballProgram, getCurrentBuffer, METH_NOARGS),
        DECLARE_METHOD(t_SnowballProgram, getCurrentBufferLength, METH_NOARGS),
        DECLARE_METHOD(t_SnowballProgram, setCurrent, METH_VARARGS),
        DECLARE_METHOD(t_SnowballProgram, stem, METH_NOARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(SnowballProgram, t_SnowballProgram, ::java::lang::Object, SnowballProgram, abstract_init, 0, 0, t_SnowballProgram__fields_, 0, 0);

      void t_SnowballProgram::install(PyObject *module)
      {
        installType(&PY_TYPE(SnowballProgram), module, "SnowballProgram", 0);
      }

      void t_SnowballProgram::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(SnowballProgram).tp_dict, "class_", make_descriptor(SnowballProgram::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(SnowballProgram).tp_dict, "wrapfn_", make_descriptor(t_SnowballProgram::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(SnowballProgram).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_SnowballProgram_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, SnowballProgram::initializeClass, 1)))
          return NULL;
        return t_SnowballProgram::wrap_Object(SnowballProgram(((t_SnowballProgram *) arg)->object.this$));
      }
      static PyObject *t_SnowballProgram_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, SnowballProgram::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_SnowballProgram_getCurrent(t_SnowballProgram *self)
      {
        ::java::lang::String result((jobject) NULL);
        OBJ_CALL(result = self->object.getCurrent());
        return j2p(result);
      }

      static PyObject *t_SnowballProgram_getCurrentBuffer(t_SnowballProgram *self)
      {
        JArray< jchar > result((jobject) NULL);
        OBJ_CALL(result = self->object.getCurrentBuffer());
        return result.wrap();
      }

      static PyObject *t_SnowballProgram_getCurrentBufferLength(t_SnowballProgram *self)
      {
        jint result;
        OBJ_CALL(result = self->object.getCurrentBufferLength());
        return PyInt_FromLong((long) result);
      }

      static PyObject *t_SnowballProgram_setCurrent(t_SnowballProgram *self, PyObject *args)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            ::java::lang::String a0((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(self->object.setCurrent(a0));
              Py_RETURN_NONE;
            }
          }
          break;
         case 2:
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(self->object.setCurrent(a0, a1));
              Py_RETURN_NONE;
            }
          }
        }

        PyErr_SetArgsError((PyObject *) self, "setCurrent", args);
        return NULL;
      }

      static PyObject *t_SnowballProgram_stem(t_SnowballProgram *self)
      {
        jboolean result;
        OBJ_CALL(result = self->object.stem());
        Py_RETURN_BOOL(result);
      }

      static PyObject *t_SnowballProgram_get__current(t_SnowballProgram *self, void *data)
      {
        ::java::lang::String value((jobject) NULL);
        OBJ_CALL(value = self->object.getCurrent());
        return j2p(value);
      }
      static int t_SnowballProgram_set__current(t_SnowballProgram *self, PyObject *arg, void *data)
      {
        {
          ::java::lang::String value((jobject) NULL);
          if (!parseArg(arg, "s", &value))
          {
            INT_CALL(self->object.setCurrent(value));
            return 0;
          }
        }
        PyErr_SetArgsError((PyObject *) self, "current", arg);
        return -1;
      }

      static PyObject *t_SnowballProgram_get__currentBuffer(t_SnowballProgram *self, void *data)
      {
        JArray< jchar > value((jobject) NULL);
        OBJ_CALL(value = self->object.getCurrentBuffer());
        return value.wrap();
      }

      static PyObject *t_SnowballProgram_get__currentBufferLength(t_SnowballProgram *self, void *data)
      {
        jint value;
        OBJ_CALL(value = self->object.getCurrentBufferLength());
        return PyInt_FromLong((long) value);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/id/IndonesianAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace id {

          ::java::lang::Class *IndonesianAnalyzer::class$ = NULL;
          jmethodID *IndonesianAnalyzer::mids$ = NULL;
          bool IndonesianAnalyzer::live$ = false;
          ::java::lang::String *IndonesianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass IndonesianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/id/IndonesianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IndonesianAnalyzer::IndonesianAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          IndonesianAnalyzer::IndonesianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          IndonesianAnalyzer::IndonesianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet IndonesianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace id {
          static PyObject *t_IndonesianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndonesianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IndonesianAnalyzer_init_(t_IndonesianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IndonesianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_IndonesianAnalyzer_get__defaultStopSet(t_IndonesianAnalyzer *self, void *data);
          static PyGetSetDef t_IndonesianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_IndonesianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_IndonesianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_IndonesianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndonesianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndonesianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IndonesianAnalyzer, t_IndonesianAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, IndonesianAnalyzer, t_IndonesianAnalyzer_init_, 0, 0, t_IndonesianAnalyzer__fields_, 0, 0);

          void t_IndonesianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(IndonesianAnalyzer), module, "IndonesianAnalyzer", 0);
          }

          void t_IndonesianAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IndonesianAnalyzer).tp_dict, "class_", make_descriptor(IndonesianAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IndonesianAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_IndonesianAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IndonesianAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(IndonesianAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(IndonesianAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*IndonesianAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_IndonesianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IndonesianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_IndonesianAnalyzer::wrap_Object(IndonesianAnalyzer(((t_IndonesianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_IndonesianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IndonesianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IndonesianAnalyzer_init_(t_IndonesianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                IndonesianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = IndonesianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                IndonesianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = IndonesianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                IndonesianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = IndonesianAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IndonesianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::id::IndonesianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_IndonesianAnalyzer_get__defaultStopSet(t_IndonesianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/FileInputStream.h"
#include "java/io/File.h"
#include "java/io/FileNotFoundException.h"
#include "java/io/IOException.h"
#include "java/io/FileDescriptor.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
  namespace io {

    ::java::lang::Class *FileInputStream::class$ = NULL;
    jmethodID *FileInputStream::mids$ = NULL;
    bool FileInputStream::live$ = false;

    jclass FileInputStream::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/io/FileInputStream");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_c3dacf57] = env->getMethodID(cls, "<init>", "(Ljava/io/File;)V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_698067a0] = env->getMethodID(cls, "<init>", "(Ljava/io/FileDescriptor;)V");
        mids$[mid_available_54c6a179] = env->getMethodID(cls, "available", "()I");
        mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
        mids$[mid_getFD_94738b01] = env->getMethodID(cls, "getFD", "()Ljava/io/FileDescriptor;");
        mids$[mid_read_54c6a179] = env->getMethodID(cls, "read", "()I");
        mids$[mid_read_49b4f134] = env->getMethodID(cls, "read", "([B)I");
        mids$[mid_read_86f44340] = env->getMethodID(cls, "read", "([BII)I");
        mids$[mid_skip_0ee6df33] = env->getMethodID(cls, "skip", "(J)J");
        mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    FileInputStream::FileInputStream(const ::java::io::File & a0) : ::java::io::InputStream(env->newObject(initializeClass, &mids$, mid_init$_c3dacf57, a0.this$)) {}

    FileInputStream::FileInputStream(const ::java::lang::String & a0) : ::java::io::InputStream(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    FileInputStream::FileInputStream(const ::java::io::FileDescriptor & a0) : ::java::io::InputStream(env->newObject(initializeClass, &mids$, mid_init$_698067a0, a0.this$)) {}

    jint FileInputStream::available() const
    {
      return env->callIntMethod(this$, mids$[mid_available_54c6a179]);
    }

    void FileInputStream::close() const
    {
      env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
    }

    ::java::io::FileDescriptor FileInputStream::getFD() const
    {
      return ::java::io::FileDescriptor(env->callObjectMethod(this$, mids$[mid_getFD_94738b01]));
    }

    jint FileInputStream::read() const
    {
      return env->callIntMethod(this$, mids$[mid_read_54c6a179]);
    }

    jint FileInputStream::read(const JArray< jbyte > & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_read_49b4f134], a0.this$);
    }

    jint FileInputStream::read(const JArray< jbyte > & a0, jint a1, jint a2) const
    {
      return env->callIntMethod(this$, mids$[mid_read_86f44340], a0.this$, a1, a2);
    }

    jlong FileInputStream::skip(jlong a0) const
    {
      return env->callLongMethod(this$, mids$[mid_skip_0ee6df33], a0);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace io {
    static PyObject *t_FileInputStream_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_FileInputStream_instance_(PyTypeObject *type, PyObject *arg);
    static int t_FileInputStream_init_(t_FileInputStream *self, PyObject *args, PyObject *kwds);
    static PyObject *t_FileInputStream_available(t_FileInputStream *self, PyObject *args);
    static PyObject *t_FileInputStream_close(t_FileInputStream *self, PyObject *args);
    static PyObject *t_FileInputStream_getFD(t_FileInputStream *self);
    static PyObject *t_FileInputStream_read(t_FileInputStream *self, PyObject *args);
    static PyObject *t_FileInputStream_skip(t_FileInputStream *self, PyObject *args);
    static PyObject *t_FileInputStream_get__fD(t_FileInputStream *self, void *data);
    static PyGetSetDef t_FileInputStream__fields_[] = {
      DECLARE_GET_FIELD(t_FileInputStream, fD),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_FileInputStream__methods_[] = {
      DECLARE_METHOD(t_FileInputStream, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_FileInputStream, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_FileInputStream, available, METH_VARARGS),
      DECLARE_METHOD(t_FileInputStream, close, METH_VARARGS),
      DECLARE_METHOD(t_FileInputStream, getFD, METH_NOARGS),
      DECLARE_METHOD(t_FileInputStream, read, METH_VARARGS),
      DECLARE_METHOD(t_FileInputStream, skip, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(FileInputStream, t_FileInputStream, ::java::io::InputStream, FileInputStream, t_FileInputStream_init_, 0, 0, t_FileInputStream__fields_, 0, 0);

    void t_FileInputStream::install(PyObject *module)
    {
      installType(&PY_TYPE(FileInputStream), module, "FileInputStream", 0);
    }

    void t_FileInputStream::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(FileInputStream).tp_dict, "class_", make_descriptor(FileInputStream::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(FileInputStream).tp_dict, "wrapfn_", make_descriptor(t_FileInputStream::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(FileInputStream).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_FileInputStream_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, FileInputStream::initializeClass, 1)))
        return NULL;
      return t_FileInputStream::wrap_Object(FileInputStream(((t_FileInputStream *) arg)->object.this$));
    }
    static PyObject *t_FileInputStream_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, FileInputStream::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_FileInputStream_init_(t_FileInputStream *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::io::File a0((jobject) NULL);
          FileInputStream object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
          {
            INT_CALL(object = FileInputStream(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          FileInputStream object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = FileInputStream(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::io::FileDescriptor a0((jobject) NULL);
          FileInputStream object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::FileDescriptor::initializeClass, &a0))
          {
            INT_CALL(object = FileInputStream(a0));
            self->object = object;
            break;
          }
        }
       default:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_FileInputStream_available(t_FileInputStream *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.available());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(FileInputStream), (PyObject *) self, "available", args, 2);
    }

    static PyObject *t_FileInputStream_close(t_FileInputStream *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.close());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(FileInputStream), (PyObject *) self, "close", args, 2);
    }

    static PyObject *t_FileInputStream_getFD(t_FileInputStream *self)
    {
      ::java::io::FileDescriptor result((jobject) NULL);
      OBJ_CALL(result = self->object.getFD());
      return ::java::io::t_FileDescriptor::wrap_Object(result);
    }

    static PyObject *t_FileInputStream_read(t_FileInputStream *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          jint result;
          OBJ_CALL(result = self->object.read());
          return PyInt_FromLong((long) result);
        }
        break;
       case 1:
        {
          JArray< jbyte > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[B", &a0))
          {
            OBJ_CALL(result = self->object.read(a0));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 3:
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.read(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
      }

      return callSuper(&PY_TYPE(FileInputStream), (PyObject *) self, "read", args, 2);
    }

    static PyObject *t_FileInputStream_skip(t_FileInputStream *self, PyObject *args)
    {
      jlong a0;
      jlong result;

      if (!parseArgs(args, "J", &a0))
      {
        OBJ_CALL(result = self->object.skip(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      return callSuper(&PY_TYPE(FileInputStream), (PyObject *) self, "skip", args, 2);
    }

    static PyObject *t_FileInputStream_get__fD(t_FileInputStream *self, void *data)
    {
      ::java::io::FileDescriptor value((jobject) NULL);
      OBJ_CALL(value = self->object.getFD());
      return ::java::io::t_FileDescriptor::wrap_Object(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/RecyclingByteBlockAllocator.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Counter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *RecyclingByteBlockAllocator::class$ = NULL;
        jmethodID *RecyclingByteBlockAllocator::mids$ = NULL;
        bool RecyclingByteBlockAllocator::live$ = false;
        jint RecyclingByteBlockAllocator::DEFAULT_BUFFERED_BLOCKS = (jint) 0;

        jclass RecyclingByteBlockAllocator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/RecyclingByteBlockAllocator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_d8d154a6] = env->getMethodID(cls, "<init>", "(II)V");
            mids$[mid_init$_bdd89aab] = env->getMethodID(cls, "<init>", "(IILorg/apache/lucene/util/Counter;)V");
            mids$[mid_bytesUsed_54c6a17a] = env->getMethodID(cls, "bytesUsed", "()J");
            mids$[mid_freeBlocks_39c7bd23] = env->getMethodID(cls, "freeBlocks", "(I)I");
            mids$[mid_getByteBlock_dab10e7e] = env->getMethodID(cls, "getByteBlock", "()[B");
            mids$[mid_maxBufferedBlocks_54c6a179] = env->getMethodID(cls, "maxBufferedBlocks", "()I");
            mids$[mid_numBufferedBlocks_54c6a179] = env->getMethodID(cls, "numBufferedBlocks", "()I");
            mids$[mid_recycleByteBlocks_d3ffa89f] = env->getMethodID(cls, "recycleByteBlocks", "([[BII)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_BUFFERED_BLOCKS = env->getStaticIntField(cls, "DEFAULT_BUFFERED_BLOCKS");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RecyclingByteBlockAllocator::RecyclingByteBlockAllocator() : ::org::apache::lucene::util::ByteBlockPool$Allocator(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        RecyclingByteBlockAllocator::RecyclingByteBlockAllocator(jint a0, jint a1) : ::org::apache::lucene::util::ByteBlockPool$Allocator(env->newObject(initializeClass, &mids$, mid_init$_d8d154a6, a0, a1)) {}

        RecyclingByteBlockAllocator::RecyclingByteBlockAllocator(jint a0, jint a1, const ::org::apache::lucene::util::Counter & a2) : ::org::apache::lucene::util::ByteBlockPool$Allocator(env->newObject(initializeClass, &mids$, mid_init$_bdd89aab, a0, a1, a2.this$)) {}

        jlong RecyclingByteBlockAllocator::bytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_bytesUsed_54c6a17a]);
        }

        jint RecyclingByteBlockAllocator::freeBlocks(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_freeBlocks_39c7bd23], a0);
        }

        JArray< jbyte > RecyclingByteBlockAllocator::getByteBlock() const
        {
          return JArray< jbyte >(env->callObjectMethod(this$, mids$[mid_getByteBlock_dab10e7e]));
        }

        jint RecyclingByteBlockAllocator::maxBufferedBlocks() const
        {
          return env->callIntMethod(this$, mids$[mid_maxBufferedBlocks_54c6a179]);
        }

        jint RecyclingByteBlockAllocator::numBufferedBlocks() const
        {
          return env->callIntMethod(this$, mids$[mid_numBufferedBlocks_54c6a179]);
        }

        void RecyclingByteBlockAllocator::recycleByteBlocks(const JArray< JArray< jbyte > > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_recycleByteBlocks_d3ffa89f], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_RecyclingByteBlockAllocator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RecyclingByteBlockAllocator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RecyclingByteBlockAllocator_init_(t_RecyclingByteBlockAllocator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RecyclingByteBlockAllocator_bytesUsed(t_RecyclingByteBlockAllocator *self);
        static PyObject *t_RecyclingByteBlockAllocator_freeBlocks(t_RecyclingByteBlockAllocator *self, PyObject *arg);
        static PyObject *t_RecyclingByteBlockAllocator_getByteBlock(t_RecyclingByteBlockAllocator *self, PyObject *args);
        static PyObject *t_RecyclingByteBlockAllocator_maxBufferedBlocks(t_RecyclingByteBlockAllocator *self);
        static PyObject *t_RecyclingByteBlockAllocator_numBufferedBlocks(t_RecyclingByteBlockAllocator *self);
        static PyObject *t_RecyclingByteBlockAllocator_recycleByteBlocks(t_RecyclingByteBlockAllocator *self, PyObject *args);
        static PyObject *t_RecyclingByteBlockAllocator_get__byteBlock(t_RecyclingByteBlockAllocator *self, void *data);
        static PyGetSetDef t_RecyclingByteBlockAllocator__fields_[] = {
          DECLARE_GET_FIELD(t_RecyclingByteBlockAllocator, byteBlock),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RecyclingByteBlockAllocator__methods_[] = {
          DECLARE_METHOD(t_RecyclingByteBlockAllocator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RecyclingByteBlockAllocator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RecyclingByteBlockAllocator, bytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_RecyclingByteBlockAllocator, freeBlocks, METH_O),
          DECLARE_METHOD(t_RecyclingByteBlockAllocator, getByteBlock, METH_VARARGS),
          DECLARE_METHOD(t_RecyclingByteBlockAllocator, maxBufferedBlocks, METH_NOARGS),
          DECLARE_METHOD(t_RecyclingByteBlockAllocator, numBufferedBlocks, METH_NOARGS),
          DECLARE_METHOD(t_RecyclingByteBlockAllocator, recycleByteBlocks, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RecyclingByteBlockAllocator, t_RecyclingByteBlockAllocator, ::org::apache::lucene::util::ByteBlockPool$Allocator, RecyclingByteBlockAllocator, t_RecyclingByteBlockAllocator_init_, 0, 0, t_RecyclingByteBlockAllocator__fields_, 0, 0);

        void t_RecyclingByteBlockAllocator::install(PyObject *module)
        {
          installType(&PY_TYPE(RecyclingByteBlockAllocator), module, "RecyclingByteBlockAllocator", 0);
        }

        void t_RecyclingByteBlockAllocator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RecyclingByteBlockAllocator).tp_dict, "class_", make_descriptor(RecyclingByteBlockAllocator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RecyclingByteBlockAllocator).tp_dict, "wrapfn_", make_descriptor(t_RecyclingByteBlockAllocator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RecyclingByteBlockAllocator).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(RecyclingByteBlockAllocator::initializeClass);
          PyDict_SetItemString(PY_TYPE(RecyclingByteBlockAllocator).tp_dict, "DEFAULT_BUFFERED_BLOCKS", make_descriptor(RecyclingByteBlockAllocator::DEFAULT_BUFFERED_BLOCKS));
        }

        static PyObject *t_RecyclingByteBlockAllocator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RecyclingByteBlockAllocator::initializeClass, 1)))
            return NULL;
          return t_RecyclingByteBlockAllocator::wrap_Object(RecyclingByteBlockAllocator(((t_RecyclingByteBlockAllocator *) arg)->object.this$));
        }
        static PyObject *t_RecyclingByteBlockAllocator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RecyclingByteBlockAllocator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RecyclingByteBlockAllocator_init_(t_RecyclingByteBlockAllocator *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              RecyclingByteBlockAllocator object((jobject) NULL);

              INT_CALL(object = RecyclingByteBlockAllocator());
              self->object = object;
              break;
            }
            goto err;
           case 2:
            {
              jint a0;
              jint a1;
              RecyclingByteBlockAllocator object((jobject) NULL);

              if (!parseArgs(args, "II", &a0, &a1))
              {
                INT_CALL(object = RecyclingByteBlockAllocator(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              jint a0;
              jint a1;
              ::org::apache::lucene::util::Counter a2((jobject) NULL);
              RecyclingByteBlockAllocator object((jobject) NULL);

              if (!parseArgs(args, "IIk", ::org::apache::lucene::util::Counter::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = RecyclingByteBlockAllocator(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_RecyclingByteBlockAllocator_bytesUsed(t_RecyclingByteBlockAllocator *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.bytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_RecyclingByteBlockAllocator_freeBlocks(t_RecyclingByteBlockAllocator *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.freeBlocks(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "freeBlocks", arg);
          return NULL;
        }

        static PyObject *t_RecyclingByteBlockAllocator_getByteBlock(t_RecyclingByteBlockAllocator *self, PyObject *args)
        {
          JArray< jbyte > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getByteBlock());
            return result.wrap();
          }

          return callSuper(&PY_TYPE(RecyclingByteBlockAllocator), (PyObject *) self, "getByteBlock", args, 2);
        }

        static PyObject *t_RecyclingByteBlockAllocator_maxBufferedBlocks(t_RecyclingByteBlockAllocator *self)
        {
          jint result;
          OBJ_CALL(result = self->object.maxBufferedBlocks());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_RecyclingByteBlockAllocator_numBufferedBlocks(t_RecyclingByteBlockAllocator *self)
        {
          jint result;
          OBJ_CALL(result = self->object.numBufferedBlocks());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_RecyclingByteBlockAllocator_recycleByteBlocks(t_RecyclingByteBlockAllocator *self, PyObject *args)
        {
          JArray< JArray< jbyte > > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.recycleByteBlocks(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(RecyclingByteBlockAllocator), (PyObject *) self, "recycleByteBlocks", args, 2);
        }

        static PyObject *t_RecyclingByteBlockAllocator_get__byteBlock(t_RecyclingByteBlockAllocator *self, void *data)
        {
          JArray< jbyte > value((jobject) NULL);
          OBJ_CALL(value = self->object.getByteBlock());
          return value.wrap();
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/UAX29URLEmailTokenizerImpl.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizerInterface.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *UAX29URLEmailTokenizerImpl::class$ = NULL;
          jmethodID *UAX29URLEmailTokenizerImpl::mids$ = NULL;
          bool UAX29URLEmailTokenizerImpl::live$ = false;
          jint UAX29URLEmailTokenizerImpl::AVOID_BAD_URL = (jint) 0;
          jint UAX29URLEmailTokenizerImpl::EMAIL_TYPE = (jint) 0;
          jint UAX29URLEmailTokenizerImpl::HANGUL_TYPE = (jint) 0;
          jint UAX29URLEmailTokenizerImpl::HIRAGANA_TYPE = (jint) 0;
          jint UAX29URLEmailTokenizerImpl::IDEOGRAPHIC_TYPE = (jint) 0;
          jint UAX29URLEmailTokenizerImpl::KATAKANA_TYPE = (jint) 0;
          jint UAX29URLEmailTokenizerImpl::NUMERIC_TYPE = (jint) 0;
          jint UAX29URLEmailTokenizerImpl::SOUTH_EAST_ASIAN_TYPE = (jint) 0;
          jint UAX29URLEmailTokenizerImpl::URL_TYPE = (jint) 0;
          jint UAX29URLEmailTokenizerImpl::WORD_TYPE = (jint) 0;
          jint UAX29URLEmailTokenizerImpl::YYEOF = (jint) 0;
          jint UAX29URLEmailTokenizerImpl::YYINITIAL = (jint) 0;

          jclass UAX29URLEmailTokenizerImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/UAX29URLEmailTokenizerImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_getNextToken_54c6a179] = env->getMethodID(cls, "getNextToken", "()I");
              mids$[mid_getText_64c709f2] = env->getMethodID(cls, "getText", "(Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;)V");
              mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
              mids$[mid_yychar_54c6a179] = env->getMethodID(cls, "yychar", "()I");
              mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
              mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
              mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
              mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
              mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
              mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
              mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              AVOID_BAD_URL = env->getStaticIntField(cls, "AVOID_BAD_URL");
              EMAIL_TYPE = env->getStaticIntField(cls, "EMAIL_TYPE");
              HANGUL_TYPE = env->getStaticIntField(cls, "HANGUL_TYPE");
              HIRAGANA_TYPE = env->getStaticIntField(cls, "HIRAGANA_TYPE");
              IDEOGRAPHIC_TYPE = env->getStaticIntField(cls, "IDEOGRAPHIC_TYPE");
              KATAKANA_TYPE = env->getStaticIntField(cls, "KATAKANA_TYPE");
              NUMERIC_TYPE = env->getStaticIntField(cls, "NUMERIC_TYPE");
              SOUTH_EAST_ASIAN_TYPE = env->getStaticIntField(cls, "SOUTH_EAST_ASIAN_TYPE");
              URL_TYPE = env->getStaticIntField(cls, "URL_TYPE");
              WORD_TYPE = env->getStaticIntField(cls, "WORD_TYPE");
              YYEOF = env->getStaticIntField(cls, "YYEOF");
              YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          UAX29URLEmailTokenizerImpl::UAX29URLEmailTokenizerImpl(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          jint UAX29URLEmailTokenizerImpl::getNextToken() const
          {
            return env->callIntMethod(this$, mids$[mid_getNextToken_54c6a179]);
          }

          void UAX29URLEmailTokenizerImpl::getText(const ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_getText_64c709f2], a0.this$);
          }

          void UAX29URLEmailTokenizerImpl::yybegin(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
          }

          jint UAX29URLEmailTokenizerImpl::yychar() const
          {
            return env->callIntMethod(this$, mids$[mid_yychar_54c6a179]);
          }

          jchar UAX29URLEmailTokenizerImpl::yycharat(jint a0) const
          {
            return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
          }

          void UAX29URLEmailTokenizerImpl::yyclose() const
          {
            env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
          }

          jint UAX29URLEmailTokenizerImpl::yylength() const
          {
            return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
          }

          void UAX29URLEmailTokenizerImpl::yypushback(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
          }

          void UAX29URLEmailTokenizerImpl::yyreset(const ::java::io::Reader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
          }

          jint UAX29URLEmailTokenizerImpl::yystate() const
          {
            return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
          }

          ::java::lang::String UAX29URLEmailTokenizerImpl::yytext() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_UAX29URLEmailTokenizerImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UAX29URLEmailTokenizerImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_UAX29URLEmailTokenizerImpl_init_(t_UAX29URLEmailTokenizerImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_UAX29URLEmailTokenizerImpl_getNextToken(t_UAX29URLEmailTokenizerImpl *self);
          static PyObject *t_UAX29URLEmailTokenizerImpl_getText(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg);
          static PyObject *t_UAX29URLEmailTokenizerImpl_yybegin(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg);
          static PyObject *t_UAX29URLEmailTokenizerImpl_yychar(t_UAX29URLEmailTokenizerImpl *self);
          static PyObject *t_UAX29URLEmailTokenizerImpl_yycharat(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg);
          static PyObject *t_UAX29URLEmailTokenizerImpl_yyclose(t_UAX29URLEmailTokenizerImpl *self);
          static PyObject *t_UAX29URLEmailTokenizerImpl_yylength(t_UAX29URLEmailTokenizerImpl *self);
          static PyObject *t_UAX29URLEmailTokenizerImpl_yypushback(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg);
          static PyObject *t_UAX29URLEmailTokenizerImpl_yyreset(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg);
          static PyObject *t_UAX29URLEmailTokenizerImpl_yystate(t_UAX29URLEmailTokenizerImpl *self);
          static PyObject *t_UAX29URLEmailTokenizerImpl_yytext(t_UAX29URLEmailTokenizerImpl *self);
          static PyObject *t_UAX29URLEmailTokenizerImpl_get__nextToken(t_UAX29URLEmailTokenizerImpl *self, void *data);
          static PyGetSetDef t_UAX29URLEmailTokenizerImpl__fields_[] = {
            DECLARE_GET_FIELD(t_UAX29URLEmailTokenizerImpl, nextToken),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_UAX29URLEmailTokenizerImpl__methods_[] = {
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, getNextToken, METH_NOARGS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, getText, METH_O),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, yybegin, METH_O),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, yychar, METH_NOARGS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, yycharat, METH_O),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, yyclose, METH_NOARGS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, yylength, METH_NOARGS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, yypushback, METH_O),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, yyreset, METH_O),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, yystate, METH_NOARGS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, yytext, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(UAX29URLEmailTokenizerImpl, t_UAX29URLEmailTokenizerImpl, ::java::lang::Object, UAX29URLEmailTokenizerImpl, t_UAX29URLEmailTokenizerImpl_init_, 0, 0, t_UAX29URLEmailTokenizerImpl__fields_, 0, 0);

          void t_UAX29URLEmailTokenizerImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(UAX29URLEmailTokenizerImpl), module, "UAX29URLEmailTokenizerImpl", 0);
          }

          void t_UAX29URLEmailTokenizerImpl::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "class_", make_descriptor(UAX29URLEmailTokenizerImpl::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "wrapfn_", make_descriptor(t_UAX29URLEmailTokenizerImpl::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(UAX29URLEmailTokenizerImpl::initializeClass);
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "AVOID_BAD_URL", make_descriptor(UAX29URLEmailTokenizerImpl::AVOID_BAD_URL));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "EMAIL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl::EMAIL_TYPE));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "HANGUL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl::HANGUL_TYPE));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "HIRAGANA_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl::HIRAGANA_TYPE));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "IDEOGRAPHIC_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl::IDEOGRAPHIC_TYPE));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "KATAKANA_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl::KATAKANA_TYPE));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "NUMERIC_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl::NUMERIC_TYPE));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "SOUTH_EAST_ASIAN_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl::SOUTH_EAST_ASIAN_TYPE));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "URL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl::URL_TYPE));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "WORD_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl::WORD_TYPE));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "YYEOF", make_descriptor(UAX29URLEmailTokenizerImpl::YYEOF));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "YYINITIAL", make_descriptor(UAX29URLEmailTokenizerImpl::YYINITIAL));
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, UAX29URLEmailTokenizerImpl::initializeClass, 1)))
              return NULL;
            return t_UAX29URLEmailTokenizerImpl::wrap_Object(UAX29URLEmailTokenizerImpl(((t_UAX29URLEmailTokenizerImpl *) arg)->object.this$));
          }
          static PyObject *t_UAX29URLEmailTokenizerImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, UAX29URLEmailTokenizerImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_UAX29URLEmailTokenizerImpl_init_(t_UAX29URLEmailTokenizerImpl *self, PyObject *args, PyObject *kwds)
          {
            ::java::io::Reader a0((jobject) NULL);
            UAX29URLEmailTokenizerImpl object((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              INT_CALL(object = UAX29URLEmailTokenizerImpl(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_getNextToken(t_UAX29URLEmailTokenizerImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getNextToken());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_getText(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute::initializeClass, &a0))
            {
              OBJ_CALL(self->object.getText(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "getText", arg);
            return NULL;
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_yybegin(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.yybegin(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
            return NULL;
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_yychar(t_UAX29URLEmailTokenizerImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.yychar());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_yycharat(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg)
          {
            jint a0;
            jchar result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.yycharat(a0));
              return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
            return NULL;
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_yyclose(t_UAX29URLEmailTokenizerImpl *self)
          {
            OBJ_CALL(self->object.yyclose());
            Py_RETURN_NONE;
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_yylength(t_UAX29URLEmailTokenizerImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.yylength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_yypushback(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.yypushback(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
            return NULL;
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_yyreset(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg)
          {
            ::java::io::Reader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.yyreset(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
            return NULL;
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_yystate(t_UAX29URLEmailTokenizerImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.yystate());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_yytext(t_UAX29URLEmailTokenizerImpl *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.yytext());
            return j2p(result);
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_get__nextToken(t_UAX29URLEmailTokenizerImpl *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getNextToken());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/in/IndicTokenizer.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace in {

          ::java::lang::Class *IndicTokenizer::class$ = NULL;
          jmethodID *IndicTokenizer::mids$ = NULL;
          bool IndicTokenizer::live$ = false;

          jclass IndicTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/in/IndicTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_be7a3ecf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_isTokenChar_39c7bd30] = env->getMethodID(cls, "isTokenChar", "(I)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IndicTokenizer::IndicTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::util::CharTokenizer(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          IndicTokenizer::IndicTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2) : ::org::apache::lucene::analysis::util::CharTokenizer(env->newObject(initializeClass, &mids$, mid_init$_be7a3ecf, a0.this$, a1.this$, a2.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace in {
          static PyObject *t_IndicTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndicTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IndicTokenizer_init_(t_IndicTokenizer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_IndicTokenizer__methods_[] = {
            DECLARE_METHOD(t_IndicTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndicTokenizer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IndicTokenizer, t_IndicTokenizer, ::org::apache::lucene::analysis::util::CharTokenizer, IndicTokenizer, t_IndicTokenizer_init_, 0, 0, 0, 0, 0);

          void t_IndicTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(IndicTokenizer), module, "IndicTokenizer", 0);
          }

          void t_IndicTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IndicTokenizer).tp_dict, "class_", make_descriptor(IndicTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IndicTokenizer).tp_dict, "wrapfn_", make_descriptor(t_IndicTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IndicTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IndicTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IndicTokenizer::initializeClass, 1)))
              return NULL;
            return t_IndicTokenizer::wrap_Object(IndicTokenizer(((t_IndicTokenizer *) arg)->object.this$));
          }
          static PyObject *t_IndicTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IndicTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IndicTokenizer_init_(t_IndicTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                IndicTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = IndicTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                IndicTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kkk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = IndicTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergeScheduler.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergeScheduler::class$ = NULL;
        jmethodID *MergeScheduler::mids$ = NULL;
        bool MergeScheduler::live$ = false;

        jclass MergeScheduler::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergeScheduler");

            mids$ = new jmethodID[max_mid];
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_merge_5fd7a9f9] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/IndexWriter;Lorg/apache/lucene/index/MergeTrigger;Z)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void MergeScheduler::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void MergeScheduler::merge(const ::org::apache::lucene::index::IndexWriter & a0, const ::org::apache::lucene::index::MergeTrigger & a1, jboolean a2) const
        {
          env->callVoidMethod(this$, mids$[mid_merge_5fd7a9f9], a0.this$, a1.this$, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergeScheduler_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergeScheduler_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergeScheduler_close(t_MergeScheduler *self);
        static PyObject *t_MergeScheduler_merge(t_MergeScheduler *self, PyObject *args);

        static PyMethodDef t_MergeScheduler__methods_[] = {
          DECLARE_METHOD(t_MergeScheduler, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeScheduler, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeScheduler, close, METH_NOARGS),
          DECLARE_METHOD(t_MergeScheduler, merge, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MergeScheduler, t_MergeScheduler, ::java::lang::Object, MergeScheduler, abstract_init, 0, 0, 0, 0, 0);

        void t_MergeScheduler::install(PyObject *module)
        {
          installType(&PY_TYPE(MergeScheduler), module, "MergeScheduler", 0);
        }

        void t_MergeScheduler::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MergeScheduler).tp_dict, "class_", make_descriptor(MergeScheduler::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MergeScheduler).tp_dict, "wrapfn_", make_descriptor(t_MergeScheduler::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MergeScheduler).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergeScheduler_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergeScheduler::initializeClass, 1)))
            return NULL;
          return t_MergeScheduler::wrap_Object(MergeScheduler(((t_MergeScheduler *) arg)->object.this$));
        }
        static PyObject *t_MergeScheduler_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergeScheduler::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MergeScheduler_close(t_MergeScheduler *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_MergeScheduler_merge(t_MergeScheduler *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexWriter a0((jobject) NULL);
          ::org::apache::lucene::index::MergeTrigger a1((jobject) NULL);
          PyTypeObject **p1;
          jboolean a2;

          if (!parseArgs(args, "kKZ", ::org::apache::lucene::index::IndexWriter::initializeClass, ::org::apache::lucene::index::MergeTrigger::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::index::t_MergeTrigger::parameters_, &a2))
          {
            OBJ_CALL(self->object.merge(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "merge", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/EliasFanoDecoder.h"
#include "org/apache/lucene/util/packed/EliasFanoEncoder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *EliasFanoDecoder::class$ = NULL;
          jmethodID *EliasFanoDecoder::mids$ = NULL;
          bool EliasFanoDecoder::live$ = false;
          jlong EliasFanoDecoder::NO_MORE_VALUES = (jlong) 0;

          jclass EliasFanoDecoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/EliasFanoDecoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_dd0d7538] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/packed/EliasFanoEncoder;)V");
              mids$[mid_advanceToIndex_0ee6df23] = env->getMethodID(cls, "advanceToIndex", "(J)Z");
              mids$[mid_advanceToValue_0ee6df33] = env->getMethodID(cls, "advanceToValue", "(J)J");
              mids$[mid_backToValue_0ee6df33] = env->getMethodID(cls, "backToValue", "(J)J");
              mids$[mid_currentIndex_54c6a17a] = env->getMethodID(cls, "currentIndex", "()J");
              mids$[mid_currentValue_54c6a17a] = env->getMethodID(cls, "currentValue", "()J");
              mids$[mid_getEliasFanoEncoder_803fc555] = env->getMethodID(cls, "getEliasFanoEncoder", "()Lorg/apache/lucene/util/packed/EliasFanoEncoder;");
              mids$[mid_nextValue_54c6a17a] = env->getMethodID(cls, "nextValue", "()J");
              mids$[mid_numEncoded_54c6a17a] = env->getMethodID(cls, "numEncoded", "()J");
              mids$[mid_previousValue_54c6a17a] = env->getMethodID(cls, "previousValue", "()J");
              mids$[mid_toAfterSequence_54c6a166] = env->getMethodID(cls, "toAfterSequence", "()V");
              mids$[mid_toBeforeSequence_54c6a166] = env->getMethodID(cls, "toBeforeSequence", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              NO_MORE_VALUES = env->getStaticLongField(cls, "NO_MORE_VALUES");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EliasFanoDecoder::EliasFanoDecoder(const ::org::apache::lucene::util::packed::EliasFanoEncoder & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_dd0d7538, a0.this$)) {}

          jboolean EliasFanoDecoder::advanceToIndex(jlong a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_advanceToIndex_0ee6df23], a0);
          }

          jlong EliasFanoDecoder::advanceToValue(jlong a0) const
          {
            return env->callLongMethod(this$, mids$[mid_advanceToValue_0ee6df33], a0);
          }

          jlong EliasFanoDecoder::backToValue(jlong a0) const
          {
            return env->callLongMethod(this$, mids$[mid_backToValue_0ee6df33], a0);
          }

          jlong EliasFanoDecoder::currentIndex() const
          {
            return env->callLongMethod(this$, mids$[mid_currentIndex_54c6a17a]);
          }

          jlong EliasFanoDecoder::currentValue() const
          {
            return env->callLongMethod(this$, mids$[mid_currentValue_54c6a17a]);
          }

          ::org::apache::lucene::util::packed::EliasFanoEncoder EliasFanoDecoder::getEliasFanoEncoder() const
          {
            return ::org::apache::lucene::util::packed::EliasFanoEncoder(env->callObjectMethod(this$, mids$[mid_getEliasFanoEncoder_803fc555]));
          }

          jlong EliasFanoDecoder::nextValue() const
          {
            return env->callLongMethod(this$, mids$[mid_nextValue_54c6a17a]);
          }

          jlong EliasFanoDecoder::numEncoded() const
          {
            return env->callLongMethod(this$, mids$[mid_numEncoded_54c6a17a]);
          }

          jlong EliasFanoDecoder::previousValue() const
          {
            return env->callLongMethod(this$, mids$[mid_previousValue_54c6a17a]);
          }

          void EliasFanoDecoder::toAfterSequence() const
          {
            env->callVoidMethod(this$, mids$[mid_toAfterSequence_54c6a166]);
          }

          void EliasFanoDecoder::toBeforeSequence() const
          {
            env->callVoidMethod(this$, mids$[mid_toBeforeSequence_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_EliasFanoDecoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EliasFanoDecoder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EliasFanoDecoder_init_(t_EliasFanoDecoder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EliasFanoDecoder_advanceToIndex(t_EliasFanoDecoder *self, PyObject *arg);
          static PyObject *t_EliasFanoDecoder_advanceToValue(t_EliasFanoDecoder *self, PyObject *arg);
          static PyObject *t_EliasFanoDecoder_backToValue(t_EliasFanoDecoder *self, PyObject *arg);
          static PyObject *t_EliasFanoDecoder_currentIndex(t_EliasFanoDecoder *self);
          static PyObject *t_EliasFanoDecoder_currentValue(t_EliasFanoDecoder *self);
          static PyObject *t_EliasFanoDecoder_getEliasFanoEncoder(t_EliasFanoDecoder *self);
          static PyObject *t_EliasFanoDecoder_nextValue(t_EliasFanoDecoder *self);
          static PyObject *t_EliasFanoDecoder_numEncoded(t_EliasFanoDecoder *self);
          static PyObject *t_EliasFanoDecoder_previousValue(t_EliasFanoDecoder *self);
          static PyObject *t_EliasFanoDecoder_toAfterSequence(t_EliasFanoDecoder *self);
          static PyObject *t_EliasFanoDecoder_toBeforeSequence(t_EliasFanoDecoder *self);
          static PyObject *t_EliasFanoDecoder_get__eliasFanoEncoder(t_EliasFanoDecoder *self, void *data);
          static PyGetSetDef t_EliasFanoDecoder__fields_[] = {
            DECLARE_GET_FIELD(t_EliasFanoDecoder, eliasFanoEncoder),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_EliasFanoDecoder__methods_[] = {
            DECLARE_METHOD(t_EliasFanoDecoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EliasFanoDecoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EliasFanoDecoder, advanceToIndex, METH_O),
            DECLARE_METHOD(t_EliasFanoDecoder, advanceToValue, METH_O),
            DECLARE_METHOD(t_EliasFanoDecoder, backToValue, METH_O),
            DECLARE_METHOD(t_EliasFanoDecoder, currentIndex, METH_NOARGS),
            DECLARE_METHOD(t_EliasFanoDecoder, currentValue, METH_NOARGS),
            DECLARE_METHOD(t_EliasFanoDecoder, getEliasFanoEncoder, METH_NOARGS),
            DECLARE_METHOD(t_EliasFanoDecoder, nextValue, METH_NOARGS),
            DECLARE_METHOD(t_EliasFanoDecoder, numEncoded, METH_NOARGS),
            DECLARE_METHOD(t_EliasFanoDecoder, previousValue, METH_NOARGS),
            DECLARE_METHOD(t_EliasFanoDecoder, toAfterSequence, METH_NOARGS),
            DECLARE_METHOD(t_EliasFanoDecoder, toBeforeSequence, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EliasFanoDecoder, t_EliasFanoDecoder, ::java::lang::Object, EliasFanoDecoder, t_EliasFanoDecoder_init_, 0, 0, t_EliasFanoDecoder__fields_, 0, 0);

          void t_EliasFanoDecoder::install(PyObject *module)
          {
            installType(&PY_TYPE(EliasFanoDecoder), module, "EliasFanoDecoder", 0);
          }

          void t_EliasFanoDecoder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EliasFanoDecoder).tp_dict, "class_", make_descriptor(EliasFanoDecoder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EliasFanoDecoder).tp_dict, "wrapfn_", make_descriptor(t_EliasFanoDecoder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EliasFanoDecoder).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(EliasFanoDecoder::initializeClass);
            PyDict_SetItemString(PY_TYPE(EliasFanoDecoder).tp_dict, "NO_MORE_VALUES", make_descriptor(EliasFanoDecoder::NO_MORE_VALUES));
          }

          static PyObject *t_EliasFanoDecoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EliasFanoDecoder::initializeClass, 1)))
              return NULL;
            return t_EliasFanoDecoder::wrap_Object(EliasFanoDecoder(((t_EliasFanoDecoder *) arg)->object.this$));
          }
          static PyObject *t_EliasFanoDecoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EliasFanoDecoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EliasFanoDecoder_init_(t_EliasFanoDecoder *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::packed::EliasFanoEncoder a0((jobject) NULL);
            EliasFanoDecoder object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::packed::EliasFanoEncoder::initializeClass, &a0))
            {
              INT_CALL(object = EliasFanoDecoder(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_EliasFanoDecoder_advanceToIndex(t_EliasFanoDecoder *self, PyObject *arg)
          {
            jlong a0;
            jboolean result;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(result = self->object.advanceToIndex(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "advanceToIndex", arg);
            return NULL;
          }

          static PyObject *t_EliasFanoDecoder_advanceToValue(t_EliasFanoDecoder *self, PyObject *arg)
          {
            jlong a0;
            jlong result;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(result = self->object.advanceToValue(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError((PyObject *) self, "advanceToValue", arg);
            return NULL;
          }

          static PyObject *t_EliasFanoDecoder_backToValue(t_EliasFanoDecoder *self, PyObject *arg)
          {
            jlong a0;
            jlong result;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(result = self->object.backToValue(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError((PyObject *) self, "backToValue", arg);
            return NULL;
          }

          static PyObject *t_EliasFanoDecoder_currentIndex(t_EliasFanoDecoder *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.currentIndex());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_EliasFanoDecoder_currentValue(t_EliasFanoDecoder *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.currentValue());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_EliasFanoDecoder_getEliasFanoEncoder(t_EliasFanoDecoder *self)
          {
            ::org::apache::lucene::util::packed::EliasFanoEncoder result((jobject) NULL);
            OBJ_CALL(result = self->object.getEliasFanoEncoder());
            return ::org::apache::lucene::util::packed::t_EliasFanoEncoder::wrap_Object(result);
          }

          static PyObject *t_EliasFanoDecoder_nextValue(t_EliasFanoDecoder *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.nextValue());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_EliasFanoDecoder_numEncoded(t_EliasFanoDecoder *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.numEncoded());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_EliasFanoDecoder_previousValue(t_EliasFanoDecoder *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.previousValue());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_EliasFanoDecoder_toAfterSequence(t_EliasFanoDecoder *self)
          {
            OBJ_CALL(self->object.toAfterSequence());
            Py_RETURN_NONE;
          }

          static PyObject *t_EliasFanoDecoder_toBeforeSequence(t_EliasFanoDecoder *self)
          {
            OBJ_CALL(self->object.toBeforeSequence());
            Py_RETURN_NONE;
          }

          static PyObject *t_EliasFanoDecoder_get__eliasFanoEncoder(t_EliasFanoDecoder *self, void *data)
          {
            ::org::apache::lucene::util::packed::EliasFanoEncoder value((jobject) NULL);
            OBJ_CALL(value = self->object.getEliasFanoEncoder());
            return ::org::apache::lucene::util::packed::t_EliasFanoEncoder::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/no/NorwegianLightStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {

          ::java::lang::Class *NorwegianLightStemFilter::class$ = NULL;
          jmethodID *NorwegianLightStemFilter::mids$ = NULL;
          bool NorwegianLightStemFilter::live$ = false;

          jclass NorwegianLightStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/no/NorwegianLightStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_d53bcf42] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;I)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NorwegianLightStemFilter::NorwegianLightStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          NorwegianLightStemFilter::NorwegianLightStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_d53bcf42, a0.this$, a1)) {}

          jboolean NorwegianLightStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {
          static PyObject *t_NorwegianLightStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NorwegianLightStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NorwegianLightStemFilter_init_(t_NorwegianLightStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NorwegianLightStemFilter_incrementToken(t_NorwegianLightStemFilter *self, PyObject *args);

          static PyMethodDef t_NorwegianLightStemFilter__methods_[] = {
            DECLARE_METHOD(t_NorwegianLightStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianLightStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianLightStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NorwegianLightStemFilter, t_NorwegianLightStemFilter, ::org::apache::lucene::analysis::TokenFilter, NorwegianLightStemFilter, t_NorwegianLightStemFilter_init_, 0, 0, 0, 0, 0);

          void t_NorwegianLightStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(NorwegianLightStemFilter), module, "NorwegianLightStemFilter", 0);
          }

          void t_NorwegianLightStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NorwegianLightStemFilter).tp_dict, "class_", make_descriptor(NorwegianLightStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NorwegianLightStemFilter).tp_dict, "wrapfn_", make_descriptor(t_NorwegianLightStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NorwegianLightStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NorwegianLightStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NorwegianLightStemFilter::initializeClass, 1)))
              return NULL;
            return t_NorwegianLightStemFilter::wrap_Object(NorwegianLightStemFilter(((t_NorwegianLightStemFilter *) arg)->object.this$));
          }
          static PyObject *t_NorwegianLightStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NorwegianLightStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NorwegianLightStemFilter_init_(t_NorwegianLightStemFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                NorwegianLightStemFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = NorwegianLightStemFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                NorwegianLightStemFilter object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = NorwegianLightStemFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NorwegianLightStemFilter_incrementToken(t_NorwegianLightStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(NorwegianLightStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hi/HindiStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {

          ::java::lang::Class *HindiStemmer::class$ = NULL;
          jmethodID *HindiStemmer::mids$ = NULL;
          bool HindiStemmer::live$ = false;

          jclass HindiStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hi/HindiStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HindiStemmer::HindiStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint HindiStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {
          static PyObject *t_HindiStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HindiStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HindiStemmer_init_(t_HindiStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HindiStemmer_stem(t_HindiStemmer *self, PyObject *args);

          static PyMethodDef t_HindiStemmer__methods_[] = {
            DECLARE_METHOD(t_HindiStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HindiStemmer, t_HindiStemmer, ::java::lang::Object, HindiStemmer, t_HindiStemmer_init_, 0, 0, 0, 0, 0);

          void t_HindiStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(HindiStemmer), module, "HindiStemmer", 0);
          }

          void t_HindiStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HindiStemmer).tp_dict, "class_", make_descriptor(HindiStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HindiStemmer).tp_dict, "wrapfn_", make_descriptor(t_HindiStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HindiStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HindiStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HindiStemmer::initializeClass, 1)))
              return NULL;
            return t_HindiStemmer::wrap_Object(HindiStemmer(((t_HindiStemmer *) arg)->object.this$));
          }
          static PyObject *t_HindiStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HindiStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HindiStemmer_init_(t_HindiStemmer *self, PyObject *args, PyObject *kwds)
          {
            HindiStemmer object((jobject) NULL);

            INT_CALL(object = HindiStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_HindiStemmer_stem(t_HindiStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SortedSetDocValues::class$ = NULL;
        jmethodID *SortedSetDocValues::mids$ = NULL;
        bool SortedSetDocValues::live$ = false;
        jlong SortedSetDocValues::NO_MORE_ORDS = (jlong) 0;

        jclass SortedSetDocValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SortedSetDocValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getValueCount_54c6a17a] = env->getMethodID(cls, "getValueCount", "()J");
            mids$[mid_lookupOrd_9c59b7f4] = env->getMethodID(cls, "lookupOrd", "(J)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_lookupTerm_7bc03dd8] = env->getMethodID(cls, "lookupTerm", "(Lorg/apache/lucene/util/BytesRef;)J");
            mids$[mid_nextOrd_54c6a17a] = env->getMethodID(cls, "nextOrd", "()J");
            mids$[mid_setDocument_39c7bd3c] = env->getMethodID(cls, "setDocument", "(I)V");
            mids$[mid_termsEnum_ea7afd9f] = env->getMethodID(cls, "termsEnum", "()Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            NO_MORE_ORDS = env->getStaticLongField(cls, "NO_MORE_ORDS");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong SortedSetDocValues::getValueCount() const
        {
          return env->callLongMethod(this$, mids$[mid_getValueCount_54c6a17a]);
        }

        ::org::apache::lucene::util::BytesRef SortedSetDocValues::lookupOrd(jlong a0) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_lookupOrd_9c59b7f4], a0));
        }

        jlong SortedSetDocValues::lookupTerm(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_lookupTerm_7bc03dd8], a0.this$);
        }

        jlong SortedSetDocValues::nextOrd() const
        {
          return env->callLongMethod(this$, mids$[mid_nextOrd_54c6a17a]);
        }

        void SortedSetDocValues::setDocument(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setDocument_39c7bd3c], a0);
        }

        ::org::apache::lucene::index::TermsEnum SortedSetDocValues::termsEnum() const
        {
          return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_termsEnum_ea7afd9f]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SortedSetDocValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedSetDocValues_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedSetDocValues_getValueCount(t_SortedSetDocValues *self);
        static PyObject *t_SortedSetDocValues_lookupOrd(t_SortedSetDocValues *self, PyObject *arg);
        static PyObject *t_SortedSetDocValues_lookupTerm(t_SortedSetDocValues *self, PyObject *arg);
        static PyObject *t_SortedSetDocValues_nextOrd(t_SortedSetDocValues *self);
        static PyObject *t_SortedSetDocValues_setDocument(t_SortedSetDocValues *self, PyObject *arg);
        static PyObject *t_SortedSetDocValues_termsEnum(t_SortedSetDocValues *self);
        static int t_SortedSetDocValues_set__document(t_SortedSetDocValues *self, PyObject *arg, void *data);
        static PyObject *t_SortedSetDocValues_get__valueCount(t_SortedSetDocValues *self, void *data);
        static PyGetSetDef t_SortedSetDocValues__fields_[] = {
          DECLARE_SET_FIELD(t_SortedSetDocValues, document),
          DECLARE_GET_FIELD(t_SortedSetDocValues, valueCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SortedSetDocValues__methods_[] = {
          DECLARE_METHOD(t_SortedSetDocValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedSetDocValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedSetDocValues, getValueCount, METH_NOARGS),
          DECLARE_METHOD(t_SortedSetDocValues, lookupOrd, METH_O),
          DECLARE_METHOD(t_SortedSetDocValues, lookupTerm, METH_O),
          DECLARE_METHOD(t_SortedSetDocValues, nextOrd, METH_NOARGS),
          DECLARE_METHOD(t_SortedSetDocValues, setDocument, METH_O),
          DECLARE_METHOD(t_SortedSetDocValues, termsEnum, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SortedSetDocValues, t_SortedSetDocValues, ::java::lang::Object, SortedSetDocValues, abstract_init, 0, 0, t_SortedSetDocValues__fields_, 0, 0);

        void t_SortedSetDocValues::install(PyObject *module)
        {
          installType(&PY_TYPE(SortedSetDocValues), module, "SortedSetDocValues", 0);
        }

        void t_SortedSetDocValues::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SortedSetDocValues).tp_dict, "class_", make_descriptor(SortedSetDocValues::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SortedSetDocValues).tp_dict, "wrapfn_", make_descriptor(t_SortedSetDocValues::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SortedSetDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(SortedSetDocValues::initializeClass);
          PyDict_SetItemString(PY_TYPE(SortedSetDocValues).tp_dict, "NO_MORE_ORDS", make_descriptor(SortedSetDocValues::NO_MORE_ORDS));
        }

        static PyObject *t_SortedSetDocValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortedSetDocValues::initializeClass, 1)))
            return NULL;
          return t_SortedSetDocValues::wrap_Object(SortedSetDocValues(((t_SortedSetDocValues *) arg)->object.this$));
        }
        static PyObject *t_SortedSetDocValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortedSetDocValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SortedSetDocValues_getValueCount(t_SortedSetDocValues *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getValueCount());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SortedSetDocValues_lookupOrd(t_SortedSetDocValues *self, PyObject *arg)
        {
          jlong a0;
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.lookupOrd(a0));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "lookupOrd", arg);
          return NULL;
        }

        static PyObject *t_SortedSetDocValues_lookupTerm(t_SortedSetDocValues *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.lookupTerm(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "lookupTerm", arg);
          return NULL;
        }

        static PyObject *t_SortedSetDocValues_nextOrd(t_SortedSetDocValues *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.nextOrd());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SortedSetDocValues_setDocument(t_SortedSetDocValues *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setDocument(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setDocument", arg);
          return NULL;
        }

        static PyObject *t_SortedSetDocValues_termsEnum(t_SortedSetDocValues *self)
        {
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);
          OBJ_CALL(result = self->object.termsEnum());
          return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
        }

        static int t_SortedSetDocValues_set__document(t_SortedSetDocValues *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setDocument(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "document", arg);
          return -1;
        }

        static PyObject *t_SortedSetDocValues_get__valueCount(t_SortedSetDocValues *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getValueCount());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/TermFreqIterator$TermFreqIteratorWrapper.h"
#include "java/util/Comparator.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BytesRefIterator.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/search/spell/TermFreqIterator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *TermFreqIterator$TermFreqIteratorWrapper::class$ = NULL;
          jmethodID *TermFreqIterator$TermFreqIteratorWrapper::mids$ = NULL;
          bool TermFreqIterator$TermFreqIteratorWrapper::live$ = false;

          jclass TermFreqIterator$TermFreqIteratorWrapper::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/TermFreqIterator$TermFreqIteratorWrapper");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_506719fa] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/BytesRefIterator;)V");
              mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
              mids$[mid_next_4ae19461] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_weight_54c6a17a] = env->getMethodID(cls, "weight", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TermFreqIterator$TermFreqIteratorWrapper::TermFreqIterator$TermFreqIteratorWrapper(const ::org::apache::lucene::util::BytesRefIterator & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_506719fa, a0.this$)) {}

          ::java::util::Comparator TermFreqIterator$TermFreqIteratorWrapper::getComparator() const
          {
            return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
          }

          ::org::apache::lucene::util::BytesRef TermFreqIterator$TermFreqIteratorWrapper::next() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_4ae19461]));
          }

          jlong TermFreqIterator$TermFreqIteratorWrapper::weight() const
          {
            return env->callLongMethod(this$, mids$[mid_weight_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_TermFreqIterator$TermFreqIteratorWrapper_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TermFreqIterator$TermFreqIteratorWrapper_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TermFreqIterator$TermFreqIteratorWrapper_init_(t_TermFreqIterator$TermFreqIteratorWrapper *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TermFreqIterator$TermFreqIteratorWrapper_getComparator(t_TermFreqIterator$TermFreqIteratorWrapper *self);
          static PyObject *t_TermFreqIterator$TermFreqIteratorWrapper_next(t_TermFreqIterator$TermFreqIteratorWrapper *self);
          static PyObject *t_TermFreqIterator$TermFreqIteratorWrapper_weight(t_TermFreqIterator$TermFreqIteratorWrapper *self);
          static PyObject *t_TermFreqIterator$TermFreqIteratorWrapper_get__comparator(t_TermFreqIterator$TermFreqIteratorWrapper *self, void *data);
          static PyGetSetDef t_TermFreqIterator$TermFreqIteratorWrapper__fields_[] = {
            DECLARE_GET_FIELD(t_TermFreqIterator$TermFreqIteratorWrapper, comparator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TermFreqIterator$TermFreqIteratorWrapper__methods_[] = {
            DECLARE_METHOD(t_TermFreqIterator$TermFreqIteratorWrapper, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermFreqIterator$TermFreqIteratorWrapper, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermFreqIterator$TermFreqIteratorWrapper, getComparator, METH_NOARGS),
            DECLARE_METHOD(t_TermFreqIterator$TermFreqIteratorWrapper, next, METH_NOARGS),
            DECLARE_METHOD(t_TermFreqIterator$TermFreqIteratorWrapper, weight, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TermFreqIterator$TermFreqIteratorWrapper, t_TermFreqIterator$TermFreqIteratorWrapper, ::java::lang::Object, TermFreqIterator$TermFreqIteratorWrapper, t_TermFreqIterator$TermFreqIteratorWrapper_init_, PyObject_SelfIter, ((PyObject *(*)(t_TermFreqIterator$TermFreqIteratorWrapper *)) get_next< t_TermFreqIterator$TermFreqIteratorWrapper,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >), t_TermFreqIterator$TermFreqIteratorWrapper__fields_, 0, 0);

          void t_TermFreqIterator$TermFreqIteratorWrapper::install(PyObject *module)
          {
            installType(&PY_TYPE(TermFreqIterator$TermFreqIteratorWrapper), module, "TermFreqIterator$TermFreqIteratorWrapper", 0);
          }

          void t_TermFreqIterator$TermFreqIteratorWrapper::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TermFreqIterator$TermFreqIteratorWrapper).tp_dict, "class_", make_descriptor(TermFreqIterator$TermFreqIteratorWrapper::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TermFreqIterator$TermFreqIteratorWrapper).tp_dict, "wrapfn_", make_descriptor(t_TermFreqIterator$TermFreqIteratorWrapper::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TermFreqIterator$TermFreqIteratorWrapper).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TermFreqIterator$TermFreqIteratorWrapper_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TermFreqIterator$TermFreqIteratorWrapper::initializeClass, 1)))
              return NULL;
            return t_TermFreqIterator$TermFreqIteratorWrapper::wrap_Object(TermFreqIterator$TermFreqIteratorWrapper(((t_TermFreqIterator$TermFreqIteratorWrapper *) arg)->object.this$));
          }
          static PyObject *t_TermFreqIterator$TermFreqIteratorWrapper_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TermFreqIterator$TermFreqIteratorWrapper::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TermFreqIterator$TermFreqIteratorWrapper_init_(t_TermFreqIterator$TermFreqIteratorWrapper *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::BytesRefIterator a0((jobject) NULL);
            TermFreqIterator$TermFreqIteratorWrapper object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRefIterator::initializeClass, &a0))
            {
              INT_CALL(object = TermFreqIterator$TermFreqIteratorWrapper(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TermFreqIterator$TermFreqIteratorWrapper_getComparator(t_TermFreqIterator$TermFreqIteratorWrapper *self)
          {
            ::java::util::Comparator result((jobject) NULL);
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          static PyObject *t_TermFreqIterator$TermFreqIteratorWrapper_next(t_TermFreqIterator$TermFreqIteratorWrapper *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_TermFreqIterator$TermFreqIteratorWrapper_weight(t_TermFreqIterator$TermFreqIteratorWrapper *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.weight());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_TermFreqIterator$TermFreqIteratorWrapper_get__comparator(t_TermFreqIterator$TermFreqIteratorWrapper *self, void *data)
          {
            ::java::util::Comparator value((jobject) NULL);
            OBJ_CALL(value = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedInts$Writer.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedInts$Writer::class$ = NULL;
          jmethodID *PackedInts$Writer::mids$ = NULL;
          bool PackedInts$Writer::live$ = false;

          jclass PackedInts$Writer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedInts$Writer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_add_0ee6df2f] = env->getMethodID(cls, "add", "(J)V");
              mids$[mid_bitsPerValue_54c6a179] = env->getMethodID(cls, "bitsPerValue", "()I");
              mids$[mid_finish_54c6a166] = env->getMethodID(cls, "finish", "()V");
              mids$[mid_ord_54c6a179] = env->getMethodID(cls, "ord", "()I");
              mids$[mid_getFormat_2580793f] = env->getMethodID(cls, "getFormat", "()Lorg/apache/lucene/util/packed/PackedInts$Format;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void PackedInts$Writer::add(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_add_0ee6df2f], a0);
          }

          jint PackedInts$Writer::bitsPerValue() const
          {
            return env->callIntMethod(this$, mids$[mid_bitsPerValue_54c6a179]);
          }

          void PackedInts$Writer::finish() const
          {
            env->callVoidMethod(this$, mids$[mid_finish_54c6a166]);
          }

          jint PackedInts$Writer::ord() const
          {
            return env->callIntMethod(this$, mids$[mid_ord_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedInts$Writer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Writer_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Writer_add(t_PackedInts$Writer *self, PyObject *arg);
          static PyObject *t_PackedInts$Writer_bitsPerValue(t_PackedInts$Writer *self);
          static PyObject *t_PackedInts$Writer_finish(t_PackedInts$Writer *self);
          static PyObject *t_PackedInts$Writer_ord(t_PackedInts$Writer *self);

          static PyMethodDef t_PackedInts$Writer__methods_[] = {
            DECLARE_METHOD(t_PackedInts$Writer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Writer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Writer, add, METH_O),
            DECLARE_METHOD(t_PackedInts$Writer, bitsPerValue, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$Writer, finish, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$Writer, ord, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedInts$Writer, t_PackedInts$Writer, ::java::lang::Object, PackedInts$Writer, abstract_init, 0, 0, 0, 0, 0);

          void t_PackedInts$Writer::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedInts$Writer), module, "PackedInts$Writer", 0);
          }

          void t_PackedInts$Writer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedInts$Writer).tp_dict, "class_", make_descriptor(PackedInts$Writer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedInts$Writer).tp_dict, "wrapfn_", make_descriptor(t_PackedInts$Writer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedInts$Writer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedInts$Writer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedInts$Writer::initializeClass, 1)))
              return NULL;
            return t_PackedInts$Writer::wrap_Object(PackedInts$Writer(((t_PackedInts$Writer *) arg)->object.this$));
          }
          static PyObject *t_PackedInts$Writer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedInts$Writer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PackedInts$Writer_add(t_PackedInts$Writer *self, PyObject *arg)
          {
            jlong a0;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(self->object.add(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "add", arg);
            return NULL;
          }

          static PyObject *t_PackedInts$Writer_bitsPerValue(t_PackedInts$Writer *self)
          {
            jint result;
            OBJ_CALL(result = self->object.bitsPerValue());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedInts$Writer_finish(t_PackedInts$Writer *self)
          {
            OBJ_CALL(self->object.finish());
            Py_RETURN_NONE;
          }

          static PyObject *t_PackedInts$Writer_ord(t_PackedInts$Writer *self)
          {
            jint result;
            OBJ_CALL(result = self->object.ord());
            return PyInt_FromLong((long) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/NumericTokenStream$NumericTermAttributeImpl.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/AttributeReflector.h"
#include "org/apache/lucene/analysis/NumericTokenStream$NumericTermAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/TermToBytesRefAttribute.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *NumericTokenStream$NumericTermAttributeImpl::class$ = NULL;
        jmethodID *NumericTokenStream$NumericTermAttributeImpl::mids$ = NULL;
        bool NumericTokenStream$NumericTermAttributeImpl::live$ = false;

        jclass NumericTokenStream$NumericTermAttributeImpl::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/NumericTokenStream$NumericTermAttributeImpl");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
            mids$[mid_fillBytesRef_54c6a166] = env->getMethodID(cls, "fillBytesRef", "()V");
            mids$[mid_getBytesRef_4ae19461] = env->getMethodID(cls, "getBytesRef", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getRawValue_54c6a17a] = env->getMethodID(cls, "getRawValue", "()J");
            mids$[mid_getShift_54c6a179] = env->getMethodID(cls, "getShift", "()I");
            mids$[mid_getValueSize_54c6a179] = env->getMethodID(cls, "getValueSize", "()I");
            mids$[mid_incShift_54c6a179] = env->getMethodID(cls, "incShift", "()I");
            mids$[mid_init_72e1d373] = env->getMethodID(cls, "init", "(JIII)V");
            mids$[mid_reflectWith_5f3f5102] = env->getMethodID(cls, "reflectWith", "(Lorg/apache/lucene/util/AttributeReflector;)V");
            mids$[mid_setShift_39c7bd3c] = env->getMethodID(cls, "setShift", "(I)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NumericTokenStream$NumericTermAttributeImpl::NumericTokenStream$NumericTermAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void NumericTokenStream$NumericTermAttributeImpl::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        void NumericTokenStream$NumericTermAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
        }

        void NumericTokenStream$NumericTermAttributeImpl::fillBytesRef() const
        {
          env->callVoidMethod(this$, mids$[mid_fillBytesRef_54c6a166]);
        }

        ::org::apache::lucene::util::BytesRef NumericTokenStream$NumericTermAttributeImpl::getBytesRef() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getBytesRef_4ae19461]));
        }

        jlong NumericTokenStream$NumericTermAttributeImpl::getRawValue() const
        {
          return env->callLongMethod(this$, mids$[mid_getRawValue_54c6a17a]);
        }

        jint NumericTokenStream$NumericTermAttributeImpl::getShift() const
        {
          return env->callIntMethod(this$, mids$[mid_getShift_54c6a179]);
        }

        jint NumericTokenStream$NumericTermAttributeImpl::getValueSize() const
        {
          return env->callIntMethod(this$, mids$[mid_getValueSize_54c6a179]);
        }

        jint NumericTokenStream$NumericTermAttributeImpl::incShift() const
        {
          return env->callIntMethod(this$, mids$[mid_incShift_54c6a179]);
        }

        void NumericTokenStream$NumericTermAttributeImpl::init(jlong a0, jint a1, jint a2, jint a3) const
        {
          env->callVoidMethod(this$, mids$[mid_init_72e1d373], a0, a1, a2, a3);
        }

        void NumericTokenStream$NumericTermAttributeImpl::reflectWith(const ::org::apache::lucene::util::AttributeReflector & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_reflectWith_5f3f5102], a0.this$);
        }

        void NumericTokenStream$NumericTermAttributeImpl::setShift(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setShift_39c7bd3c], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NumericTokenStream$NumericTermAttributeImpl_init_(t_NumericTokenStream$NumericTermAttributeImpl *self, PyObject *args, PyObject *kwds);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_clear(t_NumericTokenStream$NumericTermAttributeImpl *self, PyObject *args);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_copyTo(t_NumericTokenStream$NumericTermAttributeImpl *self, PyObject *args);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_fillBytesRef(t_NumericTokenStream$NumericTermAttributeImpl *self);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_getBytesRef(t_NumericTokenStream$NumericTermAttributeImpl *self);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_getRawValue(t_NumericTokenStream$NumericTermAttributeImpl *self);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_getShift(t_NumericTokenStream$NumericTermAttributeImpl *self);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_getValueSize(t_NumericTokenStream$NumericTermAttributeImpl *self);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_incShift(t_NumericTokenStream$NumericTermAttributeImpl *self);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_init(t_NumericTokenStream$NumericTermAttributeImpl *self, PyObject *args);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_reflectWith(t_NumericTokenStream$NumericTermAttributeImpl *self, PyObject *args);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_setShift(t_NumericTokenStream$NumericTermAttributeImpl *self, PyObject *arg);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_get__bytesRef(t_NumericTokenStream$NumericTermAttributeImpl *self, void *data);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_get__rawValue(t_NumericTokenStream$NumericTermAttributeImpl *self, void *data);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_get__shift(t_NumericTokenStream$NumericTermAttributeImpl *self, void *data);
        static int t_NumericTokenStream$NumericTermAttributeImpl_set__shift(t_NumericTokenStream$NumericTermAttributeImpl *self, PyObject *arg, void *data);
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_get__valueSize(t_NumericTokenStream$NumericTermAttributeImpl *self, void *data);
        static PyGetSetDef t_NumericTokenStream$NumericTermAttributeImpl__fields_[] = {
          DECLARE_GET_FIELD(t_NumericTokenStream$NumericTermAttributeImpl, bytesRef),
          DECLARE_GET_FIELD(t_NumericTokenStream$NumericTermAttributeImpl, rawValue),
          DECLARE_GETSET_FIELD(t_NumericTokenStream$NumericTermAttributeImpl, shift),
          DECLARE_GET_FIELD(t_NumericTokenStream$NumericTermAttributeImpl, valueSize),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_NumericTokenStream$NumericTermAttributeImpl__methods_[] = {
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttributeImpl, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttributeImpl, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttributeImpl, clear, METH_VARARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttributeImpl, copyTo, METH_VARARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttributeImpl, fillBytesRef, METH_NOARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttributeImpl, getBytesRef, METH_NOARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttributeImpl, getRawValue, METH_NOARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttributeImpl, getShift, METH_NOARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttributeImpl, getValueSize, METH_NOARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttributeImpl, incShift, METH_NOARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttributeImpl, init, METH_VARARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttributeImpl, reflectWith, METH_VARARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttributeImpl, setShift, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NumericTokenStream$NumericTermAttributeImpl, t_NumericTokenStream$NumericTermAttributeImpl, ::org::apache::lucene::util::AttributeImpl, NumericTokenStream$NumericTermAttributeImpl, t_NumericTokenStream$NumericTermAttributeImpl_init_, 0, 0, t_NumericTokenStream$NumericTermAttributeImpl__fields_, 0, 0);

        void t_NumericTokenStream$NumericTermAttributeImpl::install(PyObject *module)
        {
          installType(&PY_TYPE(NumericTokenStream$NumericTermAttributeImpl), module, "NumericTokenStream$NumericTermAttributeImpl", 0);
        }

        void t_NumericTokenStream$NumericTermAttributeImpl::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NumericTokenStream$NumericTermAttributeImpl).tp_dict, "class_", make_descriptor(NumericTokenStream$NumericTermAttributeImpl::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NumericTokenStream$NumericTermAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_NumericTokenStream$NumericTermAttributeImpl::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NumericTokenStream$NumericTermAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NumericTokenStream$NumericTermAttributeImpl::initializeClass, 1)))
            return NULL;
          return t_NumericTokenStream$NumericTermAttributeImpl::wrap_Object(NumericTokenStream$NumericTermAttributeImpl(((t_NumericTokenStream$NumericTermAttributeImpl *) arg)->object.this$));
        }
        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NumericTokenStream$NumericTermAttributeImpl::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NumericTokenStream$NumericTermAttributeImpl_init_(t_NumericTokenStream$NumericTermAttributeImpl *self, PyObject *args, PyObject *kwds)
        {
          NumericTokenStream$NumericTermAttributeImpl object((jobject) NULL);

          INT_CALL(object = NumericTokenStream$NumericTermAttributeImpl());
          self->object = object;

          return 0;
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_clear(t_NumericTokenStream$NumericTermAttributeImpl *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.clear());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NumericTokenStream$NumericTermAttributeImpl), (PyObject *) self, "clear", args, 2);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_copyTo(t_NumericTokenStream$NumericTermAttributeImpl *self, PyObject *args)
        {
          ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyTo(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NumericTokenStream$NumericTermAttributeImpl), (PyObject *) self, "copyTo", args, 2);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_fillBytesRef(t_NumericTokenStream$NumericTermAttributeImpl *self)
        {
          OBJ_CALL(self->object.fillBytesRef());
          Py_RETURN_NONE;
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_getBytesRef(t_NumericTokenStream$NumericTermAttributeImpl *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getBytesRef());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_getRawValue(t_NumericTokenStream$NumericTermAttributeImpl *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getRawValue());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_getShift(t_NumericTokenStream$NumericTermAttributeImpl *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getShift());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_getValueSize(t_NumericTokenStream$NumericTermAttributeImpl *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getValueSize());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_incShift(t_NumericTokenStream$NumericTermAttributeImpl *self)
        {
          jint result;
          OBJ_CALL(result = self->object.incShift());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_init(t_NumericTokenStream$NumericTermAttributeImpl *self, PyObject *args)
        {
          jlong a0;
          jint a1;
          jint a2;
          jint a3;

          if (!parseArgs(args, "JIII", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.init(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "init", args);
          return NULL;
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_reflectWith(t_NumericTokenStream$NumericTermAttributeImpl *self, PyObject *args)
        {
          ::org::apache::lucene::util::AttributeReflector a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeReflector::initializeClass, &a0))
          {
            OBJ_CALL(self->object.reflectWith(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NumericTokenStream$NumericTermAttributeImpl), (PyObject *) self, "reflectWith", args, 2);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_setShift(t_NumericTokenStream$NumericTermAttributeImpl *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setShift(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setShift", arg);
          return NULL;
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_get__bytesRef(t_NumericTokenStream$NumericTermAttributeImpl *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getBytesRef());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_get__rawValue(t_NumericTokenStream$NumericTermAttributeImpl *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getRawValue());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_get__shift(t_NumericTokenStream$NumericTermAttributeImpl *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getShift());
          return PyInt_FromLong((long) value);
        }
        static int t_NumericTokenStream$NumericTermAttributeImpl_set__shift(t_NumericTokenStream$NumericTermAttributeImpl *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setShift(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "shift", arg);
          return -1;
        }

        static PyObject *t_NumericTokenStream$NumericTermAttributeImpl_get__valueSize(t_NumericTokenStream$NumericTermAttributeImpl *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getValueSize());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/FlagsAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *FlagsAttribute::class$ = NULL;
          jmethodID *FlagsAttribute::mids$ = NULL;
          bool FlagsAttribute::live$ = false;

          jclass FlagsAttribute::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/FlagsAttribute");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getFlags_54c6a179] = env->getMethodID(cls, "getFlags", "()I");
              mids$[mid_setFlags_39c7bd3c] = env->getMethodID(cls, "setFlags", "(I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint FlagsAttribute::getFlags() const
          {
            return env->callIntMethod(this$, mids$[mid_getFlags_54c6a179]);
          }

          void FlagsAttribute::setFlags(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setFlags_39c7bd3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_FlagsAttribute_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FlagsAttribute_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FlagsAttribute_getFlags(t_FlagsAttribute *self);
          static PyObject *t_FlagsAttribute_setFlags(t_FlagsAttribute *self, PyObject *arg);
          static PyObject *t_FlagsAttribute_get__flags(t_FlagsAttribute *self, void *data);
          static int t_FlagsAttribute_set__flags(t_FlagsAttribute *self, PyObject *arg, void *data);
          static PyGetSetDef t_FlagsAttribute__fields_[] = {
            DECLARE_GETSET_FIELD(t_FlagsAttribute, flags),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FlagsAttribute__methods_[] = {
            DECLARE_METHOD(t_FlagsAttribute, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FlagsAttribute, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FlagsAttribute, getFlags, METH_NOARGS),
            DECLARE_METHOD(t_FlagsAttribute, setFlags, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FlagsAttribute, t_FlagsAttribute, ::org::apache::lucene::util::Attribute, FlagsAttribute, abstract_init, 0, 0, t_FlagsAttribute__fields_, 0, 0);

          void t_FlagsAttribute::install(PyObject *module)
          {
            installType(&PY_TYPE(FlagsAttribute), module, "FlagsAttribute", 0);
          }

          void t_FlagsAttribute::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FlagsAttribute).tp_dict, "class_", make_descriptor(FlagsAttribute::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FlagsAttribute).tp_dict, "wrapfn_", make_descriptor(t_FlagsAttribute::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FlagsAttribute).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FlagsAttribute_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FlagsAttribute::initializeClass, 1)))
              return NULL;
            return t_FlagsAttribute::wrap_Object(FlagsAttribute(((t_FlagsAttribute *) arg)->object.this$));
          }
          static PyObject *t_FlagsAttribute_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FlagsAttribute::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FlagsAttribute_getFlags(t_FlagsAttribute *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getFlags());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FlagsAttribute_setFlags(t_FlagsAttribute *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setFlags(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setFlags", arg);
            return NULL;
          }

          static PyObject *t_FlagsAttribute_get__flags(t_FlagsAttribute *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getFlags());
            return PyInt_FromLong((long) value);
          }
          static int t_FlagsAttribute_set__flags(t_FlagsAttribute *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setFlags(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "flags", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/LogDocMergePolicy.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *LogDocMergePolicy::class$ = NULL;
        jmethodID *LogDocMergePolicy::mids$ = NULL;
        bool LogDocMergePolicy::live$ = false;
        jint LogDocMergePolicy::DEFAULT_MIN_MERGE_DOCS = (jint) 0;

        jclass LogDocMergePolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/LogDocMergePolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_getMinMergeDocs_54c6a179] = env->getMethodID(cls, "getMinMergeDocs", "()I");
            mids$[mid_setMinMergeDocs_39c7bd3c] = env->getMethodID(cls, "setMinMergeDocs", "(I)V");
            mids$[mid_size_5454cb07] = env->getMethodID(cls, "size", "(Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/index/IndexWriter;)J");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_MIN_MERGE_DOCS = env->getStaticIntField(cls, "DEFAULT_MIN_MERGE_DOCS");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LogDocMergePolicy::LogDocMergePolicy() : ::org::apache::lucene::index::LogMergePolicy(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jint LogDocMergePolicy::getMinMergeDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_getMinMergeDocs_54c6a179]);
        }

        void LogDocMergePolicy::setMinMergeDocs(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMinMergeDocs_39c7bd3c], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_LogDocMergePolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LogDocMergePolicy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LogDocMergePolicy_init_(t_LogDocMergePolicy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LogDocMergePolicy_getMinMergeDocs(t_LogDocMergePolicy *self);
        static PyObject *t_LogDocMergePolicy_setMinMergeDocs(t_LogDocMergePolicy *self, PyObject *arg);
        static PyObject *t_LogDocMergePolicy_get__minMergeDocs(t_LogDocMergePolicy *self, void *data);
        static int t_LogDocMergePolicy_set__minMergeDocs(t_LogDocMergePolicy *self, PyObject *arg, void *data);
        static PyGetSetDef t_LogDocMergePolicy__fields_[] = {
          DECLARE_GETSET_FIELD(t_LogDocMergePolicy, minMergeDocs),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_LogDocMergePolicy__methods_[] = {
          DECLARE_METHOD(t_LogDocMergePolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LogDocMergePolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LogDocMergePolicy, getMinMergeDocs, METH_NOARGS),
          DECLARE_METHOD(t_LogDocMergePolicy, setMinMergeDocs, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LogDocMergePolicy, t_LogDocMergePolicy, ::org::apache::lucene::index::LogMergePolicy, LogDocMergePolicy, t_LogDocMergePolicy_init_, 0, 0, t_LogDocMergePolicy__fields_, 0, 0);

        void t_LogDocMergePolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(LogDocMergePolicy), module, "LogDocMergePolicy", 0);
        }

        void t_LogDocMergePolicy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LogDocMergePolicy).tp_dict, "class_", make_descriptor(LogDocMergePolicy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LogDocMergePolicy).tp_dict, "wrapfn_", make_descriptor(t_LogDocMergePolicy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LogDocMergePolicy).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(LogDocMergePolicy::initializeClass);
          PyDict_SetItemString(PY_TYPE(LogDocMergePolicy).tp_dict, "DEFAULT_MIN_MERGE_DOCS", make_descriptor(LogDocMergePolicy::DEFAULT_MIN_MERGE_DOCS));
        }

        static PyObject *t_LogDocMergePolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LogDocMergePolicy::initializeClass, 1)))
            return NULL;
          return t_LogDocMergePolicy::wrap_Object(LogDocMergePolicy(((t_LogDocMergePolicy *) arg)->object.this$));
        }
        static PyObject *t_LogDocMergePolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LogDocMergePolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LogDocMergePolicy_init_(t_LogDocMergePolicy *self, PyObject *args, PyObject *kwds)
        {
          LogDocMergePolicy object((jobject) NULL);

          INT_CALL(object = LogDocMergePolicy());
          self->object = object;

          return 0;
        }

        static PyObject *t_LogDocMergePolicy_getMinMergeDocs(t_LogDocMergePolicy *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMinMergeDocs());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_LogDocMergePolicy_setMinMergeDocs(t_LogDocMergePolicy *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setMinMergeDocs(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMinMergeDocs", arg);
          return NULL;
        }

        static PyObject *t_LogDocMergePolicy_get__minMergeDocs(t_LogDocMergePolicy *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMinMergeDocs());
          return PyInt_FromLong((long) value);
        }
        static int t_LogDocMergePolicy_set__minMergeDocs(t_LogDocMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMinMergeDocs(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "minMergeDocs", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/MaxDocValueSource.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *MaxDocValueSource::class$ = NULL;
            jmethodID *MaxDocValueSource::mids$ = NULL;
            bool MaxDocValueSource::live$ = false;

            jclass MaxDocValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/MaxDocValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            MaxDocValueSource::MaxDocValueSource() : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            void MaxDocValueSource::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String MaxDocValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean MaxDocValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues MaxDocValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint MaxDocValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }

            ::java::lang::String MaxDocValueSource::name() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_MaxDocValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_MaxDocValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_MaxDocValueSource_init_(t_MaxDocValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_MaxDocValueSource_createWeight(t_MaxDocValueSource *self, PyObject *args);
            static PyObject *t_MaxDocValueSource_description(t_MaxDocValueSource *self, PyObject *args);
            static PyObject *t_MaxDocValueSource_equals(t_MaxDocValueSource *self, PyObject *args);
            static PyObject *t_MaxDocValueSource_getValues(t_MaxDocValueSource *self, PyObject *args);
            static PyObject *t_MaxDocValueSource_hashCode(t_MaxDocValueSource *self, PyObject *args);
            static PyObject *t_MaxDocValueSource_name(t_MaxDocValueSource *self);

            static PyMethodDef t_MaxDocValueSource__methods_[] = {
              DECLARE_METHOD(t_MaxDocValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MaxDocValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MaxDocValueSource, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_MaxDocValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_MaxDocValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_MaxDocValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_MaxDocValueSource, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_MaxDocValueSource, name, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(MaxDocValueSource, t_MaxDocValueSource, ::org::apache::lucene::queries::function::ValueSource, MaxDocValueSource, t_MaxDocValueSource_init_, 0, 0, 0, 0, 0);

            void t_MaxDocValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(MaxDocValueSource), module, "MaxDocValueSource", 0);
            }

            void t_MaxDocValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(MaxDocValueSource).tp_dict, "class_", make_descriptor(MaxDocValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(MaxDocValueSource).tp_dict, "wrapfn_", make_descriptor(t_MaxDocValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(MaxDocValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_MaxDocValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, MaxDocValueSource::initializeClass, 1)))
                return NULL;
              return t_MaxDocValueSource::wrap_Object(MaxDocValueSource(((t_MaxDocValueSource *) arg)->object.this$));
            }
            static PyObject *t_MaxDocValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, MaxDocValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_MaxDocValueSource_init_(t_MaxDocValueSource *self, PyObject *args, PyObject *kwds)
            {
              MaxDocValueSource object((jobject) NULL);

              INT_CALL(object = MaxDocValueSource());
              self->object = object;

              return 0;
            }

            static PyObject *t_MaxDocValueSource_createWeight(t_MaxDocValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(MaxDocValueSource), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_MaxDocValueSource_description(t_MaxDocValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(MaxDocValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_MaxDocValueSource_equals(t_MaxDocValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(MaxDocValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_MaxDocValueSource_getValues(t_MaxDocValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(MaxDocValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_MaxDocValueSource_hashCode(t_MaxDocValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(MaxDocValueSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_MaxDocValueSource_name(t_MaxDocValueSource *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.name());
              return j2p(result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/store/PythonLock.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace store {

        ::java::lang::Class *PythonLock::class$ = NULL;
        jmethodID *PythonLock::mids$ = NULL;
        bool PythonLock::live$ = false;

        jclass PythonLock::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/store/PythonLock");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_isLocked_54c6a16a] = env->getMethodID(cls, "isLocked", "()Z");
            mids$[mid_obtain_54c6a16a] = env->getMethodID(cls, "obtain", "()Z");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_release_54c6a166] = env->getMethodID(cls, "release", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonLock::PythonLock() : ::org::apache::lucene::store::Lock(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonLock::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonLock::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonLock::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace store {
        static PyObject *t_PythonLock_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonLock_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonLock_init_(t_PythonLock *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonLock_finalize(t_PythonLock *self);
        static PyObject *t_PythonLock_pythonExtension(t_PythonLock *self, PyObject *args);
        static void JNICALL t_PythonLock_close0(JNIEnv *jenv, jobject jobj);
        static jboolean JNICALL t_PythonLock_isLocked1(JNIEnv *jenv, jobject jobj);
        static jboolean JNICALL t_PythonLock_obtain2(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonLock_pythonDecRef3(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonLock_release4(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonLock_get__self(t_PythonLock *self, void *data);
        static PyGetSetDef t_PythonLock__fields_[] = {
          DECLARE_GET_FIELD(t_PythonLock, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonLock__methods_[] = {
          DECLARE_METHOD(t_PythonLock, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonLock, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonLock, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonLock, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonLock, t_PythonLock, ::org::apache::lucene::store::Lock, PythonLock, t_PythonLock_init_, 0, 0, t_PythonLock__fields_, 0, 0);

        void t_PythonLock::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonLock), module, "PythonLock", 1);
        }

        void t_PythonLock::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonLock).tp_dict, "class_", make_descriptor(PythonLock::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonLock).tp_dict, "wrapfn_", make_descriptor(t_PythonLock::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonLock).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonLock::initializeClass);
          JNINativeMethod methods[] = {
            { "close", "()V", (void *) t_PythonLock_close0 },
            { "isLocked", "()Z", (void *) t_PythonLock_isLocked1 },
            { "obtain", "()Z", (void *) t_PythonLock_obtain2 },
            { "pythonDecRef", "()V", (void *) t_PythonLock_pythonDecRef3 },
            { "release", "()V", (void *) t_PythonLock_release4 },
          };
          env->registerNatives(cls, methods, 5);
        }

        static PyObject *t_PythonLock_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonLock::initializeClass, 1)))
            return NULL;
          return t_PythonLock::wrap_Object(PythonLock(((t_PythonLock *) arg)->object.this$));
        }
        static PyObject *t_PythonLock_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonLock::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonLock_init_(t_PythonLock *self, PyObject *args, PyObject *kwds)
        {
          PythonLock object((jobject) NULL);

          INT_CALL(object = PythonLock());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonLock_finalize(t_PythonLock *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonLock_pythonExtension(t_PythonLock *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static void JNICALL t_PythonLock_close0(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonLock::mids$[PythonLock::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "close", "");
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jboolean JNICALL t_PythonLock_isLocked1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonLock::mids$[PythonLock::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *result = PyObject_CallMethod(obj, "isLocked", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("isLocked", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jboolean JNICALL t_PythonLock_obtain2(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonLock::mids$[PythonLock::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *result = PyObject_CallMethod(obj, "obtain", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("obtain", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static void JNICALL t_PythonLock_pythonDecRef3(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonLock::mids$[PythonLock::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonLock::mids$[PythonLock::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static void JNICALL t_PythonLock_release4(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonLock::mids$[PythonLock::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "release", "");
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static PyObject *t_PythonLock_get__self(t_PythonLock *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FilterAtomicReader$FilterFields.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/Terms.h"
#include "java/lang/String.h"
#include "java/util/Iterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FilterAtomicReader$FilterFields::class$ = NULL;
        jmethodID *FilterAtomicReader$FilterFields::mids$ = NULL;
        bool FilterAtomicReader$FilterFields::live$ = false;

        jclass FilterAtomicReader$FilterFields::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FilterAtomicReader$FilterFields");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a2a6a1f4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Fields;)V");
            mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
            mids$[mid_terms_ee262ab4] = env->getMethodID(cls, "terms", "(Ljava/lang/String;)Lorg/apache/lucene/index/Terms;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterAtomicReader$FilterFields::FilterAtomicReader$FilterFields(const ::org::apache::lucene::index::Fields & a0) : ::org::apache::lucene::index::Fields(env->newObject(initializeClass, &mids$, mid_init$_a2a6a1f4, a0.this$)) {}

        ::java::util::Iterator FilterAtomicReader$FilterFields::iterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
        }

        jint FilterAtomicReader$FilterFields::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
        }

        ::org::apache::lucene::index::Terms FilterAtomicReader$FilterFields::terms(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::Terms(env->callObjectMethod(this$, mids$[mid_terms_ee262ab4], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FilterAtomicReader$FilterFields_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterAtomicReader$FilterFields_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilterAtomicReader$FilterFields_init_(t_FilterAtomicReader$FilterFields *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterAtomicReader$FilterFields_iterator(t_FilterAtomicReader$FilterFields *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterFields_size(t_FilterAtomicReader$FilterFields *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterFields_terms(t_FilterAtomicReader$FilterFields *self, PyObject *args);

        static PyMethodDef t_FilterAtomicReader$FilterFields__methods_[] = {
          DECLARE_METHOD(t_FilterAtomicReader$FilterFields, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterFields, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterFields, iterator, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterFields, size, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterFields, terms, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilterAtomicReader$FilterFields, t_FilterAtomicReader$FilterFields, ::org::apache::lucene::index::Fields, FilterAtomicReader$FilterFields, t_FilterAtomicReader$FilterFields_init_, ((PyObject *(*)(t_FilterAtomicReader$FilterFields *)) get_iterator< t_FilterAtomicReader$FilterFields >), 0, 0, 0, 0);

        void t_FilterAtomicReader$FilterFields::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterAtomicReader$FilterFields), module, "FilterAtomicReader$FilterFields", 0);
        }

        void t_FilterAtomicReader$FilterFields::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterFields).tp_dict, "class_", make_descriptor(FilterAtomicReader$FilterFields::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterFields).tp_dict, "wrapfn_", make_descriptor(t_FilterAtomicReader$FilterFields::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterFields).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterAtomicReader$FilterFields_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterAtomicReader$FilterFields::initializeClass, 1)))
            return NULL;
          return t_FilterAtomicReader$FilterFields::wrap_Object(FilterAtomicReader$FilterFields(((t_FilterAtomicReader$FilterFields *) arg)->object.this$));
        }
        static PyObject *t_FilterAtomicReader$FilterFields_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterAtomicReader$FilterFields::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilterAtomicReader$FilterFields_init_(t_FilterAtomicReader$FilterFields *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::Fields a0((jobject) NULL);
          FilterAtomicReader$FilterFields object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::Fields::initializeClass, &a0))
          {
            INT_CALL(object = FilterAtomicReader$FilterFields(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilterAtomicReader$FilterFields_iterator(t_FilterAtomicReader$FilterFields *self, PyObject *args)
        {
          ::java::util::Iterator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.iterator());
            return ::java::util::t_Iterator::wrap_Object(result, &::java::lang::PY_TYPE(String));
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterFields), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterFields_size(t_FilterAtomicReader$FilterFields *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.size());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterFields), (PyObject *) self, "size", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterFields_terms(t_FilterAtomicReader$FilterFields *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::Terms result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.terms(a0));
            return ::org::apache::lucene::index::t_Terms::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterFields), (PyObject *) self, "terms", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Sort.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace term {

            ::java::lang::Class *TermAllGroupHeadsCollector::class$ = NULL;
            jmethodID *TermAllGroupHeadsCollector::mids$ = NULL;
            bool TermAllGroupHeadsCollector::live$ = false;

            jclass TermAllGroupHeadsCollector::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector");

                mids$ = new jmethodID[max_mid];
                mids$[mid_create_3e5305de] = env->getStaticMethodID(cls, "create", "(Ljava/lang/String;Lorg/apache/lucene/search/Sort;)Lorg/apache/lucene/search/grouping/AbstractAllGroupHeadsCollector;");
                mids$[mid_create_cf6bc864] = env->getStaticMethodID(cls, "create", "(Ljava/lang/String;Lorg/apache/lucene/search/Sort;I)Lorg/apache/lucene/search/grouping/AbstractAllGroupHeadsCollector;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ::org::apache::lucene::search::grouping::AbstractAllGroupHeadsCollector TermAllGroupHeadsCollector::create(const ::java::lang::String & a0, const ::org::apache::lucene::search::Sort & a1)
            {
              jclass cls = env->getClass(initializeClass);
              return ::org::apache::lucene::search::grouping::AbstractAllGroupHeadsCollector(env->callStaticObjectMethod(cls, mids$[mid_create_3e5305de], a0.this$, a1.this$));
            }

            ::org::apache::lucene::search::grouping::AbstractAllGroupHeadsCollector TermAllGroupHeadsCollector::create(const ::java::lang::String & a0, const ::org::apache::lucene::search::Sort & a1, jint a2)
            {
              jclass cls = env->getClass(initializeClass);
              return ::org::apache::lucene::search::grouping::AbstractAllGroupHeadsCollector(env->callStaticObjectMethod(cls, mids$[mid_create_cf6bc864], a0.this$, a1.this$, a2));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace term {
            static PyObject *t_TermAllGroupHeadsCollector_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermAllGroupHeadsCollector_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermAllGroupHeadsCollector_of_(t_TermAllGroupHeadsCollector *self, PyObject *args);
            static PyObject *t_TermAllGroupHeadsCollector_create(PyTypeObject *type, PyObject *args);
            static PyObject *t_TermAllGroupHeadsCollector_get__parameters_(t_TermAllGroupHeadsCollector *self, void *data);
            static PyGetSetDef t_TermAllGroupHeadsCollector__fields_[] = {
              DECLARE_GET_FIELD(t_TermAllGroupHeadsCollector, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_TermAllGroupHeadsCollector__methods_[] = {
              DECLARE_METHOD(t_TermAllGroupHeadsCollector, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermAllGroupHeadsCollector, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermAllGroupHeadsCollector, of_, METH_VARARGS),
              DECLARE_METHOD(t_TermAllGroupHeadsCollector, create, METH_VARARGS | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TermAllGroupHeadsCollector, t_TermAllGroupHeadsCollector, ::org::apache::lucene::search::grouping::AbstractAllGroupHeadsCollector, TermAllGroupHeadsCollector, abstract_init, 0, 0, t_TermAllGroupHeadsCollector__fields_, 0, 0);
            PyObject *t_TermAllGroupHeadsCollector::wrap_Object(const TermAllGroupHeadsCollector& object, PyTypeObject *p0)
            {
              PyObject *obj = t_TermAllGroupHeadsCollector::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_TermAllGroupHeadsCollector *self = (t_TermAllGroupHeadsCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_TermAllGroupHeadsCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_TermAllGroupHeadsCollector::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_TermAllGroupHeadsCollector *self = (t_TermAllGroupHeadsCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_TermAllGroupHeadsCollector::install(PyObject *module)
            {
              installType(&PY_TYPE(TermAllGroupHeadsCollector), module, "TermAllGroupHeadsCollector", 0);
            }

            void t_TermAllGroupHeadsCollector::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TermAllGroupHeadsCollector).tp_dict, "class_", make_descriptor(TermAllGroupHeadsCollector::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TermAllGroupHeadsCollector).tp_dict, "wrapfn_", make_descriptor(t_TermAllGroupHeadsCollector::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TermAllGroupHeadsCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TermAllGroupHeadsCollector_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TermAllGroupHeadsCollector::initializeClass, 1)))
                return NULL;
              return t_TermAllGroupHeadsCollector::wrap_Object(TermAllGroupHeadsCollector(((t_TermAllGroupHeadsCollector *) arg)->object.this$));
            }
            static PyObject *t_TermAllGroupHeadsCollector_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TermAllGroupHeadsCollector::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_TermAllGroupHeadsCollector_of_(t_TermAllGroupHeadsCollector *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static PyObject *t_TermAllGroupHeadsCollector_create(PyTypeObject *type, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::org::apache::lucene::search::Sort a1((jobject) NULL);
                  ::org::apache::lucene::search::grouping::AbstractAllGroupHeadsCollector result((jobject) NULL);

                  if (!parseArgs(args, "sk", ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::search::grouping::term::TermAllGroupHeadsCollector::create(a0, a1));
                    return ::org::apache::lucene::search::grouping::t_AbstractAllGroupHeadsCollector::wrap_Object(result);
                  }
                }
                break;
               case 3:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::org::apache::lucene::search::Sort a1((jobject) NULL);
                  jint a2;
                  ::org::apache::lucene::search::grouping::AbstractAllGroupHeadsCollector result((jobject) NULL);

                  if (!parseArgs(args, "skI", ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::search::grouping::term::TermAllGroupHeadsCollector::create(a0, a1, a2));
                    return ::org::apache::lucene::search::grouping::t_AbstractAllGroupHeadsCollector::wrap_Object(result);
                  }
                }
              }

              PyErr_SetArgsError(type, "create", args);
              return NULL;
            }
            static PyObject *t_TermAllGroupHeadsCollector_get__parameters_(t_TermAllGroupHeadsCollector *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/IntBlockPool$SliceReader.h"
#include "org/apache/lucene/util/IntBlockPool.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *IntBlockPool$SliceReader::class$ = NULL;
        jmethodID *IntBlockPool$SliceReader::mids$ = NULL;
        bool IntBlockPool$SliceReader::live$ = false;

        jclass IntBlockPool$SliceReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/IntBlockPool$SliceReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_67e0ad2c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/IntBlockPool;)V");
            mids$[mid_endOfSlice_54c6a16a] = env->getMethodID(cls, "endOfSlice", "()Z");
            mids$[mid_readInt_54c6a179] = env->getMethodID(cls, "readInt", "()I");
            mids$[mid_reset_d8d154a6] = env->getMethodID(cls, "reset", "(II)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IntBlockPool$SliceReader::IntBlockPool$SliceReader(const ::org::apache::lucene::util::IntBlockPool & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_67e0ad2c, a0.this$)) {}

        jboolean IntBlockPool$SliceReader::endOfSlice() const
        {
          return env->callBooleanMethod(this$, mids$[mid_endOfSlice_54c6a16a]);
        }

        jint IntBlockPool$SliceReader::readInt() const
        {
          return env->callIntMethod(this$, mids$[mid_readInt_54c6a179]);
        }

        void IntBlockPool$SliceReader::reset(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_reset_d8d154a6], a0, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_IntBlockPool$SliceReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IntBlockPool$SliceReader_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IntBlockPool$SliceReader_init_(t_IntBlockPool$SliceReader *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IntBlockPool$SliceReader_endOfSlice(t_IntBlockPool$SliceReader *self);
        static PyObject *t_IntBlockPool$SliceReader_readInt(t_IntBlockPool$SliceReader *self);
        static PyObject *t_IntBlockPool$SliceReader_reset(t_IntBlockPool$SliceReader *self, PyObject *args);

        static PyMethodDef t_IntBlockPool$SliceReader__methods_[] = {
          DECLARE_METHOD(t_IntBlockPool$SliceReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntBlockPool$SliceReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntBlockPool$SliceReader, endOfSlice, METH_NOARGS),
          DECLARE_METHOD(t_IntBlockPool$SliceReader, readInt, METH_NOARGS),
          DECLARE_METHOD(t_IntBlockPool$SliceReader, reset, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IntBlockPool$SliceReader, t_IntBlockPool$SliceReader, ::java::lang::Object, IntBlockPool$SliceReader, t_IntBlockPool$SliceReader_init_, 0, 0, 0, 0, 0);

        void t_IntBlockPool$SliceReader::install(PyObject *module)
        {
          installType(&PY_TYPE(IntBlockPool$SliceReader), module, "IntBlockPool$SliceReader", 0);
        }

        void t_IntBlockPool$SliceReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IntBlockPool$SliceReader).tp_dict, "class_", make_descriptor(IntBlockPool$SliceReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IntBlockPool$SliceReader).tp_dict, "wrapfn_", make_descriptor(t_IntBlockPool$SliceReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IntBlockPool$SliceReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IntBlockPool$SliceReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IntBlockPool$SliceReader::initializeClass, 1)))
            return NULL;
          return t_IntBlockPool$SliceReader::wrap_Object(IntBlockPool$SliceReader(((t_IntBlockPool$SliceReader *) arg)->object.this$));
        }
        static PyObject *t_IntBlockPool$SliceReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IntBlockPool$SliceReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IntBlockPool$SliceReader_init_(t_IntBlockPool$SliceReader *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::IntBlockPool a0((jobject) NULL);
          IntBlockPool$SliceReader object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::IntBlockPool::initializeClass, &a0))
          {
            INT_CALL(object = IntBlockPool$SliceReader(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IntBlockPool$SliceReader_endOfSlice(t_IntBlockPool$SliceReader *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.endOfSlice());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IntBlockPool$SliceReader_readInt(t_IntBlockPool$SliceReader *self)
        {
          jint result;
          OBJ_CALL(result = self->object.readInt());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_IntBlockPool$SliceReader_reset(t_IntBlockPool$SliceReader *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.reset(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "reset", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/payloads/PayloadFunction.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {

          ::java::lang::Class *PayloadFunction::class$ = NULL;
          jmethodID *PayloadFunction::mids$ = NULL;
          bool PayloadFunction::live$ = false;

          jclass PayloadFunction::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/payloads/PayloadFunction");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_currentScore_9fe8c3f6] = env->getMethodID(cls, "currentScore", "(ILjava/lang/String;IIIFF)F");
              mids$[mid_docScore_08788a8d] = env->getMethodID(cls, "docScore", "(ILjava/lang/String;IF)F");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_explain_33812a26] = env->getMethodID(cls, "explain", "(ILjava/lang/String;IF)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PayloadFunction::PayloadFunction() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat PayloadFunction::currentScore(jint a0, const ::java::lang::String & a1, jint a2, jint a3, jint a4, jfloat a5, jfloat a6) const
          {
            return env->callFloatMethod(this$, mids$[mid_currentScore_9fe8c3f6], a0, a1.this$, a2, a3, a4, a5, a6);
          }

          jfloat PayloadFunction::docScore(jint a0, const ::java::lang::String & a1, jint a2, jfloat a3) const
          {
            return env->callFloatMethod(this$, mids$[mid_docScore_08788a8d], a0, a1.this$, a2, a3);
          }

          jboolean PayloadFunction::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          ::org::apache::lucene::search::Explanation PayloadFunction::explain(jint a0, const ::java::lang::String & a1, jint a2, jfloat a3) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_33812a26], a0, a1.this$, a2, a3));
          }

          jint PayloadFunction::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {
          static PyObject *t_PayloadFunction_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadFunction_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PayloadFunction_init_(t_PayloadFunction *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PayloadFunction_currentScore(t_PayloadFunction *self, PyObject *args);
          static PyObject *t_PayloadFunction_docScore(t_PayloadFunction *self, PyObject *args);
          static PyObject *t_PayloadFunction_equals(t_PayloadFunction *self, PyObject *args);
          static PyObject *t_PayloadFunction_explain(t_PayloadFunction *self, PyObject *args);
          static PyObject *t_PayloadFunction_hashCode(t_PayloadFunction *self, PyObject *args);

          static PyMethodDef t_PayloadFunction__methods_[] = {
            DECLARE_METHOD(t_PayloadFunction, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadFunction, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadFunction, currentScore, METH_VARARGS),
            DECLARE_METHOD(t_PayloadFunction, docScore, METH_VARARGS),
            DECLARE_METHOD(t_PayloadFunction, equals, METH_VARARGS),
            DECLARE_METHOD(t_PayloadFunction, explain, METH_VARARGS),
            DECLARE_METHOD(t_PayloadFunction, hashCode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PayloadFunction, t_PayloadFunction, ::java::lang::Object, PayloadFunction, t_PayloadFunction_init_, 0, 0, 0, 0, 0);

          void t_PayloadFunction::install(PyObject *module)
          {
            installType(&PY_TYPE(PayloadFunction), module, "PayloadFunction", 0);
          }

          void t_PayloadFunction::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PayloadFunction).tp_dict, "class_", make_descriptor(PayloadFunction::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PayloadFunction).tp_dict, "wrapfn_", make_descriptor(t_PayloadFunction::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PayloadFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PayloadFunction_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PayloadFunction::initializeClass, 1)))
              return NULL;
            return t_PayloadFunction::wrap_Object(PayloadFunction(((t_PayloadFunction *) arg)->object.this$));
          }
          static PyObject *t_PayloadFunction_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PayloadFunction::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PayloadFunction_init_(t_PayloadFunction *self, PyObject *args, PyObject *kwds)
          {
            PayloadFunction object((jobject) NULL);

            INT_CALL(object = PayloadFunction());
            self->object = object;

            return 0;
          }

          static PyObject *t_PayloadFunction_currentScore(t_PayloadFunction *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            jint a3;
            jint a4;
            jfloat a5;
            jfloat a6;
            jfloat result;

            if (!parseArgs(args, "IsIIIFF", &a0, &a1, &a2, &a3, &a4, &a5, &a6))
            {
              OBJ_CALL(result = self->object.currentScore(a0, a1, a2, a3, a4, a5, a6));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "currentScore", args);
            return NULL;
          }

          static PyObject *t_PayloadFunction_docScore(t_PayloadFunction *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            jfloat a3;
            jfloat result;

            if (!parseArgs(args, "IsIF", &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.docScore(a0, a1, a2, a3));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "docScore", args);
            return NULL;
          }

          static PyObject *t_PayloadFunction_equals(t_PayloadFunction *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PayloadFunction), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_PayloadFunction_explain(t_PayloadFunction *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            jint a2;
            jfloat a3;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "IsIF", &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.explain(a0, a1, a2, a3));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "explain", args);
            return NULL;
          }

          static PyObject *t_PayloadFunction_hashCode(t_PayloadFunction *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(PayloadFunction), (PyObject *) self, "hashCode", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/simple/SimpleQueryParser.h"
#include "org/apache/lucene/search/Query.h"
#include "java/util/Map.h"
#include "java/lang/Float.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/search/BooleanClause$Occur.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace simple {

          ::java::lang::Class *SimpleQueryParser::class$ = NULL;
          jmethodID *SimpleQueryParser::mids$ = NULL;
          bool SimpleQueryParser::live$ = false;
          jint SimpleQueryParser::AND_OPERATOR = (jint) 0;
          jint SimpleQueryParser::ESCAPE_OPERATOR = (jint) 0;
          jint SimpleQueryParser::FUZZY_OPERATOR = (jint) 0;
          jint SimpleQueryParser::NEAR_OPERATOR = (jint) 0;
          jint SimpleQueryParser::NOT_OPERATOR = (jint) 0;
          jint SimpleQueryParser::OR_OPERATOR = (jint) 0;
          jint SimpleQueryParser::PHRASE_OPERATOR = (jint) 0;
          jint SimpleQueryParser::PRECEDENCE_OPERATORS = (jint) 0;
          jint SimpleQueryParser::PREFIX_OPERATOR = (jint) 0;
          jint SimpleQueryParser::WHITESPACE_OPERATOR = (jint) 0;

          jclass SimpleQueryParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/simple/SimpleQueryParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_b5f2d646] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/util/Map;)V");
              mids$[mid_init$_55ca1e02] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/lang/String;)V");
              mids$[mid_init$_284c8124] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/util/Map;I)V");
              mids$[mid_getDefaultOperator_157730ed] = env->getMethodID(cls, "getDefaultOperator", "()Lorg/apache/lucene/search/BooleanClause$Occur;");
              mids$[mid_parse_fbed2634] = env->getMethodID(cls, "parse", "(Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_setDefaultOperator_23bdc104] = env->getMethodID(cls, "setDefaultOperator", "(Lorg/apache/lucene/search/BooleanClause$Occur;)V");
              mids$[mid_newPrefixQuery_fbed2634] = env->getMethodID(cls, "newPrefixQuery", "(Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_newFuzzyQuery_936f6c82] = env->getMethodID(cls, "newFuzzyQuery", "(Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
              mids$[mid_newPhraseQuery_936f6c82] = env->getMethodID(cls, "newPhraseQuery", "(Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
              mids$[mid_simplify_1ffd0b56] = env->getMethodID(cls, "simplify", "(Lorg/apache/lucene/search/BooleanQuery;)Lorg/apache/lucene/search/Query;");
              mids$[mid_newDefaultQuery_fbed2634] = env->getMethodID(cls, "newDefaultQuery", "(Ljava/lang/String;)Lorg/apache/lucene/search/Query;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              AND_OPERATOR = env->getStaticIntField(cls, "AND_OPERATOR");
              ESCAPE_OPERATOR = env->getStaticIntField(cls, "ESCAPE_OPERATOR");
              FUZZY_OPERATOR = env->getStaticIntField(cls, "FUZZY_OPERATOR");
              NEAR_OPERATOR = env->getStaticIntField(cls, "NEAR_OPERATOR");
              NOT_OPERATOR = env->getStaticIntField(cls, "NOT_OPERATOR");
              OR_OPERATOR = env->getStaticIntField(cls, "OR_OPERATOR");
              PHRASE_OPERATOR = env->getStaticIntField(cls, "PHRASE_OPERATOR");
              PRECEDENCE_OPERATORS = env->getStaticIntField(cls, "PRECEDENCE_OPERATORS");
              PREFIX_OPERATOR = env->getStaticIntField(cls, "PREFIX_OPERATOR");
              WHITESPACE_OPERATOR = env->getStaticIntField(cls, "WHITESPACE_OPERATOR");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleQueryParser::SimpleQueryParser(const ::org::apache::lucene::analysis::Analyzer & a0, const ::java::util::Map & a1) : ::org::apache::lucene::util::QueryBuilder(env->newObject(initializeClass, &mids$, mid_init$_b5f2d646, a0.this$, a1.this$)) {}

          SimpleQueryParser::SimpleQueryParser(const ::org::apache::lucene::analysis::Analyzer & a0, const ::java::lang::String & a1) : ::org::apache::lucene::util::QueryBuilder(env->newObject(initializeClass, &mids$, mid_init$_55ca1e02, a0.this$, a1.this$)) {}

          SimpleQueryParser::SimpleQueryParser(const ::org::apache::lucene::analysis::Analyzer & a0, const ::java::util::Map & a1, jint a2) : ::org::apache::lucene::util::QueryBuilder(env->newObject(initializeClass, &mids$, mid_init$_284c8124, a0.this$, a1.this$, a2)) {}

          ::org::apache::lucene::search::BooleanClause$Occur SimpleQueryParser::getDefaultOperator() const
          {
            return ::org::apache::lucene::search::BooleanClause$Occur(env->callObjectMethod(this$, mids$[mid_getDefaultOperator_157730ed]));
          }

          ::org::apache::lucene::search::Query SimpleQueryParser::parse(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_parse_fbed2634], a0.this$));
          }

          void SimpleQueryParser::setDefaultOperator(const ::org::apache::lucene::search::BooleanClause$Occur & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setDefaultOperator_23bdc104], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace simple {
          static PyObject *t_SimpleQueryParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleQueryParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleQueryParser_init_(t_SimpleQueryParser *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleQueryParser_getDefaultOperator(t_SimpleQueryParser *self);
          static PyObject *t_SimpleQueryParser_parse(t_SimpleQueryParser *self, PyObject *arg);
          static PyObject *t_SimpleQueryParser_setDefaultOperator(t_SimpleQueryParser *self, PyObject *arg);
          static PyObject *t_SimpleQueryParser_get__defaultOperator(t_SimpleQueryParser *self, void *data);
          static int t_SimpleQueryParser_set__defaultOperator(t_SimpleQueryParser *self, PyObject *arg, void *data);
          static PyGetSetDef t_SimpleQueryParser__fields_[] = {
            DECLARE_GETSET_FIELD(t_SimpleQueryParser, defaultOperator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SimpleQueryParser__methods_[] = {
            DECLARE_METHOD(t_SimpleQueryParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleQueryParser, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleQueryParser, getDefaultOperator, METH_NOARGS),
            DECLARE_METHOD(t_SimpleQueryParser, parse, METH_O),
            DECLARE_METHOD(t_SimpleQueryParser, setDefaultOperator, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SimpleQueryParser, t_SimpleQueryParser, ::org::apache::lucene::util::QueryBuilder, SimpleQueryParser, t_SimpleQueryParser_init_, 0, 0, t_SimpleQueryParser__fields_, 0, 0);

          void t_SimpleQueryParser::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleQueryParser), module, "SimpleQueryParser", 0);
          }

          void t_SimpleQueryParser::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SimpleQueryParser).tp_dict, "class_", make_descriptor(SimpleQueryParser::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SimpleQueryParser).tp_dict, "wrapfn_", make_descriptor(t_SimpleQueryParser::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SimpleQueryParser).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SimpleQueryParser::initializeClass);
            PyDict_SetItemString(PY_TYPE(SimpleQueryParser).tp_dict, "AND_OPERATOR", make_descriptor(SimpleQueryParser::AND_OPERATOR));
            PyDict_SetItemString(PY_TYPE(SimpleQueryParser).tp_dict, "ESCAPE_OPERATOR", make_descriptor(SimpleQueryParser::ESCAPE_OPERATOR));
            PyDict_SetItemString(PY_TYPE(SimpleQueryParser).tp_dict, "FUZZY_OPERATOR", make_descriptor(SimpleQueryParser::FUZZY_OPERATOR));
            PyDict_SetItemString(PY_TYPE(SimpleQueryParser).tp_dict, "NEAR_OPERATOR", make_descriptor(SimpleQueryParser::NEAR_OPERATOR));
            PyDict_SetItemString(PY_TYPE(SimpleQueryParser).tp_dict, "NOT_OPERATOR", make_descriptor(SimpleQueryParser::NOT_OPERATOR));
            PyDict_SetItemString(PY_TYPE(SimpleQueryParser).tp_dict, "OR_OPERATOR", make_descriptor(SimpleQueryParser::OR_OPERATOR));
            PyDict_SetItemString(PY_TYPE(SimpleQueryParser).tp_dict, "PHRASE_OPERATOR", make_descriptor(SimpleQueryParser::PHRASE_OPERATOR));
            PyDict_SetItemString(PY_TYPE(SimpleQueryParser).tp_dict, "PRECEDENCE_OPERATORS", make_descriptor(SimpleQueryParser::PRECEDENCE_OPERATORS));
            PyDict_SetItemString(PY_TYPE(SimpleQueryParser).tp_dict, "PREFIX_OPERATOR", make_descriptor(SimpleQueryParser::PREFIX_OPERATOR));
            PyDict_SetItemString(PY_TYPE(SimpleQueryParser).tp_dict, "WHITESPACE_OPERATOR", make_descriptor(SimpleQueryParser::WHITESPACE_OPERATOR));
          }

          static PyObject *t_SimpleQueryParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleQueryParser::initializeClass, 1)))
              return NULL;
            return t_SimpleQueryParser::wrap_Object(SimpleQueryParser(((t_SimpleQueryParser *) arg)->object.this$));
          }
          static PyObject *t_SimpleQueryParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleQueryParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleQueryParser_init_(t_SimpleQueryParser *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                ::java::util::Map a1((jobject) NULL);
                PyTypeObject **p1;
                SimpleQueryParser object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_))
                {
                  INT_CALL(object = SimpleQueryParser(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                SimpleQueryParser object((jobject) NULL);

                if (!parseArgs(args, "ks", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = SimpleQueryParser(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                ::java::util::Map a1((jobject) NULL);
                PyTypeObject **p1;
                jint a2;
                SimpleQueryParser object((jobject) NULL);

                if (!parseArgs(args, "kKI", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_, &a2))
                {
                  INT_CALL(object = SimpleQueryParser(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SimpleQueryParser_getDefaultOperator(t_SimpleQueryParser *self)
          {
            ::org::apache::lucene::search::BooleanClause$Occur result((jobject) NULL);
            OBJ_CALL(result = self->object.getDefaultOperator());
            return ::org::apache::lucene::search::t_BooleanClause$Occur::wrap_Object(result);
          }

          static PyObject *t_SimpleQueryParser_parse(t_SimpleQueryParser *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.parse(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "parse", arg);
            return NULL;
          }

          static PyObject *t_SimpleQueryParser_setDefaultOperator(t_SimpleQueryParser *self, PyObject *arg)
          {
            ::org::apache::lucene::search::BooleanClause$Occur a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, &a0, &p0, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_))
            {
              OBJ_CALL(self->object.setDefaultOperator(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setDefaultOperator", arg);
            return NULL;
          }

          static PyObject *t_SimpleQueryParser_get__defaultOperator(t_SimpleQueryParser *self, void *data)
          {
            ::org::apache::lucene::search::BooleanClause$Occur value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultOperator());
            return ::org::apache::lucene::search::t_BooleanClause$Occur::wrap_Object(value);
          }
          static int t_SimpleQueryParser_set__defaultOperator(t_SimpleQueryParser *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::BooleanClause$Occur value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, &value))
              {
                INT_CALL(self->object.setDefaultOperator(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "defaultOperator", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/OffsetAttributeImpl.h"
#include "org/apache/lucene/analysis/tokenattributes/OffsetAttribute.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *OffsetAttributeImpl::class$ = NULL;
          jmethodID *OffsetAttributeImpl::mids$ = NULL;
          bool OffsetAttributeImpl::live$ = false;

          jclass OffsetAttributeImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/OffsetAttributeImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
              mids$[mid_endOffset_54c6a179] = env->getMethodID(cls, "endOffset", "()I");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_setOffset_d8d154a6] = env->getMethodID(cls, "setOffset", "(II)V");
              mids$[mid_startOffset_54c6a179] = env->getMethodID(cls, "startOffset", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          OffsetAttributeImpl::OffsetAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void OffsetAttributeImpl::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          void OffsetAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
          }

          jint OffsetAttributeImpl::endOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_endOffset_54c6a179]);
          }

          jboolean OffsetAttributeImpl::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint OffsetAttributeImpl::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          void OffsetAttributeImpl::setOffset(jint a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_setOffset_d8d154a6], a0, a1);
          }

          jint OffsetAttributeImpl::startOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_startOffset_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_OffsetAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_OffsetAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_OffsetAttributeImpl_init_(t_OffsetAttributeImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_OffsetAttributeImpl_clear(t_OffsetAttributeImpl *self, PyObject *args);
          static PyObject *t_OffsetAttributeImpl_copyTo(t_OffsetAttributeImpl *self, PyObject *args);
          static PyObject *t_OffsetAttributeImpl_endOffset(t_OffsetAttributeImpl *self);
          static PyObject *t_OffsetAttributeImpl_equals(t_OffsetAttributeImpl *self, PyObject *args);
          static PyObject *t_OffsetAttributeImpl_hashCode(t_OffsetAttributeImpl *self, PyObject *args);
          static PyObject *t_OffsetAttributeImpl_setOffset(t_OffsetAttributeImpl *self, PyObject *args);
          static PyObject *t_OffsetAttributeImpl_startOffset(t_OffsetAttributeImpl *self);

          static PyMethodDef t_OffsetAttributeImpl__methods_[] = {
            DECLARE_METHOD(t_OffsetAttributeImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OffsetAttributeImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OffsetAttributeImpl, clear, METH_VARARGS),
            DECLARE_METHOD(t_OffsetAttributeImpl, copyTo, METH_VARARGS),
            DECLARE_METHOD(t_OffsetAttributeImpl, endOffset, METH_NOARGS),
            DECLARE_METHOD(t_OffsetAttributeImpl, equals, METH_VARARGS),
            DECLARE_METHOD(t_OffsetAttributeImpl, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_OffsetAttributeImpl, setOffset, METH_VARARGS),
            DECLARE_METHOD(t_OffsetAttributeImpl, startOffset, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(OffsetAttributeImpl, t_OffsetAttributeImpl, ::org::apache::lucene::util::AttributeImpl, OffsetAttributeImpl, t_OffsetAttributeImpl_init_, 0, 0, 0, 0, 0);

          void t_OffsetAttributeImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(OffsetAttributeImpl), module, "OffsetAttributeImpl", 0);
          }

          void t_OffsetAttributeImpl::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(OffsetAttributeImpl).tp_dict, "class_", make_descriptor(OffsetAttributeImpl::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(OffsetAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_OffsetAttributeImpl::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(OffsetAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_OffsetAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, OffsetAttributeImpl::initializeClass, 1)))
              return NULL;
            return t_OffsetAttributeImpl::wrap_Object(OffsetAttributeImpl(((t_OffsetAttributeImpl *) arg)->object.this$));
          }
          static PyObject *t_OffsetAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, OffsetAttributeImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_OffsetAttributeImpl_init_(t_OffsetAttributeImpl *self, PyObject *args, PyObject *kwds)
          {
            OffsetAttributeImpl object((jobject) NULL);

            INT_CALL(object = OffsetAttributeImpl());
            self->object = object;

            return 0;
          }

          static PyObject *t_OffsetAttributeImpl_clear(t_OffsetAttributeImpl *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(OffsetAttributeImpl), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_OffsetAttributeImpl_copyTo(t_OffsetAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copyTo(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(OffsetAttributeImpl), (PyObject *) self, "copyTo", args, 2);
          }

          static PyObject *t_OffsetAttributeImpl_endOffset(t_OffsetAttributeImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.endOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_OffsetAttributeImpl_equals(t_OffsetAttributeImpl *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(OffsetAttributeImpl), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_OffsetAttributeImpl_hashCode(t_OffsetAttributeImpl *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(OffsetAttributeImpl), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_OffsetAttributeImpl_setOffset(t_OffsetAttributeImpl *self, PyObject *args)
          {
            jint a0;
            jint a1;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(self->object.setOffset(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setOffset", args);
            return NULL;
          }

          static PyObject *t_OffsetAttributeImpl_startOffset(t_OffsetAttributeImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.startOffset());
            return PyInt_FromLong((long) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/Util$Result.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *Util$Result::class$ = NULL;
          jmethodID *Util$Result::mids$ = NULL;
          jfieldID *Util$Result::fids$ = NULL;
          bool Util$Result::live$ = false;

          jclass Util$Result::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/Util$Result");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_52197430] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/IntsRef;Ljava/lang/Object;)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_input] = env->getFieldID(cls, "input", "Lorg/apache/lucene/util/IntsRef;");
              fids$[fid_output] = env->getFieldID(cls, "output", "Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Util$Result::Util$Result(const ::org::apache::lucene::util::IntsRef & a0, const ::java::lang::Object & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_52197430, a0.this$, a1.this$)) {}

          ::org::apache::lucene::util::IntsRef Util$Result::_get_input() const
          {
            return ::org::apache::lucene::util::IntsRef(env->getObjectField(this$, fids$[fid_input]));
          }

          ::java::lang::Object Util$Result::_get_output() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_output]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_Util$Result_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Util$Result_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Util$Result_of_(t_Util$Result *self, PyObject *args);
          static int t_Util$Result_init_(t_Util$Result *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Util$Result_get__input(t_Util$Result *self, void *data);
          static PyObject *t_Util$Result_get__output(t_Util$Result *self, void *data);

          static PyObject *t_Util$Result_get__parameters_(t_Util$Result *self, void *data);
          static PyGetSetDef t_Util$Result__fields_[] = {
            DECLARE_GET_FIELD(t_Util$Result, input),
            DECLARE_GET_FIELD(t_Util$Result, output),
            DECLARE_GET_FIELD(t_Util$Result, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Util$Result__methods_[] = {
            DECLARE_METHOD(t_Util$Result, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Util$Result, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Util$Result, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Util$Result, t_Util$Result, ::java::lang::Object, Util$Result, t_Util$Result_init_, 0, 0, t_Util$Result__fields_, 0, 0);
          PyObject *t_Util$Result::wrap_Object(const Util$Result& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Util$Result::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Util$Result *self = (t_Util$Result *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_Util$Result::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Util$Result::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Util$Result *self = (t_Util$Result *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_Util$Result::install(PyObject *module)
          {
            installType(&PY_TYPE(Util$Result), module, "Util$Result", 0);
          }

          void t_Util$Result::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Util$Result).tp_dict, "class_", make_descriptor(Util$Result::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Util$Result).tp_dict, "wrapfn_", make_descriptor(t_Util$Result::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Util$Result).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Util$Result_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Util$Result::initializeClass, 1)))
              return NULL;
            return t_Util$Result::wrap_Object(Util$Result(((t_Util$Result *) arg)->object.this$));
          }
          static PyObject *t_Util$Result_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Util$Result::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Util$Result_of_(t_Util$Result *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_Util$Result_init_(t_Util$Result *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            Util$Result object((jobject) NULL);

            if (!parseArgs(args, "ko", ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &a1))
            {
              INT_CALL(object = Util$Result(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
          static PyObject *t_Util$Result_get__parameters_(t_Util$Result *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_Util$Result_get__input(t_Util$Result *self, void *data)
          {
            ::org::apache::lucene::util::IntsRef value((jobject) NULL);
            OBJ_CALL(value = self->object._get_input());
            return ::org::apache::lucene::util::t_IntsRef::wrap_Object(value);
          }

          static PyObject *t_Util$Result_get__output(t_Util$Result *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_output());
            return ::java::lang::t_Object::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanNormalizationFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanNormalizationFilter::class$ = NULL;
          jmethodID *GermanNormalizationFilter::mids$ = NULL;
          bool GermanNormalizationFilter::live$ = false;

          jclass GermanNormalizationFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanNormalizationFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanNormalizationFilter::GermanNormalizationFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean GermanNormalizationFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanNormalizationFilter_init_(t_GermanNormalizationFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GermanNormalizationFilter_incrementToken(t_GermanNormalizationFilter *self, PyObject *args);

          static PyMethodDef t_GermanNormalizationFilter__methods_[] = {
            DECLARE_METHOD(t_GermanNormalizationFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanNormalizationFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanNormalizationFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GermanNormalizationFilter, t_GermanNormalizationFilter, ::org::apache::lucene::analysis::TokenFilter, GermanNormalizationFilter, t_GermanNormalizationFilter_init_, 0, 0, 0, 0, 0);

          void t_GermanNormalizationFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanNormalizationFilter), module, "GermanNormalizationFilter", 0);
          }

          void t_GermanNormalizationFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GermanNormalizationFilter).tp_dict, "class_", make_descriptor(GermanNormalizationFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GermanNormalizationFilter).tp_dict, "wrapfn_", make_descriptor(t_GermanNormalizationFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GermanNormalizationFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GermanNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanNormalizationFilter::initializeClass, 1)))
              return NULL;
            return t_GermanNormalizationFilter::wrap_Object(GermanNormalizationFilter(((t_GermanNormalizationFilter *) arg)->object.this$));
          }
          static PyObject *t_GermanNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanNormalizationFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanNormalizationFilter_init_(t_GermanNormalizationFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            GermanNormalizationFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = GermanNormalizationFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GermanNormalizationFilter_incrementToken(t_GermanNormalizationFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(GermanNormalizationFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/Field$Store.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *Field$Store::class$ = NULL;
        jmethodID *Field$Store::mids$ = NULL;
        bool Field$Store::live$ = false;
        Field$Store *Field$Store::NO = NULL;
        Field$Store *Field$Store::YES = NULL;

        jclass Field$Store::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/Field$Store");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_7fd4bea4] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/document/Field$Store;");
            mids$[mid_values_ca930bca] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/document/Field$Store;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            NO = new Field$Store(env->getStaticObjectField(cls, "NO", "Lorg/apache/lucene/document/Field$Store;"));
            YES = new Field$Store(env->getStaticObjectField(cls, "YES", "Lorg/apache/lucene/document/Field$Store;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Field$Store Field$Store::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return Field$Store(env->callStaticObjectMethod(cls, mids$[mid_valueOf_7fd4bea4], a0.this$));
        }

        JArray< Field$Store > Field$Store::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< Field$Store >(env->callStaticObjectMethod(cls, mids$[mid_values_ca930bca]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_Field$Store_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Field$Store_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Field$Store_of_(t_Field$Store *self, PyObject *args);
        static PyObject *t_Field$Store_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_Field$Store_values(PyTypeObject *type);
        static PyObject *t_Field$Store_get__parameters_(t_Field$Store *self, void *data);
        static PyGetSetDef t_Field$Store__fields_[] = {
          DECLARE_GET_FIELD(t_Field$Store, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Field$Store__methods_[] = {
          DECLARE_METHOD(t_Field$Store, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Field$Store, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Field$Store, of_, METH_VARARGS),
          DECLARE_METHOD(t_Field$Store, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_Field$Store, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Field$Store, t_Field$Store, ::java::lang::Enum, Field$Store, abstract_init, 0, 0, t_Field$Store__fields_, 0, 0);
        PyObject *t_Field$Store::wrap_Object(const Field$Store& object, PyTypeObject *p0)
        {
          PyObject *obj = t_Field$Store::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_Field$Store *self = (t_Field$Store *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_Field$Store::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_Field$Store::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_Field$Store *self = (t_Field$Store *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_Field$Store::install(PyObject *module)
        {
          installType(&PY_TYPE(Field$Store), module, "Field$Store", 0);
        }

        void t_Field$Store::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Field$Store).tp_dict, "class_", make_descriptor(Field$Store::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Field$Store).tp_dict, "wrapfn_", make_descriptor(t_Field$Store::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Field$Store).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(Field$Store::initializeClass);
          PyDict_SetItemString(PY_TYPE(Field$Store).tp_dict, "NO", make_descriptor(t_Field$Store::wrap_Object(*Field$Store::NO)));
          PyDict_SetItemString(PY_TYPE(Field$Store).tp_dict, "YES", make_descriptor(t_Field$Store::wrap_Object(*Field$Store::YES)));
        }

        static PyObject *t_Field$Store_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Field$Store::initializeClass, 1)))
            return NULL;
          return t_Field$Store::wrap_Object(Field$Store(((t_Field$Store *) arg)->object.this$));
        }
        static PyObject *t_Field$Store_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Field$Store::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Field$Store_of_(t_Field$Store *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_Field$Store_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          Field$Store result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::Field$Store::valueOf(a0));
            return t_Field$Store::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_Field$Store_values(PyTypeObject *type)
        {
          JArray< Field$Store > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::document::Field$Store::values());
          return JArray<jobject>(result.this$).wrap(t_Field$Store::wrap_jobject);
        }
        static PyObject *t_Field$Store_get__parameters_(t_Field$Store *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/IntAssociationFacetField.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *IntAssociationFacetField::class$ = NULL;
          jmethodID *IntAssociationFacetField::mids$ = NULL;
          bool IntAssociationFacetField::live$ = false;

          jclass IntAssociationFacetField::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/IntAssociationFacetField");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_6b7c0b54] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;[Ljava/lang/String;)V");
              mids$[mid_bytesRefToInt_7bc03ddb] = env->getStaticMethodID(cls, "bytesRefToInt", "(Lorg/apache/lucene/util/BytesRef;)I");
              mids$[mid_intToBytesRef_b57e9c3f] = env->getStaticMethodID(cls, "intToBytesRef", "(I)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IntAssociationFacetField::IntAssociationFacetField(jint a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2) : ::org::apache::lucene::facet::taxonomy::AssociationFacetField(env->newObject(initializeClass, &mids$, mid_init$_6b7c0b54, a0, a1.this$, a2.this$)) {}

          jint IntAssociationFacetField::bytesRefToInt(const ::org::apache::lucene::util::BytesRef & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_bytesRefToInt_7bc03ddb], a0.this$);
          }

          ::org::apache::lucene::util::BytesRef IntAssociationFacetField::intToBytesRef(jint a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::BytesRef(env->callStaticObjectMethod(cls, mids$[mid_intToBytesRef_b57e9c3f], a0));
          }

          ::java::lang::String IntAssociationFacetField::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_IntAssociationFacetField_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntAssociationFacetField_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IntAssociationFacetField_init_(t_IntAssociationFacetField *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IntAssociationFacetField_bytesRefToInt(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntAssociationFacetField_intToBytesRef(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntAssociationFacetField_toString(t_IntAssociationFacetField *self, PyObject *args);

          static PyMethodDef t_IntAssociationFacetField__methods_[] = {
            DECLARE_METHOD(t_IntAssociationFacetField, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntAssociationFacetField, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntAssociationFacetField, bytesRefToInt, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntAssociationFacetField, intToBytesRef, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntAssociationFacetField, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IntAssociationFacetField, t_IntAssociationFacetField, ::org::apache::lucene::facet::taxonomy::AssociationFacetField, IntAssociationFacetField, t_IntAssociationFacetField_init_, 0, 0, 0, 0, 0);

          void t_IntAssociationFacetField::install(PyObject *module)
          {
            installType(&PY_TYPE(IntAssociationFacetField), module, "IntAssociationFacetField", 0);
          }

          void t_IntAssociationFacetField::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IntAssociationFacetField).tp_dict, "class_", make_descriptor(IntAssociationFacetField::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IntAssociationFacetField).tp_dict, "wrapfn_", make_descriptor(t_IntAssociationFacetField::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IntAssociationFacetField).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IntAssociationFacetField_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IntAssociationFacetField::initializeClass, 1)))
              return NULL;
            return t_IntAssociationFacetField::wrap_Object(IntAssociationFacetField(((t_IntAssociationFacetField *) arg)->object.this$));
          }
          static PyObject *t_IntAssociationFacetField_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IntAssociationFacetField::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IntAssociationFacetField_init_(t_IntAssociationFacetField *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            JArray< ::java::lang::String > a2((jobject) NULL);
            IntAssociationFacetField object((jobject) NULL);

            if (!parseArgs(args, "Is[s", &a0, &a1, &a2))
            {
              INT_CALL(object = IntAssociationFacetField(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IntAssociationFacetField_bytesRefToInt(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::facet::taxonomy::IntAssociationFacetField::bytesRefToInt(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "bytesRefToInt", arg);
            return NULL;
          }

          static PyObject *t_IntAssociationFacetField_intToBytesRef(PyTypeObject *type, PyObject *arg)
          {
            jint a0;
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::facet::taxonomy::IntAssociationFacetField::intToBytesRef(a0));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "intToBytesRef", arg);
            return NULL;
          }

          static PyObject *t_IntAssociationFacetField_toString(t_IntAssociationFacetField *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(IntAssociationFacetField), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/RAMInputStream.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/RAMFile.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *RAMInputStream::class$ = NULL;
        jmethodID *RAMInputStream::mids$ = NULL;
        bool RAMInputStream::live$ = false;

        jclass RAMInputStream::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/RAMInputStream");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4d2db83b] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_getFilePointer_54c6a17a] = env->getMethodID(cls, "getFilePointer", "()J");
            mids$[mid_length_54c6a17a] = env->getMethodID(cls, "length", "()J");
            mids$[mid_readByte_54c6a172] = env->getMethodID(cls, "readByte", "()B");
            mids$[mid_readBytes_86f4435f] = env->getMethodID(cls, "readBytes", "([BII)V");
            mids$[mid_seek_0ee6df2f] = env->getMethodID(cls, "seek", "(J)V");
            mids$[mid_slice_d00c83eb] = env->getMethodID(cls, "slice", "(Ljava/lang/String;JJ)Lorg/apache/lucene/store/IndexInput;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RAMInputStream::RAMInputStream(const ::java::lang::String & a0, const ::org::apache::lucene::store::RAMFile & a1) : ::org::apache::lucene::store::IndexInput(env->newObject(initializeClass, &mids$, mid_init$_4d2db83b, a0.this$, a1.this$)) {}

        void RAMInputStream::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        jlong RAMInputStream::getFilePointer() const
        {
          return env->callLongMethod(this$, mids$[mid_getFilePointer_54c6a17a]);
        }

        jlong RAMInputStream::length() const
        {
          return env->callLongMethod(this$, mids$[mid_length_54c6a17a]);
        }

        jbyte RAMInputStream::readByte() const
        {
          return env->callByteMethod(this$, mids$[mid_readByte_54c6a172]);
        }

        void RAMInputStream::readBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_readBytes_86f4435f], a0.this$, a1, a2);
        }

        void RAMInputStream::seek(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_seek_0ee6df2f], a0);
        }

        ::org::apache::lucene::store::IndexInput RAMInputStream::slice(const ::java::lang::String & a0, jlong a1, jlong a2) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_slice_d00c83eb], a0.this$, a1, a2));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_RAMInputStream_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RAMInputStream_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RAMInputStream_init_(t_RAMInputStream *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RAMInputStream_close(t_RAMInputStream *self, PyObject *args);
        static PyObject *t_RAMInputStream_getFilePointer(t_RAMInputStream *self, PyObject *args);
        static PyObject *t_RAMInputStream_length(t_RAMInputStream *self, PyObject *args);
        static PyObject *t_RAMInputStream_readByte(t_RAMInputStream *self, PyObject *args);
        static PyObject *t_RAMInputStream_readBytes(t_RAMInputStream *self, PyObject *args);
        static PyObject *t_RAMInputStream_seek(t_RAMInputStream *self, PyObject *args);
        static PyObject *t_RAMInputStream_slice(t_RAMInputStream *self, PyObject *args);
        static PyObject *t_RAMInputStream_get__filePointer(t_RAMInputStream *self, void *data);
        static PyGetSetDef t_RAMInputStream__fields_[] = {
          DECLARE_GET_FIELD(t_RAMInputStream, filePointer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RAMInputStream__methods_[] = {
          DECLARE_METHOD(t_RAMInputStream, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RAMInputStream, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RAMInputStream, close, METH_VARARGS),
          DECLARE_METHOD(t_RAMInputStream, getFilePointer, METH_VARARGS),
          DECLARE_METHOD(t_RAMInputStream, length, METH_VARARGS),
          DECLARE_METHOD(t_RAMInputStream, readByte, METH_VARARGS),
          DECLARE_METHOD(t_RAMInputStream, readBytes, METH_VARARGS),
          DECLARE_METHOD(t_RAMInputStream, seek, METH_VARARGS),
          DECLARE_METHOD(t_RAMInputStream, slice, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RAMInputStream, t_RAMInputStream, ::org::apache::lucene::store::IndexInput, RAMInputStream, t_RAMInputStream_init_, 0, 0, t_RAMInputStream__fields_, 0, 0);

        void t_RAMInputStream::install(PyObject *module)
        {
          installType(&PY_TYPE(RAMInputStream), module, "RAMInputStream", 0);
        }

        void t_RAMInputStream::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RAMInputStream).tp_dict, "class_", make_descriptor(RAMInputStream::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RAMInputStream).tp_dict, "wrapfn_", make_descriptor(t_RAMInputStream::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RAMInputStream).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RAMInputStream_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RAMInputStream::initializeClass, 1)))
            return NULL;
          return t_RAMInputStream::wrap_Object(RAMInputStream(((t_RAMInputStream *) arg)->object.this$));
        }
        static PyObject *t_RAMInputStream_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RAMInputStream::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RAMInputStream_init_(t_RAMInputStream *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::RAMFile a1((jobject) NULL);
          RAMInputStream object((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::RAMFile::initializeClass, &a0, &a1))
          {
            INT_CALL(object = RAMInputStream(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_RAMInputStream_close(t_RAMInputStream *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(RAMInputStream), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_RAMInputStream_getFilePointer(t_RAMInputStream *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getFilePointer());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(RAMInputStream), (PyObject *) self, "getFilePointer", args, 2);
        }

        static PyObject *t_RAMInputStream_length(t_RAMInputStream *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.length());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(RAMInputStream), (PyObject *) self, "length", args, 2);
        }

        static PyObject *t_RAMInputStream_readByte(t_RAMInputStream *self, PyObject *args)
        {
          jbyte result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readByte());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(RAMInputStream), (PyObject *) self, "readByte", args, 2);
        }

        static PyObject *t_RAMInputStream_readBytes(t_RAMInputStream *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.readBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(RAMInputStream), (PyObject *) self, "readBytes", args, 2);
        }

        static PyObject *t_RAMInputStream_seek(t_RAMInputStream *self, PyObject *args)
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.seek(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(RAMInputStream), (PyObject *) self, "seek", args, 2);
        }

        static PyObject *t_RAMInputStream_slice(t_RAMInputStream *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong a1;
          jlong a2;
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sJJ", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.slice(a0, a1, a2));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(RAMInputStream), (PyObject *) self, "slice", args, 2);
        }

        static PyObject *t_RAMInputStream_get__filePointer(t_RAMInputStream *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getFilePointer());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanLightStemFilterFactory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanLightStemFilterFactory::class$ = NULL;
          jmethodID *GermanLightStemFilterFactory::mids$ = NULL;
          bool GermanLightStemFilterFactory::live$ = false;

          jclass GermanLightStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanLightStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanLightStemFilterFactory::GermanLightStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream GermanLightStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanLightStemFilterFactory_init_(t_GermanLightStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GermanLightStemFilterFactory_create(t_GermanLightStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_GermanLightStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_GermanLightStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanLightStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanLightStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GermanLightStemFilterFactory, t_GermanLightStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, GermanLightStemFilterFactory, t_GermanLightStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_GermanLightStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanLightStemFilterFactory), module, "GermanLightStemFilterFactory", 0);
          }

          void t_GermanLightStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GermanLightStemFilterFactory).tp_dict, "class_", make_descriptor(GermanLightStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GermanLightStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_GermanLightStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GermanLightStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GermanLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanLightStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_GermanLightStemFilterFactory::wrap_Object(GermanLightStemFilterFactory(((t_GermanLightStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_GermanLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanLightStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanLightStemFilterFactory_init_(t_GermanLightStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            GermanLightStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = GermanLightStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GermanLightStemFilterFactory_create(t_GermanLightStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(GermanLightStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/TermToBytesRefAttribute.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *TermToBytesRefAttribute::class$ = NULL;
          jmethodID *TermToBytesRefAttribute::mids$ = NULL;
          bool TermToBytesRefAttribute::live$ = false;

          jclass TermToBytesRefAttribute::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/TermToBytesRefAttribute");

              mids$ = new jmethodID[max_mid];
              mids$[mid_fillBytesRef_54c6a166] = env->getMethodID(cls, "fillBytesRef", "()V");
              mids$[mid_getBytesRef_4ae19461] = env->getMethodID(cls, "getBytesRef", "()Lorg/apache/lucene/util/BytesRef;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void TermToBytesRefAttribute::fillBytesRef() const
          {
            env->callVoidMethod(this$, mids$[mid_fillBytesRef_54c6a166]);
          }

          ::org::apache::lucene::util::BytesRef TermToBytesRefAttribute::getBytesRef() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getBytesRef_4ae19461]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_TermToBytesRefAttribute_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TermToBytesRefAttribute_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TermToBytesRefAttribute_fillBytesRef(t_TermToBytesRefAttribute *self);
          static PyObject *t_TermToBytesRefAttribute_getBytesRef(t_TermToBytesRefAttribute *self);
          static PyObject *t_TermToBytesRefAttribute_get__bytesRef(t_TermToBytesRefAttribute *self, void *data);
          static PyGetSetDef t_TermToBytesRefAttribute__fields_[] = {
            DECLARE_GET_FIELD(t_TermToBytesRefAttribute, bytesRef),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TermToBytesRefAttribute__methods_[] = {
            DECLARE_METHOD(t_TermToBytesRefAttribute, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermToBytesRefAttribute, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermToBytesRefAttribute, fillBytesRef, METH_NOARGS),
            DECLARE_METHOD(t_TermToBytesRefAttribute, getBytesRef, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TermToBytesRefAttribute, t_TermToBytesRefAttribute, ::org::apache::lucene::util::Attribute, TermToBytesRefAttribute, abstract_init, 0, 0, t_TermToBytesRefAttribute__fields_, 0, 0);

          void t_TermToBytesRefAttribute::install(PyObject *module)
          {
            installType(&PY_TYPE(TermToBytesRefAttribute), module, "TermToBytesRefAttribute", 0);
          }

          void t_TermToBytesRefAttribute::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TermToBytesRefAttribute).tp_dict, "class_", make_descriptor(TermToBytesRefAttribute::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TermToBytesRefAttribute).tp_dict, "wrapfn_", make_descriptor(t_TermToBytesRefAttribute::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TermToBytesRefAttribute).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TermToBytesRefAttribute_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TermToBytesRefAttribute::initializeClass, 1)))
              return NULL;
            return t_TermToBytesRefAttribute::wrap_Object(TermToBytesRefAttribute(((t_TermToBytesRefAttribute *) arg)->object.this$));
          }
          static PyObject *t_TermToBytesRefAttribute_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TermToBytesRefAttribute::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TermToBytesRefAttribute_fillBytesRef(t_TermToBytesRefAttribute *self)
          {
            OBJ_CALL(self->object.fillBytesRef());
            Py_RETURN_NONE;
          }

          static PyObject *t_TermToBytesRefAttribute_getBytesRef(t_TermToBytesRefAttribute *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.getBytesRef());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_TermToBytesRefAttribute_get__bytesRef(t_TermToBytesRefAttribute *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getBytesRef());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/BoolFunction.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *BoolFunction::class$ = NULL;
            jmethodID *BoolFunction::mids$ = NULL;
            bool BoolFunction::live$ = false;

            jclass BoolFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/BoolFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            BoolFunction::BoolFunction() : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_BoolFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BoolFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_BoolFunction_init_(t_BoolFunction *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_BoolFunction__methods_[] = {
              DECLARE_METHOD(t_BoolFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BoolFunction, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(BoolFunction, t_BoolFunction, ::org::apache::lucene::queries::function::ValueSource, BoolFunction, t_BoolFunction_init_, 0, 0, 0, 0, 0);

            void t_BoolFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(BoolFunction), module, "BoolFunction", 0);
            }

            void t_BoolFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(BoolFunction).tp_dict, "class_", make_descriptor(BoolFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(BoolFunction).tp_dict, "wrapfn_", make_descriptor(t_BoolFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(BoolFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_BoolFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BoolFunction::initializeClass, 1)))
                return NULL;
              return t_BoolFunction::wrap_Object(BoolFunction(((t_BoolFunction *) arg)->object.this$));
            }
            static PyObject *t_BoolFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BoolFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_BoolFunction_init_(t_BoolFunction *self, PyObject *args, PyObject *kwds)
            {
              BoolFunction object((jobject) NULL);

              INT_CALL(object = BoolFunction());
              self->object = object;

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/WAH8DocIdSet$WordBuilder.h"
#include "org/apache/lucene/util/WAH8DocIdSet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *WAH8DocIdSet$WordBuilder::class$ = NULL;
        jmethodID *WAH8DocIdSet$WordBuilder::mids$ = NULL;
        bool WAH8DocIdSet$WordBuilder::live$ = false;

        jclass WAH8DocIdSet$WordBuilder::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/WAH8DocIdSet$WordBuilder");

            mids$ = new jmethodID[max_mid];
            mids$[mid_build_b0ef9fd4] = env->getMethodID(cls, "build", "()Lorg/apache/lucene/util/WAH8DocIdSet;");
            mids$[mid_setIndexInterval_3cc37a2d] = env->getMethodID(cls, "setIndexInterval", "(I)Lorg/apache/lucene/util/WAH8DocIdSet$WordBuilder;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::util::WAH8DocIdSet WAH8DocIdSet$WordBuilder::build() const
        {
          return ::org::apache::lucene::util::WAH8DocIdSet(env->callObjectMethod(this$, mids$[mid_build_b0ef9fd4]));
        }

        WAH8DocIdSet$WordBuilder WAH8DocIdSet$WordBuilder::setIndexInterval(jint a0) const
        {
          return WAH8DocIdSet$WordBuilder(env->callObjectMethod(this$, mids$[mid_setIndexInterval_3cc37a2d], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_WAH8DocIdSet$WordBuilder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_WAH8DocIdSet$WordBuilder_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_WAH8DocIdSet$WordBuilder_build(t_WAH8DocIdSet$WordBuilder *self);
        static PyObject *t_WAH8DocIdSet$WordBuilder_setIndexInterval(t_WAH8DocIdSet$WordBuilder *self, PyObject *arg);
        static int t_WAH8DocIdSet$WordBuilder_set__indexInterval(t_WAH8DocIdSet$WordBuilder *self, PyObject *arg, void *data);
        static PyGetSetDef t_WAH8DocIdSet$WordBuilder__fields_[] = {
          DECLARE_SET_FIELD(t_WAH8DocIdSet$WordBuilder, indexInterval),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_WAH8DocIdSet$WordBuilder__methods_[] = {
          DECLARE_METHOD(t_WAH8DocIdSet$WordBuilder, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_WAH8DocIdSet$WordBuilder, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_WAH8DocIdSet$WordBuilder, build, METH_NOARGS),
          DECLARE_METHOD(t_WAH8DocIdSet$WordBuilder, setIndexInterval, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(WAH8DocIdSet$WordBuilder, t_WAH8DocIdSet$WordBuilder, ::java::lang::Object, WAH8DocIdSet$WordBuilder, abstract_init, 0, 0, t_WAH8DocIdSet$WordBuilder__fields_, 0, 0);

        void t_WAH8DocIdSet$WordBuilder::install(PyObject *module)
        {
          installType(&PY_TYPE(WAH8DocIdSet$WordBuilder), module, "WAH8DocIdSet$WordBuilder", 0);
        }

        void t_WAH8DocIdSet$WordBuilder::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(WAH8DocIdSet$WordBuilder).tp_dict, "class_", make_descriptor(WAH8DocIdSet$WordBuilder::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(WAH8DocIdSet$WordBuilder).tp_dict, "wrapfn_", make_descriptor(t_WAH8DocIdSet$WordBuilder::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(WAH8DocIdSet$WordBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_WAH8DocIdSet$WordBuilder_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, WAH8DocIdSet$WordBuilder::initializeClass, 1)))
            return NULL;
          return t_WAH8DocIdSet$WordBuilder::wrap_Object(WAH8DocIdSet$WordBuilder(((t_WAH8DocIdSet$WordBuilder *) arg)->object.this$));
        }
        static PyObject *t_WAH8DocIdSet$WordBuilder_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, WAH8DocIdSet$WordBuilder::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_WAH8DocIdSet$WordBuilder_build(t_WAH8DocIdSet$WordBuilder *self)
        {
          ::org::apache::lucene::util::WAH8DocIdSet result((jobject) NULL);
          OBJ_CALL(result = self->object.build());
          return ::org::apache::lucene::util::t_WAH8DocIdSet::wrap_Object(result);
        }

        static PyObject *t_WAH8DocIdSet$WordBuilder_setIndexInterval(t_WAH8DocIdSet$WordBuilder *self, PyObject *arg)
        {
          jint a0;
          WAH8DocIdSet$WordBuilder result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.setIndexInterval(a0));
            return t_WAH8DocIdSet$WordBuilder::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setIndexInterval", arg);
          return NULL;
        }

        static int t_WAH8DocIdSet$WordBuilder_set__indexInterval(t_WAH8DocIdSet$WordBuilder *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setIndexInterval(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "indexInterval", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pattern/PatternReplaceCharFilterFactory.h"
#include "java/lang/String.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/CharFilter.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {

          ::java::lang::Class *PatternReplaceCharFilterFactory::class$ = NULL;
          jmethodID *PatternReplaceCharFilterFactory::mids$ = NULL;
          bool PatternReplaceCharFilterFactory::live$ = false;

          jclass PatternReplaceCharFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pattern/PatternReplaceCharFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_567624d1] = env->getMethodID(cls, "create", "(Ljava/io/Reader;)Lorg/apache/lucene/analysis/CharFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PatternReplaceCharFilterFactory::PatternReplaceCharFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::CharFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::CharFilter PatternReplaceCharFilterFactory::create(const ::java::io::Reader & a0) const
          {
            return ::org::apache::lucene::analysis::CharFilter(env->callObjectMethod(this$, mids$[mid_create_567624d1], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {
          static PyObject *t_PatternReplaceCharFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PatternReplaceCharFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PatternReplaceCharFilterFactory_init_(t_PatternReplaceCharFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PatternReplaceCharFilterFactory_create(t_PatternReplaceCharFilterFactory *self, PyObject *args);

          static PyMethodDef t_PatternReplaceCharFilterFactory__methods_[] = {
            DECLARE_METHOD(t_PatternReplaceCharFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternReplaceCharFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternReplaceCharFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PatternReplaceCharFilterFactory, t_PatternReplaceCharFilterFactory, ::org::apache::lucene::analysis::util::CharFilterFactory, PatternReplaceCharFilterFactory, t_PatternReplaceCharFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_PatternReplaceCharFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PatternReplaceCharFilterFactory), module, "PatternReplaceCharFilterFactory", 0);
          }

          void t_PatternReplaceCharFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PatternReplaceCharFilterFactory).tp_dict, "class_", make_descriptor(PatternReplaceCharFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PatternReplaceCharFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_PatternReplaceCharFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PatternReplaceCharFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PatternReplaceCharFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PatternReplaceCharFilterFactory::initializeClass, 1)))
              return NULL;
            return t_PatternReplaceCharFilterFactory::wrap_Object(PatternReplaceCharFilterFactory(((t_PatternReplaceCharFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_PatternReplaceCharFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PatternReplaceCharFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PatternReplaceCharFilterFactory_init_(t_PatternReplaceCharFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PatternReplaceCharFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PatternReplaceCharFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PatternReplaceCharFilterFactory_create(t_PatternReplaceCharFilterFactory *self, PyObject *args)
          {
            ::java::io::Reader a0((jobject) NULL);
            ::org::apache::lucene::analysis::CharFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_CharFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PatternReplaceCharFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/FilterCodec.h"
#include "org/apache/lucene/codecs/NormsFormat.h"
#include "org/apache/lucene/codecs/FieldInfosFormat.h"
#include "org/apache/lucene/codecs/StoredFieldsFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/SegmentInfoFormat.h"
#include "org/apache/lucene/codecs/LiveDocsFormat.h"
#include "org/apache/lucene/codecs/DocValuesFormat.h"
#include "org/apache/lucene/codecs/PostingsFormat.h"
#include "org/apache/lucene/codecs/TermVectorsFormat.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *FilterCodec::class$ = NULL;
        jmethodID *FilterCodec::mids$ = NULL;
        bool FilterCodec::live$ = false;

        jclass FilterCodec::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/FilterCodec");

            mids$ = new jmethodID[max_mid];
            mids$[mid_docValuesFormat_9a259760] = env->getMethodID(cls, "docValuesFormat", "()Lorg/apache/lucene/codecs/DocValuesFormat;");
            mids$[mid_fieldInfosFormat_82160220] = env->getMethodID(cls, "fieldInfosFormat", "()Lorg/apache/lucene/codecs/FieldInfosFormat;");
            mids$[mid_liveDocsFormat_fcc69d9a] = env->getMethodID(cls, "liveDocsFormat", "()Lorg/apache/lucene/codecs/LiveDocsFormat;");
            mids$[mid_normsFormat_03b89e43] = env->getMethodID(cls, "normsFormat", "()Lorg/apache/lucene/codecs/NormsFormat;");
            mids$[mid_postingsFormat_d12d16c8] = env->getMethodID(cls, "postingsFormat", "()Lorg/apache/lucene/codecs/PostingsFormat;");
            mids$[mid_segmentInfoFormat_c24d8633] = env->getMethodID(cls, "segmentInfoFormat", "()Lorg/apache/lucene/codecs/SegmentInfoFormat;");
            mids$[mid_storedFieldsFormat_2b977101] = env->getMethodID(cls, "storedFieldsFormat", "()Lorg/apache/lucene/codecs/StoredFieldsFormat;");
            mids$[mid_termVectorsFormat_bcd1d8b8] = env->getMethodID(cls, "termVectorsFormat", "()Lorg/apache/lucene/codecs/TermVectorsFormat;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::codecs::DocValuesFormat FilterCodec::docValuesFormat() const
        {
          return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_docValuesFormat_9a259760]));
        }

        ::org::apache::lucene::codecs::FieldInfosFormat FilterCodec::fieldInfosFormat() const
        {
          return ::org::apache::lucene::codecs::FieldInfosFormat(env->callObjectMethod(this$, mids$[mid_fieldInfosFormat_82160220]));
        }

        ::org::apache::lucene::codecs::LiveDocsFormat FilterCodec::liveDocsFormat() const
        {
          return ::org::apache::lucene::codecs::LiveDocsFormat(env->callObjectMethod(this$, mids$[mid_liveDocsFormat_fcc69d9a]));
        }

        ::org::apache::lucene::codecs::NormsFormat FilterCodec::normsFormat() const
        {
          return ::org::apache::lucene::codecs::NormsFormat(env->callObjectMethod(this$, mids$[mid_normsFormat_03b89e43]));
        }

        ::org::apache::lucene::codecs::PostingsFormat FilterCodec::postingsFormat() const
        {
          return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_postingsFormat_d12d16c8]));
        }

        ::org::apache::lucene::codecs::SegmentInfoFormat FilterCodec::segmentInfoFormat() const
        {
          return ::org::apache::lucene::codecs::SegmentInfoFormat(env->callObjectMethod(this$, mids$[mid_segmentInfoFormat_c24d8633]));
        }

        ::org::apache::lucene::codecs::StoredFieldsFormat FilterCodec::storedFieldsFormat() const
        {
          return ::org::apache::lucene::codecs::StoredFieldsFormat(env->callObjectMethod(this$, mids$[mid_storedFieldsFormat_2b977101]));
        }

        ::org::apache::lucene::codecs::TermVectorsFormat FilterCodec::termVectorsFormat() const
        {
          return ::org::apache::lucene::codecs::TermVectorsFormat(env->callObjectMethod(this$, mids$[mid_termVectorsFormat_bcd1d8b8]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_FilterCodec_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterCodec_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterCodec_docValuesFormat(t_FilterCodec *self, PyObject *args);
        static PyObject *t_FilterCodec_fieldInfosFormat(t_FilterCodec *self, PyObject *args);
        static PyObject *t_FilterCodec_liveDocsFormat(t_FilterCodec *self, PyObject *args);
        static PyObject *t_FilterCodec_normsFormat(t_FilterCodec *self, PyObject *args);
        static PyObject *t_FilterCodec_postingsFormat(t_FilterCodec *self, PyObject *args);
        static PyObject *t_FilterCodec_segmentInfoFormat(t_FilterCodec *self, PyObject *args);
        static PyObject *t_FilterCodec_storedFieldsFormat(t_FilterCodec *self, PyObject *args);
        static PyObject *t_FilterCodec_termVectorsFormat(t_FilterCodec *self, PyObject *args);

        static PyMethodDef t_FilterCodec__methods_[] = {
          DECLARE_METHOD(t_FilterCodec, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterCodec, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterCodec, docValuesFormat, METH_VARARGS),
          DECLARE_METHOD(t_FilterCodec, fieldInfosFormat, METH_VARARGS),
          DECLARE_METHOD(t_FilterCodec, liveDocsFormat, METH_VARARGS),
          DECLARE_METHOD(t_FilterCodec, normsFormat, METH_VARARGS),
          DECLARE_METHOD(t_FilterCodec, postingsFormat, METH_VARARGS),
          DECLARE_METHOD(t_FilterCodec, segmentInfoFormat, METH_VARARGS),
          DECLARE_METHOD(t_FilterCodec, storedFieldsFormat, METH_VARARGS),
          DECLARE_METHOD(t_FilterCodec, termVectorsFormat, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilterCodec, t_FilterCodec, ::org::apache::lucene::codecs::Codec, FilterCodec, abstract_init, 0, 0, 0, 0, 0);

        void t_FilterCodec::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterCodec), module, "FilterCodec", 0);
        }

        void t_FilterCodec::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilterCodec).tp_dict, "class_", make_descriptor(FilterCodec::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilterCodec).tp_dict, "wrapfn_", make_descriptor(t_FilterCodec::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilterCodec).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterCodec_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterCodec::initializeClass, 1)))
            return NULL;
          return t_FilterCodec::wrap_Object(FilterCodec(((t_FilterCodec *) arg)->object.this$));
        }
        static PyObject *t_FilterCodec_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterCodec::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FilterCodec_docValuesFormat(t_FilterCodec *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docValuesFormat());
            return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterCodec), (PyObject *) self, "docValuesFormat", args, 2);
        }

        static PyObject *t_FilterCodec_fieldInfosFormat(t_FilterCodec *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::FieldInfosFormat result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.fieldInfosFormat());
            return ::org::apache::lucene::codecs::t_FieldInfosFormat::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterCodec), (PyObject *) self, "fieldInfosFormat", args, 2);
        }

        static PyObject *t_FilterCodec_liveDocsFormat(t_FilterCodec *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::LiveDocsFormat result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.liveDocsFormat());
            return ::org::apache::lucene::codecs::t_LiveDocsFormat::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterCodec), (PyObject *) self, "liveDocsFormat", args, 2);
        }

        static PyObject *t_FilterCodec_normsFormat(t_FilterCodec *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::NormsFormat result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.normsFormat());
            return ::org::apache::lucene::codecs::t_NormsFormat::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterCodec), (PyObject *) self, "normsFormat", args, 2);
        }

        static PyObject *t_FilterCodec_postingsFormat(t_FilterCodec *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.postingsFormat());
            return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterCodec), (PyObject *) self, "postingsFormat", args, 2);
        }

        static PyObject *t_FilterCodec_segmentInfoFormat(t_FilterCodec *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::SegmentInfoFormat result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.segmentInfoFormat());
            return ::org::apache::lucene::codecs::t_SegmentInfoFormat::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterCodec), (PyObject *) self, "segmentInfoFormat", args, 2);
        }

        static PyObject *t_FilterCodec_storedFieldsFormat(t_FilterCodec *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::StoredFieldsFormat result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.storedFieldsFormat());
            return ::org::apache::lucene::codecs::t_StoredFieldsFormat::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterCodec), (PyObject *) self, "storedFieldsFormat", args, 2);
        }

        static PyObject *t_FilterCodec_termVectorsFormat(t_FilterCodec *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::TermVectorsFormat result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.termVectorsFormat());
            return ::org::apache::lucene::codecs::t_TermVectorsFormat::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterCodec), (PyObject *) self, "termVectorsFormat", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/util/Collection.h"
#include "java/util/Set.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "java/util/Iterator.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *CharArraySet::class$ = NULL;
          jmethodID *CharArraySet::mids$ = NULL;
          bool CharArraySet::live$ = false;
          CharArraySet *CharArraySet::EMPTY_SET = NULL;

          jclass CharArraySet::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/CharArraySet");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e4d1113d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/util/Collection;Z)V");
              mids$[mid_init$_b3a872e4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;IZ)V");
              mids$[mid_add_5fdc3f44] = env->getMethodID(cls, "add", "(Ljava/lang/String;)Z");
              mids$[mid_add_700e23da] = env->getMethodID(cls, "add", "([C)Z");
              mids$[mid_add_a8afc646] = env->getMethodID(cls, "add", "(Ljava/lang/CharSequence;)Z");
              mids$[mid_add_290588e2] = env->getMethodID(cls, "add", "(Ljava/lang/Object;)Z");
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_contains_290588e2] = env->getMethodID(cls, "contains", "(Ljava/lang/Object;)Z");
              mids$[mid_contains_a8afc646] = env->getMethodID(cls, "contains", "(Ljava/lang/CharSequence;)Z");
              mids$[mid_contains_6f0bb35a] = env->getMethodID(cls, "contains", "([CII)Z");
              mids$[mid_copy_8d0d7f61] = env->getStaticMethodID(cls, "copy", "(Lorg/apache/lucene/util/Version;Ljava/util/Set;)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
              mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_unmodifiableSet_ea04d04d] = env->getStaticMethodID(cls, "unmodifiableSet", "(Lorg/apache/lucene/analysis/util/CharArraySet;)Lorg/apache/lucene/analysis/util/CharArraySet;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              EMPTY_SET = new CharArraySet(env->getStaticObjectField(cls, "EMPTY_SET", "Lorg/apache/lucene/analysis/util/CharArraySet;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CharArraySet::CharArraySet(const ::org::apache::lucene::util::Version & a0, const ::java::util::Collection & a1, jboolean a2) : ::java::util::AbstractSet(env->newObject(initializeClass, &mids$, mid_init$_e4d1113d, a0.this$, a1.this$, a2)) {}

          CharArraySet::CharArraySet(const ::org::apache::lucene::util::Version & a0, jint a1, jboolean a2) : ::java::util::AbstractSet(env->newObject(initializeClass, &mids$, mid_init$_b3a872e4, a0.this$, a1, a2)) {}

          jboolean CharArraySet::add(const ::java::lang::String & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_add_5fdc3f44], a0.this$);
          }

          jboolean CharArraySet::add(const JArray< jchar > & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_add_700e23da], a0.this$);
          }

          jboolean CharArraySet::add(const ::java::lang::CharSequence & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_add_a8afc646], a0.this$);
          }

          jboolean CharArraySet::add(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_add_290588e2], a0.this$);
          }

          void CharArraySet::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          jboolean CharArraySet::contains(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_contains_290588e2], a0.this$);
          }

          jboolean CharArraySet::contains(const ::java::lang::CharSequence & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_contains_a8afc646], a0.this$);
          }

          jboolean CharArraySet::contains(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return env->callBooleanMethod(this$, mids$[mid_contains_6f0bb35a], a0.this$, a1, a2);
          }

          CharArraySet CharArraySet::copy(const ::org::apache::lucene::util::Version & a0, const ::java::util::Set & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_copy_8d0d7f61], a0.this$, a1.this$));
          }

          ::java::util::Iterator CharArraySet::iterator() const
          {
            return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
          }

          jint CharArraySet::size() const
          {
            return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
          }

          ::java::lang::String CharArraySet::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          CharArraySet CharArraySet::unmodifiableSet(const CharArraySet & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_unmodifiableSet_ea04d04d], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_CharArraySet_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharArraySet_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharArraySet_of_(t_CharArraySet *self, PyObject *args);
          static int t_CharArraySet_init_(t_CharArraySet *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CharArraySet_add(t_CharArraySet *self, PyObject *args);
          static PyObject *t_CharArraySet_clear(t_CharArraySet *self, PyObject *args);
          static PyObject *t_CharArraySet_contains(t_CharArraySet *self, PyObject *args);
          static PyObject *t_CharArraySet_copy(PyTypeObject *type, PyObject *args);
          static PyObject *t_CharArraySet_iterator(t_CharArraySet *self, PyObject *args);
          static PyObject *t_CharArraySet_size(t_CharArraySet *self, PyObject *args);
          static PyObject *t_CharArraySet_toString(t_CharArraySet *self, PyObject *args);
          static PyObject *t_CharArraySet_unmodifiableSet(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharArraySet_get__parameters_(t_CharArraySet *self, void *data);
          static PyGetSetDef t_CharArraySet__fields_[] = {
            DECLARE_GET_FIELD(t_CharArraySet, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CharArraySet__methods_[] = {
            DECLARE_METHOD(t_CharArraySet, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharArraySet, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharArraySet, of_, METH_VARARGS),
            DECLARE_METHOD(t_CharArraySet, add, METH_VARARGS),
            DECLARE_METHOD(t_CharArraySet, clear, METH_VARARGS),
            DECLARE_METHOD(t_CharArraySet, contains, METH_VARARGS),
            DECLARE_METHOD(t_CharArraySet, copy, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_CharArraySet, iterator, METH_VARARGS),
            DECLARE_METHOD(t_CharArraySet, size, METH_VARARGS),
            DECLARE_METHOD(t_CharArraySet, toString, METH_VARARGS),
            DECLARE_METHOD(t_CharArraySet, unmodifiableSet, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CharArraySet, t_CharArraySet, ::java::util::AbstractSet, CharArraySet, t_CharArraySet_init_, ((PyObject *(*)(t_CharArraySet *)) get_generic_iterator< t_CharArraySet >), 0, t_CharArraySet__fields_, 0, 0);
          PyObject *t_CharArraySet::wrap_Object(const CharArraySet& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CharArraySet::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CharArraySet *self = (t_CharArraySet *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_CharArraySet::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CharArraySet::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CharArraySet *self = (t_CharArraySet *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_CharArraySet::install(PyObject *module)
          {
            installType(&PY_TYPE(CharArraySet), module, "CharArraySet", 0);
          }

          void t_CharArraySet::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CharArraySet).tp_dict, "class_", make_descriptor(CharArraySet::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CharArraySet).tp_dict, "wrapfn_", make_descriptor(t_CharArraySet::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CharArraySet).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CharArraySet::initializeClass);
            PyDict_SetItemString(PY_TYPE(CharArraySet).tp_dict, "EMPTY_SET", make_descriptor(t_CharArraySet::wrap_Object(*CharArraySet::EMPTY_SET)));
          }

          static PyObject *t_CharArraySet_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharArraySet::initializeClass, 1)))
              return NULL;
            return t_CharArraySet::wrap_Object(CharArraySet(((t_CharArraySet *) arg)->object.this$));
          }
          static PyObject *t_CharArraySet_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharArraySet::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CharArraySet_of_(t_CharArraySet *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_CharArraySet_init_(t_CharArraySet *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::util::Collection a1((jobject) NULL);
                PyTypeObject **p1;
                jboolean a2;
                CharArraySet object((jobject) NULL);

                if (!parseArgs(args, "KKZ", ::org::apache::lucene::util::Version::initializeClass, ::java::util::Collection::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::java::util::t_Collection::parameters_, &a2))
                {
                  INT_CALL(object = CharArraySet(a0, a1, a2));
                  self->object = object;
                  self->parameters[0] = &::java::lang::PY_TYPE(Object);
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                jint a1;
                jboolean a2;
                CharArraySet object((jobject) NULL);

                if (!parseArgs(args, "KIZ", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = CharArraySet(a0, a1, a2));
                  self->object = object;
                  self->parameters[0] = &::java::lang::PY_TYPE(Object);
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CharArraySet_add(t_CharArraySet *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = self->object.add(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              {
                JArray< jchar > a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "[C", &a0))
                {
                  OBJ_CALL(result = self->object.add(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.add(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              {
                ::java::lang::Object a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "o", &a0))
                {
                  OBJ_CALL(result = self->object.add(a0));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            return callSuper(&PY_TYPE(CharArraySet), (PyObject *) self, "add", args, 2);
          }

          static PyObject *t_CharArraySet_clear(t_CharArraySet *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CharArraySet), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_CharArraySet_contains(t_CharArraySet *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::Object a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "o", &a0))
                {
                  OBJ_CALL(result = self->object.contains(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.contains(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;
                jboolean result;

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.contains(a0, a1, a2));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            return callSuper(&PY_TYPE(CharArraySet), (PyObject *) self, "contains", args, 2);
          }

          static PyObject *t_CharArraySet_copy(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::util::Set a1((jobject) NULL);
            PyTypeObject **p1;
            CharArraySet result((jobject) NULL);

            if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::java::util::Set::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharArraySet::copy(a0, a1));
              return t_CharArraySet::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "copy", args);
            return NULL;
          }

          static PyObject *t_CharArraySet_iterator(t_CharArraySet *self, PyObject *args)
          {
            ::java::util::Iterator result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.iterator());
              return ::java::util::t_Iterator::wrap_Object(result, &::java::lang::PY_TYPE(Object));
            }

            return callSuper(&PY_TYPE(CharArraySet), (PyObject *) self, "iterator", args, 2);
          }

          static PyObject *t_CharArraySet_size(t_CharArraySet *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.size());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(CharArraySet), (PyObject *) self, "size", args, 2);
          }

          static PyObject *t_CharArraySet_toString(t_CharArraySet *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(CharArraySet), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_CharArraySet_unmodifiableSet(PyTypeObject *type, PyObject *arg)
          {
            CharArraySet a0((jobject) NULL);
            PyTypeObject **p0;
            CharArraySet result((jobject) NULL);

            if (!parseArg(arg, "K", CharArraySet::initializeClass, &a0, &p0, t_CharArraySet::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharArraySet::unmodifiableSet(a0));
              return t_CharArraySet::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "unmodifiableSet", arg);
            return NULL;
          }
          static PyObject *t_CharArraySet_get__parameters_(t_CharArraySet *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *ResourceLoaderAware::class$ = NULL;
          jmethodID *ResourceLoaderAware::mids$ = NULL;
          bool ResourceLoaderAware::live$ = false;

          jclass ResourceLoaderAware::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/ResourceLoaderAware");

              mids$ = new jmethodID[max_mid];
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void ResourceLoaderAware::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_ResourceLoaderAware_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ResourceLoaderAware_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ResourceLoaderAware_inform(t_ResourceLoaderAware *self, PyObject *arg);

          static PyMethodDef t_ResourceLoaderAware__methods_[] = {
            DECLARE_METHOD(t_ResourceLoaderAware, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ResourceLoaderAware, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ResourceLoaderAware, inform, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ResourceLoaderAware, t_ResourceLoaderAware, ::java::lang::Object, ResourceLoaderAware, abstract_init, 0, 0, 0, 0, 0);

          void t_ResourceLoaderAware::install(PyObject *module)
          {
            installType(&PY_TYPE(ResourceLoaderAware), module, "ResourceLoaderAware", 0);
          }

          void t_ResourceLoaderAware::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ResourceLoaderAware).tp_dict, "class_", make_descriptor(ResourceLoaderAware::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ResourceLoaderAware).tp_dict, "wrapfn_", make_descriptor(t_ResourceLoaderAware::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ResourceLoaderAware).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ResourceLoaderAware_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ResourceLoaderAware::initializeClass, 1)))
              return NULL;
            return t_ResourceLoaderAware::wrap_Object(ResourceLoaderAware(((t_ResourceLoaderAware *) arg)->object.this$));
          }
          static PyObject *t_ResourceLoaderAware_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ResourceLoaderAware::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_ResourceLoaderAware_inform(t_ResourceLoaderAware *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessorImpl.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace processors {

              ::java::lang::Class *QueryNodeProcessorImpl::class$ = NULL;
              jmethodID *QueryNodeProcessorImpl::mids$ = NULL;
              bool QueryNodeProcessorImpl::live$ = false;

              jclass QueryNodeProcessorImpl::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessorImpl");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_init$_0b1f7132] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");
                  mids$[mid_getQueryConfigHandler_3636d8c3] = env->getMethodID(cls, "getQueryConfigHandler", "()Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;");
                  mids$[mid_process_6705aed7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setQueryConfigHandler_0b1f7132] = env->getMethodID(cls, "setQueryConfigHandler", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");
                  mids$[mid_processChildren_cc04aeef] = env->getMethodID(cls, "processChildren", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              QueryNodeProcessorImpl::QueryNodeProcessorImpl() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              QueryNodeProcessorImpl::QueryNodeProcessorImpl(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_0b1f7132, a0.this$)) {}

              ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler QueryNodeProcessorImpl::getQueryConfigHandler() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler(env->callObjectMethod(this$, mids$[mid_getQueryConfigHandler_3636d8c3]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode QueryNodeProcessorImpl::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_6705aed7], a0.this$));
              }

              void QueryNodeProcessorImpl::setQueryConfigHandler(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setQueryConfigHandler_0b1f7132], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace processors {
              static PyObject *t_QueryNodeProcessorImpl_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryNodeProcessorImpl_instance_(PyTypeObject *type, PyObject *arg);
              static int t_QueryNodeProcessorImpl_init_(t_QueryNodeProcessorImpl *self, PyObject *args, PyObject *kwds);
              static PyObject *t_QueryNodeProcessorImpl_getQueryConfigHandler(t_QueryNodeProcessorImpl *self);
              static PyObject *t_QueryNodeProcessorImpl_process(t_QueryNodeProcessorImpl *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessorImpl_setQueryConfigHandler(t_QueryNodeProcessorImpl *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessorImpl_get__queryConfigHandler(t_QueryNodeProcessorImpl *self, void *data);
              static int t_QueryNodeProcessorImpl_set__queryConfigHandler(t_QueryNodeProcessorImpl *self, PyObject *arg, void *data);
              static PyGetSetDef t_QueryNodeProcessorImpl__fields_[] = {
                DECLARE_GETSET_FIELD(t_QueryNodeProcessorImpl, queryConfigHandler),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_QueryNodeProcessorImpl__methods_[] = {
                DECLARE_METHOD(t_QueryNodeProcessorImpl, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNodeProcessorImpl, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNodeProcessorImpl, getQueryConfigHandler, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeProcessorImpl, process, METH_O),
                DECLARE_METHOD(t_QueryNodeProcessorImpl, setQueryConfigHandler, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(QueryNodeProcessorImpl, t_QueryNodeProcessorImpl, ::java::lang::Object, QueryNodeProcessorImpl, t_QueryNodeProcessorImpl_init_, 0, 0, t_QueryNodeProcessorImpl__fields_, 0, 0);

              void t_QueryNodeProcessorImpl::install(PyObject *module)
              {
                installType(&PY_TYPE(QueryNodeProcessorImpl), module, "QueryNodeProcessorImpl", 0);
              }

              void t_QueryNodeProcessorImpl::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(QueryNodeProcessorImpl).tp_dict, "class_", make_descriptor(QueryNodeProcessorImpl::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(QueryNodeProcessorImpl).tp_dict, "wrapfn_", make_descriptor(t_QueryNodeProcessorImpl::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(QueryNodeProcessorImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_QueryNodeProcessorImpl_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, QueryNodeProcessorImpl::initializeClass, 1)))
                  return NULL;
                return t_QueryNodeProcessorImpl::wrap_Object(QueryNodeProcessorImpl(((t_QueryNodeProcessorImpl *) arg)->object.this$));
              }
              static PyObject *t_QueryNodeProcessorImpl_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, QueryNodeProcessorImpl::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_QueryNodeProcessorImpl_init_(t_QueryNodeProcessorImpl *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 0:
                  {
                    QueryNodeProcessorImpl object((jobject) NULL);

                    INT_CALL(object = QueryNodeProcessorImpl());
                    self->object = object;
                    break;
                  }
                  goto err;
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);
                    QueryNodeProcessorImpl object((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                    {
                      INT_CALL(object = QueryNodeProcessorImpl(a0));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                 err:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_QueryNodeProcessorImpl_getQueryConfigHandler(t_QueryNodeProcessorImpl *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler result((jobject) NULL);
                OBJ_CALL(result = self->object.getQueryConfigHandler());
                return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(result);
              }

              static PyObject *t_QueryNodeProcessorImpl_process(t_QueryNodeProcessorImpl *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "process", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorImpl_setQueryConfigHandler(t_QueryNodeProcessorImpl *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.setQueryConfigHandler(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setQueryConfigHandler", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorImpl_get__queryConfigHandler(t_QueryNodeProcessorImpl *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
                OBJ_CALL(value = self->object.getQueryConfigHandler());
                return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(value);
              }
              static int t_QueryNodeProcessorImpl_set__queryConfigHandler(t_QueryNodeProcessorImpl *self, PyObject *arg, void *data)
              {
                {
                  ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
                  if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &value))
                  {
                    INT_CALL(self->object.setQueryConfigHandler(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "queryConfigHandler", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/ScoreOrderFragmentsBuilder$ScoreComparator.h"
#include "java/util/Comparator.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *ScoreOrderFragmentsBuilder$ScoreComparator::class$ = NULL;
          jmethodID *ScoreOrderFragmentsBuilder$ScoreComparator::mids$ = NULL;
          bool ScoreOrderFragmentsBuilder$ScoreComparator::live$ = false;

          jclass ScoreOrderFragmentsBuilder$ScoreComparator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/ScoreOrderFragmentsBuilder$ScoreComparator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_compare_79a08e77] = env->getMethodID(cls, "compare", "(Lorg/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo;Lorg/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo;)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ScoreOrderFragmentsBuilder$ScoreComparator::ScoreOrderFragmentsBuilder$ScoreComparator() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint ScoreOrderFragmentsBuilder$ScoreComparator::compare(const ::org::apache::lucene::search::vectorhighlight::FieldFragList$WeightedFragInfo & a0, const ::org::apache::lucene::search::vectorhighlight::FieldFragList$WeightedFragInfo & a1) const
          {
            return env->callIntMethod(this$, mids$[mid_compare_79a08e77], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_ScoreOrderFragmentsBuilder$ScoreComparator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ScoreOrderFragmentsBuilder$ScoreComparator_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ScoreOrderFragmentsBuilder$ScoreComparator_init_(t_ScoreOrderFragmentsBuilder$ScoreComparator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ScoreOrderFragmentsBuilder$ScoreComparator_compare(t_ScoreOrderFragmentsBuilder$ScoreComparator *self, PyObject *args);

          static PyMethodDef t_ScoreOrderFragmentsBuilder$ScoreComparator__methods_[] = {
            DECLARE_METHOD(t_ScoreOrderFragmentsBuilder$ScoreComparator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScoreOrderFragmentsBuilder$ScoreComparator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScoreOrderFragmentsBuilder$ScoreComparator, compare, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ScoreOrderFragmentsBuilder$ScoreComparator, t_ScoreOrderFragmentsBuilder$ScoreComparator, ::java::lang::Object, ScoreOrderFragmentsBuilder$ScoreComparator, t_ScoreOrderFragmentsBuilder$ScoreComparator_init_, 0, 0, 0, 0, 0);

          void t_ScoreOrderFragmentsBuilder$ScoreComparator::install(PyObject *module)
          {
            installType(&PY_TYPE(ScoreOrderFragmentsBuilder$ScoreComparator), module, "ScoreOrderFragmentsBuilder$ScoreComparator", 0);
          }

          void t_ScoreOrderFragmentsBuilder$ScoreComparator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ScoreOrderFragmentsBuilder$ScoreComparator).tp_dict, "class_", make_descriptor(ScoreOrderFragmentsBuilder$ScoreComparator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ScoreOrderFragmentsBuilder$ScoreComparator).tp_dict, "wrapfn_", make_descriptor(t_ScoreOrderFragmentsBuilder$ScoreComparator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ScoreOrderFragmentsBuilder$ScoreComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ScoreOrderFragmentsBuilder$ScoreComparator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ScoreOrderFragmentsBuilder$ScoreComparator::initializeClass, 1)))
              return NULL;
            return t_ScoreOrderFragmentsBuilder$ScoreComparator::wrap_Object(ScoreOrderFragmentsBuilder$ScoreComparator(((t_ScoreOrderFragmentsBuilder$ScoreComparator *) arg)->object.this$));
          }
          static PyObject *t_ScoreOrderFragmentsBuilder$ScoreComparator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ScoreOrderFragmentsBuilder$ScoreComparator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ScoreOrderFragmentsBuilder$ScoreComparator_init_(t_ScoreOrderFragmentsBuilder$ScoreComparator *self, PyObject *args, PyObject *kwds)
          {
            ScoreOrderFragmentsBuilder$ScoreComparator object((jobject) NULL);

            INT_CALL(object = ScoreOrderFragmentsBuilder$ScoreComparator());
            self->object = object;

            return 0;
          }

          static PyObject *t_ScoreOrderFragmentsBuilder$ScoreComparator_compare(t_ScoreOrderFragmentsBuilder$ScoreComparator *self, PyObject *args)
          {
            ::org::apache::lucene::search::vectorhighlight::FieldFragList$WeightedFragInfo a0((jobject) NULL);
            ::org::apache::lucene::search::vectorhighlight::FieldFragList$WeightedFragInfo a1((jobject) NULL);
            jint result;

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::vectorhighlight::FieldFragList$WeightedFragInfo::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldFragList$WeightedFragInfo::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.compare(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compare", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/FilterBuilderFactory.h"
#include "org/apache/lucene/queryparser/xml/FilterBuilder.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Filter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {

          ::java::lang::Class *FilterBuilderFactory::class$ = NULL;
          jmethodID *FilterBuilderFactory::mids$ = NULL;
          bool FilterBuilderFactory::live$ = false;

          jclass FilterBuilderFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/FilterBuilderFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_addBuilder_a961e918] = env->getMethodID(cls, "addBuilder", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/xml/FilterBuilder;)V");
              mids$[mid_getFilterBuilder_de450325] = env->getMethodID(cls, "getFilterBuilder", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/xml/FilterBuilder;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FilterBuilderFactory::FilterBuilderFactory() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void FilterBuilderFactory::addBuilder(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::xml::FilterBuilder & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_addBuilder_a961e918], a0.this$, a1.this$);
          }

          ::org::apache::lucene::queryparser::xml::FilterBuilder FilterBuilderFactory::getFilterBuilder(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::queryparser::xml::FilterBuilder(env->callObjectMethod(this$, mids$[mid_getFilterBuilder_de450325], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          static PyObject *t_FilterBuilderFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FilterBuilderFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FilterBuilderFactory_init_(t_FilterBuilderFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FilterBuilderFactory_addBuilder(t_FilterBuilderFactory *self, PyObject *args);
          static PyObject *t_FilterBuilderFactory_getFilterBuilder(t_FilterBuilderFactory *self, PyObject *arg);

          static PyMethodDef t_FilterBuilderFactory__methods_[] = {
            DECLARE_METHOD(t_FilterBuilderFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FilterBuilderFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FilterBuilderFactory, addBuilder, METH_VARARGS),
            DECLARE_METHOD(t_FilterBuilderFactory, getFilterBuilder, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FilterBuilderFactory, t_FilterBuilderFactory, ::java::lang::Object, FilterBuilderFactory, t_FilterBuilderFactory_init_, 0, 0, 0, 0, 0);

          void t_FilterBuilderFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(FilterBuilderFactory), module, "FilterBuilderFactory", 0);
          }

          void t_FilterBuilderFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FilterBuilderFactory).tp_dict, "class_", make_descriptor(FilterBuilderFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FilterBuilderFactory).tp_dict, "wrapfn_", make_descriptor(t_FilterBuilderFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FilterBuilderFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FilterBuilderFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FilterBuilderFactory::initializeClass, 1)))
              return NULL;
            return t_FilterBuilderFactory::wrap_Object(FilterBuilderFactory(((t_FilterBuilderFactory *) arg)->object.this$));
          }
          static PyObject *t_FilterBuilderFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FilterBuilderFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FilterBuilderFactory_init_(t_FilterBuilderFactory *self, PyObject *args, PyObject *kwds)
          {
            FilterBuilderFactory object((jobject) NULL);

            INT_CALL(object = FilterBuilderFactory());
            self->object = object;

            return 0;
          }

          static PyObject *t_FilterBuilderFactory_addBuilder(t_FilterBuilderFactory *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::queryparser::xml::FilterBuilder a1((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::xml::FilterBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.addBuilder(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addBuilder", args);
            return NULL;
          }

          static PyObject *t_FilterBuilderFactory_getFilterBuilder(t_FilterBuilderFactory *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::queryparser::xml::FilterBuilder result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getFilterBuilder(a0));
              return ::org::apache::lucene::queryparser::xml::t_FilterBuilder::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getFilterBuilder", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SortedNumericSelector.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "org/apache/lucene/search/SortedNumericSelector$Type.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/SortField$Type.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SortedNumericSelector::class$ = NULL;
        jmethodID *SortedNumericSelector::mids$ = NULL;
        bool SortedNumericSelector::live$ = false;

        jclass SortedNumericSelector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SortedNumericSelector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_wrap_d573c861] = env->getStaticMethodID(cls, "wrap", "(Lorg/apache/lucene/index/SortedNumericDocValues;Lorg/apache/lucene/search/SortedNumericSelector$Type;Lorg/apache/lucene/search/SortField$Type;)Lorg/apache/lucene/index/NumericDocValues;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SortedNumericSelector::SortedNumericSelector() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::index::NumericDocValues SortedNumericSelector::wrap(const ::org::apache::lucene::index::SortedNumericDocValues & a0, const ::org::apache::lucene::search::SortedNumericSelector$Type & a1, const ::org::apache::lucene::search::SortField$Type & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::NumericDocValues(env->callStaticObjectMethod(cls, mids$[mid_wrap_d573c861], a0.this$, a1.this$, a2.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SortedNumericSelector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedNumericSelector_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SortedNumericSelector_init_(t_SortedNumericSelector *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SortedNumericSelector_wrap(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_SortedNumericSelector__methods_[] = {
          DECLARE_METHOD(t_SortedNumericSelector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedNumericSelector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedNumericSelector, wrap, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SortedNumericSelector, t_SortedNumericSelector, ::java::lang::Object, SortedNumericSelector, t_SortedNumericSelector_init_, 0, 0, 0, 0, 0);

        void t_SortedNumericSelector::install(PyObject *module)
        {
          installType(&PY_TYPE(SortedNumericSelector), module, "SortedNumericSelector", 0);
          PyDict_SetItemString(PY_TYPE(SortedNumericSelector).tp_dict, "Type", make_descriptor(&PY_TYPE(SortedNumericSelector$Type)));
        }

        void t_SortedNumericSelector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SortedNumericSelector).tp_dict, "class_", make_descriptor(SortedNumericSelector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SortedNumericSelector).tp_dict, "wrapfn_", make_descriptor(t_SortedNumericSelector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SortedNumericSelector).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SortedNumericSelector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortedNumericSelector::initializeClass, 1)))
            return NULL;
          return t_SortedNumericSelector::wrap_Object(SortedNumericSelector(((t_SortedNumericSelector *) arg)->object.this$));
        }
        static PyObject *t_SortedNumericSelector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortedNumericSelector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SortedNumericSelector_init_(t_SortedNumericSelector *self, PyObject *args, PyObject *kwds)
        {
          SortedNumericSelector object((jobject) NULL);

          INT_CALL(object = SortedNumericSelector());
          self->object = object;

          return 0;
        }

        static PyObject *t_SortedNumericSelector_wrap(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::SortedNumericDocValues a0((jobject) NULL);
          ::org::apache::lucene::search::SortedNumericSelector$Type a1((jobject) NULL);
          PyTypeObject **p1;
          ::org::apache::lucene::search::SortField$Type a2((jobject) NULL);
          PyTypeObject **p2;
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "kKK", ::org::apache::lucene::index::SortedNumericDocValues::initializeClass, ::org::apache::lucene::search::SortedNumericSelector$Type::initializeClass, ::org::apache::lucene::search::SortField$Type::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_SortedNumericSelector$Type::parameters_, &a2, &p2, ::org::apache::lucene::search::t_SortField$Type::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::SortedNumericSelector::wrap(a0, a1, a2));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "wrap", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergePolicy$OneMerge.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/MergePolicy$MergeAbortedException.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/MergeInfo.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/MergeState.h"
#include "org/apache/lucene/index/MergePolicy$DocMap.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergePolicy$OneMerge::class$ = NULL;
        jmethodID *MergePolicy$OneMerge::mids$ = NULL;
        jfieldID *MergePolicy$OneMerge::fids$ = NULL;
        bool MergePolicy$OneMerge::live$ = false;

        jclass MergePolicy$OneMerge::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergePolicy$OneMerge");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_1fde8fc3] = env->getMethodID(cls, "<init>", "(Ljava/util/List;)V");
            mids$[mid_checkAborted_2e261ef2] = env->getMethodID(cls, "checkAborted", "(Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_getDocMap_a6eb90c4] = env->getMethodID(cls, "getDocMap", "(Lorg/apache/lucene/index/MergeState;)Lorg/apache/lucene/index/MergePolicy$DocMap;");
            mids$[mid_getMergeInfo_e24ac350] = env->getMethodID(cls, "getMergeInfo", "()Lorg/apache/lucene/store/MergeInfo;");
            mids$[mid_getMergeReaders_87851566] = env->getMethodID(cls, "getMergeReaders", "()Ljava/util/List;");
            mids$[mid_getPause_54c6a16a] = env->getMethodID(cls, "getPause", "()Z");
            mids$[mid_segString_0451c495] = env->getMethodID(cls, "segString", "(Lorg/apache/lucene/store/Directory;)Ljava/lang/String;");
            mids$[mid_setInfo_6649cdf4] = env->getMethodID(cls, "setInfo", "(Lorg/apache/lucene/index/SegmentCommitInfo;)V");
            mids$[mid_setPause_bb0c767f] = env->getMethodID(cls, "setPause", "(Z)V");
            mids$[mid_totalBytesSize_54c6a17a] = env->getMethodID(cls, "totalBytesSize", "()J");
            mids$[mid_totalNumDocs_54c6a179] = env->getMethodID(cls, "totalNumDocs", "()I");

            fids$ = new jfieldID[max_fid];
            fids$[fid_estimatedMergeBytes] = env->getFieldID(cls, "estimatedMergeBytes", "J");
            fids$[fid_segments] = env->getFieldID(cls, "segments", "Ljava/util/List;");
            fids$[fid_totalDocCount] = env->getFieldID(cls, "totalDocCount", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MergePolicy$OneMerge::MergePolicy$OneMerge(const ::java::util::List & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_1fde8fc3, a0.this$)) {}

        void MergePolicy$OneMerge::checkAborted(const ::org::apache::lucene::store::Directory & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_checkAborted_2e261ef2], a0.this$);
        }

        ::org::apache::lucene::index::MergePolicy$DocMap MergePolicy$OneMerge::getDocMap(const ::org::apache::lucene::index::MergeState & a0) const
        {
          return ::org::apache::lucene::index::MergePolicy$DocMap(env->callObjectMethod(this$, mids$[mid_getDocMap_a6eb90c4], a0.this$));
        }

        ::org::apache::lucene::store::MergeInfo MergePolicy$OneMerge::getMergeInfo() const
        {
          return ::org::apache::lucene::store::MergeInfo(env->callObjectMethod(this$, mids$[mid_getMergeInfo_e24ac350]));
        }

        ::java::util::List MergePolicy$OneMerge::getMergeReaders() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getMergeReaders_87851566]));
        }

        jboolean MergePolicy$OneMerge::getPause() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getPause_54c6a16a]);
        }

        ::java::lang::String MergePolicy$OneMerge::segString(const ::org::apache::lucene::store::Directory & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_segString_0451c495], a0.this$));
        }

        void MergePolicy$OneMerge::setInfo(const ::org::apache::lucene::index::SegmentCommitInfo & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setInfo_6649cdf4], a0.this$);
        }

        void MergePolicy$OneMerge::setPause(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setPause_bb0c767f], a0);
        }

        jlong MergePolicy$OneMerge::totalBytesSize() const
        {
          return env->callLongMethod(this$, mids$[mid_totalBytesSize_54c6a17a]);
        }

        jint MergePolicy$OneMerge::totalNumDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_totalNumDocs_54c6a179]);
        }

        jlong MergePolicy$OneMerge::_get_estimatedMergeBytes() const
        {
          return env->getLongField(this$, fids$[fid_estimatedMergeBytes]);
        }

        void MergePolicy$OneMerge::_set_estimatedMergeBytes(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_estimatedMergeBytes], a0);
        }

        ::java::util::List MergePolicy$OneMerge::_get_segments() const
        {
          return ::java::util::List(env->getObjectField(this$, fids$[fid_segments]));
        }

        jint MergePolicy$OneMerge::_get_totalDocCount() const
        {
          return env->getIntField(this$, fids$[fid_totalDocCount]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergePolicy$OneMerge_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergePolicy$OneMerge_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MergePolicy$OneMerge_init_(t_MergePolicy$OneMerge *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MergePolicy$OneMerge_checkAborted(t_MergePolicy$OneMerge *self, PyObject *arg);
        static PyObject *t_MergePolicy$OneMerge_getDocMap(t_MergePolicy$OneMerge *self, PyObject *arg);
        static PyObject *t_MergePolicy$OneMerge_getMergeInfo(t_MergePolicy$OneMerge *self);
        static PyObject *t_MergePolicy$OneMerge_getMergeReaders(t_MergePolicy$OneMerge *self);
        static PyObject *t_MergePolicy$OneMerge_getPause(t_MergePolicy$OneMerge *self);
        static PyObject *t_MergePolicy$OneMerge_segString(t_MergePolicy$OneMerge *self, PyObject *arg);
        static PyObject *t_MergePolicy$OneMerge_setInfo(t_MergePolicy$OneMerge *self, PyObject *arg);
        static PyObject *t_MergePolicy$OneMerge_setPause(t_MergePolicy$OneMerge *self, PyObject *arg);
        static PyObject *t_MergePolicy$OneMerge_totalBytesSize(t_MergePolicy$OneMerge *self);
        static PyObject *t_MergePolicy$OneMerge_totalNumDocs(t_MergePolicy$OneMerge *self);
        static PyObject *t_MergePolicy$OneMerge_get__estimatedMergeBytes(t_MergePolicy$OneMerge *self, void *data);
        static int t_MergePolicy$OneMerge_set__estimatedMergeBytes(t_MergePolicy$OneMerge *self, PyObject *arg, void *data);
        static PyObject *t_MergePolicy$OneMerge_get__segments(t_MergePolicy$OneMerge *self, void *data);
        static PyObject *t_MergePolicy$OneMerge_get__totalDocCount(t_MergePolicy$OneMerge *self, void *data);

        static int t_MergePolicy$OneMerge_set__info(t_MergePolicy$OneMerge *self, PyObject *arg, void *data);
        static PyObject *t_MergePolicy$OneMerge_get__mergeInfo(t_MergePolicy$OneMerge *self, void *data);
        static PyObject *t_MergePolicy$OneMerge_get__mergeReaders(t_MergePolicy$OneMerge *self, void *data);
        static PyObject *t_MergePolicy$OneMerge_get__pause(t_MergePolicy$OneMerge *self, void *data);
        static int t_MergePolicy$OneMerge_set__pause(t_MergePolicy$OneMerge *self, PyObject *arg, void *data);
        static PyGetSetDef t_MergePolicy$OneMerge__fields_[] = {
          DECLARE_GETSET_FIELD(t_MergePolicy$OneMerge, estimatedMergeBytes),
          DECLARE_GET_FIELD(t_MergePolicy$OneMerge, segments),
          DECLARE_GET_FIELD(t_MergePolicy$OneMerge, totalDocCount),
          DECLARE_SET_FIELD(t_MergePolicy$OneMerge, info),
          DECLARE_GET_FIELD(t_MergePolicy$OneMerge, mergeInfo),
          DECLARE_GET_FIELD(t_MergePolicy$OneMerge, mergeReaders),
          DECLARE_GETSET_FIELD(t_MergePolicy$OneMerge, pause),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MergePolicy$OneMerge__methods_[] = {
          DECLARE_METHOD(t_MergePolicy$OneMerge, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy$OneMerge, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy$OneMerge, checkAborted, METH_O),
          DECLARE_METHOD(t_MergePolicy$OneMerge, getDocMap, METH_O),
          DECLARE_METHOD(t_MergePolicy$OneMerge, getMergeInfo, METH_NOARGS),
          DECLARE_METHOD(t_MergePolicy$OneMerge, getMergeReaders, METH_NOARGS),
          DECLARE_METHOD(t_MergePolicy$OneMerge, getPause, METH_NOARGS),
          DECLARE_METHOD(t_MergePolicy$OneMerge, segString, METH_O),
          DECLARE_METHOD(t_MergePolicy$OneMerge, setInfo, METH_O),
          DECLARE_METHOD(t_MergePolicy$OneMerge, setPause, METH_O),
          DECLARE_METHOD(t_MergePolicy$OneMerge, totalBytesSize, METH_NOARGS),
          DECLARE_METHOD(t_MergePolicy$OneMerge, totalNumDocs, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MergePolicy$OneMerge, t_MergePolicy$OneMerge, ::java::lang::Object, MergePolicy$OneMerge, t_MergePolicy$OneMerge_init_, 0, 0, t_MergePolicy$OneMerge__fields_, 0, 0);

        void t_MergePolicy$OneMerge::install(PyObject *module)
        {
          installType(&PY_TYPE(MergePolicy$OneMerge), module, "MergePolicy$OneMerge", 0);
        }

        void t_MergePolicy$OneMerge::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MergePolicy$OneMerge).tp_dict, "class_", make_descriptor(MergePolicy$OneMerge::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MergePolicy$OneMerge).tp_dict, "wrapfn_", make_descriptor(t_MergePolicy$OneMerge::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MergePolicy$OneMerge).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergePolicy$OneMerge_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergePolicy$OneMerge::initializeClass, 1)))
            return NULL;
          return t_MergePolicy$OneMerge::wrap_Object(MergePolicy$OneMerge(((t_MergePolicy$OneMerge *) arg)->object.this$));
        }
        static PyObject *t_MergePolicy$OneMerge_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergePolicy$OneMerge::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MergePolicy$OneMerge_init_(t_MergePolicy$OneMerge *self, PyObject *args, PyObject *kwds)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;
          MergePolicy$OneMerge object((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            INT_CALL(object = MergePolicy$OneMerge(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MergePolicy$OneMerge_checkAborted(t_MergePolicy$OneMerge *self, PyObject *arg)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
          {
            OBJ_CALL(self->object.checkAborted(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "checkAborted", arg);
          return NULL;
        }

        static PyObject *t_MergePolicy$OneMerge_getDocMap(t_MergePolicy$OneMerge *self, PyObject *arg)
        {
          ::org::apache::lucene::index::MergeState a0((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$DocMap result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::MergeState::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getDocMap(a0));
            return ::org::apache::lucene::index::t_MergePolicy$DocMap::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getDocMap", arg);
          return NULL;
        }

        static PyObject *t_MergePolicy$OneMerge_getMergeInfo(t_MergePolicy$OneMerge *self)
        {
          ::org::apache::lucene::store::MergeInfo result((jobject) NULL);
          OBJ_CALL(result = self->object.getMergeInfo());
          return ::org::apache::lucene::store::t_MergeInfo::wrap_Object(result);
        }

        static PyObject *t_MergePolicy$OneMerge_getMergeReaders(t_MergePolicy$OneMerge *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.getMergeReaders());
          return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(AtomicReader));
        }

        static PyObject *t_MergePolicy$OneMerge_getPause(t_MergePolicy$OneMerge *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getPause());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_MergePolicy$OneMerge_segString(t_MergePolicy$OneMerge *self, PyObject *arg)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.segString(a0));
            return j2p(result);
          }

          PyErr_SetArgsError((PyObject *) self, "segString", arg);
          return NULL;
        }

        static PyObject *t_MergePolicy$OneMerge_setInfo(t_MergePolicy$OneMerge *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentCommitInfo a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setInfo(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setInfo", arg);
          return NULL;
        }

        static PyObject *t_MergePolicy$OneMerge_setPause(t_MergePolicy$OneMerge *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setPause(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setPause", arg);
          return NULL;
        }

        static PyObject *t_MergePolicy$OneMerge_totalBytesSize(t_MergePolicy$OneMerge *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.totalBytesSize());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_MergePolicy$OneMerge_totalNumDocs(t_MergePolicy$OneMerge *self)
        {
          jint result;
          OBJ_CALL(result = self->object.totalNumDocs());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_MergePolicy$OneMerge_get__estimatedMergeBytes(t_MergePolicy$OneMerge *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_estimatedMergeBytes());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_MergePolicy$OneMerge_set__estimatedMergeBytes(t_MergePolicy$OneMerge *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_estimatedMergeBytes(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "estimatedMergeBytes", arg);
          return -1;
        }

        static PyObject *t_MergePolicy$OneMerge_get__segments(t_MergePolicy$OneMerge *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object._get_segments());
          return ::java::util::t_List::wrap_Object(value);
        }

        static PyObject *t_MergePolicy$OneMerge_get__totalDocCount(t_MergePolicy$OneMerge *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_totalDocCount());
          return PyInt_FromLong((long) value);
        }

        static int t_MergePolicy$OneMerge_set__info(t_MergePolicy$OneMerge *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::SegmentCommitInfo value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, &value))
            {
              INT_CALL(self->object.setInfo(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "info", arg);
          return -1;
        }

        static PyObject *t_MergePolicy$OneMerge_get__mergeInfo(t_MergePolicy$OneMerge *self, void *data)
        {
          ::org::apache::lucene::store::MergeInfo value((jobject) NULL);
          OBJ_CALL(value = self->object.getMergeInfo());
          return ::org::apache::lucene::store::t_MergeInfo::wrap_Object(value);
        }

        static PyObject *t_MergePolicy$OneMerge_get__mergeReaders(t_MergePolicy$OneMerge *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object.getMergeReaders());
          return ::java::util::t_List::wrap_Object(value);
        }

        static PyObject *t_MergePolicy$OneMerge_get__pause(t_MergePolicy$OneMerge *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getPause());
          Py_RETURN_BOOL(value);
        }
        static int t_MergePolicy$OneMerge_set__pause(t_MergePolicy$OneMerge *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setPause(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "pause", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/PagedBytes.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/PagedBytes$Reader.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/PagedBytes$PagedBytesDataInput.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/PagedBytes$PagedBytesDataOutput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *PagedBytes::class$ = NULL;
        jmethodID *PagedBytes::mids$ = NULL;
        bool PagedBytes::live$ = false;

        jclass PagedBytes::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/PagedBytes");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_copy_ec9e0593] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/store/IndexInput;J)V");
            mids$[mid_copy_594e5ee6] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_copyUsingLengthPrefix_7bc03dd8] = env->getMethodID(cls, "copyUsingLengthPrefix", "(Lorg/apache/lucene/util/BytesRef;)J");
            mids$[mid_freeze_6c94cff0] = env->getMethodID(cls, "freeze", "(Z)Lorg/apache/lucene/util/PagedBytes$Reader;");
            mids$[mid_getDataInput_da9ab8b7] = env->getMethodID(cls, "getDataInput", "()Lorg/apache/lucene/util/PagedBytes$PagedBytesDataInput;");
            mids$[mid_getDataOutput_279c2d0b] = env->getMethodID(cls, "getDataOutput", "()Lorg/apache/lucene/util/PagedBytes$PagedBytesDataOutput;");
            mids$[mid_getPointer_54c6a17a] = env->getMethodID(cls, "getPointer", "()J");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PagedBytes::PagedBytes(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        void PagedBytes::copy(const ::org::apache::lucene::store::IndexInput & a0, jlong a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_ec9e0593], a0.this$, a1);
        }

        void PagedBytes::copy(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_594e5ee6], a0.this$, a1.this$);
        }

        jlong PagedBytes::copyUsingLengthPrefix(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_copyUsingLengthPrefix_7bc03dd8], a0.this$);
        }

        ::org::apache::lucene::util::PagedBytes$Reader PagedBytes::freeze(jboolean a0) const
        {
          return ::org::apache::lucene::util::PagedBytes$Reader(env->callObjectMethod(this$, mids$[mid_freeze_6c94cff0], a0));
        }

        ::org::apache::lucene::util::PagedBytes$PagedBytesDataInput PagedBytes::getDataInput() const
        {
          return ::org::apache::lucene::util::PagedBytes$PagedBytesDataInput(env->callObjectMethod(this$, mids$[mid_getDataInput_da9ab8b7]));
        }

        ::org::apache::lucene::util::PagedBytes$PagedBytesDataOutput PagedBytes::getDataOutput() const
        {
          return ::org::apache::lucene::util::PagedBytes$PagedBytesDataOutput(env->callObjectMethod(this$, mids$[mid_getDataOutput_279c2d0b]));
        }

        jlong PagedBytes::getPointer() const
        {
          return env->callLongMethod(this$, mids$[mid_getPointer_54c6a17a]);
        }

        jlong PagedBytes::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_PagedBytes_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PagedBytes_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PagedBytes_init_(t_PagedBytes *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PagedBytes_copy(t_PagedBytes *self, PyObject *args);
        static PyObject *t_PagedBytes_copyUsingLengthPrefix(t_PagedBytes *self, PyObject *arg);
        static PyObject *t_PagedBytes_freeze(t_PagedBytes *self, PyObject *arg);
        static PyObject *t_PagedBytes_getDataInput(t_PagedBytes *self);
        static PyObject *t_PagedBytes_getDataOutput(t_PagedBytes *self);
        static PyObject *t_PagedBytes_getPointer(t_PagedBytes *self);
        static PyObject *t_PagedBytes_ramBytesUsed(t_PagedBytes *self);
        static PyObject *t_PagedBytes_get__dataInput(t_PagedBytes *self, void *data);
        static PyObject *t_PagedBytes_get__dataOutput(t_PagedBytes *self, void *data);
        static PyObject *t_PagedBytes_get__pointer(t_PagedBytes *self, void *data);
        static PyGetSetDef t_PagedBytes__fields_[] = {
          DECLARE_GET_FIELD(t_PagedBytes, dataInput),
          DECLARE_GET_FIELD(t_PagedBytes, dataOutput),
          DECLARE_GET_FIELD(t_PagedBytes, pointer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PagedBytes__methods_[] = {
          DECLARE_METHOD(t_PagedBytes, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PagedBytes, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PagedBytes, copy, METH_VARARGS),
          DECLARE_METHOD(t_PagedBytes, copyUsingLengthPrefix, METH_O),
          DECLARE_METHOD(t_PagedBytes, freeze, METH_O),
          DECLARE_METHOD(t_PagedBytes, getDataInput, METH_NOARGS),
          DECLARE_METHOD(t_PagedBytes, getDataOutput, METH_NOARGS),
          DECLARE_METHOD(t_PagedBytes, getPointer, METH_NOARGS),
          DECLARE_METHOD(t_PagedBytes, ramBytesUsed, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PagedBytes, t_PagedBytes, ::java::lang::Object, PagedBytes, t_PagedBytes_init_, 0, 0, t_PagedBytes__fields_, 0, 0);

        void t_PagedBytes::install(PyObject *module)
        {
          installType(&PY_TYPE(PagedBytes), module, "PagedBytes", 0);
          PyDict_SetItemString(PY_TYPE(PagedBytes).tp_dict, "Reader", make_descriptor(&PY_TYPE(PagedBytes$Reader)));
        }

        void t_PagedBytes::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PagedBytes).tp_dict, "class_", make_descriptor(PagedBytes::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PagedBytes).tp_dict, "wrapfn_", make_descriptor(t_PagedBytes::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PagedBytes).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PagedBytes_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PagedBytes::initializeClass, 1)))
            return NULL;
          return t_PagedBytes::wrap_Object(PagedBytes(((t_PagedBytes *) arg)->object.this$));
        }
        static PyObject *t_PagedBytes_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PagedBytes::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PagedBytes_init_(t_PagedBytes *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          PagedBytes object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = PagedBytes(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_PagedBytes_copy(t_PagedBytes *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
              jlong a1;

              if (!parseArgs(args, "kJ", ::org::apache::lucene::store::IndexInput::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.copy(a0, a1));
                Py_RETURN_NONE;
              }
            }
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.copy(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "copy", args);
          return NULL;
        }

        static PyObject *t_PagedBytes_copyUsingLengthPrefix(t_PagedBytes *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.copyUsingLengthPrefix(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "copyUsingLengthPrefix", arg);
          return NULL;
        }

        static PyObject *t_PagedBytes_freeze(t_PagedBytes *self, PyObject *arg)
        {
          jboolean a0;
          ::org::apache::lucene::util::PagedBytes$Reader result((jobject) NULL);

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(result = self->object.freeze(a0));
            return ::org::apache::lucene::util::t_PagedBytes$Reader::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "freeze", arg);
          return NULL;
        }

        static PyObject *t_PagedBytes_getDataInput(t_PagedBytes *self)
        {
          ::org::apache::lucene::util::PagedBytes$PagedBytesDataInput result((jobject) NULL);
          OBJ_CALL(result = self->object.getDataInput());
          return ::org::apache::lucene::util::t_PagedBytes$PagedBytesDataInput::wrap_Object(result);
        }

        static PyObject *t_PagedBytes_getDataOutput(t_PagedBytes *self)
        {
          ::org::apache::lucene::util::PagedBytes$PagedBytesDataOutput result((jobject) NULL);
          OBJ_CALL(result = self->object.getDataOutput());
          return ::org::apache::lucene::util::t_PagedBytes$PagedBytesDataOutput::wrap_Object(result);
        }

        static PyObject *t_PagedBytes_getPointer(t_PagedBytes *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getPointer());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_PagedBytes_ramBytesUsed(t_PagedBytes *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_PagedBytes_get__dataInput(t_PagedBytes *self, void *data)
        {
          ::org::apache::lucene::util::PagedBytes$PagedBytesDataInput value((jobject) NULL);
          OBJ_CALL(value = self->object.getDataInput());
          return ::org::apache::lucene::util::t_PagedBytes$PagedBytesDataInput::wrap_Object(value);
        }

        static PyObject *t_PagedBytes_get__dataOutput(t_PagedBytes *self, void *data)
        {
          ::org::apache::lucene::util::PagedBytes$PagedBytesDataOutput value((jobject) NULL);
          OBJ_CALL(value = self->object.getDataOutput());
          return ::org::apache::lucene::util::t_PagedBytes$PagedBytesDataOutput::wrap_Object(value);
        }

        static PyObject *t_PagedBytes_get__pointer(t_PagedBytes *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getPointer());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/MMapDirectory.h"
#include "java/io/File.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/LockFactory.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IOContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *MMapDirectory::class$ = NULL;
        jmethodID *MMapDirectory::mids$ = NULL;
        bool MMapDirectory::live$ = false;
        jint MMapDirectory::DEFAULT_MAX_BUFF = (jint) 0;
        jboolean MMapDirectory::UNMAP_SUPPORTED = (jboolean) 0;

        jclass MMapDirectory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/MMapDirectory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c3dacf57] = env->getMethodID(cls, "<init>", "(Ljava/io/File;)V");
            mids$[mid_init$_5f9cf6ef] = env->getMethodID(cls, "<init>", "(Ljava/io/File;Lorg/apache/lucene/store/LockFactory;)V");
            mids$[mid_init$_4d8117f3] = env->getMethodID(cls, "<init>", "(Ljava/io/File;Lorg/apache/lucene/store/LockFactory;I)V");
            mids$[mid_getMaxChunkSize_54c6a179] = env->getMethodID(cls, "getMaxChunkSize", "()I");
            mids$[mid_getUseUnmap_54c6a16a] = env->getMethodID(cls, "getUseUnmap", "()Z");
            mids$[mid_openInput_3e1b5375] = env->getMethodID(cls, "openInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_setUseUnmap_bb0c767f] = env->getMethodID(cls, "setUseUnmap", "(Z)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_MAX_BUFF = env->getStaticIntField(cls, "DEFAULT_MAX_BUFF");
            UNMAP_SUPPORTED = env->getStaticBooleanField(cls, "UNMAP_SUPPORTED");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MMapDirectory::MMapDirectory(const ::java::io::File & a0) : ::org::apache::lucene::store::FSDirectory(env->newObject(initializeClass, &mids$, mid_init$_c3dacf57, a0.this$)) {}

        MMapDirectory::MMapDirectory(const ::java::io::File & a0, const ::org::apache::lucene::store::LockFactory & a1) : ::org::apache::lucene::store::FSDirectory(env->newObject(initializeClass, &mids$, mid_init$_5f9cf6ef, a0.this$, a1.this$)) {}

        MMapDirectory::MMapDirectory(const ::java::io::File & a0, const ::org::apache::lucene::store::LockFactory & a1, jint a2) : ::org::apache::lucene::store::FSDirectory(env->newObject(initializeClass, &mids$, mid_init$_4d8117f3, a0.this$, a1.this$, a2)) {}

        jint MMapDirectory::getMaxChunkSize() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxChunkSize_54c6a179]);
        }

        jboolean MMapDirectory::getUseUnmap() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getUseUnmap_54c6a16a]);
        }

        ::org::apache::lucene::store::IndexInput MMapDirectory::openInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_openInput_3e1b5375], a0.this$, a1.this$));
        }

        void MMapDirectory::setUseUnmap(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setUseUnmap_bb0c767f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_MMapDirectory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MMapDirectory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MMapDirectory_init_(t_MMapDirectory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MMapDirectory_getMaxChunkSize(t_MMapDirectory *self);
        static PyObject *t_MMapDirectory_getUseUnmap(t_MMapDirectory *self);
        static PyObject *t_MMapDirectory_openInput(t_MMapDirectory *self, PyObject *args);
        static PyObject *t_MMapDirectory_setUseUnmap(t_MMapDirectory *self, PyObject *arg);
        static PyObject *t_MMapDirectory_get__maxChunkSize(t_MMapDirectory *self, void *data);
        static PyObject *t_MMapDirectory_get__useUnmap(t_MMapDirectory *self, void *data);
        static int t_MMapDirectory_set__useUnmap(t_MMapDirectory *self, PyObject *arg, void *data);
        static PyGetSetDef t_MMapDirectory__fields_[] = {
          DECLARE_GET_FIELD(t_MMapDirectory, maxChunkSize),
          DECLARE_GETSET_FIELD(t_MMapDirectory, useUnmap),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MMapDirectory__methods_[] = {
          DECLARE_METHOD(t_MMapDirectory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MMapDirectory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MMapDirectory, getMaxChunkSize, METH_NOARGS),
          DECLARE_METHOD(t_MMapDirectory, getUseUnmap, METH_NOARGS),
          DECLARE_METHOD(t_MMapDirectory, openInput, METH_VARARGS),
          DECLARE_METHOD(t_MMapDirectory, setUseUnmap, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MMapDirectory, t_MMapDirectory, ::org::apache::lucene::store::FSDirectory, MMapDirectory, t_MMapDirectory_init_, 0, 0, t_MMapDirectory__fields_, 0, 0);

        void t_MMapDirectory::install(PyObject *module)
        {
          installType(&PY_TYPE(MMapDirectory), module, "MMapDirectory", 0);
        }

        void t_MMapDirectory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MMapDirectory).tp_dict, "class_", make_descriptor(MMapDirectory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MMapDirectory).tp_dict, "wrapfn_", make_descriptor(t_MMapDirectory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MMapDirectory).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(MMapDirectory::initializeClass);
          PyDict_SetItemString(PY_TYPE(MMapDirectory).tp_dict, "DEFAULT_MAX_BUFF", make_descriptor(MMapDirectory::DEFAULT_MAX_BUFF));
          PyDict_SetItemString(PY_TYPE(MMapDirectory).tp_dict, "UNMAP_SUPPORTED", make_descriptor(MMapDirectory::UNMAP_SUPPORTED));
        }

        static PyObject *t_MMapDirectory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MMapDirectory::initializeClass, 1)))
            return NULL;
          return t_MMapDirectory::wrap_Object(MMapDirectory(((t_MMapDirectory *) arg)->object.this$));
        }
        static PyObject *t_MMapDirectory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MMapDirectory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MMapDirectory_init_(t_MMapDirectory *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::io::File a0((jobject) NULL);
              MMapDirectory object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
              {
                INT_CALL(object = MMapDirectory(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::io::File a0((jobject) NULL);
              ::org::apache::lucene::store::LockFactory a1((jobject) NULL);
              MMapDirectory object((jobject) NULL);

              if (!parseArgs(args, "kk", ::java::io::File::initializeClass, ::org::apache::lucene::store::LockFactory::initializeClass, &a0, &a1))
              {
                INT_CALL(object = MMapDirectory(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::java::io::File a0((jobject) NULL);
              ::org::apache::lucene::store::LockFactory a1((jobject) NULL);
              jint a2;
              MMapDirectory object((jobject) NULL);

              if (!parseArgs(args, "kkI", ::java::io::File::initializeClass, ::org::apache::lucene::store::LockFactory::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = MMapDirectory(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MMapDirectory_getMaxChunkSize(t_MMapDirectory *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxChunkSize());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_MMapDirectory_getUseUnmap(t_MMapDirectory *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getUseUnmap());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_MMapDirectory_openInput(t_MMapDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.openInput(a0, a1));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MMapDirectory), (PyObject *) self, "openInput", args, 2);
        }

        static PyObject *t_MMapDirectory_setUseUnmap(t_MMapDirectory *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setUseUnmap(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setUseUnmap", arg);
          return NULL;
        }

        static PyObject *t_MMapDirectory_get__maxChunkSize(t_MMapDirectory *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxChunkSize());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_MMapDirectory_get__useUnmap(t_MMapDirectory *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getUseUnmap());
          Py_RETURN_BOOL(value);
        }
        static int t_MMapDirectory_set__useUnmap(t_MMapDirectory *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setUseUnmap(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "useUnmap", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PagedGrowableWriter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PagedGrowableWriter::class$ = NULL;
          jmethodID *PagedGrowableWriter::mids$ = NULL;
          bool PagedGrowableWriter::live$ = false;

          jclass PagedGrowableWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PagedGrowableWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_9832dac4] = env->getMethodID(cls, "<init>", "(JIIF)V");
              mids$[mid_newMutable_48ebd249] = env->getMethodID(cls, "newMutable", "(II)Lorg/apache/lucene/util/packed/PackedInts$Mutable;");
              mids$[mid_newUnfilledCopy_b730b410] = env->getMethodID(cls, "newUnfilledCopy", "(J)Lorg/apache/lucene/util/packed/PagedGrowableWriter;");
              mids$[mid_baseRamBytesUsed_54c6a17a] = env->getMethodID(cls, "baseRamBytesUsed", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PagedGrowableWriter::PagedGrowableWriter(jlong a0, jint a1, jint a2, jfloat a3) : ::org::apache::lucene::util::packed::AbstractPagedMutable(env->newObject(initializeClass, &mids$, mid_init$_9832dac4, a0, a1, a2, a3)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PagedGrowableWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PagedGrowableWriter_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PagedGrowableWriter_of_(t_PagedGrowableWriter *self, PyObject *args);
          static int t_PagedGrowableWriter_init_(t_PagedGrowableWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PagedGrowableWriter_get__parameters_(t_PagedGrowableWriter *self, void *data);
          static PyGetSetDef t_PagedGrowableWriter__fields_[] = {
            DECLARE_GET_FIELD(t_PagedGrowableWriter, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PagedGrowableWriter__methods_[] = {
            DECLARE_METHOD(t_PagedGrowableWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PagedGrowableWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PagedGrowableWriter, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PagedGrowableWriter, t_PagedGrowableWriter, ::org::apache::lucene::util::packed::AbstractPagedMutable, PagedGrowableWriter, t_PagedGrowableWriter_init_, 0, 0, t_PagedGrowableWriter__fields_, 0, 0);
          PyObject *t_PagedGrowableWriter::wrap_Object(const PagedGrowableWriter& object, PyTypeObject *p0)
          {
            PyObject *obj = t_PagedGrowableWriter::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PagedGrowableWriter *self = (t_PagedGrowableWriter *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_PagedGrowableWriter::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_PagedGrowableWriter::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_PagedGrowableWriter *self = (t_PagedGrowableWriter *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_PagedGrowableWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(PagedGrowableWriter), module, "PagedGrowableWriter", 0);
          }

          void t_PagedGrowableWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PagedGrowableWriter).tp_dict, "class_", make_descriptor(PagedGrowableWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PagedGrowableWriter).tp_dict, "wrapfn_", make_descriptor(t_PagedGrowableWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PagedGrowableWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PagedGrowableWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PagedGrowableWriter::initializeClass, 1)))
              return NULL;
            return t_PagedGrowableWriter::wrap_Object(PagedGrowableWriter(((t_PagedGrowableWriter *) arg)->object.this$));
          }
          static PyObject *t_PagedGrowableWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PagedGrowableWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PagedGrowableWriter_of_(t_PagedGrowableWriter *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_PagedGrowableWriter_init_(t_PagedGrowableWriter *self, PyObject *args, PyObject *kwds)
          {
            jlong a0;
            jint a1;
            jint a2;
            jfloat a3;
            PagedGrowableWriter object((jobject) NULL);

            if (!parseArgs(args, "JIIF", &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = PagedGrowableWriter(a0, a1, a2, a3));
              self->object = object;
              self->parameters[0] = &::org::apache::lucene::util::packed::PY_TYPE(PagedGrowableWriter);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
          static PyObject *t_PagedGrowableWriter_get__parameters_(t_PagedGrowableWriter *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/LowerCaseFilterFactory.h"
#include "org/apache/lucene/analysis/core/LowerCaseFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *LowerCaseFilterFactory::class$ = NULL;
          jmethodID *LowerCaseFilterFactory::mids$ = NULL;
          bool LowerCaseFilterFactory::live$ = false;

          jclass LowerCaseFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/LowerCaseFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_40083866] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/core/LowerCaseFilter;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LowerCaseFilterFactory::LowerCaseFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::core::LowerCaseFilter LowerCaseFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::core::LowerCaseFilter(env->callObjectMethod(this$, mids$[mid_create_40083866], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory LowerCaseFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_LowerCaseFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LowerCaseFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LowerCaseFilterFactory_init_(t_LowerCaseFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LowerCaseFilterFactory_create(t_LowerCaseFilterFactory *self, PyObject *args);
          static PyObject *t_LowerCaseFilterFactory_getMultiTermComponent(t_LowerCaseFilterFactory *self);
          static PyObject *t_LowerCaseFilterFactory_get__multiTermComponent(t_LowerCaseFilterFactory *self, void *data);
          static PyGetSetDef t_LowerCaseFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_LowerCaseFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LowerCaseFilterFactory__methods_[] = {
            DECLARE_METHOD(t_LowerCaseFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LowerCaseFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LowerCaseFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_LowerCaseFilterFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LowerCaseFilterFactory, t_LowerCaseFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, LowerCaseFilterFactory, t_LowerCaseFilterFactory_init_, 0, 0, t_LowerCaseFilterFactory__fields_, 0, 0);

          void t_LowerCaseFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(LowerCaseFilterFactory), module, "LowerCaseFilterFactory", 0);
          }

          void t_LowerCaseFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LowerCaseFilterFactory).tp_dict, "class_", make_descriptor(LowerCaseFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LowerCaseFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_LowerCaseFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LowerCaseFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LowerCaseFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LowerCaseFilterFactory::initializeClass, 1)))
              return NULL;
            return t_LowerCaseFilterFactory::wrap_Object(LowerCaseFilterFactory(((t_LowerCaseFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_LowerCaseFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LowerCaseFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LowerCaseFilterFactory_init_(t_LowerCaseFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            LowerCaseFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = LowerCaseFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LowerCaseFilterFactory_create(t_LowerCaseFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::core::LowerCaseFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::core::t_LowerCaseFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(LowerCaseFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_LowerCaseFilterFactory_getMultiTermComponent(t_LowerCaseFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_LowerCaseFilterFactory_get__multiTermComponent(t_LowerCaseFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/en/KStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {

          ::java::lang::Class *KStemmer::class$ = NULL;
          jmethodID *KStemmer::mids$ = NULL;
          bool KStemmer::live$ = false;

          jclass KStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/en/KStemmer");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {
          static PyObject *t_KStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KStemmer_instance_(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_KStemmer__methods_[] = {
            DECLARE_METHOD(t_KStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KStemmer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(KStemmer, t_KStemmer, ::java::lang::Object, KStemmer, abstract_init, 0, 0, 0, 0, 0);

          void t_KStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(KStemmer), module, "KStemmer", 0);
          }

          void t_KStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(KStemmer).tp_dict, "class_", make_descriptor(KStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(KStemmer).tp_dict, "wrapfn_", make_descriptor(t_KStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(KStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KStemmer::initializeClass, 1)))
              return NULL;
            return t_KStemmer::wrap_Object(KStemmer(((t_KStemmer *) arg)->object.this$));
          }
          static PyObject *t_KStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/TermsConsumer.h"
#include "java/util/Comparator.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/MergeState.h"
#include "org/apache/lucene/codecs/TermStats.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/PostingsConsumer.h"
#include "org/apache/lucene/index/FieldInfo$IndexOptions.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *TermsConsumer::class$ = NULL;
        jmethodID *TermsConsumer::mids$ = NULL;
        bool TermsConsumer::live$ = false;

        jclass TermsConsumer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/TermsConsumer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_finish_42663baa] = env->getMethodID(cls, "finish", "(JJI)V");
            mids$[mid_finishTerm_e998e763] = env->getMethodID(cls, "finishTerm", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/codecs/TermStats;)V");
            mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
            mids$[mid_merge_90e0102b] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/MergeState;Lorg/apache/lucene/index/FieldInfo$IndexOptions;Lorg/apache/lucene/index/TermsEnum;)V");
            mids$[mid_startTerm_0765d42f] = env->getMethodID(cls, "startTerm", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/codecs/PostingsConsumer;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void TermsConsumer::finish(jlong a0, jlong a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_finish_42663baa], a0, a1, a2);
        }

        void TermsConsumer::finishTerm(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::codecs::TermStats & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_finishTerm_e998e763], a0.this$, a1.this$);
        }

        ::java::util::Comparator TermsConsumer::getComparator() const
        {
          return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
        }

        void TermsConsumer::merge(const ::org::apache::lucene::index::MergeState & a0, const ::org::apache::lucene::index::FieldInfo$IndexOptions & a1, const ::org::apache::lucene::index::TermsEnum & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_merge_90e0102b], a0.this$, a1.this$, a2.this$);
        }

        ::org::apache::lucene::codecs::PostingsConsumer TermsConsumer::startTerm(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return ::org::apache::lucene::codecs::PostingsConsumer(env->callObjectMethod(this$, mids$[mid_startTerm_0765d42f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_TermsConsumer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermsConsumer_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermsConsumer_finish(t_TermsConsumer *self, PyObject *args);
        static PyObject *t_TermsConsumer_finishTerm(t_TermsConsumer *self, PyObject *args);
        static PyObject *t_TermsConsumer_getComparator(t_TermsConsumer *self);
        static PyObject *t_TermsConsumer_merge(t_TermsConsumer *self, PyObject *args);
        static PyObject *t_TermsConsumer_startTerm(t_TermsConsumer *self, PyObject *arg);
        static PyObject *t_TermsConsumer_get__comparator(t_TermsConsumer *self, void *data);
        static PyGetSetDef t_TermsConsumer__fields_[] = {
          DECLARE_GET_FIELD(t_TermsConsumer, comparator),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TermsConsumer__methods_[] = {
          DECLARE_METHOD(t_TermsConsumer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermsConsumer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermsConsumer, finish, METH_VARARGS),
          DECLARE_METHOD(t_TermsConsumer, finishTerm, METH_VARARGS),
          DECLARE_METHOD(t_TermsConsumer, getComparator, METH_NOARGS),
          DECLARE_METHOD(t_TermsConsumer, merge, METH_VARARGS),
          DECLARE_METHOD(t_TermsConsumer, startTerm, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermsConsumer, t_TermsConsumer, ::java::lang::Object, TermsConsumer, abstract_init, 0, 0, t_TermsConsumer__fields_, 0, 0);

        void t_TermsConsumer::install(PyObject *module)
        {
          installType(&PY_TYPE(TermsConsumer), module, "TermsConsumer", 0);
        }

        void t_TermsConsumer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermsConsumer).tp_dict, "class_", make_descriptor(TermsConsumer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermsConsumer).tp_dict, "wrapfn_", make_descriptor(t_TermsConsumer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermsConsumer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermsConsumer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermsConsumer::initializeClass, 1)))
            return NULL;
          return t_TermsConsumer::wrap_Object(TermsConsumer(((t_TermsConsumer *) arg)->object.this$));
        }
        static PyObject *t_TermsConsumer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermsConsumer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TermsConsumer_finish(t_TermsConsumer *self, PyObject *args)
        {
          jlong a0;
          jlong a1;
          jint a2;

          if (!parseArgs(args, "JJI", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.finish(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "finish", args);
          return NULL;
        }

        static PyObject *t_TermsConsumer_finishTerm(t_TermsConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::codecs::TermStats a1((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::codecs::TermStats::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.finishTerm(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "finishTerm", args);
          return NULL;
        }

        static PyObject *t_TermsConsumer_getComparator(t_TermsConsumer *self)
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
        }

        static PyObject *t_TermsConsumer_merge(t_TermsConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergeState a0((jobject) NULL);
          ::org::apache::lucene::index::FieldInfo$IndexOptions a1((jobject) NULL);
          PyTypeObject **p1;
          ::org::apache::lucene::index::TermsEnum a2((jobject) NULL);

          if (!parseArgs(args, "kKk", ::org::apache::lucene::index::MergeState::initializeClass, ::org::apache::lucene::index::FieldInfo$IndexOptions::initializeClass, ::org::apache::lucene::index::TermsEnum::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::index::t_FieldInfo$IndexOptions::parameters_, &a2))
          {
            OBJ_CALL(self->object.merge(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "merge", args);
          return NULL;
        }

        static PyObject *t_TermsConsumer_startTerm(t_TermsConsumer *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::codecs::PostingsConsumer result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.startTerm(a0));
            return ::org::apache::lucene::codecs::t_PostingsConsumer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "startTerm", arg);
          return NULL;
        }

        static PyObject *t_TermsConsumer_get__comparator(t_TermsConsumer *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/WhitespaceTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/core/WhitespaceTokenizer.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *WhitespaceTokenizerFactory::class$ = NULL;
          jmethodID *WhitespaceTokenizerFactory::mids$ = NULL;
          bool WhitespaceTokenizerFactory::live$ = false;

          jclass WhitespaceTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/WhitespaceTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_3e31041b] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/core/WhitespaceTokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WhitespaceTokenizerFactory::WhitespaceTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::core::WhitespaceTokenizer WhitespaceTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::core::WhitespaceTokenizer(env->callObjectMethod(this$, mids$[mid_create_3e31041b], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_WhitespaceTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WhitespaceTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WhitespaceTokenizerFactory_init_(t_WhitespaceTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WhitespaceTokenizerFactory_create(t_WhitespaceTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_WhitespaceTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_WhitespaceTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WhitespaceTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WhitespaceTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WhitespaceTokenizerFactory, t_WhitespaceTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, WhitespaceTokenizerFactory, t_WhitespaceTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_WhitespaceTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(WhitespaceTokenizerFactory), module, "WhitespaceTokenizerFactory", 0);
          }

          void t_WhitespaceTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WhitespaceTokenizerFactory).tp_dict, "class_", make_descriptor(WhitespaceTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WhitespaceTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_WhitespaceTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WhitespaceTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_WhitespaceTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WhitespaceTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_WhitespaceTokenizerFactory::wrap_Object(WhitespaceTokenizerFactory(((t_WhitespaceTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_WhitespaceTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WhitespaceTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WhitespaceTokenizerFactory_init_(t_WhitespaceTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            WhitespaceTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = WhitespaceTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_WhitespaceTokenizerFactory_create(t_WhitespaceTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::core::WhitespaceTokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::core::t_WhitespaceTokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(WhitespaceTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexableFieldType.h"
#include "org/apache/lucene/index/FieldInfo$IndexOptions.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/FieldInfo$DocValuesType.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexableFieldType::class$ = NULL;
        jmethodID *IndexableFieldType::mids$ = NULL;
        bool IndexableFieldType::live$ = false;

        jclass IndexableFieldType::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexableFieldType");

            mids$ = new jmethodID[max_mid];
            mids$[mid_docValueType_db3dc573] = env->getMethodID(cls, "docValueType", "()Lorg/apache/lucene/index/FieldInfo$DocValuesType;");
            mids$[mid_indexOptions_e1b704de] = env->getMethodID(cls, "indexOptions", "()Lorg/apache/lucene/index/FieldInfo$IndexOptions;");
            mids$[mid_indexed_54c6a16a] = env->getMethodID(cls, "indexed", "()Z");
            mids$[mid_omitNorms_54c6a16a] = env->getMethodID(cls, "omitNorms", "()Z");
            mids$[mid_storeTermVectorOffsets_54c6a16a] = env->getMethodID(cls, "storeTermVectorOffsets", "()Z");
            mids$[mid_storeTermVectorPayloads_54c6a16a] = env->getMethodID(cls, "storeTermVectorPayloads", "()Z");
            mids$[mid_storeTermVectorPositions_54c6a16a] = env->getMethodID(cls, "storeTermVectorPositions", "()Z");
            mids$[mid_storeTermVectors_54c6a16a] = env->getMethodID(cls, "storeTermVectors", "()Z");
            mids$[mid_stored_54c6a16a] = env->getMethodID(cls, "stored", "()Z");
            mids$[mid_tokenized_54c6a16a] = env->getMethodID(cls, "tokenized", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::FieldInfo$DocValuesType IndexableFieldType::docValueType() const
        {
          return ::org::apache::lucene::index::FieldInfo$DocValuesType(env->callObjectMethod(this$, mids$[mid_docValueType_db3dc573]));
        }

        ::org::apache::lucene::index::FieldInfo$IndexOptions IndexableFieldType::indexOptions() const
        {
          return ::org::apache::lucene::index::FieldInfo$IndexOptions(env->callObjectMethod(this$, mids$[mid_indexOptions_e1b704de]));
        }

        jboolean IndexableFieldType::indexed() const
        {
          return env->callBooleanMethod(this$, mids$[mid_indexed_54c6a16a]);
        }

        jboolean IndexableFieldType::omitNorms() const
        {
          return env->callBooleanMethod(this$, mids$[mid_omitNorms_54c6a16a]);
        }

        jboolean IndexableFieldType::storeTermVectorOffsets() const
        {
          return env->callBooleanMethod(this$, mids$[mid_storeTermVectorOffsets_54c6a16a]);
        }

        jboolean IndexableFieldType::storeTermVectorPayloads() const
        {
          return env->callBooleanMethod(this$, mids$[mid_storeTermVectorPayloads_54c6a16a]);
        }

        jboolean IndexableFieldType::storeTermVectorPositions() const
        {
          return env->callBooleanMethod(this$, mids$[mid_storeTermVectorPositions_54c6a16a]);
        }

        jboolean IndexableFieldType::storeTermVectors() const
        {
          return env->callBooleanMethod(this$, mids$[mid_storeTermVectors_54c6a16a]);
        }

        jboolean IndexableFieldType::stored() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stored_54c6a16a]);
        }

        jboolean IndexableFieldType::tokenized() const
        {
          return env->callBooleanMethod(this$, mids$[mid_tokenized_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexableFieldType_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexableFieldType_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexableFieldType_docValueType(t_IndexableFieldType *self);
        static PyObject *t_IndexableFieldType_indexOptions(t_IndexableFieldType *self);
        static PyObject *t_IndexableFieldType_indexed(t_IndexableFieldType *self);
        static PyObject *t_IndexableFieldType_omitNorms(t_IndexableFieldType *self);
        static PyObject *t_IndexableFieldType_storeTermVectorOffsets(t_IndexableFieldType *self);
        static PyObject *t_IndexableFieldType_storeTermVectorPayloads(t_IndexableFieldType *self);
        static PyObject *t_IndexableFieldType_storeTermVectorPositions(t_IndexableFieldType *self);
        static PyObject *t_IndexableFieldType_storeTermVectors(t_IndexableFieldType *self);
        static PyObject *t_IndexableFieldType_stored(t_IndexableFieldType *self);
        static PyObject *t_IndexableFieldType_tokenized(t_IndexableFieldType *self);

        static PyMethodDef t_IndexableFieldType__methods_[] = {
          DECLARE_METHOD(t_IndexableFieldType, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexableFieldType, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexableFieldType, docValueType, METH_NOARGS),
          DECLARE_METHOD(t_IndexableFieldType, indexOptions, METH_NOARGS),
          DECLARE_METHOD(t_IndexableFieldType, indexed, METH_NOARGS),
          DECLARE_METHOD(t_IndexableFieldType, omitNorms, METH_NOARGS),
          DECLARE_METHOD(t_IndexableFieldType, storeTermVectorOffsets, METH_NOARGS),
          DECLARE_METHOD(t_IndexableFieldType, storeTermVectorPayloads, METH_NOARGS),
          DECLARE_METHOD(t_IndexableFieldType, storeTermVectorPositions, METH_NOARGS),
          DECLARE_METHOD(t_IndexableFieldType, storeTermVectors, METH_NOARGS),
          DECLARE_METHOD(t_IndexableFieldType, stored, METH_NOARGS),
          DECLARE_METHOD(t_IndexableFieldType, tokenized, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexableFieldType, t_IndexableFieldType, ::java::lang::Object, IndexableFieldType, abstract_init, 0, 0, 0, 0, 0);

        void t_IndexableFieldType::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexableFieldType), module, "IndexableFieldType", 0);
        }

        void t_IndexableFieldType::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexableFieldType).tp_dict, "class_", make_descriptor(IndexableFieldType::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexableFieldType).tp_dict, "wrapfn_", make_descriptor(t_IndexableFieldType::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexableFieldType).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexableFieldType_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexableFieldType::initializeClass, 1)))
            return NULL;
          return t_IndexableFieldType::wrap_Object(IndexableFieldType(((t_IndexableFieldType *) arg)->object.this$));
        }
        static PyObject *t_IndexableFieldType_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexableFieldType::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexableFieldType_docValueType(t_IndexableFieldType *self)
        {
          ::org::apache::lucene::index::FieldInfo$DocValuesType result((jobject) NULL);
          OBJ_CALL(result = self->object.docValueType());
          return ::org::apache::lucene::index::t_FieldInfo$DocValuesType::wrap_Object(result);
        }

        static PyObject *t_IndexableFieldType_indexOptions(t_IndexableFieldType *self)
        {
          ::org::apache::lucene::index::FieldInfo$IndexOptions result((jobject) NULL);
          OBJ_CALL(result = self->object.indexOptions());
          return ::org::apache::lucene::index::t_FieldInfo$IndexOptions::wrap_Object(result);
        }

        static PyObject *t_IndexableFieldType_indexed(t_IndexableFieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.indexed());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexableFieldType_omitNorms(t_IndexableFieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.omitNorms());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexableFieldType_storeTermVectorOffsets(t_IndexableFieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.storeTermVectorOffsets());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexableFieldType_storeTermVectorPayloads(t_IndexableFieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.storeTermVectorPayloads());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexableFieldType_storeTermVectorPositions(t_IndexableFieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.storeTermVectorPositions());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexableFieldType_storeTermVectors(t_IndexableFieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.storeTermVectors());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexableFieldType_stored(t_IndexableFieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.stored());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexableFieldType_tokenized(t_IndexableFieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.tokenized());
          Py_RETURN_BOOL(result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TopScoreDocCollector.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/ScoreDoc.h"
#include "org/apache/lucene/search/Scorer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TopScoreDocCollector::class$ = NULL;
        jmethodID *TopScoreDocCollector::mids$ = NULL;
        bool TopScoreDocCollector::live$ = false;

        jclass TopScoreDocCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TopScoreDocCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_create_ed0bbc86] = env->getStaticMethodID(cls, "create", "(IZ)Lorg/apache/lucene/search/TopScoreDocCollector;");
            mids$[mid_create_113a7b62] = env->getStaticMethodID(cls, "create", "(ILorg/apache/lucene/search/ScoreDoc;Z)Lorg/apache/lucene/search/TopScoreDocCollector;");
            mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
            mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");
            mids$[mid_newTopDocs_a5bceb12] = env->getMethodID(cls, "newTopDocs", "([Lorg/apache/lucene/search/ScoreDoc;I)Lorg/apache/lucene/search/TopDocs;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TopScoreDocCollector TopScoreDocCollector::create(jint a0, jboolean a1)
        {
          jclass cls = env->getClass(initializeClass);
          return TopScoreDocCollector(env->callStaticObjectMethod(cls, mids$[mid_create_ed0bbc86], a0, a1));
        }

        TopScoreDocCollector TopScoreDocCollector::create(jint a0, const ::org::apache::lucene::search::ScoreDoc & a1, jboolean a2)
        {
          jclass cls = env->getClass(initializeClass);
          return TopScoreDocCollector(env->callStaticObjectMethod(cls, mids$[mid_create_113a7b62], a0, a1.this$, a2));
        }

        void TopScoreDocCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
        }

        void TopScoreDocCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TopScoreDocCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopScoreDocCollector_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopScoreDocCollector_of_(t_TopScoreDocCollector *self, PyObject *args);
        static PyObject *t_TopScoreDocCollector_create(PyTypeObject *type, PyObject *args);
        static PyObject *t_TopScoreDocCollector_setNextReader(t_TopScoreDocCollector *self, PyObject *args);
        static PyObject *t_TopScoreDocCollector_setScorer(t_TopScoreDocCollector *self, PyObject *args);
        static int t_TopScoreDocCollector_set__nextReader(t_TopScoreDocCollector *self, PyObject *arg, void *data);
        static int t_TopScoreDocCollector_set__scorer(t_TopScoreDocCollector *self, PyObject *arg, void *data);
        static PyObject *t_TopScoreDocCollector_get__parameters_(t_TopScoreDocCollector *self, void *data);
        static PyGetSetDef t_TopScoreDocCollector__fields_[] = {
          DECLARE_SET_FIELD(t_TopScoreDocCollector, nextReader),
          DECLARE_SET_FIELD(t_TopScoreDocCollector, scorer),
          DECLARE_GET_FIELD(t_TopScoreDocCollector, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TopScoreDocCollector__methods_[] = {
          DECLARE_METHOD(t_TopScoreDocCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopScoreDocCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopScoreDocCollector, of_, METH_VARARGS),
          DECLARE_METHOD(t_TopScoreDocCollector, create, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_TopScoreDocCollector, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_TopScoreDocCollector, setScorer, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TopScoreDocCollector, t_TopScoreDocCollector, ::org::apache::lucene::search::TopDocsCollector, TopScoreDocCollector, abstract_init, 0, 0, t_TopScoreDocCollector__fields_, 0, 0);
        PyObject *t_TopScoreDocCollector::wrap_Object(const TopScoreDocCollector& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopScoreDocCollector::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopScoreDocCollector *self = (t_TopScoreDocCollector *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_TopScoreDocCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopScoreDocCollector::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopScoreDocCollector *self = (t_TopScoreDocCollector *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_TopScoreDocCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(TopScoreDocCollector), module, "TopScoreDocCollector", 0);
        }

        void t_TopScoreDocCollector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TopScoreDocCollector).tp_dict, "class_", make_descriptor(TopScoreDocCollector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TopScoreDocCollector).tp_dict, "wrapfn_", make_descriptor(t_TopScoreDocCollector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TopScoreDocCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TopScoreDocCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TopScoreDocCollector::initializeClass, 1)))
            return NULL;
          return t_TopScoreDocCollector::wrap_Object(TopScoreDocCollector(((t_TopScoreDocCollector *) arg)->object.this$));
        }
        static PyObject *t_TopScoreDocCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TopScoreDocCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TopScoreDocCollector_of_(t_TopScoreDocCollector *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_TopScoreDocCollector_create(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              jint a0;
              jboolean a1;
              TopScoreDocCollector result((jobject) NULL);

              if (!parseArgs(args, "IZ", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::TopScoreDocCollector::create(a0, a1));
                return t_TopScoreDocCollector::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              jint a0;
              ::org::apache::lucene::search::ScoreDoc a1((jobject) NULL);
              jboolean a2;
              TopScoreDocCollector result((jobject) NULL);

              if (!parseArgs(args, "IkZ", ::org::apache::lucene::search::ScoreDoc::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::TopScoreDocCollector::create(a0, a1, a2));
                return t_TopScoreDocCollector::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "create", args);
          return NULL;
        }

        static PyObject *t_TopScoreDocCollector_setNextReader(t_TopScoreDocCollector *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setNextReader(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TopScoreDocCollector), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_TopScoreDocCollector_setScorer(t_TopScoreDocCollector *self, PyObject *args)
        {
          ::org::apache::lucene::search::Scorer a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setScorer(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TopScoreDocCollector), (PyObject *) self, "setScorer", args, 2);
        }
        static PyObject *t_TopScoreDocCollector_get__parameters_(t_TopScoreDocCollector *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static int t_TopScoreDocCollector_set__nextReader(t_TopScoreDocCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_TopScoreDocCollector_set__scorer(t_TopScoreDocCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Scorer value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
            {
              INT_CALL(self->object.setScorer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "scorer", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/BytesRefHash.h"
#include "org/apache/lucene/util/BytesRefHash$BytesStartArray.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/Comparator.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/ByteBlockPool.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *BytesRefHash::class$ = NULL;
        jmethodID *BytesRefHash::mids$ = NULL;
        bool BytesRefHash::live$ = false;
        jint BytesRefHash::DEFAULT_CAPACITY = (jint) 0;

        jclass BytesRefHash::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/BytesRefHash");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_ca821364] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/ByteBlockPool;)V");
            mids$[mid_init$_348f324e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/ByteBlockPool;ILorg/apache/lucene/util/BytesRefHash$BytesStartArray;)V");
            mids$[mid_add_7bc03ddb] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_addByPoolOffset_39c7bd23] = env->getMethodID(cls, "addByPoolOffset", "(I)I");
            mids$[mid_byteStart_39c7bd23] = env->getMethodID(cls, "byteStart", "(I)I");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_clear_bb0c767f] = env->getMethodID(cls, "clear", "(Z)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_find_7bc03ddb] = env->getMethodID(cls, "find", "(Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_get_ce5e2005] = env->getMethodID(cls, "get", "(ILorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_reinit_54c6a166] = env->getMethodID(cls, "reinit", "()V");
            mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
            mids$[mid_sort_402cb660] = env->getMethodID(cls, "sort", "(Ljava/util/Comparator;)[I");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_CAPACITY = env->getStaticIntField(cls, "DEFAULT_CAPACITY");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BytesRefHash::BytesRefHash() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        BytesRefHash::BytesRefHash(const ::org::apache::lucene::util::ByteBlockPool & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ca821364, a0.this$)) {}

        BytesRefHash::BytesRefHash(const ::org::apache::lucene::util::ByteBlockPool & a0, jint a1, const ::org::apache::lucene::util::BytesRefHash$BytesStartArray & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_348f324e, a0.this$, a1, a2.this$)) {}

        jint BytesRefHash::add(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_add_7bc03ddb], a0.this$);
        }

        jint BytesRefHash::addByPoolOffset(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_addByPoolOffset_39c7bd23], a0);
        }

        jint BytesRefHash::byteStart(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_byteStart_39c7bd23], a0);
        }

        void BytesRefHash::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        void BytesRefHash::clear(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clear_bb0c767f], a0);
        }

        void BytesRefHash::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        jint BytesRefHash::find(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_find_7bc03ddb], a0.this$);
        }

        ::org::apache::lucene::util::BytesRef BytesRefHash::get(jint a0, const ::org::apache::lucene::util::BytesRef & a1) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_get_ce5e2005], a0, a1.this$));
        }

        void BytesRefHash::reinit() const
        {
          env->callVoidMethod(this$, mids$[mid_reinit_54c6a166]);
        }

        jint BytesRefHash::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
        }

        JArray< jint > BytesRefHash::sort(const ::java::util::Comparator & a0) const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_sort_402cb660], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/BytesRefHash$DirectBytesStartArray.h"
#include "org/apache/lucene/util/BytesRefHash$MaxBytesLengthExceededException.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_BytesRefHash_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BytesRefHash_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BytesRefHash_init_(t_BytesRefHash *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BytesRefHash_add(t_BytesRefHash *self, PyObject *arg);
        static PyObject *t_BytesRefHash_addByPoolOffset(t_BytesRefHash *self, PyObject *arg);
        static PyObject *t_BytesRefHash_byteStart(t_BytesRefHash *self, PyObject *arg);
        static PyObject *t_BytesRefHash_clear(t_BytesRefHash *self, PyObject *args);
        static PyObject *t_BytesRefHash_close(t_BytesRefHash *self);
        static PyObject *t_BytesRefHash_find(t_BytesRefHash *self, PyObject *arg);
        static PyObject *t_BytesRefHash_get(t_BytesRefHash *self, PyObject *args);
        static PyObject *t_BytesRefHash_reinit(t_BytesRefHash *self);
        static PyObject *t_BytesRefHash_size(t_BytesRefHash *self);
        static PyObject *t_BytesRefHash_sort(t_BytesRefHash *self, PyObject *arg);

        static PyMethodDef t_BytesRefHash__methods_[] = {
          DECLARE_METHOD(t_BytesRefHash, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefHash, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefHash, add, METH_O),
          DECLARE_METHOD(t_BytesRefHash, addByPoolOffset, METH_O),
          DECLARE_METHOD(t_BytesRefHash, byteStart, METH_O),
          DECLARE_METHOD(t_BytesRefHash, clear, METH_VARARGS),
          DECLARE_METHOD(t_BytesRefHash, close, METH_NOARGS),
          DECLARE_METHOD(t_BytesRefHash, find, METH_O),
          DECLARE_METHOD(t_BytesRefHash, get, METH_VARARGS),
          DECLARE_METHOD(t_BytesRefHash, reinit, METH_NOARGS),
          DECLARE_METHOD(t_BytesRefHash, size, METH_NOARGS),
          DECLARE_METHOD(t_BytesRefHash, sort, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BytesRefHash, t_BytesRefHash, ::java::lang::Object, BytesRefHash, t_BytesRefHash_init_, 0, 0, 0, 0, 0);

        void t_BytesRefHash::install(PyObject *module)
        {
          installType(&PY_TYPE(BytesRefHash), module, "BytesRefHash", 0);
          PyDict_SetItemString(PY_TYPE(BytesRefHash).tp_dict, "DirectBytesStartArray", make_descriptor(&PY_TYPE(BytesRefHash$DirectBytesStartArray)));
          PyDict_SetItemString(PY_TYPE(BytesRefHash).tp_dict, "BytesStartArray", make_descriptor(&PY_TYPE(BytesRefHash$BytesStartArray)));
          PyDict_SetItemString(PY_TYPE(BytesRefHash).tp_dict, "MaxBytesLengthExceededException", make_descriptor(&PY_TYPE(BytesRefHash$MaxBytesLengthExceededException)));
        }

        void t_BytesRefHash::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BytesRefHash).tp_dict, "class_", make_descriptor(BytesRefHash::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BytesRefHash).tp_dict, "wrapfn_", make_descriptor(t_BytesRefHash::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BytesRefHash).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(BytesRefHash::initializeClass);
          PyDict_SetItemString(PY_TYPE(BytesRefHash).tp_dict, "DEFAULT_CAPACITY", make_descriptor(BytesRefHash::DEFAULT_CAPACITY));
        }

        static PyObject *t_BytesRefHash_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BytesRefHash::initializeClass, 1)))
            return NULL;
          return t_BytesRefHash::wrap_Object(BytesRefHash(((t_BytesRefHash *) arg)->object.this$));
        }
        static PyObject *t_BytesRefHash_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BytesRefHash::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BytesRefHash_init_(t_BytesRefHash *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              BytesRefHash object((jobject) NULL);

              INT_CALL(object = BytesRefHash());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              ::org::apache::lucene::util::ByteBlockPool a0((jobject) NULL);
              BytesRefHash object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::ByteBlockPool::initializeClass, &a0))
              {
                INT_CALL(object = BytesRefHash(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::org::apache::lucene::util::ByteBlockPool a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::util::BytesRefHash$BytesStartArray a2((jobject) NULL);
              BytesRefHash object((jobject) NULL);

              if (!parseArgs(args, "kIk", ::org::apache::lucene::util::ByteBlockPool::initializeClass, ::org::apache::lucene::util::BytesRefHash$BytesStartArray::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = BytesRefHash(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BytesRefHash_add(t_BytesRefHash *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.add(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "add", arg);
          return NULL;
        }

        static PyObject *t_BytesRefHash_addByPoolOffset(t_BytesRefHash *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.addByPoolOffset(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "addByPoolOffset", arg);
          return NULL;
        }

        static PyObject *t_BytesRefHash_byteStart(t_BytesRefHash *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.byteStart(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "byteStart", arg);
          return NULL;
        }

        static PyObject *t_BytesRefHash_clear(t_BytesRefHash *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }
            break;
           case 1:
            {
              jboolean a0;

              if (!parseArgs(args, "Z", &a0))
              {
                OBJ_CALL(self->object.clear(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "clear", args);
          return NULL;
        }

        static PyObject *t_BytesRefHash_close(t_BytesRefHash *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_BytesRefHash_find(t_BytesRefHash *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.find(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "find", arg);
          return NULL;
        }

        static PyObject *t_BytesRefHash_get(t_BytesRefHash *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, "Ik", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.get(a0, a1));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", args);
          return NULL;
        }

        static PyObject *t_BytesRefHash_reinit(t_BytesRefHash *self)
        {
          OBJ_CALL(self->object.reinit());
          Py_RETURN_NONE;
        }

        static PyObject *t_BytesRefHash_size(t_BytesRefHash *self)
        {
          jint result;
          OBJ_CALL(result = self->object.size());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_BytesRefHash_sort(t_BytesRefHash *self, PyObject *arg)
        {
          ::java::util::Comparator a0((jobject) NULL);
          PyTypeObject **p0;
          JArray< jint > result((jobject) NULL);

          if (!parseArg(arg, "K", ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(result = self->object.sort(a0));
            return result.wrap();
          }

          PyErr_SetArgsError((PyObject *) self, "sort", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/LongField.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/document/Field$Store.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *LongField::class$ = NULL;
        jmethodID *LongField::mids$ = NULL;
        bool LongField::live$ = false;
        ::org::apache::lucene::document::FieldType *LongField::TYPE_NOT_STORED = NULL;
        ::org::apache::lucene::document::FieldType *LongField::TYPE_STORED = NULL;

        jclass LongField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/LongField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_45798648] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;JLorg/apache/lucene/document/Field$Store;)V");
            mids$[mid_init$_4cb133a7] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;JLorg/apache/lucene/document/FieldType;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE_NOT_STORED = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_NOT_STORED", "Lorg/apache/lucene/document/FieldType;"));
            TYPE_STORED = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_STORED", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LongField::LongField(const ::java::lang::String & a0, jlong a1, const ::org::apache::lucene::document::Field$Store & a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_45798648, a0.this$, a1, a2.this$)) {}

        LongField::LongField(const ::java::lang::String & a0, jlong a1, const ::org::apache::lucene::document::FieldType & a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_4cb133a7, a0.this$, a1, a2.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_LongField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LongField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LongField_init_(t_LongField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_LongField__methods_[] = {
          DECLARE_METHOD(t_LongField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LongField, t_LongField, ::org::apache::lucene::document::Field, LongField, t_LongField_init_, 0, 0, 0, 0, 0);

        void t_LongField::install(PyObject *module)
        {
          installType(&PY_TYPE(LongField), module, "LongField", 0);
        }

        void t_LongField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LongField).tp_dict, "class_", make_descriptor(LongField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LongField).tp_dict, "wrapfn_", make_descriptor(t_LongField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LongField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(LongField::initializeClass);
          PyDict_SetItemString(PY_TYPE(LongField).tp_dict, "TYPE_NOT_STORED", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*LongField::TYPE_NOT_STORED)));
          PyDict_SetItemString(PY_TYPE(LongField).tp_dict, "TYPE_STORED", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*LongField::TYPE_STORED)));
        }

        static PyObject *t_LongField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LongField::initializeClass, 1)))
            return NULL;
          return t_LongField::wrap_Object(LongField(((t_LongField *) arg)->object.this$));
        }
        static PyObject *t_LongField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LongField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LongField_init_(t_LongField *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              jlong a1;
              ::org::apache::lucene::document::Field$Store a2((jobject) NULL);
              PyTypeObject **p2;
              LongField object((jobject) NULL);

              if (!parseArgs(args, "sJK", ::org::apache::lucene::document::Field$Store::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::document::t_Field$Store::parameters_))
              {
                INT_CALL(object = LongField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jlong a1;
              ::org::apache::lucene::document::FieldType a2((jobject) NULL);
              LongField object((jobject) NULL);

              if (!parseArgs(args, "sJk", ::org::apache::lucene::document::FieldType::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = LongField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/analyzing/FuzzySuggester.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {

            ::java::lang::Class *FuzzySuggester::class$ = NULL;
            jmethodID *FuzzySuggester::mids$ = NULL;
            bool FuzzySuggester::live$ = false;
            jint FuzzySuggester::DEFAULT_MAX_EDITS = (jint) 0;
            jint FuzzySuggester::DEFAULT_MIN_FUZZY_LENGTH = (jint) 0;
            jint FuzzySuggester::DEFAULT_NON_FUZZY_PREFIX = (jint) 0;
            jboolean FuzzySuggester::DEFAULT_TRANSPOSITIONS = (jboolean) 0;
            jboolean FuzzySuggester::DEFAULT_UNICODE_AWARE = (jboolean) 0;

            jclass FuzzySuggester::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/analyzing/FuzzySuggester");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_31619410] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");
                mids$[mid_init$_6a3c5772] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/Analyzer;)V");
                mids$[mid_init$_ec63f0d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/Analyzer;IIIZIZIIZ)V");
                mids$[mid_convertAutomaton_7aca8e1f] = env->getMethodID(cls, "convertAutomaton", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");
                mids$[mid_getFullPrefixPaths_a9ea3855] = env->getMethodID(cls, "getFullPrefixPaths", "(Ljava/util/List;Lorg/apache/lucene/util/automaton/Automaton;Lorg/apache/lucene/util/fst/FST;)Ljava/util/List;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                DEFAULT_MAX_EDITS = env->getStaticIntField(cls, "DEFAULT_MAX_EDITS");
                DEFAULT_MIN_FUZZY_LENGTH = env->getStaticIntField(cls, "DEFAULT_MIN_FUZZY_LENGTH");
                DEFAULT_NON_FUZZY_PREFIX = env->getStaticIntField(cls, "DEFAULT_NON_FUZZY_PREFIX");
                DEFAULT_TRANSPOSITIONS = env->getStaticBooleanField(cls, "DEFAULT_TRANSPOSITIONS");
                DEFAULT_UNICODE_AWARE = env->getStaticBooleanField(cls, "DEFAULT_UNICODE_AWARE");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FuzzySuggester::FuzzySuggester(const ::org::apache::lucene::analysis::Analyzer & a0) : ::org::apache::lucene::search::suggest::analyzing::AnalyzingSuggester(env->newObject(initializeClass, &mids$, mid_init$_31619410, a0.this$)) {}

            FuzzySuggester::FuzzySuggester(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::org::apache::lucene::search::suggest::analyzing::AnalyzingSuggester(env->newObject(initializeClass, &mids$, mid_init$_6a3c5772, a0.this$, a1.this$)) {}

            FuzzySuggester::FuzzySuggester(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::analysis::Analyzer & a1, jint a2, jint a3, jint a4, jboolean a5, jint a6, jboolean a7, jint a8, jint a9, jboolean a10) : ::org::apache::lucene::search::suggest::analyzing::AnalyzingSuggester(env->newObject(initializeClass, &mids$, mid_init$_ec63f0d3, a0.this$, a1.this$, a2, a3, a4, a5, a6, a7, a8, a9, a10)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {
            static PyObject *t_FuzzySuggester_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FuzzySuggester_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FuzzySuggester_init_(t_FuzzySuggester *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_FuzzySuggester__methods_[] = {
              DECLARE_METHOD(t_FuzzySuggester, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FuzzySuggester, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FuzzySuggester, t_FuzzySuggester, ::org::apache::lucene::search::suggest::analyzing::AnalyzingSuggester, FuzzySuggester, t_FuzzySuggester_init_, 0, 0, 0, 0, 0);

            void t_FuzzySuggester::install(PyObject *module)
            {
              installType(&PY_TYPE(FuzzySuggester), module, "FuzzySuggester", 0);
            }

            void t_FuzzySuggester::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FuzzySuggester).tp_dict, "class_", make_descriptor(FuzzySuggester::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FuzzySuggester).tp_dict, "wrapfn_", make_descriptor(t_FuzzySuggester::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FuzzySuggester).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(FuzzySuggester::initializeClass);
              PyDict_SetItemString(PY_TYPE(FuzzySuggester).tp_dict, "DEFAULT_MAX_EDITS", make_descriptor(FuzzySuggester::DEFAULT_MAX_EDITS));
              PyDict_SetItemString(PY_TYPE(FuzzySuggester).tp_dict, "DEFAULT_MIN_FUZZY_LENGTH", make_descriptor(FuzzySuggester::DEFAULT_MIN_FUZZY_LENGTH));
              PyDict_SetItemString(PY_TYPE(FuzzySuggester).tp_dict, "DEFAULT_NON_FUZZY_PREFIX", make_descriptor(FuzzySuggester::DEFAULT_NON_FUZZY_PREFIX));
              PyDict_SetItemString(PY_TYPE(FuzzySuggester).tp_dict, "DEFAULT_TRANSPOSITIONS", make_descriptor(FuzzySuggester::DEFAULT_TRANSPOSITIONS));
              PyDict_SetItemString(PY_TYPE(FuzzySuggester).tp_dict, "DEFAULT_UNICODE_AWARE", make_descriptor(FuzzySuggester::DEFAULT_UNICODE_AWARE));
            }

            static PyObject *t_FuzzySuggester_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FuzzySuggester::initializeClass, 1)))
                return NULL;
              return t_FuzzySuggester::wrap_Object(FuzzySuggester(((t_FuzzySuggester *) arg)->object.this$));
            }
            static PyObject *t_FuzzySuggester_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FuzzySuggester::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FuzzySuggester_init_(t_FuzzySuggester *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  FuzzySuggester object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
                  {
                    INT_CALL(object = FuzzySuggester(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                  FuzzySuggester object((jobject) NULL);

                  if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = FuzzySuggester(a0, a1));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 11:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                  jint a2;
                  jint a3;
                  jint a4;
                  jboolean a5;
                  jint a6;
                  jboolean a7;
                  jint a8;
                  jint a9;
                  jboolean a10;
                  FuzzySuggester object((jobject) NULL);

                  if (!parseArgs(args, "kkIIIZIZIIZ", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10))
                  {
                    INT_CALL(object = FuzzySuggester(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/id/IndonesianStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace id {

          ::java::lang::Class *IndonesianStemFilter::class$ = NULL;
          jmethodID *IndonesianStemFilter::mids$ = NULL;
          bool IndonesianStemFilter::live$ = false;

          jclass IndonesianStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/id/IndonesianStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_a19d9eb9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Z)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IndonesianStemFilter::IndonesianStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          IndonesianStemFilter::IndonesianStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jboolean a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_a19d9eb9, a0.this$, a1)) {}

          jboolean IndonesianStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace id {
          static PyObject *t_IndonesianStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndonesianStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IndonesianStemFilter_init_(t_IndonesianStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IndonesianStemFilter_incrementToken(t_IndonesianStemFilter *self, PyObject *args);

          static PyMethodDef t_IndonesianStemFilter__methods_[] = {
            DECLARE_METHOD(t_IndonesianStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndonesianStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndonesianStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IndonesianStemFilter, t_IndonesianStemFilter, ::org::apache::lucene::analysis::TokenFilter, IndonesianStemFilter, t_IndonesianStemFilter_init_, 0, 0, 0, 0, 0);

          void t_IndonesianStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(IndonesianStemFilter), module, "IndonesianStemFilter", 0);
          }

          void t_IndonesianStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IndonesianStemFilter).tp_dict, "class_", make_descriptor(IndonesianStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IndonesianStemFilter).tp_dict, "wrapfn_", make_descriptor(t_IndonesianStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IndonesianStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IndonesianStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IndonesianStemFilter::initializeClass, 1)))
              return NULL;
            return t_IndonesianStemFilter::wrap_Object(IndonesianStemFilter(((t_IndonesianStemFilter *) arg)->object.this$));
          }
          static PyObject *t_IndonesianStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IndonesianStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IndonesianStemFilter_init_(t_IndonesianStemFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                IndonesianStemFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = IndonesianStemFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jboolean a1;
                IndonesianStemFilter object((jobject) NULL);

                if (!parseArgs(args, "kZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = IndonesianStemFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IndonesianStemFilter_incrementToken(t_IndonesianStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(IndonesianStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cjk/CJKAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {

          ::java::lang::Class *CJKAnalyzer::class$ = NULL;
          jmethodID *CJKAnalyzer::mids$ = NULL;
          bool CJKAnalyzer::live$ = false;
          ::java::lang::String *CJKAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass CJKAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cjk/CJKAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CJKAnalyzer::CJKAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          CJKAnalyzer::CJKAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet CJKAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {
          static PyObject *t_CJKAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CJKAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CJKAnalyzer_init_(t_CJKAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CJKAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_CJKAnalyzer_get__defaultStopSet(t_CJKAnalyzer *self, void *data);
          static PyGetSetDef t_CJKAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_CJKAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CJKAnalyzer__methods_[] = {
            DECLARE_METHOD(t_CJKAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CJKAnalyzer, t_CJKAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, CJKAnalyzer, t_CJKAnalyzer_init_, 0, 0, t_CJKAnalyzer__fields_, 0, 0);

          void t_CJKAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(CJKAnalyzer), module, "CJKAnalyzer", 0);
          }

          void t_CJKAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CJKAnalyzer).tp_dict, "class_", make_descriptor(CJKAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CJKAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_CJKAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CJKAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CJKAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(CJKAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*CJKAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_CJKAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CJKAnalyzer::initializeClass, 1)))
              return NULL;
            return t_CJKAnalyzer::wrap_Object(CJKAnalyzer(((t_CJKAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_CJKAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CJKAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CJKAnalyzer_init_(t_CJKAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                CJKAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = CJKAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                CJKAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = CJKAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CJKAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::cjk::CJKAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_CJKAnalyzer_get__defaultStopSet(t_CJKAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexableField.h"
#include "java/lang/Number.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/index/IndexableFieldType.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexableField::class$ = NULL;
        jmethodID *IndexableField::mids$ = NULL;
        bool IndexableField::live$ = false;

        jclass IndexableField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexableField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_binaryValue_4ae19461] = env->getMethodID(cls, "binaryValue", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_boost_54c6a176] = env->getMethodID(cls, "boost", "()F");
            mids$[mid_fieldType_58dcbc9c] = env->getMethodID(cls, "fieldType", "()Lorg/apache/lucene/index/IndexableFieldType;");
            mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
            mids$[mid_numericValue_ee47e3e1] = env->getMethodID(cls, "numericValue", "()Ljava/lang/Number;");
            mids$[mid_readerValue_b6f16bdd] = env->getMethodID(cls, "readerValue", "()Ljava/io/Reader;");
            mids$[mid_stringValue_14c7b5c5] = env->getMethodID(cls, "stringValue", "()Ljava/lang/String;");
            mids$[mid_tokenStream_cea65119] = env->getMethodID(cls, "tokenStream", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::util::BytesRef IndexableField::binaryValue() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_binaryValue_4ae19461]));
        }

        jfloat IndexableField::boost() const
        {
          return env->callFloatMethod(this$, mids$[mid_boost_54c6a176]);
        }

        ::org::apache::lucene::index::IndexableFieldType IndexableField::fieldType() const
        {
          return ::org::apache::lucene::index::IndexableFieldType(env->callObjectMethod(this$, mids$[mid_fieldType_58dcbc9c]));
        }

        ::java::lang::String IndexableField::name() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
        }

        ::java::lang::Number IndexableField::numericValue() const
        {
          return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_numericValue_ee47e3e1]));
        }

        ::java::io::Reader IndexableField::readerValue() const
        {
          return ::java::io::Reader(env->callObjectMethod(this$, mids$[mid_readerValue_b6f16bdd]));
        }

        ::java::lang::String IndexableField::stringValue() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_stringValue_14c7b5c5]));
        }

        ::org::apache::lucene::analysis::TokenStream IndexableField::tokenStream(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::analysis::TokenStream & a1) const
        {
          return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_tokenStream_cea65119], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexableField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexableField_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexableField_binaryValue(t_IndexableField *self);
        static PyObject *t_IndexableField_boost(t_IndexableField *self);
        static PyObject *t_IndexableField_fieldType(t_IndexableField *self);
        static PyObject *t_IndexableField_name(t_IndexableField *self);
        static PyObject *t_IndexableField_numericValue(t_IndexableField *self);
        static PyObject *t_IndexableField_readerValue(t_IndexableField *self);
        static PyObject *t_IndexableField_stringValue(t_IndexableField *self);
        static PyObject *t_IndexableField_tokenStream(t_IndexableField *self, PyObject *args);

        static PyMethodDef t_IndexableField__methods_[] = {
          DECLARE_METHOD(t_IndexableField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexableField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexableField, binaryValue, METH_NOARGS),
          DECLARE_METHOD(t_IndexableField, boost, METH_NOARGS),
          DECLARE_METHOD(t_IndexableField, fieldType, METH_NOARGS),
          DECLARE_METHOD(t_IndexableField, name, METH_NOARGS),
          DECLARE_METHOD(t_IndexableField, numericValue, METH_NOARGS),
          DECLARE_METHOD(t_IndexableField, readerValue, METH_NOARGS),
          DECLARE_METHOD(t_IndexableField, stringValue, METH_NOARGS),
          DECLARE_METHOD(t_IndexableField, tokenStream, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexableField, t_IndexableField, ::java::lang::Object, IndexableField, abstract_init, 0, 0, 0, 0, 0);

        void t_IndexableField::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexableField), module, "IndexableField", 0);
        }

        void t_IndexableField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexableField).tp_dict, "class_", make_descriptor(IndexableField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexableField).tp_dict, "wrapfn_", make_descriptor(t_IndexableField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexableField).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexableField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexableField::initializeClass, 1)))
            return NULL;
          return t_IndexableField::wrap_Object(IndexableField(((t_IndexableField *) arg)->object.this$));
        }
        static PyObject *t_IndexableField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexableField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexableField_binaryValue(t_IndexableField *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.binaryValue());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_IndexableField_boost(t_IndexableField *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.boost());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_IndexableField_fieldType(t_IndexableField *self)
        {
          ::org::apache::lucene::index::IndexableFieldType result((jobject) NULL);
          OBJ_CALL(result = self->object.fieldType());
          return ::org::apache::lucene::index::t_IndexableFieldType::wrap_Object(result);
        }

        static PyObject *t_IndexableField_name(t_IndexableField *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.name());
          return j2p(result);
        }

        static PyObject *t_IndexableField_numericValue(t_IndexableField *self)
        {
          ::java::lang::Number result((jobject) NULL);
          OBJ_CALL(result = self->object.numericValue());
          return ::java::lang::t_Number::wrap_Object(result);
        }

        static PyObject *t_IndexableField_readerValue(t_IndexableField *self)
        {
          ::java::io::Reader result((jobject) NULL);
          OBJ_CALL(result = self->object.readerValue());
          return ::java::io::t_Reader::wrap_Object(result);
        }

        static PyObject *t_IndexableField_stringValue(t_IndexableField *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.stringValue());
          return j2p(result);
        }

        static PyObject *t_IndexableField_tokenStream(t_IndexableField *self, PyObject *args)
        {
          ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
          ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
          ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.tokenStream(a0, a1));
            return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "tokenStream", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/LiveIndexWriterConfig.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "org/apache/lucene/index/MergeScheduler.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/Codec.h"
#include "org/apache/lucene/index/IndexWriter$IndexReaderWarmer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/MergePolicy.h"
#include "org/apache/lucene/index/IndexDeletionPolicy.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/util/InfoStream.h"
#include "org/apache/lucene/index/IndexWriterConfig$OpenMode.h"
#include "org/apache/lucene/search/similarities/Similarity.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *LiveIndexWriterConfig::class$ = NULL;
        jmethodID *LiveIndexWriterConfig::mids$ = NULL;
        bool LiveIndexWriterConfig::live$ = false;

        jclass LiveIndexWriterConfig::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/LiveIndexWriterConfig");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getAnalyzer_347f60a9] = env->getMethodID(cls, "getAnalyzer", "()Lorg/apache/lucene/analysis/Analyzer;");
            mids$[mid_getCheckIntegrityAtMerge_54c6a16a] = env->getMethodID(cls, "getCheckIntegrityAtMerge", "()Z");
            mids$[mid_getCodec_27f0a02b] = env->getMethodID(cls, "getCodec", "()Lorg/apache/lucene/codecs/Codec;");
            mids$[mid_getIndexCommit_09307276] = env->getMethodID(cls, "getIndexCommit", "()Lorg/apache/lucene/index/IndexCommit;");
            mids$[mid_getIndexDeletionPolicy_a18376c3] = env->getMethodID(cls, "getIndexDeletionPolicy", "()Lorg/apache/lucene/index/IndexDeletionPolicy;");
            mids$[mid_getInfoStream_1923150b] = env->getMethodID(cls, "getInfoStream", "()Lorg/apache/lucene/util/InfoStream;");
            mids$[mid_getMaxBufferedDeleteTerms_54c6a179] = env->getMethodID(cls, "getMaxBufferedDeleteTerms", "()I");
            mids$[mid_getMaxBufferedDocs_54c6a179] = env->getMethodID(cls, "getMaxBufferedDocs", "()I");
            mids$[mid_getMaxThreadStates_54c6a179] = env->getMethodID(cls, "getMaxThreadStates", "()I");
            mids$[mid_getMergePolicy_753f8dfd] = env->getMethodID(cls, "getMergePolicy", "()Lorg/apache/lucene/index/MergePolicy;");
            mids$[mid_getMergeScheduler_ff96d655] = env->getMethodID(cls, "getMergeScheduler", "()Lorg/apache/lucene/index/MergeScheduler;");
            mids$[mid_getMergedSegmentWarmer_b145c9d7] = env->getMethodID(cls, "getMergedSegmentWarmer", "()Lorg/apache/lucene/index/IndexWriter$IndexReaderWarmer;");
            mids$[mid_getOpenMode_4134b214] = env->getMethodID(cls, "getOpenMode", "()Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;");
            mids$[mid_getRAMBufferSizeMB_54c6a174] = env->getMethodID(cls, "getRAMBufferSizeMB", "()D");
            mids$[mid_getRAMPerThreadHardLimitMB_54c6a179] = env->getMethodID(cls, "getRAMPerThreadHardLimitMB", "()I");
            mids$[mid_getReaderPooling_54c6a16a] = env->getMethodID(cls, "getReaderPooling", "()Z");
            mids$[mid_getReaderTermsIndexDivisor_54c6a179] = env->getMethodID(cls, "getReaderTermsIndexDivisor", "()I");
            mids$[mid_getSimilarity_efcb1233] = env->getMethodID(cls, "getSimilarity", "()Lorg/apache/lucene/search/similarities/Similarity;");
            mids$[mid_getTermIndexInterval_54c6a179] = env->getMethodID(cls, "getTermIndexInterval", "()I");
            mids$[mid_getUseCompoundFile_54c6a16a] = env->getMethodID(cls, "getUseCompoundFile", "()Z");
            mids$[mid_getWriteLockTimeout_54c6a17a] = env->getMethodID(cls, "getWriteLockTimeout", "()J");
            mids$[mid_setCheckIntegrityAtMerge_7cdcb09b] = env->getMethodID(cls, "setCheckIntegrityAtMerge", "(Z)Lorg/apache/lucene/index/LiveIndexWriterConfig;");
            mids$[mid_setMaxBufferedDeleteTerms_4e167404] = env->getMethodID(cls, "setMaxBufferedDeleteTerms", "(I)Lorg/apache/lucene/index/LiveIndexWriterConfig;");
            mids$[mid_setMaxBufferedDocs_4e167404] = env->getMethodID(cls, "setMaxBufferedDocs", "(I)Lorg/apache/lucene/index/LiveIndexWriterConfig;");
            mids$[mid_setMergedSegmentWarmer_02b4678e] = env->getMethodID(cls, "setMergedSegmentWarmer", "(Lorg/apache/lucene/index/IndexWriter$IndexReaderWarmer;)Lorg/apache/lucene/index/LiveIndexWriterConfig;");
            mids$[mid_setRAMBufferSizeMB_e14feba1] = env->getMethodID(cls, "setRAMBufferSizeMB", "(D)Lorg/apache/lucene/index/LiveIndexWriterConfig;");
            mids$[mid_setReaderTermsIndexDivisor_4e167404] = env->getMethodID(cls, "setReaderTermsIndexDivisor", "(I)Lorg/apache/lucene/index/LiveIndexWriterConfig;");
            mids$[mid_setTermIndexInterval_4e167404] = env->getMethodID(cls, "setTermIndexInterval", "(I)Lorg/apache/lucene/index/LiveIndexWriterConfig;");
            mids$[mid_setUseCompoundFile_7cdcb09b] = env->getMethodID(cls, "setUseCompoundFile", "(Z)Lorg/apache/lucene/index/LiveIndexWriterConfig;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::analysis::Analyzer LiveIndexWriterConfig::getAnalyzer() const
        {
          return ::org::apache::lucene::analysis::Analyzer(env->callObjectMethod(this$, mids$[mid_getAnalyzer_347f60a9]));
        }

        jboolean LiveIndexWriterConfig::getCheckIntegrityAtMerge() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getCheckIntegrityAtMerge_54c6a16a]);
        }

        ::org::apache::lucene::codecs::Codec LiveIndexWriterConfig::getCodec() const
        {
          return ::org::apache::lucene::codecs::Codec(env->callObjectMethod(this$, mids$[mid_getCodec_27f0a02b]));
        }

        ::org::apache::lucene::index::IndexCommit LiveIndexWriterConfig::getIndexCommit() const
        {
          return ::org::apache::lucene::index::IndexCommit(env->callObjectMethod(this$, mids$[mid_getIndexCommit_09307276]));
        }

        ::org::apache::lucene::index::IndexDeletionPolicy LiveIndexWriterConfig::getIndexDeletionPolicy() const
        {
          return ::org::apache::lucene::index::IndexDeletionPolicy(env->callObjectMethod(this$, mids$[mid_getIndexDeletionPolicy_a18376c3]));
        }

        ::org::apache::lucene::util::InfoStream LiveIndexWriterConfig::getInfoStream() const
        {
          return ::org::apache::lucene::util::InfoStream(env->callObjectMethod(this$, mids$[mid_getInfoStream_1923150b]));
        }

        jint LiveIndexWriterConfig::getMaxBufferedDeleteTerms() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxBufferedDeleteTerms_54c6a179]);
        }

        jint LiveIndexWriterConfig::getMaxBufferedDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxBufferedDocs_54c6a179]);
        }

        jint LiveIndexWriterConfig::getMaxThreadStates() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxThreadStates_54c6a179]);
        }

        ::org::apache::lucene::index::MergePolicy LiveIndexWriterConfig::getMergePolicy() const
        {
          return ::org::apache::lucene::index::MergePolicy(env->callObjectMethod(this$, mids$[mid_getMergePolicy_753f8dfd]));
        }

        ::org::apache::lucene::index::MergeScheduler LiveIndexWriterConfig::getMergeScheduler() const
        {
          return ::org::apache::lucene::index::MergeScheduler(env->callObjectMethod(this$, mids$[mid_getMergeScheduler_ff96d655]));
        }

        ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer LiveIndexWriterConfig::getMergedSegmentWarmer() const
        {
          return ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer(env->callObjectMethod(this$, mids$[mid_getMergedSegmentWarmer_b145c9d7]));
        }

        ::org::apache::lucene::index::IndexWriterConfig$OpenMode LiveIndexWriterConfig::getOpenMode() const
        {
          return ::org::apache::lucene::index::IndexWriterConfig$OpenMode(env->callObjectMethod(this$, mids$[mid_getOpenMode_4134b214]));
        }

        jdouble LiveIndexWriterConfig::getRAMBufferSizeMB() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getRAMBufferSizeMB_54c6a174]);
        }

        jint LiveIndexWriterConfig::getRAMPerThreadHardLimitMB() const
        {
          return env->callIntMethod(this$, mids$[mid_getRAMPerThreadHardLimitMB_54c6a179]);
        }

        jboolean LiveIndexWriterConfig::getReaderPooling() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getReaderPooling_54c6a16a]);
        }

        jint LiveIndexWriterConfig::getReaderTermsIndexDivisor() const
        {
          return env->callIntMethod(this$, mids$[mid_getReaderTermsIndexDivisor_54c6a179]);
        }

        ::org::apache::lucene::search::similarities::Similarity LiveIndexWriterConfig::getSimilarity() const
        {
          return ::org::apache::lucene::search::similarities::Similarity(env->callObjectMethod(this$, mids$[mid_getSimilarity_efcb1233]));
        }

        jint LiveIndexWriterConfig::getTermIndexInterval() const
        {
          return env->callIntMethod(this$, mids$[mid_getTermIndexInterval_54c6a179]);
        }

        jboolean LiveIndexWriterConfig::getUseCompoundFile() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getUseCompoundFile_54c6a16a]);
        }

        jlong LiveIndexWriterConfig::getWriteLockTimeout() const
        {
          return env->callLongMethod(this$, mids$[mid_getWriteLockTimeout_54c6a17a]);
        }

        LiveIndexWriterConfig LiveIndexWriterConfig::setCheckIntegrityAtMerge(jboolean a0) const
        {
          return LiveIndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setCheckIntegrityAtMerge_7cdcb09b], a0));
        }

        LiveIndexWriterConfig LiveIndexWriterConfig::setMaxBufferedDeleteTerms(jint a0) const
        {
          return LiveIndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setMaxBufferedDeleteTerms_4e167404], a0));
        }

        LiveIndexWriterConfig LiveIndexWriterConfig::setMaxBufferedDocs(jint a0) const
        {
          return LiveIndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setMaxBufferedDocs_4e167404], a0));
        }

        LiveIndexWriterConfig LiveIndexWriterConfig::setMergedSegmentWarmer(const ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer & a0) const
        {
          return LiveIndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setMergedSegmentWarmer_02b4678e], a0.this$));
        }

        LiveIndexWriterConfig LiveIndexWriterConfig::setRAMBufferSizeMB(jdouble a0) const
        {
          return LiveIndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setRAMBufferSizeMB_e14feba1], a0));
        }

        LiveIndexWriterConfig LiveIndexWriterConfig::setReaderTermsIndexDivisor(jint a0) const
        {
          return LiveIndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setReaderTermsIndexDivisor_4e167404], a0));
        }

        LiveIndexWriterConfig LiveIndexWriterConfig::setTermIndexInterval(jint a0) const
        {
          return LiveIndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setTermIndexInterval_4e167404], a0));
        }

        LiveIndexWriterConfig LiveIndexWriterConfig::setUseCompoundFile(jboolean a0) const
        {
          return LiveIndexWriterConfig(env->callObjectMethod(this$, mids$[mid_setUseCompoundFile_7cdcb09b], a0));
        }

        ::java::lang::String LiveIndexWriterConfig::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_LiveIndexWriterConfig_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LiveIndexWriterConfig_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LiveIndexWriterConfig_getAnalyzer(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getCheckIntegrityAtMerge(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getCodec(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getIndexCommit(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getIndexDeletionPolicy(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getInfoStream(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getMaxBufferedDeleteTerms(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getMaxBufferedDocs(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getMaxThreadStates(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getMergePolicy(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getMergeScheduler(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getMergedSegmentWarmer(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getOpenMode(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getRAMBufferSizeMB(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getRAMPerThreadHardLimitMB(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getReaderPooling(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getReaderTermsIndexDivisor(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getSimilarity(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getTermIndexInterval(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getUseCompoundFile(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_getWriteLockTimeout(t_LiveIndexWriterConfig *self);
        static PyObject *t_LiveIndexWriterConfig_setCheckIntegrityAtMerge(t_LiveIndexWriterConfig *self, PyObject *arg);
        static PyObject *t_LiveIndexWriterConfig_setMaxBufferedDeleteTerms(t_LiveIndexWriterConfig *self, PyObject *arg);
        static PyObject *t_LiveIndexWriterConfig_setMaxBufferedDocs(t_LiveIndexWriterConfig *self, PyObject *arg);
        static PyObject *t_LiveIndexWriterConfig_setMergedSegmentWarmer(t_LiveIndexWriterConfig *self, PyObject *arg);
        static PyObject *t_LiveIndexWriterConfig_setRAMBufferSizeMB(t_LiveIndexWriterConfig *self, PyObject *arg);
        static PyObject *t_LiveIndexWriterConfig_setReaderTermsIndexDivisor(t_LiveIndexWriterConfig *self, PyObject *arg);
        static PyObject *t_LiveIndexWriterConfig_setTermIndexInterval(t_LiveIndexWriterConfig *self, PyObject *arg);
        static PyObject *t_LiveIndexWriterConfig_setUseCompoundFile(t_LiveIndexWriterConfig *self, PyObject *arg);
        static PyObject *t_LiveIndexWriterConfig_toString(t_LiveIndexWriterConfig *self, PyObject *args);
        static PyObject *t_LiveIndexWriterConfig_get__analyzer(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__checkIntegrityAtMerge(t_LiveIndexWriterConfig *self, void *data);
        static int t_LiveIndexWriterConfig_set__checkIntegrityAtMerge(t_LiveIndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__codec(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__indexCommit(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__indexDeletionPolicy(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__infoStream(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__maxBufferedDeleteTerms(t_LiveIndexWriterConfig *self, void *data);
        static int t_LiveIndexWriterConfig_set__maxBufferedDeleteTerms(t_LiveIndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__maxBufferedDocs(t_LiveIndexWriterConfig *self, void *data);
        static int t_LiveIndexWriterConfig_set__maxBufferedDocs(t_LiveIndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__maxThreadStates(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__mergePolicy(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__mergeScheduler(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__mergedSegmentWarmer(t_LiveIndexWriterConfig *self, void *data);
        static int t_LiveIndexWriterConfig_set__mergedSegmentWarmer(t_LiveIndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__openMode(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__rAMBufferSizeMB(t_LiveIndexWriterConfig *self, void *data);
        static int t_LiveIndexWriterConfig_set__rAMBufferSizeMB(t_LiveIndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__rAMPerThreadHardLimitMB(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__readerPooling(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__readerTermsIndexDivisor(t_LiveIndexWriterConfig *self, void *data);
        static int t_LiveIndexWriterConfig_set__readerTermsIndexDivisor(t_LiveIndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__similarity(t_LiveIndexWriterConfig *self, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__termIndexInterval(t_LiveIndexWriterConfig *self, void *data);
        static int t_LiveIndexWriterConfig_set__termIndexInterval(t_LiveIndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__useCompoundFile(t_LiveIndexWriterConfig *self, void *data);
        static int t_LiveIndexWriterConfig_set__useCompoundFile(t_LiveIndexWriterConfig *self, PyObject *arg, void *data);
        static PyObject *t_LiveIndexWriterConfig_get__writeLockTimeout(t_LiveIndexWriterConfig *self, void *data);
        static PyGetSetDef t_LiveIndexWriterConfig__fields_[] = {
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, analyzer),
          DECLARE_GETSET_FIELD(t_LiveIndexWriterConfig, checkIntegrityAtMerge),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, codec),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, indexCommit),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, indexDeletionPolicy),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, infoStream),
          DECLARE_GETSET_FIELD(t_LiveIndexWriterConfig, maxBufferedDeleteTerms),
          DECLARE_GETSET_FIELD(t_LiveIndexWriterConfig, maxBufferedDocs),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, maxThreadStates),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, mergePolicy),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, mergeScheduler),
          DECLARE_GETSET_FIELD(t_LiveIndexWriterConfig, mergedSegmentWarmer),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, openMode),
          DECLARE_GETSET_FIELD(t_LiveIndexWriterConfig, rAMBufferSizeMB),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, rAMPerThreadHardLimitMB),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, readerPooling),
          DECLARE_GETSET_FIELD(t_LiveIndexWriterConfig, readerTermsIndexDivisor),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, similarity),
          DECLARE_GETSET_FIELD(t_LiveIndexWriterConfig, termIndexInterval),
          DECLARE_GETSET_FIELD(t_LiveIndexWriterConfig, useCompoundFile),
          DECLARE_GET_FIELD(t_LiveIndexWriterConfig, writeLockTimeout),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_LiveIndexWriterConfig__methods_[] = {
          DECLARE_METHOD(t_LiveIndexWriterConfig, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getAnalyzer, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getCheckIntegrityAtMerge, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getCodec, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getIndexCommit, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getIndexDeletionPolicy, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getInfoStream, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getMaxBufferedDeleteTerms, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getMaxBufferedDocs, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getMaxThreadStates, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getMergePolicy, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getMergeScheduler, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getMergedSegmentWarmer, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getOpenMode, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getRAMBufferSizeMB, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getRAMPerThreadHardLimitMB, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getReaderPooling, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getReaderTermsIndexDivisor, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getSimilarity, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getTermIndexInterval, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getUseCompoundFile, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, getWriteLockTimeout, METH_NOARGS),
          DECLARE_METHOD(t_LiveIndexWriterConfig, setCheckIntegrityAtMerge, METH_O),
          DECLARE_METHOD(t_LiveIndexWriterConfig, setMaxBufferedDeleteTerms, METH_O),
          DECLARE_METHOD(t_LiveIndexWriterConfig, setMaxBufferedDocs, METH_O),
          DECLARE_METHOD(t_LiveIndexWriterConfig, setMergedSegmentWarmer, METH_O),
          DECLARE_METHOD(t_LiveIndexWriterConfig, setRAMBufferSizeMB, METH_O),
          DECLARE_METHOD(t_LiveIndexWriterConfig, setReaderTermsIndexDivisor, METH_O),
          DECLARE_METHOD(t_LiveIndexWriterConfig, setTermIndexInterval, METH_O),
          DECLARE_METHOD(t_LiveIndexWriterConfig, setUseCompoundFile, METH_O),
          DECLARE_METHOD(t_LiveIndexWriterConfig, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LiveIndexWriterConfig, t_LiveIndexWriterConfig, ::java::lang::Object, LiveIndexWriterConfig, abstract_init, 0, 0, t_LiveIndexWriterConfig__fields_, 0, 0);

        void t_LiveIndexWriterConfig::install(PyObject *module)
        {
          installType(&PY_TYPE(LiveIndexWriterConfig), module, "LiveIndexWriterConfig", 0);
        }

        void t_LiveIndexWriterConfig::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LiveIndexWriterConfig).tp_dict, "class_", make_descriptor(LiveIndexWriterConfig::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LiveIndexWriterConfig).tp_dict, "wrapfn_", make_descriptor(t_LiveIndexWriterConfig::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LiveIndexWriterConfig).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LiveIndexWriterConfig_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LiveIndexWriterConfig::initializeClass, 1)))
            return NULL;
          return t_LiveIndexWriterConfig::wrap_Object(LiveIndexWriterConfig(((t_LiveIndexWriterConfig *) arg)->object.this$));
        }
        static PyObject *t_LiveIndexWriterConfig_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LiveIndexWriterConfig::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_LiveIndexWriterConfig_getAnalyzer(t_LiveIndexWriterConfig *self)
        {
          ::org::apache::lucene::analysis::Analyzer result((jobject) NULL);
          OBJ_CALL(result = self->object.getAnalyzer());
          return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getCheckIntegrityAtMerge(t_LiveIndexWriterConfig *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getCheckIntegrityAtMerge());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getCodec(t_LiveIndexWriterConfig *self)
        {
          ::org::apache::lucene::codecs::Codec result((jobject) NULL);
          OBJ_CALL(result = self->object.getCodec());
          return ::org::apache::lucene::codecs::t_Codec::wrap_Object(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getIndexCommit(t_LiveIndexWriterConfig *self)
        {
          ::org::apache::lucene::index::IndexCommit result((jobject) NULL);
          OBJ_CALL(result = self->object.getIndexCommit());
          return ::org::apache::lucene::index::t_IndexCommit::wrap_Object(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getIndexDeletionPolicy(t_LiveIndexWriterConfig *self)
        {
          ::org::apache::lucene::index::IndexDeletionPolicy result((jobject) NULL);
          OBJ_CALL(result = self->object.getIndexDeletionPolicy());
          return ::org::apache::lucene::index::t_IndexDeletionPolicy::wrap_Object(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getInfoStream(t_LiveIndexWriterConfig *self)
        {
          ::org::apache::lucene::util::InfoStream result((jobject) NULL);
          OBJ_CALL(result = self->object.getInfoStream());
          return ::org::apache::lucene::util::t_InfoStream::wrap_Object(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getMaxBufferedDeleteTerms(t_LiveIndexWriterConfig *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxBufferedDeleteTerms());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_LiveIndexWriterConfig_getMaxBufferedDocs(t_LiveIndexWriterConfig *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxBufferedDocs());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_LiveIndexWriterConfig_getMaxThreadStates(t_LiveIndexWriterConfig *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxThreadStates());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_LiveIndexWriterConfig_getMergePolicy(t_LiveIndexWriterConfig *self)
        {
          ::org::apache::lucene::index::MergePolicy result((jobject) NULL);
          OBJ_CALL(result = self->object.getMergePolicy());
          return ::org::apache::lucene::index::t_MergePolicy::wrap_Object(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getMergeScheduler(t_LiveIndexWriterConfig *self)
        {
          ::org::apache::lucene::index::MergeScheduler result((jobject) NULL);
          OBJ_CALL(result = self->object.getMergeScheduler());
          return ::org::apache::lucene::index::t_MergeScheduler::wrap_Object(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getMergedSegmentWarmer(t_LiveIndexWriterConfig *self)
        {
          ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer result((jobject) NULL);
          OBJ_CALL(result = self->object.getMergedSegmentWarmer());
          return ::org::apache::lucene::index::t_IndexWriter$IndexReaderWarmer::wrap_Object(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getOpenMode(t_LiveIndexWriterConfig *self)
        {
          ::org::apache::lucene::index::IndexWriterConfig$OpenMode result((jobject) NULL);
          OBJ_CALL(result = self->object.getOpenMode());
          return ::org::apache::lucene::index::t_IndexWriterConfig$OpenMode::wrap_Object(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getRAMBufferSizeMB(t_LiveIndexWriterConfig *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getRAMBufferSizeMB());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_LiveIndexWriterConfig_getRAMPerThreadHardLimitMB(t_LiveIndexWriterConfig *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getRAMPerThreadHardLimitMB());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_LiveIndexWriterConfig_getReaderPooling(t_LiveIndexWriterConfig *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getReaderPooling());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getReaderTermsIndexDivisor(t_LiveIndexWriterConfig *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getReaderTermsIndexDivisor());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_LiveIndexWriterConfig_getSimilarity(t_LiveIndexWriterConfig *self)
        {
          ::org::apache::lucene::search::similarities::Similarity result((jobject) NULL);
          OBJ_CALL(result = self->object.getSimilarity());
          return ::org::apache::lucene::search::similarities::t_Similarity::wrap_Object(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getTermIndexInterval(t_LiveIndexWriterConfig *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getTermIndexInterval());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_LiveIndexWriterConfig_getUseCompoundFile(t_LiveIndexWriterConfig *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getUseCompoundFile());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_LiveIndexWriterConfig_getWriteLockTimeout(t_LiveIndexWriterConfig *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getWriteLockTimeout());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_LiveIndexWriterConfig_setCheckIntegrityAtMerge(t_LiveIndexWriterConfig *self, PyObject *arg)
        {
          jboolean a0;
          LiveIndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(result = self->object.setCheckIntegrityAtMerge(a0));
            return t_LiveIndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setCheckIntegrityAtMerge", arg);
          return NULL;
        }

        static PyObject *t_LiveIndexWriterConfig_setMaxBufferedDeleteTerms(t_LiveIndexWriterConfig *self, PyObject *arg)
        {
          jint a0;
          LiveIndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.setMaxBufferedDeleteTerms(a0));
            return t_LiveIndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxBufferedDeleteTerms", arg);
          return NULL;
        }

        static PyObject *t_LiveIndexWriterConfig_setMaxBufferedDocs(t_LiveIndexWriterConfig *self, PyObject *arg)
        {
          jint a0;
          LiveIndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.setMaxBufferedDocs(a0));
            return t_LiveIndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxBufferedDocs", arg);
          return NULL;
        }

        static PyObject *t_LiveIndexWriterConfig_setMergedSegmentWarmer(t_LiveIndexWriterConfig *self, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer a0((jobject) NULL);
          LiveIndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setMergedSegmentWarmer(a0));
            return t_LiveIndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setMergedSegmentWarmer", arg);
          return NULL;
        }

        static PyObject *t_LiveIndexWriterConfig_setRAMBufferSizeMB(t_LiveIndexWriterConfig *self, PyObject *arg)
        {
          jdouble a0;
          LiveIndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = self->object.setRAMBufferSizeMB(a0));
            return t_LiveIndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setRAMBufferSizeMB", arg);
          return NULL;
        }

        static PyObject *t_LiveIndexWriterConfig_setReaderTermsIndexDivisor(t_LiveIndexWriterConfig *self, PyObject *arg)
        {
          jint a0;
          LiveIndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.setReaderTermsIndexDivisor(a0));
            return t_LiveIndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setReaderTermsIndexDivisor", arg);
          return NULL;
        }

        static PyObject *t_LiveIndexWriterConfig_setTermIndexInterval(t_LiveIndexWriterConfig *self, PyObject *arg)
        {
          jint a0;
          LiveIndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.setTermIndexInterval(a0));
            return t_LiveIndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setTermIndexInterval", arg);
          return NULL;
        }

        static PyObject *t_LiveIndexWriterConfig_setUseCompoundFile(t_LiveIndexWriterConfig *self, PyObject *arg)
        {
          jboolean a0;
          LiveIndexWriterConfig result((jobject) NULL);

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(result = self->object.setUseCompoundFile(a0));
            return t_LiveIndexWriterConfig::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setUseCompoundFile", arg);
          return NULL;
        }

        static PyObject *t_LiveIndexWriterConfig_toString(t_LiveIndexWriterConfig *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(LiveIndexWriterConfig), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_LiveIndexWriterConfig_get__analyzer(t_LiveIndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
          OBJ_CALL(value = self->object.getAnalyzer());
          return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__checkIntegrityAtMerge(t_LiveIndexWriterConfig *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getCheckIntegrityAtMerge());
          Py_RETURN_BOOL(value);
        }
        static int t_LiveIndexWriterConfig_set__checkIntegrityAtMerge(t_LiveIndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setCheckIntegrityAtMerge(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "checkIntegrityAtMerge", arg);
          return -1;
        }

        static PyObject *t_LiveIndexWriterConfig_get__codec(t_LiveIndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::codecs::Codec value((jobject) NULL);
          OBJ_CALL(value = self->object.getCodec());
          return ::org::apache::lucene::codecs::t_Codec::wrap_Object(value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__indexCommit(t_LiveIndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::IndexCommit value((jobject) NULL);
          OBJ_CALL(value = self->object.getIndexCommit());
          return ::org::apache::lucene::index::t_IndexCommit::wrap_Object(value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__indexDeletionPolicy(t_LiveIndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::IndexDeletionPolicy value((jobject) NULL);
          OBJ_CALL(value = self->object.getIndexDeletionPolicy());
          return ::org::apache::lucene::index::t_IndexDeletionPolicy::wrap_Object(value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__infoStream(t_LiveIndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::util::InfoStream value((jobject) NULL);
          OBJ_CALL(value = self->object.getInfoStream());
          return ::org::apache::lucene::util::t_InfoStream::wrap_Object(value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__maxBufferedDeleteTerms(t_LiveIndexWriterConfig *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxBufferedDeleteTerms());
          return PyInt_FromLong((long) value);
        }
        static int t_LiveIndexWriterConfig_set__maxBufferedDeleteTerms(t_LiveIndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMaxBufferedDeleteTerms(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxBufferedDeleteTerms", arg);
          return -1;
        }

        static PyObject *t_LiveIndexWriterConfig_get__maxBufferedDocs(t_LiveIndexWriterConfig *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxBufferedDocs());
          return PyInt_FromLong((long) value);
        }
        static int t_LiveIndexWriterConfig_set__maxBufferedDocs(t_LiveIndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMaxBufferedDocs(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxBufferedDocs", arg);
          return -1;
        }

        static PyObject *t_LiveIndexWriterConfig_get__maxThreadStates(t_LiveIndexWriterConfig *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxThreadStates());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__mergePolicy(t_LiveIndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::MergePolicy value((jobject) NULL);
          OBJ_CALL(value = self->object.getMergePolicy());
          return ::org::apache::lucene::index::t_MergePolicy::wrap_Object(value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__mergeScheduler(t_LiveIndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::MergeScheduler value((jobject) NULL);
          OBJ_CALL(value = self->object.getMergeScheduler());
          return ::org::apache::lucene::index::t_MergeScheduler::wrap_Object(value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__mergedSegmentWarmer(t_LiveIndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer value((jobject) NULL);
          OBJ_CALL(value = self->object.getMergedSegmentWarmer());
          return ::org::apache::lucene::index::t_IndexWriter$IndexReaderWarmer::wrap_Object(value);
        }
        static int t_LiveIndexWriterConfig_set__mergedSegmentWarmer(t_LiveIndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer::initializeClass, &value))
            {
              INT_CALL(self->object.setMergedSegmentWarmer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "mergedSegmentWarmer", arg);
          return -1;
        }

        static PyObject *t_LiveIndexWriterConfig_get__openMode(t_LiveIndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::index::IndexWriterConfig$OpenMode value((jobject) NULL);
          OBJ_CALL(value = self->object.getOpenMode());
          return ::org::apache::lucene::index::t_IndexWriterConfig$OpenMode::wrap_Object(value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__rAMBufferSizeMB(t_LiveIndexWriterConfig *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getRAMBufferSizeMB());
          return PyFloat_FromDouble((double) value);
        }
        static int t_LiveIndexWriterConfig_set__rAMBufferSizeMB(t_LiveIndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setRAMBufferSizeMB(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "rAMBufferSizeMB", arg);
          return -1;
        }

        static PyObject *t_LiveIndexWriterConfig_get__rAMPerThreadHardLimitMB(t_LiveIndexWriterConfig *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getRAMPerThreadHardLimitMB());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__readerPooling(t_LiveIndexWriterConfig *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getReaderPooling());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__readerTermsIndexDivisor(t_LiveIndexWriterConfig *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getReaderTermsIndexDivisor());
          return PyInt_FromLong((long) value);
        }
        static int t_LiveIndexWriterConfig_set__readerTermsIndexDivisor(t_LiveIndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setReaderTermsIndexDivisor(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "readerTermsIndexDivisor", arg);
          return -1;
        }

        static PyObject *t_LiveIndexWriterConfig_get__similarity(t_LiveIndexWriterConfig *self, void *data)
        {
          ::org::apache::lucene::search::similarities::Similarity value((jobject) NULL);
          OBJ_CALL(value = self->object.getSimilarity());
          return ::org::apache::lucene::search::similarities::t_Similarity::wrap_Object(value);
        }

        static PyObject *t_LiveIndexWriterConfig_get__termIndexInterval(t_LiveIndexWriterConfig *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getTermIndexInterval());
          return PyInt_FromLong((long) value);
        }
        static int t_LiveIndexWriterConfig_set__termIndexInterval(t_LiveIndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setTermIndexInterval(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "termIndexInterval", arg);
          return -1;
        }

        static PyObject *t_LiveIndexWriterConfig_get__useCompoundFile(t_LiveIndexWriterConfig *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getUseCompoundFile());
          Py_RETURN_BOOL(value);
        }
        static int t_LiveIndexWriterConfig_set__useCompoundFile(t_LiveIndexWriterConfig *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setUseCompoundFile(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "useCompoundFile", arg);
          return -1;
        }

        static PyObject *t_LiveIndexWriterConfig_get__writeLockTimeout(t_LiveIndexWriterConfig *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getWriteLockTimeout());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/NumericRangeQueryNode.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/NumericQueryNode.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/NumericConfig.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {

              ::java::lang::Class *NumericRangeQueryNode::class$ = NULL;
              jmethodID *NumericRangeQueryNode::mids$ = NULL;
              jfieldID *NumericRangeQueryNode::fids$ = NULL;
              bool NumericRangeQueryNode::live$ = false;

              jclass NumericRangeQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/nodes/NumericRangeQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_b6ec7fba] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/standard/nodes/NumericQueryNode;Lorg/apache/lucene/queryparser/flexible/standard/nodes/NumericQueryNode;ZZLorg/apache/lucene/queryparser/flexible/standard/config/NumericConfig;)V");
                  mids$[mid_getNumericConfig_4e1c9c59] = env->getMethodID(cls, "getNumericConfig", "()Lorg/apache/lucene/queryparser/flexible/standard/config/NumericConfig;");
                  mids$[mid_setBounds_b6ec7fba] = env->getMethodID(cls, "setBounds", "(Lorg/apache/lucene/queryparser/flexible/standard/nodes/NumericQueryNode;Lorg/apache/lucene/queryparser/flexible/standard/nodes/NumericQueryNode;ZZLorg/apache/lucene/queryparser/flexible/standard/config/NumericConfig;)V");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  fids$ = new jfieldID[max_fid];
                  fids$[fid_numericConfig] = env->getFieldID(cls, "numericConfig", "Lorg/apache/lucene/queryparser/flexible/standard/config/NumericConfig;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              NumericRangeQueryNode::NumericRangeQueryNode(const ::org::apache::lucene::queryparser::flexible::standard::nodes::NumericQueryNode & a0, const ::org::apache::lucene::queryparser::flexible::standard::nodes::NumericQueryNode & a1, jboolean a2, jboolean a3, const ::org::apache::lucene::queryparser::flexible::standard::config::NumericConfig & a4) : ::org::apache::lucene::queryparser::flexible::standard::nodes::AbstractRangeQueryNode(env->newObject(initializeClass, &mids$, mid_init$_b6ec7fba, a0.this$, a1.this$, a2, a3, a4.this$)) {}

              ::org::apache::lucene::queryparser::flexible::standard::config::NumericConfig NumericRangeQueryNode::getNumericConfig() const
              {
                return ::org::apache::lucene::queryparser::flexible::standard::config::NumericConfig(env->callObjectMethod(this$, mids$[mid_getNumericConfig_4e1c9c59]));
              }

              void NumericRangeQueryNode::setBounds(const ::org::apache::lucene::queryparser::flexible::standard::nodes::NumericQueryNode & a0, const ::org::apache::lucene::queryparser::flexible::standard::nodes::NumericQueryNode & a1, jboolean a2, jboolean a3, const ::org::apache::lucene::queryparser::flexible::standard::config::NumericConfig & a4) const
              {
                env->callVoidMethod(this$, mids$[mid_setBounds_b6ec7fba], a0.this$, a1.this$, a2, a3, a4.this$);
              }

              ::java::lang::String NumericRangeQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }

              ::org::apache::lucene::queryparser::flexible::standard::config::NumericConfig NumericRangeQueryNode::_get_numericConfig() const
              {
                return ::org::apache::lucene::queryparser::flexible::standard::config::NumericConfig(env->getObjectField(this$, fids$[fid_numericConfig]));
              }

              void NumericRangeQueryNode::_set_numericConfig(const ::org::apache::lucene::queryparser::flexible::standard::config::NumericConfig & a0) const
              {
                env->setObjectField(this$, fids$[fid_numericConfig], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {
              static PyObject *t_NumericRangeQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_NumericRangeQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_NumericRangeQueryNode_of_(t_NumericRangeQueryNode *self, PyObject *args);
              static int t_NumericRangeQueryNode_init_(t_NumericRangeQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_NumericRangeQueryNode_getNumericConfig(t_NumericRangeQueryNode *self);
              static PyObject *t_NumericRangeQueryNode_setBounds(t_NumericRangeQueryNode *self, PyObject *args);
              static PyObject *t_NumericRangeQueryNode_toString(t_NumericRangeQueryNode *self, PyObject *args);

              static PyObject *t_NumericRangeQueryNode_get__numericConfig(t_NumericRangeQueryNode *self, void *data);
              static PyObject *t_NumericRangeQueryNode_get__parameters_(t_NumericRangeQueryNode *self, void *data);
              static PyGetSetDef t_NumericRangeQueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_NumericRangeQueryNode, numericConfig),
                DECLARE_GET_FIELD(t_NumericRangeQueryNode, parameters_),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_NumericRangeQueryNode__methods_[] = {
                DECLARE_METHOD(t_NumericRangeQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NumericRangeQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NumericRangeQueryNode, of_, METH_VARARGS),
                DECLARE_METHOD(t_NumericRangeQueryNode, getNumericConfig, METH_NOARGS),
                DECLARE_METHOD(t_NumericRangeQueryNode, setBounds, METH_VARARGS),
                DECLARE_METHOD(t_NumericRangeQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(NumericRangeQueryNode, t_NumericRangeQueryNode, ::org::apache::lucene::queryparser::flexible::standard::nodes::AbstractRangeQueryNode, NumericRangeQueryNode, t_NumericRangeQueryNode_init_, 0, 0, t_NumericRangeQueryNode__fields_, 0, 0);
              PyObject *t_NumericRangeQueryNode::wrap_Object(const NumericRangeQueryNode& object, PyTypeObject *p0)
              {
                PyObject *obj = t_NumericRangeQueryNode::wrap_Object(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_NumericRangeQueryNode *self = (t_NumericRangeQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              PyObject *t_NumericRangeQueryNode::wrap_jobject(const jobject& object, PyTypeObject *p0)
              {
                PyObject *obj = t_NumericRangeQueryNode::wrap_jobject(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_NumericRangeQueryNode *self = (t_NumericRangeQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              void t_NumericRangeQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(NumericRangeQueryNode), module, "NumericRangeQueryNode", 0);
              }

              void t_NumericRangeQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(NumericRangeQueryNode).tp_dict, "class_", make_descriptor(NumericRangeQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(NumericRangeQueryNode).tp_dict, "wrapfn_", make_descriptor(t_NumericRangeQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(NumericRangeQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_NumericRangeQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, NumericRangeQueryNode::initializeClass, 1)))
                  return NULL;
                return t_NumericRangeQueryNode::wrap_Object(NumericRangeQueryNode(((t_NumericRangeQueryNode *) arg)->object.this$));
              }
              static PyObject *t_NumericRangeQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, NumericRangeQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_NumericRangeQueryNode_of_(t_NumericRangeQueryNode *self, PyObject *args)
              {
                if (!parseArg(args, "T", 1, &(self->parameters)))
                  Py_RETURN_SELF;
                return PyErr_SetArgsError((PyObject *) self, "of_", args);
              }

              static int t_NumericRangeQueryNode_init_(t_NumericRangeQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::standard::nodes::NumericQueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::standard::nodes::NumericQueryNode a1((jobject) NULL);
                jboolean a2;
                jboolean a3;
                ::org::apache::lucene::queryparser::flexible::standard::config::NumericConfig a4((jobject) NULL);
                NumericRangeQueryNode object((jobject) NULL);

                if (!parseArgs(args, "kkZZk", ::org::apache::lucene::queryparser::flexible::standard::nodes::NumericQueryNode::initializeClass, ::org::apache::lucene::queryparser::flexible::standard::nodes::NumericQueryNode::initializeClass, ::org::apache::lucene::queryparser::flexible::standard::config::NumericConfig::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = NumericRangeQueryNode(a0, a1, a2, a3, a4));
                  self->object = object;
                  self->parameters[0] = &::org::apache::lucene::queryparser::flexible::standard::nodes::PY_TYPE(NumericQueryNode);
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_NumericRangeQueryNode_getNumericConfig(t_NumericRangeQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::standard::config::NumericConfig result((jobject) NULL);
                OBJ_CALL(result = self->object.getNumericConfig());
                return ::org::apache::lucene::queryparser::flexible::standard::config::t_NumericConfig::wrap_Object(result);
              }

              static PyObject *t_NumericRangeQueryNode_setBounds(t_NumericRangeQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::standard::nodes::NumericQueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::standard::nodes::NumericQueryNode a1((jobject) NULL);
                jboolean a2;
                jboolean a3;
                ::org::apache::lucene::queryparser::flexible::standard::config::NumericConfig a4((jobject) NULL);

                if (!parseArgs(args, "kkZZk", ::org::apache::lucene::queryparser::flexible::standard::nodes::NumericQueryNode::initializeClass, ::org::apache::lucene::queryparser::flexible::standard::nodes::NumericQueryNode::initializeClass, ::org::apache::lucene::queryparser::flexible::standard::config::NumericConfig::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(self->object.setBounds(a0, a1, a2, a3, a4));
                  Py_RETURN_NONE;
                }

                return callSuper(&PY_TYPE(NumericRangeQueryNode), (PyObject *) self, "setBounds", args, 2);
              }

              static PyObject *t_NumericRangeQueryNode_toString(t_NumericRangeQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(NumericRangeQueryNode), (PyObject *) self, "toString", args, 2);
              }
              static PyObject *t_NumericRangeQueryNode_get__parameters_(t_NumericRangeQueryNode *self, void *data)
              {
                return typeParameters(self->parameters, sizeof(self->parameters));
              }

              static PyObject *t_NumericRangeQueryNode_get__numericConfig(t_NumericRangeQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::standard::config::NumericConfig value((jobject) NULL);
                OBJ_CALL(value = self->object.getNumericConfig());
                return ::org::apache::lucene::queryparser::flexible::standard::config::t_NumericConfig::wrap_Object(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TopFieldCollector.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/FieldValueHitQueue$Entry.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/FieldDoc.h"
#include "org/apache/lucene/search/Sort.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TopFieldCollector::class$ = NULL;
        jmethodID *TopFieldCollector::mids$ = NULL;
        bool TopFieldCollector::live$ = false;

        jclass TopFieldCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TopFieldCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
            mids$[mid_create_ea5994c0] = env->getStaticMethodID(cls, "create", "(Lorg/apache/lucene/search/Sort;IZZZZ)Lorg/apache/lucene/search/TopFieldCollector;");
            mids$[mid_create_be0959c2] = env->getStaticMethodID(cls, "create", "(Lorg/apache/lucene/search/Sort;ILorg/apache/lucene/search/FieldDoc;ZZZZ)Lorg/apache/lucene/search/TopFieldCollector;");
            mids$[mid_populateResults_fbb5e76c] = env->getMethodID(cls, "populateResults", "([Lorg/apache/lucene/search/ScoreDoc;I)V");
            mids$[mid_newTopDocs_a5bceb12] = env->getMethodID(cls, "newTopDocs", "([Lorg/apache/lucene/search/ScoreDoc;I)Lorg/apache/lucene/search/TopDocs;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean TopFieldCollector::acceptsDocsOutOfOrder() const
        {
          return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
        }

        TopFieldCollector TopFieldCollector::create(const ::org::apache::lucene::search::Sort & a0, jint a1, jboolean a2, jboolean a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return TopFieldCollector(env->callStaticObjectMethod(cls, mids$[mid_create_ea5994c0], a0.this$, a1, a2, a3, a4, a5));
        }

        TopFieldCollector TopFieldCollector::create(const ::org::apache::lucene::search::Sort & a0, jint a1, const ::org::apache::lucene::search::FieldDoc & a2, jboolean a3, jboolean a4, jboolean a5, jboolean a6)
        {
          jclass cls = env->getClass(initializeClass);
          return TopFieldCollector(env->callStaticObjectMethod(cls, mids$[mid_create_be0959c2], a0.this$, a1, a2.this$, a3, a4, a5, a6));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TopFieldCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopFieldCollector_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopFieldCollector_of_(t_TopFieldCollector *self, PyObject *args);
        static PyObject *t_TopFieldCollector_acceptsDocsOutOfOrder(t_TopFieldCollector *self, PyObject *args);
        static PyObject *t_TopFieldCollector_create(PyTypeObject *type, PyObject *args);
        static PyObject *t_TopFieldCollector_get__parameters_(t_TopFieldCollector *self, void *data);
        static PyGetSetDef t_TopFieldCollector__fields_[] = {
          DECLARE_GET_FIELD(t_TopFieldCollector, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TopFieldCollector__methods_[] = {
          DECLARE_METHOD(t_TopFieldCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopFieldCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopFieldCollector, of_, METH_VARARGS),
          DECLARE_METHOD(t_TopFieldCollector, acceptsDocsOutOfOrder, METH_VARARGS),
          DECLARE_METHOD(t_TopFieldCollector, create, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TopFieldCollector, t_TopFieldCollector, ::org::apache::lucene::search::TopDocsCollector, TopFieldCollector, abstract_init, 0, 0, t_TopFieldCollector__fields_, 0, 0);
        PyObject *t_TopFieldCollector::wrap_Object(const TopFieldCollector& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopFieldCollector::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopFieldCollector *self = (t_TopFieldCollector *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_TopFieldCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopFieldCollector::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopFieldCollector *self = (t_TopFieldCollector *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_TopFieldCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(TopFieldCollector), module, "TopFieldCollector", 0);
        }

        void t_TopFieldCollector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TopFieldCollector).tp_dict, "class_", make_descriptor(TopFieldCollector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TopFieldCollector).tp_dict, "wrapfn_", make_descriptor(t_TopFieldCollector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TopFieldCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TopFieldCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TopFieldCollector::initializeClass, 1)))
            return NULL;
          return t_TopFieldCollector::wrap_Object(TopFieldCollector(((t_TopFieldCollector *) arg)->object.this$));
        }
        static PyObject *t_TopFieldCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TopFieldCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TopFieldCollector_of_(t_TopFieldCollector *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_TopFieldCollector_acceptsDocsOutOfOrder(t_TopFieldCollector *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(TopFieldCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
        }

        static PyObject *t_TopFieldCollector_create(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 6:
            {
              ::org::apache::lucene::search::Sort a0((jobject) NULL);
              jint a1;
              jboolean a2;
              jboolean a3;
              jboolean a4;
              jboolean a5;
              TopFieldCollector result((jobject) NULL);

              if (!parseArgs(args, "kIZZZZ", ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::TopFieldCollector::create(a0, a1, a2, a3, a4, a5));
                return t_TopFieldCollector::wrap_Object(result);
              }
            }
            break;
           case 7:
            {
              ::org::apache::lucene::search::Sort a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::search::FieldDoc a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              jboolean a5;
              jboolean a6;
              TopFieldCollector result((jobject) NULL);

              if (!parseArgs(args, "kIkZZZZ", ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::search::FieldDoc::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::TopFieldCollector::create(a0, a1, a2, a3, a4, a5, a6));
                return t_TopFieldCollector::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "create", args);
          return NULL;
        }
        static PyObject *t_TopFieldCollector_get__parameters_(t_TopFieldCollector *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/store/RandomAccessInput.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/io/Closeable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *IndexInput::class$ = NULL;
        jmethodID *IndexInput::mids$ = NULL;
        bool IndexInput::live$ = false;

        jclass IndexInput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/IndexInput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_clone_4baa952b] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_getFilePointer_54c6a17a] = env->getMethodID(cls, "getFilePointer", "()J");
            mids$[mid_length_54c6a17a] = env->getMethodID(cls, "length", "()J");
            mids$[mid_randomAccessSlice_27267c8d] = env->getMethodID(cls, "randomAccessSlice", "(JJ)Lorg/apache/lucene/store/RandomAccessInput;");
            mids$[mid_seek_0ee6df2f] = env->getMethodID(cls, "seek", "(J)V");
            mids$[mid_slice_d00c83eb] = env->getMethodID(cls, "slice", "(Ljava/lang/String;JJ)Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexInput IndexInput::clone() const
        {
          return IndexInput(env->callObjectMethod(this$, mids$[mid_clone_4baa952b]));
        }

        void IndexInput::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        jlong IndexInput::getFilePointer() const
        {
          return env->callLongMethod(this$, mids$[mid_getFilePointer_54c6a17a]);
        }

        jlong IndexInput::length() const
        {
          return env->callLongMethod(this$, mids$[mid_length_54c6a17a]);
        }

        ::org::apache::lucene::store::RandomAccessInput IndexInput::randomAccessSlice(jlong a0, jlong a1) const
        {
          return ::org::apache::lucene::store::RandomAccessInput(env->callObjectMethod(this$, mids$[mid_randomAccessSlice_27267c8d], a0, a1));
        }

        void IndexInput::seek(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_seek_0ee6df2f], a0);
        }

        IndexInput IndexInput::slice(const ::java::lang::String & a0, jlong a1, jlong a2) const
        {
          return IndexInput(env->callObjectMethod(this$, mids$[mid_slice_d00c83eb], a0.this$, a1, a2));
        }

        ::java::lang::String IndexInput::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_IndexInput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexInput_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexInput_clone(t_IndexInput *self, PyObject *args);
        static PyObject *t_IndexInput_close(t_IndexInput *self);
        static PyObject *t_IndexInput_getFilePointer(t_IndexInput *self);
        static PyObject *t_IndexInput_length(t_IndexInput *self);
        static PyObject *t_IndexInput_randomAccessSlice(t_IndexInput *self, PyObject *args);
        static PyObject *t_IndexInput_seek(t_IndexInput *self, PyObject *arg);
        static PyObject *t_IndexInput_slice(t_IndexInput *self, PyObject *args);
        static PyObject *t_IndexInput_toString(t_IndexInput *self, PyObject *args);
        static PyObject *t_IndexInput_get__filePointer(t_IndexInput *self, void *data);
        static PyGetSetDef t_IndexInput__fields_[] = {
          DECLARE_GET_FIELD(t_IndexInput, filePointer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexInput__methods_[] = {
          DECLARE_METHOD(t_IndexInput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexInput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexInput, clone, METH_VARARGS),
          DECLARE_METHOD(t_IndexInput, close, METH_NOARGS),
          DECLARE_METHOD(t_IndexInput, getFilePointer, METH_NOARGS),
          DECLARE_METHOD(t_IndexInput, length, METH_NOARGS),
          DECLARE_METHOD(t_IndexInput, randomAccessSlice, METH_VARARGS),
          DECLARE_METHOD(t_IndexInput, seek, METH_O),
          DECLARE_METHOD(t_IndexInput, slice, METH_VARARGS),
          DECLARE_METHOD(t_IndexInput, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexInput, t_IndexInput, ::org::apache::lucene::store::DataInput, IndexInput, abstract_init, 0, 0, t_IndexInput__fields_, 0, 0);

        void t_IndexInput::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexInput), module, "IndexInput", 0);
        }

        void t_IndexInput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexInput).tp_dict, "class_", make_descriptor(IndexInput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexInput).tp_dict, "wrapfn_", make_descriptor(t_IndexInput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexInput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexInput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexInput::initializeClass, 1)))
            return NULL;
          return t_IndexInput::wrap_Object(IndexInput(((t_IndexInput *) arg)->object.this$));
        }
        static PyObject *t_IndexInput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexInput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexInput_clone(t_IndexInput *self, PyObject *args)
        {
          IndexInput result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.clone());
            return t_IndexInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(IndexInput), (PyObject *) self, "clone", args, 2);
        }

        static PyObject *t_IndexInput_close(t_IndexInput *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexInput_getFilePointer(t_IndexInput *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getFilePointer());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_IndexInput_length(t_IndexInput *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.length());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_IndexInput_randomAccessSlice(t_IndexInput *self, PyObject *args)
        {
          jlong a0;
          jlong a1;
          ::org::apache::lucene::store::RandomAccessInput result((jobject) NULL);

          if (!parseArgs(args, "JJ", &a0, &a1))
          {
            OBJ_CALL(result = self->object.randomAccessSlice(a0, a1));
            return ::org::apache::lucene::store::t_RandomAccessInput::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "randomAccessSlice", args);
          return NULL;
        }

        static PyObject *t_IndexInput_seek(t_IndexInput *self, PyObject *arg)
        {
          jlong a0;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(self->object.seek(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "seek", arg);
          return NULL;
        }

        static PyObject *t_IndexInput_slice(t_IndexInput *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong a1;
          jlong a2;
          IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sJJ", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.slice(a0, a1, a2));
            return t_IndexInput::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "slice", args);
          return NULL;
        }

        static PyObject *t_IndexInput_toString(t_IndexInput *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(IndexInput), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_IndexInput_get__filePointer(t_IndexInput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getFilePointer());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/Similarity$SimWeight.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *Similarity$SimWeight::class$ = NULL;
          jmethodID *Similarity$SimWeight::mids$ = NULL;
          bool Similarity$SimWeight::live$ = false;

          jclass Similarity$SimWeight::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/Similarity$SimWeight");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getValueForNormalization_54c6a176] = env->getMethodID(cls, "getValueForNormalization", "()F");
              mids$[mid_normalize_f1b0c004] = env->getMethodID(cls, "normalize", "(FF)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Similarity$SimWeight::Similarity$SimWeight() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat Similarity$SimWeight::getValueForNormalization() const
          {
            return env->callFloatMethod(this$, mids$[mid_getValueForNormalization_54c6a176]);
          }

          void Similarity$SimWeight::normalize(jfloat a0, jfloat a1) const
          {
            env->callVoidMethod(this$, mids$[mid_normalize_f1b0c004], a0, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_Similarity$SimWeight_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Similarity$SimWeight_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Similarity$SimWeight_init_(t_Similarity$SimWeight *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Similarity$SimWeight_getValueForNormalization(t_Similarity$SimWeight *self);
          static PyObject *t_Similarity$SimWeight_normalize(t_Similarity$SimWeight *self, PyObject *args);
          static PyObject *t_Similarity$SimWeight_get__valueForNormalization(t_Similarity$SimWeight *self, void *data);
          static PyGetSetDef t_Similarity$SimWeight__fields_[] = {
            DECLARE_GET_FIELD(t_Similarity$SimWeight, valueForNormalization),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Similarity$SimWeight__methods_[] = {
            DECLARE_METHOD(t_Similarity$SimWeight, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Similarity$SimWeight, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Similarity$SimWeight, getValueForNormalization, METH_NOARGS),
            DECLARE_METHOD(t_Similarity$SimWeight, normalize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Similarity$SimWeight, t_Similarity$SimWeight, ::java::lang::Object, Similarity$SimWeight, t_Similarity$SimWeight_init_, 0, 0, t_Similarity$SimWeight__fields_, 0, 0);

          void t_Similarity$SimWeight::install(PyObject *module)
          {
            installType(&PY_TYPE(Similarity$SimWeight), module, "Similarity$SimWeight", 0);
          }

          void t_Similarity$SimWeight::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Similarity$SimWeight).tp_dict, "class_", make_descriptor(Similarity$SimWeight::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Similarity$SimWeight).tp_dict, "wrapfn_", make_descriptor(t_Similarity$SimWeight::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Similarity$SimWeight).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Similarity$SimWeight_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Similarity$SimWeight::initializeClass, 1)))
              return NULL;
            return t_Similarity$SimWeight::wrap_Object(Similarity$SimWeight(((t_Similarity$SimWeight *) arg)->object.this$));
          }
          static PyObject *t_Similarity$SimWeight_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Similarity$SimWeight::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Similarity$SimWeight_init_(t_Similarity$SimWeight *self, PyObject *args, PyObject *kwds)
          {
            Similarity$SimWeight object((jobject) NULL);

            INT_CALL(object = Similarity$SimWeight());
            self->object = object;

            return 0;
          }

          static PyObject *t_Similarity$SimWeight_getValueForNormalization(t_Similarity$SimWeight *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getValueForNormalization());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_Similarity$SimWeight_normalize(t_Similarity$SimWeight *self, PyObject *args)
          {
            jfloat a0;
            jfloat a1;

            if (!parseArgs(args, "FF", &a0, &a1))
            {
              OBJ_CALL(self->object.normalize(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "normalize", args);
            return NULL;
          }

          static PyObject *t_Similarity$SimWeight_get__valueForNormalization(t_Similarity$SimWeight *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getValueForNormalization());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene49/Lucene49DocValuesFormat.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/DocValuesConsumer.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene49 {

          ::java::lang::Class *Lucene49DocValuesFormat::class$ = NULL;
          jmethodID *Lucene49DocValuesFormat::mids$ = NULL;
          bool Lucene49DocValuesFormat::live$ = false;

          jclass Lucene49DocValuesFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene49/Lucene49DocValuesFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_fieldsConsumer_025deb44] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/DocValuesConsumer;");
              mids$[mid_fieldsProducer_9b0d4e4a] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/DocValuesProducer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene49DocValuesFormat::Lucene49DocValuesFormat() : ::org::apache::lucene::codecs::DocValuesFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::DocValuesConsumer Lucene49DocValuesFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_025deb44], a0.this$));
          }

          ::org::apache::lucene::codecs::DocValuesProducer Lucene49DocValuesFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_9b0d4e4a], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene49 {
          static PyObject *t_Lucene49DocValuesFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene49DocValuesFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene49DocValuesFormat_init_(t_Lucene49DocValuesFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene49DocValuesFormat_fieldsConsumer(t_Lucene49DocValuesFormat *self, PyObject *args);
          static PyObject *t_Lucene49DocValuesFormat_fieldsProducer(t_Lucene49DocValuesFormat *self, PyObject *args);

          static PyMethodDef t_Lucene49DocValuesFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene49DocValuesFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene49DocValuesFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene49DocValuesFormat, fieldsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_Lucene49DocValuesFormat, fieldsProducer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene49DocValuesFormat, t_Lucene49DocValuesFormat, ::org::apache::lucene::codecs::DocValuesFormat, Lucene49DocValuesFormat, t_Lucene49DocValuesFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene49DocValuesFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene49DocValuesFormat), module, "Lucene49DocValuesFormat", 0);
          }

          void t_Lucene49DocValuesFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene49DocValuesFormat).tp_dict, "class_", make_descriptor(Lucene49DocValuesFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene49DocValuesFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene49DocValuesFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene49DocValuesFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene49DocValuesFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene49DocValuesFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene49DocValuesFormat::wrap_Object(Lucene49DocValuesFormat(((t_Lucene49DocValuesFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene49DocValuesFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene49DocValuesFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene49DocValuesFormat_init_(t_Lucene49DocValuesFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene49DocValuesFormat object((jobject) NULL);

            INT_CALL(object = Lucene49DocValuesFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene49DocValuesFormat_fieldsConsumer(t_Lucene49DocValuesFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsConsumer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesConsumer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene49DocValuesFormat), (PyObject *) self, "fieldsConsumer", args, 2);
          }

          static PyObject *t_Lucene49DocValuesFormat_fieldsProducer(t_Lucene49DocValuesFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsProducer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesProducer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene49DocValuesFormat), (PyObject *) self, "fieldsProducer", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/SortedDocValuesField.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *SortedDocValuesField::class$ = NULL;
        jmethodID *SortedDocValuesField::mids$ = NULL;
        bool SortedDocValuesField::live$ = false;
        ::org::apache::lucene::document::FieldType *SortedDocValuesField::TYPE = NULL;

        jclass SortedDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/SortedDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_43cce44e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SortedDocValuesField::SortedDocValuesField(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_43cce44e, a0.this$, a1.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_SortedDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SortedDocValuesField_init_(t_SortedDocValuesField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_SortedDocValuesField__methods_[] = {
          DECLARE_METHOD(t_SortedDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedDocValuesField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SortedDocValuesField, t_SortedDocValuesField, ::org::apache::lucene::document::Field, SortedDocValuesField, t_SortedDocValuesField_init_, 0, 0, 0, 0, 0);

        void t_SortedDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(SortedDocValuesField), module, "SortedDocValuesField", 0);
        }

        void t_SortedDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SortedDocValuesField).tp_dict, "class_", make_descriptor(SortedDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SortedDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_SortedDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SortedDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(SortedDocValuesField::initializeClass);
          PyDict_SetItemString(PY_TYPE(SortedDocValuesField).tp_dict, "TYPE", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*SortedDocValuesField::TYPE)));
        }

        static PyObject *t_SortedDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortedDocValuesField::initializeClass, 1)))
            return NULL;
          return t_SortedDocValuesField::wrap_Object(SortedDocValuesField(((t_SortedDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_SortedDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortedDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SortedDocValuesField_init_(t_SortedDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          SortedDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            INT_CALL(object = SortedDocValuesField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/DocsEnum.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *DocsEnum::class$ = NULL;
        jmethodID *DocsEnum::mids$ = NULL;
        bool DocsEnum::live$ = false;
        jint DocsEnum::FLAG_FREQS = (jint) 0;
        jint DocsEnum::FLAG_NONE = (jint) 0;

        jclass DocsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/DocsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_attributes_f901022b] = env->getMethodID(cls, "attributes", "()Lorg/apache/lucene/util/AttributeSource;");
            mids$[mid_freq_54c6a179] = env->getMethodID(cls, "freq", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            FLAG_FREQS = env->getStaticIntField(cls, "FLAG_FREQS");
            FLAG_NONE = env->getStaticIntField(cls, "FLAG_NONE");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::util::AttributeSource DocsEnum::attributes() const
        {
          return ::org::apache::lucene::util::AttributeSource(env->callObjectMethod(this$, mids$[mid_attributes_f901022b]));
        }

        jint DocsEnum::freq() const
        {
          return env->callIntMethod(this$, mids$[mid_freq_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_DocsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocsEnum_attributes(t_DocsEnum *self);
        static PyObject *t_DocsEnum_freq(t_DocsEnum *self);

        static PyMethodDef t_DocsEnum__methods_[] = {
          DECLARE_METHOD(t_DocsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocsEnum, attributes, METH_NOARGS),
          DECLARE_METHOD(t_DocsEnum, freq, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DocsEnum, t_DocsEnum, ::org::apache::lucene::search::DocIdSetIterator, DocsEnum, abstract_init, 0, 0, 0, 0, 0);

        void t_DocsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(DocsEnum), module, "DocsEnum", 0);
        }

        void t_DocsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DocsEnum).tp_dict, "class_", make_descriptor(DocsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DocsEnum).tp_dict, "wrapfn_", make_descriptor(t_DocsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DocsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(DocsEnum::initializeClass);
          PyDict_SetItemString(PY_TYPE(DocsEnum).tp_dict, "FLAG_FREQS", make_descriptor(DocsEnum::FLAG_FREQS));
          PyDict_SetItemString(PY_TYPE(DocsEnum).tp_dict, "FLAG_NONE", make_descriptor(DocsEnum::FLAG_NONE));
        }

        static PyObject *t_DocsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocsEnum::initializeClass, 1)))
            return NULL;
          return t_DocsEnum::wrap_Object(DocsEnum(((t_DocsEnum *) arg)->object.this$));
        }
        static PyObject *t_DocsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DocsEnum_attributes(t_DocsEnum *self)
        {
          ::org::apache::lucene::util::AttributeSource result((jobject) NULL);
          OBJ_CALL(result = self->object.attributes());
          return ::org::apache::lucene::util::t_AttributeSource::wrap_Object(result);
        }

        static PyObject *t_DocsEnum_freq(t_DocsEnum *self)
        {
          jint result;
          OBJ_CALL(result = self->object.freq());
          return PyInt_FromLong((long) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/LuceneLevenshteinDistance.h"
#include "org/apache/lucene/search/spell/StringDistance.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *LuceneLevenshteinDistance::class$ = NULL;
          jmethodID *LuceneLevenshteinDistance::mids$ = NULL;
          bool LuceneLevenshteinDistance::live$ = false;

          jclass LuceneLevenshteinDistance::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/LuceneLevenshteinDistance");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getDistance_4a264752] = env->getMethodID(cls, "getDistance", "(Ljava/lang/String;Ljava/lang/String;)F");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LuceneLevenshteinDistance::LuceneLevenshteinDistance() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat LuceneLevenshteinDistance::getDistance(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_getDistance_4a264752], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_LuceneLevenshteinDistance_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LuceneLevenshteinDistance_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LuceneLevenshteinDistance_init_(t_LuceneLevenshteinDistance *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LuceneLevenshteinDistance_getDistance(t_LuceneLevenshteinDistance *self, PyObject *args);

          static PyMethodDef t_LuceneLevenshteinDistance__methods_[] = {
            DECLARE_METHOD(t_LuceneLevenshteinDistance, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LuceneLevenshteinDistance, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LuceneLevenshteinDistance, getDistance, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LuceneLevenshteinDistance, t_LuceneLevenshteinDistance, ::java::lang::Object, LuceneLevenshteinDistance, t_LuceneLevenshteinDistance_init_, 0, 0, 0, 0, 0);

          void t_LuceneLevenshteinDistance::install(PyObject *module)
          {
            installType(&PY_TYPE(LuceneLevenshteinDistance), module, "LuceneLevenshteinDistance", 0);
          }

          void t_LuceneLevenshteinDistance::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LuceneLevenshteinDistance).tp_dict, "class_", make_descriptor(LuceneLevenshteinDistance::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LuceneLevenshteinDistance).tp_dict, "wrapfn_", make_descriptor(t_LuceneLevenshteinDistance::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LuceneLevenshteinDistance).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LuceneLevenshteinDistance_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LuceneLevenshteinDistance::initializeClass, 1)))
              return NULL;
            return t_LuceneLevenshteinDistance::wrap_Object(LuceneLevenshteinDistance(((t_LuceneLevenshteinDistance *) arg)->object.this$));
          }
          static PyObject *t_LuceneLevenshteinDistance_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LuceneLevenshteinDistance::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LuceneLevenshteinDistance_init_(t_LuceneLevenshteinDistance *self, PyObject *args, PyObject *kwds)
          {
            LuceneLevenshteinDistance object((jobject) NULL);

            INT_CALL(object = LuceneLevenshteinDistance());
            self->object = object;

            return 0;
          }

          static PyObject *t_LuceneLevenshteinDistance_getDistance(t_LuceneLevenshteinDistance *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jfloat result;

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getDistance(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "getDistance", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/FacetsCollector$MatchingDocs.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *FacetsCollector$MatchingDocs::class$ = NULL;
        jmethodID *FacetsCollector$MatchingDocs::mids$ = NULL;
        jfieldID *FacetsCollector$MatchingDocs::fids$ = NULL;
        bool FacetsCollector$MatchingDocs::live$ = false;

        jclass FacetsCollector$MatchingDocs::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/FacetsCollector$MatchingDocs");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_9edc9b13] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/search/DocIdSet;I[F)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_bits] = env->getFieldID(cls, "bits", "Lorg/apache/lucene/search/DocIdSet;");
            fids$[fid_context] = env->getFieldID(cls, "context", "Lorg/apache/lucene/index/AtomicReaderContext;");
            fids$[fid_scores] = env->getFieldID(cls, "scores", "[F");
            fids$[fid_totalHits] = env->getFieldID(cls, "totalHits", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FacetsCollector$MatchingDocs::FacetsCollector$MatchingDocs(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::search::DocIdSet & a1, jint a2, const JArray< jfloat > & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9edc9b13, a0.this$, a1.this$, a2, a3.this$)) {}

        ::org::apache::lucene::search::DocIdSet FacetsCollector$MatchingDocs::_get_bits() const
        {
          return ::org::apache::lucene::search::DocIdSet(env->getObjectField(this$, fids$[fid_bits]));
        }

        ::org::apache::lucene::index::AtomicReaderContext FacetsCollector$MatchingDocs::_get_context() const
        {
          return ::org::apache::lucene::index::AtomicReaderContext(env->getObjectField(this$, fids$[fid_context]));
        }

        JArray< jfloat > FacetsCollector$MatchingDocs::_get_scores() const
        {
          return JArray< jfloat >(env->getObjectField(this$, fids$[fid_scores]));
        }

        jint FacetsCollector$MatchingDocs::_get_totalHits() const
        {
          return env->getIntField(this$, fids$[fid_totalHits]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_FacetsCollector$MatchingDocs_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FacetsCollector$MatchingDocs_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FacetsCollector$MatchingDocs_init_(t_FacetsCollector$MatchingDocs *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FacetsCollector$MatchingDocs_get__bits(t_FacetsCollector$MatchingDocs *self, void *data);
        static PyObject *t_FacetsCollector$MatchingDocs_get__context(t_FacetsCollector$MatchingDocs *self, void *data);
        static PyObject *t_FacetsCollector$MatchingDocs_get__scores(t_FacetsCollector$MatchingDocs *self, void *data);
        static PyObject *t_FacetsCollector$MatchingDocs_get__totalHits(t_FacetsCollector$MatchingDocs *self, void *data);

        static PyGetSetDef t_FacetsCollector$MatchingDocs__fields_[] = {
          DECLARE_GET_FIELD(t_FacetsCollector$MatchingDocs, bits),
          DECLARE_GET_FIELD(t_FacetsCollector$MatchingDocs, context),
          DECLARE_GET_FIELD(t_FacetsCollector$MatchingDocs, scores),
          DECLARE_GET_FIELD(t_FacetsCollector$MatchingDocs, totalHits),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FacetsCollector$MatchingDocs__methods_[] = {
          DECLARE_METHOD(t_FacetsCollector$MatchingDocs, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FacetsCollector$MatchingDocs, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FacetsCollector$MatchingDocs, t_FacetsCollector$MatchingDocs, ::java::lang::Object, FacetsCollector$MatchingDocs, t_FacetsCollector$MatchingDocs_init_, 0, 0, t_FacetsCollector$MatchingDocs__fields_, 0, 0);

        void t_FacetsCollector$MatchingDocs::install(PyObject *module)
        {
          installType(&PY_TYPE(FacetsCollector$MatchingDocs), module, "FacetsCollector$MatchingDocs", 0);
        }

        void t_FacetsCollector$MatchingDocs::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FacetsCollector$MatchingDocs).tp_dict, "class_", make_descriptor(FacetsCollector$MatchingDocs::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FacetsCollector$MatchingDocs).tp_dict, "wrapfn_", make_descriptor(t_FacetsCollector$MatchingDocs::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FacetsCollector$MatchingDocs).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FacetsCollector$MatchingDocs_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FacetsCollector$MatchingDocs::initializeClass, 1)))
            return NULL;
          return t_FacetsCollector$MatchingDocs::wrap_Object(FacetsCollector$MatchingDocs(((t_FacetsCollector$MatchingDocs *) arg)->object.this$));
        }
        static PyObject *t_FacetsCollector$MatchingDocs_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FacetsCollector$MatchingDocs::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FacetsCollector$MatchingDocs_init_(t_FacetsCollector$MatchingDocs *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet a1((jobject) NULL);
          jint a2;
          JArray< jfloat > a3((jobject) NULL);
          FacetsCollector$MatchingDocs object((jobject) NULL);

          if (!parseArgs(args, "kkI[F", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::search::DocIdSet::initializeClass, &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = FacetsCollector$MatchingDocs(a0, a1, a2, a3));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FacetsCollector$MatchingDocs_get__bits(t_FacetsCollector$MatchingDocs *self, void *data)
        {
          ::org::apache::lucene::search::DocIdSet value((jobject) NULL);
          OBJ_CALL(value = self->object._get_bits());
          return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(value);
        }

        static PyObject *t_FacetsCollector$MatchingDocs_get__context(t_FacetsCollector$MatchingDocs *self, void *data)
        {
          ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
          OBJ_CALL(value = self->object._get_context());
          return ::org::apache::lucene::index::t_AtomicReaderContext::wrap_Object(value);
        }

        static PyObject *t_FacetsCollector$MatchingDocs_get__scores(t_FacetsCollector$MatchingDocs *self, void *data)
        {
          JArray< jfloat > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_scores());
          return value.wrap();
        }

        static PyObject *t_FacetsCollector$MatchingDocs_get__totalHits(t_FacetsCollector$MatchingDocs *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_totalHits());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/ValueSourceScorer.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {

          ::java::lang::Class *ValueSourceScorer::class$ = NULL;
          jmethodID *ValueSourceScorer::mids$ = NULL;
          bool ValueSourceScorer::live$ = false;

          jclass ValueSourceScorer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/ValueSourceScorer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_advance_39c7bd23] = env->getMethodID(cls, "advance", "(I)I");
              mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
              mids$[mid_docID_54c6a179] = env->getMethodID(cls, "docID", "()I");
              mids$[mid_freq_54c6a179] = env->getMethodID(cls, "freq", "()I");
              mids$[mid_getReader_94bbd010] = env->getMethodID(cls, "getReader", "()Lorg/apache/lucene/index/IndexReader;");
              mids$[mid_matches_39c7bd30] = env->getMethodID(cls, "matches", "(I)Z");
              mids$[mid_matchesValue_39c7bd30] = env->getMethodID(cls, "matchesValue", "(I)Z");
              mids$[mid_nextDoc_54c6a179] = env->getMethodID(cls, "nextDoc", "()I");
              mids$[mid_score_54c6a176] = env->getMethodID(cls, "score", "()F");
              mids$[mid_setCheckDeletes_bb0c767f] = env->getMethodID(cls, "setCheckDeletes", "(Z)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint ValueSourceScorer::advance(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_advance_39c7bd23], a0);
          }

          jlong ValueSourceScorer::cost() const
          {
            return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
          }

          jint ValueSourceScorer::docID() const
          {
            return env->callIntMethod(this$, mids$[mid_docID_54c6a179]);
          }

          jint ValueSourceScorer::freq() const
          {
            return env->callIntMethod(this$, mids$[mid_freq_54c6a179]);
          }

          ::org::apache::lucene::index::IndexReader ValueSourceScorer::getReader() const
          {
            return ::org::apache::lucene::index::IndexReader(env->callObjectMethod(this$, mids$[mid_getReader_94bbd010]));
          }

          jboolean ValueSourceScorer::matches(jint a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_matches_39c7bd30], a0);
          }

          jboolean ValueSourceScorer::matchesValue(jint a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_matchesValue_39c7bd30], a0);
          }

          jint ValueSourceScorer::nextDoc() const
          {
            return env->callIntMethod(this$, mids$[mid_nextDoc_54c6a179]);
          }

          jfloat ValueSourceScorer::score() const
          {
            return env->callFloatMethod(this$, mids$[mid_score_54c6a176]);
          }

          void ValueSourceScorer::setCheckDeletes(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setCheckDeletes_bb0c767f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          static PyObject *t_ValueSourceScorer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ValueSourceScorer_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ValueSourceScorer_advance(t_ValueSourceScorer *self, PyObject *args);
          static PyObject *t_ValueSourceScorer_cost(t_ValueSourceScorer *self, PyObject *args);
          static PyObject *t_ValueSourceScorer_docID(t_ValueSourceScorer *self, PyObject *args);
          static PyObject *t_ValueSourceScorer_freq(t_ValueSourceScorer *self, PyObject *args);
          static PyObject *t_ValueSourceScorer_getReader(t_ValueSourceScorer *self);
          static PyObject *t_ValueSourceScorer_matches(t_ValueSourceScorer *self, PyObject *arg);
          static PyObject *t_ValueSourceScorer_matchesValue(t_ValueSourceScorer *self, PyObject *arg);
          static PyObject *t_ValueSourceScorer_nextDoc(t_ValueSourceScorer *self, PyObject *args);
          static PyObject *t_ValueSourceScorer_score(t_ValueSourceScorer *self, PyObject *args);
          static PyObject *t_ValueSourceScorer_setCheckDeletes(t_ValueSourceScorer *self, PyObject *arg);
          static int t_ValueSourceScorer_set__checkDeletes(t_ValueSourceScorer *self, PyObject *arg, void *data);
          static PyObject *t_ValueSourceScorer_get__reader(t_ValueSourceScorer *self, void *data);
          static PyGetSetDef t_ValueSourceScorer__fields_[] = {
            DECLARE_SET_FIELD(t_ValueSourceScorer, checkDeletes),
            DECLARE_GET_FIELD(t_ValueSourceScorer, reader),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ValueSourceScorer__methods_[] = {
            DECLARE_METHOD(t_ValueSourceScorer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ValueSourceScorer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ValueSourceScorer, advance, METH_VARARGS),
            DECLARE_METHOD(t_ValueSourceScorer, cost, METH_VARARGS),
            DECLARE_METHOD(t_ValueSourceScorer, docID, METH_VARARGS),
            DECLARE_METHOD(t_ValueSourceScorer, freq, METH_VARARGS),
            DECLARE_METHOD(t_ValueSourceScorer, getReader, METH_NOARGS),
            DECLARE_METHOD(t_ValueSourceScorer, matches, METH_O),
            DECLARE_METHOD(t_ValueSourceScorer, matchesValue, METH_O),
            DECLARE_METHOD(t_ValueSourceScorer, nextDoc, METH_VARARGS),
            DECLARE_METHOD(t_ValueSourceScorer, score, METH_VARARGS),
            DECLARE_METHOD(t_ValueSourceScorer, setCheckDeletes, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ValueSourceScorer, t_ValueSourceScorer, ::org::apache::lucene::search::Scorer, ValueSourceScorer, abstract_init, 0, 0, t_ValueSourceScorer__fields_, 0, 0);

          void t_ValueSourceScorer::install(PyObject *module)
          {
            installType(&PY_TYPE(ValueSourceScorer), module, "ValueSourceScorer", 0);
          }

          void t_ValueSourceScorer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ValueSourceScorer).tp_dict, "class_", make_descriptor(ValueSourceScorer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ValueSourceScorer).tp_dict, "wrapfn_", make_descriptor(t_ValueSourceScorer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ValueSourceScorer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ValueSourceScorer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ValueSourceScorer::initializeClass, 1)))
              return NULL;
            return t_ValueSourceScorer::wrap_Object(ValueSourceScorer(((t_ValueSourceScorer *) arg)->object.this$));
          }
          static PyObject *t_ValueSourceScorer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ValueSourceScorer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_ValueSourceScorer_advance(t_ValueSourceScorer *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.advance(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(ValueSourceScorer), (PyObject *) self, "advance", args, 2);
          }

          static PyObject *t_ValueSourceScorer_cost(t_ValueSourceScorer *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.cost());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(ValueSourceScorer), (PyObject *) self, "cost", args, 2);
          }

          static PyObject *t_ValueSourceScorer_docID(t_ValueSourceScorer *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.docID());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(ValueSourceScorer), (PyObject *) self, "docID", args, 2);
          }

          static PyObject *t_ValueSourceScorer_freq(t_ValueSourceScorer *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.freq());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(ValueSourceScorer), (PyObject *) self, "freq", args, 2);
          }

          static PyObject *t_ValueSourceScorer_getReader(t_ValueSourceScorer *self)
          {
            ::org::apache::lucene::index::IndexReader result((jobject) NULL);
            OBJ_CALL(result = self->object.getReader());
            return ::org::apache::lucene::index::t_IndexReader::wrap_Object(result);
          }

          static PyObject *t_ValueSourceScorer_matches(t_ValueSourceScorer *self, PyObject *arg)
          {
            jint a0;
            jboolean result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.matches(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "matches", arg);
            return NULL;
          }

          static PyObject *t_ValueSourceScorer_matchesValue(t_ValueSourceScorer *self, PyObject *arg)
          {
            jint a0;
            jboolean result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.matchesValue(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "matchesValue", arg);
            return NULL;
          }

          static PyObject *t_ValueSourceScorer_nextDoc(t_ValueSourceScorer *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.nextDoc());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(ValueSourceScorer), (PyObject *) self, "nextDoc", args, 2);
          }

          static PyObject *t_ValueSourceScorer_score(t_ValueSourceScorer *self, PyObject *args)
          {
            jfloat result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.score());
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(ValueSourceScorer), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_ValueSourceScorer_setCheckDeletes(t_ValueSourceScorer *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setCheckDeletes(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setCheckDeletes", arg);
            return NULL;
          }

          static int t_ValueSourceScorer_set__checkDeletes(t_ValueSourceScorer *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setCheckDeletes(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "checkDeletes", arg);
            return -1;
          }

          static PyObject *t_ValueSourceScorer_get__reader(t_ValueSourceScorer *self, void *data)
          {
            ::org::apache::lucene::index::IndexReader value((jobject) NULL);
            OBJ_CALL(value = self->object.getReader());
            return ::org::apache::lucene::index::t_IndexReader::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/util/PythonListIterator.h"
#include "java/lang/Object.h"
#include "java/util/ListIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {

        ::java::lang::Class *PythonListIterator::class$ = NULL;
        jmethodID *PythonListIterator::mids$ = NULL;
        bool PythonListIterator::live$ = false;

        jclass PythonListIterator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/util/PythonListIterator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_290588ee] = env->getMethodID(cls, "add", "(Ljava/lang/Object;)V");
            mids$[mid_hasPrevious_54c6a16a] = env->getMethodID(cls, "hasPrevious", "()Z");
            mids$[mid_nextIndex_54c6a179] = env->getMethodID(cls, "nextIndex", "()I");
            mids$[mid_previous_846352c3] = env->getMethodID(cls, "previous", "()Ljava/lang/Object;");
            mids$[mid_previousIndex_54c6a179] = env->getMethodID(cls, "previousIndex", "()I");
            mids$[mid_remove_54c6a166] = env->getMethodID(cls, "remove", "()V");
            mids$[mid_set_290588ee] = env->getMethodID(cls, "set", "(Ljava/lang/Object;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonListIterator::PythonListIterator() : ::org::apache::pylucene::util::PythonIterator(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonListIterator::add(const ::java::lang::Object & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_290588ee], a0.this$);
        }

        jboolean PythonListIterator::hasPrevious() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasPrevious_54c6a16a]);
        }

        jint PythonListIterator::nextIndex() const
        {
          return env->callIntMethod(this$, mids$[mid_nextIndex_54c6a179]);
        }

        ::java::lang::Object PythonListIterator::previous() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_previous_846352c3]));
        }

        jint PythonListIterator::previousIndex() const
        {
          return env->callIntMethod(this$, mids$[mid_previousIndex_54c6a179]);
        }

        void PythonListIterator::remove() const
        {
          env->callVoidMethod(this$, mids$[mid_remove_54c6a166]);
        }

        void PythonListIterator::set(const ::java::lang::Object & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_set_290588ee], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {
        static PyObject *t_PythonListIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonListIterator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonListIterator_init_(t_PythonListIterator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonListIterator_add(t_PythonListIterator *self, PyObject *arg);
        static PyObject *t_PythonListIterator_hasPrevious(t_PythonListIterator *self);
        static PyObject *t_PythonListIterator_nextIndex(t_PythonListIterator *self);
        static PyObject *t_PythonListIterator_previous(t_PythonListIterator *self);
        static PyObject *t_PythonListIterator_previousIndex(t_PythonListIterator *self);
        static PyObject *t_PythonListIterator_remove(t_PythonListIterator *self, PyObject *args);
        static PyObject *t_PythonListIterator_set(t_PythonListIterator *self, PyObject *arg);

        static PyMethodDef t_PythonListIterator__methods_[] = {
          DECLARE_METHOD(t_PythonListIterator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonListIterator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonListIterator, add, METH_O),
          DECLARE_METHOD(t_PythonListIterator, hasPrevious, METH_NOARGS),
          DECLARE_METHOD(t_PythonListIterator, nextIndex, METH_NOARGS),
          DECLARE_METHOD(t_PythonListIterator, previous, METH_NOARGS),
          DECLARE_METHOD(t_PythonListIterator, previousIndex, METH_NOARGS),
          DECLARE_METHOD(t_PythonListIterator, remove, METH_VARARGS),
          DECLARE_METHOD(t_PythonListIterator, set, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonListIterator, t_PythonListIterator, ::org::apache::pylucene::util::PythonIterator, PythonListIterator, t_PythonListIterator_init_, 0, 0, 0, 0, 0);

        void t_PythonListIterator::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonListIterator), module, "PythonListIterator", 0);
        }

        void t_PythonListIterator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonListIterator).tp_dict, "class_", make_descriptor(PythonListIterator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonListIterator).tp_dict, "wrapfn_", make_descriptor(t_PythonListIterator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonListIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PythonListIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonListIterator::initializeClass, 1)))
            return NULL;
          return t_PythonListIterator::wrap_Object(PythonListIterator(((t_PythonListIterator *) arg)->object.this$));
        }
        static PyObject *t_PythonListIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonListIterator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonListIterator_init_(t_PythonListIterator *self, PyObject *args, PyObject *kwds)
        {
          PythonListIterator object((jobject) NULL);

          INT_CALL(object = PythonListIterator());
          self->object = object;

          return 0;
        }

        static PyObject *t_PythonListIterator_add(t_PythonListIterator *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArg(arg, "o", &a0))
          {
            OBJ_CALL(self->object.add(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "add", arg);
          return NULL;
        }

        static PyObject *t_PythonListIterator_hasPrevious(t_PythonListIterator *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasPrevious());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_PythonListIterator_nextIndex(t_PythonListIterator *self)
        {
          jint result;
          OBJ_CALL(result = self->object.nextIndex());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_PythonListIterator_previous(t_PythonListIterator *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.previous());
          return ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_PythonListIterator_previousIndex(t_PythonListIterator *self)
        {
          jint result;
          OBJ_CALL(result = self->object.previousIndex());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_PythonListIterator_remove(t_PythonListIterator *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.remove());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PythonListIterator), (PyObject *) self, "remove", args, 2);
        }

        static PyObject *t_PythonListIterator_set(t_PythonListIterator *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArg(arg, "o", &a0))
          {
            OBJ_CALL(self->object.set(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "set", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/builders/QueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace builders {

              ::java::lang::Class *QueryBuilder::class$ = NULL;
              jmethodID *QueryBuilder::mids$ = NULL;
              bool QueryBuilder::live$ = false;

              jclass QueryBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/builders/QueryBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_build_30efaf9c] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Ljava/lang/Object;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::java::lang::Object QueryBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_build_30efaf9c], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace builders {
              static PyObject *t_QueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryBuilder_build(t_QueryBuilder *self, PyObject *arg);

              static PyMethodDef t_QueryBuilder__methods_[] = {
                DECLARE_METHOD(t_QueryBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(QueryBuilder, t_QueryBuilder, ::java::lang::Object, QueryBuilder, abstract_init, 0, 0, 0, 0, 0);

              void t_QueryBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(QueryBuilder), module, "QueryBuilder", 0);
              }

              void t_QueryBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(QueryBuilder).tp_dict, "class_", make_descriptor(QueryBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(QueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_QueryBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(QueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_QueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, QueryBuilder::initializeClass, 1)))
                  return NULL;
                return t_QueryBuilder::wrap_Object(QueryBuilder(((t_QueryBuilder *) arg)->object.this$));
              }
              static PyObject *t_QueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, QueryBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_QueryBuilder_build(t_QueryBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::java::lang::Object result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::java::lang::t_Object::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo$Toffs.h"
#include "java/lang/Comparable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FieldPhraseList$WeightedPhraseInfo$Toffs::class$ = NULL;
          jmethodID *FieldPhraseList$WeightedPhraseInfo$Toffs::mids$ = NULL;
          bool FieldPhraseList$WeightedPhraseInfo$Toffs::live$ = false;

          jclass FieldPhraseList$WeightedPhraseInfo$Toffs::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo$Toffs");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d8d154a6] = env->getMethodID(cls, "<init>", "(II)V");
              mids$[mid_compareTo_7779971e] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo$Toffs;)I");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getEndOffset_54c6a179] = env->getMethodID(cls, "getEndOffset", "()I");
              mids$[mid_getStartOffset_54c6a179] = env->getMethodID(cls, "getStartOffset", "()I");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_setEndOffset_39c7bd3c] = env->getMethodID(cls, "setEndOffset", "(I)V");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FieldPhraseList$WeightedPhraseInfo$Toffs::FieldPhraseList$WeightedPhraseInfo$Toffs(jint a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d8d154a6, a0, a1)) {}

          jint FieldPhraseList$WeightedPhraseInfo$Toffs::compareTo(const FieldPhraseList$WeightedPhraseInfo$Toffs & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareTo_7779971e], a0.this$);
          }

          jboolean FieldPhraseList$WeightedPhraseInfo$Toffs::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint FieldPhraseList$WeightedPhraseInfo$Toffs::getEndOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getEndOffset_54c6a179]);
          }

          jint FieldPhraseList$WeightedPhraseInfo$Toffs::getStartOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getStartOffset_54c6a179]);
          }

          jint FieldPhraseList$WeightedPhraseInfo$Toffs::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          void FieldPhraseList$WeightedPhraseInfo$Toffs::setEndOffset(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setEndOffset_39c7bd3c], a0);
          }

          ::java::lang::String FieldPhraseList$WeightedPhraseInfo$Toffs::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FieldPhraseList$WeightedPhraseInfo$Toffs_init_(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_compareTo(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *arg);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_equals(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *args);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_getEndOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_getStartOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_hashCode(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *args);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_setEndOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *arg);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_toString(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *args);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_get__endOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, void *data);
          static int t_FieldPhraseList$WeightedPhraseInfo$Toffs_set__endOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *arg, void *data);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_get__startOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, void *data);
          static PyGetSetDef t_FieldPhraseList$WeightedPhraseInfo$Toffs__fields_[] = {
            DECLARE_GETSET_FIELD(t_FieldPhraseList$WeightedPhraseInfo$Toffs, endOffset),
            DECLARE_GET_FIELD(t_FieldPhraseList$WeightedPhraseInfo$Toffs, startOffset),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldPhraseList$WeightedPhraseInfo$Toffs__methods_[] = {
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo$Toffs, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo$Toffs, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo$Toffs, compareTo, METH_O),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo$Toffs, equals, METH_VARARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo$Toffs, getEndOffset, METH_NOARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo$Toffs, getStartOffset, METH_NOARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo$Toffs, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo$Toffs, setEndOffset, METH_O),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo$Toffs, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FieldPhraseList$WeightedPhraseInfo$Toffs, t_FieldPhraseList$WeightedPhraseInfo$Toffs, ::java::lang::Object, FieldPhraseList$WeightedPhraseInfo$Toffs, t_FieldPhraseList$WeightedPhraseInfo$Toffs_init_, 0, 0, t_FieldPhraseList$WeightedPhraseInfo$Toffs__fields_, 0, 0);

          void t_FieldPhraseList$WeightedPhraseInfo$Toffs::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldPhraseList$WeightedPhraseInfo$Toffs), module, "FieldPhraseList$WeightedPhraseInfo$Toffs", 0);
          }

          void t_FieldPhraseList$WeightedPhraseInfo$Toffs::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FieldPhraseList$WeightedPhraseInfo$Toffs).tp_dict, "class_", make_descriptor(FieldPhraseList$WeightedPhraseInfo$Toffs::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FieldPhraseList$WeightedPhraseInfo$Toffs).tp_dict, "wrapfn_", make_descriptor(t_FieldPhraseList$WeightedPhraseInfo$Toffs::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FieldPhraseList$WeightedPhraseInfo$Toffs).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldPhraseList$WeightedPhraseInfo$Toffs::initializeClass, 1)))
              return NULL;
            return t_FieldPhraseList$WeightedPhraseInfo$Toffs::wrap_Object(FieldPhraseList$WeightedPhraseInfo$Toffs(((t_FieldPhraseList$WeightedPhraseInfo$Toffs *) arg)->object.this$));
          }
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldPhraseList$WeightedPhraseInfo$Toffs::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FieldPhraseList$WeightedPhraseInfo$Toffs_init_(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            jint a1;
            FieldPhraseList$WeightedPhraseInfo$Toffs object((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              INT_CALL(object = FieldPhraseList$WeightedPhraseInfo$Toffs(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_compareTo(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *arg)
          {
            FieldPhraseList$WeightedPhraseInfo$Toffs a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", FieldPhraseList$WeightedPhraseInfo$Toffs::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.compareTo(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
            return NULL;
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_equals(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FieldPhraseList$WeightedPhraseInfo$Toffs), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_getEndOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEndOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_getStartOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getStartOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_hashCode(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(FieldPhraseList$WeightedPhraseInfo$Toffs), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_setEndOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setEndOffset(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setEndOffset", arg);
            return NULL;
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_toString(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(FieldPhraseList$WeightedPhraseInfo$Toffs), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_get__endOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEndOffset());
            return PyInt_FromLong((long) value);
          }
          static int t_FieldPhraseList$WeightedPhraseInfo$Toffs_set__endOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setEndOffset(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "endOffset", arg);
            return -1;
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo$Toffs_get__startOffset(t_FieldPhraseList$WeightedPhraseInfo$Toffs *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getStartOffset());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/ByteBlockPool$Allocator.h"
#include "java/lang/Class.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *ByteBlockPool$Allocator::class$ = NULL;
        jmethodID *ByteBlockPool$Allocator::mids$ = NULL;
        bool ByteBlockPool$Allocator::live$ = false;

        jclass ByteBlockPool$Allocator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/ByteBlockPool$Allocator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_getByteBlock_dab10e7e] = env->getMethodID(cls, "getByteBlock", "()[B");
            mids$[mid_recycleByteBlocks_1fde8fc3] = env->getMethodID(cls, "recycleByteBlocks", "(Ljava/util/List;)V");
            mids$[mid_recycleByteBlocks_d3ffa89f] = env->getMethodID(cls, "recycleByteBlocks", "([[BII)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ByteBlockPool$Allocator::ByteBlockPool$Allocator(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        JArray< jbyte > ByteBlockPool$Allocator::getByteBlock() const
        {
          return JArray< jbyte >(env->callObjectMethod(this$, mids$[mid_getByteBlock_dab10e7e]));
        }

        void ByteBlockPool$Allocator::recycleByteBlocks(const ::java::util::List & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_recycleByteBlocks_1fde8fc3], a0.this$);
        }

        void ByteBlockPool$Allocator::recycleByteBlocks(const JArray< JArray< jbyte > > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_recycleByteBlocks_d3ffa89f], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_ByteBlockPool$Allocator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ByteBlockPool$Allocator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ByteBlockPool$Allocator_init_(t_ByteBlockPool$Allocator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ByteBlockPool$Allocator_getByteBlock(t_ByteBlockPool$Allocator *self);
        static PyObject *t_ByteBlockPool$Allocator_recycleByteBlocks(t_ByteBlockPool$Allocator *self, PyObject *args);
        static PyObject *t_ByteBlockPool$Allocator_get__byteBlock(t_ByteBlockPool$Allocator *self, void *data);
        static PyGetSetDef t_ByteBlockPool$Allocator__fields_[] = {
          DECLARE_GET_FIELD(t_ByteBlockPool$Allocator, byteBlock),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ByteBlockPool$Allocator__methods_[] = {
          DECLARE_METHOD(t_ByteBlockPool$Allocator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteBlockPool$Allocator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteBlockPool$Allocator, getByteBlock, METH_NOARGS),
          DECLARE_METHOD(t_ByteBlockPool$Allocator, recycleByteBlocks, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ByteBlockPool$Allocator, t_ByteBlockPool$Allocator, ::java::lang::Object, ByteBlockPool$Allocator, t_ByteBlockPool$Allocator_init_, 0, 0, t_ByteBlockPool$Allocator__fields_, 0, 0);

        void t_ByteBlockPool$Allocator::install(PyObject *module)
        {
          installType(&PY_TYPE(ByteBlockPool$Allocator), module, "ByteBlockPool$Allocator", 0);
        }

        void t_ByteBlockPool$Allocator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ByteBlockPool$Allocator).tp_dict, "class_", make_descriptor(ByteBlockPool$Allocator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool$Allocator).tp_dict, "wrapfn_", make_descriptor(t_ByteBlockPool$Allocator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool$Allocator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ByteBlockPool$Allocator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ByteBlockPool$Allocator::initializeClass, 1)))
            return NULL;
          return t_ByteBlockPool$Allocator::wrap_Object(ByteBlockPool$Allocator(((t_ByteBlockPool$Allocator *) arg)->object.this$));
        }
        static PyObject *t_ByteBlockPool$Allocator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ByteBlockPool$Allocator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ByteBlockPool$Allocator_init_(t_ByteBlockPool$Allocator *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          ByteBlockPool$Allocator object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = ByteBlockPool$Allocator(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ByteBlockPool$Allocator_getByteBlock(t_ByteBlockPool$Allocator *self)
        {
          JArray< jbyte > result((jobject) NULL);
          OBJ_CALL(result = self->object.getByteBlock());
          return result.wrap();
        }

        static PyObject *t_ByteBlockPool$Allocator_recycleByteBlocks(t_ByteBlockPool$Allocator *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
              {
                OBJ_CALL(self->object.recycleByteBlocks(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< JArray< jbyte > > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.recycleByteBlocks(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "recycleByteBlocks", args);
          return NULL;
        }

        static PyObject *t_ByteBlockPool$Allocator_get__byteBlock(t_ByteBlockPool$Allocator *self, void *data)
        {
          JArray< jbyte > value((jobject) NULL);
          OBJ_CALL(value = self->object.getByteBlock());
          return value.wrap();
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "java/util/Comparator.h"
#include "java/util/Collection.h"
#include "java/lang/Comparable.h"
#include "java/lang/Integer.h"
#include "java/lang/Class.h"
#include "java/lang/NumberFormatException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *ArrayUtil::class$ = NULL;
        jmethodID *ArrayUtil::mids$ = NULL;
        bool ArrayUtil::live$ = false;
        jint ArrayUtil::MAX_ARRAY_LENGTH = (jint) 0;

        jclass ArrayUtil::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/ArrayUtil");

            mids$ = new jmethodID[max_mid];
            mids$[mid_equals_082119cc] = env->getStaticMethodID(cls, "equals", "([II[III)Z");
            mids$[mid_equals_8c28d07c] = env->getStaticMethodID(cls, "equals", "([CI[CII)Z");
            mids$[mid_equals_06f361be] = env->getStaticMethodID(cls, "equals", "([BI[BII)Z");
            mids$[mid_getShrinkSize_d3236abb] = env->getStaticMethodID(cls, "getShrinkSize", "(III)I");
            mids$[mid_grow_4ea7c525] = env->getStaticMethodID(cls, "grow", "([F)[F");
            mids$[mid_grow_607a9cf1] = env->getStaticMethodID(cls, "grow", "([D)[D");
            mids$[mid_grow_21fe49ab] = env->getStaticMethodID(cls, "grow", "([[I)[[I");
            mids$[mid_grow_6dd1ed5d] = env->getStaticMethodID(cls, "grow", "([J)[J");
            mids$[mid_grow_fc3c604f] = env->getStaticMethodID(cls, "grow", "([I)[I");
            mids$[mid_grow_e08af67d] = env->getStaticMethodID(cls, "grow", "([Z)[Z");
            mids$[mid_grow_12f49f5f] = env->getStaticMethodID(cls, "grow", "([C)[C");
            mids$[mid_grow_27787b8f] = env->getStaticMethodID(cls, "grow", "([[F)[[F");
            mids$[mid_grow_3de5243f] = env->getStaticMethodID(cls, "grow", "([S)[S");
            mids$[mid_grow_1193226d] = env->getStaticMethodID(cls, "grow", "([B)[B");
            mids$[mid_grow_e2c1f835] = env->getStaticMethodID(cls, "grow", "([DI)[D");
            mids$[mid_grow_d090ee39] = env->getStaticMethodID(cls, "grow", "([SI)[S");
            mids$[mid_grow_1fbccced] = env->getStaticMethodID(cls, "grow", "([ZI)[Z");
            mids$[mid_grow_62111365] = env->getStaticMethodID(cls, "grow", "([[II)[[I");
            mids$[mid_grow_6bd5869d] = env->getStaticMethodID(cls, "grow", "([BI)[B");
            mids$[mid_grow_91cb90f9] = env->getStaticMethodID(cls, "grow", "([CI)[C");
            mids$[mid_grow_0f9a030d] = env->getStaticMethodID(cls, "grow", "([JI)[J");
            mids$[mid_grow_d766d189] = env->getStaticMethodID(cls, "grow", "([II)[I");
            mids$[mid_grow_92d373eb] = env->getStaticMethodID(cls, "grow", "([[FI)[[F");
            mids$[mid_grow_a415095d] = env->getStaticMethodID(cls, "grow", "([FI)[F");
            mids$[mid_hashCode_6f0bb349] = env->getStaticMethodID(cls, "hashCode", "([CII)I");
            mids$[mid_hashCode_86f44340] = env->getStaticMethodID(cls, "hashCode", "([BII)I");
            mids$[mid_introSort_01dac18d] = env->getStaticMethodID(cls, "introSort", "([Ljava/lang/Comparable;)V");
            mids$[mid_introSort_8c46d789] = env->getStaticMethodID(cls, "introSort", "([Ljava/lang/Object;Ljava/util/Comparator;)V");
            mids$[mid_introSort_266f4139] = env->getStaticMethodID(cls, "introSort", "([Ljava/lang/Comparable;II)V");
            mids$[mid_introSort_7c263389] = env->getStaticMethodID(cls, "introSort", "([Ljava/lang/Object;IILjava/util/Comparator;)V");
            mids$[mid_naturalComparator_5a7ff2fc] = env->getStaticMethodID(cls, "naturalComparator", "()Ljava/util/Comparator;");
            mids$[mid_oversize_d8d154b9] = env->getStaticMethodID(cls, "oversize", "(II)I");
            mids$[mid_parseInt_700e23c9] = env->getStaticMethodID(cls, "parseInt", "([C)I");
            mids$[mid_parseInt_6f0bb349] = env->getStaticMethodID(cls, "parseInt", "([CII)I");
            mids$[mid_parseInt_afe81cab] = env->getStaticMethodID(cls, "parseInt", "([CIII)I");
            mids$[mid_shrink_92d373eb] = env->getStaticMethodID(cls, "shrink", "([[FI)[[F");
            mids$[mid_shrink_0f9a030d] = env->getStaticMethodID(cls, "shrink", "([JI)[J");
            mids$[mid_shrink_1fbccced] = env->getStaticMethodID(cls, "shrink", "([ZI)[Z");
            mids$[mid_shrink_6bd5869d] = env->getStaticMethodID(cls, "shrink", "([BI)[B");
            mids$[mid_shrink_d766d189] = env->getStaticMethodID(cls, "shrink", "([II)[I");
            mids$[mid_shrink_91cb90f9] = env->getStaticMethodID(cls, "shrink", "([CI)[C");
            mids$[mid_shrink_62111365] = env->getStaticMethodID(cls, "shrink", "([[II)[[I");
            mids$[mid_shrink_d090ee39] = env->getStaticMethodID(cls, "shrink", "([SI)[S");
            mids$[mid_swap_4172dade] = env->getStaticMethodID(cls, "swap", "([Ljava/lang/Object;II)V");
            mids$[mid_timSort_01dac18d] = env->getStaticMethodID(cls, "timSort", "([Ljava/lang/Comparable;)V");
            mids$[mid_timSort_8c46d789] = env->getStaticMethodID(cls, "timSort", "([Ljava/lang/Object;Ljava/util/Comparator;)V");
            mids$[mid_timSort_266f4139] = env->getStaticMethodID(cls, "timSort", "([Ljava/lang/Comparable;II)V");
            mids$[mid_timSort_7c263389] = env->getStaticMethodID(cls, "timSort", "([Ljava/lang/Object;IILjava/util/Comparator;)V");
            mids$[mid_toIntArray_d16addd8] = env->getStaticMethodID(cls, "toIntArray", "(Ljava/util/Collection;)[I");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            MAX_ARRAY_LENGTH = env->getStaticIntField(cls, "MAX_ARRAY_LENGTH");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean ArrayUtil::equals(const JArray< jint > & a0, jint a1, const JArray< jint > & a2, jint a3, jint a4)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_equals_082119cc], a0.this$, a1, a2.this$, a3, a4);
        }

        jboolean ArrayUtil::equals(const JArray< jchar > & a0, jint a1, const JArray< jchar > & a2, jint a3, jint a4)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_equals_8c28d07c], a0.this$, a1, a2.this$, a3, a4);
        }

        jboolean ArrayUtil::equals(const JArray< jbyte > & a0, jint a1, const JArray< jbyte > & a2, jint a3, jint a4)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_equals_06f361be], a0.this$, a1, a2.this$, a3, a4);
        }

        jint ArrayUtil::getShrinkSize(jint a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_getShrinkSize_d3236abb], a0, a1, a2);
        }

        JArray< jfloat > ArrayUtil::grow(const JArray< jfloat > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jfloat >(env->callStaticObjectMethod(cls, mids$[mid_grow_4ea7c525], a0.this$));
        }

        JArray< jdouble > ArrayUtil::grow(const JArray< jdouble > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jdouble >(env->callStaticObjectMethod(cls, mids$[mid_grow_607a9cf1], a0.this$));
        }

        JArray< JArray< jint > > ArrayUtil::grow(const JArray< JArray< jint > > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< JArray< jint > >(env->callStaticObjectMethod(cls, mids$[mid_grow_21fe49ab], a0.this$));
        }

        JArray< jlong > ArrayUtil::grow(const JArray< jlong > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jlong >(env->callStaticObjectMethod(cls, mids$[mid_grow_6dd1ed5d], a0.this$));
        }

        JArray< jint > ArrayUtil::grow(const JArray< jint > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jint >(env->callStaticObjectMethod(cls, mids$[mid_grow_fc3c604f], a0.this$));
        }

        JArray< jboolean > ArrayUtil::grow(const JArray< jboolean > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jboolean >(env->callStaticObjectMethod(cls, mids$[mid_grow_e08af67d], a0.this$));
        }

        JArray< jchar > ArrayUtil::grow(const JArray< jchar > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jchar >(env->callStaticObjectMethod(cls, mids$[mid_grow_12f49f5f], a0.this$));
        }

        JArray< JArray< jfloat > > ArrayUtil::grow(const JArray< JArray< jfloat > > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< JArray< jfloat > >(env->callStaticObjectMethod(cls, mids$[mid_grow_27787b8f], a0.this$));
        }

        JArray< jshort > ArrayUtil::grow(const JArray< jshort > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jshort >(env->callStaticObjectMethod(cls, mids$[mid_grow_3de5243f], a0.this$));
        }

        JArray< jbyte > ArrayUtil::grow(const JArray< jbyte > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_grow_1193226d], a0.this$));
        }

        JArray< jdouble > ArrayUtil::grow(const JArray< jdouble > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jdouble >(env->callStaticObjectMethod(cls, mids$[mid_grow_e2c1f835], a0.this$, a1));
        }

        JArray< jshort > ArrayUtil::grow(const JArray< jshort > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jshort >(env->callStaticObjectMethod(cls, mids$[mid_grow_d090ee39], a0.this$, a1));
        }

        JArray< jboolean > ArrayUtil::grow(const JArray< jboolean > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jboolean >(env->callStaticObjectMethod(cls, mids$[mid_grow_1fbccced], a0.this$, a1));
        }

        JArray< JArray< jint > > ArrayUtil::grow(const JArray< JArray< jint > > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< JArray< jint > >(env->callStaticObjectMethod(cls, mids$[mid_grow_62111365], a0.this$, a1));
        }

        JArray< jbyte > ArrayUtil::grow(const JArray< jbyte > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_grow_6bd5869d], a0.this$, a1));
        }

        JArray< jchar > ArrayUtil::grow(const JArray< jchar > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jchar >(env->callStaticObjectMethod(cls, mids$[mid_grow_91cb90f9], a0.this$, a1));
        }

        JArray< jlong > ArrayUtil::grow(const JArray< jlong > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jlong >(env->callStaticObjectMethod(cls, mids$[mid_grow_0f9a030d], a0.this$, a1));
        }

        JArray< jint > ArrayUtil::grow(const JArray< jint > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jint >(env->callStaticObjectMethod(cls, mids$[mid_grow_d766d189], a0.this$, a1));
        }

        JArray< JArray< jfloat > > ArrayUtil::grow(const JArray< JArray< jfloat > > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< JArray< jfloat > >(env->callStaticObjectMethod(cls, mids$[mid_grow_92d373eb], a0.this$, a1));
        }

        JArray< jfloat > ArrayUtil::grow(const JArray< jfloat > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jfloat >(env->callStaticObjectMethod(cls, mids$[mid_grow_a415095d], a0.this$, a1));
        }

        jint ArrayUtil::hashCode(const JArray< jchar > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_hashCode_6f0bb349], a0.this$, a1, a2);
        }

        jint ArrayUtil::hashCode(const JArray< jbyte > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_hashCode_86f44340], a0.this$, a1, a2);
        }

        void ArrayUtil::introSort(const JArray< ::java::lang::Comparable > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_introSort_01dac18d], a0.this$);
        }

        void ArrayUtil::introSort(const JArray< ::java::lang::Object > & a0, const ::java::util::Comparator & a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_introSort_8c46d789], a0.this$, a1.this$);
        }

        void ArrayUtil::introSort(const JArray< ::java::lang::Comparable > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_introSort_266f4139], a0.this$, a1, a2);
        }

        void ArrayUtil::introSort(const JArray< ::java::lang::Object > & a0, jint a1, jint a2, const ::java::util::Comparator & a3)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_introSort_7c263389], a0.this$, a1, a2, a3.this$);
        }

        ::java::util::Comparator ArrayUtil::naturalComparator()
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::Comparator(env->callStaticObjectMethod(cls, mids$[mid_naturalComparator_5a7ff2fc]));
        }

        jint ArrayUtil::oversize(jint a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_oversize_d8d154b9], a0, a1);
        }

        jint ArrayUtil::parseInt(const JArray< jchar > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_parseInt_700e23c9], a0.this$);
        }

        jint ArrayUtil::parseInt(const JArray< jchar > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_parseInt_6f0bb349], a0.this$, a1, a2);
        }

        jint ArrayUtil::parseInt(const JArray< jchar > & a0, jint a1, jint a2, jint a3)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_parseInt_afe81cab], a0.this$, a1, a2, a3);
        }

        JArray< JArray< jfloat > > ArrayUtil::shrink(const JArray< JArray< jfloat > > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< JArray< jfloat > >(env->callStaticObjectMethod(cls, mids$[mid_shrink_92d373eb], a0.this$, a1));
        }

        JArray< jlong > ArrayUtil::shrink(const JArray< jlong > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jlong >(env->callStaticObjectMethod(cls, mids$[mid_shrink_0f9a030d], a0.this$, a1));
        }

        JArray< jboolean > ArrayUtil::shrink(const JArray< jboolean > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jboolean >(env->callStaticObjectMethod(cls, mids$[mid_shrink_1fbccced], a0.this$, a1));
        }

        JArray< jbyte > ArrayUtil::shrink(const JArray< jbyte > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jbyte >(env->callStaticObjectMethod(cls, mids$[mid_shrink_6bd5869d], a0.this$, a1));
        }

        JArray< jint > ArrayUtil::shrink(const JArray< jint > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jint >(env->callStaticObjectMethod(cls, mids$[mid_shrink_d766d189], a0.this$, a1));
        }

        JArray< jchar > ArrayUtil::shrink(const JArray< jchar > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jchar >(env->callStaticObjectMethod(cls, mids$[mid_shrink_91cb90f9], a0.this$, a1));
        }

        JArray< JArray< jint > > ArrayUtil::shrink(const JArray< JArray< jint > > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< JArray< jint > >(env->callStaticObjectMethod(cls, mids$[mid_shrink_62111365], a0.this$, a1));
        }

        JArray< jshort > ArrayUtil::shrink(const JArray< jshort > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jshort >(env->callStaticObjectMethod(cls, mids$[mid_shrink_d090ee39], a0.this$, a1));
        }

        void ArrayUtil::swap(const JArray< ::java::lang::Object > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_swap_4172dade], a0.this$, a1, a2);
        }

        void ArrayUtil::timSort(const JArray< ::java::lang::Comparable > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_timSort_01dac18d], a0.this$);
        }

        void ArrayUtil::timSort(const JArray< ::java::lang::Object > & a0, const ::java::util::Comparator & a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_timSort_8c46d789], a0.this$, a1.this$);
        }

        void ArrayUtil::timSort(const JArray< ::java::lang::Comparable > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_timSort_266f4139], a0.this$, a1, a2);
        }

        void ArrayUtil::timSort(const JArray< ::java::lang::Object > & a0, jint a1, jint a2, const ::java::util::Comparator & a3)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_timSort_7c263389], a0.this$, a1, a2, a3.this$);
        }

        JArray< jint > ArrayUtil::toIntArray(const ::java::util::Collection & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< jint >(env->callStaticObjectMethod(cls, mids$[mid_toIntArray_d16addd8], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_ArrayUtil_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ArrayUtil_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ArrayUtil_equals(PyTypeObject *type, PyObject *args);
        static PyObject *t_ArrayUtil_getShrinkSize(PyTypeObject *type, PyObject *args);
        static PyObject *t_ArrayUtil_grow(PyTypeObject *type, PyObject *args);
        static PyObject *t_ArrayUtil_hashCode(PyTypeObject *type, PyObject *args);
        static PyObject *t_ArrayUtil_introSort(PyTypeObject *type, PyObject *args);
        static PyObject *t_ArrayUtil_naturalComparator(PyTypeObject *type);
        static PyObject *t_ArrayUtil_oversize(PyTypeObject *type, PyObject *args);
        static PyObject *t_ArrayUtil_parseInt(PyTypeObject *type, PyObject *args);
        static PyObject *t_ArrayUtil_shrink(PyTypeObject *type, PyObject *args);
        static PyObject *t_ArrayUtil_swap(PyTypeObject *type, PyObject *args);
        static PyObject *t_ArrayUtil_timSort(PyTypeObject *type, PyObject *args);
        static PyObject *t_ArrayUtil_toIntArray(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_ArrayUtil__methods_[] = {
          DECLARE_METHOD(t_ArrayUtil, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, equals, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, getShrinkSize, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, grow, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, hashCode, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, introSort, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, naturalComparator, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, oversize, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, parseInt, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, shrink, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, swap, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, timSort, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ArrayUtil, toIntArray, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ArrayUtil, t_ArrayUtil, ::java::lang::Object, ArrayUtil, abstract_init, 0, 0, 0, 0, 0);

        void t_ArrayUtil::install(PyObject *module)
        {
          installType(&PY_TYPE(ArrayUtil), module, "ArrayUtil", 0);
        }

        void t_ArrayUtil::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ArrayUtil).tp_dict, "class_", make_descriptor(ArrayUtil::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ArrayUtil).tp_dict, "wrapfn_", make_descriptor(t_ArrayUtil::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ArrayUtil).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(ArrayUtil::initializeClass);
          PyDict_SetItemString(PY_TYPE(ArrayUtil).tp_dict, "MAX_ARRAY_LENGTH", make_descriptor(ArrayUtil::MAX_ARRAY_LENGTH));
        }

        static PyObject *t_ArrayUtil_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ArrayUtil::initializeClass, 1)))
            return NULL;
          return t_ArrayUtil::wrap_Object(ArrayUtil(((t_ArrayUtil *) arg)->object.this$));
        }
        static PyObject *t_ArrayUtil_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ArrayUtil::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ArrayUtil_equals(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 5:
            {
              JArray< jint > a0((jobject) NULL);
              jint a1;
              JArray< jint > a2((jobject) NULL);
              jint a3;
              jint a4;
              jboolean result;

              if (!parseArgs(args, "[II[III", &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::equals(a0, a1, a2, a3, a4));
                Py_RETURN_BOOL(result);
              }
            }
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              JArray< jchar > a2((jobject) NULL);
              jint a3;
              jint a4;
              jboolean result;

              if (!parseArgs(args, "[CI[CII", &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::equals(a0, a1, a2, a3, a4));
                Py_RETURN_BOOL(result);
              }
            }
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              JArray< jbyte > a2((jobject) NULL);
              jint a3;
              jint a4;
              jboolean result;

              if (!parseArgs(args, "[BI[BII", &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::equals(a0, a1, a2, a3, a4));
                Py_RETURN_BOOL(result);
              }
            }
          }

          return callSuper(type, "equals", args, 2);
        }

        static PyObject *t_ArrayUtil_getShrinkSize(PyTypeObject *type, PyObject *args)
        {
          jint a0;
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "III", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::getShrinkSize(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "getShrinkSize", args);
          return NULL;
        }

        static PyObject *t_ArrayUtil_grow(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< jfloat > a0((jobject) NULL);
              JArray< jfloat > result((jobject) NULL);

              if (!parseArgs(args, "[F", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0));
                return result.wrap();
              }
            }
            {
              JArray< jdouble > a0((jobject) NULL);
              JArray< jdouble > result((jobject) NULL);

              if (!parseArgs(args, "[D", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0));
                return result.wrap();
              }
            }
            {
              JArray< JArray< jint > > a0((jobject) NULL);
              JArray< JArray< jint > > result((jobject) NULL);

              if (!parseArgs(args, "[[I", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0));
                return JArray<jobject>(result.this$).wrap(NULL);
              }
            }
            {
              JArray< jlong > a0((jobject) NULL);
              JArray< jlong > result((jobject) NULL);

              if (!parseArgs(args, "[J", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0));
                return result.wrap();
              }
            }
            {
              JArray< jint > a0((jobject) NULL);
              JArray< jint > result((jobject) NULL);

              if (!parseArgs(args, "[I", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0));
                return result.wrap();
              }
            }
            {
              JArray< jboolean > a0((jobject) NULL);
              JArray< jboolean > result((jobject) NULL);

              if (!parseArgs(args, "[Z", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0));
                return result.wrap();
              }
            }
            {
              JArray< jchar > a0((jobject) NULL);
              JArray< jchar > result((jobject) NULL);

              if (!parseArgs(args, "[C", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0));
                return result.wrap();
              }
            }
            {
              JArray< JArray< jfloat > > a0((jobject) NULL);
              JArray< JArray< jfloat > > result((jobject) NULL);

              if (!parseArgs(args, "[[F", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0));
                return JArray<jobject>(result.this$).wrap(NULL);
              }
            }
            {
              JArray< jshort > a0((jobject) NULL);
              JArray< jshort > result((jobject) NULL);

              if (!parseArgs(args, "[S", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0));
                return result.wrap();
              }
            }
            {
              JArray< jbyte > a0((jobject) NULL);
              JArray< jbyte > result((jobject) NULL);

              if (!parseArgs(args, "[B", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0));
                return result.wrap();
              }
            }
            break;
           case 2:
            {
              JArray< jdouble > a0((jobject) NULL);
              jint a1;
              JArray< jdouble > result((jobject) NULL);

              if (!parseArgs(args, "[DI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< jshort > a0((jobject) NULL);
              jint a1;
              JArray< jshort > result((jobject) NULL);

              if (!parseArgs(args, "[SI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< jboolean > a0((jobject) NULL);
              jint a1;
              JArray< jboolean > result((jobject) NULL);

              if (!parseArgs(args, "[ZI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< JArray< jint > > a0((jobject) NULL);
              jint a1;
              JArray< JArray< jint > > result((jobject) NULL);

              if (!parseArgs(args, "[[II", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0, a1));
                return JArray<jobject>(result.this$).wrap(NULL);
              }
            }
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              JArray< jbyte > result((jobject) NULL);

              if (!parseArgs(args, "[BI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              JArray< jchar > result((jobject) NULL);

              if (!parseArgs(args, "[CI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< jlong > a0((jobject) NULL);
              jint a1;
              JArray< jlong > result((jobject) NULL);

              if (!parseArgs(args, "[JI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< jint > a0((jobject) NULL);
              jint a1;
              JArray< jint > result((jobject) NULL);

              if (!parseArgs(args, "[II", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< JArray< jfloat > > a0((jobject) NULL);
              jint a1;
              JArray< JArray< jfloat > > result((jobject) NULL);

              if (!parseArgs(args, "[[FI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0, a1));
                return JArray<jobject>(result.this$).wrap(NULL);
              }
            }
            {
              JArray< jfloat > a0((jobject) NULL);
              jint a1;
              JArray< jfloat > result((jobject) NULL);

              if (!parseArgs(args, "[FI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::grow(a0, a1));
                return result.wrap();
              }
            }
          }

          PyErr_SetArgsError(type, "grow", args);
          return NULL;
        }

        static PyObject *t_ArrayUtil_hashCode(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;
              jint result;

              if (!parseArgs(args, "[CII", &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::hashCode(a0, a1, a2));
                return PyInt_FromLong((long) result);
              }
            }
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              jint result;

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::hashCode(a0, a1, a2));
                return PyInt_FromLong((long) result);
              }
            }
          }

          return callSuper(type, "hashCode", args, 2);
        }

        static PyObject *t_ArrayUtil_introSort(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::java::lang::Comparable > a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArgs(args, "[K", ::java::lang::Comparable::initializeClass, &a0, &p0, ::java::lang::t_Comparable::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::ArrayUtil::introSort(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              JArray< ::java::lang::Object > a0((jobject) NULL);
              ::java::util::Comparator a1((jobject) NULL);
              PyTypeObject **p1;

              if (!parseArgs(args, "[oK", ::java::util::Comparator::initializeClass, &a0, &a1, &p1, ::java::util::t_Comparator::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::ArrayUtil::introSort(a0, a1));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< ::java::lang::Comparable > a0((jobject) NULL);
              PyTypeObject **p0;
              jint a1;
              jint a2;

              if (!parseArgs(args, "[KII", ::java::lang::Comparable::initializeClass, &a0, &p0, ::java::lang::t_Comparable::parameters_, &a1, &a2))
              {
                OBJ_CALL(::org::apache::lucene::util::ArrayUtil::introSort(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
            break;
           case 4:
            {
              JArray< ::java::lang::Object > a0((jobject) NULL);
              jint a1;
              jint a2;
              ::java::util::Comparator a3((jobject) NULL);
              PyTypeObject **p3;

              if (!parseArgs(args, "[oIIK", ::java::util::Comparator::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::util::t_Comparator::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::ArrayUtil::introSort(a0, a1, a2, a3));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError(type, "introSort", args);
          return NULL;
        }

        static PyObject *t_ArrayUtil_naturalComparator(PyTypeObject *type)
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::naturalComparator());
          return ::java::util::t_Comparator::wrap_Object(result);
        }

        static PyObject *t_ArrayUtil_oversize(PyTypeObject *type, PyObject *args)
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::oversize(a0, a1));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "oversize", args);
          return NULL;
        }

        static PyObject *t_ArrayUtil_parseInt(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< jchar > a0((jobject) NULL);
              jint result;

              if (!parseArgs(args, "[C", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::parseInt(a0));
                return PyInt_FromLong((long) result);
              }
            }
            break;
           case 3:
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;
              jint result;

              if (!parseArgs(args, "[CII", &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::parseInt(a0, a1, a2));
                return PyInt_FromLong((long) result);
              }
            }
            break;
           case 4:
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              jint result;

              if (!parseArgs(args, "[CIII", &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::parseInt(a0, a1, a2, a3));
                return PyInt_FromLong((long) result);
              }
            }
          }

          PyErr_SetArgsError(type, "parseInt", args);
          return NULL;
        }

        static PyObject *t_ArrayUtil_shrink(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              JArray< JArray< jfloat > > a0((jobject) NULL);
              jint a1;
              JArray< JArray< jfloat > > result((jobject) NULL);

              if (!parseArgs(args, "[[FI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::shrink(a0, a1));
                return JArray<jobject>(result.this$).wrap(NULL);
              }
            }
            {
              JArray< jlong > a0((jobject) NULL);
              jint a1;
              JArray< jlong > result((jobject) NULL);

              if (!parseArgs(args, "[JI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::shrink(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< jboolean > a0((jobject) NULL);
              jint a1;
              JArray< jboolean > result((jobject) NULL);

              if (!parseArgs(args, "[ZI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::shrink(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              JArray< jbyte > result((jobject) NULL);

              if (!parseArgs(args, "[BI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::shrink(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< jint > a0((jobject) NULL);
              jint a1;
              JArray< jint > result((jobject) NULL);

              if (!parseArgs(args, "[II", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::shrink(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              JArray< jchar > result((jobject) NULL);

              if (!parseArgs(args, "[CI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::shrink(a0, a1));
                return result.wrap();
              }
            }
            {
              JArray< JArray< jint > > a0((jobject) NULL);
              jint a1;
              JArray< JArray< jint > > result((jobject) NULL);

              if (!parseArgs(args, "[[II", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::shrink(a0, a1));
                return JArray<jobject>(result.this$).wrap(NULL);
              }
            }
            {
              JArray< jshort > a0((jobject) NULL);
              jint a1;
              JArray< jshort > result((jobject) NULL);

              if (!parseArgs(args, "[SI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::shrink(a0, a1));
                return result.wrap();
              }
            }
          }

          PyErr_SetArgsError(type, "shrink", args);
          return NULL;
        }

        static PyObject *t_ArrayUtil_swap(PyTypeObject *type, PyObject *args)
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[oII", &a0, &a1, &a2))
          {
            OBJ_CALL(::org::apache::lucene::util::ArrayUtil::swap(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "swap", args);
          return NULL;
        }

        static PyObject *t_ArrayUtil_timSort(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::java::lang::Comparable > a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArgs(args, "[K", ::java::lang::Comparable::initializeClass, &a0, &p0, ::java::lang::t_Comparable::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::ArrayUtil::timSort(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              JArray< ::java::lang::Object > a0((jobject) NULL);
              ::java::util::Comparator a1((jobject) NULL);
              PyTypeObject **p1;

              if (!parseArgs(args, "[oK", ::java::util::Comparator::initializeClass, &a0, &a1, &p1, ::java::util::t_Comparator::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::ArrayUtil::timSort(a0, a1));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< ::java::lang::Comparable > a0((jobject) NULL);
              PyTypeObject **p0;
              jint a1;
              jint a2;

              if (!parseArgs(args, "[KII", ::java::lang::Comparable::initializeClass, &a0, &p0, ::java::lang::t_Comparable::parameters_, &a1, &a2))
              {
                OBJ_CALL(::org::apache::lucene::util::ArrayUtil::timSort(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
            break;
           case 4:
            {
              JArray< ::java::lang::Object > a0((jobject) NULL);
              jint a1;
              jint a2;
              ::java::util::Comparator a3((jobject) NULL);
              PyTypeObject **p3;

              if (!parseArgs(args, "[oIIK", ::java::util::Comparator::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::util::t_Comparator::parameters_))
              {
                OBJ_CALL(::org::apache::lucene::util::ArrayUtil::timSort(a0, a1, a2, a3));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError(type, "timSort", args);
          return NULL;
        }

        static PyObject *t_ArrayUtil_toIntArray(PyTypeObject *type, PyObject *arg)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;
          JArray< jint > result((jobject) NULL);

          if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::ArrayUtil::toIntArray(a0));
            return result.wrap();
          }

          PyErr_SetArgsError(type, "toIntArray", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/TermVectorsFormat.h"
#include "org/apache/lucene/codecs/TermVectorsReader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/codecs/TermVectorsWriter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *TermVectorsFormat::class$ = NULL;
        jmethodID *TermVectorsFormat::mids$ = NULL;
        bool TermVectorsFormat::live$ = false;

        jclass TermVectorsFormat::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/TermVectorsFormat");

            mids$ = new jmethodID[max_mid];
            mids$[mid_vectorsReader_9c23221f] = env->getMethodID(cls, "vectorsReader", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/TermVectorsReader;");
            mids$[mid_vectorsWriter_0c8458c9] = env->getMethodID(cls, "vectorsWriter", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/TermVectorsWriter;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::codecs::TermVectorsReader TermVectorsFormat::vectorsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3) const
        {
          return ::org::apache::lucene::codecs::TermVectorsReader(env->callObjectMethod(this$, mids$[mid_vectorsReader_9c23221f], a0.this$, a1.this$, a2.this$, a3.this$));
        }

        ::org::apache::lucene::codecs::TermVectorsWriter TermVectorsFormat::vectorsWriter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::store::IOContext & a2) const
        {
          return ::org::apache::lucene::codecs::TermVectorsWriter(env->callObjectMethod(this$, mids$[mid_vectorsWriter_0c8458c9], a0.this$, a1.this$, a2.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_TermVectorsFormat_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermVectorsFormat_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermVectorsFormat_vectorsReader(t_TermVectorsFormat *self, PyObject *args);
        static PyObject *t_TermVectorsFormat_vectorsWriter(t_TermVectorsFormat *self, PyObject *args);

        static PyMethodDef t_TermVectorsFormat__methods_[] = {
          DECLARE_METHOD(t_TermVectorsFormat, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermVectorsFormat, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermVectorsFormat, vectorsReader, METH_VARARGS),
          DECLARE_METHOD(t_TermVectorsFormat, vectorsWriter, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermVectorsFormat, t_TermVectorsFormat, ::java::lang::Object, TermVectorsFormat, abstract_init, 0, 0, 0, 0, 0);

        void t_TermVectorsFormat::install(PyObject *module)
        {
          installType(&PY_TYPE(TermVectorsFormat), module, "TermVectorsFormat", 0);
        }

        void t_TermVectorsFormat::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermVectorsFormat).tp_dict, "class_", make_descriptor(TermVectorsFormat::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermVectorsFormat).tp_dict, "wrapfn_", make_descriptor(t_TermVectorsFormat::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermVectorsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermVectorsFormat_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermVectorsFormat::initializeClass, 1)))
            return NULL;
          return t_TermVectorsFormat::wrap_Object(TermVectorsFormat(((t_TermVectorsFormat *) arg)->object.this$));
        }
        static PyObject *t_TermVectorsFormat_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermVectorsFormat::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TermVectorsFormat_vectorsReader(t_TermVectorsFormat *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
          ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
          ::org::apache::lucene::store::IOContext a3((jobject) NULL);
          ::org::apache::lucene::codecs::TermVectorsReader result((jobject) NULL);

          if (!parseArgs(args, "kkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = self->object.vectorsReader(a0, a1, a2, a3));
            return ::org::apache::lucene::codecs::t_TermVectorsReader::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "vectorsReader", args);
          return NULL;
        }

        static PyObject *t_TermVectorsFormat_vectorsWriter(t_TermVectorsFormat *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
          ::org::apache::lucene::store::IOContext a2((jobject) NULL);
          ::org::apache::lucene::codecs::TermVectorsWriter result((jobject) NULL);

          if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.vectorsWriter(a0, a1, a2));
            return ::org::apache::lucene::codecs::t_TermVectorsWriter::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "vectorsWriter", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/Analyzer$ReuseStrategy.h"
#include "org/apache/lucene/analysis/Analyzer$TokenStreamComponents.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *Analyzer$ReuseStrategy::class$ = NULL;
        jmethodID *Analyzer$ReuseStrategy::mids$ = NULL;
        bool Analyzer$ReuseStrategy::live$ = false;

        jclass Analyzer$ReuseStrategy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/Analyzer$ReuseStrategy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_getReusableComponents_19769f4a] = env->getMethodID(cls, "getReusableComponents", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
            mids$[mid_setReusableComponents_66577a3f] = env->getMethodID(cls, "setReusableComponents", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;)V");
            mids$[mid_getStoredValue_166fef79] = env->getMethodID(cls, "getStoredValue", "(Lorg/apache/lucene/analysis/Analyzer;)Ljava/lang/Object;");
            mids$[mid_setStoredValue_798d4388] = env->getMethodID(cls, "setStoredValue", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/lang/Object;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Analyzer$ReuseStrategy::Analyzer$ReuseStrategy() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents Analyzer$ReuseStrategy::getReusableComponents(const ::org::apache::lucene::analysis::Analyzer & a0, const ::java::lang::String & a1) const
        {
          return ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents(env->callObjectMethod(this$, mids$[mid_getReusableComponents_19769f4a], a0.this$, a1.this$));
        }

        void Analyzer$ReuseStrategy::setReusableComponents(const ::org::apache::lucene::analysis::Analyzer & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_setReusableComponents_66577a3f], a0.this$, a1.this$, a2.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_Analyzer$ReuseStrategy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Analyzer$ReuseStrategy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Analyzer$ReuseStrategy_init_(t_Analyzer$ReuseStrategy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Analyzer$ReuseStrategy_getReusableComponents(t_Analyzer$ReuseStrategy *self, PyObject *args);
        static PyObject *t_Analyzer$ReuseStrategy_setReusableComponents(t_Analyzer$ReuseStrategy *self, PyObject *args);

        static PyMethodDef t_Analyzer$ReuseStrategy__methods_[] = {
          DECLARE_METHOD(t_Analyzer$ReuseStrategy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Analyzer$ReuseStrategy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Analyzer$ReuseStrategy, getReusableComponents, METH_VARARGS),
          DECLARE_METHOD(t_Analyzer$ReuseStrategy, setReusableComponents, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Analyzer$ReuseStrategy, t_Analyzer$ReuseStrategy, ::java::lang::Object, Analyzer$ReuseStrategy, t_Analyzer$ReuseStrategy_init_, 0, 0, 0, 0, 0);

        void t_Analyzer$ReuseStrategy::install(PyObject *module)
        {
          installType(&PY_TYPE(Analyzer$ReuseStrategy), module, "Analyzer$ReuseStrategy", 0);
        }

        void t_Analyzer$ReuseStrategy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Analyzer$ReuseStrategy).tp_dict, "class_", make_descriptor(Analyzer$ReuseStrategy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Analyzer$ReuseStrategy).tp_dict, "wrapfn_", make_descriptor(t_Analyzer$ReuseStrategy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Analyzer$ReuseStrategy).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Analyzer$ReuseStrategy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Analyzer$ReuseStrategy::initializeClass, 1)))
            return NULL;
          return t_Analyzer$ReuseStrategy::wrap_Object(Analyzer$ReuseStrategy(((t_Analyzer$ReuseStrategy *) arg)->object.this$));
        }
        static PyObject *t_Analyzer$ReuseStrategy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Analyzer$ReuseStrategy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Analyzer$ReuseStrategy_init_(t_Analyzer$ReuseStrategy *self, PyObject *args, PyObject *kwds)
        {
          Analyzer$ReuseStrategy object((jobject) NULL);

          INT_CALL(object = Analyzer$ReuseStrategy());
          self->object = object;

          return 0;
        }

        static PyObject *t_Analyzer$ReuseStrategy_getReusableComponents(t_Analyzer$ReuseStrategy *self, PyObject *args)
        {
          ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getReusableComponents(a0, a1));
            return ::org::apache::lucene::analysis::t_Analyzer$TokenStreamComponents::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getReusableComponents", args);
          return NULL;
        }

        static PyObject *t_Analyzer$ReuseStrategy_setReusableComponents(t_Analyzer$ReuseStrategy *self, PyObject *args)
        {
          ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents a2((jobject) NULL);

          if (!parseArgs(args, "ksk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.setReusableComponents(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setReusableComponents", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/BasicModel.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *BasicModel::class$ = NULL;
          jmethodID *BasicModel::mids$ = NULL;
          bool BasicModel::live$ = false;

          jclass BasicModel::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/BasicModel");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_05d4946a] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;F)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_score_076760a9] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;F)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BasicModel::BasicModel() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::Explanation BasicModel::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_05d4946a], a0.this$, a1));
          }

          jfloat BasicModel::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_076760a9], a0.this$, a1);
          }

          ::java::lang::String BasicModel::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_BasicModel_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicModel_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BasicModel_init_(t_BasicModel *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BasicModel_explain(t_BasicModel *self, PyObject *args);
          static PyObject *t_BasicModel_score(t_BasicModel *self, PyObject *args);
          static PyObject *t_BasicModel_toString(t_BasicModel *self, PyObject *args);

          static PyMethodDef t_BasicModel__methods_[] = {
            DECLARE_METHOD(t_BasicModel, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModel, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModel, explain, METH_VARARGS),
            DECLARE_METHOD(t_BasicModel, score, METH_VARARGS),
            DECLARE_METHOD(t_BasicModel, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BasicModel, t_BasicModel, ::java::lang::Object, BasicModel, t_BasicModel_init_, 0, 0, 0, 0, 0);

          void t_BasicModel::install(PyObject *module)
          {
            installType(&PY_TYPE(BasicModel), module, "BasicModel", 0);
          }

          void t_BasicModel::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BasicModel).tp_dict, "class_", make_descriptor(BasicModel::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BasicModel).tp_dict, "wrapfn_", make_descriptor(t_BasicModel::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BasicModel).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BasicModel_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BasicModel::initializeClass, 1)))
              return NULL;
            return t_BasicModel::wrap_Object(BasicModel(((t_BasicModel *) arg)->object.this$));
          }
          static PyObject *t_BasicModel_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BasicModel::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BasicModel_init_(t_BasicModel *self, PyObject *args, PyObject *kwds)
          {
            BasicModel object((jobject) NULL);

            INT_CALL(object = BasicModel());
            self->object = object;

            return 0;
          }

          static PyObject *t_BasicModel_explain(t_BasicModel *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.explain(a0, a1));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "explain", args);
            return NULL;
          }

          static PyObject *t_BasicModel_score(t_BasicModel *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat result;

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "score", args);
            return NULL;
          }

          static PyObject *t_BasicModel_toString(t_BasicModel *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(BasicModel), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedInts$FormatAndBits.h"
#include "org/apache/lucene/util/packed/PackedInts$Format.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedInts$FormatAndBits::class$ = NULL;
          jmethodID *PackedInts$FormatAndBits::mids$ = NULL;
          jfieldID *PackedInts$FormatAndBits::fids$ = NULL;
          bool PackedInts$FormatAndBits::live$ = false;

          jclass PackedInts$FormatAndBits::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedInts$FormatAndBits");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_41c85b58] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/packed/PackedInts$Format;I)V");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_bitsPerValue] = env->getFieldID(cls, "bitsPerValue", "I");
              fids$[fid_format] = env->getFieldID(cls, "format", "Lorg/apache/lucene/util/packed/PackedInts$Format;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PackedInts$FormatAndBits::PackedInts$FormatAndBits(const ::org::apache::lucene::util::packed::PackedInts$Format & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_41c85b58, a0.this$, a1)) {}

          ::java::lang::String PackedInts$FormatAndBits::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          jint PackedInts$FormatAndBits::_get_bitsPerValue() const
          {
            return env->getIntField(this$, fids$[fid_bitsPerValue]);
          }

          ::org::apache::lucene::util::packed::PackedInts$Format PackedInts$FormatAndBits::_get_format() const
          {
            return ::org::apache::lucene::util::packed::PackedInts$Format(env->getObjectField(this$, fids$[fid_format]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedInts$FormatAndBits_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$FormatAndBits_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PackedInts$FormatAndBits_init_(t_PackedInts$FormatAndBits *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PackedInts$FormatAndBits_toString(t_PackedInts$FormatAndBits *self, PyObject *args);
          static PyObject *t_PackedInts$FormatAndBits_get__bitsPerValue(t_PackedInts$FormatAndBits *self, void *data);
          static PyObject *t_PackedInts$FormatAndBits_get__format(t_PackedInts$FormatAndBits *self, void *data);

          static PyGetSetDef t_PackedInts$FormatAndBits__fields_[] = {
            DECLARE_GET_FIELD(t_PackedInts$FormatAndBits, bitsPerValue),
            DECLARE_GET_FIELD(t_PackedInts$FormatAndBits, format),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PackedInts$FormatAndBits__methods_[] = {
            DECLARE_METHOD(t_PackedInts$FormatAndBits, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$FormatAndBits, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$FormatAndBits, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedInts$FormatAndBits, t_PackedInts$FormatAndBits, ::java::lang::Object, PackedInts$FormatAndBits, t_PackedInts$FormatAndBits_init_, 0, 0, t_PackedInts$FormatAndBits__fields_, 0, 0);

          void t_PackedInts$FormatAndBits::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedInts$FormatAndBits), module, "PackedInts$FormatAndBits", 0);
          }

          void t_PackedInts$FormatAndBits::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedInts$FormatAndBits).tp_dict, "class_", make_descriptor(PackedInts$FormatAndBits::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedInts$FormatAndBits).tp_dict, "wrapfn_", make_descriptor(t_PackedInts$FormatAndBits::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedInts$FormatAndBits).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedInts$FormatAndBits_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedInts$FormatAndBits::initializeClass, 1)))
              return NULL;
            return t_PackedInts$FormatAndBits::wrap_Object(PackedInts$FormatAndBits(((t_PackedInts$FormatAndBits *) arg)->object.this$));
          }
          static PyObject *t_PackedInts$FormatAndBits_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedInts$FormatAndBits::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PackedInts$FormatAndBits_init_(t_PackedInts$FormatAndBits *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::packed::PackedInts$Format a0((jobject) NULL);
            PyTypeObject **p0;
            jint a1;
            PackedInts$FormatAndBits object((jobject) NULL);

            if (!parseArgs(args, "KI", ::org::apache::lucene::util::packed::PackedInts$Format::initializeClass, &a0, &p0, ::org::apache::lucene::util::packed::t_PackedInts$Format::parameters_, &a1))
            {
              INT_CALL(object = PackedInts$FormatAndBits(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PackedInts$FormatAndBits_toString(t_PackedInts$FormatAndBits *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(PackedInts$FormatAndBits), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_PackedInts$FormatAndBits_get__bitsPerValue(t_PackedInts$FormatAndBits *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_bitsPerValue());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_PackedInts$FormatAndBits_get__format(t_PackedInts$FormatAndBits *self, void *data)
          {
            ::org::apache::lucene::util::packed::PackedInts$Format value((jobject) NULL);
            OBJ_CALL(value = self->object._get_format());
            return ::org::apache::lucene::util::packed::t_PackedInts$Format::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ru/RussianLightStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ru {

          ::java::lang::Class *RussianLightStemmer::class$ = NULL;
          jmethodID *RussianLightStemmer::mids$ = NULL;
          bool RussianLightStemmer::live$ = false;

          jclass RussianLightStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ru/RussianLightStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RussianLightStemmer::RussianLightStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint RussianLightStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ru {
          static PyObject *t_RussianLightStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RussianLightStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RussianLightStemmer_init_(t_RussianLightStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_RussianLightStemmer_stem(t_RussianLightStemmer *self, PyObject *args);

          static PyMethodDef t_RussianLightStemmer__methods_[] = {
            DECLARE_METHOD(t_RussianLightStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RussianLightStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RussianLightStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(RussianLightStemmer, t_RussianLightStemmer, ::java::lang::Object, RussianLightStemmer, t_RussianLightStemmer_init_, 0, 0, 0, 0, 0);

          void t_RussianLightStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(RussianLightStemmer), module, "RussianLightStemmer", 0);
          }

          void t_RussianLightStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(RussianLightStemmer).tp_dict, "class_", make_descriptor(RussianLightStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RussianLightStemmer).tp_dict, "wrapfn_", make_descriptor(t_RussianLightStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RussianLightStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_RussianLightStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RussianLightStemmer::initializeClass, 1)))
              return NULL;
            return t_RussianLightStemmer::wrap_Object(RussianLightStemmer(((t_RussianLightStemmer *) arg)->object.this$));
          }
          static PyObject *t_RussianLightStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RussianLightStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RussianLightStemmer_init_(t_RussianLightStemmer *self, PyObject *args, PyObject *kwds)
          {
            RussianLightStemmer object((jobject) NULL);

            INT_CALL(object = RussianLightStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_RussianLightStemmer_stem(t_RussianLightStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/BaseDirectory.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/LockFactory.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Lock.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *BaseDirectory::class$ = NULL;
        jmethodID *BaseDirectory::mids$ = NULL;
        bool BaseDirectory::live$ = false;

        jclass BaseDirectory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/BaseDirectory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_clearLock_5fdc3f48] = env->getMethodID(cls, "clearLock", "(Ljava/lang/String;)V");
            mids$[mid_getLockFactory_e4e9c36d] = env->getMethodID(cls, "getLockFactory", "()Lorg/apache/lucene/store/LockFactory;");
            mids$[mid_makeLock_f26bb9a8] = env->getMethodID(cls, "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");
            mids$[mid_setLockFactory_9892eb8c] = env->getMethodID(cls, "setLockFactory", "(Lorg/apache/lucene/store/LockFactory;)V");
            mids$[mid_ensureOpen_54c6a166] = env->getMethodID(cls, "ensureOpen", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void BaseDirectory::clearLock(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clearLock_5fdc3f48], a0.this$);
        }

        ::org::apache::lucene::store::LockFactory BaseDirectory::getLockFactory() const
        {
          return ::org::apache::lucene::store::LockFactory(env->callObjectMethod(this$, mids$[mid_getLockFactory_e4e9c36d]));
        }

        ::org::apache::lucene::store::Lock BaseDirectory::makeLock(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::store::Lock(env->callObjectMethod(this$, mids$[mid_makeLock_f26bb9a8], a0.this$));
        }

        void BaseDirectory::setLockFactory(const ::org::apache::lucene::store::LockFactory & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setLockFactory_9892eb8c], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_BaseDirectory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BaseDirectory_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BaseDirectory_clearLock(t_BaseDirectory *self, PyObject *args);
        static PyObject *t_BaseDirectory_getLockFactory(t_BaseDirectory *self, PyObject *args);
        static PyObject *t_BaseDirectory_makeLock(t_BaseDirectory *self, PyObject *args);
        static PyObject *t_BaseDirectory_setLockFactory(t_BaseDirectory *self, PyObject *args);
        static PyObject *t_BaseDirectory_get__lockFactory(t_BaseDirectory *self, void *data);
        static int t_BaseDirectory_set__lockFactory(t_BaseDirectory *self, PyObject *arg, void *data);
        static PyGetSetDef t_BaseDirectory__fields_[] = {
          DECLARE_GETSET_FIELD(t_BaseDirectory, lockFactory),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BaseDirectory__methods_[] = {
          DECLARE_METHOD(t_BaseDirectory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BaseDirectory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BaseDirectory, clearLock, METH_VARARGS),
          DECLARE_METHOD(t_BaseDirectory, getLockFactory, METH_VARARGS),
          DECLARE_METHOD(t_BaseDirectory, makeLock, METH_VARARGS),
          DECLARE_METHOD(t_BaseDirectory, setLockFactory, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BaseDirectory, t_BaseDirectory, ::org::apache::lucene::store::Directory, BaseDirectory, abstract_init, 0, 0, t_BaseDirectory__fields_, 0, 0);

        void t_BaseDirectory::install(PyObject *module)
        {
          installType(&PY_TYPE(BaseDirectory), module, "BaseDirectory", 0);
        }

        void t_BaseDirectory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BaseDirectory).tp_dict, "class_", make_descriptor(BaseDirectory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BaseDirectory).tp_dict, "wrapfn_", make_descriptor(t_BaseDirectory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BaseDirectory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BaseDirectory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BaseDirectory::initializeClass, 1)))
            return NULL;
          return t_BaseDirectory::wrap_Object(BaseDirectory(((t_BaseDirectory *) arg)->object.this$));
        }
        static PyObject *t_BaseDirectory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BaseDirectory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BaseDirectory_clearLock(t_BaseDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.clearLock(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(BaseDirectory), (PyObject *) self, "clearLock", args, 2);
        }

        static PyObject *t_BaseDirectory_getLockFactory(t_BaseDirectory *self, PyObject *args)
        {
          ::org::apache::lucene::store::LockFactory result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getLockFactory());
            return ::org::apache::lucene::store::t_LockFactory::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(BaseDirectory), (PyObject *) self, "getLockFactory", args, 2);
        }

        static PyObject *t_BaseDirectory_makeLock(t_BaseDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::Lock result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.makeLock(a0));
            return ::org::apache::lucene::store::t_Lock::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(BaseDirectory), (PyObject *) self, "makeLock", args, 2);
        }

        static PyObject *t_BaseDirectory_setLockFactory(t_BaseDirectory *self, PyObject *args)
        {
          ::org::apache::lucene::store::LockFactory a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::store::LockFactory::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setLockFactory(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(BaseDirectory), (PyObject *) self, "setLockFactory", args, 2);
        }

        static PyObject *t_BaseDirectory_get__lockFactory(t_BaseDirectory *self, void *data)
        {
          ::org::apache::lucene::store::LockFactory value((jobject) NULL);
          OBJ_CALL(value = self->object.getLockFactory());
          return ::org::apache::lucene::store::t_LockFactory::wrap_Object(value);
        }
        static int t_BaseDirectory_set__lockFactory(t_BaseDirectory *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::store::LockFactory value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::store::LockFactory::initializeClass, &value))
            {
              INT_CALL(self->object.setLockFactory(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "lockFactory", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttributeImpl.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Object.h"
#include "java/lang/StringBuilder.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "org/apache/lucene/util/AttributeReflector.h"
#include "org/apache/lucene/analysis/tokenattributes/TermToBytesRefAttribute.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *CharTermAttributeImpl::class$ = NULL;
          jmethodID *CharTermAttributeImpl::mids$ = NULL;
          bool CharTermAttributeImpl::live$ = false;

          jclass CharTermAttributeImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/CharTermAttributeImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_append_2b3c6943] = env->getMethodID(cls, "append", "(Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_append_8fff6b0d] = env->getMethodID(cls, "append", "(Ljava/lang/StringBuilder;)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_append_ec8fc27b] = env->getMethodID(cls, "append", "(C)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_append_950755e3] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_append_727d3f8d] = env->getMethodID(cls, "append", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_append_6505d5ab] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;II)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_buffer_dab10e7f] = env->getMethodID(cls, "buffer", "()[C");
              mids$[mid_charAt_39c7bd29] = env->getMethodID(cls, "charAt", "(I)C");
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_clone_c3b245d5] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/analysis/tokenattributes/CharTermAttributeImpl;");
              mids$[mid_copyBuffer_6f0bb356] = env->getMethodID(cls, "copyBuffer", "([CII)V");
              mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_fillBytesRef_54c6a166] = env->getMethodID(cls, "fillBytesRef", "()V");
              mids$[mid_getBytesRef_4ae19461] = env->getMethodID(cls, "getBytesRef", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");
              mids$[mid_reflectWith_5f3f5102] = env->getMethodID(cls, "reflectWith", "(Lorg/apache/lucene/util/AttributeReflector;)V");
              mids$[mid_resizeBuffer_b4292e99] = env->getMethodID(cls, "resizeBuffer", "(I)[C");
              mids$[mid_setEmpty_211a9257] = env->getMethodID(cls, "setEmpty", "()Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_setLength_da4913e5] = env->getMethodID(cls, "setLength", "(I)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_subSequence_f88dfd57] = env->getMethodID(cls, "subSequence", "(II)Ljava/lang/CharSequence;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CharTermAttributeImpl::CharTermAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute CharTermAttributeImpl::append(const ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute & a0) const
          {
            return ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_2b3c6943], a0.this$));
          }

          ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute CharTermAttributeImpl::append(const ::java::lang::StringBuilder & a0) const
          {
            return ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_8fff6b0d], a0.this$));
          }

          ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute CharTermAttributeImpl::append(jchar a0) const
          {
            return ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_ec8fc27b], a0));
          }

          ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute CharTermAttributeImpl::append(const ::java::lang::CharSequence & a0) const
          {
            return ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_950755e3], a0.this$));
          }

          ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute CharTermAttributeImpl::append(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_727d3f8d], a0.this$));
          }

          ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute CharTermAttributeImpl::append(const ::java::lang::CharSequence & a0, jint a1, jint a2) const
          {
            return ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_6505d5ab], a0.this$, a1, a2));
          }

          JArray< jchar > CharTermAttributeImpl::buffer() const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_buffer_dab10e7f]));
          }

          jchar CharTermAttributeImpl::charAt(jint a0) const
          {
            return env->callCharMethod(this$, mids$[mid_charAt_39c7bd29], a0);
          }

          void CharTermAttributeImpl::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          CharTermAttributeImpl CharTermAttributeImpl::clone() const
          {
            return CharTermAttributeImpl(env->callObjectMethod(this$, mids$[mid_clone_c3b245d5]));
          }

          void CharTermAttributeImpl::copyBuffer(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            env->callVoidMethod(this$, mids$[mid_copyBuffer_6f0bb356], a0.this$, a1, a2);
          }

          void CharTermAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
          }

          jboolean CharTermAttributeImpl::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          void CharTermAttributeImpl::fillBytesRef() const
          {
            env->callVoidMethod(this$, mids$[mid_fillBytesRef_54c6a166]);
          }

          ::org::apache::lucene::util::BytesRef CharTermAttributeImpl::getBytesRef() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getBytesRef_4ae19461]));
          }

          jint CharTermAttributeImpl::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          jint CharTermAttributeImpl::length() const
          {
            return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
          }

          void CharTermAttributeImpl::reflectWith(const ::org::apache::lucene::util::AttributeReflector & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_reflectWith_5f3f5102], a0.this$);
          }

          JArray< jchar > CharTermAttributeImpl::resizeBuffer(jint a0) const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_resizeBuffer_b4292e99], a0));
          }

          ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute CharTermAttributeImpl::setEmpty() const
          {
            return ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute(env->callObjectMethod(this$, mids$[mid_setEmpty_211a9257]));
          }

          ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute CharTermAttributeImpl::setLength(jint a0) const
          {
            return ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute(env->callObjectMethod(this$, mids$[mid_setLength_da4913e5], a0));
          }

          ::java::lang::CharSequence CharTermAttributeImpl::subSequence(jint a0, jint a1) const
          {
            return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_subSequence_f88dfd57], a0, a1));
          }

          ::java::lang::String CharTermAttributeImpl::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_CharTermAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharTermAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CharTermAttributeImpl_init_(t_CharTermAttributeImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CharTermAttributeImpl_append(t_CharTermAttributeImpl *self, PyObject *args);
          static PyObject *t_CharTermAttributeImpl_buffer(t_CharTermAttributeImpl *self);
          static PyObject *t_CharTermAttributeImpl_charAt(t_CharTermAttributeImpl *self, PyObject *arg);
          static PyObject *t_CharTermAttributeImpl_clear(t_CharTermAttributeImpl *self, PyObject *args);
          static PyObject *t_CharTermAttributeImpl_clone(t_CharTermAttributeImpl *self, PyObject *args);
          static PyObject *t_CharTermAttributeImpl_copyBuffer(t_CharTermAttributeImpl *self, PyObject *args);
          static PyObject *t_CharTermAttributeImpl_copyTo(t_CharTermAttributeImpl *self, PyObject *args);
          static PyObject *t_CharTermAttributeImpl_equals(t_CharTermAttributeImpl *self, PyObject *args);
          static PyObject *t_CharTermAttributeImpl_fillBytesRef(t_CharTermAttributeImpl *self);
          static PyObject *t_CharTermAttributeImpl_getBytesRef(t_CharTermAttributeImpl *self);
          static PyObject *t_CharTermAttributeImpl_hashCode(t_CharTermAttributeImpl *self, PyObject *args);
          static PyObject *t_CharTermAttributeImpl_length(t_CharTermAttributeImpl *self);
          static PyObject *t_CharTermAttributeImpl_reflectWith(t_CharTermAttributeImpl *self, PyObject *args);
          static PyObject *t_CharTermAttributeImpl_resizeBuffer(t_CharTermAttributeImpl *self, PyObject *arg);
          static PyObject *t_CharTermAttributeImpl_setEmpty(t_CharTermAttributeImpl *self);
          static PyObject *t_CharTermAttributeImpl_setLength(t_CharTermAttributeImpl *self, PyObject *arg);
          static PyObject *t_CharTermAttributeImpl_subSequence(t_CharTermAttributeImpl *self, PyObject *args);
          static PyObject *t_CharTermAttributeImpl_toString(t_CharTermAttributeImpl *self, PyObject *args);
          static PyObject *t_CharTermAttributeImpl_get__bytesRef(t_CharTermAttributeImpl *self, void *data);
          static PyGetSetDef t_CharTermAttributeImpl__fields_[] = {
            DECLARE_GET_FIELD(t_CharTermAttributeImpl, bytesRef),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CharTermAttributeImpl__methods_[] = {
            DECLARE_METHOD(t_CharTermAttributeImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharTermAttributeImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharTermAttributeImpl, append, METH_VARARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, buffer, METH_NOARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, charAt, METH_O),
            DECLARE_METHOD(t_CharTermAttributeImpl, clear, METH_VARARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, clone, METH_VARARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, copyBuffer, METH_VARARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, copyTo, METH_VARARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, equals, METH_VARARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, fillBytesRef, METH_NOARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, getBytesRef, METH_NOARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, length, METH_NOARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, reflectWith, METH_VARARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, resizeBuffer, METH_O),
            DECLARE_METHOD(t_CharTermAttributeImpl, setEmpty, METH_NOARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, setLength, METH_O),
            DECLARE_METHOD(t_CharTermAttributeImpl, subSequence, METH_VARARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CharTermAttributeImpl, t_CharTermAttributeImpl, ::org::apache::lucene::util::AttributeImpl, CharTermAttributeImpl, t_CharTermAttributeImpl_init_, 0, 0, t_CharTermAttributeImpl__fields_, 0, 0);

          void t_CharTermAttributeImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(CharTermAttributeImpl), module, "CharTermAttributeImpl", 0);
          }

          void t_CharTermAttributeImpl::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CharTermAttributeImpl).tp_dict, "class_", make_descriptor(CharTermAttributeImpl::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CharTermAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_CharTermAttributeImpl::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CharTermAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CharTermAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharTermAttributeImpl::initializeClass, 1)))
              return NULL;
            return t_CharTermAttributeImpl::wrap_Object(CharTermAttributeImpl(((t_CharTermAttributeImpl *) arg)->object.this$));
          }
          static PyObject *t_CharTermAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharTermAttributeImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CharTermAttributeImpl_init_(t_CharTermAttributeImpl *self, PyObject *args, PyObject *kwds)
          {
            CharTermAttributeImpl object((jobject) NULL);

            INT_CALL(object = CharTermAttributeImpl());
            self->object = object;

            return 0;
          }

          static PyObject *t_CharTermAttributeImpl_append(t_CharTermAttributeImpl *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute a0((jobject) NULL);
                ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return ::org::apache::lucene::analysis::tokenattributes::t_CharTermAttribute::wrap_Object(result);
                }
              }
              {
                ::java::lang::StringBuilder a0((jobject) NULL);
                ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "k", ::java::lang::StringBuilder::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return ::org::apache::lucene::analysis::tokenattributes::t_CharTermAttribute::wrap_Object(result);
                }
              }
              {
                jchar a0;
                ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "C", &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return ::org::apache::lucene::analysis::tokenattributes::t_CharTermAttribute::wrap_Object(result);
                }
              }
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return ::org::apache::lucene::analysis::tokenattributes::t_CharTermAttribute::wrap_Object(result);
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return ::org::apache::lucene::analysis::tokenattributes::t_CharTermAttribute::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jint a1;
                jint a2;
                ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.append(a0, a1, a2));
                  return ::org::apache::lucene::analysis::tokenattributes::t_CharTermAttribute::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "append", args);
            return NULL;
          }

          static PyObject *t_CharTermAttributeImpl_buffer(t_CharTermAttributeImpl *self)
          {
            JArray< jchar > result((jobject) NULL);
            OBJ_CALL(result = self->object.buffer());
            return result.wrap();
          }

          static PyObject *t_CharTermAttributeImpl_charAt(t_CharTermAttributeImpl *self, PyObject *arg)
          {
            jint a0;
            jchar result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.charAt(a0));
              return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            PyErr_SetArgsError((PyObject *) self, "charAt", arg);
            return NULL;
          }

          static PyObject *t_CharTermAttributeImpl_clear(t_CharTermAttributeImpl *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CharTermAttributeImpl), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_CharTermAttributeImpl_clone(t_CharTermAttributeImpl *self, PyObject *args)
          {
            CharTermAttributeImpl result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_CharTermAttributeImpl::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CharTermAttributeImpl), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_CharTermAttributeImpl_copyBuffer(t_CharTermAttributeImpl *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint a2;

            if (!parseArgs(args, "[CII", &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.copyBuffer(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "copyBuffer", args);
            return NULL;
          }

          static PyObject *t_CharTermAttributeImpl_copyTo(t_CharTermAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copyTo(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CharTermAttributeImpl), (PyObject *) self, "copyTo", args, 2);
          }

          static PyObject *t_CharTermAttributeImpl_equals(t_CharTermAttributeImpl *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(CharTermAttributeImpl), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_CharTermAttributeImpl_fillBytesRef(t_CharTermAttributeImpl *self)
          {
            OBJ_CALL(self->object.fillBytesRef());
            Py_RETURN_NONE;
          }

          static PyObject *t_CharTermAttributeImpl_getBytesRef(t_CharTermAttributeImpl *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.getBytesRef());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_CharTermAttributeImpl_hashCode(t_CharTermAttributeImpl *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(CharTermAttributeImpl), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_CharTermAttributeImpl_length(t_CharTermAttributeImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.length());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CharTermAttributeImpl_reflectWith(t_CharTermAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeReflector a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeReflector::initializeClass, &a0))
            {
              OBJ_CALL(self->object.reflectWith(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CharTermAttributeImpl), (PyObject *) self, "reflectWith", args, 2);
          }

          static PyObject *t_CharTermAttributeImpl_resizeBuffer(t_CharTermAttributeImpl *self, PyObject *arg)
          {
            jint a0;
            JArray< jchar > result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.resizeBuffer(a0));
              return result.wrap();
            }

            PyErr_SetArgsError((PyObject *) self, "resizeBuffer", arg);
            return NULL;
          }

          static PyObject *t_CharTermAttributeImpl_setEmpty(t_CharTermAttributeImpl *self)
          {
            ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute result((jobject) NULL);
            OBJ_CALL(result = self->object.setEmpty());
            return ::org::apache::lucene::analysis::tokenattributes::t_CharTermAttribute::wrap_Object(result);
          }

          static PyObject *t_CharTermAttributeImpl_setLength(t_CharTermAttributeImpl *self, PyObject *arg)
          {
            jint a0;
            ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.setLength(a0));
              return ::org::apache::lucene::analysis::tokenattributes::t_CharTermAttribute::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setLength", arg);
            return NULL;
          }

          static PyObject *t_CharTermAttributeImpl_subSequence(t_CharTermAttributeImpl *self, PyObject *args)
          {
            jint a0;
            jint a1;
            ::java::lang::CharSequence result((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.subSequence(a0, a1));
              return ::java::lang::t_CharSequence::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "subSequence", args);
            return NULL;
          }

          static PyObject *t_CharTermAttributeImpl_toString(t_CharTermAttributeImpl *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(CharTermAttributeImpl), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_CharTermAttributeImpl_get__bytesRef(t_CharTermAttributeImpl *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getBytesRef());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/StandardAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *StandardAnalyzer::class$ = NULL;
          jmethodID *StandardAnalyzer::mids$ = NULL;
          bool StandardAnalyzer::live$ = false;
          jint StandardAnalyzer::DEFAULT_MAX_TOKEN_LENGTH = (jint) 0;
          ::org::apache::lucene::analysis::util::CharArraySet *StandardAnalyzer::STOP_WORDS_SET = NULL;

          jclass StandardAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/StandardAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getMaxTokenLength_54c6a179] = env->getMethodID(cls, "getMaxTokenLength", "()I");
              mids$[mid_setMaxTokenLength_39c7bd3c] = env->getMethodID(cls, "setMaxTokenLength", "(I)V");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_TOKEN_LENGTH = env->getStaticIntField(cls, "DEFAULT_MAX_TOKEN_LENGTH");
              STOP_WORDS_SET = new ::org::apache::lucene::analysis::util::CharArraySet(env->getStaticObjectField(cls, "STOP_WORDS_SET", "Lorg/apache/lucene/analysis/util/CharArraySet;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StandardAnalyzer::StandardAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          StandardAnalyzer::StandardAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          StandardAnalyzer::StandardAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          jint StandardAnalyzer::getMaxTokenLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxTokenLength_54c6a179]);
          }

          void StandardAnalyzer::setMaxTokenLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxTokenLength_39c7bd3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_StandardAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StandardAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StandardAnalyzer_init_(t_StandardAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StandardAnalyzer_getMaxTokenLength(t_StandardAnalyzer *self);
          static PyObject *t_StandardAnalyzer_setMaxTokenLength(t_StandardAnalyzer *self, PyObject *arg);
          static PyObject *t_StandardAnalyzer_get__maxTokenLength(t_StandardAnalyzer *self, void *data);
          static int t_StandardAnalyzer_set__maxTokenLength(t_StandardAnalyzer *self, PyObject *arg, void *data);
          static PyGetSetDef t_StandardAnalyzer__fields_[] = {
            DECLARE_GETSET_FIELD(t_StandardAnalyzer, maxTokenLength),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_StandardAnalyzer__methods_[] = {
            DECLARE_METHOD(t_StandardAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardAnalyzer, getMaxTokenLength, METH_NOARGS),
            DECLARE_METHOD(t_StandardAnalyzer, setMaxTokenLength, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StandardAnalyzer, t_StandardAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, StandardAnalyzer, t_StandardAnalyzer_init_, 0, 0, t_StandardAnalyzer__fields_, 0, 0);

          void t_StandardAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(StandardAnalyzer), module, "StandardAnalyzer", 0);
          }

          void t_StandardAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StandardAnalyzer).tp_dict, "class_", make_descriptor(StandardAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StandardAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_StandardAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StandardAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(StandardAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(StandardAnalyzer).tp_dict, "DEFAULT_MAX_TOKEN_LENGTH", make_descriptor(StandardAnalyzer::DEFAULT_MAX_TOKEN_LENGTH));
            PyDict_SetItemString(PY_TYPE(StandardAnalyzer).tp_dict, "STOP_WORDS_SET", make_descriptor(::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(*StandardAnalyzer::STOP_WORDS_SET)));
          }

          static PyObject *t_StandardAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StandardAnalyzer::initializeClass, 1)))
              return NULL;
            return t_StandardAnalyzer::wrap_Object(StandardAnalyzer(((t_StandardAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_StandardAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StandardAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StandardAnalyzer_init_(t_StandardAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                StandardAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = StandardAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                StandardAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = StandardAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                StandardAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = StandardAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StandardAnalyzer_getMaxTokenLength(t_StandardAnalyzer *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxTokenLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_StandardAnalyzer_setMaxTokenLength(t_StandardAnalyzer *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxTokenLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxTokenLength", arg);
            return NULL;
          }

          static PyObject *t_StandardAnalyzer_get__maxTokenLength(t_StandardAnalyzer *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxTokenLength());
            return PyInt_FromLong((long) value);
          }
          static int t_StandardAnalyzer_set__maxTokenLength(t_StandardAnalyzer *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxTokenLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxTokenLength", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/no/NorwegianLightStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {

          ::java::lang::Class *NorwegianLightStemmer::class$ = NULL;
          jmethodID *NorwegianLightStemmer::mids$ = NULL;
          bool NorwegianLightStemmer::live$ = false;
          jint NorwegianLightStemmer::BOKMAAL = (jint) 0;
          jint NorwegianLightStemmer::NYNORSK = (jint) 0;

          jclass NorwegianLightStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/no/NorwegianLightStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              BOKMAAL = env->getStaticIntField(cls, "BOKMAAL");
              NYNORSK = env->getStaticIntField(cls, "NYNORSK");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NorwegianLightStemmer::NorwegianLightStemmer(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          jint NorwegianLightStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {
          static PyObject *t_NorwegianLightStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NorwegianLightStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NorwegianLightStemmer_init_(t_NorwegianLightStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NorwegianLightStemmer_stem(t_NorwegianLightStemmer *self, PyObject *args);

          static PyMethodDef t_NorwegianLightStemmer__methods_[] = {
            DECLARE_METHOD(t_NorwegianLightStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianLightStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianLightStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NorwegianLightStemmer, t_NorwegianLightStemmer, ::java::lang::Object, NorwegianLightStemmer, t_NorwegianLightStemmer_init_, 0, 0, 0, 0, 0);

          void t_NorwegianLightStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(NorwegianLightStemmer), module, "NorwegianLightStemmer", 0);
          }

          void t_NorwegianLightStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NorwegianLightStemmer).tp_dict, "class_", make_descriptor(NorwegianLightStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NorwegianLightStemmer).tp_dict, "wrapfn_", make_descriptor(t_NorwegianLightStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NorwegianLightStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(NorwegianLightStemmer::initializeClass);
            PyDict_SetItemString(PY_TYPE(NorwegianLightStemmer).tp_dict, "BOKMAAL", make_descriptor(NorwegianLightStemmer::BOKMAAL));
            PyDict_SetItemString(PY_TYPE(NorwegianLightStemmer).tp_dict, "NYNORSK", make_descriptor(NorwegianLightStemmer::NYNORSK));
          }

          static PyObject *t_NorwegianLightStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NorwegianLightStemmer::initializeClass, 1)))
              return NULL;
            return t_NorwegianLightStemmer::wrap_Object(NorwegianLightStemmer(((t_NorwegianLightStemmer *) arg)->object.this$));
          }
          static PyObject *t_NorwegianLightStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NorwegianLightStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NorwegianLightStemmer_init_(t_NorwegianLightStemmer *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            NorwegianLightStemmer object((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              INT_CALL(object = NorwegianLightStemmer(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NorwegianLightStemmer_stem(t_NorwegianLightStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *TypeAsPayloadTokenFilter::class$ = NULL;
          jmethodID *TypeAsPayloadTokenFilter::mids$ = NULL;
          bool TypeAsPayloadTokenFilter::live$ = false;

          jclass TypeAsPayloadTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TypeAsPayloadTokenFilter::TypeAsPayloadTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean TypeAsPayloadTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_TypeAsPayloadTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TypeAsPayloadTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TypeAsPayloadTokenFilter_init_(t_TypeAsPayloadTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TypeAsPayloadTokenFilter_incrementToken(t_TypeAsPayloadTokenFilter *self, PyObject *args);

          static PyMethodDef t_TypeAsPayloadTokenFilter__methods_[] = {
            DECLARE_METHOD(t_TypeAsPayloadTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeAsPayloadTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeAsPayloadTokenFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TypeAsPayloadTokenFilter, t_TypeAsPayloadTokenFilter, ::org::apache::lucene::analysis::TokenFilter, TypeAsPayloadTokenFilter, t_TypeAsPayloadTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_TypeAsPayloadTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(TypeAsPayloadTokenFilter), module, "TypeAsPayloadTokenFilter", 0);
          }

          void t_TypeAsPayloadTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TypeAsPayloadTokenFilter).tp_dict, "class_", make_descriptor(TypeAsPayloadTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TypeAsPayloadTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_TypeAsPayloadTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TypeAsPayloadTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TypeAsPayloadTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TypeAsPayloadTokenFilter::initializeClass, 1)))
              return NULL;
            return t_TypeAsPayloadTokenFilter::wrap_Object(TypeAsPayloadTokenFilter(((t_TypeAsPayloadTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_TypeAsPayloadTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TypeAsPayloadTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TypeAsPayloadTokenFilter_init_(t_TypeAsPayloadTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            TypeAsPayloadTokenFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = TypeAsPayloadTokenFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TypeAsPayloadTokenFilter_incrementToken(t_TypeAsPayloadTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TypeAsPayloadTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/th/ThaiWordFilterFactory.h"
#include "org/apache/lucene/analysis/th/ThaiWordFilter.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace th {

          ::java::lang::Class *ThaiWordFilterFactory::class$ = NULL;
          jmethodID *ThaiWordFilterFactory::mids$ = NULL;
          bool ThaiWordFilterFactory::live$ = false;

          jclass ThaiWordFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/th/ThaiWordFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_55090cc5] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/th/ThaiWordFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ThaiWordFilterFactory::ThaiWordFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::th::ThaiWordFilter ThaiWordFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::th::ThaiWordFilter(env->callObjectMethod(this$, mids$[mid_create_55090cc5], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace th {
          static PyObject *t_ThaiWordFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ThaiWordFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ThaiWordFilterFactory_init_(t_ThaiWordFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ThaiWordFilterFactory_create(t_ThaiWordFilterFactory *self, PyObject *args);

          static PyMethodDef t_ThaiWordFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ThaiWordFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ThaiWordFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ThaiWordFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ThaiWordFilterFactory, t_ThaiWordFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, ThaiWordFilterFactory, t_ThaiWordFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_ThaiWordFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ThaiWordFilterFactory), module, "ThaiWordFilterFactory", 0);
          }

          void t_ThaiWordFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ThaiWordFilterFactory).tp_dict, "class_", make_descriptor(ThaiWordFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ThaiWordFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_ThaiWordFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ThaiWordFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ThaiWordFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ThaiWordFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ThaiWordFilterFactory::wrap_Object(ThaiWordFilterFactory(((t_ThaiWordFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ThaiWordFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ThaiWordFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ThaiWordFilterFactory_init_(t_ThaiWordFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ThaiWordFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ThaiWordFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ThaiWordFilterFactory_create(t_ThaiWordFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::th::ThaiWordFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::th::t_ThaiWordFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ThaiWordFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CheckIndex.h"
#include "java/io/PrintStream.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/CheckIndex$Status$DocValuesStatus.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/CheckIndex$Status$FieldNormStatus.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/InterruptedException.h"
#include "org/apache/lucene/index/CheckIndex$Status$TermIndexStatus.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/CheckIndex$Status.h"
#include "org/apache/lucene/index/CheckIndex$Status$StoredFieldStatus.h"
#include "org/apache/lucene/index/CheckIndex$Status$TermVectorStatus.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CheckIndex::class$ = NULL;
        jmethodID *CheckIndex::mids$ = NULL;
        bool CheckIndex::live$ = false;

        jclass CheckIndex::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CheckIndex");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_2e261ef2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_checkIndex_91a82b33] = env->getMethodID(cls, "checkIndex", "()Lorg/apache/lucene/index/CheckIndex$Status;");
            mids$[mid_checkIndex_a75717b2] = env->getMethodID(cls, "checkIndex", "(Ljava/util/List;)Lorg/apache/lucene/index/CheckIndex$Status;");
            mids$[mid_fixIndex_a89756fe] = env->getMethodID(cls, "fixIndex", "(Lorg/apache/lucene/index/CheckIndex$Status;)V");
            mids$[mid_getCrossCheckTermVectors_54c6a16a] = env->getMethodID(cls, "getCrossCheckTermVectors", "()Z");
            mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");
            mids$[mid_setCrossCheckTermVectors_bb0c767f] = env->getMethodID(cls, "setCrossCheckTermVectors", "(Z)V");
            mids$[mid_setInfoStream_1b7c898b] = env->getMethodID(cls, "setInfoStream", "(Ljava/io/PrintStream;)V");
            mids$[mid_setInfoStream_ee355e40] = env->getMethodID(cls, "setInfoStream", "(Ljava/io/PrintStream;Z)V");
            mids$[mid_testDocValues_11f384a5] = env->getStaticMethodID(cls, "testDocValues", "(Lorg/apache/lucene/index/AtomicReader;Ljava/io/PrintStream;)Lorg/apache/lucene/index/CheckIndex$Status$DocValuesStatus;");
            mids$[mid_testFieldNorms_3488ebf7] = env->getStaticMethodID(cls, "testFieldNorms", "(Lorg/apache/lucene/index/AtomicReader;Ljava/io/PrintStream;)Lorg/apache/lucene/index/CheckIndex$Status$FieldNormStatus;");
            mids$[mid_testPostings_2a988783] = env->getStaticMethodID(cls, "testPostings", "(Lorg/apache/lucene/index/AtomicReader;Ljava/io/PrintStream;)Lorg/apache/lucene/index/CheckIndex$Status$TermIndexStatus;");
            mids$[mid_testPostings_9363927a] = env->getStaticMethodID(cls, "testPostings", "(Lorg/apache/lucene/index/AtomicReader;Ljava/io/PrintStream;Z)Lorg/apache/lucene/index/CheckIndex$Status$TermIndexStatus;");
            mids$[mid_testStoredFields_1ec0767a] = env->getStaticMethodID(cls, "testStoredFields", "(Lorg/apache/lucene/index/AtomicReader;Ljava/io/PrintStream;)Lorg/apache/lucene/index/CheckIndex$Status$StoredFieldStatus;");
            mids$[mid_testTermVectors_f049a3c1] = env->getStaticMethodID(cls, "testTermVectors", "(Lorg/apache/lucene/index/AtomicReader;Ljava/io/PrintStream;)Lorg/apache/lucene/index/CheckIndex$Status$TermVectorStatus;");
            mids$[mid_testTermVectors_438dd273] = env->getStaticMethodID(cls, "testTermVectors", "(Lorg/apache/lucene/index/AtomicReader;Ljava/io/PrintStream;ZZ)Lorg/apache/lucene/index/CheckIndex$Status$TermVectorStatus;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CheckIndex::CheckIndex(const ::org::apache::lucene::store::Directory & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_2e261ef2, a0.this$)) {}

        ::org::apache::lucene::index::CheckIndex$Status CheckIndex::checkIndex() const
        {
          return ::org::apache::lucene::index::CheckIndex$Status(env->callObjectMethod(this$, mids$[mid_checkIndex_91a82b33]));
        }

        ::org::apache::lucene::index::CheckIndex$Status CheckIndex::checkIndex(const ::java::util::List & a0) const
        {
          return ::org::apache::lucene::index::CheckIndex$Status(env->callObjectMethod(this$, mids$[mid_checkIndex_a75717b2], a0.this$));
        }

        void CheckIndex::fixIndex(const ::org::apache::lucene::index::CheckIndex$Status & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_fixIndex_a89756fe], a0.this$);
        }

        jboolean CheckIndex::getCrossCheckTermVectors() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getCrossCheckTermVectors_54c6a16a]);
        }

        void CheckIndex::main(const JArray< ::java::lang::String > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
        }

        void CheckIndex::setCrossCheckTermVectors(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setCrossCheckTermVectors_bb0c767f], a0);
        }

        void CheckIndex::setInfoStream(const ::java::io::PrintStream & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setInfoStream_1b7c898b], a0.this$);
        }

        void CheckIndex::setInfoStream(const ::java::io::PrintStream & a0, jboolean a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setInfoStream_ee355e40], a0.this$, a1);
        }

        ::org::apache::lucene::index::CheckIndex$Status$DocValuesStatus CheckIndex::testDocValues(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::io::PrintStream & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::CheckIndex$Status$DocValuesStatus(env->callStaticObjectMethod(cls, mids$[mid_testDocValues_11f384a5], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::CheckIndex$Status$FieldNormStatus CheckIndex::testFieldNorms(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::io::PrintStream & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::CheckIndex$Status$FieldNormStatus(env->callStaticObjectMethod(cls, mids$[mid_testFieldNorms_3488ebf7], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus CheckIndex::testPostings(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::io::PrintStream & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus(env->callStaticObjectMethod(cls, mids$[mid_testPostings_2a988783], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus CheckIndex::testPostings(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::io::PrintStream & a1, jboolean a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus(env->callStaticObjectMethod(cls, mids$[mid_testPostings_9363927a], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::index::CheckIndex$Status$StoredFieldStatus CheckIndex::testStoredFields(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::io::PrintStream & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::CheckIndex$Status$StoredFieldStatus(env->callStaticObjectMethod(cls, mids$[mid_testStoredFields_1ec0767a], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus CheckIndex::testTermVectors(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::io::PrintStream & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus(env->callStaticObjectMethod(cls, mids$[mid_testTermVectors_f049a3c1], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus CheckIndex::testTermVectors(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::io::PrintStream & a1, jboolean a2, jboolean a3)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus(env->callStaticObjectMethod(cls, mids$[mid_testTermVectors_438dd273], a0.this$, a1.this$, a2, a3));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CheckIndex_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CheckIndex_init_(t_CheckIndex *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CheckIndex_checkIndex(t_CheckIndex *self, PyObject *args);
        static PyObject *t_CheckIndex_fixIndex(t_CheckIndex *self, PyObject *arg);
        static PyObject *t_CheckIndex_getCrossCheckTermVectors(t_CheckIndex *self);
        static PyObject *t_CheckIndex_main(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex_setCrossCheckTermVectors(t_CheckIndex *self, PyObject *arg);
        static PyObject *t_CheckIndex_setInfoStream(t_CheckIndex *self, PyObject *args);
        static PyObject *t_CheckIndex_testDocValues(PyTypeObject *type, PyObject *args);
        static PyObject *t_CheckIndex_testFieldNorms(PyTypeObject *type, PyObject *args);
        static PyObject *t_CheckIndex_testPostings(PyTypeObject *type, PyObject *args);
        static PyObject *t_CheckIndex_testStoredFields(PyTypeObject *type, PyObject *args);
        static PyObject *t_CheckIndex_testTermVectors(PyTypeObject *type, PyObject *args);
        static PyObject *t_CheckIndex_get__crossCheckTermVectors(t_CheckIndex *self, void *data);
        static int t_CheckIndex_set__crossCheckTermVectors(t_CheckIndex *self, PyObject *arg, void *data);
        static int t_CheckIndex_set__infoStream(t_CheckIndex *self, PyObject *arg, void *data);
        static PyGetSetDef t_CheckIndex__fields_[] = {
          DECLARE_GETSET_FIELD(t_CheckIndex, crossCheckTermVectors),
          DECLARE_SET_FIELD(t_CheckIndex, infoStream),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CheckIndex__methods_[] = {
          DECLARE_METHOD(t_CheckIndex, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex, checkIndex, METH_VARARGS),
          DECLARE_METHOD(t_CheckIndex, fixIndex, METH_O),
          DECLARE_METHOD(t_CheckIndex, getCrossCheckTermVectors, METH_NOARGS),
          DECLARE_METHOD(t_CheckIndex, main, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex, setCrossCheckTermVectors, METH_O),
          DECLARE_METHOD(t_CheckIndex, setInfoStream, METH_VARARGS),
          DECLARE_METHOD(t_CheckIndex, testDocValues, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex, testFieldNorms, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex, testPostings, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex, testStoredFields, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex, testTermVectors, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CheckIndex, t_CheckIndex, ::java::lang::Object, CheckIndex, t_CheckIndex_init_, 0, 0, t_CheckIndex__fields_, 0, 0);

        void t_CheckIndex::install(PyObject *module)
        {
          installType(&PY_TYPE(CheckIndex), module, "CheckIndex", 0);
          PyDict_SetItemString(PY_TYPE(CheckIndex).tp_dict, "Status", make_descriptor(&PY_TYPE(CheckIndex$Status)));
        }

        void t_CheckIndex::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CheckIndex).tp_dict, "class_", make_descriptor(CheckIndex::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CheckIndex).tp_dict, "wrapfn_", make_descriptor(t_CheckIndex::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CheckIndex).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CheckIndex_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CheckIndex::initializeClass, 1)))
            return NULL;
          return t_CheckIndex::wrap_Object(CheckIndex(((t_CheckIndex *) arg)->object.this$));
        }
        static PyObject *t_CheckIndex_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CheckIndex::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CheckIndex_init_(t_CheckIndex *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          CheckIndex object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
          {
            INT_CALL(object = CheckIndex(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CheckIndex_checkIndex(t_CheckIndex *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ::org::apache::lucene::index::CheckIndex$Status result((jobject) NULL);
              OBJ_CALL(result = self->object.checkIndex());
              return ::org::apache::lucene::index::t_CheckIndex$Status::wrap_Object(result);
            }
            break;
           case 1:
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::CheckIndex$Status result((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
              {
                OBJ_CALL(result = self->object.checkIndex(a0));
                return ::org::apache::lucene::index::t_CheckIndex$Status::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "checkIndex", args);
          return NULL;
        }

        static PyObject *t_CheckIndex_fixIndex(t_CheckIndex *self, PyObject *arg)
        {
          ::org::apache::lucene::index::CheckIndex$Status a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::CheckIndex$Status::initializeClass, &a0))
          {
            OBJ_CALL(self->object.fixIndex(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "fixIndex", arg);
          return NULL;
        }

        static PyObject *t_CheckIndex_getCrossCheckTermVectors(t_CheckIndex *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getCrossCheckTermVectors());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_CheckIndex_main(PyTypeObject *type, PyObject *arg)
        {
          JArray< ::java::lang::String > a0((jobject) NULL);

          if (!parseArg(arg, "[s", &a0))
          {
            OBJ_CALL(::org::apache::lucene::index::CheckIndex::main(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "main", arg);
          return NULL;
        }

        static PyObject *t_CheckIndex_setCrossCheckTermVectors(t_CheckIndex *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setCrossCheckTermVectors(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setCrossCheckTermVectors", arg);
          return NULL;
        }

        static PyObject *t_CheckIndex_setInfoStream(t_CheckIndex *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::io::PrintStream a0((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::PrintStream::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setInfoStream(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::java::io::PrintStream a0((jobject) NULL);
              jboolean a1;

              if (!parseArgs(args, "kZ", ::java::io::PrintStream::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.setInfoStream(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "setInfoStream", args);
          return NULL;
        }

        static PyObject *t_CheckIndex_testDocValues(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::java::io::PrintStream a1((jobject) NULL);
          ::org::apache::lucene::index::CheckIndex$Status$DocValuesStatus result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReader::initializeClass, ::java::io::PrintStream::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::CheckIndex::testDocValues(a0, a1));
            return ::org::apache::lucene::index::t_CheckIndex$Status$DocValuesStatus::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "testDocValues", args);
          return NULL;
        }

        static PyObject *t_CheckIndex_testFieldNorms(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::java::io::PrintStream a1((jobject) NULL);
          ::org::apache::lucene::index::CheckIndex$Status$FieldNormStatus result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReader::initializeClass, ::java::io::PrintStream::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::CheckIndex::testFieldNorms(a0, a1));
            return ::org::apache::lucene::index::t_CheckIndex$Status$FieldNormStatus::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "testFieldNorms", args);
          return NULL;
        }

        static PyObject *t_CheckIndex_testPostings(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::io::PrintStream a1((jobject) NULL);
              ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus result((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReader::initializeClass, ::java::io::PrintStream::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::CheckIndex::testPostings(a0, a1));
                return ::org::apache::lucene::index::t_CheckIndex$Status$TermIndexStatus::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::io::PrintStream a1((jobject) NULL);
              jboolean a2;
              ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus result((jobject) NULL);

              if (!parseArgs(args, "kkZ", ::org::apache::lucene::index::AtomicReader::initializeClass, ::java::io::PrintStream::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::CheckIndex::testPostings(a0, a1, a2));
                return ::org::apache::lucene::index::t_CheckIndex$Status$TermIndexStatus::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "testPostings", args);
          return NULL;
        }

        static PyObject *t_CheckIndex_testStoredFields(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::java::io::PrintStream a1((jobject) NULL);
          ::org::apache::lucene::index::CheckIndex$Status$StoredFieldStatus result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReader::initializeClass, ::java::io::PrintStream::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::CheckIndex::testStoredFields(a0, a1));
            return ::org::apache::lucene::index::t_CheckIndex$Status$StoredFieldStatus::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "testStoredFields", args);
          return NULL;
        }

        static PyObject *t_CheckIndex_testTermVectors(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::io::PrintStream a1((jobject) NULL);
              ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus result((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReader::initializeClass, ::java::io::PrintStream::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::CheckIndex::testTermVectors(a0, a1));
                return ::org::apache::lucene::index::t_CheckIndex$Status$TermVectorStatus::wrap_Object(result);
              }
            }
            break;
           case 4:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::io::PrintStream a1((jobject) NULL);
              jboolean a2;
              jboolean a3;
              ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus result((jobject) NULL);

              if (!parseArgs(args, "kkZZ", ::org::apache::lucene::index::AtomicReader::initializeClass, ::java::io::PrintStream::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::CheckIndex::testTermVectors(a0, a1, a2, a3));
                return ::org::apache::lucene::index::t_CheckIndex$Status$TermVectorStatus::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "testTermVectors", args);
          return NULL;
        }

        static PyObject *t_CheckIndex_get__crossCheckTermVectors(t_CheckIndex *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getCrossCheckTermVectors());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex_set__crossCheckTermVectors(t_CheckIndex *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setCrossCheckTermVectors(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "crossCheckTermVectors", arg);
          return -1;
        }

        static int t_CheckIndex_set__infoStream(t_CheckIndex *self, PyObject *arg, void *data)
        {
          {
            ::java::io::PrintStream value((jobject) NULL);
            if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &value))
            {
              INT_CALL(self->object.setInfoStream(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "infoStream", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace query {

          ::java::lang::Class *QueryAutoStopWordAnalyzer::class$ = NULL;
          jmethodID *QueryAutoStopWordAnalyzer::mids$ = NULL;
          bool QueryAutoStopWordAnalyzer::live$ = false;
          jfloat QueryAutoStopWordAnalyzer::defaultMaxDocFreqPercent = (jfloat) 0;

          jclass QueryAutoStopWordAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f0ed586e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/index/IndexReader;)V");
              mids$[mid_init$_1ec7a0cb] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/index/IndexReader;F)V");
              mids$[mid_init$_4a9ca32c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/index/IndexReader;I)V");
              mids$[mid_init$_560944dd] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/index/IndexReader;Ljava/util/Collection;I)V");
              mids$[mid_init$_2db3c3ea] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/index/IndexReader;Ljava/util/Collection;F)V");
              mids$[mid_getStopWords_2b86e588] = env->getMethodID(cls, "getStopWords", "()[Lorg/apache/lucene/index/Term;");
              mids$[mid_getStopWords_1f6a174f] = env->getMethodID(cls, "getStopWords", "(Ljava/lang/String;)[Ljava/lang/String;");
              mids$[mid_getWrappedAnalyzer_29a2299f] = env->getMethodID(cls, "getWrappedAnalyzer", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer;");
              mids$[mid_wrapComponents_46d74455] = env->getMethodID(cls, "wrapComponents", "(Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              defaultMaxDocFreqPercent = env->getStaticFloatField(cls, "defaultMaxDocFreqPercent");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          QueryAutoStopWordAnalyzer::QueryAutoStopWordAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::Analyzer & a1, const ::org::apache::lucene::index::IndexReader & a2) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_f0ed586e, a0.this$, a1.this$, a2.this$)) {}

          QueryAutoStopWordAnalyzer::QueryAutoStopWordAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::Analyzer & a1, const ::org::apache::lucene::index::IndexReader & a2, jfloat a3) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_1ec7a0cb, a0.this$, a1.this$, a2.this$, a3)) {}

          QueryAutoStopWordAnalyzer::QueryAutoStopWordAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::Analyzer & a1, const ::org::apache::lucene::index::IndexReader & a2, jint a3) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_4a9ca32c, a0.this$, a1.this$, a2.this$, a3)) {}

          QueryAutoStopWordAnalyzer::QueryAutoStopWordAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::Analyzer & a1, const ::org::apache::lucene::index::IndexReader & a2, const ::java::util::Collection & a3, jint a4) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_560944dd, a0.this$, a1.this$, a2.this$, a3.this$, a4)) {}

          QueryAutoStopWordAnalyzer::QueryAutoStopWordAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::Analyzer & a1, const ::org::apache::lucene::index::IndexReader & a2, const ::java::util::Collection & a3, jfloat a4) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_2db3c3ea, a0.this$, a1.this$, a2.this$, a3.this$, a4)) {}

          JArray< ::org::apache::lucene::index::Term > QueryAutoStopWordAnalyzer::getStopWords() const
          {
            return JArray< ::org::apache::lucene::index::Term >(env->callObjectMethod(this$, mids$[mid_getStopWords_2b86e588]));
          }

          JArray< ::java::lang::String > QueryAutoStopWordAnalyzer::getStopWords(const ::java::lang::String & a0) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_getStopWords_1f6a174f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace query {
          static PyObject *t_QueryAutoStopWordAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryAutoStopWordAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_QueryAutoStopWordAnalyzer_init_(t_QueryAutoStopWordAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_QueryAutoStopWordAnalyzer_getStopWords(t_QueryAutoStopWordAnalyzer *self, PyObject *args);
          static PyObject *t_QueryAutoStopWordAnalyzer_get__stopWords(t_QueryAutoStopWordAnalyzer *self, void *data);
          static PyGetSetDef t_QueryAutoStopWordAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_QueryAutoStopWordAnalyzer, stopWords),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_QueryAutoStopWordAnalyzer__methods_[] = {
            DECLARE_METHOD(t_QueryAutoStopWordAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryAutoStopWordAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryAutoStopWordAnalyzer, getStopWords, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(QueryAutoStopWordAnalyzer, t_QueryAutoStopWordAnalyzer, ::org::apache::lucene::analysis::AnalyzerWrapper, QueryAutoStopWordAnalyzer, t_QueryAutoStopWordAnalyzer_init_, 0, 0, t_QueryAutoStopWordAnalyzer__fields_, 0, 0);

          void t_QueryAutoStopWordAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryAutoStopWordAnalyzer), module, "QueryAutoStopWordAnalyzer", 0);
          }

          void t_QueryAutoStopWordAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(QueryAutoStopWordAnalyzer).tp_dict, "class_", make_descriptor(QueryAutoStopWordAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(QueryAutoStopWordAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_QueryAutoStopWordAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(QueryAutoStopWordAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(QueryAutoStopWordAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(QueryAutoStopWordAnalyzer).tp_dict, "defaultMaxDocFreqPercent", make_descriptor(QueryAutoStopWordAnalyzer::defaultMaxDocFreqPercent));
          }

          static PyObject *t_QueryAutoStopWordAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryAutoStopWordAnalyzer::initializeClass, 1)))
              return NULL;
            return t_QueryAutoStopWordAnalyzer::wrap_Object(QueryAutoStopWordAnalyzer(((t_QueryAutoStopWordAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_QueryAutoStopWordAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryAutoStopWordAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_QueryAutoStopWordAnalyzer_init_(t_QueryAutoStopWordAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a2((jobject) NULL);
                QueryAutoStopWordAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "Kkk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = QueryAutoStopWordAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a2((jobject) NULL);
                jfloat a3;
                QueryAutoStopWordAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KkkF", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3))
                {
                  INT_CALL(object = QueryAutoStopWordAnalyzer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a2((jobject) NULL);
                jint a3;
                QueryAutoStopWordAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KkkI", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3))
                {
                  INT_CALL(object = QueryAutoStopWordAnalyzer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a2((jobject) NULL);
                ::java::util::Collection a3((jobject) NULL);
                PyTypeObject **p3;
                jint a4;
                QueryAutoStopWordAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KkkKI", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, ::java::util::Collection::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &p3, ::java::util::t_Collection::parameters_, &a4))
                {
                  INT_CALL(object = QueryAutoStopWordAnalyzer(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a2((jobject) NULL);
                ::java::util::Collection a3((jobject) NULL);
                PyTypeObject **p3;
                jfloat a4;
                QueryAutoStopWordAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KkkKF", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, ::java::util::Collection::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &p3, ::java::util::t_Collection::parameters_, &a4))
                {
                  INT_CALL(object = QueryAutoStopWordAnalyzer(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_QueryAutoStopWordAnalyzer_getStopWords(t_QueryAutoStopWordAnalyzer *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                JArray< ::org::apache::lucene::index::Term > result((jobject) NULL);
                OBJ_CALL(result = self->object.getStopWords());
                return JArray<jobject>(result.this$).wrap(::org::apache::lucene::index::t_Term::wrap_jobject);
              }
              break;
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = self->object.getStopWords(a0));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getStopWords", args);
            return NULL;
          }

          static PyObject *t_QueryAutoStopWordAnalyzer_get__stopWords(t_QueryAutoStopWordAnalyzer *self, void *data)
          {
            JArray< ::org::apache::lucene::index::Term > value((jobject) NULL);
            OBJ_CALL(value = self->object.getStopWords());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_Term::wrap_jobject);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldDoc.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldDoc::class$ = NULL;
        jmethodID *FieldDoc::mids$ = NULL;
        jfieldID *FieldDoc::fids$ = NULL;
        bool FieldDoc::live$ = false;

        jclass FieldDoc::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldDoc");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_abdf2c51] = env->getMethodID(cls, "<init>", "(IF)V");
            mids$[mid_init$_8f5d1bf7] = env->getMethodID(cls, "<init>", "(IF[Ljava/lang/Object;)V");
            mids$[mid_init$_87a6361f] = env->getMethodID(cls, "<init>", "(IF[Ljava/lang/Object;I)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_fields] = env->getFieldID(cls, "fields", "[Ljava/lang/Object;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldDoc::FieldDoc(jint a0, jfloat a1) : ::org::apache::lucene::search::ScoreDoc(env->newObject(initializeClass, &mids$, mid_init$_abdf2c51, a0, a1)) {}

        FieldDoc::FieldDoc(jint a0, jfloat a1, const JArray< ::java::lang::Object > & a2) : ::org::apache::lucene::search::ScoreDoc(env->newObject(initializeClass, &mids$, mid_init$_8f5d1bf7, a0, a1, a2.this$)) {}

        FieldDoc::FieldDoc(jint a0, jfloat a1, const JArray< ::java::lang::Object > & a2, jint a3) : ::org::apache::lucene::search::ScoreDoc(env->newObject(initializeClass, &mids$, mid_init$_87a6361f, a0, a1, a2.this$, a3)) {}

        ::java::lang::String FieldDoc::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        JArray< ::java::lang::Object > FieldDoc::_get_fields() const
        {
          return JArray< ::java::lang::Object >(env->getObjectField(this$, fids$[fid_fields]));
        }

        void FieldDoc::_set_fields(const JArray< ::java::lang::Object > & a0) const
        {
          env->setObjectField(this$, fids$[fid_fields], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldDoc_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldDoc_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldDoc_init_(t_FieldDoc *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldDoc_toString(t_FieldDoc *self, PyObject *args);
        static PyObject *t_FieldDoc_get__fields(t_FieldDoc *self, void *data);
        static int t_FieldDoc_set__fields(t_FieldDoc *self, PyObject *arg, void *data);

        static PyGetSetDef t_FieldDoc__fields_[] = {
          DECLARE_GETSET_FIELD(t_FieldDoc, fields),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldDoc__methods_[] = {
          DECLARE_METHOD(t_FieldDoc, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldDoc, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldDoc, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldDoc, t_FieldDoc, ::org::apache::lucene::search::ScoreDoc, FieldDoc, t_FieldDoc_init_, 0, 0, t_FieldDoc__fields_, 0, 0);

        void t_FieldDoc::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldDoc), module, "FieldDoc", 0);
        }

        void t_FieldDoc::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldDoc).tp_dict, "class_", make_descriptor(FieldDoc::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldDoc).tp_dict, "wrapfn_", make_descriptor(t_FieldDoc::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldDoc).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldDoc_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldDoc::initializeClass, 1)))
            return NULL;
          return t_FieldDoc::wrap_Object(FieldDoc(((t_FieldDoc *) arg)->object.this$));
        }
        static PyObject *t_FieldDoc_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldDoc::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldDoc_init_(t_FieldDoc *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              jint a0;
              jfloat a1;
              FieldDoc object((jobject) NULL);

              if (!parseArgs(args, "IF", &a0, &a1))
              {
                INT_CALL(object = FieldDoc(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              jint a0;
              jfloat a1;
              JArray< ::java::lang::Object > a2((jobject) NULL);
              FieldDoc object((jobject) NULL);

              if (!parseArgs(args, "IF[o", &a0, &a1, &a2))
              {
                INT_CALL(object = FieldDoc(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            goto err;
           case 4:
            {
              jint a0;
              jfloat a1;
              JArray< ::java::lang::Object > a2((jobject) NULL);
              jint a3;
              FieldDoc object((jobject) NULL);

              if (!parseArgs(args, "IF[oI", &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = FieldDoc(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldDoc_toString(t_FieldDoc *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FieldDoc), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FieldDoc_get__fields(t_FieldDoc *self, void *data)
        {
          JArray< ::java::lang::Object > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_fields());
          return JArray<jobject>(value.this$).wrap(::java::lang::t_Object::wrap_jobject);
        }
        static int t_FieldDoc_set__fields(t_FieldDoc *self, PyObject *arg, void *data)
        {
          JArray< ::java::lang::Object > value((jobject) NULL);
          if (!parseArg(arg, "[o", &value))
          {
            INT_CALL(self->object._set_fields(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "fields", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/Row.h"
#include "java/io/PrintStream.h"
#include "java/lang/Character.h"
#include "java/lang/Class.h"
#include "java/io/DataInput.h"
#include "java/io/IOException.h"
#include "java/io/DataOutput.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *Row::class$ = NULL;
      jmethodID *Row::mids$ = NULL;
      bool Row::live$ = false;

      jclass Row::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/Row");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
          mids$[mid_init$_e051d6a6] = env->getMethodID(cls, "<init>", "(Ljava/io/DataInput;)V");
          mids$[mid_getCells_54c6a179] = env->getMethodID(cls, "getCells", "()I");
          mids$[mid_getCellsPnt_54c6a179] = env->getMethodID(cls, "getCellsPnt", "()I");
          mids$[mid_getCellsVal_54c6a179] = env->getMethodID(cls, "getCellsVal", "()I");
          mids$[mid_getCmd_35927258] = env->getMethodID(cls, "getCmd", "(Ljava/lang/Character;)I");
          mids$[mid_getCnt_35927258] = env->getMethodID(cls, "getCnt", "(Ljava/lang/Character;)I");
          mids$[mid_getRef_35927258] = env->getMethodID(cls, "getRef", "(Ljava/lang/Character;)I");
          mids$[mid_print_1b7c898b] = env->getMethodID(cls, "print", "(Ljava/io/PrintStream;)V");
          mids$[mid_setCmd_d2bbdccf] = env->getMethodID(cls, "setCmd", "(Ljava/lang/Character;I)V");
          mids$[mid_setRef_d2bbdccf] = env->getMethodID(cls, "setRef", "(Ljava/lang/Character;I)V");
          mids$[mid_store_cfb051e6] = env->getMethodID(cls, "store", "(Ljava/io/DataOutput;)V");
          mids$[mid_uniformCmd_bb0c7660] = env->getMethodID(cls, "uniformCmd", "(Z)I");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      Row::Row() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

      Row::Row(const ::java::io::DataInput & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e051d6a6, a0.this$)) {}

      jint Row::getCells() const
      {
        return env->callIntMethod(this$, mids$[mid_getCells_54c6a179]);
      }

      jint Row::getCellsPnt() const
      {
        return env->callIntMethod(this$, mids$[mid_getCellsPnt_54c6a179]);
      }

      jint Row::getCellsVal() const
      {
        return env->callIntMethod(this$, mids$[mid_getCellsVal_54c6a179]);
      }

      jint Row::getCmd(const ::java::lang::Character & a0) const
      {
        return env->callIntMethod(this$, mids$[mid_getCmd_35927258], a0.this$);
      }

      jint Row::getCnt(const ::java::lang::Character & a0) const
      {
        return env->callIntMethod(this$, mids$[mid_getCnt_35927258], a0.this$);
      }

      jint Row::getRef(const ::java::lang::Character & a0) const
      {
        return env->callIntMethod(this$, mids$[mid_getRef_35927258], a0.this$);
      }

      void Row::print(const ::java::io::PrintStream & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_print_1b7c898b], a0.this$);
      }

      void Row::setCmd(const ::java::lang::Character & a0, jint a1) const
      {
        env->callVoidMethod(this$, mids$[mid_setCmd_d2bbdccf], a0.this$, a1);
      }

      void Row::setRef(const ::java::lang::Character & a0, jint a1) const
      {
        env->callVoidMethod(this$, mids$[mid_setRef_d2bbdccf], a0.this$, a1);
      }

      void Row::store(const ::java::io::DataOutput & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_store_cfb051e6], a0.this$);
      }

      jint Row::uniformCmd(jboolean a0) const
      {
        return env->callIntMethod(this$, mids$[mid_uniformCmd_bb0c7660], a0);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_Row_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Row_instance_(PyTypeObject *type, PyObject *arg);
      static int t_Row_init_(t_Row *self, PyObject *args, PyObject *kwds);
      static PyObject *t_Row_getCells(t_Row *self);
      static PyObject *t_Row_getCellsPnt(t_Row *self);
      static PyObject *t_Row_getCellsVal(t_Row *self);
      static PyObject *t_Row_getCmd(t_Row *self, PyObject *arg);
      static PyObject *t_Row_getCnt(t_Row *self, PyObject *arg);
      static PyObject *t_Row_getRef(t_Row *self, PyObject *arg);
      static PyObject *t_Row_print(t_Row *self, PyObject *arg);
      static PyObject *t_Row_setCmd(t_Row *self, PyObject *args);
      static PyObject *t_Row_setRef(t_Row *self, PyObject *args);
      static PyObject *t_Row_store(t_Row *self, PyObject *arg);
      static PyObject *t_Row_uniformCmd(t_Row *self, PyObject *arg);
      static PyObject *t_Row_get__cells(t_Row *self, void *data);
      static PyObject *t_Row_get__cellsPnt(t_Row *self, void *data);
      static PyObject *t_Row_get__cellsVal(t_Row *self, void *data);
      static PyGetSetDef t_Row__fields_[] = {
        DECLARE_GET_FIELD(t_Row, cells),
        DECLARE_GET_FIELD(t_Row, cellsPnt),
        DECLARE_GET_FIELD(t_Row, cellsVal),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_Row__methods_[] = {
        DECLARE_METHOD(t_Row, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Row, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Row, getCells, METH_NOARGS),
        DECLARE_METHOD(t_Row, getCellsPnt, METH_NOARGS),
        DECLARE_METHOD(t_Row, getCellsVal, METH_NOARGS),
        DECLARE_METHOD(t_Row, getCmd, METH_O),
        DECLARE_METHOD(t_Row, getCnt, METH_O),
        DECLARE_METHOD(t_Row, getRef, METH_O),
        DECLARE_METHOD(t_Row, print, METH_O),
        DECLARE_METHOD(t_Row, setCmd, METH_VARARGS),
        DECLARE_METHOD(t_Row, setRef, METH_VARARGS),
        DECLARE_METHOD(t_Row, store, METH_O),
        DECLARE_METHOD(t_Row, uniformCmd, METH_O),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(Row, t_Row, ::java::lang::Object, Row, t_Row_init_, 0, 0, t_Row__fields_, 0, 0);

      void t_Row::install(PyObject *module)
      {
        installType(&PY_TYPE(Row), module, "Row", 0);
      }

      void t_Row::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(Row).tp_dict, "class_", make_descriptor(Row::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(Row).tp_dict, "wrapfn_", make_descriptor(t_Row::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(Row).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Row_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Row::initializeClass, 1)))
          return NULL;
        return t_Row::wrap_Object(Row(((t_Row *) arg)->object.this$));
      }
      static PyObject *t_Row_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Row::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_Row_init_(t_Row *self, PyObject *args, PyObject *kwds)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 0:
          {
            Row object((jobject) NULL);

            INT_CALL(object = Row());
            self->object = object;
            break;
          }
          goto err;
         case 1:
          {
            ::java::io::DataInput a0((jobject) NULL);
            Row object((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::DataInput::initializeClass, &a0))
            {
              INT_CALL(object = Row(a0));
              self->object = object;
              break;
            }
          }
         default:
         err:
          PyErr_SetArgsError((PyObject *) self, "__init__", args);
          return -1;
        }

        return 0;
      }

      static PyObject *t_Row_getCells(t_Row *self)
      {
        jint result;
        OBJ_CALL(result = self->object.getCells());
        return PyInt_FromLong((long) result);
      }

      static PyObject *t_Row_getCellsPnt(t_Row *self)
      {
        jint result;
        OBJ_CALL(result = self->object.getCellsPnt());
        return PyInt_FromLong((long) result);
      }

      static PyObject *t_Row_getCellsVal(t_Row *self)
      {
        jint result;
        OBJ_CALL(result = self->object.getCellsVal());
        return PyInt_FromLong((long) result);
      }

      static PyObject *t_Row_getCmd(t_Row *self, PyObject *arg)
      {
        ::java::lang::Character a0((jobject) NULL);
        jint result;

        if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Character), &a0))
        {
          OBJ_CALL(result = self->object.getCmd(a0));
          return PyInt_FromLong((long) result);
        }

        PyErr_SetArgsError((PyObject *) self, "getCmd", arg);
        return NULL;
      }

      static PyObject *t_Row_getCnt(t_Row *self, PyObject *arg)
      {
        ::java::lang::Character a0((jobject) NULL);
        jint result;

        if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Character), &a0))
        {
          OBJ_CALL(result = self->object.getCnt(a0));
          return PyInt_FromLong((long) result);
        }

        PyErr_SetArgsError((PyObject *) self, "getCnt", arg);
        return NULL;
      }

      static PyObject *t_Row_getRef(t_Row *self, PyObject *arg)
      {
        ::java::lang::Character a0((jobject) NULL);
        jint result;

        if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Character), &a0))
        {
          OBJ_CALL(result = self->object.getRef(a0));
          return PyInt_FromLong((long) result);
        }

        PyErr_SetArgsError((PyObject *) self, "getRef", arg);
        return NULL;
      }

      static PyObject *t_Row_print(t_Row *self, PyObject *arg)
      {
        ::java::io::PrintStream a0((jobject) NULL);

        if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &a0))
        {
          OBJ_CALL(self->object.print(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "print", arg);
        return NULL;
      }

      static PyObject *t_Row_setCmd(t_Row *self, PyObject *args)
      {
        ::java::lang::Character a0((jobject) NULL);
        jint a1;

        if (!parseArgs(args, "OI", &::java::lang::PY_TYPE(Character), &a0, &a1))
        {
          OBJ_CALL(self->object.setCmd(a0, a1));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "setCmd", args);
        return NULL;
      }

      static PyObject *t_Row_setRef(t_Row *self, PyObject *args)
      {
        ::java::lang::Character a0((jobject) NULL);
        jint a1;

        if (!parseArgs(args, "OI", &::java::lang::PY_TYPE(Character), &a0, &a1))
        {
          OBJ_CALL(self->object.setRef(a0, a1));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "setRef", args);
        return NULL;
      }

      static PyObject *t_Row_store(t_Row *self, PyObject *arg)
      {
        ::java::io::DataOutput a0((jobject) NULL);

        if (!parseArg(arg, "k", ::java::io::DataOutput::initializeClass, &a0))
        {
          OBJ_CALL(self->object.store(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "store", arg);
        return NULL;
      }

      static PyObject *t_Row_uniformCmd(t_Row *self, PyObject *arg)
      {
        jboolean a0;
        jint result;

        if (!parseArg(arg, "Z", &a0))
        {
          OBJ_CALL(result = self->object.uniformCmd(a0));
          return PyInt_FromLong((long) result);
        }

        PyErr_SetArgsError((PyObject *) self, "uniformCmd", arg);
        return NULL;
      }

      static PyObject *t_Row_get__cells(t_Row *self, void *data)
      {
        jint value;
        OBJ_CALL(value = self->object.getCells());
        return PyInt_FromLong((long) value);
      }

      static PyObject *t_Row_get__cellsPnt(t_Row *self, void *data)
      {
        jint value;
        OBJ_CALL(value = self->object.getCellsPnt());
        return PyInt_FromLong((long) value);
      }

      static PyObject *t_Row_get__cellsVal(t_Row *self, void *data)
      {
        jint value;
        OBJ_CALL(value = self->object.getCellsVal());
        return PyInt_FromLong((long) value);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilter.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *TypeAsPayloadTokenFilterFactory::class$ = NULL;
          jmethodID *TypeAsPayloadTokenFilterFactory::mids$ = NULL;
          bool TypeAsPayloadTokenFilterFactory::live$ = false;

          jclass TypeAsPayloadTokenFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_9819dee1] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TypeAsPayloadTokenFilterFactory::TypeAsPayloadTokenFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::payloads::TypeAsPayloadTokenFilter TypeAsPayloadTokenFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::payloads::TypeAsPayloadTokenFilter(env->callObjectMethod(this$, mids$[mid_create_9819dee1], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_TypeAsPayloadTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TypeAsPayloadTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TypeAsPayloadTokenFilterFactory_init_(t_TypeAsPayloadTokenFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TypeAsPayloadTokenFilterFactory_create(t_TypeAsPayloadTokenFilterFactory *self, PyObject *args);

          static PyMethodDef t_TypeAsPayloadTokenFilterFactory__methods_[] = {
            DECLARE_METHOD(t_TypeAsPayloadTokenFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeAsPayloadTokenFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeAsPayloadTokenFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TypeAsPayloadTokenFilterFactory, t_TypeAsPayloadTokenFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, TypeAsPayloadTokenFilterFactory, t_TypeAsPayloadTokenFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_TypeAsPayloadTokenFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(TypeAsPayloadTokenFilterFactory), module, "TypeAsPayloadTokenFilterFactory", 0);
          }

          void t_TypeAsPayloadTokenFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TypeAsPayloadTokenFilterFactory).tp_dict, "class_", make_descriptor(TypeAsPayloadTokenFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TypeAsPayloadTokenFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_TypeAsPayloadTokenFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TypeAsPayloadTokenFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TypeAsPayloadTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TypeAsPayloadTokenFilterFactory::initializeClass, 1)))
              return NULL;
            return t_TypeAsPayloadTokenFilterFactory::wrap_Object(TypeAsPayloadTokenFilterFactory(((t_TypeAsPayloadTokenFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_TypeAsPayloadTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TypeAsPayloadTokenFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TypeAsPayloadTokenFilterFactory_init_(t_TypeAsPayloadTokenFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            TypeAsPayloadTokenFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = TypeAsPayloadTokenFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TypeAsPayloadTokenFilterFactory_create(t_TypeAsPayloadTokenFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::payloads::TypeAsPayloadTokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::payloads::t_TypeAsPayloadTokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(TypeAsPayloadTokenFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/antlr/runtime/ParserRuleReturnScope.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace antlr {
    namespace runtime {

      ::java::lang::Class *ParserRuleReturnScope::class$ = NULL;
      jmethodID *ParserRuleReturnScope::mids$ = NULL;
      bool ParserRuleReturnScope::live$ = false;

      jclass ParserRuleReturnScope::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/antlr/runtime/ParserRuleReturnScope");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
          mids$[mid_getStart_846352c3] = env->getMethodID(cls, "getStart", "()Ljava/lang/Object;");
          mids$[mid_getStop_846352c3] = env->getMethodID(cls, "getStop", "()Ljava/lang/Object;");
          mids$[mid_getTree_846352c3] = env->getMethodID(cls, "getTree", "()Ljava/lang/Object;");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      ParserRuleReturnScope::ParserRuleReturnScope() : ::org::antlr::runtime::RuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

      ::java::lang::Object ParserRuleReturnScope::getStart() const
      {
        return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getStart_846352c3]));
      }

      ::java::lang::Object ParserRuleReturnScope::getStop() const
      {
        return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getStop_846352c3]));
      }

      ::java::lang::Object ParserRuleReturnScope::getTree() const
      {
        return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getTree_846352c3]));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace antlr {
    namespace runtime {
      static PyObject *t_ParserRuleReturnScope_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_ParserRuleReturnScope_instance_(PyTypeObject *type, PyObject *arg);
      static int t_ParserRuleReturnScope_init_(t_ParserRuleReturnScope *self, PyObject *args, PyObject *kwds);
      static PyObject *t_ParserRuleReturnScope_getStart(t_ParserRuleReturnScope *self, PyObject *args);
      static PyObject *t_ParserRuleReturnScope_getStop(t_ParserRuleReturnScope *self, PyObject *args);
      static PyObject *t_ParserRuleReturnScope_getTree(t_ParserRuleReturnScope *self, PyObject *args);
      static PyObject *t_ParserRuleReturnScope_get__start(t_ParserRuleReturnScope *self, void *data);
      static PyObject *t_ParserRuleReturnScope_get__stop(t_ParserRuleReturnScope *self, void *data);
      static PyObject *t_ParserRuleReturnScope_get__tree(t_ParserRuleReturnScope *self, void *data);
      static PyGetSetDef t_ParserRuleReturnScope__fields_[] = {
        DECLARE_GET_FIELD(t_ParserRuleReturnScope, start),
        DECLARE_GET_FIELD(t_ParserRuleReturnScope, stop),
        DECLARE_GET_FIELD(t_ParserRuleReturnScope, tree),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_ParserRuleReturnScope__methods_[] = {
        DECLARE_METHOD(t_ParserRuleReturnScope, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_ParserRuleReturnScope, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_ParserRuleReturnScope, getStart, METH_VARARGS),
        DECLARE_METHOD(t_ParserRuleReturnScope, getStop, METH_VARARGS),
        DECLARE_METHOD(t_ParserRuleReturnScope, getTree, METH_VARARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(ParserRuleReturnScope, t_ParserRuleReturnScope, ::org::antlr::runtime::RuleReturnScope, ParserRuleReturnScope, t_ParserRuleReturnScope_init_, 0, 0, t_ParserRuleReturnScope__fields_, 0, 0);

      void t_ParserRuleReturnScope::install(PyObject *module)
      {
        installType(&PY_TYPE(ParserRuleReturnScope), module, "ParserRuleReturnScope", 0);
      }

      void t_ParserRuleReturnScope::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(ParserRuleReturnScope).tp_dict, "class_", make_descriptor(ParserRuleReturnScope::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(ParserRuleReturnScope).tp_dict, "wrapfn_", make_descriptor(t_ParserRuleReturnScope::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(ParserRuleReturnScope).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_ParserRuleReturnScope_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, ParserRuleReturnScope::initializeClass, 1)))
          return NULL;
        return t_ParserRuleReturnScope::wrap_Object(ParserRuleReturnScope(((t_ParserRuleReturnScope *) arg)->object.this$));
      }
      static PyObject *t_ParserRuleReturnScope_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, ParserRuleReturnScope::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_ParserRuleReturnScope_init_(t_ParserRuleReturnScope *self, PyObject *args, PyObject *kwds)
      {
        ParserRuleReturnScope object((jobject) NULL);

        INT_CALL(object = ParserRuleReturnScope());
        self->object = object;

        return 0;
      }

      static PyObject *t_ParserRuleReturnScope_getStart(t_ParserRuleReturnScope *self, PyObject *args)
      {
        ::java::lang::Object result((jobject) NULL);

        if (!parseArgs(args, ""))
        {
          OBJ_CALL(result = self->object.getStart());
          return ::java::lang::t_Object::wrap_Object(result);
        }

        return callSuper(&PY_TYPE(ParserRuleReturnScope), (PyObject *) self, "getStart", args, 2);
      }

      static PyObject *t_ParserRuleReturnScope_getStop(t_ParserRuleReturnScope *self, PyObject *args)
      {
        ::java::lang::Object result((jobject) NULL);

        if (!parseArgs(args, ""))
        {
          OBJ_CALL(result = self->object.getStop());
          return ::java::lang::t_Object::wrap_Object(result);
        }

        return callSuper(&PY_TYPE(ParserRuleReturnScope), (PyObject *) self, "getStop", args, 2);
      }

      static PyObject *t_ParserRuleReturnScope_getTree(t_ParserRuleReturnScope *self, PyObject *args)
      {
        ::java::lang::Object result((jobject) NULL);

        if (!parseArgs(args, ""))
        {
          OBJ_CALL(result = self->object.getTree());
          return ::java::lang::t_Object::wrap_Object(result);
        }

        return callSuper(&PY_TYPE(ParserRuleReturnScope), (PyObject *) self, "getTree", args, 2);
      }

      static PyObject *t_ParserRuleReturnScope_get__start(t_ParserRuleReturnScope *self, void *data)
      {
        ::java::lang::Object value((jobject) NULL);
        OBJ_CALL(value = self->object.getStart());
        return ::java::lang::t_Object::wrap_Object(value);
      }

      static PyObject *t_ParserRuleReturnScope_get__stop(t_ParserRuleReturnScope *self, void *data)
      {
        ::java::lang::Object value((jobject) NULL);
        OBJ_CALL(value = self->object.getStop());
        return ::java::lang::t_Object::wrap_Object(value);
      }

      static PyObject *t_ParserRuleReturnScope_get__tree(t_ParserRuleReturnScope *self, void *data)
      {
        ::java::lang::Object value((jobject) NULL);
        OBJ_CALL(value = self->object.getTree());
        return ::java::lang::t_Object::wrap_Object(value);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/LRUHashMap.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *LRUHashMap::class$ = NULL;
          jmethodID *LRUHashMap::mids$ = NULL;
          bool LRUHashMap::live$ = false;

          jclass LRUHashMap::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/LRUHashMap");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_clone_544babe9] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/facet/taxonomy/LRUHashMap;");
              mids$[mid_getMaxSize_54c6a179] = env->getMethodID(cls, "getMaxSize", "()I");
              mids$[mid_setMaxSize_39c7bd3c] = env->getMethodID(cls, "setMaxSize", "(I)V");
              mids$[mid_removeEldestEntry_8e61453a] = env->getMethodID(cls, "removeEldestEntry", "(Ljava/util/Map$Entry;)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LRUHashMap::LRUHashMap(jint a0) : ::java::util::LinkedHashMap(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          LRUHashMap LRUHashMap::clone() const
          {
            return LRUHashMap(env->callObjectMethod(this$, mids$[mid_clone_544babe9]));
          }

          jint LRUHashMap::getMaxSize() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxSize_54c6a179]);
          }

          void LRUHashMap::setMaxSize(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxSize_39c7bd3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_LRUHashMap_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LRUHashMap_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LRUHashMap_of_(t_LRUHashMap *self, PyObject *args);
          static int t_LRUHashMap_init_(t_LRUHashMap *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LRUHashMap_clone(t_LRUHashMap *self, PyObject *args);
          static PyObject *t_LRUHashMap_getMaxSize(t_LRUHashMap *self);
          static PyObject *t_LRUHashMap_setMaxSize(t_LRUHashMap *self, PyObject *arg);
          static PyObject *t_LRUHashMap_get__maxSize(t_LRUHashMap *self, void *data);
          static int t_LRUHashMap_set__maxSize(t_LRUHashMap *self, PyObject *arg, void *data);
          static PyObject *t_LRUHashMap_get__parameters_(t_LRUHashMap *self, void *data);
          static PyGetSetDef t_LRUHashMap__fields_[] = {
            DECLARE_GETSET_FIELD(t_LRUHashMap, maxSize),
            DECLARE_GET_FIELD(t_LRUHashMap, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LRUHashMap__methods_[] = {
            DECLARE_METHOD(t_LRUHashMap, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LRUHashMap, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LRUHashMap, of_, METH_VARARGS),
            DECLARE_METHOD(t_LRUHashMap, clone, METH_VARARGS),
            DECLARE_METHOD(t_LRUHashMap, getMaxSize, METH_NOARGS),
            DECLARE_METHOD(t_LRUHashMap, setMaxSize, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LRUHashMap, t_LRUHashMap, ::java::util::LinkedHashMap, LRUHashMap, t_LRUHashMap_init_, 0, 0, t_LRUHashMap__fields_, 0, 0);
          PyObject *t_LRUHashMap::wrap_Object(const LRUHashMap& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_LRUHashMap::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_LRUHashMap *self = (t_LRUHashMap *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          PyObject *t_LRUHashMap::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_LRUHashMap::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_LRUHashMap *self = (t_LRUHashMap *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          void t_LRUHashMap::install(PyObject *module)
          {
            installType(&PY_TYPE(LRUHashMap), module, "LRUHashMap", 0);
          }

          void t_LRUHashMap::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LRUHashMap).tp_dict, "class_", make_descriptor(LRUHashMap::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LRUHashMap).tp_dict, "wrapfn_", make_descriptor(t_LRUHashMap::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LRUHashMap).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LRUHashMap_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LRUHashMap::initializeClass, 1)))
              return NULL;
            return t_LRUHashMap::wrap_Object(LRUHashMap(((t_LRUHashMap *) arg)->object.this$));
          }
          static PyObject *t_LRUHashMap_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LRUHashMap::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_LRUHashMap_of_(t_LRUHashMap *self, PyObject *args)
          {
            if (!parseArg(args, "T", 2, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_LRUHashMap_init_(t_LRUHashMap *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            LRUHashMap object((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              INT_CALL(object = LRUHashMap(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LRUHashMap_clone(t_LRUHashMap *self, PyObject *args)
          {
            LRUHashMap result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_LRUHashMap::wrap_Object(result, self->parameters[0], self->parameters[1]);
            }

            return callSuper(&PY_TYPE(LRUHashMap), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_LRUHashMap_getMaxSize(t_LRUHashMap *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxSize());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_LRUHashMap_setMaxSize(t_LRUHashMap *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxSize(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxSize", arg);
            return NULL;
          }
          static PyObject *t_LRUHashMap_get__parameters_(t_LRUHashMap *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_LRUHashMap_get__maxSize(t_LRUHashMap *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxSize());
            return PyInt_FromLong((long) value);
          }
          static int t_LRUHashMap_set__maxSize(t_LRUHashMap *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxSize(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxSize", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Number.h"
#include "java/lang/Class.h"
#include "java/io/Serializable.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Number::class$ = NULL;
    jmethodID *Number::mids$ = NULL;
    bool Number::live$ = false;

    jclass Number::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Number");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_byteValue_54c6a172] = env->getMethodID(cls, "byteValue", "()B");
        mids$[mid_doubleValue_54c6a174] = env->getMethodID(cls, "doubleValue", "()D");
        mids$[mid_floatValue_54c6a176] = env->getMethodID(cls, "floatValue", "()F");
        mids$[mid_intValue_54c6a179] = env->getMethodID(cls, "intValue", "()I");
        mids$[mid_longValue_54c6a17a] = env->getMethodID(cls, "longValue", "()J");
        mids$[mid_shortValue_54c6a163] = env->getMethodID(cls, "shortValue", "()S");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Number::Number() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    jbyte Number::byteValue() const
    {
      return env->callByteMethod(this$, mids$[mid_byteValue_54c6a172]);
    }

    jdouble Number::doubleValue() const
    {
      return env->callDoubleMethod(this$, mids$[mid_doubleValue_54c6a174]);
    }

    jfloat Number::floatValue() const
    {
      return env->callFloatMethod(this$, mids$[mid_floatValue_54c6a176]);
    }

    jint Number::intValue() const
    {
      return env->callIntMethod(this$, mids$[mid_intValue_54c6a179]);
    }

    jlong Number::longValue() const
    {
      return env->callLongMethod(this$, mids$[mid_longValue_54c6a17a]);
    }

    jshort Number::shortValue() const
    {
      return env->callShortMethod(this$, mids$[mid_shortValue_54c6a163]);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Number_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Number_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Number_init_(t_Number *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Number_byteValue(t_Number *self);
    static PyObject *t_Number_doubleValue(t_Number *self);
    static PyObject *t_Number_floatValue(t_Number *self);
    static PyObject *t_Number_intValue(t_Number *self);
    static PyObject *t_Number_longValue(t_Number *self);
    static PyObject *t_Number_shortValue(t_Number *self);

    static PyMethodDef t_Number__methods_[] = {
      DECLARE_METHOD(t_Number, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Number, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Number, byteValue, METH_NOARGS),
      DECLARE_METHOD(t_Number, doubleValue, METH_NOARGS),
      DECLARE_METHOD(t_Number, floatValue, METH_NOARGS),
      DECLARE_METHOD(t_Number, intValue, METH_NOARGS),
      DECLARE_METHOD(t_Number, longValue, METH_NOARGS),
      DECLARE_METHOD(t_Number, shortValue, METH_NOARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Number, t_Number, ::java::lang::Object, Number, t_Number_init_, 0, 0, 0, 0, 0);

    void t_Number::install(PyObject *module)
    {
      installType(&PY_TYPE(Number), module, "Number", 0);
    }

    void t_Number::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Number).tp_dict, "class_", make_descriptor(Number::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Number).tp_dict, "wrapfn_", make_descriptor(t_Number::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Number).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Number_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Number::initializeClass, 1)))
        return NULL;
      return t_Number::wrap_Object(Number(((t_Number *) arg)->object.this$));
    }
    static PyObject *t_Number_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Number::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Number_init_(t_Number *self, PyObject *args, PyObject *kwds)
    {
      Number object((jobject) NULL);

      INT_CALL(object = Number());
      self->object = object;

      return 0;
    }

    static PyObject *t_Number_byteValue(t_Number *self)
    {
      jbyte result;
      OBJ_CALL(result = self->object.byteValue());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_Number_doubleValue(t_Number *self)
    {
      jdouble result;
      OBJ_CALL(result = self->object.doubleValue());
      return PyFloat_FromDouble((double) result);
    }

    static PyObject *t_Number_floatValue(t_Number *self)
    {
      jfloat result;
      OBJ_CALL(result = self->object.floatValue());
      return PyFloat_FromDouble((double) result);
    }

    static PyObject *t_Number_intValue(t_Number *self)
    {
      jint result;
      OBJ_CALL(result = self->object.intValue());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_Number_longValue(t_Number *self)
    {
      jlong result;
      OBJ_CALL(result = self->object.longValue());
      return PyLong_FromLongLong((PY_LONG_LONG) result);
    }

    static PyObject *t_Number_shortValue(t_Number *self)
    {
      jshort result;
      OBJ_CALL(result = self->object.shortValue());
      return PyInt_FromLong((long) result);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FilteredQuery$RandomAccessFilterStrategy.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/Weight.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FilteredQuery$RandomAccessFilterStrategy::class$ = NULL;
        jmethodID *FilteredQuery$RandomAccessFilterStrategy::mids$ = NULL;
        bool FilteredQuery$RandomAccessFilterStrategy::live$ = false;

        jclass FilteredQuery$RandomAccessFilterStrategy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FilteredQuery$RandomAccessFilterStrategy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_filteredScorer_05f41f97] = env->getMethodID(cls, "filteredScorer", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/search/Weight;Lorg/apache/lucene/search/DocIdSet;)Lorg/apache/lucene/search/Scorer;");
            mids$[mid_useRandomAccess_7abf89aa] = env->getMethodID(cls, "useRandomAccess", "(Lorg/apache/lucene/util/Bits;I)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilteredQuery$RandomAccessFilterStrategy::FilteredQuery$RandomAccessFilterStrategy() : ::org::apache::lucene::search::FilteredQuery$FilterStrategy(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::search::Scorer FilteredQuery$RandomAccessFilterStrategy::filteredScorer(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::search::Weight & a1, const ::org::apache::lucene::search::DocIdSet & a2) const
        {
          return ::org::apache::lucene::search::Scorer(env->callObjectMethod(this$, mids$[mid_filteredScorer_05f41f97], a0.this$, a1.this$, a2.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FilteredQuery$RandomAccessFilterStrategy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilteredQuery$RandomAccessFilterStrategy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilteredQuery$RandomAccessFilterStrategy_init_(t_FilteredQuery$RandomAccessFilterStrategy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilteredQuery$RandomAccessFilterStrategy_filteredScorer(t_FilteredQuery$RandomAccessFilterStrategy *self, PyObject *args);

        static PyMethodDef t_FilteredQuery$RandomAccessFilterStrategy__methods_[] = {
          DECLARE_METHOD(t_FilteredQuery$RandomAccessFilterStrategy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilteredQuery$RandomAccessFilterStrategy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilteredQuery$RandomAccessFilterStrategy, filteredScorer, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilteredQuery$RandomAccessFilterStrategy, t_FilteredQuery$RandomAccessFilterStrategy, ::org::apache::lucene::search::FilteredQuery$FilterStrategy, FilteredQuery$RandomAccessFilterStrategy, t_FilteredQuery$RandomAccessFilterStrategy_init_, 0, 0, 0, 0, 0);

        void t_FilteredQuery$RandomAccessFilterStrategy::install(PyObject *module)
        {
          installType(&PY_TYPE(FilteredQuery$RandomAccessFilterStrategy), module, "FilteredQuery$RandomAccessFilterStrategy", 0);
        }

        void t_FilteredQuery$RandomAccessFilterStrategy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilteredQuery$RandomAccessFilterStrategy).tp_dict, "class_", make_descriptor(FilteredQuery$RandomAccessFilterStrategy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilteredQuery$RandomAccessFilterStrategy).tp_dict, "wrapfn_", make_descriptor(t_FilteredQuery$RandomAccessFilterStrategy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilteredQuery$RandomAccessFilterStrategy).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilteredQuery$RandomAccessFilterStrategy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilteredQuery$RandomAccessFilterStrategy::initializeClass, 1)))
            return NULL;
          return t_FilteredQuery$RandomAccessFilterStrategy::wrap_Object(FilteredQuery$RandomAccessFilterStrategy(((t_FilteredQuery$RandomAccessFilterStrategy *) arg)->object.this$));
        }
        static PyObject *t_FilteredQuery$RandomAccessFilterStrategy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilteredQuery$RandomAccessFilterStrategy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilteredQuery$RandomAccessFilterStrategy_init_(t_FilteredQuery$RandomAccessFilterStrategy *self, PyObject *args, PyObject *kwds)
        {
          FilteredQuery$RandomAccessFilterStrategy object((jobject) NULL);

          INT_CALL(object = FilteredQuery$RandomAccessFilterStrategy());
          self->object = object;

          return 0;
        }

        static PyObject *t_FilteredQuery$RandomAccessFilterStrategy_filteredScorer(t_FilteredQuery$RandomAccessFilterStrategy *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::Weight a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet a2((jobject) NULL);
          ::org::apache::lucene::search::Scorer result((jobject) NULL);

          if (!parseArgs(args, "kkk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::search::Weight::initializeClass, ::org::apache::lucene::search::DocIdSet::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.filteredScorer(a0, a1, a2));
            return ::org::apache::lucene::search::t_Scorer::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilteredQuery$RandomAccessFilterStrategy), (PyObject *) self, "filteredScorer", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TimeLimitingCollector$TimeExceededException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TimeLimitingCollector$TimeExceededException::class$ = NULL;
        jmethodID *TimeLimitingCollector$TimeExceededException::mids$ = NULL;
        bool TimeLimitingCollector$TimeExceededException::live$ = false;

        jclass TimeLimitingCollector$TimeExceededException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TimeLimitingCollector$TimeExceededException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getLastDocCollected_54c6a179] = env->getMethodID(cls, "getLastDocCollected", "()I");
            mids$[mid_getTimeAllowed_54c6a17a] = env->getMethodID(cls, "getTimeAllowed", "()J");
            mids$[mid_getTimeElapsed_54c6a17a] = env->getMethodID(cls, "getTimeElapsed", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint TimeLimitingCollector$TimeExceededException::getLastDocCollected() const
        {
          return env->callIntMethod(this$, mids$[mid_getLastDocCollected_54c6a179]);
        }

        jlong TimeLimitingCollector$TimeExceededException::getTimeAllowed() const
        {
          return env->callLongMethod(this$, mids$[mid_getTimeAllowed_54c6a17a]);
        }

        jlong TimeLimitingCollector$TimeExceededException::getTimeElapsed() const
        {
          return env->callLongMethod(this$, mids$[mid_getTimeElapsed_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TimeLimitingCollector$TimeExceededException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TimeLimitingCollector$TimeExceededException_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TimeLimitingCollector$TimeExceededException_getLastDocCollected(t_TimeLimitingCollector$TimeExceededException *self);
        static PyObject *t_TimeLimitingCollector$TimeExceededException_getTimeAllowed(t_TimeLimitingCollector$TimeExceededException *self);
        static PyObject *t_TimeLimitingCollector$TimeExceededException_getTimeElapsed(t_TimeLimitingCollector$TimeExceededException *self);
        static PyObject *t_TimeLimitingCollector$TimeExceededException_get__lastDocCollected(t_TimeLimitingCollector$TimeExceededException *self, void *data);
        static PyObject *t_TimeLimitingCollector$TimeExceededException_get__timeAllowed(t_TimeLimitingCollector$TimeExceededException *self, void *data);
        static PyObject *t_TimeLimitingCollector$TimeExceededException_get__timeElapsed(t_TimeLimitingCollector$TimeExceededException *self, void *data);
        static PyGetSetDef t_TimeLimitingCollector$TimeExceededException__fields_[] = {
          DECLARE_GET_FIELD(t_TimeLimitingCollector$TimeExceededException, lastDocCollected),
          DECLARE_GET_FIELD(t_TimeLimitingCollector$TimeExceededException, timeAllowed),
          DECLARE_GET_FIELD(t_TimeLimitingCollector$TimeExceededException, timeElapsed),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TimeLimitingCollector$TimeExceededException__methods_[] = {
          DECLARE_METHOD(t_TimeLimitingCollector$TimeExceededException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TimeLimitingCollector$TimeExceededException, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TimeLimitingCollector$TimeExceededException, getLastDocCollected, METH_NOARGS),
          DECLARE_METHOD(t_TimeLimitingCollector$TimeExceededException, getTimeAllowed, METH_NOARGS),
          DECLARE_METHOD(t_TimeLimitingCollector$TimeExceededException, getTimeElapsed, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TimeLimitingCollector$TimeExceededException, t_TimeLimitingCollector$TimeExceededException, ::java::lang::RuntimeException, TimeLimitingCollector$TimeExceededException, abstract_init, 0, 0, t_TimeLimitingCollector$TimeExceededException__fields_, 0, 0);

        void t_TimeLimitingCollector$TimeExceededException::install(PyObject *module)
        {
          installType(&PY_TYPE(TimeLimitingCollector$TimeExceededException), module, "TimeLimitingCollector$TimeExceededException", 0);
        }

        void t_TimeLimitingCollector$TimeExceededException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TimeLimitingCollector$TimeExceededException).tp_dict, "class_", make_descriptor(TimeLimitingCollector$TimeExceededException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TimeLimitingCollector$TimeExceededException).tp_dict, "wrapfn_", make_descriptor(t_TimeLimitingCollector$TimeExceededException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TimeLimitingCollector$TimeExceededException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TimeLimitingCollector$TimeExceededException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TimeLimitingCollector$TimeExceededException::initializeClass, 1)))
            return NULL;
          return t_TimeLimitingCollector$TimeExceededException::wrap_Object(TimeLimitingCollector$TimeExceededException(((t_TimeLimitingCollector$TimeExceededException *) arg)->object.this$));
        }
        static PyObject *t_TimeLimitingCollector$TimeExceededException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TimeLimitingCollector$TimeExceededException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TimeLimitingCollector$TimeExceededException_getLastDocCollected(t_TimeLimitingCollector$TimeExceededException *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getLastDocCollected());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_TimeLimitingCollector$TimeExceededException_getTimeAllowed(t_TimeLimitingCollector$TimeExceededException *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getTimeAllowed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_TimeLimitingCollector$TimeExceededException_getTimeElapsed(t_TimeLimitingCollector$TimeExceededException *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getTimeElapsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_TimeLimitingCollector$TimeExceededException_get__lastDocCollected(t_TimeLimitingCollector$TimeExceededException *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getLastDocCollected());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_TimeLimitingCollector$TimeExceededException_get__timeAllowed(t_TimeLimitingCollector$TimeExceededException *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getTimeAllowed());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_TimeLimitingCollector$TimeExceededException_get__timeElapsed(t_TimeLimitingCollector$TimeExceededException *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getTimeElapsed());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/precedence/PrecedenceQueryParser.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace precedence {

            ::java::lang::Class *PrecedenceQueryParser::class$ = NULL;
            jmethodID *PrecedenceQueryParser::mids$ = NULL;
            bool PrecedenceQueryParser::live$ = false;

            jclass PrecedenceQueryParser::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/precedence/PrecedenceQueryParser");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_31619410] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            PrecedenceQueryParser::PrecedenceQueryParser() : ::org::apache::lucene::queryparser::flexible::standard::StandardQueryParser(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            PrecedenceQueryParser::PrecedenceQueryParser(const ::org::apache::lucene::analysis::Analyzer & a0) : ::org::apache::lucene::queryparser::flexible::standard::StandardQueryParser(env->newObject(initializeClass, &mids$, mid_init$_31619410, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace precedence {
            static PyObject *t_PrecedenceQueryParser_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_PrecedenceQueryParser_instance_(PyTypeObject *type, PyObject *arg);
            static int t_PrecedenceQueryParser_init_(t_PrecedenceQueryParser *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_PrecedenceQueryParser__methods_[] = {
              DECLARE_METHOD(t_PrecedenceQueryParser, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_PrecedenceQueryParser, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(PrecedenceQueryParser, t_PrecedenceQueryParser, ::org::apache::lucene::queryparser::flexible::standard::StandardQueryParser, PrecedenceQueryParser, t_PrecedenceQueryParser_init_, 0, 0, 0, 0, 0);

            void t_PrecedenceQueryParser::install(PyObject *module)
            {
              installType(&PY_TYPE(PrecedenceQueryParser), module, "PrecedenceQueryParser", 0);
            }

            void t_PrecedenceQueryParser::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(PrecedenceQueryParser).tp_dict, "class_", make_descriptor(PrecedenceQueryParser::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(PrecedenceQueryParser).tp_dict, "wrapfn_", make_descriptor(t_PrecedenceQueryParser::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(PrecedenceQueryParser).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_PrecedenceQueryParser_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, PrecedenceQueryParser::initializeClass, 1)))
                return NULL;
              return t_PrecedenceQueryParser::wrap_Object(PrecedenceQueryParser(((t_PrecedenceQueryParser *) arg)->object.this$));
            }
            static PyObject *t_PrecedenceQueryParser_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, PrecedenceQueryParser::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_PrecedenceQueryParser_init_(t_PrecedenceQueryParser *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  PrecedenceQueryParser object((jobject) NULL);

                  INT_CALL(object = PrecedenceQueryParser());
                  self->object = object;
                  break;
                }
                goto err;
               case 1:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  PrecedenceQueryParser object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
                  {
                    INT_CALL(object = PrecedenceQueryParser(a0));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MaxNonCompetitiveBoostAttributeImpl.h"
#include "org/apache/lucene/search/MaxNonCompetitiveBoostAttribute.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MaxNonCompetitiveBoostAttributeImpl::class$ = NULL;
        jmethodID *MaxNonCompetitiveBoostAttributeImpl::mids$ = NULL;
        bool MaxNonCompetitiveBoostAttributeImpl::live$ = false;

        jclass MaxNonCompetitiveBoostAttributeImpl::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MaxNonCompetitiveBoostAttributeImpl");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
            mids$[mid_getCompetitiveTerm_4ae19461] = env->getMethodID(cls, "getCompetitiveTerm", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getMaxNonCompetitiveBoost_54c6a176] = env->getMethodID(cls, "getMaxNonCompetitiveBoost", "()F");
            mids$[mid_setCompetitiveTerm_7bc03dc4] = env->getMethodID(cls, "setCompetitiveTerm", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_setMaxNonCompetitiveBoost_06298cab] = env->getMethodID(cls, "setMaxNonCompetitiveBoost", "(F)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MaxNonCompetitiveBoostAttributeImpl::MaxNonCompetitiveBoostAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void MaxNonCompetitiveBoostAttributeImpl::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        void MaxNonCompetitiveBoostAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
        }

        ::org::apache::lucene::util::BytesRef MaxNonCompetitiveBoostAttributeImpl::getCompetitiveTerm() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getCompetitiveTerm_4ae19461]));
        }

        jfloat MaxNonCompetitiveBoostAttributeImpl::getMaxNonCompetitiveBoost() const
        {
          return env->callFloatMethod(this$, mids$[mid_getMaxNonCompetitiveBoost_54c6a176]);
        }

        void MaxNonCompetitiveBoostAttributeImpl::setCompetitiveTerm(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setCompetitiveTerm_7bc03dc4], a0.this$);
        }

        void MaxNonCompetitiveBoostAttributeImpl::setMaxNonCompetitiveBoost(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMaxNonCompetitiveBoost_06298cab], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MaxNonCompetitiveBoostAttributeImpl_init_(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_clear(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *args);
        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_copyTo(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *args);
        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_getCompetitiveTerm(t_MaxNonCompetitiveBoostAttributeImpl *self);
        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_getMaxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttributeImpl *self);
        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_setCompetitiveTerm(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *arg);
        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_setMaxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *arg);
        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_get__competitiveTerm(t_MaxNonCompetitiveBoostAttributeImpl *self, void *data);
        static int t_MaxNonCompetitiveBoostAttributeImpl_set__competitiveTerm(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *arg, void *data);
        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_get__maxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttributeImpl *self, void *data);
        static int t_MaxNonCompetitiveBoostAttributeImpl_set__maxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *arg, void *data);
        static PyGetSetDef t_MaxNonCompetitiveBoostAttributeImpl__fields_[] = {
          DECLARE_GETSET_FIELD(t_MaxNonCompetitiveBoostAttributeImpl, competitiveTerm),
          DECLARE_GETSET_FIELD(t_MaxNonCompetitiveBoostAttributeImpl, maxNonCompetitiveBoost),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MaxNonCompetitiveBoostAttributeImpl__methods_[] = {
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttributeImpl, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttributeImpl, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttributeImpl, clear, METH_VARARGS),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttributeImpl, copyTo, METH_VARARGS),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttributeImpl, getCompetitiveTerm, METH_NOARGS),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttributeImpl, getMaxNonCompetitiveBoost, METH_NOARGS),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttributeImpl, setCompetitiveTerm, METH_O),
          DECLARE_METHOD(t_MaxNonCompetitiveBoostAttributeImpl, setMaxNonCompetitiveBoost, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MaxNonCompetitiveBoostAttributeImpl, t_MaxNonCompetitiveBoostAttributeImpl, ::org::apache::lucene::util::AttributeImpl, MaxNonCompetitiveBoostAttributeImpl, t_MaxNonCompetitiveBoostAttributeImpl_init_, 0, 0, t_MaxNonCompetitiveBoostAttributeImpl__fields_, 0, 0);

        void t_MaxNonCompetitiveBoostAttributeImpl::install(PyObject *module)
        {
          installType(&PY_TYPE(MaxNonCompetitiveBoostAttributeImpl), module, "MaxNonCompetitiveBoostAttributeImpl", 0);
        }

        void t_MaxNonCompetitiveBoostAttributeImpl::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MaxNonCompetitiveBoostAttributeImpl).tp_dict, "class_", make_descriptor(MaxNonCompetitiveBoostAttributeImpl::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MaxNonCompetitiveBoostAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_MaxNonCompetitiveBoostAttributeImpl::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MaxNonCompetitiveBoostAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MaxNonCompetitiveBoostAttributeImpl::initializeClass, 1)))
            return NULL;
          return t_MaxNonCompetitiveBoostAttributeImpl::wrap_Object(MaxNonCompetitiveBoostAttributeImpl(((t_MaxNonCompetitiveBoostAttributeImpl *) arg)->object.this$));
        }
        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MaxNonCompetitiveBoostAttributeImpl::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MaxNonCompetitiveBoostAttributeImpl_init_(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *args, PyObject *kwds)
        {
          MaxNonCompetitiveBoostAttributeImpl object((jobject) NULL);

          INT_CALL(object = MaxNonCompetitiveBoostAttributeImpl());
          self->object = object;

          return 0;
        }

        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_clear(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.clear());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(MaxNonCompetitiveBoostAttributeImpl), (PyObject *) self, "clear", args, 2);
        }

        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_copyTo(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *args)
        {
          ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyTo(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(MaxNonCompetitiveBoostAttributeImpl), (PyObject *) self, "copyTo", args, 2);
        }

        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_getCompetitiveTerm(t_MaxNonCompetitiveBoostAttributeImpl *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getCompetitiveTerm());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_getMaxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttributeImpl *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getMaxNonCompetitiveBoost());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_setCompetitiveTerm(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setCompetitiveTerm(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setCompetitiveTerm", arg);
          return NULL;
        }

        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_setMaxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setMaxNonCompetitiveBoost(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxNonCompetitiveBoost", arg);
          return NULL;
        }

        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_get__competitiveTerm(t_MaxNonCompetitiveBoostAttributeImpl *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getCompetitiveTerm());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }
        static int t_MaxNonCompetitiveBoostAttributeImpl_set__competitiveTerm(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
            {
              INT_CALL(self->object.setCompetitiveTerm(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "competitiveTerm", arg);
          return -1;
        }

        static PyObject *t_MaxNonCompetitiveBoostAttributeImpl_get__maxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttributeImpl *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getMaxNonCompetitiveBoost());
          return PyFloat_FromDouble((double) value);
        }
        static int t_MaxNonCompetitiveBoostAttributeImpl_set__maxNonCompetitiveBoost(t_MaxNonCompetitiveBoostAttributeImpl *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setMaxNonCompetitiveBoost(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxNonCompetitiveBoost", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/KeywordAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *KeywordAttribute::class$ = NULL;
          jmethodID *KeywordAttribute::mids$ = NULL;
          bool KeywordAttribute::live$ = false;

          jclass KeywordAttribute::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/KeywordAttribute");

              mids$ = new jmethodID[max_mid];
              mids$[mid_isKeyword_54c6a16a] = env->getMethodID(cls, "isKeyword", "()Z");
              mids$[mid_setKeyword_bb0c767f] = env->getMethodID(cls, "setKeyword", "(Z)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jboolean KeywordAttribute::isKeyword() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isKeyword_54c6a16a]);
          }

          void KeywordAttribute::setKeyword(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setKeyword_bb0c767f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_KeywordAttribute_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeywordAttribute_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeywordAttribute_isKeyword(t_KeywordAttribute *self);
          static PyObject *t_KeywordAttribute_setKeyword(t_KeywordAttribute *self, PyObject *arg);
          static PyObject *t_KeywordAttribute_get__keyword(t_KeywordAttribute *self, void *data);
          static int t_KeywordAttribute_set__keyword(t_KeywordAttribute *self, PyObject *arg, void *data);
          static PyGetSetDef t_KeywordAttribute__fields_[] = {
            DECLARE_GETSET_FIELD(t_KeywordAttribute, keyword),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_KeywordAttribute__methods_[] = {
            DECLARE_METHOD(t_KeywordAttribute, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordAttribute, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordAttribute, isKeyword, METH_NOARGS),
            DECLARE_METHOD(t_KeywordAttribute, setKeyword, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(KeywordAttribute, t_KeywordAttribute, ::org::apache::lucene::util::Attribute, KeywordAttribute, abstract_init, 0, 0, t_KeywordAttribute__fields_, 0, 0);

          void t_KeywordAttribute::install(PyObject *module)
          {
            installType(&PY_TYPE(KeywordAttribute), module, "KeywordAttribute", 0);
          }

          void t_KeywordAttribute::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(KeywordAttribute).tp_dict, "class_", make_descriptor(KeywordAttribute::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(KeywordAttribute).tp_dict, "wrapfn_", make_descriptor(t_KeywordAttribute::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(KeywordAttribute).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KeywordAttribute_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KeywordAttribute::initializeClass, 1)))
              return NULL;
            return t_KeywordAttribute::wrap_Object(KeywordAttribute(((t_KeywordAttribute *) arg)->object.this$));
          }
          static PyObject *t_KeywordAttribute_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KeywordAttribute::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_KeywordAttribute_isKeyword(t_KeywordAttribute *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isKeyword());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_KeywordAttribute_setKeyword(t_KeywordAttribute *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setKeyword(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setKeyword", arg);
            return NULL;
          }

          static PyObject *t_KeywordAttribute_get__keyword(t_KeywordAttribute *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isKeyword());
            Py_RETURN_BOOL(value);
          }
          static int t_KeywordAttribute_set__keyword(t_KeywordAttribute *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setKeyword(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "keyword", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/LengthFilter.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *LengthFilter::class$ = NULL;
          jmethodID *LengthFilter::mids$ = NULL;
          bool LengthFilter::live$ = false;

          jclass LengthFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/LengthFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_46a9ddd5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;II)V");
              mids$[mid_init$_c7851d0e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;ZLorg/apache/lucene/analysis/TokenStream;II)V");
              mids$[mid_accept_54c6a16a] = env->getMethodID(cls, "accept", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LengthFilter::LengthFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, jint a2, jint a3) : ::org::apache::lucene::analysis::util::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_46a9ddd5, a0.this$, a1.this$, a2, a3)) {}

          LengthFilter::LengthFilter(const ::org::apache::lucene::util::Version & a0, jboolean a1, const ::org::apache::lucene::analysis::TokenStream & a2, jint a3, jint a4) : ::org::apache::lucene::analysis::util::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7851d0e, a0.this$, a1, a2.this$, a3, a4)) {}

          jboolean LengthFilter::accept() const
          {
            return env->callBooleanMethod(this$, mids$[mid_accept_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_LengthFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LengthFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LengthFilter_init_(t_LengthFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LengthFilter_accept(t_LengthFilter *self);

          static PyMethodDef t_LengthFilter__methods_[] = {
            DECLARE_METHOD(t_LengthFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LengthFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LengthFilter, accept, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LengthFilter, t_LengthFilter, ::org::apache::lucene::analysis::util::FilteringTokenFilter, LengthFilter, t_LengthFilter_init_, 0, 0, 0, 0, 0);

          void t_LengthFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(LengthFilter), module, "LengthFilter", 0);
          }

          void t_LengthFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LengthFilter).tp_dict, "class_", make_descriptor(LengthFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LengthFilter).tp_dict, "wrapfn_", make_descriptor(t_LengthFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LengthFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LengthFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LengthFilter::initializeClass, 1)))
              return NULL;
            return t_LengthFilter::wrap_Object(LengthFilter(((t_LengthFilter *) arg)->object.this$));
          }
          static PyObject *t_LengthFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LengthFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LengthFilter_init_(t_LengthFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                jint a2;
                jint a3;
                LengthFilter object((jobject) NULL);

                if (!parseArgs(args, "KkII", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3))
                {
                  INT_CALL(object = LengthFilter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                jboolean a1;
                ::org::apache::lucene::analysis::TokenStream a2((jobject) NULL);
                jint a3;
                jint a4;
                LengthFilter object((jobject) NULL);

                if (!parseArgs(args, "KZkII", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = LengthFilter(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LengthFilter_accept(t_LengthFilter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.accept());
            Py_RETURN_BOOL(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/IntSequenceOutputs.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *IntSequenceOutputs::class$ = NULL;
          jmethodID *IntSequenceOutputs::mids$ = NULL;
          bool IntSequenceOutputs::live$ = false;

          jclass IntSequenceOutputs::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/IntSequenceOutputs");

              mids$ = new jmethodID[max_mid];
              mids$[mid_add_d1486e01] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/IntsRef;Lorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/IntsRef;");
              mids$[mid_common_d1486e01] = env->getMethodID(cls, "common", "(Lorg/apache/lucene/util/IntsRef;Lorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/IntsRef;");
              mids$[mid_getNoOutput_5b734841] = env->getMethodID(cls, "getNoOutput", "()Lorg/apache/lucene/util/IntsRef;");
              mids$[mid_getSingleton_5d304c4b] = env->getStaticMethodID(cls, "getSingleton", "()Lorg/apache/lucene/util/fst/IntSequenceOutputs;");
              mids$[mid_outputToString_6c8ec0cf] = env->getMethodID(cls, "outputToString", "(Lorg/apache/lucene/util/IntsRef;)Ljava/lang/String;");
              mids$[mid_read_7ae3e2dc] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/DataInput;)Lorg/apache/lucene/util/IntsRef;");
              mids$[mid_skipOutput_f5d6a551] = env->getMethodID(cls, "skipOutput", "(Lorg/apache/lucene/store/DataInput;)V");
              mids$[mid_subtract_d1486e01] = env->getMethodID(cls, "subtract", "(Lorg/apache/lucene/util/IntsRef;Lorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/IntsRef;");
              mids$[mid_write_e1973ab5] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/util/IntsRef;Lorg/apache/lucene/store/DataOutput;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::util::IntsRef IntSequenceOutputs::add(const ::org::apache::lucene::util::IntsRef & a0, const ::org::apache::lucene::util::IntsRef & a1) const
          {
            return ::org::apache::lucene::util::IntsRef(env->callObjectMethod(this$, mids$[mid_add_d1486e01], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::IntsRef IntSequenceOutputs::common(const ::org::apache::lucene::util::IntsRef & a0, const ::org::apache::lucene::util::IntsRef & a1) const
          {
            return ::org::apache::lucene::util::IntsRef(env->callObjectMethod(this$, mids$[mid_common_d1486e01], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::IntsRef IntSequenceOutputs::getNoOutput() const
          {
            return ::org::apache::lucene::util::IntsRef(env->callObjectMethod(this$, mids$[mid_getNoOutput_5b734841]));
          }

          IntSequenceOutputs IntSequenceOutputs::getSingleton()
          {
            jclass cls = env->getClass(initializeClass);
            return IntSequenceOutputs(env->callStaticObjectMethod(cls, mids$[mid_getSingleton_5d304c4b]));
          }

          ::java::lang::String IntSequenceOutputs::outputToString(const ::org::apache::lucene::util::IntsRef & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_outputToString_6c8ec0cf], a0.this$));
          }

          ::org::apache::lucene::util::IntsRef IntSequenceOutputs::read(const ::org::apache::lucene::store::DataInput & a0) const
          {
            return ::org::apache::lucene::util::IntsRef(env->callObjectMethod(this$, mids$[mid_read_7ae3e2dc], a0.this$));
          }

          void IntSequenceOutputs::skipOutput(const ::org::apache::lucene::store::DataInput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_skipOutput_f5d6a551], a0.this$);
          }

          ::org::apache::lucene::util::IntsRef IntSequenceOutputs::subtract(const ::org::apache::lucene::util::IntsRef & a0, const ::org::apache::lucene::util::IntsRef & a1) const
          {
            return ::org::apache::lucene::util::IntsRef(env->callObjectMethod(this$, mids$[mid_subtract_d1486e01], a0.this$, a1.this$));
          }

          void IntSequenceOutputs::write(const ::org::apache::lucene::util::IntsRef & a0, const ::org::apache::lucene::store::DataOutput & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_write_e1973ab5], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_IntSequenceOutputs_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntSequenceOutputs_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntSequenceOutputs_of_(t_IntSequenceOutputs *self, PyObject *args);
          static PyObject *t_IntSequenceOutputs_add(t_IntSequenceOutputs *self, PyObject *args);
          static PyObject *t_IntSequenceOutputs_common(t_IntSequenceOutputs *self, PyObject *args);
          static PyObject *t_IntSequenceOutputs_getNoOutput(t_IntSequenceOutputs *self, PyObject *args);
          static PyObject *t_IntSequenceOutputs_getSingleton(PyTypeObject *type);
          static PyObject *t_IntSequenceOutputs_outputToString(t_IntSequenceOutputs *self, PyObject *args);
          static PyObject *t_IntSequenceOutputs_read(t_IntSequenceOutputs *self, PyObject *args);
          static PyObject *t_IntSequenceOutputs_skipOutput(t_IntSequenceOutputs *self, PyObject *args);
          static PyObject *t_IntSequenceOutputs_subtract(t_IntSequenceOutputs *self, PyObject *args);
          static PyObject *t_IntSequenceOutputs_write(t_IntSequenceOutputs *self, PyObject *args);
          static PyObject *t_IntSequenceOutputs_get__noOutput(t_IntSequenceOutputs *self, void *data);
          static PyObject *t_IntSequenceOutputs_get__singleton(t_IntSequenceOutputs *self, void *data);
          static PyObject *t_IntSequenceOutputs_get__parameters_(t_IntSequenceOutputs *self, void *data);
          static PyGetSetDef t_IntSequenceOutputs__fields_[] = {
            DECLARE_GET_FIELD(t_IntSequenceOutputs, noOutput),
            DECLARE_GET_FIELD(t_IntSequenceOutputs, singleton),
            DECLARE_GET_FIELD(t_IntSequenceOutputs, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_IntSequenceOutputs__methods_[] = {
            DECLARE_METHOD(t_IntSequenceOutputs, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntSequenceOutputs, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntSequenceOutputs, of_, METH_VARARGS),
            DECLARE_METHOD(t_IntSequenceOutputs, add, METH_VARARGS),
            DECLARE_METHOD(t_IntSequenceOutputs, common, METH_VARARGS),
            DECLARE_METHOD(t_IntSequenceOutputs, getNoOutput, METH_VARARGS),
            DECLARE_METHOD(t_IntSequenceOutputs, getSingleton, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_IntSequenceOutputs, outputToString, METH_VARARGS),
            DECLARE_METHOD(t_IntSequenceOutputs, read, METH_VARARGS),
            DECLARE_METHOD(t_IntSequenceOutputs, skipOutput, METH_VARARGS),
            DECLARE_METHOD(t_IntSequenceOutputs, subtract, METH_VARARGS),
            DECLARE_METHOD(t_IntSequenceOutputs, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IntSequenceOutputs, t_IntSequenceOutputs, ::org::apache::lucene::util::fst::Outputs, IntSequenceOutputs, abstract_init, 0, 0, t_IntSequenceOutputs__fields_, 0, 0);
          PyObject *t_IntSequenceOutputs::wrap_Object(const IntSequenceOutputs& object, PyTypeObject *p0)
          {
            PyObject *obj = t_IntSequenceOutputs::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_IntSequenceOutputs *self = (t_IntSequenceOutputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_IntSequenceOutputs::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_IntSequenceOutputs::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_IntSequenceOutputs *self = (t_IntSequenceOutputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_IntSequenceOutputs::install(PyObject *module)
          {
            installType(&PY_TYPE(IntSequenceOutputs), module, "IntSequenceOutputs", 0);
          }

          void t_IntSequenceOutputs::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IntSequenceOutputs).tp_dict, "class_", make_descriptor(IntSequenceOutputs::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IntSequenceOutputs).tp_dict, "wrapfn_", make_descriptor(t_IntSequenceOutputs::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IntSequenceOutputs).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IntSequenceOutputs_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IntSequenceOutputs::initializeClass, 1)))
              return NULL;
            return t_IntSequenceOutputs::wrap_Object(IntSequenceOutputs(((t_IntSequenceOutputs *) arg)->object.this$));
          }
          static PyObject *t_IntSequenceOutputs_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IntSequenceOutputs::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_IntSequenceOutputs_of_(t_IntSequenceOutputs *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_IntSequenceOutputs_add(t_IntSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
            ::org::apache::lucene::util::IntsRef a1((jobject) NULL);
            ::org::apache::lucene::util::IntsRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::IntsRef::initializeClass, ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.add(a0, a1));
              return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IntSequenceOutputs), (PyObject *) self, "add", args, 2);
          }

          static PyObject *t_IntSequenceOutputs_common(t_IntSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
            ::org::apache::lucene::util::IntsRef a1((jobject) NULL);
            ::org::apache::lucene::util::IntsRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::IntsRef::initializeClass, ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.common(a0, a1));
              return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IntSequenceOutputs), (PyObject *) self, "common", args, 2);
          }

          static PyObject *t_IntSequenceOutputs_getNoOutput(t_IntSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::IntsRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getNoOutput());
              return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IntSequenceOutputs), (PyObject *) self, "getNoOutput", args, 2);
          }

          static PyObject *t_IntSequenceOutputs_getSingleton(PyTypeObject *type)
          {
            IntSequenceOutputs result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::fst::IntSequenceOutputs::getSingleton());
            return t_IntSequenceOutputs::wrap_Object(result);
          }

          static PyObject *t_IntSequenceOutputs_outputToString(t_IntSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::IntsRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.outputToString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(IntSequenceOutputs), (PyObject *) self, "outputToString", args, 2);
          }

          static PyObject *t_IntSequenceOutputs_read(t_IntSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::org::apache::lucene::util::IntsRef result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.read(a0));
              return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IntSequenceOutputs), (PyObject *) self, "read", args, 2);
          }

          static PyObject *t_IntSequenceOutputs_skipOutput(t_IntSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.skipOutput(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(IntSequenceOutputs), (PyObject *) self, "skipOutput", args, 2);
          }

          static PyObject *t_IntSequenceOutputs_subtract(t_IntSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
            ::org::apache::lucene::util::IntsRef a1((jobject) NULL);
            ::org::apache::lucene::util::IntsRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::IntsRef::initializeClass, ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.subtract(a0, a1));
              return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IntSequenceOutputs), (PyObject *) self, "subtract", args, 2);
          }

          static PyObject *t_IntSequenceOutputs_write(t_IntSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
            ::org::apache::lucene::store::DataOutput a1((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::IntsRef::initializeClass, ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.write(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(IntSequenceOutputs), (PyObject *) self, "write", args, 2);
          }
          static PyObject *t_IntSequenceOutputs_get__parameters_(t_IntSequenceOutputs *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_IntSequenceOutputs_get__noOutput(t_IntSequenceOutputs *self, void *data)
          {
            ::org::apache::lucene::util::IntsRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getNoOutput());
            return ::org::apache::lucene::util::t_IntsRef::wrap_Object(value);
          }

          static PyObject *t_IntSequenceOutputs_get__singleton(t_IntSequenceOutputs *self, void *data)
          {
            IntSequenceOutputs value((jobject) NULL);
            OBJ_CALL(value = self->object.getSingleton());
            return t_IntSequenceOutputs::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fr/FrenchLightStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {

          ::java::lang::Class *FrenchLightStemFilter::class$ = NULL;
          jmethodID *FrenchLightStemFilter::mids$ = NULL;
          bool FrenchLightStemFilter::live$ = false;

          jclass FrenchLightStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fr/FrenchLightStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FrenchLightStemFilter::FrenchLightStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean FrenchLightStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {
          static PyObject *t_FrenchLightStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FrenchLightStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FrenchLightStemFilter_init_(t_FrenchLightStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FrenchLightStemFilter_incrementToken(t_FrenchLightStemFilter *self, PyObject *args);

          static PyMethodDef t_FrenchLightStemFilter__methods_[] = {
            DECLARE_METHOD(t_FrenchLightStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchLightStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchLightStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FrenchLightStemFilter, t_FrenchLightStemFilter, ::org::apache::lucene::analysis::TokenFilter, FrenchLightStemFilter, t_FrenchLightStemFilter_init_, 0, 0, 0, 0, 0);

          void t_FrenchLightStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(FrenchLightStemFilter), module, "FrenchLightStemFilter", 0);
          }

          void t_FrenchLightStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FrenchLightStemFilter).tp_dict, "class_", make_descriptor(FrenchLightStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FrenchLightStemFilter).tp_dict, "wrapfn_", make_descriptor(t_FrenchLightStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FrenchLightStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FrenchLightStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FrenchLightStemFilter::initializeClass, 1)))
              return NULL;
            return t_FrenchLightStemFilter::wrap_Object(FrenchLightStemFilter(((t_FrenchLightStemFilter *) arg)->object.this$));
          }
          static PyObject *t_FrenchLightStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FrenchLightStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FrenchLightStemFilter_init_(t_FrenchLightStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            FrenchLightStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = FrenchLightStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FrenchLightStemFilter_incrementToken(t_FrenchLightStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FrenchLightStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/std36/UAX29URLEmailTokenizerImpl36.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizerInterface.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          namespace std36 {

            ::java::lang::Class *UAX29URLEmailTokenizerImpl36::class$ = NULL;
            jmethodID *UAX29URLEmailTokenizerImpl36::mids$ = NULL;
            bool UAX29URLEmailTokenizerImpl36::live$ = false;
            jint UAX29URLEmailTokenizerImpl36::EMAIL_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl36::HANGUL_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl36::HIRAGANA_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl36::IDEOGRAPHIC_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl36::KATAKANA_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl36::NUMERIC_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl36::SOUTH_EAST_ASIAN_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl36::URL_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl36::WORD_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl36::YYEOF = (jint) 0;
            jint UAX29URLEmailTokenizerImpl36::YYINITIAL = (jint) 0;

            jclass UAX29URLEmailTokenizerImpl36::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/std36/UAX29URLEmailTokenizerImpl36");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                mids$[mid_getNextToken_54c6a179] = env->getMethodID(cls, "getNextToken", "()I");
                mids$[mid_getText_64c709f2] = env->getMethodID(cls, "getText", "(Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;)V");
                mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
                mids$[mid_yychar_54c6a179] = env->getMethodID(cls, "yychar", "()I");
                mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
                mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
                mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
                mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
                mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
                mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
                mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                EMAIL_TYPE = env->getStaticIntField(cls, "EMAIL_TYPE");
                HANGUL_TYPE = env->getStaticIntField(cls, "HANGUL_TYPE");
                HIRAGANA_TYPE = env->getStaticIntField(cls, "HIRAGANA_TYPE");
                IDEOGRAPHIC_TYPE = env->getStaticIntField(cls, "IDEOGRAPHIC_TYPE");
                KATAKANA_TYPE = env->getStaticIntField(cls, "KATAKANA_TYPE");
                NUMERIC_TYPE = env->getStaticIntField(cls, "NUMERIC_TYPE");
                SOUTH_EAST_ASIAN_TYPE = env->getStaticIntField(cls, "SOUTH_EAST_ASIAN_TYPE");
                URL_TYPE = env->getStaticIntField(cls, "URL_TYPE");
                WORD_TYPE = env->getStaticIntField(cls, "WORD_TYPE");
                YYEOF = env->getStaticIntField(cls, "YYEOF");
                YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            UAX29URLEmailTokenizerImpl36::UAX29URLEmailTokenizerImpl36(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

            jint UAX29URLEmailTokenizerImpl36::getNextToken() const
            {
              return env->callIntMethod(this$, mids$[mid_getNextToken_54c6a179]);
            }

            void UAX29URLEmailTokenizerImpl36::getText(const ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_getText_64c709f2], a0.this$);
            }

            void UAX29URLEmailTokenizerImpl36::yybegin(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
            }

            jint UAX29URLEmailTokenizerImpl36::yychar() const
            {
              return env->callIntMethod(this$, mids$[mid_yychar_54c6a179]);
            }

            jchar UAX29URLEmailTokenizerImpl36::yycharat(jint a0) const
            {
              return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
            }

            void UAX29URLEmailTokenizerImpl36::yyclose() const
            {
              env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
            }

            jint UAX29URLEmailTokenizerImpl36::yylength() const
            {
              return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
            }

            void UAX29URLEmailTokenizerImpl36::yypushback(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
            }

            void UAX29URLEmailTokenizerImpl36::yyreset(const ::java::io::Reader & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
            }

            jint UAX29URLEmailTokenizerImpl36::yystate() const
            {
              return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
            }

            ::java::lang::String UAX29URLEmailTokenizerImpl36::yytext() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          namespace std36 {
            static PyObject *t_UAX29URLEmailTokenizerImpl36_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl36_instance_(PyTypeObject *type, PyObject *arg);
            static int t_UAX29URLEmailTokenizerImpl36_init_(t_UAX29URLEmailTokenizerImpl36 *self, PyObject *args, PyObject *kwds);
            static PyObject *t_UAX29URLEmailTokenizerImpl36_getNextToken(t_UAX29URLEmailTokenizerImpl36 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl36_getText(t_UAX29URLEmailTokenizerImpl36 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl36_yybegin(t_UAX29URLEmailTokenizerImpl36 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl36_yychar(t_UAX29URLEmailTokenizerImpl36 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl36_yycharat(t_UAX29URLEmailTokenizerImpl36 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl36_yyclose(t_UAX29URLEmailTokenizerImpl36 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl36_yylength(t_UAX29URLEmailTokenizerImpl36 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl36_yypushback(t_UAX29URLEmailTokenizerImpl36 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl36_yyreset(t_UAX29URLEmailTokenizerImpl36 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl36_yystate(t_UAX29URLEmailTokenizerImpl36 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl36_yytext(t_UAX29URLEmailTokenizerImpl36 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl36_get__nextToken(t_UAX29URLEmailTokenizerImpl36 *self, void *data);
            static PyGetSetDef t_UAX29URLEmailTokenizerImpl36__fields_[] = {
              DECLARE_GET_FIELD(t_UAX29URLEmailTokenizerImpl36, nextToken),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_UAX29URLEmailTokenizerImpl36__methods_[] = {
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl36, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl36, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl36, getNextToken, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl36, getText, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl36, yybegin, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl36, yychar, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl36, yycharat, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl36, yyclose, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl36, yylength, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl36, yypushback, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl36, yyreset, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl36, yystate, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl36, yytext, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(UAX29URLEmailTokenizerImpl36, t_UAX29URLEmailTokenizerImpl36, ::java::lang::Object, UAX29URLEmailTokenizerImpl36, t_UAX29URLEmailTokenizerImpl36_init_, 0, 0, t_UAX29URLEmailTokenizerImpl36__fields_, 0, 0);

            void t_UAX29URLEmailTokenizerImpl36::install(PyObject *module)
            {
              installType(&PY_TYPE(UAX29URLEmailTokenizerImpl36), module, "UAX29URLEmailTokenizerImpl36", 0);
            }

            void t_UAX29URLEmailTokenizerImpl36::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl36).tp_dict, "class_", make_descriptor(UAX29URLEmailTokenizerImpl36::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl36).tp_dict, "wrapfn_", make_descriptor(t_UAX29URLEmailTokenizerImpl36::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl36).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(UAX29URLEmailTokenizerImpl36::initializeClass);
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl36).tp_dict, "EMAIL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl36::EMAIL_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl36).tp_dict, "HANGUL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl36::HANGUL_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl36).tp_dict, "HIRAGANA_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl36::HIRAGANA_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl36).tp_dict, "IDEOGRAPHIC_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl36::IDEOGRAPHIC_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl36).tp_dict, "KATAKANA_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl36::KATAKANA_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl36).tp_dict, "NUMERIC_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl36::NUMERIC_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl36).tp_dict, "SOUTH_EAST_ASIAN_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl36::SOUTH_EAST_ASIAN_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl36).tp_dict, "URL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl36::URL_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl36).tp_dict, "WORD_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl36::WORD_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl36).tp_dict, "YYEOF", make_descriptor(UAX29URLEmailTokenizerImpl36::YYEOF));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl36).tp_dict, "YYINITIAL", make_descriptor(UAX29URLEmailTokenizerImpl36::YYINITIAL));
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl36_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, UAX29URLEmailTokenizerImpl36::initializeClass, 1)))
                return NULL;
              return t_UAX29URLEmailTokenizerImpl36::wrap_Object(UAX29URLEmailTokenizerImpl36(((t_UAX29URLEmailTokenizerImpl36 *) arg)->object.this$));
            }
            static PyObject *t_UAX29URLEmailTokenizerImpl36_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, UAX29URLEmailTokenizerImpl36::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_UAX29URLEmailTokenizerImpl36_init_(t_UAX29URLEmailTokenizerImpl36 *self, PyObject *args, PyObject *kwds)
            {
              ::java::io::Reader a0((jobject) NULL);
              UAX29URLEmailTokenizerImpl36 object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
              {
                INT_CALL(object = UAX29URLEmailTokenizerImpl36(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl36_getNextToken(t_UAX29URLEmailTokenizerImpl36 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getNextToken());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl36_getText(t_UAX29URLEmailTokenizerImpl36 *self, PyObject *arg)
            {
              ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute::initializeClass, &a0))
              {
                OBJ_CALL(self->object.getText(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "getText", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl36_yybegin(t_UAX29URLEmailTokenizerImpl36 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.yybegin(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl36_yychar(t_UAX29URLEmailTokenizerImpl36 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yychar());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl36_yycharat(t_UAX29URLEmailTokenizerImpl36 *self, PyObject *arg)
            {
              jint a0;
              jchar result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.yycharat(a0));
                return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
              }

              PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl36_yyclose(t_UAX29URLEmailTokenizerImpl36 *self)
            {
              OBJ_CALL(self->object.yyclose());
              Py_RETURN_NONE;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl36_yylength(t_UAX29URLEmailTokenizerImpl36 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yylength());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl36_yypushback(t_UAX29URLEmailTokenizerImpl36 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.yypushback(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl36_yyreset(t_UAX29URLEmailTokenizerImpl36 *self, PyObject *arg)
            {
              ::java::io::Reader a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
              {
                OBJ_CALL(self->object.yyreset(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl36_yystate(t_UAX29URLEmailTokenizerImpl36 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yystate());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl36_yytext(t_UAX29URLEmailTokenizerImpl36 *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.yytext());
              return j2p(result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl36_get__nextToken(t_UAX29URLEmailTokenizerImpl36 *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getNextToken());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/AnalyzerQueryNodeProcessor.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *AnalyzerQueryNodeProcessor::class$ = NULL;
              jmethodID *AnalyzerQueryNodeProcessor::mids$ = NULL;
              bool AnalyzerQueryNodeProcessor::live$ = false;

              jclass AnalyzerQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/AnalyzerQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_process_6705aed7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              AnalyzerQueryNodeProcessor::AnalyzerQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode AnalyzerQueryNodeProcessor::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_6705aed7], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_AnalyzerQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_AnalyzerQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_AnalyzerQueryNodeProcessor_init_(t_AnalyzerQueryNodeProcessor *self, PyObject *args, PyObject *kwds);
              static PyObject *t_AnalyzerQueryNodeProcessor_process(t_AnalyzerQueryNodeProcessor *self, PyObject *args);

              static PyMethodDef t_AnalyzerQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_AnalyzerQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AnalyzerQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AnalyzerQueryNodeProcessor, process, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(AnalyzerQueryNodeProcessor, t_AnalyzerQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, AnalyzerQueryNodeProcessor, t_AnalyzerQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_AnalyzerQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(AnalyzerQueryNodeProcessor), module, "AnalyzerQueryNodeProcessor", 0);
              }

              void t_AnalyzerQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(AnalyzerQueryNodeProcessor).tp_dict, "class_", make_descriptor(AnalyzerQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(AnalyzerQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_AnalyzerQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(AnalyzerQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_AnalyzerQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, AnalyzerQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_AnalyzerQueryNodeProcessor::wrap_Object(AnalyzerQueryNodeProcessor(((t_AnalyzerQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_AnalyzerQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, AnalyzerQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_AnalyzerQueryNodeProcessor_init_(t_AnalyzerQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                AnalyzerQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = AnalyzerQueryNodeProcessor());
                self->object = object;

                return 0;
              }

              static PyObject *t_AnalyzerQueryNodeProcessor_process(t_AnalyzerQueryNodeProcessor *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(AnalyzerQueryNodeProcessor), (PyObject *) self, "process", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "java/util/Comparator.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/index/MergeState.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40TermVectorsWriter::class$ = NULL;
          jmethodID *Lucene40TermVectorsWriter::mids$ = NULL;
          bool Lucene40TermVectorsWriter::live$ = false;

          jclass Lucene40TermVectorsWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_1962ccd4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)V");
              mids$[mid_abort_54c6a166] = env->getMethodID(cls, "abort", "()V");
              mids$[mid_addPosition_ffd34a92] = env->getMethodID(cls, "addPosition", "(IIILorg/apache/lucene/util/BytesRef;)V");
              mids$[mid_addProx_395d0aa2] = env->getMethodID(cls, "addProx", "(ILorg/apache/lucene/store/DataInput;Lorg/apache/lucene/store/DataInput;)V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_finish_48f050c2] = env->getMethodID(cls, "finish", "(Lorg/apache/lucene/index/FieldInfos;I)V");
              mids$[mid_finishDocument_54c6a166] = env->getMethodID(cls, "finishDocument", "()V");
              mids$[mid_finishTerm_54c6a166] = env->getMethodID(cls, "finishTerm", "()V");
              mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
              mids$[mid_merge_fd0cfdeb] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/MergeState;)I");
              mids$[mid_startDocument_39c7bd3c] = env->getMethodID(cls, "startDocument", "(I)V");
              mids$[mid_startField_07c4def5] = env->getMethodID(cls, "startField", "(Lorg/apache/lucene/index/FieldInfo;IZZZ)V");
              mids$[mid_startTerm_738fc2ce] = env->getMethodID(cls, "startTerm", "(Lorg/apache/lucene/util/BytesRef;I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40TermVectorsWriter::Lucene40TermVectorsWriter(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::org::apache::lucene::store::IOContext & a2) : ::org::apache::lucene::codecs::TermVectorsWriter(env->newObject(initializeClass, &mids$, mid_init$_1962ccd4, a0.this$, a1.this$, a2.this$)) {}

          void Lucene40TermVectorsWriter::abort() const
          {
            env->callVoidMethod(this$, mids$[mid_abort_54c6a166]);
          }

          void Lucene40TermVectorsWriter::addPosition(jint a0, jint a1, jint a2, const ::org::apache::lucene::util::BytesRef & a3) const
          {
            env->callVoidMethod(this$, mids$[mid_addPosition_ffd34a92], a0, a1, a2, a3.this$);
          }

          void Lucene40TermVectorsWriter::addProx(jint a0, const ::org::apache::lucene::store::DataInput & a1, const ::org::apache::lucene::store::DataInput & a2) const
          {
            env->callVoidMethod(this$, mids$[mid_addProx_395d0aa2], a0, a1.this$, a2.this$);
          }

          void Lucene40TermVectorsWriter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          void Lucene40TermVectorsWriter::finish(const ::org::apache::lucene::index::FieldInfos & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_finish_48f050c2], a0.this$, a1);
          }

          void Lucene40TermVectorsWriter::finishDocument() const
          {
            env->callVoidMethod(this$, mids$[mid_finishDocument_54c6a166]);
          }

          void Lucene40TermVectorsWriter::finishTerm() const
          {
            env->callVoidMethod(this$, mids$[mid_finishTerm_54c6a166]);
          }

          ::java::util::Comparator Lucene40TermVectorsWriter::getComparator() const
          {
            return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
          }

          jint Lucene40TermVectorsWriter::merge(const ::org::apache::lucene::index::MergeState & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_merge_fd0cfdeb], a0.this$);
          }

          void Lucene40TermVectorsWriter::startDocument(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_startDocument_39c7bd3c], a0);
          }

          void Lucene40TermVectorsWriter::startField(const ::org::apache::lucene::index::FieldInfo & a0, jint a1, jboolean a2, jboolean a3, jboolean a4) const
          {
            env->callVoidMethod(this$, mids$[mid_startField_07c4def5], a0.this$, a1, a2, a3, a4);
          }

          void Lucene40TermVectorsWriter::startTerm(const ::org::apache::lucene::util::BytesRef & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_startTerm_738fc2ce], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40TermVectorsWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40TermVectorsWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40TermVectorsWriter_init_(t_Lucene40TermVectorsWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40TermVectorsWriter_abort(t_Lucene40TermVectorsWriter *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsWriter_addPosition(t_Lucene40TermVectorsWriter *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsWriter_addProx(t_Lucene40TermVectorsWriter *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsWriter_close(t_Lucene40TermVectorsWriter *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsWriter_finish(t_Lucene40TermVectorsWriter *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsWriter_finishDocument(t_Lucene40TermVectorsWriter *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsWriter_finishTerm(t_Lucene40TermVectorsWriter *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsWriter_getComparator(t_Lucene40TermVectorsWriter *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsWriter_merge(t_Lucene40TermVectorsWriter *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsWriter_startDocument(t_Lucene40TermVectorsWriter *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsWriter_startField(t_Lucene40TermVectorsWriter *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsWriter_startTerm(t_Lucene40TermVectorsWriter *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsWriter_get__comparator(t_Lucene40TermVectorsWriter *self, void *data);
          static PyGetSetDef t_Lucene40TermVectorsWriter__fields_[] = {
            DECLARE_GET_FIELD(t_Lucene40TermVectorsWriter, comparator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lucene40TermVectorsWriter__methods_[] = {
            DECLARE_METHOD(t_Lucene40TermVectorsWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40TermVectorsWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40TermVectorsWriter, abort, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsWriter, addPosition, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsWriter, addProx, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsWriter, close, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsWriter, finish, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsWriter, finishDocument, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsWriter, finishTerm, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsWriter, getComparator, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsWriter, merge, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsWriter, startDocument, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsWriter, startField, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsWriter, startTerm, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40TermVectorsWriter, t_Lucene40TermVectorsWriter, ::org::apache::lucene::codecs::TermVectorsWriter, Lucene40TermVectorsWriter, t_Lucene40TermVectorsWriter_init_, 0, 0, t_Lucene40TermVectorsWriter__fields_, 0, 0);

          void t_Lucene40TermVectorsWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40TermVectorsWriter), module, "Lucene40TermVectorsWriter", 0);
          }

          void t_Lucene40TermVectorsWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40TermVectorsWriter).tp_dict, "class_", make_descriptor(Lucene40TermVectorsWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40TermVectorsWriter).tp_dict, "wrapfn_", make_descriptor(t_Lucene40TermVectorsWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40TermVectorsWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40TermVectorsWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40TermVectorsWriter::initializeClass, 1)))
              return NULL;
            return t_Lucene40TermVectorsWriter::wrap_Object(Lucene40TermVectorsWriter(((t_Lucene40TermVectorsWriter *) arg)->object.this$));
          }
          static PyObject *t_Lucene40TermVectorsWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40TermVectorsWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40TermVectorsWriter_init_(t_Lucene40TermVectorsWriter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);
            Lucene40TermVectorsWriter object((jobject) NULL);

            if (!parseArgs(args, "ksk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = Lucene40TermVectorsWriter(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene40TermVectorsWriter_abort(t_Lucene40TermVectorsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.abort());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsWriter), (PyObject *) self, "abort", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsWriter_addPosition(t_Lucene40TermVectorsWriter *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jint a2;
            ::org::apache::lucene::util::BytesRef a3((jobject) NULL);

            if (!parseArgs(args, "IIIk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(self->object.addPosition(a0, a1, a2, a3));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsWriter), (PyObject *) self, "addPosition", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsWriter_addProx(t_Lucene40TermVectorsWriter *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::store::DataInput a1((jobject) NULL);
            ::org::apache::lucene::store::DataInput a2((jobject) NULL);

            if (!parseArgs(args, "Ikk", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.addProx(a0, a1, a2));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsWriter), (PyObject *) self, "addProx", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsWriter_close(t_Lucene40TermVectorsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsWriter), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsWriter_finish(t_Lucene40TermVectorsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfos a0((jobject) NULL);
            jint a1;

            if (!parseArgs(args, "kI", ::org::apache::lucene::index::FieldInfos::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.finish(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsWriter), (PyObject *) self, "finish", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsWriter_finishDocument(t_Lucene40TermVectorsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.finishDocument());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsWriter), (PyObject *) self, "finishDocument", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsWriter_finishTerm(t_Lucene40TermVectorsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.finishTerm());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsWriter), (PyObject *) self, "finishTerm", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsWriter_getComparator(t_Lucene40TermVectorsWriter *self, PyObject *args)
          {
            ::java::util::Comparator result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getComparator());
              return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsWriter), (PyObject *) self, "getComparator", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsWriter_merge(t_Lucene40TermVectorsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::MergeState a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::MergeState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.merge(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsWriter), (PyObject *) self, "merge", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsWriter_startDocument(t_Lucene40TermVectorsWriter *self, PyObject *args)
          {
            jint a0;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(self->object.startDocument(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsWriter), (PyObject *) self, "startDocument", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsWriter_startField(t_Lucene40TermVectorsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            jint a1;
            jboolean a2;
            jboolean a3;
            jboolean a4;

            if (!parseArgs(args, "kIZZZ", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(self->object.startField(a0, a1, a2, a3, a4));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsWriter), (PyObject *) self, "startField", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsWriter_startTerm(t_Lucene40TermVectorsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            jint a1;

            if (!parseArgs(args, "kI", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.startTerm(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsWriter), (PyObject *) self, "startTerm", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsWriter_get__comparator(t_Lucene40TermVectorsWriter *self, void *data)
          {
            ::java::util::Comparator value((jobject) NULL);
            OBJ_CALL(value = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/DefaultPhraseSlopQueryNodeProcessor.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *DefaultPhraseSlopQueryNodeProcessor::class$ = NULL;
              jmethodID *DefaultPhraseSlopQueryNodeProcessor::mids$ = NULL;
              bool DefaultPhraseSlopQueryNodeProcessor::live$ = false;

              jclass DefaultPhraseSlopQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/DefaultPhraseSlopQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_process_6705aed7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");
                  mids$[mid_processChildren_cc04aeef] = env->getMethodID(cls, "processChildren", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              DefaultPhraseSlopQueryNodeProcessor::DefaultPhraseSlopQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode DefaultPhraseSlopQueryNodeProcessor::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_6705aed7], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_DefaultPhraseSlopQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_DefaultPhraseSlopQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_DefaultPhraseSlopQueryNodeProcessor_init_(t_DefaultPhraseSlopQueryNodeProcessor *self, PyObject *args, PyObject *kwds);
              static PyObject *t_DefaultPhraseSlopQueryNodeProcessor_process(t_DefaultPhraseSlopQueryNodeProcessor *self, PyObject *args);

              static PyMethodDef t_DefaultPhraseSlopQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_DefaultPhraseSlopQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_DefaultPhraseSlopQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_DefaultPhraseSlopQueryNodeProcessor, process, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(DefaultPhraseSlopQueryNodeProcessor, t_DefaultPhraseSlopQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, DefaultPhraseSlopQueryNodeProcessor, t_DefaultPhraseSlopQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_DefaultPhraseSlopQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(DefaultPhraseSlopQueryNodeProcessor), module, "DefaultPhraseSlopQueryNodeProcessor", 0);
              }

              void t_DefaultPhraseSlopQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(DefaultPhraseSlopQueryNodeProcessor).tp_dict, "class_", make_descriptor(DefaultPhraseSlopQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(DefaultPhraseSlopQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_DefaultPhraseSlopQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(DefaultPhraseSlopQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_DefaultPhraseSlopQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, DefaultPhraseSlopQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_DefaultPhraseSlopQueryNodeProcessor::wrap_Object(DefaultPhraseSlopQueryNodeProcessor(((t_DefaultPhraseSlopQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_DefaultPhraseSlopQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, DefaultPhraseSlopQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_DefaultPhraseSlopQueryNodeProcessor_init_(t_DefaultPhraseSlopQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                DefaultPhraseSlopQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = DefaultPhraseSlopQueryNodeProcessor());
                self->object = object;

                return 0;
              }

              static PyObject *t_DefaultPhraseSlopQueryNodeProcessor_process(t_DefaultPhraseSlopQueryNodeProcessor *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(DefaultPhraseSlopQueryNodeProcessor), (PyObject *) self, "process", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/NumericDocValuesField.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *NumericDocValuesField::class$ = NULL;
        jmethodID *NumericDocValuesField::mids$ = NULL;
        bool NumericDocValuesField::live$ = false;
        ::org::apache::lucene::document::FieldType *NumericDocValuesField::TYPE = NULL;

        jclass NumericDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/NumericDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4372eed5] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NumericDocValuesField::NumericDocValuesField(const ::java::lang::String & a0, jlong a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_4372eed5, a0.this$, a1)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_NumericDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NumericDocValuesField_init_(t_NumericDocValuesField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_NumericDocValuesField__methods_[] = {
          DECLARE_METHOD(t_NumericDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericDocValuesField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NumericDocValuesField, t_NumericDocValuesField, ::org::apache::lucene::document::Field, NumericDocValuesField, t_NumericDocValuesField_init_, 0, 0, 0, 0, 0);

        void t_NumericDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(NumericDocValuesField), module, "NumericDocValuesField", 0);
        }

        void t_NumericDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NumericDocValuesField).tp_dict, "class_", make_descriptor(NumericDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NumericDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_NumericDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NumericDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(NumericDocValuesField::initializeClass);
          PyDict_SetItemString(PY_TYPE(NumericDocValuesField).tp_dict, "TYPE", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*NumericDocValuesField::TYPE)));
        }

        static PyObject *t_NumericDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NumericDocValuesField::initializeClass, 1)))
            return NULL;
          return t_NumericDocValuesField::wrap_Object(NumericDocValuesField(((t_NumericDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_NumericDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NumericDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NumericDocValuesField_init_(t_NumericDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong a1;
          NumericDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "sJ", &a0, &a1))
          {
            INT_CALL(object = NumericDocValuesField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/StoredFieldsReader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Cloneable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/StoredFieldVisitor.h"
#include "java/io/Closeable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *StoredFieldsReader::class$ = NULL;
        jmethodID *StoredFieldsReader::mids$ = NULL;
        bool StoredFieldsReader::live$ = false;

        jclass StoredFieldsReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/StoredFieldsReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
            mids$[mid_clone_ef585f0d] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/codecs/StoredFieldsReader;");
            mids$[mid_visitDocument_a2ea3ebe] = env->getMethodID(cls, "visitDocument", "(ILorg/apache/lucene/index/StoredFieldVisitor;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void StoredFieldsReader::checkIntegrity() const
        {
          env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
        }

        StoredFieldsReader StoredFieldsReader::clone() const
        {
          return StoredFieldsReader(env->callObjectMethod(this$, mids$[mid_clone_ef585f0d]));
        }

        void StoredFieldsReader::visitDocument(jint a0, const ::org::apache::lucene::index::StoredFieldVisitor & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_visitDocument_a2ea3ebe], a0, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_StoredFieldsReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StoredFieldsReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StoredFieldsReader_checkIntegrity(t_StoredFieldsReader *self);
        static PyObject *t_StoredFieldsReader_clone(t_StoredFieldsReader *self);
        static PyObject *t_StoredFieldsReader_visitDocument(t_StoredFieldsReader *self, PyObject *args);

        static PyMethodDef t_StoredFieldsReader__methods_[] = {
          DECLARE_METHOD(t_StoredFieldsReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StoredFieldsReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StoredFieldsReader, checkIntegrity, METH_NOARGS),
          DECLARE_METHOD(t_StoredFieldsReader, clone, METH_NOARGS),
          DECLARE_METHOD(t_StoredFieldsReader, visitDocument, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(StoredFieldsReader, t_StoredFieldsReader, ::java::lang::Object, StoredFieldsReader, abstract_init, 0, 0, 0, 0, 0);

        void t_StoredFieldsReader::install(PyObject *module)
        {
          installType(&PY_TYPE(StoredFieldsReader), module, "StoredFieldsReader", 0);
        }

        void t_StoredFieldsReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(StoredFieldsReader).tp_dict, "class_", make_descriptor(StoredFieldsReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(StoredFieldsReader).tp_dict, "wrapfn_", make_descriptor(t_StoredFieldsReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(StoredFieldsReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_StoredFieldsReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, StoredFieldsReader::initializeClass, 1)))
            return NULL;
          return t_StoredFieldsReader::wrap_Object(StoredFieldsReader(((t_StoredFieldsReader *) arg)->object.this$));
        }
        static PyObject *t_StoredFieldsReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, StoredFieldsReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_StoredFieldsReader_checkIntegrity(t_StoredFieldsReader *self)
        {
          OBJ_CALL(self->object.checkIntegrity());
          Py_RETURN_NONE;
        }

        static PyObject *t_StoredFieldsReader_clone(t_StoredFieldsReader *self)
        {
          StoredFieldsReader result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_StoredFieldsReader::wrap_Object(result);
        }

        static PyObject *t_StoredFieldsReader_visitDocument(t_StoredFieldsReader *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::index::StoredFieldVisitor a1((jobject) NULL);

          if (!parseArgs(args, "Ik", ::org::apache::lucene::index::StoredFieldVisitor::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.visitDocument(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "visitDocument", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/SlopQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldableNode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/CloneNotSupportedException.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *SlopQueryNode::class$ = NULL;
              jmethodID *SlopQueryNode::mids$ = NULL;
              bool SlopQueryNode::live$ = false;

              jclass SlopQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/SlopQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_bc870487] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;I)V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getChild_b387c5e6] = env->getMethodID(cls, "getChild", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getField_e0adba2f] = env->getMethodID(cls, "getField", "()Ljava/lang/CharSequence;");
                  mids$[mid_getValue_54c6a179] = env->getMethodID(cls, "getValue", "()I");
                  mids$[mid_setField_a8afc64a] = env->getMethodID(cls, "setField", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              SlopQueryNode::SlopQueryNode(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0, jint a1) : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_bc870487, a0.this$, a1)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode SlopQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode SlopQueryNode::getChild() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_getChild_b387c5e6]));
              }

              ::java::lang::CharSequence SlopQueryNode::getField() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getField_e0adba2f]));
              }

              jint SlopQueryNode::getValue() const
              {
                return env->callIntMethod(this$, mids$[mid_getValue_54c6a179]);
              }

              void SlopQueryNode::setField(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setField_a8afc64a], a0.this$);
              }

              ::java::lang::CharSequence SlopQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String SlopQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_SlopQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_SlopQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_SlopQueryNode_init_(t_SlopQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_SlopQueryNode_cloneTree(t_SlopQueryNode *self, PyObject *args);
              static PyObject *t_SlopQueryNode_getChild(t_SlopQueryNode *self);
              static PyObject *t_SlopQueryNode_getField(t_SlopQueryNode *self);
              static PyObject *t_SlopQueryNode_getValue(t_SlopQueryNode *self);
              static PyObject *t_SlopQueryNode_setField(t_SlopQueryNode *self, PyObject *arg);
              static PyObject *t_SlopQueryNode_toQueryString(t_SlopQueryNode *self, PyObject *args);
              static PyObject *t_SlopQueryNode_toString(t_SlopQueryNode *self, PyObject *args);
              static PyObject *t_SlopQueryNode_get__child(t_SlopQueryNode *self, void *data);
              static PyObject *t_SlopQueryNode_get__field(t_SlopQueryNode *self, void *data);
              static int t_SlopQueryNode_set__field(t_SlopQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_SlopQueryNode_get__value(t_SlopQueryNode *self, void *data);
              static PyGetSetDef t_SlopQueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_SlopQueryNode, child),
                DECLARE_GETSET_FIELD(t_SlopQueryNode, field),
                DECLARE_GET_FIELD(t_SlopQueryNode, value),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_SlopQueryNode__methods_[] = {
                DECLARE_METHOD(t_SlopQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_SlopQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_SlopQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_SlopQueryNode, getChild, METH_NOARGS),
                DECLARE_METHOD(t_SlopQueryNode, getField, METH_NOARGS),
                DECLARE_METHOD(t_SlopQueryNode, getValue, METH_NOARGS),
                DECLARE_METHOD(t_SlopQueryNode, setField, METH_O),
                DECLARE_METHOD(t_SlopQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_SlopQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(SlopQueryNode, t_SlopQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, SlopQueryNode, t_SlopQueryNode_init_, 0, 0, t_SlopQueryNode__fields_, 0, 0);

              void t_SlopQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(SlopQueryNode), module, "SlopQueryNode", 0);
              }

              void t_SlopQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(SlopQueryNode).tp_dict, "class_", make_descriptor(SlopQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(SlopQueryNode).tp_dict, "wrapfn_", make_descriptor(t_SlopQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(SlopQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_SlopQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, SlopQueryNode::initializeClass, 1)))
                  return NULL;
                return t_SlopQueryNode::wrap_Object(SlopQueryNode(((t_SlopQueryNode *) arg)->object.this$));
              }
              static PyObject *t_SlopQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, SlopQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_SlopQueryNode_init_(t_SlopQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                jint a1;
                SlopQueryNode object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = SlopQueryNode(a0, a1));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_SlopQueryNode_cloneTree(t_SlopQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(SlopQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_SlopQueryNode_getChild(t_SlopQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.getChild());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
              }

              static PyObject *t_SlopQueryNode_getField(t_SlopQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_SlopQueryNode_getValue(t_SlopQueryNode *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getValue());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_SlopQueryNode_setField(t_SlopQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setField(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setField", arg);
                return NULL;
              }

              static PyObject *t_SlopQueryNode_toQueryString(t_SlopQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(SlopQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_SlopQueryNode_toString(t_SlopQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(SlopQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_SlopQueryNode_get__child(t_SlopQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode value((jobject) NULL);
                OBJ_CALL(value = self->object.getChild());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(value);
              }

              static PyObject *t_SlopQueryNode_get__field(t_SlopQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_SlopQueryNode_set__field(t_SlopQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setField(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "field", arg);
                return -1;
              }

              static PyObject *t_SlopQueryNode_get__value(t_SlopQueryNode *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getValue());
                return PyInt_FromLong((long) value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::class$ = NULL;
          jmethodID *SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::mids$ = NULL;
          bool SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::live$ = false;

          jclass SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getSize_54c6a179] = env->getMethodID(cls, "getSize", "()I");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_rewrite_63657170] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/MultiTermQuery;)Lorg/apache/lucene/search/spans/SpanQuery;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite(jint a0) : ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          jboolean SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::getSize() const
          {
            return env->callIntMethod(this$, mids$[mid_getSize_54c6a179]);
          }

          jint SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::org::apache::lucene::search::spans::SpanQuery SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::rewrite(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::search::MultiTermQuery & a1) const
          {
            return ::org::apache::lucene::search::spans::SpanQuery(env->callObjectMethod(this$, mids$[mid_rewrite_63657170], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_of_(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, PyObject *args);
          static int t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_init_(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_equals(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, PyObject *args);
          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_getSize(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self);
          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_hashCode(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, PyObject *args);
          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_rewrite(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, PyObject *args);
          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_get__size(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, void *data);
          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_get__parameters_(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, void *data);
          static PyGetSetDef t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite__fields_[] = {
            DECLARE_GET_FIELD(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, size),
            DECLARE_GET_FIELD(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite__methods_[] = {
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, of_, METH_VARARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, equals, METH_VARARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, getSize, METH_NOARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, rewrite, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, ::org::apache::lucene::search::spans::SpanMultiTermQueryWrapper$SpanRewriteMethod, SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite, t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_init_, 0, 0, t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite__fields_, 0, 0);
          PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::wrap_Object(const SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self = (t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self = (t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite), module, "SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite", 0);
          }

          void t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite).tp_dict, "class_", make_descriptor(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite).tp_dict, "wrapfn_", make_descriptor(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::initializeClass, 1)))
              return NULL;
            return t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::wrap_Object(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite(((t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *) arg)->object.this$));
          }
          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_of_(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_init_(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite object((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              INT_CALL(object = SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_equals(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_getSize(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getSize());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_hashCode(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_rewrite(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::MultiTermQuery a1((jobject) NULL);
            ::org::apache::lucene::search::spans::SpanQuery result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::MultiTermQuery::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.rewrite(a0, a1));
              return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite), (PyObject *) self, "rewrite", args, 2);
          }
          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_get__parameters_(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite_get__size(t_SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getSize());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/TopOrdAndFloatQueue$OrdAndValue.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *TopOrdAndFloatQueue$OrdAndValue::class$ = NULL;
        jmethodID *TopOrdAndFloatQueue$OrdAndValue::mids$ = NULL;
        jfieldID *TopOrdAndFloatQueue$OrdAndValue::fids$ = NULL;
        bool TopOrdAndFloatQueue$OrdAndValue::live$ = false;

        jclass TopOrdAndFloatQueue$OrdAndValue::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/TopOrdAndFloatQueue$OrdAndValue");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_ord] = env->getFieldID(cls, "ord", "I");
            fids$[fid_value] = env->getFieldID(cls, "value", "F");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TopOrdAndFloatQueue$OrdAndValue::TopOrdAndFloatQueue$OrdAndValue() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jint TopOrdAndFloatQueue$OrdAndValue::_get_ord() const
        {
          return env->getIntField(this$, fids$[fid_ord]);
        }

        void TopOrdAndFloatQueue$OrdAndValue::_set_ord(jint a0) const
        {
          env->setIntField(this$, fids$[fid_ord], a0);
        }

        jfloat TopOrdAndFloatQueue$OrdAndValue::_get_value() const
        {
          return env->getFloatField(this$, fids$[fid_value]);
        }

        void TopOrdAndFloatQueue$OrdAndValue::_set_value(jfloat a0) const
        {
          env->setFloatField(this$, fids$[fid_value], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_of_(t_TopOrdAndFloatQueue$OrdAndValue *self, PyObject *args);
        static int t_TopOrdAndFloatQueue$OrdAndValue_init_(t_TopOrdAndFloatQueue$OrdAndValue *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_get__ord(t_TopOrdAndFloatQueue$OrdAndValue *self, void *data);
        static int t_TopOrdAndFloatQueue$OrdAndValue_set__ord(t_TopOrdAndFloatQueue$OrdAndValue *self, PyObject *arg, void *data);
        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_get__value(t_TopOrdAndFloatQueue$OrdAndValue *self, void *data);
        static int t_TopOrdAndFloatQueue$OrdAndValue_set__value(t_TopOrdAndFloatQueue$OrdAndValue *self, PyObject *arg, void *data);

        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_get__parameters_(t_TopOrdAndFloatQueue$OrdAndValue *self, void *data);
        static PyGetSetDef t_TopOrdAndFloatQueue$OrdAndValue__fields_[] = {
          DECLARE_GETSET_FIELD(t_TopOrdAndFloatQueue$OrdAndValue, ord),
          DECLARE_GETSET_FIELD(t_TopOrdAndFloatQueue$OrdAndValue, value),
          DECLARE_GET_FIELD(t_TopOrdAndFloatQueue$OrdAndValue, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TopOrdAndFloatQueue$OrdAndValue__methods_[] = {
          DECLARE_METHOD(t_TopOrdAndFloatQueue$OrdAndValue, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopOrdAndFloatQueue$OrdAndValue, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopOrdAndFloatQueue$OrdAndValue, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TopOrdAndFloatQueue$OrdAndValue, t_TopOrdAndFloatQueue$OrdAndValue, ::java::lang::Object, TopOrdAndFloatQueue$OrdAndValue, t_TopOrdAndFloatQueue$OrdAndValue_init_, 0, 0, t_TopOrdAndFloatQueue$OrdAndValue__fields_, 0, 0);
        PyObject *t_TopOrdAndFloatQueue$OrdAndValue::wrap_Object(const TopOrdAndFloatQueue$OrdAndValue& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopOrdAndFloatQueue$OrdAndValue::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopOrdAndFloatQueue$OrdAndValue *self = (t_TopOrdAndFloatQueue$OrdAndValue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_TopOrdAndFloatQueue$OrdAndValue::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopOrdAndFloatQueue$OrdAndValue::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopOrdAndFloatQueue$OrdAndValue *self = (t_TopOrdAndFloatQueue$OrdAndValue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_TopOrdAndFloatQueue$OrdAndValue::install(PyObject *module)
        {
          installType(&PY_TYPE(TopOrdAndFloatQueue$OrdAndValue), module, "TopOrdAndFloatQueue$OrdAndValue", 0);
        }

        void t_TopOrdAndFloatQueue$OrdAndValue::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TopOrdAndFloatQueue$OrdAndValue).tp_dict, "class_", make_descriptor(TopOrdAndFloatQueue$OrdAndValue::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TopOrdAndFloatQueue$OrdAndValue).tp_dict, "wrapfn_", make_descriptor(t_TopOrdAndFloatQueue$OrdAndValue::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TopOrdAndFloatQueue$OrdAndValue).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TopOrdAndFloatQueue$OrdAndValue::initializeClass, 1)))
            return NULL;
          return t_TopOrdAndFloatQueue$OrdAndValue::wrap_Object(TopOrdAndFloatQueue$OrdAndValue(((t_TopOrdAndFloatQueue$OrdAndValue *) arg)->object.this$));
        }
        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TopOrdAndFloatQueue$OrdAndValue::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_of_(t_TopOrdAndFloatQueue$OrdAndValue *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_TopOrdAndFloatQueue$OrdAndValue_init_(t_TopOrdAndFloatQueue$OrdAndValue *self, PyObject *args, PyObject *kwds)
        {
          TopOrdAndFloatQueue$OrdAndValue object((jobject) NULL);

          INT_CALL(object = TopOrdAndFloatQueue$OrdAndValue());
          self->object = object;
          self->parameters[0] = &::org::apache::lucene::facet::PY_TYPE(TopOrdAndFloatQueue$OrdAndValue);

          return 0;
        }
        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_get__parameters_(t_TopOrdAndFloatQueue$OrdAndValue *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_get__ord(t_TopOrdAndFloatQueue$OrdAndValue *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_ord());
          return PyInt_FromLong((long) value);
        }
        static int t_TopOrdAndFloatQueue$OrdAndValue_set__ord(t_TopOrdAndFloatQueue$OrdAndValue *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_ord(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "ord", arg);
          return -1;
        }

        static PyObject *t_TopOrdAndFloatQueue$OrdAndValue_get__value(t_TopOrdAndFloatQueue$OrdAndValue *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object._get_value());
          return PyFloat_FromDouble((double) value);
        }
        static int t_TopOrdAndFloatQueue$OrdAndValue_set__value(t_TopOrdAndFloatQueue$OrdAndValue *self, PyObject *arg, void *data)
        {
          jfloat value;
          if (!parseArg(arg, "F", &value))
          {
            INT_CALL(self->object._set_value(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "value", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/PrefixAwareTokenFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/Token.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *PrefixAwareTokenFilter::class$ = NULL;
          jmethodID *PrefixAwareTokenFilter::mids$ = NULL;
          bool PrefixAwareTokenFilter::live$ = false;

          jclass PrefixAwareTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/PrefixAwareTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_74ceae3e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_getPrefix_71f550c9] = env->getMethodID(cls, "getPrefix", "()Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getSuffix_71f550c9] = env->getMethodID(cls, "getSuffix", "()Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_setPrefix_c7c794dc] = env->getMethodID(cls, "setPrefix", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_setSuffix_c7c794dc] = env->getMethodID(cls, "setSuffix", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_updateSuffixToken_a810a20b] = env->getMethodID(cls, "updateSuffixToken", "(Lorg/apache/lucene/analysis/Token;Lorg/apache/lucene/analysis/Token;)Lorg/apache/lucene/analysis/Token;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PrefixAwareTokenFilter::PrefixAwareTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::org::apache::lucene::analysis::TokenStream(env->newObject(initializeClass, &mids$, mid_init$_74ceae3e, a0.this$, a1.this$)) {}

          void PrefixAwareTokenFilter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          void PrefixAwareTokenFilter::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          ::org::apache::lucene::analysis::TokenStream PrefixAwareTokenFilter::getPrefix() const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_getPrefix_71f550c9]));
          }

          ::org::apache::lucene::analysis::TokenStream PrefixAwareTokenFilter::getSuffix() const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_getSuffix_71f550c9]));
          }

          jboolean PrefixAwareTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void PrefixAwareTokenFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }

          void PrefixAwareTokenFilter::setPrefix(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPrefix_c7c794dc], a0.this$);
          }

          void PrefixAwareTokenFilter::setSuffix(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setSuffix_c7c794dc], a0.this$);
          }

          ::org::apache::lucene::analysis::Token PrefixAwareTokenFilter::updateSuffixToken(const ::org::apache::lucene::analysis::Token & a0, const ::org::apache::lucene::analysis::Token & a1) const
          {
            return ::org::apache::lucene::analysis::Token(env->callObjectMethod(this$, mids$[mid_updateSuffixToken_a810a20b], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_PrefixAwareTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PrefixAwareTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PrefixAwareTokenFilter_init_(t_PrefixAwareTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PrefixAwareTokenFilter_close(t_PrefixAwareTokenFilter *self, PyObject *args);
          static PyObject *t_PrefixAwareTokenFilter_end(t_PrefixAwareTokenFilter *self, PyObject *args);
          static PyObject *t_PrefixAwareTokenFilter_getPrefix(t_PrefixAwareTokenFilter *self);
          static PyObject *t_PrefixAwareTokenFilter_getSuffix(t_PrefixAwareTokenFilter *self);
          static PyObject *t_PrefixAwareTokenFilter_incrementToken(t_PrefixAwareTokenFilter *self, PyObject *args);
          static PyObject *t_PrefixAwareTokenFilter_reset(t_PrefixAwareTokenFilter *self, PyObject *args);
          static PyObject *t_PrefixAwareTokenFilter_setPrefix(t_PrefixAwareTokenFilter *self, PyObject *arg);
          static PyObject *t_PrefixAwareTokenFilter_setSuffix(t_PrefixAwareTokenFilter *self, PyObject *arg);
          static PyObject *t_PrefixAwareTokenFilter_updateSuffixToken(t_PrefixAwareTokenFilter *self, PyObject *args);
          static PyObject *t_PrefixAwareTokenFilter_get__prefix(t_PrefixAwareTokenFilter *self, void *data);
          static int t_PrefixAwareTokenFilter_set__prefix(t_PrefixAwareTokenFilter *self, PyObject *arg, void *data);
          static PyObject *t_PrefixAwareTokenFilter_get__suffix(t_PrefixAwareTokenFilter *self, void *data);
          static int t_PrefixAwareTokenFilter_set__suffix(t_PrefixAwareTokenFilter *self, PyObject *arg, void *data);
          static PyGetSetDef t_PrefixAwareTokenFilter__fields_[] = {
            DECLARE_GETSET_FIELD(t_PrefixAwareTokenFilter, prefix),
            DECLARE_GETSET_FIELD(t_PrefixAwareTokenFilter, suffix),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PrefixAwareTokenFilter__methods_[] = {
            DECLARE_METHOD(t_PrefixAwareTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PrefixAwareTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PrefixAwareTokenFilter, close, METH_VARARGS),
            DECLARE_METHOD(t_PrefixAwareTokenFilter, end, METH_VARARGS),
            DECLARE_METHOD(t_PrefixAwareTokenFilter, getPrefix, METH_NOARGS),
            DECLARE_METHOD(t_PrefixAwareTokenFilter, getSuffix, METH_NOARGS),
            DECLARE_METHOD(t_PrefixAwareTokenFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_PrefixAwareTokenFilter, reset, METH_VARARGS),
            DECLARE_METHOD(t_PrefixAwareTokenFilter, setPrefix, METH_O),
            DECLARE_METHOD(t_PrefixAwareTokenFilter, setSuffix, METH_O),
            DECLARE_METHOD(t_PrefixAwareTokenFilter, updateSuffixToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PrefixAwareTokenFilter, t_PrefixAwareTokenFilter, ::org::apache::lucene::analysis::TokenStream, PrefixAwareTokenFilter, t_PrefixAwareTokenFilter_init_, 0, 0, t_PrefixAwareTokenFilter__fields_, 0, 0);

          void t_PrefixAwareTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PrefixAwareTokenFilter), module, "PrefixAwareTokenFilter", 0);
          }

          void t_PrefixAwareTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PrefixAwareTokenFilter).tp_dict, "class_", make_descriptor(PrefixAwareTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PrefixAwareTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_PrefixAwareTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PrefixAwareTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PrefixAwareTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PrefixAwareTokenFilter::initializeClass, 1)))
              return NULL;
            return t_PrefixAwareTokenFilter::wrap_Object(PrefixAwareTokenFilter(((t_PrefixAwareTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_PrefixAwareTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PrefixAwareTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PrefixAwareTokenFilter_init_(t_PrefixAwareTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
            PrefixAwareTokenFilter object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
            {
              INT_CALL(object = PrefixAwareTokenFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PrefixAwareTokenFilter_close(t_PrefixAwareTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PrefixAwareTokenFilter), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_PrefixAwareTokenFilter_end(t_PrefixAwareTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PrefixAwareTokenFilter), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_PrefixAwareTokenFilter_getPrefix(t_PrefixAwareTokenFilter *self)
          {
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);
            OBJ_CALL(result = self->object.getPrefix());
            return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
          }

          static PyObject *t_PrefixAwareTokenFilter_getSuffix(t_PrefixAwareTokenFilter *self)
          {
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);
            OBJ_CALL(result = self->object.getSuffix());
            return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
          }

          static PyObject *t_PrefixAwareTokenFilter_incrementToken(t_PrefixAwareTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PrefixAwareTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_PrefixAwareTokenFilter_reset(t_PrefixAwareTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PrefixAwareTokenFilter), (PyObject *) self, "reset", args, 2);
          }

          static PyObject *t_PrefixAwareTokenFilter_setPrefix(t_PrefixAwareTokenFilter *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setPrefix(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPrefix", arg);
            return NULL;
          }

          static PyObject *t_PrefixAwareTokenFilter_setSuffix(t_PrefixAwareTokenFilter *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setSuffix(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setSuffix", arg);
            return NULL;
          }

          static PyObject *t_PrefixAwareTokenFilter_updateSuffixToken(t_PrefixAwareTokenFilter *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::Token a0((jobject) NULL);
            ::org::apache::lucene::analysis::Token a1((jobject) NULL);
            ::org::apache::lucene::analysis::Token result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Token::initializeClass, ::org::apache::lucene::analysis::Token::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.updateSuffixToken(a0, a1));
              return ::org::apache::lucene::analysis::t_Token::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "updateSuffixToken", args);
            return NULL;
          }

          static PyObject *t_PrefixAwareTokenFilter_get__prefix(t_PrefixAwareTokenFilter *self, void *data)
          {
            ::org::apache::lucene::analysis::TokenStream value((jobject) NULL);
            OBJ_CALL(value = self->object.getPrefix());
            return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(value);
          }
          static int t_PrefixAwareTokenFilter_set__prefix(t_PrefixAwareTokenFilter *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::analysis::TokenStream value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &value))
              {
                INT_CALL(self->object.setPrefix(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "prefix", arg);
            return -1;
          }

          static PyObject *t_PrefixAwareTokenFilter_get__suffix(t_PrefixAwareTokenFilter *self, void *data)
          {
            ::org::apache::lucene::analysis::TokenStream value((jobject) NULL);
            OBJ_CALL(value = self->object.getSuffix());
            return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(value);
          }
          static int t_PrefixAwareTokenFilter_set__suffix(t_PrefixAwareTokenFilter *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::analysis::TokenStream value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &value))
              {
                INT_CALL(self->object.setSuffix(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "suffix", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo$SubInfo.h"
#include "java/lang/Class.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FieldFragList$WeightedFragInfo::class$ = NULL;
          jmethodID *FieldFragList$WeightedFragInfo::mids$ = NULL;
          bool FieldFragList$WeightedFragInfo::live$ = false;

          jclass FieldFragList$WeightedFragInfo::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_efced3c4] = env->getMethodID(cls, "<init>", "(IILjava/util/List;F)V");
              mids$[mid_getEndOffset_54c6a179] = env->getMethodID(cls, "getEndOffset", "()I");
              mids$[mid_getStartOffset_54c6a179] = env->getMethodID(cls, "getStartOffset", "()I");
              mids$[mid_getSubInfos_87851566] = env->getMethodID(cls, "getSubInfos", "()Ljava/util/List;");
              mids$[mid_getTotalBoost_54c6a176] = env->getMethodID(cls, "getTotalBoost", "()F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FieldFragList$WeightedFragInfo::FieldFragList$WeightedFragInfo(jint a0, jint a1, const ::java::util::List & a2, jfloat a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_efced3c4, a0, a1, a2.this$, a3)) {}

          jint FieldFragList$WeightedFragInfo::getEndOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getEndOffset_54c6a179]);
          }

          jint FieldFragList$WeightedFragInfo::getStartOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getStartOffset_54c6a179]);
          }

          ::java::util::List FieldFragList$WeightedFragInfo::getSubInfos() const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getSubInfos_87851566]));
          }

          jfloat FieldFragList$WeightedFragInfo::getTotalBoost() const
          {
            return env->callFloatMethod(this$, mids$[mid_getTotalBoost_54c6a176]);
          }

          ::java::lang::String FieldFragList$WeightedFragInfo::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FieldFragList$WeightedFragInfo_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldFragList$WeightedFragInfo_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FieldFragList$WeightedFragInfo_init_(t_FieldFragList$WeightedFragInfo *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FieldFragList$WeightedFragInfo_getEndOffset(t_FieldFragList$WeightedFragInfo *self);
          static PyObject *t_FieldFragList$WeightedFragInfo_getStartOffset(t_FieldFragList$WeightedFragInfo *self);
          static PyObject *t_FieldFragList$WeightedFragInfo_getSubInfos(t_FieldFragList$WeightedFragInfo *self);
          static PyObject *t_FieldFragList$WeightedFragInfo_getTotalBoost(t_FieldFragList$WeightedFragInfo *self);
          static PyObject *t_FieldFragList$WeightedFragInfo_toString(t_FieldFragList$WeightedFragInfo *self, PyObject *args);
          static PyObject *t_FieldFragList$WeightedFragInfo_get__endOffset(t_FieldFragList$WeightedFragInfo *self, void *data);
          static PyObject *t_FieldFragList$WeightedFragInfo_get__startOffset(t_FieldFragList$WeightedFragInfo *self, void *data);
          static PyObject *t_FieldFragList$WeightedFragInfo_get__subInfos(t_FieldFragList$WeightedFragInfo *self, void *data);
          static PyObject *t_FieldFragList$WeightedFragInfo_get__totalBoost(t_FieldFragList$WeightedFragInfo *self, void *data);
          static PyGetSetDef t_FieldFragList$WeightedFragInfo__fields_[] = {
            DECLARE_GET_FIELD(t_FieldFragList$WeightedFragInfo, endOffset),
            DECLARE_GET_FIELD(t_FieldFragList$WeightedFragInfo, startOffset),
            DECLARE_GET_FIELD(t_FieldFragList$WeightedFragInfo, subInfos),
            DECLARE_GET_FIELD(t_FieldFragList$WeightedFragInfo, totalBoost),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldFragList$WeightedFragInfo__methods_[] = {
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo, getEndOffset, METH_NOARGS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo, getStartOffset, METH_NOARGS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo, getSubInfos, METH_NOARGS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo, getTotalBoost, METH_NOARGS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FieldFragList$WeightedFragInfo, t_FieldFragList$WeightedFragInfo, ::java::lang::Object, FieldFragList$WeightedFragInfo, t_FieldFragList$WeightedFragInfo_init_, 0, 0, t_FieldFragList$WeightedFragInfo__fields_, 0, 0);

          void t_FieldFragList$WeightedFragInfo::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldFragList$WeightedFragInfo), module, "FieldFragList$WeightedFragInfo", 0);
            PyDict_SetItemString(PY_TYPE(FieldFragList$WeightedFragInfo).tp_dict, "SubInfo", make_descriptor(&PY_TYPE(FieldFragList$WeightedFragInfo$SubInfo)));
          }

          void t_FieldFragList$WeightedFragInfo::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FieldFragList$WeightedFragInfo).tp_dict, "class_", make_descriptor(FieldFragList$WeightedFragInfo::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FieldFragList$WeightedFragInfo).tp_dict, "wrapfn_", make_descriptor(t_FieldFragList$WeightedFragInfo::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FieldFragList$WeightedFragInfo).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldFragList$WeightedFragInfo_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldFragList$WeightedFragInfo::initializeClass, 1)))
              return NULL;
            return t_FieldFragList$WeightedFragInfo::wrap_Object(FieldFragList$WeightedFragInfo(((t_FieldFragList$WeightedFragInfo *) arg)->object.this$));
          }
          static PyObject *t_FieldFragList$WeightedFragInfo_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldFragList$WeightedFragInfo::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FieldFragList$WeightedFragInfo_init_(t_FieldFragList$WeightedFragInfo *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            jint a1;
            ::java::util::List a2((jobject) NULL);
            PyTypeObject **p2;
            jfloat a3;
            FieldFragList$WeightedFragInfo object((jobject) NULL);

            if (!parseArgs(args, "IIKF", ::java::util::List::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_List::parameters_, &a3))
            {
              INT_CALL(object = FieldFragList$WeightedFragInfo(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FieldFragList$WeightedFragInfo_getEndOffset(t_FieldFragList$WeightedFragInfo *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEndOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo_getStartOffset(t_FieldFragList$WeightedFragInfo *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getStartOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo_getSubInfos(t_FieldFragList$WeightedFragInfo *self)
          {
            ::java::util::List result((jobject) NULL);
            OBJ_CALL(result = self->object.getSubInfos());
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::vectorhighlight::PY_TYPE(FieldFragList$WeightedFragInfo$SubInfo));
          }

          static PyObject *t_FieldFragList$WeightedFragInfo_getTotalBoost(t_FieldFragList$WeightedFragInfo *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getTotalBoost());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo_toString(t_FieldFragList$WeightedFragInfo *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(FieldFragList$WeightedFragInfo), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo_get__endOffset(t_FieldFragList$WeightedFragInfo *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEndOffset());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo_get__startOffset(t_FieldFragList$WeightedFragInfo *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getStartOffset());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo_get__subInfos(t_FieldFragList$WeightedFragInfo *self, void *data)
          {
            ::java::util::List value((jobject) NULL);
            OBJ_CALL(value = self->object.getSubInfos());
            return ::java::util::t_List::wrap_Object(value);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo_get__totalBoost(t_FieldFragList$WeightedFragInfo *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getTotalBoost());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/hyphenation/PatternParser.h"
#include "java/io/File.h"
#include "org/apache/lucene/analysis/compound/hyphenation/PatternConsumer.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {

            ::java::lang::Class *PatternParser::class$ = NULL;
            jmethodID *PatternParser::mids$ = NULL;
            bool PatternParser::live$ = false;

            jclass PatternParser::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/hyphenation/PatternParser");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_f6e11b3c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/compound/hyphenation/PatternConsumer;)V");
                mids$[mid_characters_6f0bb356] = env->getMethodID(cls, "characters", "([CII)V");
                mids$[mid_endElement_9c119564] = env->getMethodID(cls, "endElement", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");
                mids$[mid_parse_5fdc3f48] = env->getMethodID(cls, "parse", "(Ljava/lang/String;)V");
                mids$[mid_parse_c3dacf57] = env->getMethodID(cls, "parse", "(Ljava/io/File;)V");
                mids$[mid_setConsumer_f6e11b3c] = env->getMethodID(cls, "setConsumer", "(Lorg/apache/lucene/analysis/compound/hyphenation/PatternConsumer;)V");
                mids$[mid_getPattern_97a5258f] = env->getStaticMethodID(cls, "getPattern", "(Ljava/lang/String;)Ljava/lang/String;");
                mids$[mid_readToken_7614059b] = env->getMethodID(cls, "readToken", "(Ljava/lang/StringBuilder;)Ljava/lang/String;");
                mids$[mid_normalizeException_27b9ce2f] = env->getMethodID(cls, "normalizeException", "(Ljava/util/ArrayList;)Ljava/util/ArrayList;");
                mids$[mid_getExceptionWord_0c7b6c64] = env->getMethodID(cls, "getExceptionWord", "(Ljava/util/ArrayList;)Ljava/lang/String;");
                mids$[mid_getInterletterValues_97a5258f] = env->getStaticMethodID(cls, "getInterletterValues", "(Ljava/lang/String;)Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            PatternParser::PatternParser() : ::org::xml::sax::helpers::DefaultHandler(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            PatternParser::PatternParser(const ::org::apache::lucene::analysis::compound::hyphenation::PatternConsumer & a0) : ::org::xml::sax::helpers::DefaultHandler(env->newObject(initializeClass, &mids$, mid_init$_f6e11b3c, a0.this$)) {}

            void PatternParser::characters(const JArray< jchar > & a0, jint a1, jint a2) const
            {
              env->callVoidMethod(this$, mids$[mid_characters_6f0bb356], a0.this$, a1, a2);
            }

            void PatternParser::endElement(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2) const
            {
              env->callVoidMethod(this$, mids$[mid_endElement_9c119564], a0.this$, a1.this$, a2.this$);
            }

            void PatternParser::parse(const ::java::lang::String & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_parse_5fdc3f48], a0.this$);
            }

            void PatternParser::parse(const ::java::io::File & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_parse_c3dacf57], a0.this$);
            }

            void PatternParser::setConsumer(const ::org::apache::lucene::analysis::compound::hyphenation::PatternConsumer & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setConsumer_f6e11b3c], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {
            static PyObject *t_PatternParser_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_PatternParser_instance_(PyTypeObject *type, PyObject *arg);
            static int t_PatternParser_init_(t_PatternParser *self, PyObject *args, PyObject *kwds);
            static PyObject *t_PatternParser_characters(t_PatternParser *self, PyObject *args);
            static PyObject *t_PatternParser_endElement(t_PatternParser *self, PyObject *args);
            static PyObject *t_PatternParser_parse(t_PatternParser *self, PyObject *args);
            static PyObject *t_PatternParser_setConsumer(t_PatternParser *self, PyObject *arg);
            static int t_PatternParser_set__consumer(t_PatternParser *self, PyObject *arg, void *data);
            static PyGetSetDef t_PatternParser__fields_[] = {
              DECLARE_SET_FIELD(t_PatternParser, consumer),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_PatternParser__methods_[] = {
              DECLARE_METHOD(t_PatternParser, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_PatternParser, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_PatternParser, characters, METH_VARARGS),
              DECLARE_METHOD(t_PatternParser, endElement, METH_VARARGS),
              DECLARE_METHOD(t_PatternParser, parse, METH_VARARGS),
              DECLARE_METHOD(t_PatternParser, setConsumer, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(PatternParser, t_PatternParser, ::org::xml::sax::helpers::DefaultHandler, PatternParser, t_PatternParser_init_, 0, 0, t_PatternParser__fields_, 0, 0);

            void t_PatternParser::install(PyObject *module)
            {
              installType(&PY_TYPE(PatternParser), module, "PatternParser", 0);
            }

            void t_PatternParser::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(PatternParser).tp_dict, "class_", make_descriptor(PatternParser::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(PatternParser).tp_dict, "wrapfn_", make_descriptor(t_PatternParser::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(PatternParser).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_PatternParser_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, PatternParser::initializeClass, 1)))
                return NULL;
              return t_PatternParser::wrap_Object(PatternParser(((t_PatternParser *) arg)->object.this$));
            }
            static PyObject *t_PatternParser_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, PatternParser::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_PatternParser_init_(t_PatternParser *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  PatternParser object((jobject) NULL);

                  INT_CALL(object = PatternParser());
                  self->object = object;
                  break;
                }
                goto err;
               case 1:
                {
                  ::org::apache::lucene::analysis::compound::hyphenation::PatternConsumer a0((jobject) NULL);
                  PatternParser object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::analysis::compound::hyphenation::PatternConsumer::initializeClass, &a0))
                  {
                    INT_CALL(object = PatternParser(a0));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_PatternParser_characters(t_PatternParser *self, PyObject *args)
            {
              JArray< jchar > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[CII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.characters(a0, a1, a2));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(PatternParser), (PyObject *) self, "characters", args, 2);
            }

            static PyObject *t_PatternParser_endElement(t_PatternParser *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);

              if (!parseArgs(args, "sss", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.endElement(a0, a1, a2));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(PatternParser), (PyObject *) self, "endElement", args, 2);
            }

            static PyObject *t_PatternParser_parse(t_PatternParser *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    OBJ_CALL(self->object.parse(a0));
                    Py_RETURN_NONE;
                  }
                }
                {
                  ::java::io::File a0((jobject) NULL);

                  if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
                  {
                    OBJ_CALL(self->object.parse(a0));
                    Py_RETURN_NONE;
                  }
                }
              }

              PyErr_SetArgsError((PyObject *) self, "parse", args);
              return NULL;
            }

            static PyObject *t_PatternParser_setConsumer(t_PatternParser *self, PyObject *arg)
            {
              ::org::apache::lucene::analysis::compound::hyphenation::PatternConsumer a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::compound::hyphenation::PatternConsumer::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setConsumer(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setConsumer", arg);
              return NULL;
            }

            static int t_PatternParser_set__consumer(t_PatternParser *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::analysis::compound::hyphenation::PatternConsumer value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::analysis::compound::hyphenation::PatternConsumer::initializeClass, &value))
                {
                  INT_CALL(self->object.setConsumer(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "consumer", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Double.h"
#include "java/lang/Comparable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Double::class$ = NULL;
    jmethodID *Double::mids$ = NULL;
    bool Double::live$ = false;
    jint Double::MAX_EXPONENT = (jint) 0;
    jdouble Double::MAX_VALUE = (jdouble) 0;
    jint Double::MIN_EXPONENT = (jint) 0;
    jdouble Double::MIN_NORMAL = (jdouble) 0;
    jdouble Double::MIN_VALUE = (jdouble) 0;
    jdouble Double::NEGATIVE_INFINITY = (jdouble) 0;
    jdouble Double::NaN = (jdouble) 0;
    jdouble Double::POSITIVE_INFINITY = (jdouble) 0;
    jint Double::SIZE = (jint) 0;
    ::java::lang::Class *Double::TYPE = NULL;

    jclass Double::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Double");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_5d1c7645] = env->getMethodID(cls, "<init>", "(D)V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_byteValue_54c6a172] = env->getMethodID(cls, "byteValue", "()B");
        mids$[mid_compare_b1e28667] = env->getStaticMethodID(cls, "compare", "(DD)I");
        mids$[mid_compareTo_8baed073] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Double;)I");
        mids$[mid_doubleToLongBits_5d1c7659] = env->getStaticMethodID(cls, "doubleToLongBits", "(D)J");
        mids$[mid_doubleToRawLongBits_5d1c7659] = env->getStaticMethodID(cls, "doubleToRawLongBits", "(D)J");
        mids$[mid_doubleValue_54c6a174] = env->getMethodID(cls, "doubleValue", "()D");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_floatValue_54c6a176] = env->getMethodID(cls, "floatValue", "()F");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_intValue_54c6a179] = env->getMethodID(cls, "intValue", "()I");
        mids$[mid_isInfinite_54c6a16a] = env->getMethodID(cls, "isInfinite", "()Z");
        mids$[mid_isInfinite_5d1c7649] = env->getStaticMethodID(cls, "isInfinite", "(D)Z");
        mids$[mid_isNaN_54c6a16a] = env->getMethodID(cls, "isNaN", "()Z");
        mids$[mid_isNaN_5d1c7649] = env->getStaticMethodID(cls, "isNaN", "(D)Z");
        mids$[mid_longBitsToDouble_0ee6df3d] = env->getStaticMethodID(cls, "longBitsToDouble", "(J)D");
        mids$[mid_longValue_54c6a17a] = env->getMethodID(cls, "longValue", "()J");
        mids$[mid_parseDouble_5fdc3f5a] = env->getStaticMethodID(cls, "parseDouble", "(Ljava/lang/String;)D");
        mids$[mid_shortValue_54c6a163] = env->getMethodID(cls, "shortValue", "()S");
        mids$[mid_toHexString_1b4624f8] = env->getStaticMethodID(cls, "toHexString", "(D)Ljava/lang/String;");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_toString_1b4624f8] = env->getStaticMethodID(cls, "toString", "(D)Ljava/lang/String;");
        mids$[mid_valueOf_ad1fcbf0] = env->getStaticMethodID(cls, "valueOf", "(D)Ljava/lang/Double;");
        mids$[mid_valueOf_16296787] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Ljava/lang/Double;");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        MAX_EXPONENT = env->getStaticIntField(cls, "MAX_EXPONENT");
        MAX_VALUE = env->getStaticDoubleField(cls, "MAX_VALUE");
        MIN_EXPONENT = env->getStaticIntField(cls, "MIN_EXPONENT");
        MIN_NORMAL = env->getStaticDoubleField(cls, "MIN_NORMAL");
        MIN_VALUE = env->getStaticDoubleField(cls, "MIN_VALUE");
        NEGATIVE_INFINITY = env->getStaticDoubleField(cls, "NEGATIVE_INFINITY");
        NaN = env->getStaticDoubleField(cls, "NaN");
        POSITIVE_INFINITY = env->getStaticDoubleField(cls, "POSITIVE_INFINITY");
        SIZE = env->getStaticIntField(cls, "SIZE");
        TYPE = new ::java::lang::Class(env->getStaticObjectField(cls, "TYPE", "Ljava/lang/Class;"));
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Double::Double(jdouble a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_5d1c7645, a0)) {}

    Double::Double(const ::java::lang::String & a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    jbyte Double::byteValue() const
    {
      return env->callByteMethod(this$, mids$[mid_byteValue_54c6a172]);
    }

    jint Double::compare(jdouble a0, jdouble a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_compare_b1e28667], a0, a1);
    }

    jint Double::compareTo(const Double & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareTo_8baed073], a0.this$);
    }

    jlong Double::doubleToLongBits(jdouble a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_doubleToLongBits_5d1c7659], a0);
    }

    jlong Double::doubleToRawLongBits(jdouble a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_doubleToRawLongBits_5d1c7659], a0);
    }

    jdouble Double::doubleValue() const
    {
      return env->callDoubleMethod(this$, mids$[mid_doubleValue_54c6a174]);
    }

    jboolean Double::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    jfloat Double::floatValue() const
    {
      return env->callFloatMethod(this$, mids$[mid_floatValue_54c6a176]);
    }

    jint Double::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jint Double::intValue() const
    {
      return env->callIntMethod(this$, mids$[mid_intValue_54c6a179]);
    }

    jboolean Double::isInfinite() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isInfinite_54c6a16a]);
    }

    jboolean Double::isInfinite(jdouble a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isInfinite_5d1c7649], a0);
    }

    jboolean Double::isNaN() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isNaN_54c6a16a]);
    }

    jboolean Double::isNaN(jdouble a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isNaN_5d1c7649], a0);
    }

    jdouble Double::longBitsToDouble(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticDoubleMethod(cls, mids$[mid_longBitsToDouble_0ee6df3d], a0);
    }

    jlong Double::longValue() const
    {
      return env->callLongMethod(this$, mids$[mid_longValue_54c6a17a]);
    }

    jdouble Double::parseDouble(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticDoubleMethod(cls, mids$[mid_parseDouble_5fdc3f5a], a0.this$);
    }

    jshort Double::shortValue() const
    {
      return env->callShortMethod(this$, mids$[mid_shortValue_54c6a163]);
    }

    ::java::lang::String Double::toHexString(jdouble a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toHexString_1b4624f8], a0));
    }

    ::java::lang::String Double::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    ::java::lang::String Double::toString(jdouble a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_1b4624f8], a0));
    }

    Double Double::valueOf(jdouble a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Double(env->callStaticObjectMethod(cls, mids$[mid_valueOf_ad1fcbf0], a0));
    }

    Double Double::valueOf(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Double(env->callStaticObjectMethod(cls, mids$[mid_valueOf_16296787], a0.this$));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Double_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Double_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Double_init_(t_Double *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Double_byteValue(t_Double *self, PyObject *args);
    static PyObject *t_Double_compare(PyTypeObject *type, PyObject *args);
    static PyObject *t_Double_compareTo(t_Double *self, PyObject *arg);
    static PyObject *t_Double_doubleToLongBits(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Double_doubleToRawLongBits(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Double_doubleValue(t_Double *self, PyObject *args);
    static PyObject *t_Double_equals(t_Double *self, PyObject *args);
    static PyObject *t_Double_floatValue(t_Double *self, PyObject *args);
    static PyObject *t_Double_hashCode(t_Double *self, PyObject *args);
    static PyObject *t_Double_intValue(t_Double *self, PyObject *args);
    static PyObject *t_Double_isInfinite(t_Double *self);
    static PyObject *t_Double_isInfinite_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Double_isNaN(t_Double *self);
    static PyObject *t_Double_isNaN_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Double_longBitsToDouble(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Double_longValue(t_Double *self, PyObject *args);
    static PyObject *t_Double_parseDouble(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Double_shortValue(t_Double *self, PyObject *args);
    static PyObject *t_Double_toHexString(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Double_toString(t_Double *self, PyObject *args);
    static PyObject *t_Double_toString_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Double_valueOf(PyTypeObject *type, PyObject *args);
    static PyObject *t_Double_get__infinite(t_Double *self, void *data);
    static PyObject *t_Double_get__naN(t_Double *self, void *data);
    static PyGetSetDef t_Double__fields_[] = {
      DECLARE_GET_FIELD(t_Double, infinite),
      DECLARE_GET_FIELD(t_Double, naN),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Double__methods_[] = {
      DECLARE_METHOD(t_Double, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Double, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Double, byteValue, METH_VARARGS),
      DECLARE_METHOD(t_Double, compare, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Double, compareTo, METH_O),
      DECLARE_METHOD(t_Double, doubleToLongBits, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Double, doubleToRawLongBits, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Double, doubleValue, METH_VARARGS),
      DECLARE_METHOD(t_Double, equals, METH_VARARGS),
      DECLARE_METHOD(t_Double, floatValue, METH_VARARGS),
      DECLARE_METHOD(t_Double, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Double, intValue, METH_VARARGS),
      DECLARE_METHOD(t_Double, isInfinite, METH_NOARGS),
      DECLARE_METHOD(t_Double, isInfinite_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Double, isNaN, METH_NOARGS),
      DECLARE_METHOD(t_Double, isNaN_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Double, longBitsToDouble, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Double, longValue, METH_VARARGS),
      DECLARE_METHOD(t_Double, parseDouble, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Double, shortValue, METH_VARARGS),
      DECLARE_METHOD(t_Double, toHexString, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Double, toString, METH_VARARGS),
      DECLARE_METHOD(t_Double, toString_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Double, valueOf, METH_VARARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Double, t_Double, ::java::lang::Number, Double, t_Double_init_, 0, 0, t_Double__fields_, 0, 0);

    void t_Double::install(PyObject *module)
    {
      installType(&PY_TYPE(Double), module, "Double", 0);
    }

    void t_Double::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Double).tp_dict, "class_", make_descriptor(Double::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Double).tp_dict, "wrapfn_", make_descriptor(unboxDouble));
      PyDict_SetItemString(PY_TYPE(Double).tp_dict, "boxfn_", make_descriptor(boxDouble));
      env->getClass(Double::initializeClass);
      PyDict_SetItemString(PY_TYPE(Double).tp_dict, "MAX_EXPONENT", make_descriptor(Double::MAX_EXPONENT));
      PyDict_SetItemString(PY_TYPE(Double).tp_dict, "MAX_VALUE", make_descriptor(Double::MAX_VALUE));
      PyDict_SetItemString(PY_TYPE(Double).tp_dict, "MIN_EXPONENT", make_descriptor(Double::MIN_EXPONENT));
      PyDict_SetItemString(PY_TYPE(Double).tp_dict, "MIN_NORMAL", make_descriptor(Double::MIN_NORMAL));
      PyDict_SetItemString(PY_TYPE(Double).tp_dict, "MIN_VALUE", make_descriptor(Double::MIN_VALUE));
      PyDict_SetItemString(PY_TYPE(Double).tp_dict, "NEGATIVE_INFINITY", make_descriptor(Double::NEGATIVE_INFINITY));
      PyDict_SetItemString(PY_TYPE(Double).tp_dict, "NaN", make_descriptor(Double::NaN));
      PyDict_SetItemString(PY_TYPE(Double).tp_dict, "POSITIVE_INFINITY", make_descriptor(Double::POSITIVE_INFINITY));
      PyDict_SetItemString(PY_TYPE(Double).tp_dict, "SIZE", make_descriptor(Double::SIZE));
      PyDict_SetItemString(PY_TYPE(Double).tp_dict, "TYPE", make_descriptor(::java::lang::t_Class::wrap_Object(*Double::TYPE)));
    }

    static PyObject *t_Double_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Double::initializeClass, 1)))
        return NULL;
      return t_Double::wrap_Object(Double(((t_Double *) arg)->object.this$));
    }
    static PyObject *t_Double_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Double::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Double_init_(t_Double *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jdouble a0;
          Double object((jobject) NULL);

          if (!parseArgs(args, "D", &a0))
          {
            INT_CALL(object = Double(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Double object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Double(a0));
            self->object = object;
            break;
          }
        }
       default:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_Double_byteValue(t_Double *self, PyObject *args)
    {
      jbyte result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.byteValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Double), (PyObject *) self, "byteValue", args, 2);
    }

    static PyObject *t_Double_compare(PyTypeObject *type, PyObject *args)
    {
      jdouble a0;
      jdouble a1;
      jint result;

      if (!parseArgs(args, "DD", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Double::compare(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "compare", args);
      return NULL;
    }

    static PyObject *t_Double_compareTo(t_Double *self, PyObject *arg)
    {
      Double a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Double), &a0))
      {
        OBJ_CALL(result = self->object.compareTo(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
      return NULL;
    }

    static PyObject *t_Double_doubleToLongBits(PyTypeObject *type, PyObject *arg)
    {
      jdouble a0;
      jlong result;

      if (!parseArg(arg, "D", &a0))
      {
        OBJ_CALL(result = ::java::lang::Double::doubleToLongBits(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "doubleToLongBits", arg);
      return NULL;
    }

    static PyObject *t_Double_doubleToRawLongBits(PyTypeObject *type, PyObject *arg)
    {
      jdouble a0;
      jlong result;

      if (!parseArg(arg, "D", &a0))
      {
        OBJ_CALL(result = ::java::lang::Double::doubleToRawLongBits(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "doubleToRawLongBits", arg);
      return NULL;
    }

    static PyObject *t_Double_doubleValue(t_Double *self, PyObject *args)
    {
      jdouble result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.doubleValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(&PY_TYPE(Double), (PyObject *) self, "doubleValue", args, 2);
    }

    static PyObject *t_Double_equals(t_Double *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(Double), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Double_floatValue(t_Double *self, PyObject *args)
    {
      jfloat result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.floatValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(&PY_TYPE(Double), (PyObject *) self, "floatValue", args, 2);
    }

    static PyObject *t_Double_hashCode(t_Double *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Double), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Double_intValue(t_Double *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.intValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Double), (PyObject *) self, "intValue", args, 2);
    }

    static PyObject *t_Double_isInfinite(t_Double *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isInfinite());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Double_isInfinite_(PyTypeObject *type, PyObject *arg)
    {
      jdouble a0;
      jboolean result;

      if (!parseArg(arg, "D", &a0))
      {
        OBJ_CALL(result = ::java::lang::Double::isInfinite(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isInfinite_", arg);
      return NULL;
    }

    static PyObject *t_Double_isNaN(t_Double *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isNaN());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Double_isNaN_(PyTypeObject *type, PyObject *arg)
    {
      jdouble a0;
      jboolean result;

      if (!parseArg(arg, "D", &a0))
      {
        OBJ_CALL(result = ::java::lang::Double::isNaN(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isNaN_", arg);
      return NULL;
    }

    static PyObject *t_Double_longBitsToDouble(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      jdouble result;

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Double::longBitsToDouble(a0));
        return PyFloat_FromDouble((double) result);
      }

      PyErr_SetArgsError(type, "longBitsToDouble", arg);
      return NULL;
    }

    static PyObject *t_Double_longValue(t_Double *self, PyObject *args)
    {
      jlong result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.longValue());
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      return callSuper(&PY_TYPE(Double), (PyObject *) self, "longValue", args, 2);
    }

    static PyObject *t_Double_parseDouble(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      jdouble result;

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = ::java::lang::Double::parseDouble(a0));
        return PyFloat_FromDouble((double) result);
      }

      PyErr_SetArgsError(type, "parseDouble", arg);
      return NULL;
    }

    static PyObject *t_Double_shortValue(t_Double *self, PyObject *args)
    {
      jshort result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.shortValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Double), (PyObject *) self, "shortValue", args, 2);
    }

    static PyObject *t_Double_toHexString(PyTypeObject *type, PyObject *arg)
    {
      jdouble a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "D", &a0))
      {
        OBJ_CALL(result = ::java::lang::Double::toHexString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toHexString", arg);
      return NULL;
    }

    static PyObject *t_Double_toString(t_Double *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(Double), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Double_toString_(PyTypeObject *type, PyObject *args)
    {
      jdouble a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, "D", &a0))
      {
        OBJ_CALL(result = ::java::lang::Double::toString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toString_", args);
      return NULL;
    }

    static PyObject *t_Double_valueOf(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jdouble a0;
          Double result((jobject) NULL);

          if (!parseArgs(args, "D", &a0))
          {
            OBJ_CALL(result = ::java::lang::Double::valueOf(a0));
            return t_Double::wrap_Object(result);
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Double result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Double::valueOf(a0));
            return t_Double::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "valueOf", args);
      return NULL;
    }

    static PyObject *t_Double_get__infinite(t_Double *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isInfinite());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Double_get__naN(t_Double *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isNaN());
      Py_RETURN_BOOL(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FilterDirectoryReader$StandardReaderWrapper.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FilterDirectoryReader$StandardReaderWrapper::class$ = NULL;
        jmethodID *FilterDirectoryReader$StandardReaderWrapper::mids$ = NULL;
        bool FilterDirectoryReader$StandardReaderWrapper::live$ = false;

        jclass FilterDirectoryReader$StandardReaderWrapper::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FilterDirectoryReader$StandardReaderWrapper");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_wrap_3b1ad795] = env->getMethodID(cls, "wrap", "(Lorg/apache/lucene/index/AtomicReader;)Lorg/apache/lucene/index/AtomicReader;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterDirectoryReader$StandardReaderWrapper::FilterDirectoryReader$StandardReaderWrapper() : ::org::apache::lucene::index::FilterDirectoryReader$SubReaderWrapper(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::index::AtomicReader FilterDirectoryReader$StandardReaderWrapper::wrap(const ::org::apache::lucene::index::AtomicReader & a0) const
        {
          return ::org::apache::lucene::index::AtomicReader(env->callObjectMethod(this$, mids$[mid_wrap_3b1ad795], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FilterDirectoryReader$StandardReaderWrapper_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterDirectoryReader$StandardReaderWrapper_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterDirectoryReader$StandardReaderWrapper_of_(t_FilterDirectoryReader$StandardReaderWrapper *self, PyObject *args);
        static int t_FilterDirectoryReader$StandardReaderWrapper_init_(t_FilterDirectoryReader$StandardReaderWrapper *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterDirectoryReader$StandardReaderWrapper_wrap(t_FilterDirectoryReader$StandardReaderWrapper *self, PyObject *args);
        static PyObject *t_FilterDirectoryReader$StandardReaderWrapper_get__parameters_(t_FilterDirectoryReader$StandardReaderWrapper *self, void *data);
        static PyGetSetDef t_FilterDirectoryReader$StandardReaderWrapper__fields_[] = {
          DECLARE_GET_FIELD(t_FilterDirectoryReader$StandardReaderWrapper, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilterDirectoryReader$StandardReaderWrapper__methods_[] = {
          DECLARE_METHOD(t_FilterDirectoryReader$StandardReaderWrapper, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterDirectoryReader$StandardReaderWrapper, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterDirectoryReader$StandardReaderWrapper, of_, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectoryReader$StandardReaderWrapper, wrap, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilterDirectoryReader$StandardReaderWrapper, t_FilterDirectoryReader$StandardReaderWrapper, ::org::apache::lucene::index::FilterDirectoryReader$SubReaderWrapper, FilterDirectoryReader$StandardReaderWrapper, t_FilterDirectoryReader$StandardReaderWrapper_init_, 0, 0, t_FilterDirectoryReader$StandardReaderWrapper__fields_, 0, 0);
        PyObject *t_FilterDirectoryReader$StandardReaderWrapper::wrap_Object(const FilterDirectoryReader$StandardReaderWrapper& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FilterDirectoryReader$StandardReaderWrapper::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FilterDirectoryReader$StandardReaderWrapper *self = (t_FilterDirectoryReader$StandardReaderWrapper *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FilterDirectoryReader$StandardReaderWrapper::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FilterDirectoryReader$StandardReaderWrapper::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FilterDirectoryReader$StandardReaderWrapper *self = (t_FilterDirectoryReader$StandardReaderWrapper *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FilterDirectoryReader$StandardReaderWrapper::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterDirectoryReader$StandardReaderWrapper), module, "FilterDirectoryReader$StandardReaderWrapper", 0);
        }

        void t_FilterDirectoryReader$StandardReaderWrapper::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilterDirectoryReader$StandardReaderWrapper).tp_dict, "class_", make_descriptor(FilterDirectoryReader$StandardReaderWrapper::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilterDirectoryReader$StandardReaderWrapper).tp_dict, "wrapfn_", make_descriptor(t_FilterDirectoryReader$StandardReaderWrapper::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilterDirectoryReader$StandardReaderWrapper).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterDirectoryReader$StandardReaderWrapper_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterDirectoryReader$StandardReaderWrapper::initializeClass, 1)))
            return NULL;
          return t_FilterDirectoryReader$StandardReaderWrapper::wrap_Object(FilterDirectoryReader$StandardReaderWrapper(((t_FilterDirectoryReader$StandardReaderWrapper *) arg)->object.this$));
        }
        static PyObject *t_FilterDirectoryReader$StandardReaderWrapper_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterDirectoryReader$StandardReaderWrapper::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FilterDirectoryReader$StandardReaderWrapper_of_(t_FilterDirectoryReader$StandardReaderWrapper *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_FilterDirectoryReader$StandardReaderWrapper_init_(t_FilterDirectoryReader$StandardReaderWrapper *self, PyObject *args, PyObject *kwds)
        {
          FilterDirectoryReader$StandardReaderWrapper object((jobject) NULL);

          INT_CALL(object = FilterDirectoryReader$StandardReaderWrapper());
          self->object = object;
          self->parameters[0] = &::org::apache::lucene::index::PY_TYPE(AtomicReader);

          return 0;
        }

        static PyObject *t_FilterDirectoryReader$StandardReaderWrapper_wrap(t_FilterDirectoryReader$StandardReaderWrapper *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::org::apache::lucene::index::AtomicReader result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.wrap(a0));
            return ::org::apache::lucene::index::t_AtomicReader::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterDirectoryReader$StandardReaderWrapper), (PyObject *) self, "wrap", args, 2);
        }
        static PyObject *t_FilterDirectoryReader$StandardReaderWrapper_get__parameters_(t_FilterDirectoryReader$StandardReaderWrapper *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/NGramPhraseQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *NGramPhraseQuery::class$ = NULL;
        jmethodID *NGramPhraseQuery::mids$ = NULL;
        bool NGramPhraseQuery::live$ = false;

        jclass NGramPhraseQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/NGramPhraseQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NGramPhraseQuery::NGramPhraseQuery(jint a0) : ::org::apache::lucene::search::PhraseQuery(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        jboolean NGramPhraseQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint NGramPhraseQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::org::apache::lucene::search::Query NGramPhraseQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_NGramPhraseQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NGramPhraseQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NGramPhraseQuery_init_(t_NGramPhraseQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_NGramPhraseQuery_equals(t_NGramPhraseQuery *self, PyObject *args);
        static PyObject *t_NGramPhraseQuery_hashCode(t_NGramPhraseQuery *self, PyObject *args);
        static PyObject *t_NGramPhraseQuery_rewrite(t_NGramPhraseQuery *self, PyObject *args);

        static PyMethodDef t_NGramPhraseQuery__methods_[] = {
          DECLARE_METHOD(t_NGramPhraseQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NGramPhraseQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NGramPhraseQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_NGramPhraseQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_NGramPhraseQuery, rewrite, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NGramPhraseQuery, t_NGramPhraseQuery, ::org::apache::lucene::search::PhraseQuery, NGramPhraseQuery, t_NGramPhraseQuery_init_, 0, 0, 0, 0, 0);

        void t_NGramPhraseQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(NGramPhraseQuery), module, "NGramPhraseQuery", 0);
        }

        void t_NGramPhraseQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NGramPhraseQuery).tp_dict, "class_", make_descriptor(NGramPhraseQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NGramPhraseQuery).tp_dict, "wrapfn_", make_descriptor(t_NGramPhraseQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NGramPhraseQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NGramPhraseQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NGramPhraseQuery::initializeClass, 1)))
            return NULL;
          return t_NGramPhraseQuery::wrap_Object(NGramPhraseQuery(((t_NGramPhraseQuery *) arg)->object.this$));
        }
        static PyObject *t_NGramPhraseQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NGramPhraseQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NGramPhraseQuery_init_(t_NGramPhraseQuery *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          NGramPhraseQuery object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = NGramPhraseQuery(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_NGramPhraseQuery_equals(t_NGramPhraseQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(NGramPhraseQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_NGramPhraseQuery_hashCode(t_NGramPhraseQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(NGramPhraseQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_NGramPhraseQuery_rewrite(t_NGramPhraseQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(NGramPhraseQuery), (PyObject *) self, "rewrite", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/regex/RegexQueryCapable.h"
#include "org/apache/lucene/sandbox/queries/regex/RegexCapabilities.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          namespace regex {

            ::java::lang::Class *RegexQueryCapable::class$ = NULL;
            jmethodID *RegexQueryCapable::mids$ = NULL;
            bool RegexQueryCapable::live$ = false;

            jclass RegexQueryCapable::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/regex/RegexQueryCapable");

                mids$ = new jmethodID[max_mid];
                mids$[mid_getRegexImplementation_814365f4] = env->getMethodID(cls, "getRegexImplementation", "()Lorg/apache/lucene/sandbox/queries/regex/RegexCapabilities;");
                mids$[mid_setRegexImplementation_06bf498d] = env->getMethodID(cls, "setRegexImplementation", "(Lorg/apache/lucene/sandbox/queries/regex/RegexCapabilities;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities RegexQueryCapable::getRegexImplementation() const
            {
              return ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities(env->callObjectMethod(this$, mids$[mid_getRegexImplementation_814365f4]));
            }

            void RegexQueryCapable::setRegexImplementation(const ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setRegexImplementation_06bf498d], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          namespace regex {
            static PyObject *t_RegexQueryCapable_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_RegexQueryCapable_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_RegexQueryCapable_getRegexImplementation(t_RegexQueryCapable *self);
            static PyObject *t_RegexQueryCapable_setRegexImplementation(t_RegexQueryCapable *self, PyObject *arg);
            static PyObject *t_RegexQueryCapable_get__regexImplementation(t_RegexQueryCapable *self, void *data);
            static int t_RegexQueryCapable_set__regexImplementation(t_RegexQueryCapable *self, PyObject *arg, void *data);
            static PyGetSetDef t_RegexQueryCapable__fields_[] = {
              DECLARE_GETSET_FIELD(t_RegexQueryCapable, regexImplementation),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_RegexQueryCapable__methods_[] = {
              DECLARE_METHOD(t_RegexQueryCapable, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_RegexQueryCapable, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_RegexQueryCapable, getRegexImplementation, METH_NOARGS),
              DECLARE_METHOD(t_RegexQueryCapable, setRegexImplementation, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(RegexQueryCapable, t_RegexQueryCapable, ::java::lang::Object, RegexQueryCapable, abstract_init, 0, 0, t_RegexQueryCapable__fields_, 0, 0);

            void t_RegexQueryCapable::install(PyObject *module)
            {
              installType(&PY_TYPE(RegexQueryCapable), module, "RegexQueryCapable", 0);
            }

            void t_RegexQueryCapable::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(RegexQueryCapable).tp_dict, "class_", make_descriptor(RegexQueryCapable::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(RegexQueryCapable).tp_dict, "wrapfn_", make_descriptor(t_RegexQueryCapable::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(RegexQueryCapable).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_RegexQueryCapable_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, RegexQueryCapable::initializeClass, 1)))
                return NULL;
              return t_RegexQueryCapable::wrap_Object(RegexQueryCapable(((t_RegexQueryCapable *) arg)->object.this$));
            }
            static PyObject *t_RegexQueryCapable_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, RegexQueryCapable::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_RegexQueryCapable_getRegexImplementation(t_RegexQueryCapable *self)
            {
              ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities result((jobject) NULL);
              OBJ_CALL(result = self->object.getRegexImplementation());
              return ::org::apache::lucene::sandbox::queries::regex::t_RegexCapabilities::wrap_Object(result);
            }

            static PyObject *t_RegexQueryCapable_setRegexImplementation(t_RegexQueryCapable *self, PyObject *arg)
            {
              ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setRegexImplementation(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setRegexImplementation", arg);
              return NULL;
            }

            static PyObject *t_RegexQueryCapable_get__regexImplementation(t_RegexQueryCapable *self, void *data)
            {
              ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities value((jobject) NULL);
              OBJ_CALL(value = self->object.getRegexImplementation());
              return ::org::apache::lucene::sandbox::queries::regex::t_RegexCapabilities::wrap_Object(value);
            }
            static int t_RegexQueryCapable_set__regexImplementation(t_RegexQueryCapable *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities::initializeClass, &value))
                {
                  INT_CALL(self->object.setRegexImplementation(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "regexImplementation", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/SimpleFieldFragList.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *SimpleFieldFragList::class$ = NULL;
          jmethodID *SimpleFieldFragList::mids$ = NULL;
          bool SimpleFieldFragList::live$ = false;

          jclass SimpleFieldFragList::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/SimpleFieldFragList");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_add_21fbeb2b] = env->getMethodID(cls, "add", "(IILjava/util/List;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleFieldFragList::SimpleFieldFragList(jint a0) : ::org::apache::lucene::search::vectorhighlight::FieldFragList(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          void SimpleFieldFragList::add(jint a0, jint a1, const ::java::util::List & a2) const
          {
            env->callVoidMethod(this$, mids$[mid_add_21fbeb2b], a0, a1, a2.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_SimpleFieldFragList_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleFieldFragList_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleFieldFragList_init_(t_SimpleFieldFragList *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleFieldFragList_add(t_SimpleFieldFragList *self, PyObject *args);

          static PyMethodDef t_SimpleFieldFragList__methods_[] = {
            DECLARE_METHOD(t_SimpleFieldFragList, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleFieldFragList, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleFieldFragList, add, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SimpleFieldFragList, t_SimpleFieldFragList, ::org::apache::lucene::search::vectorhighlight::FieldFragList, SimpleFieldFragList, t_SimpleFieldFragList_init_, 0, 0, 0, 0, 0);

          void t_SimpleFieldFragList::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleFieldFragList), module, "SimpleFieldFragList", 0);
          }

          void t_SimpleFieldFragList::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SimpleFieldFragList).tp_dict, "class_", make_descriptor(SimpleFieldFragList::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SimpleFieldFragList).tp_dict, "wrapfn_", make_descriptor(t_SimpleFieldFragList::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SimpleFieldFragList).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimpleFieldFragList_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleFieldFragList::initializeClass, 1)))
              return NULL;
            return t_SimpleFieldFragList::wrap_Object(SimpleFieldFragList(((t_SimpleFieldFragList *) arg)->object.this$));
          }
          static PyObject *t_SimpleFieldFragList_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleFieldFragList::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleFieldFragList_init_(t_SimpleFieldFragList *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            SimpleFieldFragList object((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              INT_CALL(object = SimpleFieldFragList(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SimpleFieldFragList_add(t_SimpleFieldFragList *self, PyObject *args)
          {
            jint a0;
            jint a1;
            ::java::util::List a2((jobject) NULL);
            PyTypeObject **p2;

            if (!parseArgs(args, "IIK", ::java::util::List::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(self->object.add(a0, a1, a2));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SimpleFieldFragList), (PyObject *) self, "add", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/PositiveScoresOnlyCollector.h"
#include "org/apache/lucene/search/Scorer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *PositiveScoresOnlyCollector::class$ = NULL;
        jmethodID *PositiveScoresOnlyCollector::mids$ = NULL;
        bool PositiveScoresOnlyCollector::live$ = false;

        jclass PositiveScoresOnlyCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/PositiveScoresOnlyCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_77379ce0] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Collector;)V");
            mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
            mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
            mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
            mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PositiveScoresOnlyCollector::PositiveScoresOnlyCollector(const ::org::apache::lucene::search::Collector & a0) : ::org::apache::lucene::search::Collector(env->newObject(initializeClass, &mids$, mid_init$_77379ce0, a0.this$)) {}

        jboolean PositiveScoresOnlyCollector::acceptsDocsOutOfOrder() const
        {
          return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
        }

        void PositiveScoresOnlyCollector::collect(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
        }

        void PositiveScoresOnlyCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
        }

        void PositiveScoresOnlyCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_PositiveScoresOnlyCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PositiveScoresOnlyCollector_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PositiveScoresOnlyCollector_init_(t_PositiveScoresOnlyCollector *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PositiveScoresOnlyCollector_acceptsDocsOutOfOrder(t_PositiveScoresOnlyCollector *self, PyObject *args);
        static PyObject *t_PositiveScoresOnlyCollector_collect(t_PositiveScoresOnlyCollector *self, PyObject *args);
        static PyObject *t_PositiveScoresOnlyCollector_setNextReader(t_PositiveScoresOnlyCollector *self, PyObject *args);
        static PyObject *t_PositiveScoresOnlyCollector_setScorer(t_PositiveScoresOnlyCollector *self, PyObject *args);
        static int t_PositiveScoresOnlyCollector_set__nextReader(t_PositiveScoresOnlyCollector *self, PyObject *arg, void *data);
        static int t_PositiveScoresOnlyCollector_set__scorer(t_PositiveScoresOnlyCollector *self, PyObject *arg, void *data);
        static PyGetSetDef t_PositiveScoresOnlyCollector__fields_[] = {
          DECLARE_SET_FIELD(t_PositiveScoresOnlyCollector, nextReader),
          DECLARE_SET_FIELD(t_PositiveScoresOnlyCollector, scorer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PositiveScoresOnlyCollector__methods_[] = {
          DECLARE_METHOD(t_PositiveScoresOnlyCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PositiveScoresOnlyCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PositiveScoresOnlyCollector, acceptsDocsOutOfOrder, METH_VARARGS),
          DECLARE_METHOD(t_PositiveScoresOnlyCollector, collect, METH_VARARGS),
          DECLARE_METHOD(t_PositiveScoresOnlyCollector, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_PositiveScoresOnlyCollector, setScorer, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PositiveScoresOnlyCollector, t_PositiveScoresOnlyCollector, ::org::apache::lucene::search::Collector, PositiveScoresOnlyCollector, t_PositiveScoresOnlyCollector_init_, 0, 0, t_PositiveScoresOnlyCollector__fields_, 0, 0);

        void t_PositiveScoresOnlyCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(PositiveScoresOnlyCollector), module, "PositiveScoresOnlyCollector", 0);
        }

        void t_PositiveScoresOnlyCollector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PositiveScoresOnlyCollector).tp_dict, "class_", make_descriptor(PositiveScoresOnlyCollector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PositiveScoresOnlyCollector).tp_dict, "wrapfn_", make_descriptor(t_PositiveScoresOnlyCollector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PositiveScoresOnlyCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PositiveScoresOnlyCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PositiveScoresOnlyCollector::initializeClass, 1)))
            return NULL;
          return t_PositiveScoresOnlyCollector::wrap_Object(PositiveScoresOnlyCollector(((t_PositiveScoresOnlyCollector *) arg)->object.this$));
        }
        static PyObject *t_PositiveScoresOnlyCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PositiveScoresOnlyCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PositiveScoresOnlyCollector_init_(t_PositiveScoresOnlyCollector *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Collector a0((jobject) NULL);
          PositiveScoresOnlyCollector object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Collector::initializeClass, &a0))
          {
            INT_CALL(object = PositiveScoresOnlyCollector(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_PositiveScoresOnlyCollector_acceptsDocsOutOfOrder(t_PositiveScoresOnlyCollector *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(PositiveScoresOnlyCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
        }

        static PyObject *t_PositiveScoresOnlyCollector_collect(t_PositiveScoresOnlyCollector *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.collect(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PositiveScoresOnlyCollector), (PyObject *) self, "collect", args, 2);
        }

        static PyObject *t_PositiveScoresOnlyCollector_setNextReader(t_PositiveScoresOnlyCollector *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setNextReader(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PositiveScoresOnlyCollector), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_PositiveScoresOnlyCollector_setScorer(t_PositiveScoresOnlyCollector *self, PyObject *args)
        {
          ::org::apache::lucene::search::Scorer a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setScorer(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PositiveScoresOnlyCollector), (PyObject *) self, "setScorer", args, 2);
        }

        static int t_PositiveScoresOnlyCollector_set__nextReader(t_PositiveScoresOnlyCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_PositiveScoresOnlyCollector_set__scorer(t_PositiveScoresOnlyCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Scorer value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
            {
              INT_CALL(self->object.setScorer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "scorer", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/AttributeReflector.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Attribute.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *AttributeReflector::class$ = NULL;
        jmethodID *AttributeReflector::mids$ = NULL;
        bool AttributeReflector::live$ = false;

        jclass AttributeReflector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/AttributeReflector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_reflect_6dbf9802] = env->getMethodID(cls, "reflect", "(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Object;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void AttributeReflector::reflect(const ::java::lang::Class & a0, const ::java::lang::String & a1, const ::java::lang::Object & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_reflect_6dbf9802], a0.this$, a1.this$, a2.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_AttributeReflector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AttributeReflector_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AttributeReflector_reflect(t_AttributeReflector *self, PyObject *args);

        static PyMethodDef t_AttributeReflector__methods_[] = {
          DECLARE_METHOD(t_AttributeReflector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeReflector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeReflector, reflect, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(AttributeReflector, t_AttributeReflector, ::java::lang::Object, AttributeReflector, abstract_init, 0, 0, 0, 0, 0);

        void t_AttributeReflector::install(PyObject *module)
        {
          installType(&PY_TYPE(AttributeReflector), module, "AttributeReflector", 0);
        }

        void t_AttributeReflector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(AttributeReflector).tp_dict, "class_", make_descriptor(AttributeReflector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(AttributeReflector).tp_dict, "wrapfn_", make_descriptor(t_AttributeReflector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(AttributeReflector).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_AttributeReflector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AttributeReflector::initializeClass, 1)))
            return NULL;
          return t_AttributeReflector::wrap_Object(AttributeReflector(((t_AttributeReflector *) arg)->object.this$));
        }
        static PyObject *t_AttributeReflector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AttributeReflector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_AttributeReflector_reflect(t_AttributeReflector *self, PyObject *args)
        {
          ::java::lang::Class a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::Object a2((jobject) NULL);

          if (!parseArgs(args, "Kso", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1, &a2))
          {
            OBJ_CALL(self->object.reflect(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "reflect", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/ReaderUtil.h"
#include "org/apache/lucene/index/IndexReaderContext.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *ReaderUtil::class$ = NULL;
        jmethodID *ReaderUtil::mids$ = NULL;
        bool ReaderUtil::live$ = false;

        jclass ReaderUtil::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/ReaderUtil");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getTopLevelContext_4ecc3919] = env->getStaticMethodID(cls, "getTopLevelContext", "(Lorg/apache/lucene/index/IndexReaderContext;)Lorg/apache/lucene/index/IndexReaderContext;");
            mids$[mid_subIndex_dd2db701] = env->getStaticMethodID(cls, "subIndex", "(I[I)I");
            mids$[mid_subIndex_f2e17962] = env->getStaticMethodID(cls, "subIndex", "(ILjava/util/List;)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::IndexReaderContext ReaderUtil::getTopLevelContext(const ::org::apache::lucene::index::IndexReaderContext & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::IndexReaderContext(env->callStaticObjectMethod(cls, mids$[mid_getTopLevelContext_4ecc3919], a0.this$));
        }

        jint ReaderUtil::subIndex(jint a0, const JArray< jint > & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_subIndex_dd2db701], a0, a1.this$);
        }

        jint ReaderUtil::subIndex(jint a0, const ::java::util::List & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_subIndex_f2e17962], a0, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_ReaderUtil_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ReaderUtil_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ReaderUtil_getTopLevelContext(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ReaderUtil_subIndex(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_ReaderUtil__methods_[] = {
          DECLARE_METHOD(t_ReaderUtil, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ReaderUtil, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ReaderUtil, getTopLevelContext, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ReaderUtil, subIndex, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ReaderUtil, t_ReaderUtil, ::java::lang::Object, ReaderUtil, abstract_init, 0, 0, 0, 0, 0);

        void t_ReaderUtil::install(PyObject *module)
        {
          installType(&PY_TYPE(ReaderUtil), module, "ReaderUtil", 0);
        }

        void t_ReaderUtil::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ReaderUtil).tp_dict, "class_", make_descriptor(ReaderUtil::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ReaderUtil).tp_dict, "wrapfn_", make_descriptor(t_ReaderUtil::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ReaderUtil).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ReaderUtil_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ReaderUtil::initializeClass, 1)))
            return NULL;
          return t_ReaderUtil::wrap_Object(ReaderUtil(((t_ReaderUtil *) arg)->object.this$));
        }
        static PyObject *t_ReaderUtil_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ReaderUtil::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ReaderUtil_getTopLevelContext(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexReaderContext a0((jobject) NULL);
          ::org::apache::lucene::index::IndexReaderContext result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::ReaderUtil::getTopLevelContext(a0));
            return ::org::apache::lucene::index::t_IndexReaderContext::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getTopLevelContext", arg);
          return NULL;
        }

        static PyObject *t_ReaderUtil_subIndex(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              jint a0;
              JArray< jint > a1((jobject) NULL);
              jint result;

              if (!parseArgs(args, "I[I", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::ReaderUtil::subIndex(a0, a1));
                return PyInt_FromLong((long) result);
              }
            }
            {
              jint a0;
              ::java::util::List a1((jobject) NULL);
              PyTypeObject **p1;
              jint result;

              if (!parseArgs(args, "IK", ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::ReaderUtil::subIndex(a0, a1));
                return PyInt_FromLong((long) result);
              }
            }
          }

          PyErr_SetArgsError(type, "subIndex", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/range/DoubleRange.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/search/Filter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {

          ::java::lang::Class *DoubleRange::class$ = NULL;
          jmethodID *DoubleRange::mids$ = NULL;
          jfieldID *DoubleRange::fids$ = NULL;
          bool DoubleRange::live$ = false;

          jclass DoubleRange::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/range/DoubleRange");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_1ac9f76c] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;DZDZ)V");
              mids$[mid_accept_5d1c7649] = env->getMethodID(cls, "accept", "(D)Z");
              mids$[mid_getFilter_fc904367] = env->getMethodID(cls, "getFilter", "(Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/queries/function/ValueSource;)Lorg/apache/lucene/search/Filter;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_max] = env->getFieldID(cls, "max", "D");
              fids$[fid_maxInclusive] = env->getFieldID(cls, "maxInclusive", "Z");
              fids$[fid_min] = env->getFieldID(cls, "min", "D");
              fids$[fid_minInclusive] = env->getFieldID(cls, "minInclusive", "Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DoubleRange::DoubleRange(const ::java::lang::String & a0, jdouble a1, jboolean a2, jdouble a3, jboolean a4) : ::org::apache::lucene::facet::range::Range(env->newObject(initializeClass, &mids$, mid_init$_1ac9f76c, a0.this$, a1, a2, a3, a4)) {}

          jboolean DoubleRange::accept(jdouble a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_accept_5d1c7649], a0);
          }

          ::org::apache::lucene::search::Filter DoubleRange::getFilter(const ::org::apache::lucene::search::Filter & a0, const ::org::apache::lucene::queries::function::ValueSource & a1) const
          {
            return ::org::apache::lucene::search::Filter(env->callObjectMethod(this$, mids$[mid_getFilter_fc904367], a0.this$, a1.this$));
          }

          ::java::lang::String DoubleRange::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          jdouble DoubleRange::_get_max() const
          {
            return env->getDoubleField(this$, fids$[fid_max]);
          }

          jboolean DoubleRange::_get_maxInclusive() const
          {
            return env->getBooleanField(this$, fids$[fid_maxInclusive]);
          }

          jdouble DoubleRange::_get_min() const
          {
            return env->getDoubleField(this$, fids$[fid_min]);
          }

          jboolean DoubleRange::_get_minInclusive() const
          {
            return env->getBooleanField(this$, fids$[fid_minInclusive]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {
          static PyObject *t_DoubleRange_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DoubleRange_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DoubleRange_init_(t_DoubleRange *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DoubleRange_accept(t_DoubleRange *self, PyObject *arg);
          static PyObject *t_DoubleRange_getFilter(t_DoubleRange *self, PyObject *args);
          static PyObject *t_DoubleRange_toString(t_DoubleRange *self, PyObject *args);
          static PyObject *t_DoubleRange_get__max(t_DoubleRange *self, void *data);
          static PyObject *t_DoubleRange_get__maxInclusive(t_DoubleRange *self, void *data);
          static PyObject *t_DoubleRange_get__min(t_DoubleRange *self, void *data);
          static PyObject *t_DoubleRange_get__minInclusive(t_DoubleRange *self, void *data);

          static PyGetSetDef t_DoubleRange__fields_[] = {
            DECLARE_GET_FIELD(t_DoubleRange, max),
            DECLARE_GET_FIELD(t_DoubleRange, maxInclusive),
            DECLARE_GET_FIELD(t_DoubleRange, min),
            DECLARE_GET_FIELD(t_DoubleRange, minInclusive),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DoubleRange__methods_[] = {
            DECLARE_METHOD(t_DoubleRange, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DoubleRange, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DoubleRange, accept, METH_O),
            DECLARE_METHOD(t_DoubleRange, getFilter, METH_VARARGS),
            DECLARE_METHOD(t_DoubleRange, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DoubleRange, t_DoubleRange, ::org::apache::lucene::facet::range::Range, DoubleRange, t_DoubleRange_init_, 0, 0, t_DoubleRange__fields_, 0, 0);

          void t_DoubleRange::install(PyObject *module)
          {
            installType(&PY_TYPE(DoubleRange), module, "DoubleRange", 0);
          }

          void t_DoubleRange::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DoubleRange).tp_dict, "class_", make_descriptor(DoubleRange::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DoubleRange).tp_dict, "wrapfn_", make_descriptor(t_DoubleRange::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DoubleRange).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DoubleRange_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DoubleRange::initializeClass, 1)))
              return NULL;
            return t_DoubleRange::wrap_Object(DoubleRange(((t_DoubleRange *) arg)->object.this$));
          }
          static PyObject *t_DoubleRange_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DoubleRange::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DoubleRange_init_(t_DoubleRange *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            jdouble a1;
            jboolean a2;
            jdouble a3;
            jboolean a4;
            DoubleRange object((jobject) NULL);

            if (!parseArgs(args, "sDZDZ", &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = DoubleRange(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DoubleRange_accept(t_DoubleRange *self, PyObject *arg)
          {
            jdouble a0;
            jboolean result;

            if (!parseArg(arg, "D", &a0))
            {
              OBJ_CALL(result = self->object.accept(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "accept", arg);
            return NULL;
          }

          static PyObject *t_DoubleRange_getFilter(t_DoubleRange *self, PyObject *args)
          {
            ::org::apache::lucene::search::Filter a0((jobject) NULL);
            ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);
            ::org::apache::lucene::search::Filter result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.getFilter(a0, a1));
              return ::org::apache::lucene::search::t_Filter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(DoubleRange), (PyObject *) self, "getFilter", args, 2);
          }

          static PyObject *t_DoubleRange_toString(t_DoubleRange *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(DoubleRange), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_DoubleRange_get__max(t_DoubleRange *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object._get_max());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_DoubleRange_get__maxInclusive(t_DoubleRange *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object._get_maxInclusive());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_DoubleRange_get__min(t_DoubleRange *self, void *data)
          {
            jdouble value;
            OBJ_CALL(value = self->object._get_min());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_DoubleRange_get__minInclusive(t_DoubleRange *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object._get_minInclusive());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/ext/Extensions.h"
#include "org/apache/lucene/queryparser/ext/ParserExtension.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/ext/Extensions$Pair.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace ext {

          ::java::lang::Class *Extensions::class$ = NULL;
          jmethodID *Extensions::mids$ = NULL;
          bool Extensions::live$ = false;
          jchar Extensions::DEFAULT_EXTENSION_FIELD_DELIMITER = (jchar) 0;

          jclass Extensions::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/ext/Extensions");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_87fd545a] = env->getMethodID(cls, "<init>", "(C)V");
              mids$[mid_add_d7d984b9] = env->getMethodID(cls, "add", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/ext/ParserExtension;)V");
              mids$[mid_buildExtensionField_97a5258f] = env->getMethodID(cls, "buildExtensionField", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_buildExtensionField_aacea7e9] = env->getMethodID(cls, "buildExtensionField", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_escapeExtensionField_97a5258f] = env->getMethodID(cls, "escapeExtensionField", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_getExtension_a8956118] = env->getMethodID(cls, "getExtension", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/ext/ParserExtension;");
              mids$[mid_getExtensionFieldDelimiter_54c6a173] = env->getMethodID(cls, "getExtensionFieldDelimiter", "()C");
              mids$[mid_splitExtensionField_7a9e9194] = env->getMethodID(cls, "splitExtensionField", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/queryparser/ext/Extensions$Pair;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_EXTENSION_FIELD_DELIMITER = env->getStaticCharField(cls, "DEFAULT_EXTENSION_FIELD_DELIMITER");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Extensions::Extensions() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          Extensions::Extensions(jchar a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_87fd545a, a0)) {}

          void Extensions::add(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::ext::ParserExtension & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_add_d7d984b9], a0.this$, a1.this$);
          }

          ::java::lang::String Extensions::buildExtensionField(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_buildExtensionField_97a5258f], a0.this$));
          }

          ::java::lang::String Extensions::buildExtensionField(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_buildExtensionField_aacea7e9], a0.this$, a1.this$));
          }

          ::java::lang::String Extensions::escapeExtensionField(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_escapeExtensionField_97a5258f], a0.this$));
          }

          ::org::apache::lucene::queryparser::ext::ParserExtension Extensions::getExtension(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::queryparser::ext::ParserExtension(env->callObjectMethod(this$, mids$[mid_getExtension_a8956118], a0.this$));
          }

          jchar Extensions::getExtensionFieldDelimiter() const
          {
            return env->callCharMethod(this$, mids$[mid_getExtensionFieldDelimiter_54c6a173]);
          }

          ::org::apache::lucene::queryparser::ext::Extensions$Pair Extensions::splitExtensionField(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return ::org::apache::lucene::queryparser::ext::Extensions$Pair(env->callObjectMethod(this$, mids$[mid_splitExtensionField_7a9e9194], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace ext {
          static PyObject *t_Extensions_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Extensions_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Extensions_init_(t_Extensions *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Extensions_add(t_Extensions *self, PyObject *args);
          static PyObject *t_Extensions_buildExtensionField(t_Extensions *self, PyObject *args);
          static PyObject *t_Extensions_escapeExtensionField(t_Extensions *self, PyObject *arg);
          static PyObject *t_Extensions_getExtension(t_Extensions *self, PyObject *arg);
          static PyObject *t_Extensions_getExtensionFieldDelimiter(t_Extensions *self);
          static PyObject *t_Extensions_splitExtensionField(t_Extensions *self, PyObject *args);
          static PyObject *t_Extensions_get__extensionFieldDelimiter(t_Extensions *self, void *data);
          static PyGetSetDef t_Extensions__fields_[] = {
            DECLARE_GET_FIELD(t_Extensions, extensionFieldDelimiter),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Extensions__methods_[] = {
            DECLARE_METHOD(t_Extensions, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Extensions, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Extensions, add, METH_VARARGS),
            DECLARE_METHOD(t_Extensions, buildExtensionField, METH_VARARGS),
            DECLARE_METHOD(t_Extensions, escapeExtensionField, METH_O),
            DECLARE_METHOD(t_Extensions, getExtension, METH_O),
            DECLARE_METHOD(t_Extensions, getExtensionFieldDelimiter, METH_NOARGS),
            DECLARE_METHOD(t_Extensions, splitExtensionField, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Extensions, t_Extensions, ::java::lang::Object, Extensions, t_Extensions_init_, 0, 0, t_Extensions__fields_, 0, 0);

          void t_Extensions::install(PyObject *module)
          {
            installType(&PY_TYPE(Extensions), module, "Extensions", 0);
            PyDict_SetItemString(PY_TYPE(Extensions).tp_dict, "Pair", make_descriptor(&PY_TYPE(Extensions$Pair)));
          }

          void t_Extensions::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Extensions).tp_dict, "class_", make_descriptor(Extensions::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Extensions).tp_dict, "wrapfn_", make_descriptor(t_Extensions::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Extensions).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Extensions::initializeClass);
            PyDict_SetItemString(PY_TYPE(Extensions).tp_dict, "DEFAULT_EXTENSION_FIELD_DELIMITER", make_descriptor(Extensions::DEFAULT_EXTENSION_FIELD_DELIMITER));
          }

          static PyObject *t_Extensions_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Extensions::initializeClass, 1)))
              return NULL;
            return t_Extensions::wrap_Object(Extensions(((t_Extensions *) arg)->object.this$));
          }
          static PyObject *t_Extensions_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Extensions::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Extensions_init_(t_Extensions *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                Extensions object((jobject) NULL);

                INT_CALL(object = Extensions());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jchar a0;
                Extensions object((jobject) NULL);

                if (!parseArgs(args, "C", &a0))
                {
                  INT_CALL(object = Extensions(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Extensions_add(t_Extensions *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::queryparser::ext::ParserExtension a1((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::ext::ParserExtension::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.add(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "add", args);
            return NULL;
          }

          static PyObject *t_Extensions_buildExtensionField(t_Extensions *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = self->object.buildExtensionField(a0));
                  return j2p(result);
                }
              }
              break;
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "ss", &a0, &a1))
                {
                  OBJ_CALL(result = self->object.buildExtensionField(a0, a1));
                  return j2p(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "buildExtensionField", args);
            return NULL;
          }

          static PyObject *t_Extensions_escapeExtensionField(t_Extensions *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.escapeExtensionField(a0));
              return j2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "escapeExtensionField", arg);
            return NULL;
          }

          static PyObject *t_Extensions_getExtension(t_Extensions *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::queryparser::ext::ParserExtension result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getExtension(a0));
              return ::org::apache::lucene::queryparser::ext::t_ParserExtension::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getExtension", arg);
            return NULL;
          }

          static PyObject *t_Extensions_getExtensionFieldDelimiter(t_Extensions *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.getExtensionFieldDelimiter());
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }

          static PyObject *t_Extensions_splitExtensionField(t_Extensions *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::queryparser::ext::Extensions$Pair result((jobject) NULL);

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.splitExtensionField(a0, a1));
              return ::org::apache::lucene::queryparser::ext::t_Extensions$Pair::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
            }

            PyErr_SetArgsError((PyObject *) self, "splitExtensionField", args);
            return NULL;
          }

          static PyObject *t_Extensions_get__extensionFieldDelimiter(t_Extensions *self, void *data)
          {
            jchar value;
            OBJ_CALL(value = self->object.getExtensionFieldDelimiter());
            return PyUnicode_FromUnicode((Py_UNICODE *) &value, 1);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hi/HindiNormalizer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {

          ::java::lang::Class *HindiNormalizer::class$ = NULL;
          jmethodID *HindiNormalizer::mids$ = NULL;
          bool HindiNormalizer::live$ = false;

          jclass HindiNormalizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hi/HindiNormalizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_normalize_ec6430eb] = env->getMethodID(cls, "normalize", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HindiNormalizer::HindiNormalizer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint HindiNormalizer::normalize(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_normalize_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {
          static PyObject *t_HindiNormalizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HindiNormalizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HindiNormalizer_init_(t_HindiNormalizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HindiNormalizer_normalize(t_HindiNormalizer *self, PyObject *args);

          static PyMethodDef t_HindiNormalizer__methods_[] = {
            DECLARE_METHOD(t_HindiNormalizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiNormalizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiNormalizer, normalize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HindiNormalizer, t_HindiNormalizer, ::java::lang::Object, HindiNormalizer, t_HindiNormalizer_init_, 0, 0, 0, 0, 0);

          void t_HindiNormalizer::install(PyObject *module)
          {
            installType(&PY_TYPE(HindiNormalizer), module, "HindiNormalizer", 0);
          }

          void t_HindiNormalizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HindiNormalizer).tp_dict, "class_", make_descriptor(HindiNormalizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HindiNormalizer).tp_dict, "wrapfn_", make_descriptor(t_HindiNormalizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HindiNormalizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HindiNormalizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HindiNormalizer::initializeClass, 1)))
              return NULL;
            return t_HindiNormalizer::wrap_Object(HindiNormalizer(((t_HindiNormalizer *) arg)->object.this$));
          }
          static PyObject *t_HindiNormalizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HindiNormalizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HindiNormalizer_init_(t_HindiNormalizer *self, PyObject *args, PyObject *kwds)
          {
            HindiNormalizer object((jobject) NULL);

            INT_CALL(object = HindiNormalizer());
            self->object = object;

            return 0;
          }

          static PyObject *t_HindiNormalizer_normalize(t_HindiNormalizer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.normalize(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "normalize", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/Lookup.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "java/io/IOException.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/search/spell/Dictionary.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/InputStream.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupResult.h"
#include "java/io/OutputStream.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *Lookup::class$ = NULL;
          jmethodID *Lookup::mids$ = NULL;
          bool Lookup::live$ = false;
          ::java::util::Comparator *Lookup::CHARSEQUENCE_COMPARATOR = NULL;

          jclass Lookup::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/Lookup");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_build_1754a234] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/search/suggest/InputIterator;)V");
              mids$[mid_build_a0504881] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/search/spell/Dictionary;)V");
              mids$[mid_getCount_54c6a17a] = env->getMethodID(cls, "getCount", "()J");
              mids$[mid_load_f5d6a55d] = env->getMethodID(cls, "load", "(Lorg/apache/lucene/store/DataInput;)Z");
              mids$[mid_load_be2e4f9c] = env->getMethodID(cls, "load", "(Ljava/io/InputStream;)Z");
              mids$[mid_lookup_8aa7b45d] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;ZI)Ljava/util/List;");
              mids$[mid_lookup_dd3e9f51] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;ZI)Ljava/util/List;");
              mids$[mid_store_27875f5b] = env->getMethodID(cls, "store", "(Lorg/apache/lucene/store/DataOutput;)Z");
              mids$[mid_store_82d865f4] = env->getMethodID(cls, "store", "(Ljava/io/OutputStream;)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              CHARSEQUENCE_COMPARATOR = new ::java::util::Comparator(env->getStaticObjectField(cls, "CHARSEQUENCE_COMPARATOR", "Ljava/util/Comparator;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lookup::Lookup() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void Lookup::build(const ::org::apache::lucene::search::suggest::InputIterator & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_build_1754a234], a0.this$);
          }

          void Lookup::build(const ::org::apache::lucene::search::spell::Dictionary & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_build_a0504881], a0.this$);
          }

          jlong Lookup::getCount() const
          {
            return env->callLongMethod(this$, mids$[mid_getCount_54c6a17a]);
          }

          jboolean Lookup::load(const ::org::apache::lucene::store::DataInput & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_load_f5d6a55d], a0.this$);
          }

          jboolean Lookup::load(const ::java::io::InputStream & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_load_be2e4f9c], a0.this$);
          }

          ::java::util::List Lookup::lookup(const ::java::lang::CharSequence & a0, jboolean a1, jint a2) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_8aa7b45d], a0.this$, a1, a2));
          }

          ::java::util::List Lookup::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jboolean a2, jint a3) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_dd3e9f51], a0.this$, a1.this$, a2, a3));
          }

          jboolean Lookup::store(const ::org::apache::lucene::store::DataOutput & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_store_27875f5b], a0.this$);
          }

          jboolean Lookup::store(const ::java::io::OutputStream & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_store_82d865f4], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupPriorityQueue.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_Lookup_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lookup_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lookup_init_(t_Lookup *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lookup_build(t_Lookup *self, PyObject *args);
          static PyObject *t_Lookup_getCount(t_Lookup *self);
          static PyObject *t_Lookup_load(t_Lookup *self, PyObject *args);
          static PyObject *t_Lookup_lookup(t_Lookup *self, PyObject *args);
          static PyObject *t_Lookup_store(t_Lookup *self, PyObject *args);
          static PyObject *t_Lookup_get__count(t_Lookup *self, void *data);
          static PyGetSetDef t_Lookup__fields_[] = {
            DECLARE_GET_FIELD(t_Lookup, count),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lookup__methods_[] = {
            DECLARE_METHOD(t_Lookup, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lookup, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lookup, build, METH_VARARGS),
            DECLARE_METHOD(t_Lookup, getCount, METH_NOARGS),
            DECLARE_METHOD(t_Lookup, load, METH_VARARGS),
            DECLARE_METHOD(t_Lookup, lookup, METH_VARARGS),
            DECLARE_METHOD(t_Lookup, store, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lookup, t_Lookup, ::java::lang::Object, Lookup, t_Lookup_init_, 0, 0, t_Lookup__fields_, 0, 0);

          void t_Lookup::install(PyObject *module)
          {
            installType(&PY_TYPE(Lookup), module, "Lookup", 0);
            PyDict_SetItemString(PY_TYPE(Lookup).tp_dict, "LookupPriorityQueue", make_descriptor(&PY_TYPE(Lookup$LookupPriorityQueue)));
            PyDict_SetItemString(PY_TYPE(Lookup).tp_dict, "LookupResult", make_descriptor(&PY_TYPE(Lookup$LookupResult)));
          }

          void t_Lookup::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lookup).tp_dict, "class_", make_descriptor(Lookup::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lookup).tp_dict, "wrapfn_", make_descriptor(t_Lookup::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lookup).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Lookup::initializeClass);
            PyDict_SetItemString(PY_TYPE(Lookup).tp_dict, "CHARSEQUENCE_COMPARATOR", make_descriptor(::java::util::t_Comparator::wrap_Object(*Lookup::CHARSEQUENCE_COMPARATOR)));
          }

          static PyObject *t_Lookup_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lookup::initializeClass, 1)))
              return NULL;
            return t_Lookup::wrap_Object(Lookup(((t_Lookup *) arg)->object.this$));
          }
          static PyObject *t_Lookup_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lookup::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lookup_init_(t_Lookup *self, PyObject *args, PyObject *kwds)
          {
            Lookup object((jobject) NULL);

            INT_CALL(object = Lookup());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lookup_build(t_Lookup *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.build(a0));
                  Py_RETURN_NONE;
                }
              }
              {
                ::org::apache::lucene::search::spell::Dictionary a0((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::spell::Dictionary::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.build(a0));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "build", args);
            return NULL;
          }

          static PyObject *t_Lookup_getCount(t_Lookup *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getCount());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_Lookup_load(t_Lookup *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::store::DataInput a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.load(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              {
                ::java::io::InputStream a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.load(a0));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "load", args);
            return NULL;
          }

          static PyObject *t_Lookup_lookup(t_Lookup *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jboolean a1;
                jint a2;
                ::java::util::List result((jobject) NULL);

                if (!parseArgs(args, "OZI", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.lookup(a0, a1, a2));
                  return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                }
              }
              break;
             case 4:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::util::Set a1((jobject) NULL);
                PyTypeObject **p1;
                jboolean a2;
                jint a3;
                ::java::util::List result((jobject) NULL);

                if (!parseArgs(args, "OKZI", &::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3));
                  return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "lookup", args);
            return NULL;
          }

          static PyObject *t_Lookup_store(t_Lookup *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.store(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              {
                ::java::io::OutputStream a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "k", ::java::io::OutputStream::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.store(a0));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "store", args);
            return NULL;
          }

          static PyObject *t_Lookup_get__count(t_Lookup *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getCount());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/TextFragment.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *TextFragment::class$ = NULL;
          jmethodID *TextFragment::mids$ = NULL;
          bool TextFragment::live$ = false;

          jclass TextFragment::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/TextFragment");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_6cc8d7e2] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;II)V");
              mids$[mid_follows_0335a786] = env->getMethodID(cls, "follows", "(Lorg/apache/lucene/search/highlight/TextFragment;)Z");
              mids$[mid_getFragNum_54c6a179] = env->getMethodID(cls, "getFragNum", "()I");
              mids$[mid_getScore_54c6a176] = env->getMethodID(cls, "getScore", "()F");
              mids$[mid_merge_0335a78a] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/search/highlight/TextFragment;)V");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TextFragment::TextFragment(const ::java::lang::CharSequence & a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6cc8d7e2, a0.this$, a1, a2)) {}

          jboolean TextFragment::follows(const TextFragment & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_follows_0335a786], a0.this$);
          }

          jint TextFragment::getFragNum() const
          {
            return env->callIntMethod(this$, mids$[mid_getFragNum_54c6a179]);
          }

          jfloat TextFragment::getScore() const
          {
            return env->callFloatMethod(this$, mids$[mid_getScore_54c6a176]);
          }

          void TextFragment::merge(const TextFragment & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_merge_0335a78a], a0.this$);
          }

          ::java::lang::String TextFragment::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_TextFragment_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TextFragment_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TextFragment_init_(t_TextFragment *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TextFragment_follows(t_TextFragment *self, PyObject *arg);
          static PyObject *t_TextFragment_getFragNum(t_TextFragment *self);
          static PyObject *t_TextFragment_getScore(t_TextFragment *self);
          static PyObject *t_TextFragment_merge(t_TextFragment *self, PyObject *arg);
          static PyObject *t_TextFragment_toString(t_TextFragment *self, PyObject *args);
          static PyObject *t_TextFragment_get__fragNum(t_TextFragment *self, void *data);
          static PyObject *t_TextFragment_get__score(t_TextFragment *self, void *data);
          static PyGetSetDef t_TextFragment__fields_[] = {
            DECLARE_GET_FIELD(t_TextFragment, fragNum),
            DECLARE_GET_FIELD(t_TextFragment, score),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TextFragment__methods_[] = {
            DECLARE_METHOD(t_TextFragment, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TextFragment, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TextFragment, follows, METH_O),
            DECLARE_METHOD(t_TextFragment, getFragNum, METH_NOARGS),
            DECLARE_METHOD(t_TextFragment, getScore, METH_NOARGS),
            DECLARE_METHOD(t_TextFragment, merge, METH_O),
            DECLARE_METHOD(t_TextFragment, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TextFragment, t_TextFragment, ::java::lang::Object, TextFragment, t_TextFragment_init_, 0, 0, t_TextFragment__fields_, 0, 0);

          void t_TextFragment::install(PyObject *module)
          {
            installType(&PY_TYPE(TextFragment), module, "TextFragment", 0);
          }

          void t_TextFragment::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TextFragment).tp_dict, "class_", make_descriptor(TextFragment::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TextFragment).tp_dict, "wrapfn_", make_descriptor(t_TextFragment::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TextFragment).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TextFragment_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TextFragment::initializeClass, 1)))
              return NULL;
            return t_TextFragment::wrap_Object(TextFragment(((t_TextFragment *) arg)->object.this$));
          }
          static PyObject *t_TextFragment_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TextFragment::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TextFragment_init_(t_TextFragment *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::CharSequence a0((jobject) NULL);
            jint a1;
            jint a2;
            TextFragment object((jobject) NULL);

            if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
            {
              INT_CALL(object = TextFragment(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TextFragment_follows(t_TextFragment *self, PyObject *arg)
          {
            TextFragment a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "k", TextFragment::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.follows(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "follows", arg);
            return NULL;
          }

          static PyObject *t_TextFragment_getFragNum(t_TextFragment *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getFragNum());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_TextFragment_getScore(t_TextFragment *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getScore());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_TextFragment_merge(t_TextFragment *self, PyObject *arg)
          {
            TextFragment a0((jobject) NULL);

            if (!parseArg(arg, "k", TextFragment::initializeClass, &a0))
            {
              OBJ_CALL(self->object.merge(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "merge", arg);
            return NULL;
          }

          static PyObject *t_TextFragment_toString(t_TextFragment *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(TextFragment), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_TextFragment_get__fragNum(t_TextFragment *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getFragNum());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_TextFragment_get__score(t_TextFragment *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getScore());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/MergedIterator.h"
#include "java/lang/Comparable.h"
#include "java/util/Iterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *MergedIterator::class$ = NULL;
        jmethodID *MergedIterator::mids$ = NULL;
        bool MergedIterator::live$ = false;

        jclass MergedIterator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/MergedIterator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_1b3aeeed] = env->getMethodID(cls, "<init>", "([Ljava/util/Iterator;)V");
            mids$[mid_init$_287ab92a] = env->getMethodID(cls, "<init>", "(Z[Ljava/util/Iterator;)V");
            mids$[mid_hasNext_54c6a16a] = env->getMethodID(cls, "hasNext", "()Z");
            mids$[mid_next_c6fd33d8] = env->getMethodID(cls, "next", "()Ljava/lang/Comparable;");
            mids$[mid_remove_54c6a166] = env->getMethodID(cls, "remove", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MergedIterator::MergedIterator(const JArray< ::java::util::Iterator > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_1b3aeeed, a0.this$)) {}

        MergedIterator::MergedIterator(jboolean a0, const JArray< ::java::util::Iterator > & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_287ab92a, a0, a1.this$)) {}

        jboolean MergedIterator::hasNext() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasNext_54c6a16a]);
        }

        ::java::lang::Comparable MergedIterator::next() const
        {
          return ::java::lang::Comparable(env->callObjectMethod(this$, mids$[mid_next_c6fd33d8]));
        }

        void MergedIterator::remove() const
        {
          env->callVoidMethod(this$, mids$[mid_remove_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_MergedIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergedIterator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergedIterator_of_(t_MergedIterator *self, PyObject *args);
        static int t_MergedIterator_init_(t_MergedIterator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MergedIterator_hasNext(t_MergedIterator *self);
        static PyObject *t_MergedIterator_next(t_MergedIterator *self);
        static PyObject *t_MergedIterator_remove(t_MergedIterator *self);
        static PyObject *t_MergedIterator_get__parameters_(t_MergedIterator *self, void *data);
        static PyGetSetDef t_MergedIterator__fields_[] = {
          DECLARE_GET_FIELD(t_MergedIterator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MergedIterator__methods_[] = {
          DECLARE_METHOD(t_MergedIterator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergedIterator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergedIterator, of_, METH_VARARGS),
          DECLARE_METHOD(t_MergedIterator, hasNext, METH_NOARGS),
          DECLARE_METHOD(t_MergedIterator, next, METH_NOARGS),
          DECLARE_METHOD(t_MergedIterator, remove, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MergedIterator, t_MergedIterator, ::java::lang::Object, MergedIterator, t_MergedIterator_init_, PyObject_SelfIter, ((PyObject *(*)(::java::util::t_Iterator *)) get_generic_iterator_next< ::java::util::t_Iterator,::java::lang::t_Comparable >), t_MergedIterator__fields_, 0, 0);
        PyObject *t_MergedIterator::wrap_Object(const MergedIterator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MergedIterator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MergedIterator *self = (t_MergedIterator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_MergedIterator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MergedIterator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MergedIterator *self = (t_MergedIterator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_MergedIterator::install(PyObject *module)
        {
          installType(&PY_TYPE(MergedIterator), module, "MergedIterator", 0);
        }

        void t_MergedIterator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MergedIterator).tp_dict, "class_", make_descriptor(MergedIterator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MergedIterator).tp_dict, "wrapfn_", make_descriptor(t_MergedIterator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MergedIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergedIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergedIterator::initializeClass, 1)))
            return NULL;
          return t_MergedIterator::wrap_Object(MergedIterator(((t_MergedIterator *) arg)->object.this$));
        }
        static PyObject *t_MergedIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergedIterator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MergedIterator_of_(t_MergedIterator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_MergedIterator_init_(t_MergedIterator *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::java::util::Iterator > a0((jobject) NULL);
              PyTypeObject **p0;
              MergedIterator object((jobject) NULL);

              if (!parseArgs(args, "[K", ::java::util::Iterator::initializeClass, &a0, &p0, ::java::util::t_Iterator::parameters_))
              {
                INT_CALL(object = MergedIterator(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              jboolean a0;
              JArray< ::java::util::Iterator > a1((jobject) NULL);
              PyTypeObject **p1;
              MergedIterator object((jobject) NULL);

              if (!parseArgs(args, "Z[K", ::java::util::Iterator::initializeClass, &a0, &a1, &p1, ::java::util::t_Iterator::parameters_))
              {
                INT_CALL(object = MergedIterator(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MergedIterator_hasNext(t_MergedIterator *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasNext());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_MergedIterator_next(t_MergedIterator *self)
        {
          ::java::lang::Comparable result((jobject) NULL);
          OBJ_CALL(result = self->object.next());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Comparable::wrap_Object(result);
        }

        static PyObject *t_MergedIterator_remove(t_MergedIterator *self)
        {
          OBJ_CALL(self->object.remove());
          Py_RETURN_NONE;
        }
        static PyObject *t_MergedIterator_get__parameters_(t_MergedIterator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/OffsetAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *OffsetAttribute::class$ = NULL;
          jmethodID *OffsetAttribute::mids$ = NULL;
          bool OffsetAttribute::live$ = false;

          jclass OffsetAttribute::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/OffsetAttribute");

              mids$ = new jmethodID[max_mid];
              mids$[mid_endOffset_54c6a179] = env->getMethodID(cls, "endOffset", "()I");
              mids$[mid_setOffset_d8d154a6] = env->getMethodID(cls, "setOffset", "(II)V");
              mids$[mid_startOffset_54c6a179] = env->getMethodID(cls, "startOffset", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint OffsetAttribute::endOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_endOffset_54c6a179]);
          }

          void OffsetAttribute::setOffset(jint a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_setOffset_d8d154a6], a0, a1);
          }

          jint OffsetAttribute::startOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_startOffset_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_OffsetAttribute_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_OffsetAttribute_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_OffsetAttribute_endOffset(t_OffsetAttribute *self);
          static PyObject *t_OffsetAttribute_setOffset(t_OffsetAttribute *self, PyObject *args);
          static PyObject *t_OffsetAttribute_startOffset(t_OffsetAttribute *self);

          static PyMethodDef t_OffsetAttribute__methods_[] = {
            DECLARE_METHOD(t_OffsetAttribute, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OffsetAttribute, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OffsetAttribute, endOffset, METH_NOARGS),
            DECLARE_METHOD(t_OffsetAttribute, setOffset, METH_VARARGS),
            DECLARE_METHOD(t_OffsetAttribute, startOffset, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(OffsetAttribute, t_OffsetAttribute, ::org::apache::lucene::util::Attribute, OffsetAttribute, abstract_init, 0, 0, 0, 0, 0);

          void t_OffsetAttribute::install(PyObject *module)
          {
            installType(&PY_TYPE(OffsetAttribute), module, "OffsetAttribute", 0);
          }

          void t_OffsetAttribute::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(OffsetAttribute).tp_dict, "class_", make_descriptor(OffsetAttribute::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(OffsetAttribute).tp_dict, "wrapfn_", make_descriptor(t_OffsetAttribute::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(OffsetAttribute).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_OffsetAttribute_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, OffsetAttribute::initializeClass, 1)))
              return NULL;
            return t_OffsetAttribute::wrap_Object(OffsetAttribute(((t_OffsetAttribute *) arg)->object.this$));
          }
          static PyObject *t_OffsetAttribute_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, OffsetAttribute::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_OffsetAttribute_endOffset(t_OffsetAttribute *self)
          {
            jint result;
            OBJ_CALL(result = self->object.endOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_OffsetAttribute_setOffset(t_OffsetAttribute *self, PyObject *args)
          {
            jint a0;
            jint a1;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(self->object.setOffset(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setOffset", args);
            return NULL;
          }

          static PyObject *t_OffsetAttribute_startOffset(t_OffsetAttribute *self)
          {
            jint result;
            OBJ_CALL(result = self->object.startOffset());
            return PyInt_FromLong((long) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/FuzzyLikeThisQueryBuilder.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *FuzzyLikeThisQueryBuilder::class$ = NULL;
            jmethodID *FuzzyLikeThisQueryBuilder::mids$ = NULL;
            bool FuzzyLikeThisQueryBuilder::live$ = false;

            jclass FuzzyLikeThisQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/FuzzyLikeThisQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_31619410] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FuzzyLikeThisQueryBuilder::FuzzyLikeThisQueryBuilder(const ::org::apache::lucene::analysis::Analyzer & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_31619410, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_FuzzyLikeThisQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FuzzyLikeThisQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FuzzyLikeThisQueryBuilder_init_(t_FuzzyLikeThisQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_FuzzyLikeThisQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_FuzzyLikeThisQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FuzzyLikeThisQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FuzzyLikeThisQueryBuilder, t_FuzzyLikeThisQueryBuilder, ::java::lang::Object, FuzzyLikeThisQueryBuilder, t_FuzzyLikeThisQueryBuilder_init_, 0, 0, 0, 0, 0);

            void t_FuzzyLikeThisQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(FuzzyLikeThisQueryBuilder), module, "FuzzyLikeThisQueryBuilder", 0);
            }

            void t_FuzzyLikeThisQueryBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FuzzyLikeThisQueryBuilder).tp_dict, "class_", make_descriptor(FuzzyLikeThisQueryBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FuzzyLikeThisQueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_FuzzyLikeThisQueryBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FuzzyLikeThisQueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FuzzyLikeThisQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FuzzyLikeThisQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_FuzzyLikeThisQueryBuilder::wrap_Object(FuzzyLikeThisQueryBuilder(((t_FuzzyLikeThisQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_FuzzyLikeThisQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FuzzyLikeThisQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FuzzyLikeThisQueryBuilder_init_(t_FuzzyLikeThisQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
              FuzzyLikeThisQueryBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
              {
                INT_CALL(object = FuzzyLikeThisQueryBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/ConstNumberSource.h"
#include "java/lang/Number.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *ConstNumberSource::class$ = NULL;
            jmethodID *ConstNumberSource::mids$ = NULL;
            bool ConstNumberSource::live$ = false;

            jclass ConstNumberSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/ConstNumberSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_getBool_54c6a16a] = env->getMethodID(cls, "getBool", "()Z");
                mids$[mid_getDouble_54c6a174] = env->getMethodID(cls, "getDouble", "()D");
                mids$[mid_getFloat_54c6a176] = env->getMethodID(cls, "getFloat", "()F");
                mids$[mid_getInt_54c6a179] = env->getMethodID(cls, "getInt", "()I");
                mids$[mid_getLong_54c6a17a] = env->getMethodID(cls, "getLong", "()J");
                mids$[mid_getNumber_ee47e3e1] = env->getMethodID(cls, "getNumber", "()Ljava/lang/Number;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ConstNumberSource::ConstNumberSource() : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            jboolean ConstNumberSource::getBool() const
            {
              return env->callBooleanMethod(this$, mids$[mid_getBool_54c6a16a]);
            }

            jdouble ConstNumberSource::getDouble() const
            {
              return env->callDoubleMethod(this$, mids$[mid_getDouble_54c6a174]);
            }

            jfloat ConstNumberSource::getFloat() const
            {
              return env->callFloatMethod(this$, mids$[mid_getFloat_54c6a176]);
            }

            jint ConstNumberSource::getInt() const
            {
              return env->callIntMethod(this$, mids$[mid_getInt_54c6a179]);
            }

            jlong ConstNumberSource::getLong() const
            {
              return env->callLongMethod(this$, mids$[mid_getLong_54c6a17a]);
            }

            ::java::lang::Number ConstNumberSource::getNumber() const
            {
              return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getNumber_ee47e3e1]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_ConstNumberSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ConstNumberSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ConstNumberSource_init_(t_ConstNumberSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ConstNumberSource_getBool(t_ConstNumberSource *self);
            static PyObject *t_ConstNumberSource_getDouble(t_ConstNumberSource *self);
            static PyObject *t_ConstNumberSource_getFloat(t_ConstNumberSource *self);
            static PyObject *t_ConstNumberSource_getInt(t_ConstNumberSource *self);
            static PyObject *t_ConstNumberSource_getLong(t_ConstNumberSource *self);
            static PyObject *t_ConstNumberSource_getNumber(t_ConstNumberSource *self);
            static PyObject *t_ConstNumberSource_get__bool(t_ConstNumberSource *self, void *data);
            static PyObject *t_ConstNumberSource_get__double(t_ConstNumberSource *self, void *data);
            static PyObject *t_ConstNumberSource_get__float(t_ConstNumberSource *self, void *data);
            static PyObject *t_ConstNumberSource_get__int(t_ConstNumberSource *self, void *data);
            static PyObject *t_ConstNumberSource_get__long(t_ConstNumberSource *self, void *data);
            static PyObject *t_ConstNumberSource_get__number(t_ConstNumberSource *self, void *data);
            static PyGetSetDef t_ConstNumberSource__fields_[] = {
              DECLARE_GET_FIELD(t_ConstNumberSource, bool),
              DECLARE_GET_FIELD(t_ConstNumberSource, double),
              DECLARE_GET_FIELD(t_ConstNumberSource, float),
              DECLARE_GET_FIELD(t_ConstNumberSource, int),
              DECLARE_GET_FIELD(t_ConstNumberSource, long),
              DECLARE_GET_FIELD(t_ConstNumberSource, number),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_ConstNumberSource__methods_[] = {
              DECLARE_METHOD(t_ConstNumberSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ConstNumberSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ConstNumberSource, getBool, METH_NOARGS),
              DECLARE_METHOD(t_ConstNumberSource, getDouble, METH_NOARGS),
              DECLARE_METHOD(t_ConstNumberSource, getFloat, METH_NOARGS),
              DECLARE_METHOD(t_ConstNumberSource, getInt, METH_NOARGS),
              DECLARE_METHOD(t_ConstNumberSource, getLong, METH_NOARGS),
              DECLARE_METHOD(t_ConstNumberSource, getNumber, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(ConstNumberSource, t_ConstNumberSource, ::org::apache::lucene::queries::function::ValueSource, ConstNumberSource, t_ConstNumberSource_init_, 0, 0, t_ConstNumberSource__fields_, 0, 0);

            void t_ConstNumberSource::install(PyObject *module)
            {
              installType(&PY_TYPE(ConstNumberSource), module, "ConstNumberSource", 0);
            }

            void t_ConstNumberSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(ConstNumberSource).tp_dict, "class_", make_descriptor(ConstNumberSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(ConstNumberSource).tp_dict, "wrapfn_", make_descriptor(t_ConstNumberSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(ConstNumberSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ConstNumberSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ConstNumberSource::initializeClass, 1)))
                return NULL;
              return t_ConstNumberSource::wrap_Object(ConstNumberSource(((t_ConstNumberSource *) arg)->object.this$));
            }
            static PyObject *t_ConstNumberSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ConstNumberSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ConstNumberSource_init_(t_ConstNumberSource *self, PyObject *args, PyObject *kwds)
            {
              ConstNumberSource object((jobject) NULL);

              INT_CALL(object = ConstNumberSource());
              self->object = object;

              return 0;
            }

            static PyObject *t_ConstNumberSource_getBool(t_ConstNumberSource *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.getBool());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_ConstNumberSource_getDouble(t_ConstNumberSource *self)
            {
              jdouble result;
              OBJ_CALL(result = self->object.getDouble());
              return PyFloat_FromDouble((double) result);
            }

            static PyObject *t_ConstNumberSource_getFloat(t_ConstNumberSource *self)
            {
              jfloat result;
              OBJ_CALL(result = self->object.getFloat());
              return PyFloat_FromDouble((double) result);
            }

            static PyObject *t_ConstNumberSource_getInt(t_ConstNumberSource *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getInt());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_ConstNumberSource_getLong(t_ConstNumberSource *self)
            {
              jlong result;
              OBJ_CALL(result = self->object.getLong());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            static PyObject *t_ConstNumberSource_getNumber(t_ConstNumberSource *self)
            {
              ::java::lang::Number result((jobject) NULL);
              OBJ_CALL(result = self->object.getNumber());
              return ::java::lang::t_Number::wrap_Object(result);
            }

            static PyObject *t_ConstNumberSource_get__bool(t_ConstNumberSource *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.getBool());
              Py_RETURN_BOOL(value);
            }

            static PyObject *t_ConstNumberSource_get__double(t_ConstNumberSource *self, void *data)
            {
              jdouble value;
              OBJ_CALL(value = self->object.getDouble());
              return PyFloat_FromDouble((double) value);
            }

            static PyObject *t_ConstNumberSource_get__float(t_ConstNumberSource *self, void *data)
            {
              jfloat value;
              OBJ_CALL(value = self->object.getFloat());
              return PyFloat_FromDouble((double) value);
            }

            static PyObject *t_ConstNumberSource_get__int(t_ConstNumberSource *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getInt());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_ConstNumberSource_get__long(t_ConstNumberSource *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object.getLong());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }

            static PyObject *t_ConstNumberSource_get__number(t_ConstNumberSource *self, void *data)
            {
              ::java::lang::Number value((jobject) NULL);
              OBJ_CALL(value = self->object.getNumber());
              return ::java::lang::t_Number::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/Terms.h"
#include "java/util/Comparator.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *Terms::class$ = NULL;
        jmethodID *Terms::mids$ = NULL;
        bool Terms::live$ = false;
        JArray< Terms > *Terms::EMPTY_ARRAY = NULL;

        jclass Terms::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/Terms");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
            mids$[mid_getDocCount_54c6a179] = env->getMethodID(cls, "getDocCount", "()I");
            mids$[mid_getMax_4ae19461] = env->getMethodID(cls, "getMax", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getMin_4ae19461] = env->getMethodID(cls, "getMin", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getSumDocFreq_54c6a17a] = env->getMethodID(cls, "getSumDocFreq", "()J");
            mids$[mid_getSumTotalTermFreq_54c6a17a] = env->getMethodID(cls, "getSumTotalTermFreq", "()J");
            mids$[mid_hasFreqs_54c6a16a] = env->getMethodID(cls, "hasFreqs", "()Z");
            mids$[mid_hasOffsets_54c6a16a] = env->getMethodID(cls, "hasOffsets", "()Z");
            mids$[mid_hasPayloads_54c6a16a] = env->getMethodID(cls, "hasPayloads", "()Z");
            mids$[mid_hasPositions_54c6a16a] = env->getMethodID(cls, "hasPositions", "()Z");
            mids$[mid_intersect_b8f2b1bc] = env->getMethodID(cls, "intersect", "(Lorg/apache/lucene/util/automaton/CompiledAutomaton;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum;");
            mids$[mid_iterator_d737078b] = env->getMethodID(cls, "iterator", "(Lorg/apache/lucene/index/TermsEnum;)Lorg/apache/lucene/index/TermsEnum;");
            mids$[mid_size_54c6a17a] = env->getMethodID(cls, "size", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY_ARRAY = new JArray< Terms >(env->getStaticObjectField(cls, "EMPTY_ARRAY", "[Lorg/apache/lucene/index/Terms;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::Comparator Terms::getComparator() const
        {
          return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
        }

        jint Terms::getDocCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getDocCount_54c6a179]);
        }

        ::org::apache::lucene::util::BytesRef Terms::getMax() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getMax_4ae19461]));
        }

        ::org::apache::lucene::util::BytesRef Terms::getMin() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getMin_4ae19461]));
        }

        jlong Terms::getSumDocFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_getSumDocFreq_54c6a17a]);
        }

        jlong Terms::getSumTotalTermFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_getSumTotalTermFreq_54c6a17a]);
        }

        jboolean Terms::hasFreqs() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasFreqs_54c6a16a]);
        }

        jboolean Terms::hasOffsets() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasOffsets_54c6a16a]);
        }

        jboolean Terms::hasPayloads() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasPayloads_54c6a16a]);
        }

        jboolean Terms::hasPositions() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasPositions_54c6a16a]);
        }

        ::org::apache::lucene::index::TermsEnum Terms::intersect(const ::org::apache::lucene::util::automaton::CompiledAutomaton & a0, const ::org::apache::lucene::util::BytesRef & a1) const
        {
          return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_intersect_b8f2b1bc], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::TermsEnum Terms::iterator(const ::org::apache::lucene::index::TermsEnum & a0) const
        {
          return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_iterator_d737078b], a0.this$));
        }

        jlong Terms::size() const
        {
          return env->callLongMethod(this$, mids$[mid_size_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_Terms_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Terms_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Terms_getComparator(t_Terms *self);
        static PyObject *t_Terms_getDocCount(t_Terms *self);
        static PyObject *t_Terms_getMax(t_Terms *self);
        static PyObject *t_Terms_getMin(t_Terms *self);
        static PyObject *t_Terms_getSumDocFreq(t_Terms *self);
        static PyObject *t_Terms_getSumTotalTermFreq(t_Terms *self);
        static PyObject *t_Terms_hasFreqs(t_Terms *self);
        static PyObject *t_Terms_hasOffsets(t_Terms *self);
        static PyObject *t_Terms_hasPayloads(t_Terms *self);
        static PyObject *t_Terms_hasPositions(t_Terms *self);
        static PyObject *t_Terms_intersect(t_Terms *self, PyObject *args);
        static PyObject *t_Terms_iterator(t_Terms *self, PyObject *arg);
        static PyObject *t_Terms_size(t_Terms *self);
        static PyObject *t_Terms_get__comparator(t_Terms *self, void *data);
        static PyObject *t_Terms_get__docCount(t_Terms *self, void *data);
        static PyObject *t_Terms_get__max(t_Terms *self, void *data);
        static PyObject *t_Terms_get__min(t_Terms *self, void *data);
        static PyObject *t_Terms_get__sumDocFreq(t_Terms *self, void *data);
        static PyObject *t_Terms_get__sumTotalTermFreq(t_Terms *self, void *data);
        static PyGetSetDef t_Terms__fields_[] = {
          DECLARE_GET_FIELD(t_Terms, comparator),
          DECLARE_GET_FIELD(t_Terms, docCount),
          DECLARE_GET_FIELD(t_Terms, max),
          DECLARE_GET_FIELD(t_Terms, min),
          DECLARE_GET_FIELD(t_Terms, sumDocFreq),
          DECLARE_GET_FIELD(t_Terms, sumTotalTermFreq),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Terms__methods_[] = {
          DECLARE_METHOD(t_Terms, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Terms, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Terms, getComparator, METH_NOARGS),
          DECLARE_METHOD(t_Terms, getDocCount, METH_NOARGS),
          DECLARE_METHOD(t_Terms, getMax, METH_NOARGS),
          DECLARE_METHOD(t_Terms, getMin, METH_NOARGS),
          DECLARE_METHOD(t_Terms, getSumDocFreq, METH_NOARGS),
          DECLARE_METHOD(t_Terms, getSumTotalTermFreq, METH_NOARGS),
          DECLARE_METHOD(t_Terms, hasFreqs, METH_NOARGS),
          DECLARE_METHOD(t_Terms, hasOffsets, METH_NOARGS),
          DECLARE_METHOD(t_Terms, hasPayloads, METH_NOARGS),
          DECLARE_METHOD(t_Terms, hasPositions, METH_NOARGS),
          DECLARE_METHOD(t_Terms, intersect, METH_VARARGS),
          DECLARE_METHOD(t_Terms, iterator, METH_O),
          DECLARE_METHOD(t_Terms, size, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Terms, t_Terms, ::java::lang::Object, Terms, abstract_init, 0, 0, t_Terms__fields_, 0, 0);

        void t_Terms::install(PyObject *module)
        {
          installType(&PY_TYPE(Terms), module, "Terms", 0);
        }

        void t_Terms::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Terms).tp_dict, "class_", make_descriptor(Terms::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Terms).tp_dict, "wrapfn_", make_descriptor(t_Terms::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Terms).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(Terms::initializeClass);
          PyDict_SetItemString(PY_TYPE(Terms).tp_dict, "EMPTY_ARRAY", make_descriptor(JArray<jobject>(Terms::EMPTY_ARRAY->this$).wrap(t_Terms::wrap_jobject)));
        }

        static PyObject *t_Terms_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Terms::initializeClass, 1)))
            return NULL;
          return t_Terms::wrap_Object(Terms(((t_Terms *) arg)->object.this$));
        }
        static PyObject *t_Terms_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Terms::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Terms_getComparator(t_Terms *self)
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
        }

        static PyObject *t_Terms_getDocCount(t_Terms *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getDocCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_Terms_getMax(t_Terms *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getMax());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_Terms_getMin(t_Terms *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getMin());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_Terms_getSumDocFreq(t_Terms *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getSumDocFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_Terms_getSumTotalTermFreq(t_Terms *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getSumTotalTermFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_Terms_hasFreqs(t_Terms *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasFreqs());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Terms_hasOffsets(t_Terms *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasOffsets());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Terms_hasPayloads(t_Terms *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasPayloads());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Terms_hasPositions(t_Terms *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasPositions());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Terms_intersect(t_Terms *self, PyObject *args)
        {
          ::org::apache::lucene::util::automaton::CompiledAutomaton a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::util::automaton::CompiledAutomaton::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.intersect(a0, a1));
            return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "intersect", args);
          return NULL;
        }

        static PyObject *t_Terms_iterator(t_Terms *self, PyObject *arg)
        {
          ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.iterator(a0));
            return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "iterator", arg);
          return NULL;
        }

        static PyObject *t_Terms_size(t_Terms *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.size());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_Terms_get__comparator(t_Terms *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }

        static PyObject *t_Terms_get__docCount(t_Terms *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getDocCount());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_Terms_get__max(t_Terms *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getMax());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }

        static PyObject *t_Terms_get__min(t_Terms *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getMin());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }

        static PyObject *t_Terms_get__sumDocFreq(t_Terms *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getSumDocFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_Terms_get__sumTotalTermFreq(t_Terms *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getSumTotalTermFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/it/ItalianAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace it {

          ::java::lang::Class *ItalianAnalyzer::class$ = NULL;
          jmethodID *ItalianAnalyzer::mids$ = NULL;
          bool ItalianAnalyzer::live$ = false;
          ::java::lang::String *ItalianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass ItalianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/it/ItalianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ItalianAnalyzer::ItalianAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          ItalianAnalyzer::ItalianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          ItalianAnalyzer::ItalianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet ItalianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace it {
          static PyObject *t_ItalianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ItalianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ItalianAnalyzer_init_(t_ItalianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ItalianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_ItalianAnalyzer_get__defaultStopSet(t_ItalianAnalyzer *self, void *data);
          static PyGetSetDef t_ItalianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_ItalianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ItalianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_ItalianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ItalianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ItalianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ItalianAnalyzer, t_ItalianAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, ItalianAnalyzer, t_ItalianAnalyzer_init_, 0, 0, t_ItalianAnalyzer__fields_, 0, 0);

          void t_ItalianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(ItalianAnalyzer), module, "ItalianAnalyzer", 0);
          }

          void t_ItalianAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ItalianAnalyzer).tp_dict, "class_", make_descriptor(ItalianAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ItalianAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_ItalianAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ItalianAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ItalianAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(ItalianAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*ItalianAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_ItalianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ItalianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_ItalianAnalyzer::wrap_Object(ItalianAnalyzer(((t_ItalianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_ItalianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ItalianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ItalianAnalyzer_init_(t_ItalianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ItalianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = ItalianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ItalianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = ItalianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                ItalianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = ItalianAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ItalianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::it::ItalianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_ItalianAnalyzer_get__defaultStopSet(t_ItalianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoFormat.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/SegmentInfoReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/SegmentInfoWriter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene46 {

          ::java::lang::Class *Lucene46SegmentInfoFormat::class$ = NULL;
          jmethodID *Lucene46SegmentInfoFormat::mids$ = NULL;
          bool Lucene46SegmentInfoFormat::live$ = false;
          ::java::lang::String *Lucene46SegmentInfoFormat::SI_EXTENSION = NULL;

          jclass Lucene46SegmentInfoFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene46/Lucene46SegmentInfoFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getSegmentInfoReader_1e88b6e7] = env->getMethodID(cls, "getSegmentInfoReader", "()Lorg/apache/lucene/codecs/SegmentInfoReader;");
              mids$[mid_getSegmentInfoWriter_2d4ab533] = env->getMethodID(cls, "getSegmentInfoWriter", "()Lorg/apache/lucene/codecs/SegmentInfoWriter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              SI_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "SI_EXTENSION", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene46SegmentInfoFormat::Lucene46SegmentInfoFormat() : ::org::apache::lucene::codecs::SegmentInfoFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::SegmentInfoReader Lucene46SegmentInfoFormat::getSegmentInfoReader() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoReader(env->callObjectMethod(this$, mids$[mid_getSegmentInfoReader_1e88b6e7]));
          }

          ::org::apache::lucene::codecs::SegmentInfoWriter Lucene46SegmentInfoFormat::getSegmentInfoWriter() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoWriter(env->callObjectMethod(this$, mids$[mid_getSegmentInfoWriter_2d4ab533]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene46 {
          static PyObject *t_Lucene46SegmentInfoFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene46SegmentInfoFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene46SegmentInfoFormat_init_(t_Lucene46SegmentInfoFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene46SegmentInfoFormat_getSegmentInfoReader(t_Lucene46SegmentInfoFormat *self, PyObject *args);
          static PyObject *t_Lucene46SegmentInfoFormat_getSegmentInfoWriter(t_Lucene46SegmentInfoFormat *self, PyObject *args);
          static PyObject *t_Lucene46SegmentInfoFormat_get__segmentInfoReader(t_Lucene46SegmentInfoFormat *self, void *data);
          static PyObject *t_Lucene46SegmentInfoFormat_get__segmentInfoWriter(t_Lucene46SegmentInfoFormat *self, void *data);
          static PyGetSetDef t_Lucene46SegmentInfoFormat__fields_[] = {
            DECLARE_GET_FIELD(t_Lucene46SegmentInfoFormat, segmentInfoReader),
            DECLARE_GET_FIELD(t_Lucene46SegmentInfoFormat, segmentInfoWriter),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lucene46SegmentInfoFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene46SegmentInfoFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene46SegmentInfoFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene46SegmentInfoFormat, getSegmentInfoReader, METH_VARARGS),
            DECLARE_METHOD(t_Lucene46SegmentInfoFormat, getSegmentInfoWriter, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene46SegmentInfoFormat, t_Lucene46SegmentInfoFormat, ::org::apache::lucene::codecs::SegmentInfoFormat, Lucene46SegmentInfoFormat, t_Lucene46SegmentInfoFormat_init_, 0, 0, t_Lucene46SegmentInfoFormat__fields_, 0, 0);

          void t_Lucene46SegmentInfoFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene46SegmentInfoFormat), module, "Lucene46SegmentInfoFormat", 0);
          }

          void t_Lucene46SegmentInfoFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene46SegmentInfoFormat).tp_dict, "class_", make_descriptor(Lucene46SegmentInfoFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene46SegmentInfoFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene46SegmentInfoFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene46SegmentInfoFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene46SegmentInfoFormat::initializeClass);
            PyDict_SetItemString(PY_TYPE(Lucene46SegmentInfoFormat).tp_dict, "SI_EXTENSION", make_descriptor(j2p(*Lucene46SegmentInfoFormat::SI_EXTENSION)));
          }

          static PyObject *t_Lucene46SegmentInfoFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene46SegmentInfoFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene46SegmentInfoFormat::wrap_Object(Lucene46SegmentInfoFormat(((t_Lucene46SegmentInfoFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene46SegmentInfoFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene46SegmentInfoFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene46SegmentInfoFormat_init_(t_Lucene46SegmentInfoFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene46SegmentInfoFormat object((jobject) NULL);

            INT_CALL(object = Lucene46SegmentInfoFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene46SegmentInfoFormat_getSegmentInfoReader(t_Lucene46SegmentInfoFormat *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoReader result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getSegmentInfoReader());
              return ::org::apache::lucene::codecs::t_SegmentInfoReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene46SegmentInfoFormat), (PyObject *) self, "getSegmentInfoReader", args, 2);
          }

          static PyObject *t_Lucene46SegmentInfoFormat_getSegmentInfoWriter(t_Lucene46SegmentInfoFormat *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoWriter result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getSegmentInfoWriter());
              return ::org::apache::lucene::codecs::t_SegmentInfoWriter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene46SegmentInfoFormat), (PyObject *) self, "getSegmentInfoWriter", args, 2);
          }

          static PyObject *t_Lucene46SegmentInfoFormat_get__segmentInfoReader(t_Lucene46SegmentInfoFormat *self, void *data)
          {
            ::org::apache::lucene::codecs::SegmentInfoReader value((jobject) NULL);
            OBJ_CALL(value = self->object.getSegmentInfoReader());
            return ::org::apache::lucene::codecs::t_SegmentInfoReader::wrap_Object(value);
          }

          static PyObject *t_Lucene46SegmentInfoFormat_get__segmentInfoWriter(t_Lucene46SegmentInfoFormat *self, void *data)
          {
            ::org::apache::lucene::codecs::SegmentInfoWriter value((jobject) NULL);
            OBJ_CALL(value = self->object.getSegmentInfoWriter());
            return ::org::apache::lucene::codecs::t_SegmentInfoWriter::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/LMSimilarity$LMStats.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *LMSimilarity$LMStats::class$ = NULL;
          jmethodID *LMSimilarity$LMStats::mids$ = NULL;
          bool LMSimilarity$LMStats::live$ = false;

          jclass LMSimilarity$LMStats::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/LMSimilarity$LMStats");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f0649ce1] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;F)V");
              mids$[mid_getCollectionProbability_54c6a176] = env->getMethodID(cls, "getCollectionProbability", "()F");
              mids$[mid_setCollectionProbability_06298cab] = env->getMethodID(cls, "setCollectionProbability", "(F)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LMSimilarity$LMStats::LMSimilarity$LMStats(const ::java::lang::String & a0, jfloat a1) : ::org::apache::lucene::search::similarities::BasicStats(env->newObject(initializeClass, &mids$, mid_init$_f0649ce1, a0.this$, a1)) {}

          jfloat LMSimilarity$LMStats::getCollectionProbability() const
          {
            return env->callFloatMethod(this$, mids$[mid_getCollectionProbability_54c6a176]);
          }

          void LMSimilarity$LMStats::setCollectionProbability(jfloat a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setCollectionProbability_06298cab], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_LMSimilarity$LMStats_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LMSimilarity$LMStats_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LMSimilarity$LMStats_init_(t_LMSimilarity$LMStats *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LMSimilarity$LMStats_getCollectionProbability(t_LMSimilarity$LMStats *self);
          static PyObject *t_LMSimilarity$LMStats_setCollectionProbability(t_LMSimilarity$LMStats *self, PyObject *arg);
          static PyObject *t_LMSimilarity$LMStats_get__collectionProbability(t_LMSimilarity$LMStats *self, void *data);
          static int t_LMSimilarity$LMStats_set__collectionProbability(t_LMSimilarity$LMStats *self, PyObject *arg, void *data);
          static PyGetSetDef t_LMSimilarity$LMStats__fields_[] = {
            DECLARE_GETSET_FIELD(t_LMSimilarity$LMStats, collectionProbability),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LMSimilarity$LMStats__methods_[] = {
            DECLARE_METHOD(t_LMSimilarity$LMStats, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMSimilarity$LMStats, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LMSimilarity$LMStats, getCollectionProbability, METH_NOARGS),
            DECLARE_METHOD(t_LMSimilarity$LMStats, setCollectionProbability, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LMSimilarity$LMStats, t_LMSimilarity$LMStats, ::org::apache::lucene::search::similarities::BasicStats, LMSimilarity$LMStats, t_LMSimilarity$LMStats_init_, 0, 0, t_LMSimilarity$LMStats__fields_, 0, 0);

          void t_LMSimilarity$LMStats::install(PyObject *module)
          {
            installType(&PY_TYPE(LMSimilarity$LMStats), module, "LMSimilarity$LMStats", 0);
          }

          void t_LMSimilarity$LMStats::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LMSimilarity$LMStats).tp_dict, "class_", make_descriptor(LMSimilarity$LMStats::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LMSimilarity$LMStats).tp_dict, "wrapfn_", make_descriptor(t_LMSimilarity$LMStats::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LMSimilarity$LMStats).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LMSimilarity$LMStats_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LMSimilarity$LMStats::initializeClass, 1)))
              return NULL;
            return t_LMSimilarity$LMStats::wrap_Object(LMSimilarity$LMStats(((t_LMSimilarity$LMStats *) arg)->object.this$));
          }
          static PyObject *t_LMSimilarity$LMStats_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LMSimilarity$LMStats::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LMSimilarity$LMStats_init_(t_LMSimilarity$LMStats *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            jfloat a1;
            LMSimilarity$LMStats object((jobject) NULL);

            if (!parseArgs(args, "sF", &a0, &a1))
            {
              INT_CALL(object = LMSimilarity$LMStats(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LMSimilarity$LMStats_getCollectionProbability(t_LMSimilarity$LMStats *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getCollectionProbability());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_LMSimilarity$LMStats_setCollectionProbability(t_LMSimilarity$LMStats *self, PyObject *arg)
          {
            jfloat a0;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(self->object.setCollectionProbability(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setCollectionProbability", arg);
            return NULL;
          }

          static PyObject *t_LMSimilarity$LMStats_get__collectionProbability(t_LMSimilarity$LMStats *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getCollectionProbability());
            return PyFloat_FromDouble((double) value);
          }
          static int t_LMSimilarity$LMStats_set__collectionProbability(t_LMSimilarity$LMStats *self, PyObject *arg, void *data)
          {
            {
              jfloat value;
              if (!parseArg(arg, "F", &value))
              {
                INT_CALL(self->object.setCollectionProbability(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "collectionProbability", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/LimitTokenCountFilterFactory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *LimitTokenCountFilterFactory::class$ = NULL;
          jmethodID *LimitTokenCountFilterFactory::mids$ = NULL;
          bool LimitTokenCountFilterFactory::live$ = false;
          ::java::lang::String *LimitTokenCountFilterFactory::CONSUME_ALL_TOKENS_KEY = NULL;
          ::java::lang::String *LimitTokenCountFilterFactory::MAX_TOKEN_COUNT_KEY = NULL;

          jclass LimitTokenCountFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/LimitTokenCountFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              CONSUME_ALL_TOKENS_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "CONSUME_ALL_TOKENS_KEY", "Ljava/lang/String;"));
              MAX_TOKEN_COUNT_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "MAX_TOKEN_COUNT_KEY", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LimitTokenCountFilterFactory::LimitTokenCountFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream LimitTokenCountFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_LimitTokenCountFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LimitTokenCountFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LimitTokenCountFilterFactory_init_(t_LimitTokenCountFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LimitTokenCountFilterFactory_create(t_LimitTokenCountFilterFactory *self, PyObject *args);

          static PyMethodDef t_LimitTokenCountFilterFactory__methods_[] = {
            DECLARE_METHOD(t_LimitTokenCountFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LimitTokenCountFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LimitTokenCountFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LimitTokenCountFilterFactory, t_LimitTokenCountFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, LimitTokenCountFilterFactory, t_LimitTokenCountFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_LimitTokenCountFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(LimitTokenCountFilterFactory), module, "LimitTokenCountFilterFactory", 0);
          }

          void t_LimitTokenCountFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LimitTokenCountFilterFactory).tp_dict, "class_", make_descriptor(LimitTokenCountFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LimitTokenCountFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_LimitTokenCountFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LimitTokenCountFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(LimitTokenCountFilterFactory::initializeClass);
            PyDict_SetItemString(PY_TYPE(LimitTokenCountFilterFactory).tp_dict, "CONSUME_ALL_TOKENS_KEY", make_descriptor(j2p(*LimitTokenCountFilterFactory::CONSUME_ALL_TOKENS_KEY)));
            PyDict_SetItemString(PY_TYPE(LimitTokenCountFilterFactory).tp_dict, "MAX_TOKEN_COUNT_KEY", make_descriptor(j2p(*LimitTokenCountFilterFactory::MAX_TOKEN_COUNT_KEY)));
          }

          static PyObject *t_LimitTokenCountFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LimitTokenCountFilterFactory::initializeClass, 1)))
              return NULL;
            return t_LimitTokenCountFilterFactory::wrap_Object(LimitTokenCountFilterFactory(((t_LimitTokenCountFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_LimitTokenCountFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LimitTokenCountFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LimitTokenCountFilterFactory_init_(t_LimitTokenCountFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            LimitTokenCountFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = LimitTokenCountFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LimitTokenCountFilterFactory_create(t_LimitTokenCountFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(LimitTokenCountFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl.h"
#include "java/util/List.h"
#include "java/lang/Cloneable.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "java/lang/CloneNotSupportedException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *QueryNodeImpl::class$ = NULL;
              jmethodID *QueryNodeImpl::mids$ = NULL;
              bool QueryNodeImpl::live$ = false;
              ::java::lang::String *QueryNodeImpl::PLAINTEXT_FIELD_NAME = NULL;

              jclass QueryNodeImpl::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_add_cc04aeef] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)V");
                  mids$[mid_add_1fde8fc3] = env->getMethodID(cls, "add", "(Ljava/util/List;)V");
                  mids$[mid_clone_b387c5e6] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_containsTag_5fdc3f44] = env->getMethodID(cls, "containsTag", "(Ljava/lang/String;)Z");
                  mids$[mid_getChildren_87851566] = env->getMethodID(cls, "getChildren", "()Ljava/util/List;");
                  mids$[mid_getParent_b387c5e6] = env->getMethodID(cls, "getParent", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getTag_2a1c4d09] = env->getMethodID(cls, "getTag", "(Ljava/lang/String;)Ljava/lang/Object;");
                  mids$[mid_getTagMap_db60befd] = env->getMethodID(cls, "getTagMap", "()Ljava/util/Map;");
                  mids$[mid_isLeaf_54c6a16a] = env->getMethodID(cls, "isLeaf", "()Z");
                  mids$[mid_removeFromParent_54c6a166] = env->getMethodID(cls, "removeFromParent", "()V");
                  mids$[mid_set_1fde8fc3] = env->getMethodID(cls, "set", "(Ljava/util/List;)V");
                  mids$[mid_setTag_2da4da24] = env->getMethodID(cls, "setTag", "(Ljava/lang/String;Ljava/lang/Object;)V");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                  mids$[mid_unsetTag_5fdc3f48] = env->getMethodID(cls, "unsetTag", "(Ljava/lang/String;)V");
                  mids$[mid_allocate_54c6a166] = env->getMethodID(cls, "allocate", "()V");
                  mids$[mid_setLeaf_bb0c767f] = env->getMethodID(cls, "setLeaf", "(Z)V");
                  mids$[mid_isRoot_54c6a16a] = env->getMethodID(cls, "isRoot", "()Z");
                  mids$[mid_isDefaultField_a8afc646] = env->getMethodID(cls, "isDefaultField", "(Ljava/lang/CharSequence;)Z");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  cls = (jclass) class$->this$;

                  PLAINTEXT_FIELD_NAME = new ::java::lang::String(env->getStaticObjectField(cls, "PLAINTEXT_FIELD_NAME", "Ljava/lang/String;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              QueryNodeImpl::QueryNodeImpl() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              void QueryNodeImpl::add(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_add_cc04aeef], a0.this$);
              }

              void QueryNodeImpl::add(const ::java::util::List & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_add_1fde8fc3], a0.this$);
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode QueryNodeImpl::clone() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_clone_b387c5e6]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode QueryNodeImpl::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              jboolean QueryNodeImpl::containsTag(const ::java::lang::String & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_containsTag_5fdc3f44], a0.this$);
              }

              ::java::util::List QueryNodeImpl::getChildren() const
              {
                return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getChildren_87851566]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode QueryNodeImpl::getParent() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_getParent_b387c5e6]));
              }

              ::java::lang::Object QueryNodeImpl::getTag(const ::java::lang::String & a0) const
              {
                return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getTag_2a1c4d09], a0.this$));
              }

              ::java::util::Map QueryNodeImpl::getTagMap() const
              {
                return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getTagMap_db60befd]));
              }

              jboolean QueryNodeImpl::isLeaf() const
              {
                return env->callBooleanMethod(this$, mids$[mid_isLeaf_54c6a16a]);
              }

              void QueryNodeImpl::removeFromParent() const
              {
                env->callVoidMethod(this$, mids$[mid_removeFromParent_54c6a166]);
              }

              void QueryNodeImpl::set(const ::java::util::List & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_set_1fde8fc3], a0.this$);
              }

              void QueryNodeImpl::setTag(const ::java::lang::String & a0, const ::java::lang::Object & a1) const
              {
                env->callVoidMethod(this$, mids$[mid_setTag_2da4da24], a0.this$, a1.this$);
              }

              ::java::lang::String QueryNodeImpl::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }

              void QueryNodeImpl::unsetTag(const ::java::lang::String & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_unsetTag_5fdc3f48], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_QueryNodeImpl_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryNodeImpl_instance_(PyTypeObject *type, PyObject *arg);
              static int t_QueryNodeImpl_init_(t_QueryNodeImpl *self, PyObject *args, PyObject *kwds);
              static PyObject *t_QueryNodeImpl_add(t_QueryNodeImpl *self, PyObject *args);
              static PyObject *t_QueryNodeImpl_clone(t_QueryNodeImpl *self);
              static PyObject *t_QueryNodeImpl_cloneTree(t_QueryNodeImpl *self);
              static PyObject *t_QueryNodeImpl_containsTag(t_QueryNodeImpl *self, PyObject *arg);
              static PyObject *t_QueryNodeImpl_getChildren(t_QueryNodeImpl *self);
              static PyObject *t_QueryNodeImpl_getParent(t_QueryNodeImpl *self);
              static PyObject *t_QueryNodeImpl_getTag(t_QueryNodeImpl *self, PyObject *arg);
              static PyObject *t_QueryNodeImpl_getTagMap(t_QueryNodeImpl *self);
              static PyObject *t_QueryNodeImpl_isLeaf(t_QueryNodeImpl *self);
              static PyObject *t_QueryNodeImpl_removeFromParent(t_QueryNodeImpl *self);
              static PyObject *t_QueryNodeImpl_set(t_QueryNodeImpl *self, PyObject *arg);
              static PyObject *t_QueryNodeImpl_setTag(t_QueryNodeImpl *self, PyObject *args);
              static PyObject *t_QueryNodeImpl_toString(t_QueryNodeImpl *self, PyObject *args);
              static PyObject *t_QueryNodeImpl_unsetTag(t_QueryNodeImpl *self, PyObject *arg);
              static PyObject *t_QueryNodeImpl_get__children(t_QueryNodeImpl *self, void *data);
              static PyObject *t_QueryNodeImpl_get__leaf(t_QueryNodeImpl *self, void *data);
              static PyObject *t_QueryNodeImpl_get__parent(t_QueryNodeImpl *self, void *data);
              static PyObject *t_QueryNodeImpl_get__tagMap(t_QueryNodeImpl *self, void *data);
              static PyGetSetDef t_QueryNodeImpl__fields_[] = {
                DECLARE_GET_FIELD(t_QueryNodeImpl, children),
                DECLARE_GET_FIELD(t_QueryNodeImpl, leaf),
                DECLARE_GET_FIELD(t_QueryNodeImpl, parent),
                DECLARE_GET_FIELD(t_QueryNodeImpl, tagMap),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_QueryNodeImpl__methods_[] = {
                DECLARE_METHOD(t_QueryNodeImpl, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNodeImpl, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNodeImpl, add, METH_VARARGS),
                DECLARE_METHOD(t_QueryNodeImpl, clone, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeImpl, cloneTree, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeImpl, containsTag, METH_O),
                DECLARE_METHOD(t_QueryNodeImpl, getChildren, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeImpl, getParent, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeImpl, getTag, METH_O),
                DECLARE_METHOD(t_QueryNodeImpl, getTagMap, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeImpl, isLeaf, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeImpl, removeFromParent, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeImpl, set, METH_O),
                DECLARE_METHOD(t_QueryNodeImpl, setTag, METH_VARARGS),
                DECLARE_METHOD(t_QueryNodeImpl, toString, METH_VARARGS),
                DECLARE_METHOD(t_QueryNodeImpl, unsetTag, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(QueryNodeImpl, t_QueryNodeImpl, ::java::lang::Object, QueryNodeImpl, t_QueryNodeImpl_init_, 0, 0, t_QueryNodeImpl__fields_, 0, 0);

              void t_QueryNodeImpl::install(PyObject *module)
              {
                installType(&PY_TYPE(QueryNodeImpl), module, "QueryNodeImpl", 0);
              }

              void t_QueryNodeImpl::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(QueryNodeImpl).tp_dict, "class_", make_descriptor(QueryNodeImpl::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(QueryNodeImpl).tp_dict, "wrapfn_", make_descriptor(t_QueryNodeImpl::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(QueryNodeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
                env->getClass(QueryNodeImpl::initializeClass);
                PyDict_SetItemString(PY_TYPE(QueryNodeImpl).tp_dict, "PLAINTEXT_FIELD_NAME", make_descriptor(j2p(*QueryNodeImpl::PLAINTEXT_FIELD_NAME)));
              }

              static PyObject *t_QueryNodeImpl_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, QueryNodeImpl::initializeClass, 1)))
                  return NULL;
                return t_QueryNodeImpl::wrap_Object(QueryNodeImpl(((t_QueryNodeImpl *) arg)->object.this$));
              }
              static PyObject *t_QueryNodeImpl_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, QueryNodeImpl::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_QueryNodeImpl_init_(t_QueryNodeImpl *self, PyObject *args, PyObject *kwds)
              {
                QueryNodeImpl object((jobject) NULL);

                INT_CALL(object = QueryNodeImpl());
                self->object = object;

                return 0;
              }

              static PyObject *t_QueryNodeImpl_add(t_QueryNodeImpl *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                    {
                      OBJ_CALL(self->object.add(a0));
                      Py_RETURN_NONE;
                    }
                  }
                  {
                    ::java::util::List a0((jobject) NULL);
                    PyTypeObject **p0;

                    if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
                    {
                      OBJ_CALL(self->object.add(a0));
                      Py_RETURN_NONE;
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "add", args);
                return NULL;
              }

              static PyObject *t_QueryNodeImpl_clone(t_QueryNodeImpl *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.clone());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
              }

              static PyObject *t_QueryNodeImpl_cloneTree(t_QueryNodeImpl *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.cloneTree());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
              }

              static PyObject *t_QueryNodeImpl_containsTag(t_QueryNodeImpl *self, PyObject *arg)
              {
                ::java::lang::String a0((jobject) NULL);
                jboolean result;

                if (!parseArg(arg, "s", &a0))
                {
                  OBJ_CALL(result = self->object.containsTag(a0));
                  Py_RETURN_BOOL(result);
                }

                PyErr_SetArgsError((PyObject *) self, "containsTag", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeImpl_getChildren(t_QueryNodeImpl *self)
              {
                ::java::util::List result((jobject) NULL);
                OBJ_CALL(result = self->object.getChildren());
                return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::queryparser::flexible::core::nodes::PY_TYPE(QueryNode));
              }

              static PyObject *t_QueryNodeImpl_getParent(t_QueryNodeImpl *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.getParent());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
              }

              static PyObject *t_QueryNodeImpl_getTag(t_QueryNodeImpl *self, PyObject *arg)
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::Object result((jobject) NULL);

                if (!parseArg(arg, "s", &a0))
                {
                  OBJ_CALL(result = self->object.getTag(a0));
                  return ::java::lang::t_Object::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "getTag", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeImpl_getTagMap(t_QueryNodeImpl *self)
              {
                ::java::util::Map result((jobject) NULL);
                OBJ_CALL(result = self->object.getTagMap());
                return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(Object));
              }

              static PyObject *t_QueryNodeImpl_isLeaf(t_QueryNodeImpl *self)
              {
                jboolean result;
                OBJ_CALL(result = self->object.isLeaf());
                Py_RETURN_BOOL(result);
              }

              static PyObject *t_QueryNodeImpl_removeFromParent(t_QueryNodeImpl *self)
              {
                OBJ_CALL(self->object.removeFromParent());
                Py_RETURN_NONE;
              }

              static PyObject *t_QueryNodeImpl_set(t_QueryNodeImpl *self, PyObject *arg)
              {
                ::java::util::List a0((jobject) NULL);
                PyTypeObject **p0;

                if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
                {
                  OBJ_CALL(self->object.set(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "set", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeImpl_setTag(t_QueryNodeImpl *self, PyObject *args)
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::Object a1((jobject) NULL);

                if (!parseArgs(args, "so", &a0, &a1))
                {
                  OBJ_CALL(self->object.setTag(a0, a1));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setTag", args);
                return NULL;
              }

              static PyObject *t_QueryNodeImpl_toString(t_QueryNodeImpl *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(QueryNodeImpl), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_QueryNodeImpl_unsetTag(t_QueryNodeImpl *self, PyObject *arg)
              {
                ::java::lang::String a0((jobject) NULL);

                if (!parseArg(arg, "s", &a0))
                {
                  OBJ_CALL(self->object.unsetTag(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "unsetTag", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeImpl_get__children(t_QueryNodeImpl *self, void *data)
              {
                ::java::util::List value((jobject) NULL);
                OBJ_CALL(value = self->object.getChildren());
                return ::java::util::t_List::wrap_Object(value);
              }

              static PyObject *t_QueryNodeImpl_get__leaf(t_QueryNodeImpl *self, void *data)
              {
                jboolean value;
                OBJ_CALL(value = self->object.isLeaf());
                Py_RETURN_BOOL(value);
              }

              static PyObject *t_QueryNodeImpl_get__parent(t_QueryNodeImpl *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode value((jobject) NULL);
                OBJ_CALL(value = self->object.getParent());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(value);
              }

              static PyObject *t_QueryNodeImpl_get__tagMap(t_QueryNodeImpl *self, void *data)
              {
                ::java::util::Map value((jobject) NULL);
                OBJ_CALL(value = self->object.getTagMap());
                return ::java::util::t_Map::wrap_Object(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fi/FinnishAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fi {

          ::java::lang::Class *FinnishAnalyzer::class$ = NULL;
          jmethodID *FinnishAnalyzer::mids$ = NULL;
          bool FinnishAnalyzer::live$ = false;
          ::java::lang::String *FinnishAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass FinnishAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fi/FinnishAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FinnishAnalyzer::FinnishAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          FinnishAnalyzer::FinnishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          FinnishAnalyzer::FinnishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet FinnishAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fi {
          static PyObject *t_FinnishAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FinnishAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FinnishAnalyzer_init_(t_FinnishAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FinnishAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_FinnishAnalyzer_get__defaultStopSet(t_FinnishAnalyzer *self, void *data);
          static PyGetSetDef t_FinnishAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_FinnishAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FinnishAnalyzer__methods_[] = {
            DECLARE_METHOD(t_FinnishAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FinnishAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FinnishAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FinnishAnalyzer, t_FinnishAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, FinnishAnalyzer, t_FinnishAnalyzer_init_, 0, 0, t_FinnishAnalyzer__fields_, 0, 0);

          void t_FinnishAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(FinnishAnalyzer), module, "FinnishAnalyzer", 0);
          }

          void t_FinnishAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FinnishAnalyzer).tp_dict, "class_", make_descriptor(FinnishAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FinnishAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_FinnishAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FinnishAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(FinnishAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(FinnishAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*FinnishAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_FinnishAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FinnishAnalyzer::initializeClass, 1)))
              return NULL;
            return t_FinnishAnalyzer::wrap_Object(FinnishAnalyzer(((t_FinnishAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_FinnishAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FinnishAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FinnishAnalyzer_init_(t_FinnishAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                FinnishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = FinnishAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                FinnishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = FinnishAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                FinnishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = FinnishAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FinnishAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::fi::FinnishAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_FinnishAnalyzer_get__defaultStopSet(t_FinnishAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/NearSpansUnordered.h"
#include "java/util/Collection.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/TermContext.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/spans/SpanNearQuery.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *NearSpansUnordered::class$ = NULL;
          jmethodID *NearSpansUnordered::mids$ = NULL;
          bool NearSpansUnordered::live$ = false;

          jclass NearSpansUnordered::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/NearSpansUnordered");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_a9b434a2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanNearQuery;Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;Ljava/util/Map;)V");
              mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
              mids$[mid_doc_54c6a179] = env->getMethodID(cls, "doc", "()I");
              mids$[mid_end_54c6a179] = env->getMethodID(cls, "end", "()I");
              mids$[mid_getPayload_2d2d7de4] = env->getMethodID(cls, "getPayload", "()Ljava/util/Collection;");
              mids$[mid_getSubSpans_dd49b8eb] = env->getMethodID(cls, "getSubSpans", "()[Lorg/apache/lucene/search/spans/Spans;");
              mids$[mid_isPayloadAvailable_54c6a16a] = env->getMethodID(cls, "isPayloadAvailable", "()Z");
              mids$[mid_next_54c6a16a] = env->getMethodID(cls, "next", "()Z");
              mids$[mid_skipTo_39c7bd30] = env->getMethodID(cls, "skipTo", "(I)Z");
              mids$[mid_start_54c6a179] = env->getMethodID(cls, "start", "()I");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NearSpansUnordered::NearSpansUnordered(const ::org::apache::lucene::search::spans::SpanNearQuery & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1, const ::org::apache::lucene::util::Bits & a2, const ::java::util::Map & a3) : ::org::apache::lucene::search::spans::Spans(env->newObject(initializeClass, &mids$, mid_init$_a9b434a2, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          jlong NearSpansUnordered::cost() const
          {
            return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
          }

          jint NearSpansUnordered::doc() const
          {
            return env->callIntMethod(this$, mids$[mid_doc_54c6a179]);
          }

          jint NearSpansUnordered::end() const
          {
            return env->callIntMethod(this$, mids$[mid_end_54c6a179]);
          }

          ::java::util::Collection NearSpansUnordered::getPayload() const
          {
            return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getPayload_2d2d7de4]));
          }

          JArray< ::org::apache::lucene::search::spans::Spans > NearSpansUnordered::getSubSpans() const
          {
            return JArray< ::org::apache::lucene::search::spans::Spans >(env->callObjectMethod(this$, mids$[mid_getSubSpans_dd49b8eb]));
          }

          jboolean NearSpansUnordered::isPayloadAvailable() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isPayloadAvailable_54c6a16a]);
          }

          jboolean NearSpansUnordered::next() const
          {
            return env->callBooleanMethod(this$, mids$[mid_next_54c6a16a]);
          }

          jboolean NearSpansUnordered::skipTo(jint a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_skipTo_39c7bd30], a0);
          }

          jint NearSpansUnordered::start() const
          {
            return env->callIntMethod(this$, mids$[mid_start_54c6a179]);
          }

          ::java::lang::String NearSpansUnordered::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_NearSpansUnordered_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NearSpansUnordered_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NearSpansUnordered_init_(t_NearSpansUnordered *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NearSpansUnordered_cost(t_NearSpansUnordered *self, PyObject *args);
          static PyObject *t_NearSpansUnordered_doc(t_NearSpansUnordered *self, PyObject *args);
          static PyObject *t_NearSpansUnordered_end(t_NearSpansUnordered *self, PyObject *args);
          static PyObject *t_NearSpansUnordered_getPayload(t_NearSpansUnordered *self, PyObject *args);
          static PyObject *t_NearSpansUnordered_getSubSpans(t_NearSpansUnordered *self);
          static PyObject *t_NearSpansUnordered_isPayloadAvailable(t_NearSpansUnordered *self, PyObject *args);
          static PyObject *t_NearSpansUnordered_next(t_NearSpansUnordered *self, PyObject *args);
          static PyObject *t_NearSpansUnordered_skipTo(t_NearSpansUnordered *self, PyObject *args);
          static PyObject *t_NearSpansUnordered_start(t_NearSpansUnordered *self, PyObject *args);
          static PyObject *t_NearSpansUnordered_toString(t_NearSpansUnordered *self, PyObject *args);
          static PyObject *t_NearSpansUnordered_get__payload(t_NearSpansUnordered *self, void *data);
          static PyObject *t_NearSpansUnordered_get__payloadAvailable(t_NearSpansUnordered *self, void *data);
          static PyObject *t_NearSpansUnordered_get__subSpans(t_NearSpansUnordered *self, void *data);
          static PyGetSetDef t_NearSpansUnordered__fields_[] = {
            DECLARE_GET_FIELD(t_NearSpansUnordered, payload),
            DECLARE_GET_FIELD(t_NearSpansUnordered, payloadAvailable),
            DECLARE_GET_FIELD(t_NearSpansUnordered, subSpans),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_NearSpansUnordered__methods_[] = {
            DECLARE_METHOD(t_NearSpansUnordered, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NearSpansUnordered, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NearSpansUnordered, cost, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansUnordered, doc, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansUnordered, end, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansUnordered, getPayload, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansUnordered, getSubSpans, METH_NOARGS),
            DECLARE_METHOD(t_NearSpansUnordered, isPayloadAvailable, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansUnordered, next, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansUnordered, skipTo, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansUnordered, start, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansUnordered, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NearSpansUnordered, t_NearSpansUnordered, ::org::apache::lucene::search::spans::Spans, NearSpansUnordered, t_NearSpansUnordered_init_, 0, 0, t_NearSpansUnordered__fields_, 0, 0);

          void t_NearSpansUnordered::install(PyObject *module)
          {
            installType(&PY_TYPE(NearSpansUnordered), module, "NearSpansUnordered", 0);
          }

          void t_NearSpansUnordered::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NearSpansUnordered).tp_dict, "class_", make_descriptor(NearSpansUnordered::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NearSpansUnordered).tp_dict, "wrapfn_", make_descriptor(t_NearSpansUnordered::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NearSpansUnordered).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NearSpansUnordered_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NearSpansUnordered::initializeClass, 1)))
              return NULL;
            return t_NearSpansUnordered::wrap_Object(NearSpansUnordered(((t_NearSpansUnordered *) arg)->object.this$));
          }
          static PyObject *t_NearSpansUnordered_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NearSpansUnordered::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NearSpansUnordered_init_(t_NearSpansUnordered *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spans::SpanNearQuery a0((jobject) NULL);
            ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
            ::org::apache::lucene::util::Bits a2((jobject) NULL);
            ::java::util::Map a3((jobject) NULL);
            PyTypeObject **p3;
            NearSpansUnordered object((jobject) NULL);

            if (!parseArgs(args, "kkkK", ::org::apache::lucene::search::spans::SpanNearQuery::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = NearSpansUnordered(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NearSpansUnordered_cost(t_NearSpansUnordered *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.cost());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(NearSpansUnordered), (PyObject *) self, "cost", args, 2);
          }

          static PyObject *t_NearSpansUnordered_doc(t_NearSpansUnordered *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.doc());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(NearSpansUnordered), (PyObject *) self, "doc", args, 2);
          }

          static PyObject *t_NearSpansUnordered_end(t_NearSpansUnordered *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.end());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(NearSpansUnordered), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_NearSpansUnordered_getPayload(t_NearSpansUnordered *self, PyObject *args)
          {
            ::java::util::Collection result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getPayload());
              return ::java::util::t_Collection::wrap_Object(result, &::java::lang::PY_TYPE(Object));
            }

            return callSuper(&PY_TYPE(NearSpansUnordered), (PyObject *) self, "getPayload", args, 2);
          }

          static PyObject *t_NearSpansUnordered_getSubSpans(t_NearSpansUnordered *self)
          {
            JArray< ::org::apache::lucene::search::spans::Spans > result((jobject) NULL);
            OBJ_CALL(result = self->object.getSubSpans());
            return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::spans::t_Spans::wrap_jobject);
          }

          static PyObject *t_NearSpansUnordered_isPayloadAvailable(t_NearSpansUnordered *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.isPayloadAvailable());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(NearSpansUnordered), (PyObject *) self, "isPayloadAvailable", args, 2);
          }

          static PyObject *t_NearSpansUnordered_next(t_NearSpansUnordered *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.next());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(NearSpansUnordered), (PyObject *) self, "next", args, 2);
          }

          static PyObject *t_NearSpansUnordered_skipTo(t_NearSpansUnordered *self, PyObject *args)
          {
            jint a0;
            jboolean result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.skipTo(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(NearSpansUnordered), (PyObject *) self, "skipTo", args, 2);
          }

          static PyObject *t_NearSpansUnordered_start(t_NearSpansUnordered *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.start());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(NearSpansUnordered), (PyObject *) self, "start", args, 2);
          }

          static PyObject *t_NearSpansUnordered_toString(t_NearSpansUnordered *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(NearSpansUnordered), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_NearSpansUnordered_get__payload(t_NearSpansUnordered *self, void *data)
          {
            ::java::util::Collection value((jobject) NULL);
            OBJ_CALL(value = self->object.getPayload());
            return ::java::util::t_Collection::wrap_Object(value);
          }

          static PyObject *t_NearSpansUnordered_get__payloadAvailable(t_NearSpansUnordered *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isPayloadAvailable());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_NearSpansUnordered_get__subSpans(t_NearSpansUnordered *self, void *data)
          {
            JArray< ::org::apache::lucene::search::spans::Spans > value((jobject) NULL);
            OBJ_CALL(value = self->object.getSubSpans());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::spans::t_Spans::wrap_jobject);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SegmentInfos.h"
#include "java/io/PrintStream.h"
#include "java/util/Collection.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "java/lang/Cloneable.h"
#include "java/lang/String.h"
#include "java/util/Iterator.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/Iterable.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SegmentInfos::class$ = NULL;
        jmethodID *SegmentInfos::mids$ = NULL;
        jfieldID *SegmentInfos::fids$ = NULL;
        bool SegmentInfos::live$ = false;
        jint SegmentInfos::FORMAT_SEGMENTS_GEN_CURRENT = (jint) 0;
        jint SegmentInfos::VERSION_40 = (jint) 0;
        jint SegmentInfos::VERSION_46 = (jint) 0;
        jint SegmentInfos::VERSION_48 = (jint) 0;
        jint SegmentInfos::VERSION_49 = (jint) 0;

        jclass SegmentInfos::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SegmentInfos");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_6649cdf4] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/index/SegmentCommitInfo;)V");
            mids$[mid_addAll_d1cac205] = env->getMethodID(cls, "addAll", "(Ljava/lang/Iterable;)V");
            mids$[mid_asList_87851566] = env->getMethodID(cls, "asList", "()Ljava/util/List;");
            mids$[mid_changed_54c6a166] = env->getMethodID(cls, "changed", "()V");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_clone_e585ba04] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/index/SegmentInfos;");
            mids$[mid_files_b47d57a7] = env->getMethodID(cls, "files", "(Lorg/apache/lucene/store/Directory;Z)Ljava/util/Collection;");
            mids$[mid_generationFromSegmentsFileName_5fdc3f54] = env->getStaticMethodID(cls, "generationFromSegmentsFileName", "(Ljava/lang/String;)J");
            mids$[mid_getDefaultGenLookahedCount_54c6a179] = env->getStaticMethodID(cls, "getDefaultGenLookahedCount", "()I");
            mids$[mid_getGeneration_54c6a17a] = env->getMethodID(cls, "getGeneration", "()J");
            mids$[mid_getInfoStream_00215d9e] = env->getStaticMethodID(cls, "getInfoStream", "()Ljava/io/PrintStream;");
            mids$[mid_getLastCommitGeneration_4dd45410] = env->getStaticMethodID(cls, "getLastCommitGeneration", "([Ljava/lang/String;)J");
            mids$[mid_getLastCommitGeneration_2e261eee] = env->getStaticMethodID(cls, "getLastCommitGeneration", "(Lorg/apache/lucene/store/Directory;)J");
            mids$[mid_getLastCommitSegmentsFileName_1034289b] = env->getStaticMethodID(cls, "getLastCommitSegmentsFileName", "([Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_getLastCommitSegmentsFileName_0451c495] = env->getStaticMethodID(cls, "getLastCommitSegmentsFileName", "(Lorg/apache/lucene/store/Directory;)Ljava/lang/String;");
            mids$[mid_getLastGeneration_54c6a17a] = env->getMethodID(cls, "getLastGeneration", "()J");
            mids$[mid_getNextSegmentFileName_14c7b5c5] = env->getMethodID(cls, "getNextSegmentFileName", "()Ljava/lang/String;");
            mids$[mid_getSegmentsFileName_14c7b5c5] = env->getMethodID(cls, "getSegmentsFileName", "()Ljava/lang/String;");
            mids$[mid_getUserData_db60befd] = env->getMethodID(cls, "getUserData", "()Ljava/util/Map;");
            mids$[mid_getVersion_54c6a17a] = env->getMethodID(cls, "getVersion", "()J");
            mids$[mid_info_924229db] = env->getMethodID(cls, "info", "(I)Lorg/apache/lucene/index/SegmentCommitInfo;");
            mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_read_2e261ef2] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_read_54f2a16c] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;)V");
            mids$[mid_remove_6649cdf4] = env->getMethodID(cls, "remove", "(Lorg/apache/lucene/index/SegmentCommitInfo;)V");
            mids$[mid_setDefaultGenLookaheadCount_39c7bd3c] = env->getStaticMethodID(cls, "setDefaultGenLookaheadCount", "(I)V");
            mids$[mid_setInfoStream_1b7c898b] = env->getStaticMethodID(cls, "setInfoStream", "(Ljava/io/PrintStream;)V");
            mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
            mids$[mid_toString_0451c495] = env->getMethodID(cls, "toString", "(Lorg/apache/lucene/store/Directory;)Ljava/lang/String;");
            mids$[mid_totalDocCount_54c6a179] = env->getMethodID(cls, "totalDocCount", "()I");
            mids$[mid_write3xInfo_1fab7fdc] = env->getStaticMethodID(cls, "write3xInfo", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/store/IOContext;)Ljava/lang/String;");
            mids$[mid_writeSegmentsGen_3dc02513] = env->getStaticMethodID(cls, "writeSegmentsGen", "(Lorg/apache/lucene/store/Directory;J)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_counter] = env->getFieldID(cls, "counter", "I");
            fids$[fid_userData] = env->getFieldID(cls, "userData", "Ljava/util/Map;");
            fids$[fid_version] = env->getFieldID(cls, "version", "J");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            FORMAT_SEGMENTS_GEN_CURRENT = env->getStaticIntField(cls, "FORMAT_SEGMENTS_GEN_CURRENT");
            VERSION_40 = env->getStaticIntField(cls, "VERSION_40");
            VERSION_46 = env->getStaticIntField(cls, "VERSION_46");
            VERSION_48 = env->getStaticIntField(cls, "VERSION_48");
            VERSION_49 = env->getStaticIntField(cls, "VERSION_49");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SegmentInfos::SegmentInfos() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void SegmentInfos::add(const ::org::apache::lucene::index::SegmentCommitInfo & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_6649cdf4], a0.this$);
        }

        void SegmentInfos::addAll(const ::java::lang::Iterable & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addAll_d1cac205], a0.this$);
        }

        ::java::util::List SegmentInfos::asList() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_asList_87851566]));
        }

        void SegmentInfos::changed() const
        {
          env->callVoidMethod(this$, mids$[mid_changed_54c6a166]);
        }

        void SegmentInfos::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        SegmentInfos SegmentInfos::clone() const
        {
          return SegmentInfos(env->callObjectMethod(this$, mids$[mid_clone_e585ba04]));
        }

        ::java::util::Collection SegmentInfos::files(const ::org::apache::lucene::store::Directory & a0, jboolean a1) const
        {
          return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_files_b47d57a7], a0.this$, a1));
        }

        jlong SegmentInfos::generationFromSegmentsFileName(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_generationFromSegmentsFileName_5fdc3f54], a0.this$);
        }

        jint SegmentInfos::getDefaultGenLookahedCount()
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_getDefaultGenLookahedCount_54c6a179]);
        }

        jlong SegmentInfos::getGeneration() const
        {
          return env->callLongMethod(this$, mids$[mid_getGeneration_54c6a17a]);
        }

        ::java::io::PrintStream SegmentInfos::getInfoStream()
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::io::PrintStream(env->callStaticObjectMethod(cls, mids$[mid_getInfoStream_00215d9e]));
        }

        jlong SegmentInfos::getLastCommitGeneration(const JArray< ::java::lang::String > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_getLastCommitGeneration_4dd45410], a0.this$);
        }

        jlong SegmentInfos::getLastCommitGeneration(const ::org::apache::lucene::store::Directory & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_getLastCommitGeneration_2e261eee], a0.this$);
        }

        ::java::lang::String SegmentInfos::getLastCommitSegmentsFileName(const JArray< ::java::lang::String > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getLastCommitSegmentsFileName_1034289b], a0.this$));
        }

        ::java::lang::String SegmentInfos::getLastCommitSegmentsFileName(const ::org::apache::lucene::store::Directory & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getLastCommitSegmentsFileName_0451c495], a0.this$));
        }

        jlong SegmentInfos::getLastGeneration() const
        {
          return env->callLongMethod(this$, mids$[mid_getLastGeneration_54c6a17a]);
        }

        ::java::lang::String SegmentInfos::getNextSegmentFileName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getNextSegmentFileName_14c7b5c5]));
        }

        ::java::lang::String SegmentInfos::getSegmentsFileName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getSegmentsFileName_14c7b5c5]));
        }

        ::java::util::Map SegmentInfos::getUserData() const
        {
          return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getUserData_db60befd]));
        }

        jlong SegmentInfos::getVersion() const
        {
          return env->callLongMethod(this$, mids$[mid_getVersion_54c6a17a]);
        }

        ::org::apache::lucene::index::SegmentCommitInfo SegmentInfos::info(jint a0) const
        {
          return ::org::apache::lucene::index::SegmentCommitInfo(env->callObjectMethod(this$, mids$[mid_info_924229db], a0));
        }

        ::java::util::Iterator SegmentInfos::iterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
        }

        void SegmentInfos::read(const ::org::apache::lucene::store::Directory & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_read_2e261ef2], a0.this$);
        }

        void SegmentInfos::read(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_read_54f2a16c], a0.this$, a1.this$);
        }

        void SegmentInfos::remove(const ::org::apache::lucene::index::SegmentCommitInfo & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_remove_6649cdf4], a0.this$);
        }

        void SegmentInfos::setDefaultGenLookaheadCount(jint a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_setDefaultGenLookaheadCount_39c7bd3c], a0);
        }

        void SegmentInfos::setInfoStream(const ::java::io::PrintStream & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_setInfoStream_1b7c898b], a0.this$);
        }

        jint SegmentInfos::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
        }

        ::java::lang::String SegmentInfos::toString(const ::org::apache::lucene::store::Directory & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_0451c495], a0.this$));
        }

        jint SegmentInfos::totalDocCount() const
        {
          return env->callIntMethod(this$, mids$[mid_totalDocCount_54c6a179]);
        }

        ::java::lang::String SegmentInfos::write3xInfo(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::store::IOContext & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_write3xInfo_1fab7fdc], a0.this$, a1.this$, a2.this$));
        }

        void SegmentInfos::writeSegmentsGen(const ::org::apache::lucene::store::Directory & a0, jlong a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_writeSegmentsGen_3dc02513], a0.this$, a1);
        }

        jint SegmentInfos::_get_counter() const
        {
          return env->getIntField(this$, fids$[fid_counter]);
        }

        void SegmentInfos::_set_counter(jint a0) const
        {
          env->setIntField(this$, fids$[fid_counter], a0);
        }

        ::java::util::Map SegmentInfos::_get_userData() const
        {
          return ::java::util::Map(env->getObjectField(this$, fids$[fid_userData]));
        }

        void SegmentInfos::_set_userData(const ::java::util::Map & a0) const
        {
          env->setObjectField(this$, fids$[fid_userData], a0.this$);
        }

        jlong SegmentInfos::_get_version() const
        {
          return env->getLongField(this$, fids$[fid_version]);
        }

        void SegmentInfos::_set_version(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_version], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/index/SegmentInfos$FindSegmentsFile.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SegmentInfos_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentInfos_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SegmentInfos_init_(t_SegmentInfos *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SegmentInfos_add(t_SegmentInfos *self, PyObject *arg);
        static PyObject *t_SegmentInfos_addAll(t_SegmentInfos *self, PyObject *arg);
        static PyObject *t_SegmentInfos_asList(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_changed(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_clear(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_clone(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_files(t_SegmentInfos *self, PyObject *args);
        static PyObject *t_SegmentInfos_generationFromSegmentsFileName(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentInfos_getDefaultGenLookahedCount(PyTypeObject *type);
        static PyObject *t_SegmentInfos_getGeneration(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_getInfoStream(PyTypeObject *type);
        static PyObject *t_SegmentInfos_getLastCommitGeneration(PyTypeObject *type, PyObject *args);
        static PyObject *t_SegmentInfos_getLastCommitSegmentsFileName(PyTypeObject *type, PyObject *args);
        static PyObject *t_SegmentInfos_getLastGeneration(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_getNextSegmentFileName(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_getSegmentsFileName(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_getUserData(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_getVersion(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_info(t_SegmentInfos *self, PyObject *arg);
        static PyObject *t_SegmentInfos_iterator(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_read(t_SegmentInfos *self, PyObject *args);
        static PyObject *t_SegmentInfos_remove(t_SegmentInfos *self, PyObject *arg);
        static PyObject *t_SegmentInfos_setDefaultGenLookaheadCount(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentInfos_setInfoStream(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentInfos_size(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_toString(t_SegmentInfos *self, PyObject *args);
        static PyObject *t_SegmentInfos_totalDocCount(t_SegmentInfos *self);
        static PyObject *t_SegmentInfos_write3xInfo(PyTypeObject *type, PyObject *args);
        static PyObject *t_SegmentInfos_writeSegmentsGen(PyTypeObject *type, PyObject *args);
        static PyObject *t_SegmentInfos_get__counter(t_SegmentInfos *self, void *data);
        static int t_SegmentInfos_set__counter(t_SegmentInfos *self, PyObject *arg, void *data);

        static int t_SegmentInfos_set__defaultGenLookaheadCount(t_SegmentInfos *self, PyObject *arg, void *data);
        static PyObject *t_SegmentInfos_get__defaultGenLookahedCount(t_SegmentInfos *self, void *data);
        static PyObject *t_SegmentInfos_get__generation(t_SegmentInfos *self, void *data);
        static PyObject *t_SegmentInfos_get__infoStream(t_SegmentInfos *self, void *data);
        static int t_SegmentInfos_set__infoStream(t_SegmentInfos *self, PyObject *arg, void *data);
        static PyObject *t_SegmentInfos_get__lastGeneration(t_SegmentInfos *self, void *data);
        static PyObject *t_SegmentInfos_get__nextSegmentFileName(t_SegmentInfos *self, void *data);
        static PyObject *t_SegmentInfos_get__segmentsFileName(t_SegmentInfos *self, void *data);
        static PyObject *t_SegmentInfos_get__userData(t_SegmentInfos *self, void *data);
        static PyObject *t_SegmentInfos_get__version(t_SegmentInfos *self, void *data);
        static PyGetSetDef t_SegmentInfos__fields_[] = {
          DECLARE_GETSET_FIELD(t_SegmentInfos, counter),
          DECLARE_SET_FIELD(t_SegmentInfos, defaultGenLookaheadCount),
          DECLARE_GET_FIELD(t_SegmentInfos, defaultGenLookahedCount),
          DECLARE_GET_FIELD(t_SegmentInfos, generation),
          DECLARE_GETSET_FIELD(t_SegmentInfos, infoStream),
          DECLARE_GET_FIELD(t_SegmentInfos, lastGeneration),
          DECLARE_GET_FIELD(t_SegmentInfos, nextSegmentFileName),
          DECLARE_GET_FIELD(t_SegmentInfos, segmentsFileName),
          DECLARE_GET_FIELD(t_SegmentInfos, userData),
          DECLARE_GET_FIELD(t_SegmentInfos, version),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SegmentInfos__methods_[] = {
          DECLARE_METHOD(t_SegmentInfos, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos, add, METH_O),
          DECLARE_METHOD(t_SegmentInfos, addAll, METH_O),
          DECLARE_METHOD(t_SegmentInfos, asList, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, changed, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, clear, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, clone, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, files, METH_VARARGS),
          DECLARE_METHOD(t_SegmentInfos, generationFromSegmentsFileName, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos, getDefaultGenLookahedCount, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos, getGeneration, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, getInfoStream, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos, getLastCommitGeneration, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos, getLastCommitSegmentsFileName, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos, getLastGeneration, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, getNextSegmentFileName, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, getSegmentsFileName, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, getUserData, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, getVersion, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, info, METH_O),
          DECLARE_METHOD(t_SegmentInfos, iterator, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, read, METH_VARARGS),
          DECLARE_METHOD(t_SegmentInfos, remove, METH_O),
          DECLARE_METHOD(t_SegmentInfos, setDefaultGenLookaheadCount, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos, setInfoStream, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos, size, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, toString, METH_VARARGS),
          DECLARE_METHOD(t_SegmentInfos, totalDocCount, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfos, write3xInfo, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos, writeSegmentsGen, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SegmentInfos, t_SegmentInfos, ::java::lang::Object, SegmentInfos, t_SegmentInfos_init_, ((PyObject *(*)(t_SegmentInfos *)) get_iterator< t_SegmentInfos >), 0, t_SegmentInfos__fields_, 0, 0);

        void t_SegmentInfos::install(PyObject *module)
        {
          installType(&PY_TYPE(SegmentInfos), module, "SegmentInfos", 0);
          PyDict_SetItemString(PY_TYPE(SegmentInfos).tp_dict, "FindSegmentsFile", make_descriptor(&PY_TYPE(SegmentInfos$FindSegmentsFile)));
        }

        void t_SegmentInfos::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SegmentInfos).tp_dict, "class_", make_descriptor(SegmentInfos::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SegmentInfos).tp_dict, "wrapfn_", make_descriptor(t_SegmentInfos::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SegmentInfos).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(SegmentInfos::initializeClass);
          PyDict_SetItemString(PY_TYPE(SegmentInfos).tp_dict, "FORMAT_SEGMENTS_GEN_CURRENT", make_descriptor(SegmentInfos::FORMAT_SEGMENTS_GEN_CURRENT));
          PyDict_SetItemString(PY_TYPE(SegmentInfos).tp_dict, "VERSION_40", make_descriptor(SegmentInfos::VERSION_40));
          PyDict_SetItemString(PY_TYPE(SegmentInfos).tp_dict, "VERSION_46", make_descriptor(SegmentInfos::VERSION_46));
          PyDict_SetItemString(PY_TYPE(SegmentInfos).tp_dict, "VERSION_48", make_descriptor(SegmentInfos::VERSION_48));
          PyDict_SetItemString(PY_TYPE(SegmentInfos).tp_dict, "VERSION_49", make_descriptor(SegmentInfos::VERSION_49));
        }

        static PyObject *t_SegmentInfos_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SegmentInfos::initializeClass, 1)))
            return NULL;
          return t_SegmentInfos::wrap_Object(SegmentInfos(((t_SegmentInfos *) arg)->object.this$));
        }
        static PyObject *t_SegmentInfos_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SegmentInfos::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SegmentInfos_init_(t_SegmentInfos *self, PyObject *args, PyObject *kwds)
        {
          SegmentInfos object((jobject) NULL);

          INT_CALL(object = SegmentInfos());
          self->object = object;

          return 0;
        }

        static PyObject *t_SegmentInfos_add(t_SegmentInfos *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentCommitInfo a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, &a0))
          {
            OBJ_CALL(self->object.add(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "add", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfos_addAll(t_SegmentInfos *self, PyObject *arg)
        {
          ::java::lang::Iterable a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::lang::Iterable::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_))
          {
            OBJ_CALL(self->object.addAll(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addAll", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfos_asList(t_SegmentInfos *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.asList());
          return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(SegmentCommitInfo));
        }

        static PyObject *t_SegmentInfos_changed(t_SegmentInfos *self)
        {
          OBJ_CALL(self->object.changed());
          Py_RETURN_NONE;
        }

        static PyObject *t_SegmentInfos_clear(t_SegmentInfos *self)
        {
          OBJ_CALL(self->object.clear());
          Py_RETURN_NONE;
        }

        static PyObject *t_SegmentInfos_clone(t_SegmentInfos *self)
        {
          SegmentInfos result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_SegmentInfos::wrap_Object(result);
        }

        static PyObject *t_SegmentInfos_files(t_SegmentInfos *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          jboolean a1;
          ::java::util::Collection result((jobject) NULL);

          if (!parseArgs(args, "kZ", ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.files(a0, a1));
            return ::java::util::t_Collection::wrap_Object(result, &::java::lang::PY_TYPE(String));
          }

          PyErr_SetArgsError((PyObject *) self, "files", args);
          return NULL;
        }

        static PyObject *t_SegmentInfos_generationFromSegmentsFileName(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::SegmentInfos::generationFromSegmentsFileName(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "generationFromSegmentsFileName", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfos_getDefaultGenLookahedCount(PyTypeObject *type)
        {
          jint result;
          OBJ_CALL(result = ::org::apache::lucene::index::SegmentInfos::getDefaultGenLookahedCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_SegmentInfos_getGeneration(t_SegmentInfos *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getGeneration());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SegmentInfos_getInfoStream(PyTypeObject *type)
        {
          ::java::io::PrintStream result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::SegmentInfos::getInfoStream());
          return ::java::io::t_PrintStream::wrap_Object(result);
        }

        static PyObject *t_SegmentInfos_getLastCommitGeneration(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::java::lang::String > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[s", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::SegmentInfos::getLastCommitGeneration(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::SegmentInfos::getLastCommitGeneration(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError(type, "getLastCommitGeneration", args);
          return NULL;
        }

        static PyObject *t_SegmentInfos_getLastCommitSegmentsFileName(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::java::lang::String > a0((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "[s", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::SegmentInfos::getLastCommitSegmentsFileName(a0));
                return j2p(result);
              }
            }
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::SegmentInfos::getLastCommitSegmentsFileName(a0));
                return j2p(result);
              }
            }
          }

          PyErr_SetArgsError(type, "getLastCommitSegmentsFileName", args);
          return NULL;
        }

        static PyObject *t_SegmentInfos_getLastGeneration(t_SegmentInfos *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getLastGeneration());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SegmentInfos_getNextSegmentFileName(t_SegmentInfos *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getNextSegmentFileName());
          return j2p(result);
        }

        static PyObject *t_SegmentInfos_getSegmentsFileName(t_SegmentInfos *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getSegmentsFileName());
          return j2p(result);
        }

        static PyObject *t_SegmentInfos_getUserData(t_SegmentInfos *self)
        {
          ::java::util::Map result((jobject) NULL);
          OBJ_CALL(result = self->object.getUserData());
          return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_SegmentInfos_getVersion(t_SegmentInfos *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getVersion());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SegmentInfos_info(t_SegmentInfos *self, PyObject *arg)
        {
          jint a0;
          ::org::apache::lucene::index::SegmentCommitInfo result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.info(a0));
            return ::org::apache::lucene::index::t_SegmentCommitInfo::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "info", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfos_iterator(t_SegmentInfos *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.iterator());
          return ::java::util::t_Iterator::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(SegmentCommitInfo));
        }

        static PyObject *t_SegmentInfos_read(t_SegmentInfos *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
              {
                OBJ_CALL(self->object.read(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);

              if (!parseArgs(args, "ks", ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.read(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "read", args);
          return NULL;
        }

        static PyObject *t_SegmentInfos_remove(t_SegmentInfos *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentCommitInfo a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, &a0))
          {
            OBJ_CALL(self->object.remove(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "remove", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfos_setDefaultGenLookaheadCount(PyTypeObject *type, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(::org::apache::lucene::index::SegmentInfos::setDefaultGenLookaheadCount(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "setDefaultGenLookaheadCount", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfos_setInfoStream(PyTypeObject *type, PyObject *arg)
        {
          ::java::io::PrintStream a0((jobject) NULL);

          if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::index::SegmentInfos::setInfoStream(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "setInfoStream", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfos_size(t_SegmentInfos *self)
        {
          jint result;
          OBJ_CALL(result = self->object.size());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_SegmentInfos_toString(t_SegmentInfos *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(SegmentInfos), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_SegmentInfos_totalDocCount(t_SegmentInfos *self)
        {
          jint result;
          OBJ_CALL(result = self->object.totalDocCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_SegmentInfos_write3xInfo(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
          ::org::apache::lucene::store::IOContext a2((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::SegmentInfos::write3xInfo(a0, a1, a2));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "write3xInfo", args);
          return NULL;
        }

        static PyObject *t_SegmentInfos_writeSegmentsGen(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          jlong a1;

          if (!parseArgs(args, "kJ", ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
          {
            OBJ_CALL(::org::apache::lucene::index::SegmentInfos::writeSegmentsGen(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "writeSegmentsGen", args);
          return NULL;
        }

        static PyObject *t_SegmentInfos_get__counter(t_SegmentInfos *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_counter());
          return PyInt_FromLong((long) value);
        }
        static int t_SegmentInfos_set__counter(t_SegmentInfos *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_counter(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "counter", arg);
          return -1;
        }

        static int t_SegmentInfos_set__defaultGenLookaheadCount(t_SegmentInfos *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setDefaultGenLookaheadCount(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "defaultGenLookaheadCount", arg);
          return -1;
        }

        static PyObject *t_SegmentInfos_get__defaultGenLookahedCount(t_SegmentInfos *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getDefaultGenLookahedCount());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_SegmentInfos_get__generation(t_SegmentInfos *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getGeneration());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_SegmentInfos_get__infoStream(t_SegmentInfos *self, void *data)
        {
          ::java::io::PrintStream value((jobject) NULL);
          OBJ_CALL(value = self->object.getInfoStream());
          return ::java::io::t_PrintStream::wrap_Object(value);
        }
        static int t_SegmentInfos_set__infoStream(t_SegmentInfos *self, PyObject *arg, void *data)
        {
          {
            ::java::io::PrintStream value((jobject) NULL);
            if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &value))
            {
              INT_CALL(self->object.setInfoStream(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "infoStream", arg);
          return -1;
        }

        static PyObject *t_SegmentInfos_get__lastGeneration(t_SegmentInfos *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getLastGeneration());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_SegmentInfos_get__nextSegmentFileName(t_SegmentInfos *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getNextSegmentFileName());
          return j2p(value);
        }

        static PyObject *t_SegmentInfos_get__segmentsFileName(t_SegmentInfos *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getSegmentsFileName());
          return j2p(value);
        }

        static PyObject *t_SegmentInfos_get__userData(t_SegmentInfos *self, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          OBJ_CALL(value = self->object.getUserData());
          return ::java::util::t_Map::wrap_Object(value);
        }

        static PyObject *t_SegmentInfos_get__version(t_SegmentInfos *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getVersion());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/id/IndonesianStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace id {

          ::java::lang::Class *IndonesianStemmer::class$ = NULL;
          jmethodID *IndonesianStemmer::mids$ = NULL;
          bool IndonesianStemmer::live$ = false;

          jclass IndonesianStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/id/IndonesianStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_39342af2] = env->getMethodID(cls, "stem", "([CIZ)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IndonesianStemmer::IndonesianStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint IndonesianStemmer::stem(const JArray< jchar > & a0, jint a1, jboolean a2) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_39342af2], a0.this$, a1, a2);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace id {
          static PyObject *t_IndonesianStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndonesianStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IndonesianStemmer_init_(t_IndonesianStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IndonesianStemmer_stem(t_IndonesianStemmer *self, PyObject *args);

          static PyMethodDef t_IndonesianStemmer__methods_[] = {
            DECLARE_METHOD(t_IndonesianStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndonesianStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndonesianStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IndonesianStemmer, t_IndonesianStemmer, ::java::lang::Object, IndonesianStemmer, t_IndonesianStemmer_init_, 0, 0, 0, 0, 0);

          void t_IndonesianStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(IndonesianStemmer), module, "IndonesianStemmer", 0);
          }

          void t_IndonesianStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IndonesianStemmer).tp_dict, "class_", make_descriptor(IndonesianStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IndonesianStemmer).tp_dict, "wrapfn_", make_descriptor(t_IndonesianStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IndonesianStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IndonesianStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IndonesianStemmer::initializeClass, 1)))
              return NULL;
            return t_IndonesianStemmer::wrap_Object(IndonesianStemmer(((t_IndonesianStemmer *) arg)->object.this$));
          }
          static PyObject *t_IndonesianStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IndonesianStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IndonesianStemmer_init_(t_IndonesianStemmer *self, PyObject *args, PyObject *kwds)
          {
            IndonesianStemmer object((jobject) NULL);

            INT_CALL(object = IndonesianStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_IndonesianStemmer_stem(t_IndonesianStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jboolean a2;
            jint result;

            if (!parseArgs(args, "[CIZ", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.stem(a0, a1, a2));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/FieldDateResolutionFCListener.h"
#include "org/apache/lucene/queryparser/flexible/core/config/FieldConfigListener.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/config/FieldConfig.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {

              ::java::lang::Class *FieldDateResolutionFCListener::class$ = NULL;
              jmethodID *FieldDateResolutionFCListener::mids$ = NULL;
              bool FieldDateResolutionFCListener::live$ = false;

              jclass FieldDateResolutionFCListener::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/config/FieldDateResolutionFCListener");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_0b1f7132] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");
                  mids$[mid_buildFieldConfig_aaab7c6b] = env->getMethodID(cls, "buildFieldConfig", "(Lorg/apache/lucene/queryparser/flexible/core/config/FieldConfig;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              FieldDateResolutionFCListener::FieldDateResolutionFCListener(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_0b1f7132, a0.this$)) {}

              void FieldDateResolutionFCListener::buildFieldConfig(const ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_buildFieldConfig_aaab7c6b], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {
              static PyObject *t_FieldDateResolutionFCListener_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FieldDateResolutionFCListener_instance_(PyTypeObject *type, PyObject *arg);
              static int t_FieldDateResolutionFCListener_init_(t_FieldDateResolutionFCListener *self, PyObject *args, PyObject *kwds);
              static PyObject *t_FieldDateResolutionFCListener_buildFieldConfig(t_FieldDateResolutionFCListener *self, PyObject *arg);

              static PyMethodDef t_FieldDateResolutionFCListener__methods_[] = {
                DECLARE_METHOD(t_FieldDateResolutionFCListener, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldDateResolutionFCListener, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldDateResolutionFCListener, buildFieldConfig, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(FieldDateResolutionFCListener, t_FieldDateResolutionFCListener, ::java::lang::Object, FieldDateResolutionFCListener, t_FieldDateResolutionFCListener_init_, 0, 0, 0, 0, 0);

              void t_FieldDateResolutionFCListener::install(PyObject *module)
              {
                installType(&PY_TYPE(FieldDateResolutionFCListener), module, "FieldDateResolutionFCListener", 0);
              }

              void t_FieldDateResolutionFCListener::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(FieldDateResolutionFCListener).tp_dict, "class_", make_descriptor(FieldDateResolutionFCListener::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(FieldDateResolutionFCListener).tp_dict, "wrapfn_", make_descriptor(t_FieldDateResolutionFCListener::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(FieldDateResolutionFCListener).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FieldDateResolutionFCListener_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FieldDateResolutionFCListener::initializeClass, 1)))
                  return NULL;
                return t_FieldDateResolutionFCListener::wrap_Object(FieldDateResolutionFCListener(((t_FieldDateResolutionFCListener *) arg)->object.this$));
              }
              static PyObject *t_FieldDateResolutionFCListener_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FieldDateResolutionFCListener::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_FieldDateResolutionFCListener_init_(t_FieldDateResolutionFCListener *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);
                FieldDateResolutionFCListener object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                {
                  INT_CALL(object = FieldDateResolutionFCListener(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_FieldDateResolutionFCListener_buildFieldConfig(t_FieldDateResolutionFCListener *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.buildFieldConfig(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "buildFieldConfig", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TermCollectingRewrite.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TermCollectingRewrite::class$ = NULL;
        jmethodID *TermCollectingRewrite::mids$ = NULL;
        bool TermCollectingRewrite::live$ = false;

        jclass TermCollectingRewrite::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TermCollectingRewrite");

            mids$ = new jmethodID[max_mid];
            mids$[mid_addClause_6e72b6c4] = env->getMethodID(cls, "addClause", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/index/Term;IFLorg/apache/lucene/index/TermContext;)V");
            mids$[mid_addClause_5594f39b] = env->getMethodID(cls, "addClause", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/index/Term;IF)V");
            mids$[mid_getTopLevelQuery_97e3851a] = env->getMethodID(cls, "getTopLevelQuery", "()Lorg/apache/lucene/search/Query;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TermCollectingRewrite_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermCollectingRewrite_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermCollectingRewrite_of_(t_TermCollectingRewrite *self, PyObject *args);
        static PyObject *t_TermCollectingRewrite_get__parameters_(t_TermCollectingRewrite *self, void *data);
        static PyGetSetDef t_TermCollectingRewrite__fields_[] = {
          DECLARE_GET_FIELD(t_TermCollectingRewrite, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TermCollectingRewrite__methods_[] = {
          DECLARE_METHOD(t_TermCollectingRewrite, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermCollectingRewrite, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermCollectingRewrite, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermCollectingRewrite, t_TermCollectingRewrite, ::org::apache::lucene::search::MultiTermQuery$RewriteMethod, TermCollectingRewrite, abstract_init, 0, 0, t_TermCollectingRewrite__fields_, 0, 0);
        PyObject *t_TermCollectingRewrite::wrap_Object(const TermCollectingRewrite& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TermCollectingRewrite::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TermCollectingRewrite *self = (t_TermCollectingRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_TermCollectingRewrite::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TermCollectingRewrite::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TermCollectingRewrite *self = (t_TermCollectingRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_TermCollectingRewrite::install(PyObject *module)
        {
          installType(&PY_TYPE(TermCollectingRewrite), module, "TermCollectingRewrite", 0);
        }

        void t_TermCollectingRewrite::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermCollectingRewrite).tp_dict, "class_", make_descriptor(TermCollectingRewrite::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermCollectingRewrite).tp_dict, "wrapfn_", make_descriptor(t_TermCollectingRewrite::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermCollectingRewrite).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermCollectingRewrite_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermCollectingRewrite::initializeClass, 1)))
            return NULL;
          return t_TermCollectingRewrite::wrap_Object(TermCollectingRewrite(((t_TermCollectingRewrite *) arg)->object.this$));
        }
        static PyObject *t_TermCollectingRewrite_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermCollectingRewrite::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TermCollectingRewrite_of_(t_TermCollectingRewrite *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }
        static PyObject *t_TermCollectingRewrite_get__parameters_(t_TermCollectingRewrite *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/DefFunction.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/util/Map.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *DefFunction::class$ = NULL;
            jmethodID *DefFunction::mids$ = NULL;
            bool DefFunction::live$ = false;

            jclass DefFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/DefFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_1fde8fc3] = env->getMethodID(cls, "<init>", "(Ljava/util/List;)V");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DefFunction::DefFunction(const ::java::util::List & a0) : ::org::apache::lucene::queries::function::valuesource::MultiFunction(env->newObject(initializeClass, &mids$, mid_init$_1fde8fc3, a0.this$)) {}

            ::org::apache::lucene::queries::function::FunctionValues DefFunction::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_DefFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DefFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DefFunction_init_(t_DefFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DefFunction_getValues(t_DefFunction *self, PyObject *args);

            static PyMethodDef t_DefFunction__methods_[] = {
              DECLARE_METHOD(t_DefFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DefFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DefFunction, getValues, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DefFunction, t_DefFunction, ::org::apache::lucene::queries::function::valuesource::MultiFunction, DefFunction, t_DefFunction_init_, 0, 0, 0, 0, 0);

            void t_DefFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(DefFunction), module, "DefFunction", 0);
            }

            void t_DefFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DefFunction).tp_dict, "class_", make_descriptor(DefFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DefFunction).tp_dict, "wrapfn_", make_descriptor(t_DefFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DefFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DefFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DefFunction::initializeClass, 1)))
                return NULL;
              return t_DefFunction::wrap_Object(DefFunction(((t_DefFunction *) arg)->object.this$));
            }
            static PyObject *t_DefFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DefFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DefFunction_init_(t_DefFunction *self, PyObject *args, PyObject *kwds)
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              DefFunction object((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
              {
                INT_CALL(object = DefFunction(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_DefFunction_getValues(t_DefFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(DefFunction), (PyObject *) self, "getValues", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ValueQueryNode.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *ValueQueryNode::class$ = NULL;
              jmethodID *ValueQueryNode::mids$ = NULL;
              bool ValueQueryNode::live$ = false;

              jclass ValueQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/ValueQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_getValue_846352c3] = env->getMethodID(cls, "getValue", "()Ljava/lang/Object;");
                  mids$[mid_setValue_290588ee] = env->getMethodID(cls, "setValue", "(Ljava/lang/Object;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::java::lang::Object ValueQueryNode::getValue() const
              {
                return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getValue_846352c3]));
              }

              void ValueQueryNode::setValue(const ::java::lang::Object & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setValue_290588ee], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_ValueQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ValueQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ValueQueryNode_of_(t_ValueQueryNode *self, PyObject *args);
              static PyObject *t_ValueQueryNode_getValue(t_ValueQueryNode *self);
              static PyObject *t_ValueQueryNode_setValue(t_ValueQueryNode *self, PyObject *arg);
              static PyObject *t_ValueQueryNode_get__value(t_ValueQueryNode *self, void *data);
              static int t_ValueQueryNode_set__value(t_ValueQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_ValueQueryNode_get__parameters_(t_ValueQueryNode *self, void *data);
              static PyGetSetDef t_ValueQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_ValueQueryNode, value),
                DECLARE_GET_FIELD(t_ValueQueryNode, parameters_),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_ValueQueryNode__methods_[] = {
                DECLARE_METHOD(t_ValueQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ValueQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ValueQueryNode, of_, METH_VARARGS),
                DECLARE_METHOD(t_ValueQueryNode, getValue, METH_NOARGS),
                DECLARE_METHOD(t_ValueQueryNode, setValue, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(ValueQueryNode, t_ValueQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode, ValueQueryNode, abstract_init, 0, 0, t_ValueQueryNode__fields_, 0, 0);
              PyObject *t_ValueQueryNode::wrap_Object(const ValueQueryNode& object, PyTypeObject *p0)
              {
                PyObject *obj = t_ValueQueryNode::wrap_Object(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_ValueQueryNode *self = (t_ValueQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              PyObject *t_ValueQueryNode::wrap_jobject(const jobject& object, PyTypeObject *p0)
              {
                PyObject *obj = t_ValueQueryNode::wrap_jobject(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_ValueQueryNode *self = (t_ValueQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              void t_ValueQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(ValueQueryNode), module, "ValueQueryNode", 0);
              }

              void t_ValueQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(ValueQueryNode).tp_dict, "class_", make_descriptor(ValueQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(ValueQueryNode).tp_dict, "wrapfn_", make_descriptor(t_ValueQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(ValueQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_ValueQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, ValueQueryNode::initializeClass, 1)))
                  return NULL;
                return t_ValueQueryNode::wrap_Object(ValueQueryNode(((t_ValueQueryNode *) arg)->object.this$));
              }
              static PyObject *t_ValueQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, ValueQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_ValueQueryNode_of_(t_ValueQueryNode *self, PyObject *args)
              {
                if (!parseArg(args, "T", 1, &(self->parameters)))
                  Py_RETURN_SELF;
                return PyErr_SetArgsError((PyObject *) self, "of_", args);
              }

              static PyObject *t_ValueQueryNode_getValue(t_ValueQueryNode *self)
              {
                ::java::lang::Object result((jobject) NULL);
                OBJ_CALL(result = self->object.getValue());
                return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
              }

              static PyObject *t_ValueQueryNode_setValue(t_ValueQueryNode *self, PyObject *arg)
              {
                ::java::lang::Object a0((jobject) NULL);

                if (!parseArg(arg, "O", self->parameters[0], &a0))
                {
                  OBJ_CALL(self->object.setValue(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setValue", arg);
                return NULL;
              }
              static PyObject *t_ValueQueryNode_get__parameters_(t_ValueQueryNode *self, void *data)
              {
                return typeParameters(self->parameters, sizeof(self->parameters));
              }

              static PyObject *t_ValueQueryNode_get__value(t_ValueQueryNode *self, void *data)
              {
                ::java::lang::Object value((jobject) NULL);
                OBJ_CALL(value = self->object.getValue());
                return ::java::lang::t_Object::wrap_Object(value);
              }
              static int t_ValueQueryNode_set__value(t_ValueQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::Object value((jobject) NULL);
                  if (!parseArg(arg, "o", &value))
                  {
                    INT_CALL(self->object.setValue(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "value", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/DoubleConstValueSource.h"
#include "java/lang/Number.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *DoubleConstValueSource::class$ = NULL;
            jmethodID *DoubleConstValueSource::mids$ = NULL;
            bool DoubleConstValueSource::live$ = false;

            jclass DoubleConstValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/DoubleConstValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5d1c7645] = env->getMethodID(cls, "<init>", "(D)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getBool_54c6a16a] = env->getMethodID(cls, "getBool", "()Z");
                mids$[mid_getDouble_54c6a174] = env->getMethodID(cls, "getDouble", "()D");
                mids$[mid_getFloat_54c6a176] = env->getMethodID(cls, "getFloat", "()F");
                mids$[mid_getInt_54c6a179] = env->getMethodID(cls, "getInt", "()I");
                mids$[mid_getLong_54c6a17a] = env->getMethodID(cls, "getLong", "()J");
                mids$[mid_getNumber_ee47e3e1] = env->getMethodID(cls, "getNumber", "()Ljava/lang/Number;");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DoubleConstValueSource::DoubleConstValueSource(jdouble a0) : ::org::apache::lucene::queries::function::valuesource::ConstNumberSource(env->newObject(initializeClass, &mids$, mid_init$_5d1c7645, a0)) {}

            ::java::lang::String DoubleConstValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean DoubleConstValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            jboolean DoubleConstValueSource::getBool() const
            {
              return env->callBooleanMethod(this$, mids$[mid_getBool_54c6a16a]);
            }

            jdouble DoubleConstValueSource::getDouble() const
            {
              return env->callDoubleMethod(this$, mids$[mid_getDouble_54c6a174]);
            }

            jfloat DoubleConstValueSource::getFloat() const
            {
              return env->callFloatMethod(this$, mids$[mid_getFloat_54c6a176]);
            }

            jint DoubleConstValueSource::getInt() const
            {
              return env->callIntMethod(this$, mids$[mid_getInt_54c6a179]);
            }

            jlong DoubleConstValueSource::getLong() const
            {
              return env->callLongMethod(this$, mids$[mid_getLong_54c6a17a]);
            }

            ::java::lang::Number DoubleConstValueSource::getNumber() const
            {
              return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getNumber_ee47e3e1]));
            }

            ::org::apache::lucene::queries::function::FunctionValues DoubleConstValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint DoubleConstValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_DoubleConstValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DoubleConstValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DoubleConstValueSource_init_(t_DoubleConstValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DoubleConstValueSource_description(t_DoubleConstValueSource *self, PyObject *args);
            static PyObject *t_DoubleConstValueSource_equals(t_DoubleConstValueSource *self, PyObject *args);
            static PyObject *t_DoubleConstValueSource_getBool(t_DoubleConstValueSource *self, PyObject *args);
            static PyObject *t_DoubleConstValueSource_getDouble(t_DoubleConstValueSource *self, PyObject *args);
            static PyObject *t_DoubleConstValueSource_getFloat(t_DoubleConstValueSource *self, PyObject *args);
            static PyObject *t_DoubleConstValueSource_getInt(t_DoubleConstValueSource *self, PyObject *args);
            static PyObject *t_DoubleConstValueSource_getLong(t_DoubleConstValueSource *self, PyObject *args);
            static PyObject *t_DoubleConstValueSource_getNumber(t_DoubleConstValueSource *self, PyObject *args);
            static PyObject *t_DoubleConstValueSource_getValues(t_DoubleConstValueSource *self, PyObject *args);
            static PyObject *t_DoubleConstValueSource_hashCode(t_DoubleConstValueSource *self, PyObject *args);
            static PyObject *t_DoubleConstValueSource_get__bool(t_DoubleConstValueSource *self, void *data);
            static PyObject *t_DoubleConstValueSource_get__double(t_DoubleConstValueSource *self, void *data);
            static PyObject *t_DoubleConstValueSource_get__float(t_DoubleConstValueSource *self, void *data);
            static PyObject *t_DoubleConstValueSource_get__int(t_DoubleConstValueSource *self, void *data);
            static PyObject *t_DoubleConstValueSource_get__long(t_DoubleConstValueSource *self, void *data);
            static PyObject *t_DoubleConstValueSource_get__number(t_DoubleConstValueSource *self, void *data);
            static PyGetSetDef t_DoubleConstValueSource__fields_[] = {
              DECLARE_GET_FIELD(t_DoubleConstValueSource, bool),
              DECLARE_GET_FIELD(t_DoubleConstValueSource, double),
              DECLARE_GET_FIELD(t_DoubleConstValueSource, float),
              DECLARE_GET_FIELD(t_DoubleConstValueSource, int),
              DECLARE_GET_FIELD(t_DoubleConstValueSource, long),
              DECLARE_GET_FIELD(t_DoubleConstValueSource, number),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_DoubleConstValueSource__methods_[] = {
              DECLARE_METHOD(t_DoubleConstValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DoubleConstValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DoubleConstValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_DoubleConstValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_DoubleConstValueSource, getBool, METH_VARARGS),
              DECLARE_METHOD(t_DoubleConstValueSource, getDouble, METH_VARARGS),
              DECLARE_METHOD(t_DoubleConstValueSource, getFloat, METH_VARARGS),
              DECLARE_METHOD(t_DoubleConstValueSource, getInt, METH_VARARGS),
              DECLARE_METHOD(t_DoubleConstValueSource, getLong, METH_VARARGS),
              DECLARE_METHOD(t_DoubleConstValueSource, getNumber, METH_VARARGS),
              DECLARE_METHOD(t_DoubleConstValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_DoubleConstValueSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DoubleConstValueSource, t_DoubleConstValueSource, ::org::apache::lucene::queries::function::valuesource::ConstNumberSource, DoubleConstValueSource, t_DoubleConstValueSource_init_, 0, 0, t_DoubleConstValueSource__fields_, 0, 0);

            void t_DoubleConstValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(DoubleConstValueSource), module, "DoubleConstValueSource", 0);
            }

            void t_DoubleConstValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DoubleConstValueSource).tp_dict, "class_", make_descriptor(DoubleConstValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DoubleConstValueSource).tp_dict, "wrapfn_", make_descriptor(t_DoubleConstValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DoubleConstValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DoubleConstValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DoubleConstValueSource::initializeClass, 1)))
                return NULL;
              return t_DoubleConstValueSource::wrap_Object(DoubleConstValueSource(((t_DoubleConstValueSource *) arg)->object.this$));
            }
            static PyObject *t_DoubleConstValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DoubleConstValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DoubleConstValueSource_init_(t_DoubleConstValueSource *self, PyObject *args, PyObject *kwds)
            {
              jdouble a0;
              DoubleConstValueSource object((jobject) NULL);

              if (!parseArgs(args, "D", &a0))
              {
                INT_CALL(object = DoubleConstValueSource(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_DoubleConstValueSource_description(t_DoubleConstValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(DoubleConstValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_DoubleConstValueSource_equals(t_DoubleConstValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(DoubleConstValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_DoubleConstValueSource_getBool(t_DoubleConstValueSource *self, PyObject *args)
            {
              jboolean result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getBool());
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(DoubleConstValueSource), (PyObject *) self, "getBool", args, 2);
            }

            static PyObject *t_DoubleConstValueSource_getDouble(t_DoubleConstValueSource *self, PyObject *args)
            {
              jdouble result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getDouble());
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(&PY_TYPE(DoubleConstValueSource), (PyObject *) self, "getDouble", args, 2);
            }

            static PyObject *t_DoubleConstValueSource_getFloat(t_DoubleConstValueSource *self, PyObject *args)
            {
              jfloat result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getFloat());
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(&PY_TYPE(DoubleConstValueSource), (PyObject *) self, "getFloat", args, 2);
            }

            static PyObject *t_DoubleConstValueSource_getInt(t_DoubleConstValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getInt());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(DoubleConstValueSource), (PyObject *) self, "getInt", args, 2);
            }

            static PyObject *t_DoubleConstValueSource_getLong(t_DoubleConstValueSource *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getLong());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(DoubleConstValueSource), (PyObject *) self, "getLong", args, 2);
            }

            static PyObject *t_DoubleConstValueSource_getNumber(t_DoubleConstValueSource *self, PyObject *args)
            {
              ::java::lang::Number result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getNumber());
                return ::java::lang::t_Number::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(DoubleConstValueSource), (PyObject *) self, "getNumber", args, 2);
            }

            static PyObject *t_DoubleConstValueSource_getValues(t_DoubleConstValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(DoubleConstValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_DoubleConstValueSource_hashCode(t_DoubleConstValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(DoubleConstValueSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_DoubleConstValueSource_get__bool(t_DoubleConstValueSource *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.getBool());
              Py_RETURN_BOOL(value);
            }

            static PyObject *t_DoubleConstValueSource_get__double(t_DoubleConstValueSource *self, void *data)
            {
              jdouble value;
              OBJ_CALL(value = self->object.getDouble());
              return PyFloat_FromDouble((double) value);
            }

            static PyObject *t_DoubleConstValueSource_get__float(t_DoubleConstValueSource *self, void *data)
            {
              jfloat value;
              OBJ_CALL(value = self->object.getFloat());
              return PyFloat_FromDouble((double) value);
            }

            static PyObject *t_DoubleConstValueSource_get__int(t_DoubleConstValueSource *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getInt());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_DoubleConstValueSource_get__long(t_DoubleConstValueSource *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object.getLong());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }

            static PyObject *t_DoubleConstValueSource_get__number(t_DoubleConstValueSource *self, void *data)
            {
              ::java::lang::Number value((jobject) NULL);
              OBJ_CALL(value = self->object.getNumber());
              return ::java::lang::t_Number::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/th/ThaiWordFilter.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace th {

          ::java::lang::Class *ThaiWordFilter::class$ = NULL;
          jmethodID *ThaiWordFilter::mids$ = NULL;
          bool ThaiWordFilter::live$ = false;
          jboolean ThaiWordFilter::DBBI_AVAILABLE = (jboolean) 0;

          jclass ThaiWordFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/th/ThaiWordFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8f50e725] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DBBI_AVAILABLE = env->getStaticBooleanField(cls, "DBBI_AVAILABLE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ThaiWordFilter::ThaiWordFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_8f50e725, a0.this$, a1.this$)) {}

          jboolean ThaiWordFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void ThaiWordFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace th {
          static PyObject *t_ThaiWordFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ThaiWordFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ThaiWordFilter_init_(t_ThaiWordFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ThaiWordFilter_incrementToken(t_ThaiWordFilter *self, PyObject *args);
          static PyObject *t_ThaiWordFilter_reset(t_ThaiWordFilter *self, PyObject *args);

          static PyMethodDef t_ThaiWordFilter__methods_[] = {
            DECLARE_METHOD(t_ThaiWordFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ThaiWordFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ThaiWordFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_ThaiWordFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ThaiWordFilter, t_ThaiWordFilter, ::org::apache::lucene::analysis::TokenFilter, ThaiWordFilter, t_ThaiWordFilter_init_, 0, 0, 0, 0, 0);

          void t_ThaiWordFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ThaiWordFilter), module, "ThaiWordFilter", 0);
          }

          void t_ThaiWordFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ThaiWordFilter).tp_dict, "class_", make_descriptor(ThaiWordFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ThaiWordFilter).tp_dict, "wrapfn_", make_descriptor(t_ThaiWordFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ThaiWordFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ThaiWordFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(ThaiWordFilter).tp_dict, "DBBI_AVAILABLE", make_descriptor(ThaiWordFilter::DBBI_AVAILABLE));
          }

          static PyObject *t_ThaiWordFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ThaiWordFilter::initializeClass, 1)))
              return NULL;
            return t_ThaiWordFilter::wrap_Object(ThaiWordFilter(((t_ThaiWordFilter *) arg)->object.this$));
          }
          static PyObject *t_ThaiWordFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ThaiWordFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ThaiWordFilter_init_(t_ThaiWordFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
            ThaiWordFilter object((jobject) NULL);

            if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
            {
              INT_CALL(object = ThaiWordFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ThaiWordFilter_incrementToken(t_ThaiWordFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ThaiWordFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_ThaiWordFilter_reset(t_ThaiWordFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ThaiWordFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/CloneNotSupportedException.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *ModifierQueryNode::class$ = NULL;
              jmethodID *ModifierQueryNode::mids$ = NULL;
              bool ModifierQueryNode::live$ = false;

              jclass ModifierQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_6bd34b3d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;Lorg/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier;)V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getChild_b387c5e6] = env->getMethodID(cls, "getChild", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getModifier_511690a9] = env->getMethodID(cls, "getModifier", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier;");
                  mids$[mid_setChild_cc04aeef] = env->getMethodID(cls, "setChild", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ModifierQueryNode::ModifierQueryNode(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0, const ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier & a1) : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_6bd34b3d, a0.this$, a1.this$)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode ModifierQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode ModifierQueryNode::getChild() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_getChild_b387c5e6]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier ModifierQueryNode::getModifier() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier(env->callObjectMethod(this$, mids$[mid_getModifier_511690a9]));
              }

              void ModifierQueryNode::setChild(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setChild_cc04aeef], a0.this$);
              }

              ::java::lang::CharSequence ModifierQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String ModifierQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_ModifierQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ModifierQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_ModifierQueryNode_init_(t_ModifierQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_ModifierQueryNode_cloneTree(t_ModifierQueryNode *self, PyObject *args);
              static PyObject *t_ModifierQueryNode_getChild(t_ModifierQueryNode *self);
              static PyObject *t_ModifierQueryNode_getModifier(t_ModifierQueryNode *self);
              static PyObject *t_ModifierQueryNode_setChild(t_ModifierQueryNode *self, PyObject *arg);
              static PyObject *t_ModifierQueryNode_toQueryString(t_ModifierQueryNode *self, PyObject *args);
              static PyObject *t_ModifierQueryNode_toString(t_ModifierQueryNode *self, PyObject *args);
              static PyObject *t_ModifierQueryNode_get__child(t_ModifierQueryNode *self, void *data);
              static int t_ModifierQueryNode_set__child(t_ModifierQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_ModifierQueryNode_get__modifier(t_ModifierQueryNode *self, void *data);
              static PyGetSetDef t_ModifierQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_ModifierQueryNode, child),
                DECLARE_GET_FIELD(t_ModifierQueryNode, modifier),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_ModifierQueryNode__methods_[] = {
                DECLARE_METHOD(t_ModifierQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ModifierQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ModifierQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_ModifierQueryNode, getChild, METH_NOARGS),
                DECLARE_METHOD(t_ModifierQueryNode, getModifier, METH_NOARGS),
                DECLARE_METHOD(t_ModifierQueryNode, setChild, METH_O),
                DECLARE_METHOD(t_ModifierQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_ModifierQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(ModifierQueryNode, t_ModifierQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, ModifierQueryNode, t_ModifierQueryNode_init_, 0, 0, t_ModifierQueryNode__fields_, 0, 0);

              void t_ModifierQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(ModifierQueryNode), module, "ModifierQueryNode", 0);
                PyDict_SetItemString(PY_TYPE(ModifierQueryNode).tp_dict, "Modifier", make_descriptor(&PY_TYPE(ModifierQueryNode$Modifier)));
              }

              void t_ModifierQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(ModifierQueryNode).tp_dict, "class_", make_descriptor(ModifierQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(ModifierQueryNode).tp_dict, "wrapfn_", make_descriptor(t_ModifierQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(ModifierQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_ModifierQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, ModifierQueryNode::initializeClass, 1)))
                  return NULL;
                return t_ModifierQueryNode::wrap_Object(ModifierQueryNode(((t_ModifierQueryNode *) arg)->object.this$));
              }
              static PyObject *t_ModifierQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, ModifierQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_ModifierQueryNode_init_(t_ModifierQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier a1((jobject) NULL);
                PyTypeObject **p1;
                ModifierQueryNode object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::queryparser::flexible::core::nodes::t_ModifierQueryNode$Modifier::parameters_))
                {
                  INT_CALL(object = ModifierQueryNode(a0, a1));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_ModifierQueryNode_cloneTree(t_ModifierQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(ModifierQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_ModifierQueryNode_getChild(t_ModifierQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.getChild());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
              }

              static PyObject *t_ModifierQueryNode_getModifier(t_ModifierQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier result((jobject) NULL);
                OBJ_CALL(result = self->object.getModifier());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_ModifierQueryNode$Modifier::wrap_Object(result);
              }

              static PyObject *t_ModifierQueryNode_setChild(t_ModifierQueryNode *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.setChild(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setChild", arg);
                return NULL;
              }

              static PyObject *t_ModifierQueryNode_toQueryString(t_ModifierQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(ModifierQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_ModifierQueryNode_toString(t_ModifierQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(ModifierQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_ModifierQueryNode_get__child(t_ModifierQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode value((jobject) NULL);
                OBJ_CALL(value = self->object.getChild());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(value);
              }
              static int t_ModifierQueryNode_set__child(t_ModifierQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode value((jobject) NULL);
                  if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &value))
                  {
                    INT_CALL(self->object.setChild(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "child", arg);
                return -1;
              }

              static PyObject *t_ModifierQueryNode_get__modifier(t_ModifierQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier value((jobject) NULL);
                OBJ_CALL(value = self->object.getModifier());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_ModifierQueryNode$Modifier::wrap_Object(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/CombineSuggestion.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/spell/SuggestWord.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *CombineSuggestion::class$ = NULL;
          jmethodID *CombineSuggestion::mids$ = NULL;
          jfieldID *CombineSuggestion::fids$ = NULL;
          bool CombineSuggestion::live$ = false;

          jclass CombineSuggestion::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/CombineSuggestion");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e7d3559a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spell/SuggestWord;[I)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_originalTermIndexes] = env->getFieldID(cls, "originalTermIndexes", "[I");
              fids$[fid_suggestion] = env->getFieldID(cls, "suggestion", "Lorg/apache/lucene/search/spell/SuggestWord;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CombineSuggestion::CombineSuggestion(const ::org::apache::lucene::search::spell::SuggestWord & a0, const JArray< jint > & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e7d3559a, a0.this$, a1.this$)) {}

          JArray< jint > CombineSuggestion::_get_originalTermIndexes() const
          {
            return JArray< jint >(env->getObjectField(this$, fids$[fid_originalTermIndexes]));
          }

          ::org::apache::lucene::search::spell::SuggestWord CombineSuggestion::_get_suggestion() const
          {
            return ::org::apache::lucene::search::spell::SuggestWord(env->getObjectField(this$, fids$[fid_suggestion]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_CombineSuggestion_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CombineSuggestion_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CombineSuggestion_init_(t_CombineSuggestion *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CombineSuggestion_get__originalTermIndexes(t_CombineSuggestion *self, void *data);
          static PyObject *t_CombineSuggestion_get__suggestion(t_CombineSuggestion *self, void *data);

          static PyGetSetDef t_CombineSuggestion__fields_[] = {
            DECLARE_GET_FIELD(t_CombineSuggestion, originalTermIndexes),
            DECLARE_GET_FIELD(t_CombineSuggestion, suggestion),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CombineSuggestion__methods_[] = {
            DECLARE_METHOD(t_CombineSuggestion, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CombineSuggestion, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CombineSuggestion, t_CombineSuggestion, ::java::lang::Object, CombineSuggestion, t_CombineSuggestion_init_, 0, 0, t_CombineSuggestion__fields_, 0, 0);

          void t_CombineSuggestion::install(PyObject *module)
          {
            installType(&PY_TYPE(CombineSuggestion), module, "CombineSuggestion", 0);
          }

          void t_CombineSuggestion::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CombineSuggestion).tp_dict, "class_", make_descriptor(CombineSuggestion::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CombineSuggestion).tp_dict, "wrapfn_", make_descriptor(t_CombineSuggestion::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CombineSuggestion).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CombineSuggestion_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CombineSuggestion::initializeClass, 1)))
              return NULL;
            return t_CombineSuggestion::wrap_Object(CombineSuggestion(((t_CombineSuggestion *) arg)->object.this$));
          }
          static PyObject *t_CombineSuggestion_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CombineSuggestion::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CombineSuggestion_init_(t_CombineSuggestion *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spell::SuggestWord a0((jobject) NULL);
            JArray< jint > a1((jobject) NULL);
            CombineSuggestion object((jobject) NULL);

            if (!parseArgs(args, "k[I", ::org::apache::lucene::search::spell::SuggestWord::initializeClass, &a0, &a1))
            {
              INT_CALL(object = CombineSuggestion(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CombineSuggestion_get__originalTermIndexes(t_CombineSuggestion *self, void *data)
          {
            JArray< jint > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_originalTermIndexes());
            return value.wrap();
          }

          static PyObject *t_CombineSuggestion_get__suggestion(t_CombineSuggestion *self, void *data)
          {
            ::org::apache::lucene::search::spell::SuggestWord value((jobject) NULL);
            OBJ_CALL(value = self->object._get_suggestion());
            return ::org::apache::lucene::search::spell::t_SuggestWord::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/range/Range.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/search/Filter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {

          ::java::lang::Class *Range::class$ = NULL;
          jmethodID *Range::mids$ = NULL;
          jfieldID *Range::fids$ = NULL;
          bool Range::live$ = false;

          jclass Range::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/range/Range");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getFilter_f7e0d95b] = env->getMethodID(cls, "getFilter", "(Lorg/apache/lucene/queries/function/ValueSource;)Lorg/apache/lucene/search/Filter;");
              mids$[mid_getFilter_fc904367] = env->getMethodID(cls, "getFilter", "(Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/queries/function/ValueSource;)Lorg/apache/lucene/search/Filter;");
              mids$[mid_failNoMatch_54c6a166] = env->getMethodID(cls, "failNoMatch", "()V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_label] = env->getFieldID(cls, "label", "Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::search::Filter Range::getFilter(const ::org::apache::lucene::queries::function::ValueSource & a0) const
          {
            return ::org::apache::lucene::search::Filter(env->callObjectMethod(this$, mids$[mid_getFilter_f7e0d95b], a0.this$));
          }

          ::org::apache::lucene::search::Filter Range::getFilter(const ::org::apache::lucene::search::Filter & a0, const ::org::apache::lucene::queries::function::ValueSource & a1) const
          {
            return ::org::apache::lucene::search::Filter(env->callObjectMethod(this$, mids$[mid_getFilter_fc904367], a0.this$, a1.this$));
          }

          ::java::lang::String Range::_get_label() const
          {
            return ::java::lang::String(env->getObjectField(this$, fids$[fid_label]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {
          static PyObject *t_Range_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Range_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Range_getFilter(t_Range *self, PyObject *args);
          static PyObject *t_Range_get__label(t_Range *self, void *data);

          static PyGetSetDef t_Range__fields_[] = {
            DECLARE_GET_FIELD(t_Range, label),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Range__methods_[] = {
            DECLARE_METHOD(t_Range, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Range, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Range, getFilter, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Range, t_Range, ::java::lang::Object, Range, abstract_init, 0, 0, t_Range__fields_, 0, 0);

          void t_Range::install(PyObject *module)
          {
            installType(&PY_TYPE(Range), module, "Range", 0);
          }

          void t_Range::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Range).tp_dict, "class_", make_descriptor(Range::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Range).tp_dict, "wrapfn_", make_descriptor(t_Range::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Range).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Range_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Range::initializeClass, 1)))
              return NULL;
            return t_Range::wrap_Object(Range(((t_Range *) arg)->object.this$));
          }
          static PyObject *t_Range_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Range::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Range_getFilter(t_Range *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
                ::org::apache::lucene::search::Filter result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.getFilter(a0));
                  return ::org::apache::lucene::search::t_Filter::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::search::Filter a0((jobject) NULL);
                ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);
                ::org::apache::lucene::search::Filter result((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.getFilter(a0, a1));
                  return ::org::apache::lucene::search::t_Filter::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getFilter", args);
            return NULL;
          }

          static PyObject *t_Range_get__label(t_Range *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object._get_label());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergePolicy.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "org/apache/lucene/index/SegmentInfos.h"
#include "org/apache/lucene/index/MergePolicy$MergeSpecification.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "java/io/Closeable.h"
#include "java/lang/Boolean.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergePolicy::class$ = NULL;
        jmethodID *MergePolicy::mids$ = NULL;
        bool MergePolicy::live$ = false;

        jclass MergePolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergePolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_findForcedDeletesMerges_581dbc49] = env->getMethodID(cls, "findForcedDeletesMerges", "(Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_findForcedMerges_4fe4a5b5] = env->getMethodID(cls, "findForcedMerges", "(Lorg/apache/lucene/index/SegmentInfos;ILjava/util/Map;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_findMerges_cada0df0] = env->getMethodID(cls, "findMerges", "(Lorg/apache/lucene/index/MergeTrigger;Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_getMaxCFSSegmentSizeMB_54c6a174] = env->getMethodID(cls, "getMaxCFSSegmentSizeMB", "()D");
            mids$[mid_getNoCFSRatio_54c6a174] = env->getMethodID(cls, "getNoCFSRatio", "()D");
            mids$[mid_setMaxCFSSegmentSizeMB_5d1c7645] = env->getMethodID(cls, "setMaxCFSSegmentSizeMB", "(D)V");
            mids$[mid_setNoCFSRatio_5d1c7645] = env->getMethodID(cls, "setNoCFSRatio", "(D)V");
            mids$[mid_useCompoundFile_70dc8488] = env->getMethodID(cls, "useCompoundFile", "(Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/index/IndexWriter;)Z");
            mids$[mid_size_5454cb07] = env->getMethodID(cls, "size", "(Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/index/IndexWriter;)J");
            mids$[mid_isMerged_70dc8488] = env->getMethodID(cls, "isMerged", "(Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/index/IndexWriter;)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MergePolicy::MergePolicy() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void MergePolicy::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification MergePolicy::findForcedDeletesMerges(const ::org::apache::lucene::index::SegmentInfos & a0, const ::org::apache::lucene::index::IndexWriter & a1) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findForcedDeletesMerges_581dbc49], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification MergePolicy::findForcedMerges(const ::org::apache::lucene::index::SegmentInfos & a0, jint a1, const ::java::util::Map & a2, const ::org::apache::lucene::index::IndexWriter & a3) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findForcedMerges_4fe4a5b5], a0.this$, a1, a2.this$, a3.this$));
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification MergePolicy::findMerges(const ::org::apache::lucene::index::MergeTrigger & a0, const ::org::apache::lucene::index::SegmentInfos & a1, const ::org::apache::lucene::index::IndexWriter & a2) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findMerges_cada0df0], a0.this$, a1.this$, a2.this$));
        }

        jdouble MergePolicy::getMaxCFSSegmentSizeMB() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getMaxCFSSegmentSizeMB_54c6a174]);
        }

        jdouble MergePolicy::getNoCFSRatio() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getNoCFSRatio_54c6a174]);
        }

        void MergePolicy::setMaxCFSSegmentSizeMB(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMaxCFSSegmentSizeMB_5d1c7645], a0);
        }

        void MergePolicy::setNoCFSRatio(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setNoCFSRatio_5d1c7645], a0);
        }

        jboolean MergePolicy::useCompoundFile(const ::org::apache::lucene::index::SegmentInfos & a0, const ::org::apache::lucene::index::SegmentCommitInfo & a1, const ::org::apache::lucene::index::IndexWriter & a2) const
        {
          return env->callBooleanMethod(this$, mids$[mid_useCompoundFile_70dc8488], a0.this$, a1.this$, a2.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/index/MergePolicy$MergeAbortedException.h"
#include "org/apache/lucene/index/MergePolicy$MergeException.h"
#include "org/apache/lucene/index/MergePolicy$OneMerge.h"
#include "org/apache/lucene/index/MergePolicy$DocMap.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergePolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergePolicy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MergePolicy_init_(t_MergePolicy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MergePolicy_close(t_MergePolicy *self);
        static PyObject *t_MergePolicy_findForcedDeletesMerges(t_MergePolicy *self, PyObject *args);
        static PyObject *t_MergePolicy_findForcedMerges(t_MergePolicy *self, PyObject *args);
        static PyObject *t_MergePolicy_findMerges(t_MergePolicy *self, PyObject *args);
        static PyObject *t_MergePolicy_getMaxCFSSegmentSizeMB(t_MergePolicy *self);
        static PyObject *t_MergePolicy_getNoCFSRatio(t_MergePolicy *self);
        static PyObject *t_MergePolicy_setMaxCFSSegmentSizeMB(t_MergePolicy *self, PyObject *arg);
        static PyObject *t_MergePolicy_setNoCFSRatio(t_MergePolicy *self, PyObject *arg);
        static PyObject *t_MergePolicy_useCompoundFile(t_MergePolicy *self, PyObject *args);
        static PyObject *t_MergePolicy_get__maxCFSSegmentSizeMB(t_MergePolicy *self, void *data);
        static int t_MergePolicy_set__maxCFSSegmentSizeMB(t_MergePolicy *self, PyObject *arg, void *data);
        static PyObject *t_MergePolicy_get__noCFSRatio(t_MergePolicy *self, void *data);
        static int t_MergePolicy_set__noCFSRatio(t_MergePolicy *self, PyObject *arg, void *data);
        static PyGetSetDef t_MergePolicy__fields_[] = {
          DECLARE_GETSET_FIELD(t_MergePolicy, maxCFSSegmentSizeMB),
          DECLARE_GETSET_FIELD(t_MergePolicy, noCFSRatio),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MergePolicy__methods_[] = {
          DECLARE_METHOD(t_MergePolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy, close, METH_NOARGS),
          DECLARE_METHOD(t_MergePolicy, findForcedDeletesMerges, METH_VARARGS),
          DECLARE_METHOD(t_MergePolicy, findForcedMerges, METH_VARARGS),
          DECLARE_METHOD(t_MergePolicy, findMerges, METH_VARARGS),
          DECLARE_METHOD(t_MergePolicy, getMaxCFSSegmentSizeMB, METH_NOARGS),
          DECLARE_METHOD(t_MergePolicy, getNoCFSRatio, METH_NOARGS),
          DECLARE_METHOD(t_MergePolicy, setMaxCFSSegmentSizeMB, METH_O),
          DECLARE_METHOD(t_MergePolicy, setNoCFSRatio, METH_O),
          DECLARE_METHOD(t_MergePolicy, useCompoundFile, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MergePolicy, t_MergePolicy, ::java::lang::Object, MergePolicy, t_MergePolicy_init_, 0, 0, t_MergePolicy__fields_, 0, 0);

        void t_MergePolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(MergePolicy), module, "MergePolicy", 0);
          PyDict_SetItemString(PY_TYPE(MergePolicy).tp_dict, "MergeAbortedException", make_descriptor(&PY_TYPE(MergePolicy$MergeAbortedException)));
          PyDict_SetItemString(PY_TYPE(MergePolicy).tp_dict, "MergeException", make_descriptor(&PY_TYPE(MergePolicy$MergeException)));
          PyDict_SetItemString(PY_TYPE(MergePolicy).tp_dict, "MergeSpecification", make_descriptor(&PY_TYPE(MergePolicy$MergeSpecification)));
          PyDict_SetItemString(PY_TYPE(MergePolicy).tp_dict, "OneMerge", make_descriptor(&PY_TYPE(MergePolicy$OneMerge)));
          PyDict_SetItemString(PY_TYPE(MergePolicy).tp_dict, "DocMap", make_descriptor(&PY_TYPE(MergePolicy$DocMap)));
        }

        void t_MergePolicy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MergePolicy).tp_dict, "class_", make_descriptor(MergePolicy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MergePolicy).tp_dict, "wrapfn_", make_descriptor(t_MergePolicy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MergePolicy).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergePolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergePolicy::initializeClass, 1)))
            return NULL;
          return t_MergePolicy::wrap_Object(MergePolicy(((t_MergePolicy *) arg)->object.this$));
        }
        static PyObject *t_MergePolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergePolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MergePolicy_init_(t_MergePolicy *self, PyObject *args, PyObject *kwds)
        {
          MergePolicy object((jobject) NULL);

          INT_CALL(object = MergePolicy());
          self->object = object;

          return 0;
        }

        static PyObject *t_MergePolicy_close(t_MergePolicy *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_MergePolicy_findForcedDeletesMerges(t_MergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          ::org::apache::lucene::index::IndexWriter a1((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.findForcedDeletesMerges(a0, a1));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "findForcedDeletesMerges", args);
          return NULL;
        }

        static PyObject *t_MergePolicy_findForcedMerges(t_MergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          jint a1;
          ::java::util::Map a2((jobject) NULL);
          PyTypeObject **p2;
          ::org::apache::lucene::index::IndexWriter a3((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "kIKk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::java::util::Map::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_, &a3))
          {
            OBJ_CALL(result = self->object.findForcedMerges(a0, a1, a2, a3));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "findForcedMerges", args);
          return NULL;
        }

        static PyObject *t_MergePolicy_findMerges(t_MergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergeTrigger a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::index::SegmentInfos a1((jobject) NULL);
          ::org::apache::lucene::index::IndexWriter a2((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "Kkk", ::org::apache::lucene::index::MergeTrigger::initializeClass, ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_MergeTrigger::parameters_, &a1, &a2))
          {
            OBJ_CALL(result = self->object.findMerges(a0, a1, a2));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "findMerges", args);
          return NULL;
        }

        static PyObject *t_MergePolicy_getMaxCFSSegmentSizeMB(t_MergePolicy *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getMaxCFSSegmentSizeMB());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_MergePolicy_getNoCFSRatio(t_MergePolicy *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getNoCFSRatio());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_MergePolicy_setMaxCFSSegmentSizeMB(t_MergePolicy *self, PyObject *arg)
        {
          jdouble a0;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(self->object.setMaxCFSSegmentSizeMB(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxCFSSegmentSizeMB", arg);
          return NULL;
        }

        static PyObject *t_MergePolicy_setNoCFSRatio(t_MergePolicy *self, PyObject *arg)
        {
          jdouble a0;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(self->object.setNoCFSRatio(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setNoCFSRatio", arg);
          return NULL;
        }

        static PyObject *t_MergePolicy_useCompoundFile(t_MergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          ::org::apache::lucene::index::SegmentCommitInfo a1((jobject) NULL);
          ::org::apache::lucene::index::IndexWriter a2((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "kkk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.useCompoundFile(a0, a1, a2));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "useCompoundFile", args);
          return NULL;
        }

        static PyObject *t_MergePolicy_get__maxCFSSegmentSizeMB(t_MergePolicy *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getMaxCFSSegmentSizeMB());
          return PyFloat_FromDouble((double) value);
        }
        static int t_MergePolicy_set__maxCFSSegmentSizeMB(t_MergePolicy *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setMaxCFSSegmentSizeMB(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxCFSSegmentSizeMB", arg);
          return -1;
        }

        static PyObject *t_MergePolicy_get__noCFSRatio(t_MergePolicy *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getNoCFSRatio());
          return PyFloat_FromDouble((double) value);
        }
        static int t_MergePolicy_set__noCFSRatio(t_MergePolicy *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setNoCFSRatio(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "noCFSRatio", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/position/PositionFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/position/PositionFilter.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace position {

          ::java::lang::Class *PositionFilterFactory::class$ = NULL;
          jmethodID *PositionFilterFactory::mids$ = NULL;
          bool PositionFilterFactory::live$ = false;

          jclass PositionFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/position/PositionFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_17e0c763] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/position/PositionFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PositionFilterFactory::PositionFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::position::PositionFilter PositionFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::position::PositionFilter(env->callObjectMethod(this$, mids$[mid_create_17e0c763], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace position {
          static PyObject *t_PositionFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PositionFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PositionFilterFactory_init_(t_PositionFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PositionFilterFactory_create(t_PositionFilterFactory *self, PyObject *args);

          static PyMethodDef t_PositionFilterFactory__methods_[] = {
            DECLARE_METHOD(t_PositionFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PositionFilterFactory, t_PositionFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, PositionFilterFactory, t_PositionFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_PositionFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PositionFilterFactory), module, "PositionFilterFactory", 0);
          }

          void t_PositionFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PositionFilterFactory).tp_dict, "class_", make_descriptor(PositionFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PositionFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_PositionFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PositionFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PositionFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PositionFilterFactory::initializeClass, 1)))
              return NULL;
            return t_PositionFilterFactory::wrap_Object(PositionFilterFactory(((t_PositionFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_PositionFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PositionFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PositionFilterFactory_init_(t_PositionFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PositionFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PositionFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PositionFilterFactory_create(t_PositionFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::position::PositionFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::position::t_PositionFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PositionFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/MultiFunction$Values.h"
#include "org/apache/lucene/queries/function/FunctionValues$ValueFiller.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queries/function/valuesource/MultiFunction.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *MultiFunction$Values::class$ = NULL;
            jmethodID *MultiFunction$Values::mids$ = NULL;
            bool MultiFunction$Values::live$ = false;

            jclass MultiFunction$Values::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/MultiFunction$Values");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_b691fe3f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/valuesource/MultiFunction;[Lorg/apache/lucene/queries/function/FunctionValues;)V");
                mids$[mid_getValueFiller_7731f0bd] = env->getMethodID(cls, "getValueFiller", "()Lorg/apache/lucene/queries/function/FunctionValues$ValueFiller;");
                mids$[mid_toString_141401b3] = env->getMethodID(cls, "toString", "(I)Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            MultiFunction$Values::MultiFunction$Values(const ::org::apache::lucene::queries::function::valuesource::MultiFunction & a0, const JArray< ::org::apache::lucene::queries::function::FunctionValues > & a1) : ::org::apache::lucene::queries::function::FunctionValues(env->newObject(initializeClass, &mids$, mid_init$_b691fe3f, a0.this$, a1.this$)) {}

            ::org::apache::lucene::queries::function::FunctionValues$ValueFiller MultiFunction$Values::getValueFiller() const
            {
              return ::org::apache::lucene::queries::function::FunctionValues$ValueFiller(env->callObjectMethod(this$, mids$[mid_getValueFiller_7731f0bd]));
            }

            ::java::lang::String MultiFunction$Values::toString(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_141401b3], a0));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_MultiFunction$Values_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_MultiFunction$Values_instance_(PyTypeObject *type, PyObject *arg);
            static int t_MultiFunction$Values_init_(t_MultiFunction$Values *self, PyObject *args, PyObject *kwds);
            static PyObject *t_MultiFunction$Values_getValueFiller(t_MultiFunction$Values *self, PyObject *args);
            static PyObject *t_MultiFunction$Values_toString(t_MultiFunction$Values *self, PyObject *args);
            static PyObject *t_MultiFunction$Values_get__valueFiller(t_MultiFunction$Values *self, void *data);
            static PyGetSetDef t_MultiFunction$Values__fields_[] = {
              DECLARE_GET_FIELD(t_MultiFunction$Values, valueFiller),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_MultiFunction$Values__methods_[] = {
              DECLARE_METHOD(t_MultiFunction$Values, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiFunction$Values, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MultiFunction$Values, getValueFiller, METH_VARARGS),
              DECLARE_METHOD(t_MultiFunction$Values, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(MultiFunction$Values, t_MultiFunction$Values, ::org::apache::lucene::queries::function::FunctionValues, MultiFunction$Values, t_MultiFunction$Values_init_, 0, 0, t_MultiFunction$Values__fields_, 0, 0);

            void t_MultiFunction$Values::install(PyObject *module)
            {
              installType(&PY_TYPE(MultiFunction$Values), module, "MultiFunction$Values", 0);
            }

            void t_MultiFunction$Values::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(MultiFunction$Values).tp_dict, "class_", make_descriptor(MultiFunction$Values::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(MultiFunction$Values).tp_dict, "wrapfn_", make_descriptor(t_MultiFunction$Values::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(MultiFunction$Values).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_MultiFunction$Values_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, MultiFunction$Values::initializeClass, 1)))
                return NULL;
              return t_MultiFunction$Values::wrap_Object(MultiFunction$Values(((t_MultiFunction$Values *) arg)->object.this$));
            }
            static PyObject *t_MultiFunction$Values_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, MultiFunction$Values::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_MultiFunction$Values_init_(t_MultiFunction$Values *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::valuesource::MultiFunction a0((jobject) NULL);
              JArray< ::org::apache::lucene::queries::function::FunctionValues > a1((jobject) NULL);
              MultiFunction$Values object((jobject) NULL);

              if (!parseArgs(args, "k[k", ::org::apache::lucene::queries::function::valuesource::MultiFunction::initializeClass, ::org::apache::lucene::queries::function::FunctionValues::initializeClass, &a0, &a1))
              {
                INT_CALL(object = MultiFunction$Values(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_MultiFunction$Values_getValueFiller(t_MultiFunction$Values *self, PyObject *args)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getValueFiller());
                return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(MultiFunction$Values), (PyObject *) self, "getValueFiller", args, 2);
            }

            static PyObject *t_MultiFunction$Values_toString(t_MultiFunction$Values *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(MultiFunction$Values), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_MultiFunction$Values_get__valueFiller(t_MultiFunction$Values *self, void *data)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller value((jobject) NULL);
              OBJ_CALL(value = self->object.getValueFiller());
              return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionLengthAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *PositionLengthAttribute::class$ = NULL;
          jmethodID *PositionLengthAttribute::mids$ = NULL;
          bool PositionLengthAttribute::live$ = false;

          jclass PositionLengthAttribute::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/PositionLengthAttribute");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getPositionLength_54c6a179] = env->getMethodID(cls, "getPositionLength", "()I");
              mids$[mid_setPositionLength_39c7bd3c] = env->getMethodID(cls, "setPositionLength", "(I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint PositionLengthAttribute::getPositionLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getPositionLength_54c6a179]);
          }

          void PositionLengthAttribute::setPositionLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPositionLength_39c7bd3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_PositionLengthAttribute_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PositionLengthAttribute_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PositionLengthAttribute_getPositionLength(t_PositionLengthAttribute *self);
          static PyObject *t_PositionLengthAttribute_setPositionLength(t_PositionLengthAttribute *self, PyObject *arg);
          static PyObject *t_PositionLengthAttribute_get__positionLength(t_PositionLengthAttribute *self, void *data);
          static int t_PositionLengthAttribute_set__positionLength(t_PositionLengthAttribute *self, PyObject *arg, void *data);
          static PyGetSetDef t_PositionLengthAttribute__fields_[] = {
            DECLARE_GETSET_FIELD(t_PositionLengthAttribute, positionLength),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PositionLengthAttribute__methods_[] = {
            DECLARE_METHOD(t_PositionLengthAttribute, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionLengthAttribute, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionLengthAttribute, getPositionLength, METH_NOARGS),
            DECLARE_METHOD(t_PositionLengthAttribute, setPositionLength, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PositionLengthAttribute, t_PositionLengthAttribute, ::org::apache::lucene::util::Attribute, PositionLengthAttribute, abstract_init, 0, 0, t_PositionLengthAttribute__fields_, 0, 0);

          void t_PositionLengthAttribute::install(PyObject *module)
          {
            installType(&PY_TYPE(PositionLengthAttribute), module, "PositionLengthAttribute", 0);
          }

          void t_PositionLengthAttribute::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PositionLengthAttribute).tp_dict, "class_", make_descriptor(PositionLengthAttribute::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PositionLengthAttribute).tp_dict, "wrapfn_", make_descriptor(t_PositionLengthAttribute::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PositionLengthAttribute).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PositionLengthAttribute_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PositionLengthAttribute::initializeClass, 1)))
              return NULL;
            return t_PositionLengthAttribute::wrap_Object(PositionLengthAttribute(((t_PositionLengthAttribute *) arg)->object.this$));
          }
          static PyObject *t_PositionLengthAttribute_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PositionLengthAttribute::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PositionLengthAttribute_getPositionLength(t_PositionLengthAttribute *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getPositionLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PositionLengthAttribute_setPositionLength(t_PositionLengthAttribute *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setPositionLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPositionLength", arg);
            return NULL;
          }

          static PyObject *t_PositionLengthAttribute_get__positionLength(t_PositionLengthAttribute *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getPositionLength());
            return PyInt_FromLong((long) value);
          }
          static int t_PositionLengthAttribute_set__positionLength(t_PositionLengthAttribute *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setPositionLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "positionLength", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$bitwise_and_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$bitwise_and_return::class$ = NULL;
          jmethodID *JavascriptParser$bitwise_and_return::mids$ = NULL;
          bool JavascriptParser$bitwise_and_return::live$ = false;

          jclass JavascriptParser$bitwise_and_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$bitwise_and_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$bitwise_and_return::JavascriptParser$bitwise_and_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$bitwise_and_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$bitwise_and_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$bitwise_and_return_init_(t_JavascriptParser$bitwise_and_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$bitwise_and_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$bitwise_and_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$bitwise_and_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$bitwise_and_return, t_JavascriptParser$bitwise_and_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$bitwise_and_return, t_JavascriptParser$bitwise_and_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$bitwise_and_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$bitwise_and_return), module, "JavascriptParser$bitwise_and_return", 0);
          }

          void t_JavascriptParser$bitwise_and_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$bitwise_and_return).tp_dict, "class_", make_descriptor(JavascriptParser$bitwise_and_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$bitwise_and_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$bitwise_and_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$bitwise_and_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$bitwise_and_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$bitwise_and_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$bitwise_and_return::wrap_Object(JavascriptParser$bitwise_and_return(((t_JavascriptParser$bitwise_and_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$bitwise_and_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$bitwise_and_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$bitwise_and_return_init_(t_JavascriptParser$bitwise_and_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$bitwise_and_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$bitwise_and_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/FloatEncoder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *FloatEncoder::class$ = NULL;
          jmethodID *FloatEncoder::mids$ = NULL;
          bool FloatEncoder::live$ = false;

          jclass FloatEncoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/FloatEncoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_encode_871544e1] = env->getMethodID(cls, "encode", "([CII)Lorg/apache/lucene/util/BytesRef;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FloatEncoder::FloatEncoder() : ::org::apache::lucene::analysis::payloads::AbstractEncoder(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::util::BytesRef FloatEncoder::encode(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_encode_871544e1], a0.this$, a1, a2));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_FloatEncoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FloatEncoder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FloatEncoder_init_(t_FloatEncoder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FloatEncoder_encode(t_FloatEncoder *self, PyObject *args);

          static PyMethodDef t_FloatEncoder__methods_[] = {
            DECLARE_METHOD(t_FloatEncoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FloatEncoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FloatEncoder, encode, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FloatEncoder, t_FloatEncoder, ::org::apache::lucene::analysis::payloads::AbstractEncoder, FloatEncoder, t_FloatEncoder_init_, 0, 0, 0, 0, 0);

          void t_FloatEncoder::install(PyObject *module)
          {
            installType(&PY_TYPE(FloatEncoder), module, "FloatEncoder", 0);
          }

          void t_FloatEncoder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FloatEncoder).tp_dict, "class_", make_descriptor(FloatEncoder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FloatEncoder).tp_dict, "wrapfn_", make_descriptor(t_FloatEncoder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FloatEncoder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FloatEncoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FloatEncoder::initializeClass, 1)))
              return NULL;
            return t_FloatEncoder::wrap_Object(FloatEncoder(((t_FloatEncoder *) arg)->object.this$));
          }
          static PyObject *t_FloatEncoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FloatEncoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FloatEncoder_init_(t_FloatEncoder *self, PyObject *args, PyObject *kwds)
          {
            FloatEncoder object((jobject) NULL);

            INT_CALL(object = FloatEncoder());
            self->object = object;

            return 0;
          }

          static PyObject *t_FloatEncoder_encode(t_FloatEncoder *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint a2;
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, "[CII", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.encode(a0, a1, a2));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FloatEncoder), (PyObject *) self, "encode", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptCompiler.h"
#include "java/lang/String.h"
#include "org/apache/lucene/expressions/Expression.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptCompiler::class$ = NULL;
          jmethodID *JavascriptCompiler::mids$ = NULL;
          bool JavascriptCompiler::live$ = false;

          jclass JavascriptCompiler::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptCompiler");

              mids$ = new jmethodID[max_mid];
              mids$[mid_compile_3f39a74f] = env->getStaticMethodID(cls, "compile", "(Ljava/lang/String;)Lorg/apache/lucene/expressions/Expression;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::expressions::Expression JavascriptCompiler::compile(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::expressions::Expression(env->callStaticObjectMethod(cls, mids$[mid_compile_3f39a74f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptCompiler_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptCompiler_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptCompiler_compile(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_JavascriptCompiler__methods_[] = {
            DECLARE_METHOD(t_JavascriptCompiler, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptCompiler, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptCompiler, compile, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptCompiler, t_JavascriptCompiler, ::java::lang::Object, JavascriptCompiler, abstract_init, 0, 0, 0, 0, 0);

          void t_JavascriptCompiler::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptCompiler), module, "JavascriptCompiler", 0);
          }

          void t_JavascriptCompiler::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptCompiler).tp_dict, "class_", make_descriptor(JavascriptCompiler::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptCompiler).tp_dict, "wrapfn_", make_descriptor(t_JavascriptCompiler::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptCompiler).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptCompiler_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptCompiler::initializeClass, 1)))
              return NULL;
            return t_JavascriptCompiler::wrap_Object(JavascriptCompiler(((t_JavascriptCompiler *) arg)->object.this$));
          }
          static PyObject *t_JavascriptCompiler_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptCompiler::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_JavascriptCompiler_compile(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::expressions::Expression result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::expressions::js::JavascriptCompiler::compile(a0));
              return ::org::apache::lucene::expressions::t_Expression::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "compile", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/SetOnce.h"
#include "java/lang/Cloneable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *SetOnce::class$ = NULL;
        jmethodID *SetOnce::mids$ = NULL;
        bool SetOnce::live$ = false;

        jclass SetOnce::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/SetOnce");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_290588ee] = env->getMethodID(cls, "<init>", "(Ljava/lang/Object;)V");
            mids$[mid_get_846352c3] = env->getMethodID(cls, "get", "()Ljava/lang/Object;");
            mids$[mid_set_290588ee] = env->getMethodID(cls, "set", "(Ljava/lang/Object;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SetOnce::SetOnce() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        SetOnce::SetOnce(const ::java::lang::Object & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_290588ee, a0.this$)) {}

        ::java::lang::Object SetOnce::get() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_846352c3]));
        }

        void SetOnce::set(const ::java::lang::Object & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_set_290588ee], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/SetOnce$AlreadySetException.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_SetOnce_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SetOnce_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SetOnce_of_(t_SetOnce *self, PyObject *args);
        static int t_SetOnce_init_(t_SetOnce *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SetOnce_get(t_SetOnce *self);
        static PyObject *t_SetOnce_set(t_SetOnce *self, PyObject *arg);
        static PyObject *t_SetOnce_get__parameters_(t_SetOnce *self, void *data);
        static PyGetSetDef t_SetOnce__fields_[] = {
          DECLARE_GET_FIELD(t_SetOnce, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SetOnce__methods_[] = {
          DECLARE_METHOD(t_SetOnce, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SetOnce, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SetOnce, of_, METH_VARARGS),
          DECLARE_METHOD(t_SetOnce, get, METH_NOARGS),
          DECLARE_METHOD(t_SetOnce, set, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SetOnce, t_SetOnce, ::java::lang::Object, SetOnce, t_SetOnce_init_, 0, 0, t_SetOnce__fields_, 0, 0);
        PyObject *t_SetOnce::wrap_Object(const SetOnce& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SetOnce::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SetOnce *self = (t_SetOnce *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_SetOnce::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SetOnce::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SetOnce *self = (t_SetOnce *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_SetOnce::install(PyObject *module)
        {
          installType(&PY_TYPE(SetOnce), module, "SetOnce", 0);
          PyDict_SetItemString(PY_TYPE(SetOnce).tp_dict, "AlreadySetException", make_descriptor(&PY_TYPE(SetOnce$AlreadySetException)));
        }

        void t_SetOnce::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SetOnce).tp_dict, "class_", make_descriptor(SetOnce::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SetOnce).tp_dict, "wrapfn_", make_descriptor(t_SetOnce::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SetOnce).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SetOnce_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SetOnce::initializeClass, 1)))
            return NULL;
          return t_SetOnce::wrap_Object(SetOnce(((t_SetOnce *) arg)->object.this$));
        }
        static PyObject *t_SetOnce_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SetOnce::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SetOnce_of_(t_SetOnce *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_SetOnce_init_(t_SetOnce *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              SetOnce object((jobject) NULL);

              INT_CALL(object = SetOnce());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              ::java::lang::Object a0((jobject) NULL);
              SetOnce object((jobject) NULL);

              if (!parseArgs(args, "o", &a0))
              {
                INT_CALL(object = SetOnce(a0));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SetOnce_get(t_SetOnce *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.get());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_SetOnce_set(t_SetOnce *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArg(arg, "O", self->parameters[0], &a0))
          {
            OBJ_CALL(self->object.set(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "set", arg);
          return NULL;
        }
        static PyObject *t_SetOnce_get__parameters_(t_SetOnce *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SingleTermsEnum.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SingleTermsEnum::class$ = NULL;
        jmethodID *SingleTermsEnum::mids$ = NULL;
        bool SingleTermsEnum::live$ = false;

        jclass SingleTermsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SingleTermsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_acc8615c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/TermsEnum;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_accept_30bc08e1] = env->getMethodID(cls, "accept", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/FilteredTermsEnum$AcceptStatus;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SingleTermsEnum::SingleTermsEnum(const ::org::apache::lucene::index::TermsEnum & a0, const ::org::apache::lucene::util::BytesRef & a1) : ::org::apache::lucene::index::FilteredTermsEnum(env->newObject(initializeClass, &mids$, mid_init$_acc8615c, a0.this$, a1.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SingleTermsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SingleTermsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SingleTermsEnum_init_(t_SingleTermsEnum *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_SingleTermsEnum__methods_[] = {
          DECLARE_METHOD(t_SingleTermsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SingleTermsEnum, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SingleTermsEnum, t_SingleTermsEnum, ::org::apache::lucene::index::FilteredTermsEnum, SingleTermsEnum, t_SingleTermsEnum_init_, 0, 0, 0, 0, 0);

        void t_SingleTermsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(SingleTermsEnum), module, "SingleTermsEnum", 0);
        }

        void t_SingleTermsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SingleTermsEnum).tp_dict, "class_", make_descriptor(SingleTermsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SingleTermsEnum).tp_dict, "wrapfn_", make_descriptor(t_SingleTermsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SingleTermsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SingleTermsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SingleTermsEnum::initializeClass, 1)))
            return NULL;
          return t_SingleTermsEnum::wrap_Object(SingleTermsEnum(((t_SingleTermsEnum *) arg)->object.this$));
        }
        static PyObject *t_SingleTermsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SingleTermsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SingleTermsEnum_init_(t_SingleTermsEnum *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          SingleTermsEnum object((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::TermsEnum::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            INT_CALL(object = SingleTermsEnum(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/QueryTermExtractor.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/highlight/WeightedTerm.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *QueryTermExtractor::class$ = NULL;
          jmethodID *QueryTermExtractor::mids$ = NULL;
          bool QueryTermExtractor::live$ = false;

          jclass QueryTermExtractor::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/QueryTermExtractor");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getIdfWeightedTerms_90fb48ad] = env->getStaticMethodID(cls, "getIdfWeightedTerms", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)[Lorg/apache/lucene/search/highlight/WeightedTerm;");
              mids$[mid_getTerms_ec0cbfa8] = env->getStaticMethodID(cls, "getTerms", "(Lorg/apache/lucene/search/Query;)[Lorg/apache/lucene/search/highlight/WeightedTerm;");
              mids$[mid_getTerms_6d5da3e1] = env->getStaticMethodID(cls, "getTerms", "(Lorg/apache/lucene/search/Query;Z)[Lorg/apache/lucene/search/highlight/WeightedTerm;");
              mids$[mid_getTerms_ac3fa253] = env->getStaticMethodID(cls, "getTerms", "(Lorg/apache/lucene/search/Query;ZLjava/lang/String;)[Lorg/apache/lucene/search/highlight/WeightedTerm;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          QueryTermExtractor::QueryTermExtractor() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          JArray< ::org::apache::lucene::search::highlight::WeightedTerm > QueryTermExtractor::getIdfWeightedTerms(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::index::IndexReader & a1, const ::java::lang::String & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< ::org::apache::lucene::search::highlight::WeightedTerm >(env->callStaticObjectMethod(cls, mids$[mid_getIdfWeightedTerms_90fb48ad], a0.this$, a1.this$, a2.this$));
          }

          JArray< ::org::apache::lucene::search::highlight::WeightedTerm > QueryTermExtractor::getTerms(const ::org::apache::lucene::search::Query & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< ::org::apache::lucene::search::highlight::WeightedTerm >(env->callStaticObjectMethod(cls, mids$[mid_getTerms_ec0cbfa8], a0.this$));
          }

          JArray< ::org::apache::lucene::search::highlight::WeightedTerm > QueryTermExtractor::getTerms(const ::org::apache::lucene::search::Query & a0, jboolean a1)
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< ::org::apache::lucene::search::highlight::WeightedTerm >(env->callStaticObjectMethod(cls, mids$[mid_getTerms_6d5da3e1], a0.this$, a1));
          }

          JArray< ::org::apache::lucene::search::highlight::WeightedTerm > QueryTermExtractor::getTerms(const ::org::apache::lucene::search::Query & a0, jboolean a1, const ::java::lang::String & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< ::org::apache::lucene::search::highlight::WeightedTerm >(env->callStaticObjectMethod(cls, mids$[mid_getTerms_ac3fa253], a0.this$, a1, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_QueryTermExtractor_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryTermExtractor_instance_(PyTypeObject *type, PyObject *arg);
          static int t_QueryTermExtractor_init_(t_QueryTermExtractor *self, PyObject *args, PyObject *kwds);
          static PyObject *t_QueryTermExtractor_getIdfWeightedTerms(PyTypeObject *type, PyObject *args);
          static PyObject *t_QueryTermExtractor_getTerms(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_QueryTermExtractor__methods_[] = {
            DECLARE_METHOD(t_QueryTermExtractor, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryTermExtractor, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryTermExtractor, getIdfWeightedTerms, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_QueryTermExtractor, getTerms, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(QueryTermExtractor, t_QueryTermExtractor, ::java::lang::Object, QueryTermExtractor, t_QueryTermExtractor_init_, 0, 0, 0, 0, 0);

          void t_QueryTermExtractor::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryTermExtractor), module, "QueryTermExtractor", 0);
          }

          void t_QueryTermExtractor::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(QueryTermExtractor).tp_dict, "class_", make_descriptor(QueryTermExtractor::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(QueryTermExtractor).tp_dict, "wrapfn_", make_descriptor(t_QueryTermExtractor::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(QueryTermExtractor).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_QueryTermExtractor_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryTermExtractor::initializeClass, 1)))
              return NULL;
            return t_QueryTermExtractor::wrap_Object(QueryTermExtractor(((t_QueryTermExtractor *) arg)->object.this$));
          }
          static PyObject *t_QueryTermExtractor_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryTermExtractor::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_QueryTermExtractor_init_(t_QueryTermExtractor *self, PyObject *args, PyObject *kwds)
          {
            QueryTermExtractor object((jobject) NULL);

            INT_CALL(object = QueryTermExtractor());
            self->object = object;

            return 0;
          }

          static PyObject *t_QueryTermExtractor_getIdfWeightedTerms(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::search::Query a0((jobject) NULL);
            ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            JArray< ::org::apache::lucene::search::highlight::WeightedTerm > result((jobject) NULL);

            if (!parseArgs(args, "kks", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::highlight::QueryTermExtractor::getIdfWeightedTerms(a0, a1, a2));
              return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::highlight::t_WeightedTerm::wrap_jobject);
            }

            PyErr_SetArgsError(type, "getIdfWeightedTerms", args);
            return NULL;
          }

          static PyObject *t_QueryTermExtractor_getTerms(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                JArray< ::org::apache::lucene::search::highlight::WeightedTerm > result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::highlight::QueryTermExtractor::getTerms(a0));
                  return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::highlight::t_WeightedTerm::wrap_jobject);
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                jboolean a1;
                JArray< ::org::apache::lucene::search::highlight::WeightedTerm > result((jobject) NULL);

                if (!parseArgs(args, "kZ", ::org::apache::lucene::search::Query::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::highlight::QueryTermExtractor::getTerms(a0, a1));
                  return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::highlight::t_WeightedTerm::wrap_jobject);
                }
              }
              break;
             case 3:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                jboolean a1;
                ::java::lang::String a2((jobject) NULL);
                JArray< ::org::apache::lucene::search::highlight::WeightedTerm > result((jobject) NULL);

                if (!parseArgs(args, "kZs", ::org::apache::lucene::search::Query::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::highlight::QueryTermExtractor::getTerms(a0, a1, a2));
                  return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::highlight::t_WeightedTerm::wrap_jobject);
                }
              }
            }

            PyErr_SetArgsError(type, "getTerms", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FilteredQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "org/apache/lucene/search/FilteredQuery$FilterStrategy.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Filter.h"
#include "org/apache/lucene/search/Weight.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FilteredQuery::class$ = NULL;
        jmethodID *FilteredQuery::mids$ = NULL;
        bool FilteredQuery::live$ = false;
        ::org::apache::lucene::search::FilteredQuery$FilterStrategy *FilteredQuery::LEAP_FROG_FILTER_FIRST_STRATEGY = NULL;
        ::org::apache::lucene::search::FilteredQuery$FilterStrategy *FilteredQuery::LEAP_FROG_QUERY_FIRST_STRATEGY = NULL;
        ::org::apache::lucene::search::FilteredQuery$FilterStrategy *FilteredQuery::QUERY_FIRST_FILTER_STRATEGY = NULL;
        ::org::apache::lucene::search::FilteredQuery$FilterStrategy *FilteredQuery::RANDOM_ACCESS_FILTER_STRATEGY = NULL;

        jclass FilteredQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FilteredQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_96ca297d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;)V");
            mids$[mid_init$_61c4287b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/search/FilteredQuery$FilterStrategy;)V");
            mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
            mids$[mid_getFilter_b40f961f] = env->getMethodID(cls, "getFilter", "()Lorg/apache/lucene/search/Filter;");
            mids$[mid_getFilterStrategy_98d3690b] = env->getMethodID(cls, "getFilterStrategy", "()Lorg/apache/lucene/search/FilteredQuery$FilterStrategy;");
            mids$[mid_getQuery_97e3851a] = env->getMethodID(cls, "getQuery", "()Lorg/apache/lucene/search/Query;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            LEAP_FROG_FILTER_FIRST_STRATEGY = new ::org::apache::lucene::search::FilteredQuery$FilterStrategy(env->getStaticObjectField(cls, "LEAP_FROG_FILTER_FIRST_STRATEGY", "Lorg/apache/lucene/search/FilteredQuery$FilterStrategy;"));
            LEAP_FROG_QUERY_FIRST_STRATEGY = new ::org::apache::lucene::search::FilteredQuery$FilterStrategy(env->getStaticObjectField(cls, "LEAP_FROG_QUERY_FIRST_STRATEGY", "Lorg/apache/lucene/search/FilteredQuery$FilterStrategy;"));
            QUERY_FIRST_FILTER_STRATEGY = new ::org::apache::lucene::search::FilteredQuery$FilterStrategy(env->getStaticObjectField(cls, "QUERY_FIRST_FILTER_STRATEGY", "Lorg/apache/lucene/search/FilteredQuery$FilterStrategy;"));
            RANDOM_ACCESS_FILTER_STRATEGY = new ::org::apache::lucene::search::FilteredQuery$FilterStrategy(env->getStaticObjectField(cls, "RANDOM_ACCESS_FILTER_STRATEGY", "Lorg/apache/lucene/search/FilteredQuery$FilterStrategy;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilteredQuery::FilteredQuery(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::Filter & a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_96ca297d, a0.this$, a1.this$)) {}

        FilteredQuery::FilteredQuery(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::Filter & a1, const ::org::apache::lucene::search::FilteredQuery$FilterStrategy & a2) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_61c4287b, a0.this$, a1.this$, a2.this$)) {}

        ::org::apache::lucene::search::Weight FilteredQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
        }

        jboolean FilteredQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void FilteredQuery::extractTerms(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
        }

        ::org::apache::lucene::search::Filter FilteredQuery::getFilter() const
        {
          return ::org::apache::lucene::search::Filter(env->callObjectMethod(this$, mids$[mid_getFilter_b40f961f]));
        }

        ::org::apache::lucene::search::FilteredQuery$FilterStrategy FilteredQuery::getFilterStrategy() const
        {
          return ::org::apache::lucene::search::FilteredQuery$FilterStrategy(env->callObjectMethod(this$, mids$[mid_getFilterStrategy_98d3690b]));
        }

        ::org::apache::lucene::search::Query FilteredQuery::getQuery() const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getQuery_97e3851a]));
        }

        jint FilteredQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::org::apache::lucene::search::Query FilteredQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
        }

        ::java::lang::String FilteredQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/FilteredQuery$RandomAccessFilterStrategy.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FilteredQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilteredQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilteredQuery_init_(t_FilteredQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilteredQuery_createWeight(t_FilteredQuery *self, PyObject *args);
        static PyObject *t_FilteredQuery_equals(t_FilteredQuery *self, PyObject *args);
        static PyObject *t_FilteredQuery_extractTerms(t_FilteredQuery *self, PyObject *args);
        static PyObject *t_FilteredQuery_getFilter(t_FilteredQuery *self);
        static PyObject *t_FilteredQuery_getFilterStrategy(t_FilteredQuery *self);
        static PyObject *t_FilteredQuery_getQuery(t_FilteredQuery *self);
        static PyObject *t_FilteredQuery_hashCode(t_FilteredQuery *self, PyObject *args);
        static PyObject *t_FilteredQuery_rewrite(t_FilteredQuery *self, PyObject *args);
        static PyObject *t_FilteredQuery_toString(t_FilteredQuery *self, PyObject *args);
        static PyObject *t_FilteredQuery_get__filter(t_FilteredQuery *self, void *data);
        static PyObject *t_FilteredQuery_get__filterStrategy(t_FilteredQuery *self, void *data);
        static PyObject *t_FilteredQuery_get__query(t_FilteredQuery *self, void *data);
        static PyGetSetDef t_FilteredQuery__fields_[] = {
          DECLARE_GET_FIELD(t_FilteredQuery, filter),
          DECLARE_GET_FIELD(t_FilteredQuery, filterStrategy),
          DECLARE_GET_FIELD(t_FilteredQuery, query),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilteredQuery__methods_[] = {
          DECLARE_METHOD(t_FilteredQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilteredQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilteredQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_FilteredQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_FilteredQuery, extractTerms, METH_VARARGS),
          DECLARE_METHOD(t_FilteredQuery, getFilter, METH_NOARGS),
          DECLARE_METHOD(t_FilteredQuery, getFilterStrategy, METH_NOARGS),
          DECLARE_METHOD(t_FilteredQuery, getQuery, METH_NOARGS),
          DECLARE_METHOD(t_FilteredQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_FilteredQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_FilteredQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilteredQuery, t_FilteredQuery, ::org::apache::lucene::search::Query, FilteredQuery, t_FilteredQuery_init_, 0, 0, t_FilteredQuery__fields_, 0, 0);

        void t_FilteredQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(FilteredQuery), module, "FilteredQuery", 0);
          PyDict_SetItemString(PY_TYPE(FilteredQuery).tp_dict, "RandomAccessFilterStrategy", make_descriptor(&PY_TYPE(FilteredQuery$RandomAccessFilterStrategy)));
          PyDict_SetItemString(PY_TYPE(FilteredQuery).tp_dict, "FilterStrategy", make_descriptor(&PY_TYPE(FilteredQuery$FilterStrategy)));
        }

        void t_FilteredQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilteredQuery).tp_dict, "class_", make_descriptor(FilteredQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilteredQuery).tp_dict, "wrapfn_", make_descriptor(t_FilteredQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilteredQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FilteredQuery::initializeClass);
          PyDict_SetItemString(PY_TYPE(FilteredQuery).tp_dict, "LEAP_FROG_FILTER_FIRST_STRATEGY", make_descriptor(::org::apache::lucene::search::t_FilteredQuery$FilterStrategy::wrap_Object(*FilteredQuery::LEAP_FROG_FILTER_FIRST_STRATEGY)));
          PyDict_SetItemString(PY_TYPE(FilteredQuery).tp_dict, "LEAP_FROG_QUERY_FIRST_STRATEGY", make_descriptor(::org::apache::lucene::search::t_FilteredQuery$FilterStrategy::wrap_Object(*FilteredQuery::LEAP_FROG_QUERY_FIRST_STRATEGY)));
          PyDict_SetItemString(PY_TYPE(FilteredQuery).tp_dict, "QUERY_FIRST_FILTER_STRATEGY", make_descriptor(::org::apache::lucene::search::t_FilteredQuery$FilterStrategy::wrap_Object(*FilteredQuery::QUERY_FIRST_FILTER_STRATEGY)));
          PyDict_SetItemString(PY_TYPE(FilteredQuery).tp_dict, "RANDOM_ACCESS_FILTER_STRATEGY", make_descriptor(::org::apache::lucene::search::t_FilteredQuery$FilterStrategy::wrap_Object(*FilteredQuery::RANDOM_ACCESS_FILTER_STRATEGY)));
        }

        static PyObject *t_FilteredQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilteredQuery::initializeClass, 1)))
            return NULL;
          return t_FilteredQuery::wrap_Object(FilteredQuery(((t_FilteredQuery *) arg)->object.this$));
        }
        static PyObject *t_FilteredQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilteredQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilteredQuery_init_(t_FilteredQuery *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              ::org::apache::lucene::search::Filter a1((jobject) NULL);
              FilteredQuery object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, &a0, &a1))
              {
                INT_CALL(object = FilteredQuery(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              ::org::apache::lucene::search::Filter a1((jobject) NULL);
              ::org::apache::lucene::search::FilteredQuery$FilterStrategy a2((jobject) NULL);
              FilteredQuery object((jobject) NULL);

              if (!parseArgs(args, "kkk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::FilteredQuery$FilterStrategy::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = FilteredQuery(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilteredQuery_createWeight(t_FilteredQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.createWeight(a0));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilteredQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_FilteredQuery_equals(t_FilteredQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FilteredQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_FilteredQuery_extractTerms(t_FilteredQuery *self, PyObject *args)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.extractTerms(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FilteredQuery), (PyObject *) self, "extractTerms", args, 2);
        }

        static PyObject *t_FilteredQuery_getFilter(t_FilteredQuery *self)
        {
          ::org::apache::lucene::search::Filter result((jobject) NULL);
          OBJ_CALL(result = self->object.getFilter());
          return ::org::apache::lucene::search::t_Filter::wrap_Object(result);
        }

        static PyObject *t_FilteredQuery_getFilterStrategy(t_FilteredQuery *self)
        {
          ::org::apache::lucene::search::FilteredQuery$FilterStrategy result((jobject) NULL);
          OBJ_CALL(result = self->object.getFilterStrategy());
          return ::org::apache::lucene::search::t_FilteredQuery$FilterStrategy::wrap_Object(result);
        }

        static PyObject *t_FilteredQuery_getQuery(t_FilteredQuery *self)
        {
          ::org::apache::lucene::search::Query result((jobject) NULL);
          OBJ_CALL(result = self->object.getQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(result);
        }

        static PyObject *t_FilteredQuery_hashCode(t_FilteredQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilteredQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_FilteredQuery_rewrite(t_FilteredQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilteredQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_FilteredQuery_toString(t_FilteredQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FilteredQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FilteredQuery_get__filter(t_FilteredQuery *self, void *data)
        {
          ::org::apache::lucene::search::Filter value((jobject) NULL);
          OBJ_CALL(value = self->object.getFilter());
          return ::org::apache::lucene::search::t_Filter::wrap_Object(value);
        }

        static PyObject *t_FilteredQuery_get__filterStrategy(t_FilteredQuery *self, void *data)
        {
          ::org::apache::lucene::search::FilteredQuery$FilterStrategy value((jobject) NULL);
          OBJ_CALL(value = self->object.getFilterStrategy());
          return ::org::apache::lucene::search::t_FilteredQuery$FilterStrategy::wrap_Object(value);
        }

        static PyObject *t_FilteredQuery_get__query(t_FilteredQuery *self, void *data)
        {
          ::org::apache::lucene::search::Query value((jobject) NULL);
          OBJ_CALL(value = self->object.getQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/German2Stemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *German2Stemmer::class$ = NULL;
        jmethodID *German2Stemmer::mids$ = NULL;
        bool German2Stemmer::live$ = false;

        jclass German2Stemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/German2Stemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        German2Stemmer::German2Stemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean German2Stemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint German2Stemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean German2Stemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_German2Stemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_German2Stemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_German2Stemmer_init_(t_German2Stemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_German2Stemmer_equals(t_German2Stemmer *self, PyObject *args);
        static PyObject *t_German2Stemmer_hashCode(t_German2Stemmer *self, PyObject *args);
        static PyObject *t_German2Stemmer_stem(t_German2Stemmer *self, PyObject *args);

        static PyMethodDef t_German2Stemmer__methods_[] = {
          DECLARE_METHOD(t_German2Stemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_German2Stemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_German2Stemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_German2Stemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_German2Stemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(German2Stemmer, t_German2Stemmer, ::org::tartarus::snowball::SnowballProgram, German2Stemmer, t_German2Stemmer_init_, 0, 0, 0, 0, 0);

        void t_German2Stemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(German2Stemmer), module, "German2Stemmer", 0);
        }

        void t_German2Stemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(German2Stemmer).tp_dict, "class_", make_descriptor(German2Stemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(German2Stemmer).tp_dict, "wrapfn_", make_descriptor(t_German2Stemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(German2Stemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_German2Stemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, German2Stemmer::initializeClass, 1)))
            return NULL;
          return t_German2Stemmer::wrap_Object(German2Stemmer(((t_German2Stemmer *) arg)->object.this$));
        }
        static PyObject *t_German2Stemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, German2Stemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_German2Stemmer_init_(t_German2Stemmer *self, PyObject *args, PyObject *kwds)
        {
          German2Stemmer object((jobject) NULL);

          INT_CALL(object = German2Stemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_German2Stemmer_equals(t_German2Stemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(German2Stemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_German2Stemmer_hashCode(t_German2Stemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(German2Stemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_German2Stemmer_stem(t_German2Stemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(German2Stemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene42/Lucene42DocValuesFormat.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/DocValuesConsumer.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene42 {

          ::java::lang::Class *Lucene42DocValuesFormat::class$ = NULL;
          jmethodID *Lucene42DocValuesFormat::mids$ = NULL;
          bool Lucene42DocValuesFormat::live$ = false;
          jint Lucene42DocValuesFormat::MAX_BINARY_FIELD_LENGTH = (jint) 0;

          jclass Lucene42DocValuesFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene42/Lucene42DocValuesFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_06298cab] = env->getMethodID(cls, "<init>", "(F)V");
              mids$[mid_fieldsConsumer_025deb44] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/DocValuesConsumer;");
              mids$[mid_fieldsProducer_9b0d4e4a] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/DocValuesProducer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              MAX_BINARY_FIELD_LENGTH = env->getStaticIntField(cls, "MAX_BINARY_FIELD_LENGTH");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene42DocValuesFormat::Lucene42DocValuesFormat() : ::org::apache::lucene::codecs::DocValuesFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          Lucene42DocValuesFormat::Lucene42DocValuesFormat(jfloat a0) : ::org::apache::lucene::codecs::DocValuesFormat(env->newObject(initializeClass, &mids$, mid_init$_06298cab, a0)) {}

          ::org::apache::lucene::codecs::DocValuesConsumer Lucene42DocValuesFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_025deb44], a0.this$));
          }

          ::org::apache::lucene::codecs::DocValuesProducer Lucene42DocValuesFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_9b0d4e4a], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene42 {
          static PyObject *t_Lucene42DocValuesFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene42DocValuesFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene42DocValuesFormat_init_(t_Lucene42DocValuesFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene42DocValuesFormat_fieldsConsumer(t_Lucene42DocValuesFormat *self, PyObject *args);
          static PyObject *t_Lucene42DocValuesFormat_fieldsProducer(t_Lucene42DocValuesFormat *self, PyObject *args);

          static PyMethodDef t_Lucene42DocValuesFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene42DocValuesFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene42DocValuesFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene42DocValuesFormat, fieldsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_Lucene42DocValuesFormat, fieldsProducer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene42DocValuesFormat, t_Lucene42DocValuesFormat, ::org::apache::lucene::codecs::DocValuesFormat, Lucene42DocValuesFormat, t_Lucene42DocValuesFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene42DocValuesFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene42DocValuesFormat), module, "Lucene42DocValuesFormat", 0);
          }

          void t_Lucene42DocValuesFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene42DocValuesFormat).tp_dict, "class_", make_descriptor(Lucene42DocValuesFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene42DocValuesFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene42DocValuesFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene42DocValuesFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene42DocValuesFormat::initializeClass);
            PyDict_SetItemString(PY_TYPE(Lucene42DocValuesFormat).tp_dict, "MAX_BINARY_FIELD_LENGTH", make_descriptor(Lucene42DocValuesFormat::MAX_BINARY_FIELD_LENGTH));
          }

          static PyObject *t_Lucene42DocValuesFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene42DocValuesFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene42DocValuesFormat::wrap_Object(Lucene42DocValuesFormat(((t_Lucene42DocValuesFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene42DocValuesFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene42DocValuesFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene42DocValuesFormat_init_(t_Lucene42DocValuesFormat *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                Lucene42DocValuesFormat object((jobject) NULL);

                INT_CALL(object = Lucene42DocValuesFormat());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jfloat a0;
                Lucene42DocValuesFormat object((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  INT_CALL(object = Lucene42DocValuesFormat(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene42DocValuesFormat_fieldsConsumer(t_Lucene42DocValuesFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsConsumer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesConsumer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene42DocValuesFormat), (PyObject *) self, "fieldsConsumer", args, 2);
          }

          static PyObject *t_Lucene42DocValuesFormat_fieldsProducer(t_Lucene42DocValuesFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsProducer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesProducer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene42DocValuesFormat), (PyObject *) self, "fieldsProducer", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/FieldType$NumericType.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *FieldType$NumericType::class$ = NULL;
        jmethodID *FieldType$NumericType::mids$ = NULL;
        bool FieldType$NumericType::live$ = false;
        FieldType$NumericType *FieldType$NumericType::DOUBLE = NULL;
        FieldType$NumericType *FieldType$NumericType::FLOAT = NULL;
        FieldType$NumericType *FieldType$NumericType::INT = NULL;
        FieldType$NumericType *FieldType$NumericType::LONG = NULL;

        jclass FieldType$NumericType::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/FieldType$NumericType");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_197ea958] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/document/FieldType$NumericType;");
            mids$[mid_values_68701482] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/document/FieldType$NumericType;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DOUBLE = new FieldType$NumericType(env->getStaticObjectField(cls, "DOUBLE", "Lorg/apache/lucene/document/FieldType$NumericType;"));
            FLOAT = new FieldType$NumericType(env->getStaticObjectField(cls, "FLOAT", "Lorg/apache/lucene/document/FieldType$NumericType;"));
            INT = new FieldType$NumericType(env->getStaticObjectField(cls, "INT", "Lorg/apache/lucene/document/FieldType$NumericType;"));
            LONG = new FieldType$NumericType(env->getStaticObjectField(cls, "LONG", "Lorg/apache/lucene/document/FieldType$NumericType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldType$NumericType FieldType$NumericType::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldType$NumericType(env->callStaticObjectMethod(cls, mids$[mid_valueOf_197ea958], a0.this$));
        }

        JArray< FieldType$NumericType > FieldType$NumericType::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< FieldType$NumericType >(env->callStaticObjectMethod(cls, mids$[mid_values_68701482]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_FieldType$NumericType_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldType$NumericType_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldType$NumericType_of_(t_FieldType$NumericType *self, PyObject *args);
        static PyObject *t_FieldType$NumericType_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_FieldType$NumericType_values(PyTypeObject *type);
        static PyObject *t_FieldType$NumericType_get__parameters_(t_FieldType$NumericType *self, void *data);
        static PyGetSetDef t_FieldType$NumericType__fields_[] = {
          DECLARE_GET_FIELD(t_FieldType$NumericType, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldType$NumericType__methods_[] = {
          DECLARE_METHOD(t_FieldType$NumericType, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldType$NumericType, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldType$NumericType, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldType$NumericType, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FieldType$NumericType, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldType$NumericType, t_FieldType$NumericType, ::java::lang::Enum, FieldType$NumericType, abstract_init, 0, 0, t_FieldType$NumericType__fields_, 0, 0);
        PyObject *t_FieldType$NumericType::wrap_Object(const FieldType$NumericType& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldType$NumericType::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldType$NumericType *self = (t_FieldType$NumericType *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldType$NumericType::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldType$NumericType::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldType$NumericType *self = (t_FieldType$NumericType *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldType$NumericType::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldType$NumericType), module, "FieldType$NumericType", 0);
        }

        void t_FieldType$NumericType::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldType$NumericType).tp_dict, "class_", make_descriptor(FieldType$NumericType::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldType$NumericType).tp_dict, "wrapfn_", make_descriptor(t_FieldType$NumericType::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldType$NumericType).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FieldType$NumericType::initializeClass);
          PyDict_SetItemString(PY_TYPE(FieldType$NumericType).tp_dict, "DOUBLE", make_descriptor(t_FieldType$NumericType::wrap_Object(*FieldType$NumericType::DOUBLE)));
          PyDict_SetItemString(PY_TYPE(FieldType$NumericType).tp_dict, "FLOAT", make_descriptor(t_FieldType$NumericType::wrap_Object(*FieldType$NumericType::FLOAT)));
          PyDict_SetItemString(PY_TYPE(FieldType$NumericType).tp_dict, "INT", make_descriptor(t_FieldType$NumericType::wrap_Object(*FieldType$NumericType::INT)));
          PyDict_SetItemString(PY_TYPE(FieldType$NumericType).tp_dict, "LONG", make_descriptor(t_FieldType$NumericType::wrap_Object(*FieldType$NumericType::LONG)));
        }

        static PyObject *t_FieldType$NumericType_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldType$NumericType::initializeClass, 1)))
            return NULL;
          return t_FieldType$NumericType::wrap_Object(FieldType$NumericType(((t_FieldType$NumericType *) arg)->object.this$));
        }
        static PyObject *t_FieldType$NumericType_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldType$NumericType::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldType$NumericType_of_(t_FieldType$NumericType *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_FieldType$NumericType_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          FieldType$NumericType result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::FieldType$NumericType::valueOf(a0));
            return t_FieldType$NumericType::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_FieldType$NumericType_values(PyTypeObject *type)
        {
          JArray< FieldType$NumericType > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::document::FieldType$NumericType::values());
          return JArray<jobject>(result.this$).wrap(t_FieldType$NumericType::wrap_jobject);
        }
        static PyObject *t_FieldType$NumericType_get__parameters_(t_FieldType$NumericType *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/DataInputStream.h"
#include "java/io/InputStream.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/io/DataInput.h"
#include "JArray.h"

namespace java {
  namespace io {

    ::java::lang::Class *DataInputStream::class$ = NULL;
    jmethodID *DataInputStream::mids$ = NULL;
    bool DataInputStream::live$ = false;

    jclass DataInputStream::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/io/DataInputStream");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
        mids$[mid_read_49b4f134] = env->getMethodID(cls, "read", "([B)I");
        mids$[mid_read_86f44340] = env->getMethodID(cls, "read", "([BII)I");
        mids$[mid_readBoolean_54c6a16a] = env->getMethodID(cls, "readBoolean", "()Z");
        mids$[mid_readByte_54c6a172] = env->getMethodID(cls, "readByte", "()B");
        mids$[mid_readChar_54c6a173] = env->getMethodID(cls, "readChar", "()C");
        mids$[mid_readDouble_54c6a174] = env->getMethodID(cls, "readDouble", "()D");
        mids$[mid_readFloat_54c6a176] = env->getMethodID(cls, "readFloat", "()F");
        mids$[mid_readFully_49b4f12b] = env->getMethodID(cls, "readFully", "([B)V");
        mids$[mid_readFully_86f4435f] = env->getMethodID(cls, "readFully", "([BII)V");
        mids$[mid_readInt_54c6a179] = env->getMethodID(cls, "readInt", "()I");
        mids$[mid_readLine_14c7b5c5] = env->getMethodID(cls, "readLine", "()Ljava/lang/String;");
        mids$[mid_readLong_54c6a17a] = env->getMethodID(cls, "readLong", "()J");
        mids$[mid_readShort_54c6a163] = env->getMethodID(cls, "readShort", "()S");
        mids$[mid_readUTF_14c7b5c5] = env->getMethodID(cls, "readUTF", "()Ljava/lang/String;");
        mids$[mid_readUTF_b3b10019] = env->getStaticMethodID(cls, "readUTF", "(Ljava/io/DataInput;)Ljava/lang/String;");
        mids$[mid_readUnsignedByte_54c6a179] = env->getMethodID(cls, "readUnsignedByte", "()I");
        mids$[mid_readUnsignedShort_54c6a179] = env->getMethodID(cls, "readUnsignedShort", "()I");
        mids$[mid_skipBytes_39c7bd23] = env->getMethodID(cls, "skipBytes", "(I)I");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    DataInputStream::DataInputStream(const ::java::io::InputStream & a0) : ::java::io::FilterInputStream(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

    jint DataInputStream::read(const JArray< jbyte > & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_read_49b4f134], a0.this$);
    }

    jint DataInputStream::read(const JArray< jbyte > & a0, jint a1, jint a2) const
    {
      return env->callIntMethod(this$, mids$[mid_read_86f44340], a0.this$, a1, a2);
    }

    jboolean DataInputStream::readBoolean() const
    {
      return env->callBooleanMethod(this$, mids$[mid_readBoolean_54c6a16a]);
    }

    jbyte DataInputStream::readByte() const
    {
      return env->callByteMethod(this$, mids$[mid_readByte_54c6a172]);
    }

    jchar DataInputStream::readChar() const
    {
      return env->callCharMethod(this$, mids$[mid_readChar_54c6a173]);
    }

    jdouble DataInputStream::readDouble() const
    {
      return env->callDoubleMethod(this$, mids$[mid_readDouble_54c6a174]);
    }

    jfloat DataInputStream::readFloat() const
    {
      return env->callFloatMethod(this$, mids$[mid_readFloat_54c6a176]);
    }

    void DataInputStream::readFully(const JArray< jbyte > & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_readFully_49b4f12b], a0.this$);
    }

    void DataInputStream::readFully(const JArray< jbyte > & a0, jint a1, jint a2) const
    {
      env->callVoidMethod(this$, mids$[mid_readFully_86f4435f], a0.this$, a1, a2);
    }

    jint DataInputStream::readInt() const
    {
      return env->callIntMethod(this$, mids$[mid_readInt_54c6a179]);
    }

    ::java::lang::String DataInputStream::readLine() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_readLine_14c7b5c5]));
    }

    jlong DataInputStream::readLong() const
    {
      return env->callLongMethod(this$, mids$[mid_readLong_54c6a17a]);
    }

    jshort DataInputStream::readShort() const
    {
      return env->callShortMethod(this$, mids$[mid_readShort_54c6a163]);
    }

    ::java::lang::String DataInputStream::readUTF() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_readUTF_14c7b5c5]));
    }

    ::java::lang::String DataInputStream::readUTF(const ::java::io::DataInput & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_readUTF_b3b10019], a0.this$));
    }

    jint DataInputStream::readUnsignedByte() const
    {
      return env->callIntMethod(this$, mids$[mid_readUnsignedByte_54c6a179]);
    }

    jint DataInputStream::readUnsignedShort() const
    {
      return env->callIntMethod(this$, mids$[mid_readUnsignedShort_54c6a179]);
    }

    jint DataInputStream::skipBytes(jint a0) const
    {
      return env->callIntMethod(this$, mids$[mid_skipBytes_39c7bd23], a0);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace io {
    static PyObject *t_DataInputStream_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_DataInputStream_instance_(PyTypeObject *type, PyObject *arg);
    static int t_DataInputStream_init_(t_DataInputStream *self, PyObject *args, PyObject *kwds);
    static PyObject *t_DataInputStream_read(t_DataInputStream *self, PyObject *args);
    static PyObject *t_DataInputStream_readBoolean(t_DataInputStream *self);
    static PyObject *t_DataInputStream_readByte(t_DataInputStream *self);
    static PyObject *t_DataInputStream_readChar(t_DataInputStream *self);
    static PyObject *t_DataInputStream_readDouble(t_DataInputStream *self);
    static PyObject *t_DataInputStream_readFloat(t_DataInputStream *self);
    static PyObject *t_DataInputStream_readFully(t_DataInputStream *self, PyObject *args);
    static PyObject *t_DataInputStream_readInt(t_DataInputStream *self);
    static PyObject *t_DataInputStream_readLine(t_DataInputStream *self);
    static PyObject *t_DataInputStream_readLong(t_DataInputStream *self);
    static PyObject *t_DataInputStream_readShort(t_DataInputStream *self);
    static PyObject *t_DataInputStream_readUTF(t_DataInputStream *self);
    static PyObject *t_DataInputStream_readUTF_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_DataInputStream_readUnsignedByte(t_DataInputStream *self);
    static PyObject *t_DataInputStream_readUnsignedShort(t_DataInputStream *self);
    static PyObject *t_DataInputStream_skipBytes(t_DataInputStream *self, PyObject *arg);

    static PyMethodDef t_DataInputStream__methods_[] = {
      DECLARE_METHOD(t_DataInputStream, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_DataInputStream, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_DataInputStream, read, METH_VARARGS),
      DECLARE_METHOD(t_DataInputStream, readBoolean, METH_NOARGS),
      DECLARE_METHOD(t_DataInputStream, readByte, METH_NOARGS),
      DECLARE_METHOD(t_DataInputStream, readChar, METH_NOARGS),
      DECLARE_METHOD(t_DataInputStream, readDouble, METH_NOARGS),
      DECLARE_METHOD(t_DataInputStream, readFloat, METH_NOARGS),
      DECLARE_METHOD(t_DataInputStream, readFully, METH_VARARGS),
      DECLARE_METHOD(t_DataInputStream, readInt, METH_NOARGS),
      DECLARE_METHOD(t_DataInputStream, readLine, METH_NOARGS),
      DECLARE_METHOD(t_DataInputStream, readLong, METH_NOARGS),
      DECLARE_METHOD(t_DataInputStream, readShort, METH_NOARGS),
      DECLARE_METHOD(t_DataInputStream, readUTF, METH_NOARGS),
      DECLARE_METHOD(t_DataInputStream, readUTF_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_DataInputStream, readUnsignedByte, METH_NOARGS),
      DECLARE_METHOD(t_DataInputStream, readUnsignedShort, METH_NOARGS),
      DECLARE_METHOD(t_DataInputStream, skipBytes, METH_O),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(DataInputStream, t_DataInputStream, ::java::io::FilterInputStream, DataInputStream, t_DataInputStream_init_, 0, 0, 0, 0, 0);

    void t_DataInputStream::install(PyObject *module)
    {
      installType(&PY_TYPE(DataInputStream), module, "DataInputStream", 0);
    }

    void t_DataInputStream::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(DataInputStream).tp_dict, "class_", make_descriptor(DataInputStream::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(DataInputStream).tp_dict, "wrapfn_", make_descriptor(t_DataInputStream::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(DataInputStream).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_DataInputStream_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, DataInputStream::initializeClass, 1)))
        return NULL;
      return t_DataInputStream::wrap_Object(DataInputStream(((t_DataInputStream *) arg)->object.this$));
    }
    static PyObject *t_DataInputStream_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, DataInputStream::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_DataInputStream_init_(t_DataInputStream *self, PyObject *args, PyObject *kwds)
    {
      ::java::io::InputStream a0((jobject) NULL);
      DataInputStream object((jobject) NULL);

      if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
      {
        INT_CALL(object = DataInputStream(a0));
        self->object = object;
      }
      else
      {
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_DataInputStream_read(t_DataInputStream *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          JArray< jbyte > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[B", &a0))
          {
            OBJ_CALL(result = self->object.read(a0));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 3:
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.read(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
      }

      return callSuper(&PY_TYPE(DataInputStream), (PyObject *) self, "read", args, 2);
    }

    static PyObject *t_DataInputStream_readBoolean(t_DataInputStream *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.readBoolean());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_DataInputStream_readByte(t_DataInputStream *self)
    {
      jbyte result;
      OBJ_CALL(result = self->object.readByte());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_DataInputStream_readChar(t_DataInputStream *self)
    {
      jchar result;
      OBJ_CALL(result = self->object.readChar());
      return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
    }

    static PyObject *t_DataInputStream_readDouble(t_DataInputStream *self)
    {
      jdouble result;
      OBJ_CALL(result = self->object.readDouble());
      return PyFloat_FromDouble((double) result);
    }

    static PyObject *t_DataInputStream_readFloat(t_DataInputStream *self)
    {
      jfloat result;
      OBJ_CALL(result = self->object.readFloat());
      return PyFloat_FromDouble((double) result);
    }

    static PyObject *t_DataInputStream_readFully(t_DataInputStream *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          JArray< jbyte > a0((jobject) NULL);

          if (!parseArgs(args, "[B", &a0))
          {
            OBJ_CALL(self->object.readFully(a0));
            Py_RETURN_NONE;
          }
        }
        break;
       case 3:
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.readFully(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "readFully", args);
      return NULL;
    }

    static PyObject *t_DataInputStream_readInt(t_DataInputStream *self)
    {
      jint result;
      OBJ_CALL(result = self->object.readInt());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_DataInputStream_readLine(t_DataInputStream *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.readLine());
      return j2p(result);
    }

    static PyObject *t_DataInputStream_readLong(t_DataInputStream *self)
    {
      jlong result;
      OBJ_CALL(result = self->object.readLong());
      return PyLong_FromLongLong((PY_LONG_LONG) result);
    }

    static PyObject *t_DataInputStream_readShort(t_DataInputStream *self)
    {
      jshort result;
      OBJ_CALL(result = self->object.readShort());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_DataInputStream_readUTF(t_DataInputStream *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.readUTF());
      return j2p(result);
    }

    static PyObject *t_DataInputStream_readUTF_(PyTypeObject *type, PyObject *arg)
    {
      ::java::io::DataInput a0((jobject) NULL);
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "k", ::java::io::DataInput::initializeClass, &a0))
      {
        OBJ_CALL(result = ::java::io::DataInputStream::readUTF(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "readUTF_", arg);
      return NULL;
    }

    static PyObject *t_DataInputStream_readUnsignedByte(t_DataInputStream *self)
    {
      jint result;
      OBJ_CALL(result = self->object.readUnsignedByte());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_DataInputStream_readUnsignedShort(t_DataInputStream *self)
    {
      jint result;
      OBJ_CALL(result = self->object.readUnsignedShort());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_DataInputStream_skipBytes(t_DataInputStream *self, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = self->object.skipBytes(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "skipBytes", arg);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/FieldInfosReader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/IOContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *FieldInfosReader::class$ = NULL;
        jmethodID *FieldInfosReader::mids$ = NULL;
        bool FieldInfosReader::live$ = false;

        jclass FieldInfosReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/FieldInfosReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_read_d7fc5981] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/index/FieldInfos;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::FieldInfos FieldInfosReader::read(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::org::apache::lucene::store::IOContext & a3) const
        {
          return ::org::apache::lucene::index::FieldInfos(env->callObjectMethod(this$, mids$[mid_read_d7fc5981], a0.this$, a1.this$, a2.this$, a3.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_FieldInfosReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInfosReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInfosReader_read(t_FieldInfosReader *self, PyObject *args);

        static PyMethodDef t_FieldInfosReader__methods_[] = {
          DECLARE_METHOD(t_FieldInfosReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfosReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfosReader, read, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldInfosReader, t_FieldInfosReader, ::java::lang::Object, FieldInfosReader, abstract_init, 0, 0, 0, 0, 0);

        void t_FieldInfosReader::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldInfosReader), module, "FieldInfosReader", 0);
        }

        void t_FieldInfosReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldInfosReader).tp_dict, "class_", make_descriptor(FieldInfosReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldInfosReader).tp_dict, "wrapfn_", make_descriptor(t_FieldInfosReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldInfosReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldInfosReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldInfosReader::initializeClass, 1)))
            return NULL;
          return t_FieldInfosReader::wrap_Object(FieldInfosReader(((t_FieldInfosReader *) arg)->object.this$));
        }
        static PyObject *t_FieldInfosReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldInfosReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldInfosReader_read(t_FieldInfosReader *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          ::org::apache::lucene::store::IOContext a3((jobject) NULL);
          ::org::apache::lucene::index::FieldInfos result((jobject) NULL);

          if (!parseArgs(args, "kssk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = self->object.read(a0, a1, a2, a3));
            return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "read", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/NumericFieldConfigListener.h"
#include "org/apache/lucene/queryparser/flexible/core/config/FieldConfigListener.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/config/FieldConfig.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {

              ::java::lang::Class *NumericFieldConfigListener::class$ = NULL;
              jmethodID *NumericFieldConfigListener::mids$ = NULL;
              bool NumericFieldConfigListener::live$ = false;

              jclass NumericFieldConfigListener::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/config/NumericFieldConfigListener");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_0b1f7132] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");
                  mids$[mid_buildFieldConfig_aaab7c6b] = env->getMethodID(cls, "buildFieldConfig", "(Lorg/apache/lucene/queryparser/flexible/core/config/FieldConfig;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              NumericFieldConfigListener::NumericFieldConfigListener(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_0b1f7132, a0.this$)) {}

              void NumericFieldConfigListener::buildFieldConfig(const ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_buildFieldConfig_aaab7c6b], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {
              static PyObject *t_NumericFieldConfigListener_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_NumericFieldConfigListener_instance_(PyTypeObject *type, PyObject *arg);
              static int t_NumericFieldConfigListener_init_(t_NumericFieldConfigListener *self, PyObject *args, PyObject *kwds);
              static PyObject *t_NumericFieldConfigListener_buildFieldConfig(t_NumericFieldConfigListener *self, PyObject *arg);

              static PyMethodDef t_NumericFieldConfigListener__methods_[] = {
                DECLARE_METHOD(t_NumericFieldConfigListener, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NumericFieldConfigListener, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NumericFieldConfigListener, buildFieldConfig, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(NumericFieldConfigListener, t_NumericFieldConfigListener, ::java::lang::Object, NumericFieldConfigListener, t_NumericFieldConfigListener_init_, 0, 0, 0, 0, 0);

              void t_NumericFieldConfigListener::install(PyObject *module)
              {
                installType(&PY_TYPE(NumericFieldConfigListener), module, "NumericFieldConfigListener", 0);
              }

              void t_NumericFieldConfigListener::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(NumericFieldConfigListener).tp_dict, "class_", make_descriptor(NumericFieldConfigListener::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(NumericFieldConfigListener).tp_dict, "wrapfn_", make_descriptor(t_NumericFieldConfigListener::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(NumericFieldConfigListener).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_NumericFieldConfigListener_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, NumericFieldConfigListener::initializeClass, 1)))
                  return NULL;
                return t_NumericFieldConfigListener::wrap_Object(NumericFieldConfigListener(((t_NumericFieldConfigListener *) arg)->object.this$));
              }
              static PyObject *t_NumericFieldConfigListener_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, NumericFieldConfigListener::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_NumericFieldConfigListener_init_(t_NumericFieldConfigListener *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);
                NumericFieldConfigListener object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                {
                  INT_CALL(object = NumericFieldConfigListener(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_NumericFieldConfigListener_buildFieldConfig(t_NumericFieldConfigListener *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.buildFieldConfig(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "buildFieldConfig", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/OrQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/surround/query/SrndQuery.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/surround/query/SpanNearClauseFactory.h"
#include "org/apache/lucene/queryparser/surround/query/BasicQueryFactory.h"
#include "org/apache/lucene/queryparser/surround/query/DistanceSubQuery.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *OrQuery::class$ = NULL;
            jmethodID *OrQuery::mids$ = NULL;
            bool OrQuery::live$ = false;

            jclass OrQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/OrQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_4136185e] = env->getMethodID(cls, "<init>", "(Ljava/util/List;ZLjava/lang/String;)V");
                mids$[mid_addSpanQueries_0564f431] = env->getMethodID(cls, "addSpanQueries", "(Lorg/apache/lucene/queryparser/surround/query/SpanNearClauseFactory;)V");
                mids$[mid_distanceSubQueryNotAllowed_14c7b5c5] = env->getMethodID(cls, "distanceSubQueryNotAllowed", "()Ljava/lang/String;");
                mids$[mid_makeLuceneQueryFieldNoBoost_1aaeee30] = env->getMethodID(cls, "makeLuceneQueryFieldNoBoost", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)Lorg/apache/lucene/search/Query;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            OrQuery::OrQuery(const ::java::util::List & a0, jboolean a1, const ::java::lang::String & a2) : ::org::apache::lucene::queryparser::surround::query::ComposedQuery(env->newObject(initializeClass, &mids$, mid_init$_4136185e, a0.this$, a1, a2.this$)) {}

            void OrQuery::addSpanQueries(const ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_addSpanQueries_0564f431], a0.this$);
            }

            ::java::lang::String OrQuery::distanceSubQueryNotAllowed() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_distanceSubQueryNotAllowed_14c7b5c5]));
            }

            ::org::apache::lucene::search::Query OrQuery::makeLuceneQueryFieldNoBoost(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a1) const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_makeLuceneQueryFieldNoBoost_1aaeee30], a0.this$, a1.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_OrQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_OrQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_OrQuery_init_(t_OrQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_OrQuery_addSpanQueries(t_OrQuery *self, PyObject *arg);
            static PyObject *t_OrQuery_distanceSubQueryNotAllowed(t_OrQuery *self);
            static PyObject *t_OrQuery_makeLuceneQueryFieldNoBoost(t_OrQuery *self, PyObject *args);

            static PyMethodDef t_OrQuery__methods_[] = {
              DECLARE_METHOD(t_OrQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_OrQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_OrQuery, addSpanQueries, METH_O),
              DECLARE_METHOD(t_OrQuery, distanceSubQueryNotAllowed, METH_NOARGS),
              DECLARE_METHOD(t_OrQuery, makeLuceneQueryFieldNoBoost, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(OrQuery, t_OrQuery, ::org::apache::lucene::queryparser::surround::query::ComposedQuery, OrQuery, t_OrQuery_init_, 0, 0, 0, 0, 0);

            void t_OrQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(OrQuery), module, "OrQuery", 0);
            }

            void t_OrQuery::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(OrQuery).tp_dict, "class_", make_descriptor(OrQuery::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(OrQuery).tp_dict, "wrapfn_", make_descriptor(t_OrQuery::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(OrQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_OrQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, OrQuery::initializeClass, 1)))
                return NULL;
              return t_OrQuery::wrap_Object(OrQuery(((t_OrQuery *) arg)->object.this$));
            }
            static PyObject *t_OrQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, OrQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_OrQuery_init_(t_OrQuery *self, PyObject *args, PyObject *kwds)
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              jboolean a1;
              ::java::lang::String a2((jobject) NULL);
              OrQuery object((jobject) NULL);

              if (!parseArgs(args, "KZs", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &a2))
              {
                INT_CALL(object = OrQuery(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_OrQuery_addSpanQueries(t_OrQuery *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory::initializeClass, &a0))
              {
                OBJ_CALL(self->object.addSpanQueries(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addSpanQueries", arg);
              return NULL;
            }

            static PyObject *t_OrQuery_distanceSubQueryNotAllowed(t_OrQuery *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.distanceSubQueryNotAllowed());
              return j2p(result);
            }

            static PyObject *t_OrQuery_makeLuceneQueryFieldNoBoost(t_OrQuery *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.makeLuceneQueryFieldNoBoost(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(OrQuery), (PyObject *) self, "makeLuceneQueryFieldNoBoost", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/PythonShortParser.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/Terms.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/search/FieldCache$ShortParser.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {

        ::java::lang::Class *PythonShortParser::class$ = NULL;
        jmethodID *PythonShortParser::mids$ = NULL;
        bool PythonShortParser::live$ = false;

        jclass PythonShortParser::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/search/PythonShortParser");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_parseShort_7bc03dc1] = env->getMethodID(cls, "parseShort", "(Lorg/apache/lucene/util/BytesRef;)S");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_termsEnum_fb3ac14e] = env->getMethodID(cls, "termsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonShortParser::PythonShortParser() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonShortParser::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonShortParser::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonShortParser::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        static PyObject *t_PythonShortParser_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonShortParser_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonShortParser_init_(t_PythonShortParser *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonShortParser_finalize(t_PythonShortParser *self);
        static PyObject *t_PythonShortParser_pythonExtension(t_PythonShortParser *self, PyObject *args);
        static jshort JNICALL t_PythonShortParser_parseShort0(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonShortParser_pythonDecRef1(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonShortParser_termsEnum2(JNIEnv *jenv, jobject jobj, jobject a0);
        static PyObject *t_PythonShortParser_get__self(t_PythonShortParser *self, void *data);
        static PyGetSetDef t_PythonShortParser__fields_[] = {
          DECLARE_GET_FIELD(t_PythonShortParser, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonShortParser__methods_[] = {
          DECLARE_METHOD(t_PythonShortParser, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonShortParser, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonShortParser, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonShortParser, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonShortParser, t_PythonShortParser, ::java::lang::Object, PythonShortParser, t_PythonShortParser_init_, 0, 0, t_PythonShortParser__fields_, 0, 0);

        void t_PythonShortParser::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonShortParser), module, "PythonShortParser", 1);
        }

        void t_PythonShortParser::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonShortParser).tp_dict, "class_", make_descriptor(PythonShortParser::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonShortParser).tp_dict, "wrapfn_", make_descriptor(t_PythonShortParser::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonShortParser).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonShortParser::initializeClass);
          JNINativeMethod methods[] = {
            { "parseShort", "(Lorg/apache/lucene/util/BytesRef;)S", (void *) t_PythonShortParser_parseShort0 },
            { "pythonDecRef", "()V", (void *) t_PythonShortParser_pythonDecRef1 },
            { "termsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;", (void *) t_PythonShortParser_termsEnum2 },
          };
          env->registerNatives(cls, methods, 3);
        }

        static PyObject *t_PythonShortParser_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonShortParser::initializeClass, 1)))
            return NULL;
          return t_PythonShortParser::wrap_Object(PythonShortParser(((t_PythonShortParser *) arg)->object.this$));
        }
        static PyObject *t_PythonShortParser_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonShortParser::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonShortParser_init_(t_PythonShortParser *self, PyObject *args, PyObject *kwds)
        {
          PythonShortParser object((jobject) NULL);

          INT_CALL(object = PythonShortParser());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonShortParser_finalize(t_PythonShortParser *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonShortParser_pythonExtension(t_PythonShortParser *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jshort JNICALL t_PythonShortParser_parseShort0(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonShortParser::mids$[PythonShortParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jshort value;
          PyObject *o0 = ::org::apache::lucene::util::t_BytesRef::wrap_Object(::org::apache::lucene::util::BytesRef(a0));
          PyObject *result = PyObject_CallMethod(obj, "parseShort", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "S", &value))
          {
            throwTypeError("parseShort", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jshort) 0;
        }

        static void JNICALL t_PythonShortParser_pythonDecRef1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonShortParser::mids$[PythonShortParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonShortParser::mids$[PythonShortParser::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static jobject JNICALL t_PythonShortParser_termsEnum2(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonShortParser::mids$[PythonShortParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::index::TermsEnum value((jobject) NULL);
          PyObject *o0 = ::org::apache::lucene::index::t_Terms::wrap_Object(::org::apache::lucene::index::Terms(a0));
          PyObject *result = PyObject_CallMethod(obj, "termsEnum", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &value))
          {
            throwTypeError("termsEnum", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static PyObject *t_PythonShortParser_get__self(t_PythonShortParser *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/WildcardQueryNode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/CloneNotSupportedException.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {

              ::java::lang::Class *WildcardQueryNode::class$ = NULL;
              jmethodID *WildcardQueryNode::mids$ = NULL;
              bool WildcardQueryNode::live$ = false;

              jclass WildcardQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/nodes/WildcardQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_ddeda85c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldQueryNode;)V");
                  mids$[mid_init$_ddd81d4e] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;II)V");
                  mids$[mid_cloneTree_3797a232] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/standard/nodes/WildcardQueryNode;");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              WildcardQueryNode::WildcardQueryNode(const ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode & a0) : ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode(env->newObject(initializeClass, &mids$, mid_init$_ddeda85c, a0.this$)) {}

              WildcardQueryNode::WildcardQueryNode(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1, jint a2, jint a3) : ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode(env->newObject(initializeClass, &mids$, mid_init$_ddd81d4e, a0.this$, a1.this$, a2, a3)) {}

              WildcardQueryNode WildcardQueryNode::cloneTree() const
              {
                return WildcardQueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_3797a232]));
              }

              ::java::lang::CharSequence WildcardQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String WildcardQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {
              static PyObject *t_WildcardQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_WildcardQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_WildcardQueryNode_init_(t_WildcardQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_WildcardQueryNode_cloneTree(t_WildcardQueryNode *self, PyObject *args);
              static PyObject *t_WildcardQueryNode_toQueryString(t_WildcardQueryNode *self, PyObject *args);
              static PyObject *t_WildcardQueryNode_toString(t_WildcardQueryNode *self, PyObject *args);

              static PyMethodDef t_WildcardQueryNode__methods_[] = {
                DECLARE_METHOD(t_WildcardQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_WildcardQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_WildcardQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_WildcardQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_WildcardQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(WildcardQueryNode, t_WildcardQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode, WildcardQueryNode, t_WildcardQueryNode_init_, 0, 0, 0, 0, 0);

              void t_WildcardQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(WildcardQueryNode), module, "WildcardQueryNode", 0);
              }

              void t_WildcardQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(WildcardQueryNode).tp_dict, "class_", make_descriptor(WildcardQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(WildcardQueryNode).tp_dict, "wrapfn_", make_descriptor(t_WildcardQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(WildcardQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_WildcardQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, WildcardQueryNode::initializeClass, 1)))
                  return NULL;
                return t_WildcardQueryNode::wrap_Object(WildcardQueryNode(((t_WildcardQueryNode *) arg)->object.this$));
              }
              static PyObject *t_WildcardQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, WildcardQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_WildcardQueryNode_init_(t_WildcardQueryNode *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode a0((jobject) NULL);
                    WildcardQueryNode object((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode::initializeClass, &a0))
                    {
                      INT_CALL(object = WildcardQueryNode(a0));
                      self->object = object;
                      break;
                    }
                  }
                  goto err;
                 case 4:
                  {
                    ::java::lang::CharSequence a0((jobject) NULL);
                    ::java::lang::CharSequence a1((jobject) NULL);
                    jint a2;
                    jint a3;
                    WildcardQueryNode object((jobject) NULL);

                    if (!parseArgs(args, "OOII", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2, &a3))
                    {
                      INT_CALL(object = WildcardQueryNode(a0, a1, a2, a3));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                 err:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_WildcardQueryNode_cloneTree(t_WildcardQueryNode *self, PyObject *args)
              {
                WildcardQueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return t_WildcardQueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(WildcardQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_WildcardQueryNode_toQueryString(t_WildcardQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(WildcardQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_WildcardQueryNode_toString(t_WildcardQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(WildcardQueryNode), (PyObject *) self, "toString", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/KeywordTokenizerFactory.h"
#include "org/apache/lucene/analysis/core/KeywordTokenizer.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *KeywordTokenizerFactory::class$ = NULL;
          jmethodID *KeywordTokenizerFactory::mids$ = NULL;
          bool KeywordTokenizerFactory::live$ = false;

          jclass KeywordTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/KeywordTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_4e6458a0] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/core/KeywordTokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KeywordTokenizerFactory::KeywordTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::core::KeywordTokenizer KeywordTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::core::KeywordTokenizer(env->callObjectMethod(this$, mids$[mid_create_4e6458a0], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_KeywordTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeywordTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KeywordTokenizerFactory_init_(t_KeywordTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KeywordTokenizerFactory_create(t_KeywordTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_KeywordTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_KeywordTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(KeywordTokenizerFactory, t_KeywordTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, KeywordTokenizerFactory, t_KeywordTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_KeywordTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(KeywordTokenizerFactory), module, "KeywordTokenizerFactory", 0);
          }

          void t_KeywordTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(KeywordTokenizerFactory).tp_dict, "class_", make_descriptor(KeywordTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(KeywordTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_KeywordTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(KeywordTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KeywordTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KeywordTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_KeywordTokenizerFactory::wrap_Object(KeywordTokenizerFactory(((t_KeywordTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_KeywordTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KeywordTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KeywordTokenizerFactory_init_(t_KeywordTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            KeywordTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = KeywordTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_KeywordTokenizerFactory_create(t_KeywordTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::core::KeywordTokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::core::t_KeywordTokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(KeywordTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/Util.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "org/apache/lucene/util/fst/FST$BytesReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/fst/Util$TopResults.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/fst/FST$Arc.h"
#include "java/io/Writer.h"
#include "java/lang/Long.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *Util::class$ = NULL;
          jmethodID *Util::mids$ = NULL;
          bool Util::live$ = false;

          jclass Util::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/Util");

              mids$ = new jmethodID[max_mid];
              mids$[mid_get_4f30bf3f] = env->getStaticMethodID(cls, "get", "(Lorg/apache/lucene/util/fst/FST;Lorg/apache/lucene/util/IntsRef;)Ljava/lang/Object;");
              mids$[mid_get_6697be43] = env->getStaticMethodID(cls, "get", "(Lorg/apache/lucene/util/fst/FST;Lorg/apache/lucene/util/BytesRef;)Ljava/lang/Object;");
              mids$[mid_getByOutput_40734dd8] = env->getStaticMethodID(cls, "getByOutput", "(Lorg/apache/lucene/util/fst/FST;J)Lorg/apache/lucene/util/IntsRef;");
              mids$[mid_getByOutput_6ff1a968] = env->getStaticMethodID(cls, "getByOutput", "(Lorg/apache/lucene/util/fst/FST;JLorg/apache/lucene/util/fst/FST$BytesReader;Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/IntsRef;");
              mids$[mid_readCeilArc_3a8e72bb] = env->getStaticMethodID(cls, "readCeilArc", "(ILorg/apache/lucene/util/fst/FST;Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$BytesReader;)Lorg/apache/lucene/util/fst/FST$Arc;");
              mids$[mid_shortestPaths_7b374667] = env->getStaticMethodID(cls, "shortestPaths", "(Lorg/apache/lucene/util/fst/FST;Lorg/apache/lucene/util/fst/FST$Arc;Ljava/lang/Object;Ljava/util/Comparator;IZ)Lorg/apache/lucene/util/fst/Util$TopResults;");
              mids$[mid_toBytesRef_27bd6535] = env->getStaticMethodID(cls, "toBytesRef", "(Lorg/apache/lucene/util/IntsRef;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_toDot_53893198] = env->getStaticMethodID(cls, "toDot", "(Lorg/apache/lucene/util/fst/FST;Ljava/io/Writer;ZZ)V");
              mids$[mid_toIntsRef_9ff62e61] = env->getStaticMethodID(cls, "toIntsRef", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/IntsRef;");
              mids$[mid_toUTF16_2efa4e73] = env->getStaticMethodID(cls, "toUTF16", "(Ljava/lang/CharSequence;Lorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/IntsRef;");
              mids$[mid_toUTF32_2efa4e73] = env->getStaticMethodID(cls, "toUTF32", "(Ljava/lang/CharSequence;Lorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/IntsRef;");
              mids$[mid_toUTF32_78db5d6f] = env->getStaticMethodID(cls, "toUTF32", "([CIILorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/IntsRef;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::Object Util::get(const ::org::apache::lucene::util::fst::FST & a0, const ::org::apache::lucene::util::IntsRef & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::Object(env->callStaticObjectMethod(cls, mids$[mid_get_4f30bf3f], a0.this$, a1.this$));
          }

          ::java::lang::Object Util::get(const ::org::apache::lucene::util::fst::FST & a0, const ::org::apache::lucene::util::BytesRef & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::Object(env->callStaticObjectMethod(cls, mids$[mid_get_6697be43], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::IntsRef Util::getByOutput(const ::org::apache::lucene::util::fst::FST & a0, jlong a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::IntsRef(env->callStaticObjectMethod(cls, mids$[mid_getByOutput_40734dd8], a0.this$, a1));
          }

          ::org::apache::lucene::util::IntsRef Util::getByOutput(const ::org::apache::lucene::util::fst::FST & a0, jlong a1, const ::org::apache::lucene::util::fst::FST$BytesReader & a2, const ::org::apache::lucene::util::fst::FST$Arc & a3, const ::org::apache::lucene::util::fst::FST$Arc & a4, const ::org::apache::lucene::util::IntsRef & a5)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::IntsRef(env->callStaticObjectMethod(cls, mids$[mid_getByOutput_6ff1a968], a0.this$, a1, a2.this$, a3.this$, a4.this$, a5.this$));
          }

          ::org::apache::lucene::util::fst::FST$Arc Util::readCeilArc(jint a0, const ::org::apache::lucene::util::fst::FST & a1, const ::org::apache::lucene::util::fst::FST$Arc & a2, const ::org::apache::lucene::util::fst::FST$Arc & a3, const ::org::apache::lucene::util::fst::FST$BytesReader & a4)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::fst::FST$Arc(env->callStaticObjectMethod(cls, mids$[mid_readCeilArc_3a8e72bb], a0, a1.this$, a2.this$, a3.this$, a4.this$));
          }

          ::org::apache::lucene::util::fst::Util$TopResults Util::shortestPaths(const ::org::apache::lucene::util::fst::FST & a0, const ::org::apache::lucene::util::fst::FST$Arc & a1, const ::java::lang::Object & a2, const ::java::util::Comparator & a3, jint a4, jboolean a5)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::fst::Util$TopResults(env->callStaticObjectMethod(cls, mids$[mid_shortestPaths_7b374667], a0.this$, a1.this$, a2.this$, a3.this$, a4, a5));
          }

          ::org::apache::lucene::util::BytesRef Util::toBytesRef(const ::org::apache::lucene::util::IntsRef & a0, const ::org::apache::lucene::util::BytesRef & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::BytesRef(env->callStaticObjectMethod(cls, mids$[mid_toBytesRef_27bd6535], a0.this$, a1.this$));
          }

          void Util::toDot(const ::org::apache::lucene::util::fst::FST & a0, const ::java::io::Writer & a1, jboolean a2, jboolean a3)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_toDot_53893198], a0.this$, a1.this$, a2, a3);
          }

          ::org::apache::lucene::util::IntsRef Util::toIntsRef(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::IntsRef & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::IntsRef(env->callStaticObjectMethod(cls, mids$[mid_toIntsRef_9ff62e61], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::IntsRef Util::toUTF16(const ::java::lang::CharSequence & a0, const ::org::apache::lucene::util::IntsRef & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::IntsRef(env->callStaticObjectMethod(cls, mids$[mid_toUTF16_2efa4e73], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::IntsRef Util::toUTF32(const ::java::lang::CharSequence & a0, const ::org::apache::lucene::util::IntsRef & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::IntsRef(env->callStaticObjectMethod(cls, mids$[mid_toUTF32_2efa4e73], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::IntsRef Util::toUTF32(const JArray< jchar > & a0, jint a1, jint a2, const ::org::apache::lucene::util::IntsRef & a3)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::IntsRef(env->callStaticObjectMethod(cls, mids$[mid_toUTF32_78db5d6f], a0.this$, a1, a2, a3.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/fst/Util$Result.h"
#include "org/apache/lucene/util/fst/Util$TopNSearcher.h"
#include "org/apache/lucene/util/fst/Util$FSTPath.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_Util_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Util_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Util_get(PyTypeObject *type, PyObject *args);
          static PyObject *t_Util_getByOutput(PyTypeObject *type, PyObject *args);
          static PyObject *t_Util_readCeilArc(PyTypeObject *type, PyObject *args);
          static PyObject *t_Util_shortestPaths(PyTypeObject *type, PyObject *args);
          static PyObject *t_Util_toBytesRef(PyTypeObject *type, PyObject *args);
          static PyObject *t_Util_toDot(PyTypeObject *type, PyObject *args);
          static PyObject *t_Util_toIntsRef(PyTypeObject *type, PyObject *args);
          static PyObject *t_Util_toUTF16(PyTypeObject *type, PyObject *args);
          static PyObject *t_Util_toUTF32(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_Util__methods_[] = {
            DECLARE_METHOD(t_Util, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Util, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Util, get, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Util, getByOutput, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Util, readCeilArc, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Util, shortestPaths, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Util, toBytesRef, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Util, toDot, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Util, toIntsRef, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Util, toUTF16, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Util, toUTF32, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Util, t_Util, ::java::lang::Object, Util, abstract_init, 0, 0, 0, 0, 0);

          void t_Util::install(PyObject *module)
          {
            installType(&PY_TYPE(Util), module, "Util", 0);
            PyDict_SetItemString(PY_TYPE(Util).tp_dict, "TopResults", make_descriptor(&PY_TYPE(Util$TopResults)));
            PyDict_SetItemString(PY_TYPE(Util).tp_dict, "Result", make_descriptor(&PY_TYPE(Util$Result)));
            PyDict_SetItemString(PY_TYPE(Util).tp_dict, "TopNSearcher", make_descriptor(&PY_TYPE(Util$TopNSearcher)));
            PyDict_SetItemString(PY_TYPE(Util).tp_dict, "FSTPath", make_descriptor(&PY_TYPE(Util$FSTPath)));
          }

          void t_Util::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Util).tp_dict, "class_", make_descriptor(Util::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Util).tp_dict, "wrapfn_", make_descriptor(t_Util::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Util).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Util_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Util::initializeClass, 1)))
              return NULL;
            return t_Util::wrap_Object(Util(((t_Util *) arg)->object.this$));
          }
          static PyObject *t_Util_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Util::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Util_get(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::IntsRef a1((jobject) NULL);
                ::java::lang::Object result((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::fst::FST::initializeClass, ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::fst::Util::get(a0, a1));
                  return p0 != NULL && p0[0] != NULL ? wrapType(p0[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
                }
              }
              {
                ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
                ::java::lang::Object result((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::fst::FST::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::fst::Util::get(a0, a1));
                  return p0 != NULL && p0[0] != NULL ? wrapType(p0[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "get", args);
            return NULL;
          }

          static PyObject *t_Util_getByOutput(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
                PyTypeObject **p0;
                jlong a1;
                ::org::apache::lucene::util::IntsRef result((jobject) NULL);

                if (!parseArgs(args, "KJ", ::org::apache::lucene::util::fst::FST::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::fst::Util::getByOutput(a0, a1));
                  return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
                }
              }
              break;
             case 6:
              {
                ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
                PyTypeObject **p0;
                jlong a1;
                ::org::apache::lucene::util::fst::FST$BytesReader a2((jobject) NULL);
                PyTypeObject **p2;
                ::org::apache::lucene::util::fst::FST$Arc a3((jobject) NULL);
                PyTypeObject **p3;
                ::org::apache::lucene::util::fst::FST$Arc a4((jobject) NULL);
                PyTypeObject **p4;
                ::org::apache::lucene::util::IntsRef a5((jobject) NULL);
                ::org::apache::lucene::util::IntsRef result((jobject) NULL);

                if (!parseArgs(args, "KJKKKk", ::org::apache::lucene::util::fst::FST::initializeClass, ::org::apache::lucene::util::fst::FST$BytesReader::initializeClass, ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_, &a1, &a2, &p2, ::org::apache::lucene::util::fst::t_FST$BytesReader::parameters_, &a3, &p3, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a4, &p4, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a5))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::fst::Util::getByOutput(a0, a1, a2, a3, a4, a5));
                  return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "getByOutput", args);
            return NULL;
          }

          static PyObject *t_Util_readCeilArc(PyTypeObject *type, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::util::fst::FST a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::util::fst::FST$Arc a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::util::fst::FST$Arc a3((jobject) NULL);
            PyTypeObject **p3;
            ::org::apache::lucene::util::fst::FST$BytesReader a4((jobject) NULL);
            PyTypeObject **p4;
            ::org::apache::lucene::util::fst::FST$Arc result((jobject) NULL);

            if (!parseArgs(args, "IKKKK", ::org::apache::lucene::util::fst::FST::initializeClass, ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$BytesReader::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::fst::t_FST::parameters_, &a2, &p2, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a3, &p3, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a4, &p4, ::org::apache::lucene::util::fst::t_FST$BytesReader::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::fst::Util::readCeilArc(a0, a1, a2, a3, a4));
              return ::org::apache::lucene::util::fst::t_FST$Arc::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "readCeilArc", args);
            return NULL;
          }

          static PyObject *t_Util_shortestPaths(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::fst::FST$Arc a1((jobject) NULL);
            PyTypeObject **p1;
            ::java::lang::Object a2((jobject) NULL);
            ::java::util::Comparator a3((jobject) NULL);
            PyTypeObject **p3;
            jint a4;
            jboolean a5;
            ::org::apache::lucene::util::fst::Util$TopResults result((jobject) NULL);

            if (!parseArgs(args, "KKoKIZ", ::org::apache::lucene::util::fst::FST::initializeClass, ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::java::util::Comparator::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_, &a1, &p1, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a2, &a3, &p3, ::java::util::t_Comparator::parameters_, &a4, &a5))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::fst::Util::shortestPaths(a0, a1, a2, a3, a4, a5));
              return ::org::apache::lucene::util::fst::t_Util$TopResults::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "shortestPaths", args);
            return NULL;
          }

          static PyObject *t_Util_toBytesRef(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
            ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::IntsRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::fst::Util::toBytesRef(a0, a1));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "toBytesRef", args);
            return NULL;
          }

          static PyObject *t_Util_toDot(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::io::Writer a1((jobject) NULL);
            jboolean a2;
            jboolean a3;

            if (!parseArgs(args, "KkZZ", ::org::apache::lucene::util::fst::FST::initializeClass, ::java::io::Writer::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_, &a1, &a2, &a3))
            {
              OBJ_CALL(::org::apache::lucene::util::fst::Util::toDot(a0, a1, a2, a3));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "toDot", args);
            return NULL;
          }

          static PyObject *t_Util_toIntsRef(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::util::IntsRef a1((jobject) NULL);
            ::org::apache::lucene::util::IntsRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::fst::Util::toIntsRef(a0, a1));
              return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "toIntsRef", args);
            return NULL;
          }

          static PyObject *t_Util_toUTF16(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::CharSequence a0((jobject) NULL);
            ::org::apache::lucene::util::IntsRef a1((jobject) NULL);
            ::org::apache::lucene::util::IntsRef result((jobject) NULL);

            if (!parseArgs(args, "Ok", &::java::lang::PY_TYPE(CharSequence), ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::fst::Util::toUTF16(a0, a1));
              return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "toUTF16", args);
            return NULL;
          }

          static PyObject *t_Util_toUTF32(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::org::apache::lucene::util::IntsRef a1((jobject) NULL);
                ::org::apache::lucene::util::IntsRef result((jobject) NULL);

                if (!parseArgs(args, "Ok", &::java::lang::PY_TYPE(CharSequence), ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::fst::Util::toUTF32(a0, a1));
                  return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
                }
              }
              break;
             case 4:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;
                ::org::apache::lucene::util::IntsRef a3((jobject) NULL);
                ::org::apache::lucene::util::IntsRef result((jobject) NULL);

                if (!parseArgs(args, "[CIIk", ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::fst::Util::toUTF32(a0, a1, a2, a3));
                  return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "toUTF32", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/TokenStreamFromTermPositionVector.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/Terms.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *TokenStreamFromTermPositionVector::class$ = NULL;
          jmethodID *TokenStreamFromTermPositionVector::mids$ = NULL;
          bool TokenStreamFromTermPositionVector::live$ = false;

          jclass TokenStreamFromTermPositionVector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/TokenStreamFromTermPositionVector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d0b7bb17] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Terms;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TokenStreamFromTermPositionVector::TokenStreamFromTermPositionVector(const ::org::apache::lucene::index::Terms & a0) : ::org::apache::lucene::analysis::TokenStream(env->newObject(initializeClass, &mids$, mid_init$_d0b7bb17, a0.this$)) {}

          jboolean TokenStreamFromTermPositionVector::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void TokenStreamFromTermPositionVector::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_TokenStreamFromTermPositionVector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenStreamFromTermPositionVector_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TokenStreamFromTermPositionVector_init_(t_TokenStreamFromTermPositionVector *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TokenStreamFromTermPositionVector_incrementToken(t_TokenStreamFromTermPositionVector *self, PyObject *args);
          static PyObject *t_TokenStreamFromTermPositionVector_reset(t_TokenStreamFromTermPositionVector *self, PyObject *args);

          static PyMethodDef t_TokenStreamFromTermPositionVector__methods_[] = {
            DECLARE_METHOD(t_TokenStreamFromTermPositionVector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenStreamFromTermPositionVector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenStreamFromTermPositionVector, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_TokenStreamFromTermPositionVector, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TokenStreamFromTermPositionVector, t_TokenStreamFromTermPositionVector, ::org::apache::lucene::analysis::TokenStream, TokenStreamFromTermPositionVector, t_TokenStreamFromTermPositionVector_init_, 0, 0, 0, 0, 0);

          void t_TokenStreamFromTermPositionVector::install(PyObject *module)
          {
            installType(&PY_TYPE(TokenStreamFromTermPositionVector), module, "TokenStreamFromTermPositionVector", 0);
          }

          void t_TokenStreamFromTermPositionVector::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TokenStreamFromTermPositionVector).tp_dict, "class_", make_descriptor(TokenStreamFromTermPositionVector::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TokenStreamFromTermPositionVector).tp_dict, "wrapfn_", make_descriptor(t_TokenStreamFromTermPositionVector::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TokenStreamFromTermPositionVector).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TokenStreamFromTermPositionVector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TokenStreamFromTermPositionVector::initializeClass, 1)))
              return NULL;
            return t_TokenStreamFromTermPositionVector::wrap_Object(TokenStreamFromTermPositionVector(((t_TokenStreamFromTermPositionVector *) arg)->object.this$));
          }
          static PyObject *t_TokenStreamFromTermPositionVector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TokenStreamFromTermPositionVector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TokenStreamFromTermPositionVector_init_(t_TokenStreamFromTermPositionVector *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::Terms a0((jobject) NULL);
            TokenStreamFromTermPositionVector object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::Terms::initializeClass, &a0))
            {
              INT_CALL(object = TokenStreamFromTermPositionVector(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TokenStreamFromTermPositionVector_incrementToken(t_TokenStreamFromTermPositionVector *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TokenStreamFromTermPositionVector), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_TokenStreamFromTermPositionVector_reset(t_TokenStreamFromTermPositionVector *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(TokenStreamFromTermPositionVector), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/SimpleHTMLFormatter.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/highlight/Formatter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/highlight/TokenGroup.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *SimpleHTMLFormatter::class$ = NULL;
          jmethodID *SimpleHTMLFormatter::mids$ = NULL;
          bool SimpleHTMLFormatter::live$ = false;

          jclass SimpleHTMLFormatter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/SimpleHTMLFormatter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_4a264742] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_highlightTerm_8838cc58] = env->getMethodID(cls, "highlightTerm", "(Ljava/lang/String;Lorg/apache/lucene/search/highlight/TokenGroup;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleHTMLFormatter::SimpleHTMLFormatter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          SimpleHTMLFormatter::SimpleHTMLFormatter(const ::java::lang::String & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4a264742, a0.this$, a1.this$)) {}

          ::java::lang::String SimpleHTMLFormatter::highlightTerm(const ::java::lang::String & a0, const ::org::apache::lucene::search::highlight::TokenGroup & a1) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_highlightTerm_8838cc58], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_SimpleHTMLFormatter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleHTMLFormatter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleHTMLFormatter_init_(t_SimpleHTMLFormatter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleHTMLFormatter_highlightTerm(t_SimpleHTMLFormatter *self, PyObject *args);

          static PyMethodDef t_SimpleHTMLFormatter__methods_[] = {
            DECLARE_METHOD(t_SimpleHTMLFormatter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleHTMLFormatter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleHTMLFormatter, highlightTerm, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SimpleHTMLFormatter, t_SimpleHTMLFormatter, ::java::lang::Object, SimpleHTMLFormatter, t_SimpleHTMLFormatter_init_, 0, 0, 0, 0, 0);

          void t_SimpleHTMLFormatter::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleHTMLFormatter), module, "SimpleHTMLFormatter", 0);
          }

          void t_SimpleHTMLFormatter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SimpleHTMLFormatter).tp_dict, "class_", make_descriptor(SimpleHTMLFormatter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SimpleHTMLFormatter).tp_dict, "wrapfn_", make_descriptor(t_SimpleHTMLFormatter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SimpleHTMLFormatter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimpleHTMLFormatter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleHTMLFormatter::initializeClass, 1)))
              return NULL;
            return t_SimpleHTMLFormatter::wrap_Object(SimpleHTMLFormatter(((t_SimpleHTMLFormatter *) arg)->object.this$));
          }
          static PyObject *t_SimpleHTMLFormatter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleHTMLFormatter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleHTMLFormatter_init_(t_SimpleHTMLFormatter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                SimpleHTMLFormatter object((jobject) NULL);

                INT_CALL(object = SimpleHTMLFormatter());
                self->object = object;
                break;
              }
              goto err;
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                SimpleHTMLFormatter object((jobject) NULL);

                if (!parseArgs(args, "ss", &a0, &a1))
                {
                  INT_CALL(object = SimpleHTMLFormatter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SimpleHTMLFormatter_highlightTerm(t_SimpleHTMLFormatter *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::highlight::TokenGroup a1((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::search::highlight::TokenGroup::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.highlightTerm(a0, a1));
              return j2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "highlightTerm", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/RandomAccessInput.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *RandomAccessInput::class$ = NULL;
        jmethodID *RandomAccessInput::mids$ = NULL;
        bool RandomAccessInput::live$ = false;

        jclass RandomAccessInput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/RandomAccessInput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_readByte_0ee6df3b] = env->getMethodID(cls, "readByte", "(J)B");
            mids$[mid_readInt_0ee6df30] = env->getMethodID(cls, "readInt", "(J)I");
            mids$[mid_readLong_0ee6df33] = env->getMethodID(cls, "readLong", "(J)J");
            mids$[mid_readShort_0ee6df2a] = env->getMethodID(cls, "readShort", "(J)S");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jbyte RandomAccessInput::readByte(jlong a0) const
        {
          return env->callByteMethod(this$, mids$[mid_readByte_0ee6df3b], a0);
        }

        jint RandomAccessInput::readInt(jlong a0) const
        {
          return env->callIntMethod(this$, mids$[mid_readInt_0ee6df30], a0);
        }

        jlong RandomAccessInput::readLong(jlong a0) const
        {
          return env->callLongMethod(this$, mids$[mid_readLong_0ee6df33], a0);
        }

        jshort RandomAccessInput::readShort(jlong a0) const
        {
          return env->callShortMethod(this$, mids$[mid_readShort_0ee6df2a], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_RandomAccessInput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RandomAccessInput_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RandomAccessInput_readByte(t_RandomAccessInput *self, PyObject *arg);
        static PyObject *t_RandomAccessInput_readInt(t_RandomAccessInput *self, PyObject *arg);
        static PyObject *t_RandomAccessInput_readLong(t_RandomAccessInput *self, PyObject *arg);
        static PyObject *t_RandomAccessInput_readShort(t_RandomAccessInput *self, PyObject *arg);

        static PyMethodDef t_RandomAccessInput__methods_[] = {
          DECLARE_METHOD(t_RandomAccessInput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RandomAccessInput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RandomAccessInput, readByte, METH_O),
          DECLARE_METHOD(t_RandomAccessInput, readInt, METH_O),
          DECLARE_METHOD(t_RandomAccessInput, readLong, METH_O),
          DECLARE_METHOD(t_RandomAccessInput, readShort, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RandomAccessInput, t_RandomAccessInput, ::java::lang::Object, RandomAccessInput, abstract_init, 0, 0, 0, 0, 0);

        void t_RandomAccessInput::install(PyObject *module)
        {
          installType(&PY_TYPE(RandomAccessInput), module, "RandomAccessInput", 0);
        }

        void t_RandomAccessInput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RandomAccessInput).tp_dict, "class_", make_descriptor(RandomAccessInput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RandomAccessInput).tp_dict, "wrapfn_", make_descriptor(t_RandomAccessInput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RandomAccessInput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RandomAccessInput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RandomAccessInput::initializeClass, 1)))
            return NULL;
          return t_RandomAccessInput::wrap_Object(RandomAccessInput(((t_RandomAccessInput *) arg)->object.this$));
        }
        static PyObject *t_RandomAccessInput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RandomAccessInput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_RandomAccessInput_readByte(t_RandomAccessInput *self, PyObject *arg)
        {
          jlong a0;
          jbyte result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.readByte(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "readByte", arg);
          return NULL;
        }

        static PyObject *t_RandomAccessInput_readInt(t_RandomAccessInput *self, PyObject *arg)
        {
          jlong a0;
          jint result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.readInt(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "readInt", arg);
          return NULL;
        }

        static PyObject *t_RandomAccessInput_readLong(t_RandomAccessInput *self, PyObject *arg)
        {
          jlong a0;
          jlong result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.readLong(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "readLong", arg);
          return NULL;
        }

        static PyObject *t_RandomAccessInput_readShort(t_RandomAccessInput *self, PyObject *arg)
        {
          jlong a0;
          jshort result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.readShort(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "readShort", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/codecs/BlockTermState.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene41 {

          ::java::lang::Class *Lucene41PostingsWriter::class$ = NULL;
          jmethodID *Lucene41PostingsWriter::mids$ = NULL;
          bool Lucene41PostingsWriter::live$ = false;

          jclass Lucene41PostingsWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_3be9bed9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/SegmentWriteState;)V");
              mids$[mid_init$_a7564e76] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/SegmentWriteState;F)V");
              mids$[mid_addPosition_d481f39e] = env->getMethodID(cls, "addPosition", "(ILorg/apache/lucene/util/BytesRef;II)V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_encodeTerm_1ec2f80c] = env->getMethodID(cls, "encodeTerm", "([JLorg/apache/lucene/store/DataOutput;Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/BlockTermState;Z)V");
              mids$[mid_finishDoc_54c6a166] = env->getMethodID(cls, "finishDoc", "()V");
              mids$[mid_finishTerm_47bdc871] = env->getMethodID(cls, "finishTerm", "(Lorg/apache/lucene/codecs/BlockTermState;)V");
              mids$[mid_init_faad620a] = env->getMethodID(cls, "init", "(Lorg/apache/lucene/store/IndexOutput;)V");
              mids$[mid_setField_5f0ccd17] = env->getMethodID(cls, "setField", "(Lorg/apache/lucene/index/FieldInfo;)I");
              mids$[mid_startDoc_d8d154a6] = env->getMethodID(cls, "startDoc", "(II)V");
              mids$[mid_startTerm_54c6a166] = env->getMethodID(cls, "startTerm", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene41PostingsWriter::Lucene41PostingsWriter(const ::org::apache::lucene::index::SegmentWriteState & a0) : ::org::apache::lucene::codecs::PostingsWriterBase(env->newObject(initializeClass, &mids$, mid_init$_3be9bed9, a0.this$)) {}

          Lucene41PostingsWriter::Lucene41PostingsWriter(const ::org::apache::lucene::index::SegmentWriteState & a0, jfloat a1) : ::org::apache::lucene::codecs::PostingsWriterBase(env->newObject(initializeClass, &mids$, mid_init$_a7564e76, a0.this$, a1)) {}

          void Lucene41PostingsWriter::addPosition(jint a0, const ::org::apache::lucene::util::BytesRef & a1, jint a2, jint a3) const
          {
            env->callVoidMethod(this$, mids$[mid_addPosition_d481f39e], a0, a1.this$, a2, a3);
          }

          void Lucene41PostingsWriter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          void Lucene41PostingsWriter::encodeTerm(const JArray< jlong > & a0, const ::org::apache::lucene::store::DataOutput & a1, const ::org::apache::lucene::index::FieldInfo & a2, const ::org::apache::lucene::codecs::BlockTermState & a3, jboolean a4) const
          {
            env->callVoidMethod(this$, mids$[mid_encodeTerm_1ec2f80c], a0.this$, a1.this$, a2.this$, a3.this$, a4);
          }

          void Lucene41PostingsWriter::finishDoc() const
          {
            env->callVoidMethod(this$, mids$[mid_finishDoc_54c6a166]);
          }

          void Lucene41PostingsWriter::finishTerm(const ::org::apache::lucene::codecs::BlockTermState & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_finishTerm_47bdc871], a0.this$);
          }

          void Lucene41PostingsWriter::init(const ::org::apache::lucene::store::IndexOutput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_init_faad620a], a0.this$);
          }

          jint Lucene41PostingsWriter::setField(const ::org::apache::lucene::index::FieldInfo & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_setField_5f0ccd17], a0.this$);
          }

          void Lucene41PostingsWriter::startDoc(jint a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_startDoc_d8d154a6], a0, a1);
          }

          void Lucene41PostingsWriter::startTerm() const
          {
            env->callVoidMethod(this$, mids$[mid_startTerm_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene41 {
          static PyObject *t_Lucene41PostingsWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene41PostingsWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene41PostingsWriter_init_(t_Lucene41PostingsWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene41PostingsWriter_addPosition(t_Lucene41PostingsWriter *self, PyObject *args);
          static PyObject *t_Lucene41PostingsWriter_close(t_Lucene41PostingsWriter *self, PyObject *args);
          static PyObject *t_Lucene41PostingsWriter_encodeTerm(t_Lucene41PostingsWriter *self, PyObject *args);
          static PyObject *t_Lucene41PostingsWriter_finishDoc(t_Lucene41PostingsWriter *self, PyObject *args);
          static PyObject *t_Lucene41PostingsWriter_finishTerm(t_Lucene41PostingsWriter *self, PyObject *args);
          static PyObject *t_Lucene41PostingsWriter_init(t_Lucene41PostingsWriter *self, PyObject *args);
          static PyObject *t_Lucene41PostingsWriter_setField(t_Lucene41PostingsWriter *self, PyObject *args);
          static PyObject *t_Lucene41PostingsWriter_startDoc(t_Lucene41PostingsWriter *self, PyObject *args);
          static PyObject *t_Lucene41PostingsWriter_startTerm(t_Lucene41PostingsWriter *self, PyObject *args);
          static int t_Lucene41PostingsWriter_set__field(t_Lucene41PostingsWriter *self, PyObject *arg, void *data);
          static PyGetSetDef t_Lucene41PostingsWriter__fields_[] = {
            DECLARE_SET_FIELD(t_Lucene41PostingsWriter, field),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lucene41PostingsWriter__methods_[] = {
            DECLARE_METHOD(t_Lucene41PostingsWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene41PostingsWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene41PostingsWriter, addPosition, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsWriter, close, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsWriter, encodeTerm, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsWriter, finishDoc, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsWriter, finishTerm, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsWriter, init, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsWriter, setField, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsWriter, startDoc, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsWriter, startTerm, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene41PostingsWriter, t_Lucene41PostingsWriter, ::org::apache::lucene::codecs::PostingsWriterBase, Lucene41PostingsWriter, t_Lucene41PostingsWriter_init_, 0, 0, t_Lucene41PostingsWriter__fields_, 0, 0);

          void t_Lucene41PostingsWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene41PostingsWriter), module, "Lucene41PostingsWriter", 0);
          }

          void t_Lucene41PostingsWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsWriter).tp_dict, "class_", make_descriptor(Lucene41PostingsWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsWriter).tp_dict, "wrapfn_", make_descriptor(t_Lucene41PostingsWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene41PostingsWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene41PostingsWriter::initializeClass, 1)))
              return NULL;
            return t_Lucene41PostingsWriter::wrap_Object(Lucene41PostingsWriter(((t_Lucene41PostingsWriter *) arg)->object.this$));
          }
          static PyObject *t_Lucene41PostingsWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene41PostingsWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene41PostingsWriter_init_(t_Lucene41PostingsWriter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
                Lucene41PostingsWriter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
                {
                  INT_CALL(object = Lucene41PostingsWriter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
                jfloat a1;
                Lucene41PostingsWriter object((jobject) NULL);

                if (!parseArgs(args, "kF", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = Lucene41PostingsWriter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene41PostingsWriter_addPosition(t_Lucene41PostingsWriter *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
            jint a2;
            jint a3;

            if (!parseArgs(args, "IkII", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(self->object.addPosition(a0, a1, a2, a3));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene41PostingsWriter), (PyObject *) self, "addPosition", args, 2);
          }

          static PyObject *t_Lucene41PostingsWriter_close(t_Lucene41PostingsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene41PostingsWriter), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_Lucene41PostingsWriter_encodeTerm(t_Lucene41PostingsWriter *self, PyObject *args)
          {
            JArray< jlong > a0((jobject) NULL);
            ::org::apache::lucene::store::DataOutput a1((jobject) NULL);
            ::org::apache::lucene::index::FieldInfo a2((jobject) NULL);
            ::org::apache::lucene::codecs::BlockTermState a3((jobject) NULL);
            jboolean a4;

            if (!parseArgs(args, "[JkkkZ", ::org::apache::lucene::store::DataOutput::initializeClass, ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(self->object.encodeTerm(a0, a1, a2, a3, a4));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene41PostingsWriter), (PyObject *) self, "encodeTerm", args, 2);
          }

          static PyObject *t_Lucene41PostingsWriter_finishDoc(t_Lucene41PostingsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.finishDoc());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene41PostingsWriter), (PyObject *) self, "finishDoc", args, 2);
          }

          static PyObject *t_Lucene41PostingsWriter_finishTerm(t_Lucene41PostingsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::BlockTermState a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::codecs::BlockTermState::initializeClass, &a0))
            {
              OBJ_CALL(self->object.finishTerm(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene41PostingsWriter), (PyObject *) self, "finishTerm", args, 2);
          }

          static PyObject *t_Lucene41PostingsWriter_init(t_Lucene41PostingsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::store::IndexOutput a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::IndexOutput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.init(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene41PostingsWriter), (PyObject *) self, "init", args, 2);
          }

          static PyObject *t_Lucene41PostingsWriter_setField(t_Lucene41PostingsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.setField(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(Lucene41PostingsWriter), (PyObject *) self, "setField", args, 2);
          }

          static PyObject *t_Lucene41PostingsWriter_startDoc(t_Lucene41PostingsWriter *self, PyObject *args)
          {
            jint a0;
            jint a1;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(self->object.startDoc(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene41PostingsWriter), (PyObject *) self, "startDoc", args, 2);
          }

          static PyObject *t_Lucene41PostingsWriter_startTerm(t_Lucene41PostingsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.startTerm());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene41PostingsWriter), (PyObject *) self, "startTerm", args, 2);
          }

          static int t_Lucene41PostingsWriter_set__field(t_Lucene41PostingsWriter *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::index::FieldInfo value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &value))
              {
                INT_CALL(self->object.setField(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "field", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldValueHitQueue.h"
#include "java/io/IOException.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/SortField.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldValueHitQueue::class$ = NULL;
        jmethodID *FieldValueHitQueue::mids$ = NULL;
        bool FieldValueHitQueue::live$ = false;

        jclass FieldValueHitQueue::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldValueHitQueue");

            mids$ = new jmethodID[max_mid];
            mids$[mid_create_c78d73c1] = env->getStaticMethodID(cls, "create", "([Lorg/apache/lucene/search/SortField;I)Lorg/apache/lucene/search/FieldValueHitQueue;");
            mids$[mid_getComparators_cbcbe6bc] = env->getMethodID(cls, "getComparators", "()[Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_getReverseMul_dab10e75] = env->getMethodID(cls, "getReverseMul", "()[I");
            mids$[mid_setComparator_205d9ea7] = env->getMethodID(cls, "setComparator", "(ILorg/apache/lucene/search/FieldComparator;)V");
            mids$[mid_lessThan_90234960] = env->getMethodID(cls, "lessThan", "(Lorg/apache/lucene/search/FieldValueHitQueue$Entry;Lorg/apache/lucene/search/FieldValueHitQueue$Entry;)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldValueHitQueue FieldValueHitQueue::create(const JArray< ::org::apache::lucene::search::SortField > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldValueHitQueue(env->callStaticObjectMethod(cls, mids$[mid_create_c78d73c1], a0.this$, a1));
        }

        JArray< ::org::apache::lucene::search::FieldComparator > FieldValueHitQueue::getComparators() const
        {
          return JArray< ::org::apache::lucene::search::FieldComparator >(env->callObjectMethod(this$, mids$[mid_getComparators_cbcbe6bc]));
        }

        JArray< jint > FieldValueHitQueue::getReverseMul() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getReverseMul_dab10e75]));
        }

        void FieldValueHitQueue::setComparator(jint a0, const ::org::apache::lucene::search::FieldComparator & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setComparator_205d9ea7], a0, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/FieldValueHitQueue$Entry.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldValueHitQueue_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldValueHitQueue_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldValueHitQueue_of_(t_FieldValueHitQueue *self, PyObject *args);
        static PyObject *t_FieldValueHitQueue_create(PyTypeObject *type, PyObject *args);
        static PyObject *t_FieldValueHitQueue_getComparators(t_FieldValueHitQueue *self);
        static PyObject *t_FieldValueHitQueue_getReverseMul(t_FieldValueHitQueue *self);
        static PyObject *t_FieldValueHitQueue_setComparator(t_FieldValueHitQueue *self, PyObject *args);
        static PyObject *t_FieldValueHitQueue_get__comparators(t_FieldValueHitQueue *self, void *data);
        static PyObject *t_FieldValueHitQueue_get__reverseMul(t_FieldValueHitQueue *self, void *data);
        static PyObject *t_FieldValueHitQueue_get__parameters_(t_FieldValueHitQueue *self, void *data);
        static PyGetSetDef t_FieldValueHitQueue__fields_[] = {
          DECLARE_GET_FIELD(t_FieldValueHitQueue, comparators),
          DECLARE_GET_FIELD(t_FieldValueHitQueue, reverseMul),
          DECLARE_GET_FIELD(t_FieldValueHitQueue, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldValueHitQueue__methods_[] = {
          DECLARE_METHOD(t_FieldValueHitQueue, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldValueHitQueue, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldValueHitQueue, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldValueHitQueue, create, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FieldValueHitQueue, getComparators, METH_NOARGS),
          DECLARE_METHOD(t_FieldValueHitQueue, getReverseMul, METH_NOARGS),
          DECLARE_METHOD(t_FieldValueHitQueue, setComparator, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldValueHitQueue, t_FieldValueHitQueue, ::org::apache::lucene::util::PriorityQueue, FieldValueHitQueue, abstract_init, 0, 0, t_FieldValueHitQueue__fields_, 0, 0);
        PyObject *t_FieldValueHitQueue::wrap_Object(const FieldValueHitQueue& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldValueHitQueue::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldValueHitQueue *self = (t_FieldValueHitQueue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldValueHitQueue::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldValueHitQueue::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldValueHitQueue *self = (t_FieldValueHitQueue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldValueHitQueue::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldValueHitQueue), module, "FieldValueHitQueue", 0);
          PyDict_SetItemString(PY_TYPE(FieldValueHitQueue).tp_dict, "Entry", make_descriptor(&PY_TYPE(FieldValueHitQueue$Entry)));
        }

        void t_FieldValueHitQueue::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldValueHitQueue).tp_dict, "class_", make_descriptor(FieldValueHitQueue::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldValueHitQueue).tp_dict, "wrapfn_", make_descriptor(t_FieldValueHitQueue::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldValueHitQueue).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldValueHitQueue_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldValueHitQueue::initializeClass, 1)))
            return NULL;
          return t_FieldValueHitQueue::wrap_Object(FieldValueHitQueue(((t_FieldValueHitQueue *) arg)->object.this$));
        }
        static PyObject *t_FieldValueHitQueue_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldValueHitQueue::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldValueHitQueue_of_(t_FieldValueHitQueue *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_FieldValueHitQueue_create(PyTypeObject *type, PyObject *args)
        {
          JArray< ::org::apache::lucene::search::SortField > a0((jobject) NULL);
          jint a1;
          FieldValueHitQueue result((jobject) NULL);

          if (!parseArgs(args, "[kI", ::org::apache::lucene::search::SortField::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::FieldValueHitQueue::create(a0, a1));
            return t_FieldValueHitQueue::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "create", args);
          return NULL;
        }

        static PyObject *t_FieldValueHitQueue_getComparators(t_FieldValueHitQueue *self)
        {
          JArray< ::org::apache::lucene::search::FieldComparator > result((jobject) NULL);
          OBJ_CALL(result = self->object.getComparators());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::t_FieldComparator::wrap_jobject);
        }

        static PyObject *t_FieldValueHitQueue_getReverseMul(t_FieldValueHitQueue *self)
        {
          JArray< jint > result((jobject) NULL);
          OBJ_CALL(result = self->object.getReverseMul());
          return result.wrap();
        }

        static PyObject *t_FieldValueHitQueue_setComparator(t_FieldValueHitQueue *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::search::FieldComparator a1((jobject) NULL);
          PyTypeObject **p1;

          if (!parseArgs(args, "IK", ::org::apache::lucene::search::FieldComparator::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_FieldComparator::parameters_))
          {
            OBJ_CALL(self->object.setComparator(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setComparator", args);
          return NULL;
        }
        static PyObject *t_FieldValueHitQueue_get__parameters_(t_FieldValueHitQueue *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_FieldValueHitQueue_get__comparators(t_FieldValueHitQueue *self, void *data)
        {
          JArray< ::org::apache::lucene::search::FieldComparator > value((jobject) NULL);
          OBJ_CALL(value = self->object.getComparators());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::t_FieldComparator::wrap_jobject);
        }

        static PyObject *t_FieldValueHitQueue_get__reverseMul(t_FieldValueHitQueue *self, void *data)
        {
          JArray< jint > value((jobject) NULL);
          OBJ_CALL(value = self->object.getReverseMul());
          return value.wrap();
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/ReciprocalFloatFunction.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *ReciprocalFloatFunction::class$ = NULL;
            jmethodID *ReciprocalFloatFunction::mids$ = NULL;
            bool ReciprocalFloatFunction::live$ = false;

            jclass ReciprocalFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/ReciprocalFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_64f8c2b9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;FFF)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ReciprocalFloatFunction::ReciprocalFloatFunction(const ::org::apache::lucene::queries::function::ValueSource & a0, jfloat a1, jfloat a2, jfloat a3) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_64f8c2b9, a0.this$, a1, a2, a3)) {}

            void ReciprocalFloatFunction::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String ReciprocalFloatFunction::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean ReciprocalFloatFunction::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues ReciprocalFloatFunction::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint ReciprocalFloatFunction::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_ReciprocalFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ReciprocalFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ReciprocalFloatFunction_init_(t_ReciprocalFloatFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ReciprocalFloatFunction_createWeight(t_ReciprocalFloatFunction *self, PyObject *args);
            static PyObject *t_ReciprocalFloatFunction_description(t_ReciprocalFloatFunction *self, PyObject *args);
            static PyObject *t_ReciprocalFloatFunction_equals(t_ReciprocalFloatFunction *self, PyObject *args);
            static PyObject *t_ReciprocalFloatFunction_getValues(t_ReciprocalFloatFunction *self, PyObject *args);
            static PyObject *t_ReciprocalFloatFunction_hashCode(t_ReciprocalFloatFunction *self, PyObject *args);

            static PyMethodDef t_ReciprocalFloatFunction__methods_[] = {
              DECLARE_METHOD(t_ReciprocalFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ReciprocalFloatFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ReciprocalFloatFunction, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_ReciprocalFloatFunction, description, METH_VARARGS),
              DECLARE_METHOD(t_ReciprocalFloatFunction, equals, METH_VARARGS),
              DECLARE_METHOD(t_ReciprocalFloatFunction, getValues, METH_VARARGS),
              DECLARE_METHOD(t_ReciprocalFloatFunction, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(ReciprocalFloatFunction, t_ReciprocalFloatFunction, ::org::apache::lucene::queries::function::ValueSource, ReciprocalFloatFunction, t_ReciprocalFloatFunction_init_, 0, 0, 0, 0, 0);

            void t_ReciprocalFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(ReciprocalFloatFunction), module, "ReciprocalFloatFunction", 0);
            }

            void t_ReciprocalFloatFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(ReciprocalFloatFunction).tp_dict, "class_", make_descriptor(ReciprocalFloatFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(ReciprocalFloatFunction).tp_dict, "wrapfn_", make_descriptor(t_ReciprocalFloatFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(ReciprocalFloatFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ReciprocalFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ReciprocalFloatFunction::initializeClass, 1)))
                return NULL;
              return t_ReciprocalFloatFunction::wrap_Object(ReciprocalFloatFunction(((t_ReciprocalFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_ReciprocalFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ReciprocalFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ReciprocalFloatFunction_init_(t_ReciprocalFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              jfloat a1;
              jfloat a2;
              jfloat a3;
              ReciprocalFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "kFFF", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = ReciprocalFloatFunction(a0, a1, a2, a3));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_ReciprocalFloatFunction_createWeight(t_ReciprocalFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(ReciprocalFloatFunction), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_ReciprocalFloatFunction_description(t_ReciprocalFloatFunction *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(ReciprocalFloatFunction), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_ReciprocalFloatFunction_equals(t_ReciprocalFloatFunction *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(ReciprocalFloatFunction), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_ReciprocalFloatFunction_getValues(t_ReciprocalFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(ReciprocalFloatFunction), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_ReciprocalFloatFunction_hashCode(t_ReciprocalFloatFunction *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(ReciprocalFloatFunction), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/term/TermFirstPassGroupingCollector.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/Sort.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace term {

            ::java::lang::Class *TermFirstPassGroupingCollector::class$ = NULL;
            jmethodID *TermFirstPassGroupingCollector::mids$ = NULL;
            bool TermFirstPassGroupingCollector::live$ = false;

            jclass TermFirstPassGroupingCollector::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/term/TermFirstPassGroupingCollector");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_a296710a] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/Sort;I)V");
                mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
                mids$[mid_getDocGroupValue_b57e9c3f] = env->getMethodID(cls, "getDocGroupValue", "(I)Lorg/apache/lucene/util/BytesRef;");
                mids$[mid_copyDocGroupValue_0991fadd] = env->getMethodID(cls, "copyDocGroupValue", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/BytesRef;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TermFirstPassGroupingCollector::TermFirstPassGroupingCollector(const ::java::lang::String & a0, const ::org::apache::lucene::search::Sort & a1, jint a2) : ::org::apache::lucene::search::grouping::AbstractFirstPassGroupingCollector(env->newObject(initializeClass, &mids$, mid_init$_a296710a, a0.this$, a1.this$, a2)) {}

            void TermFirstPassGroupingCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace term {
            static PyObject *t_TermFirstPassGroupingCollector_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermFirstPassGroupingCollector_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermFirstPassGroupingCollector_of_(t_TermFirstPassGroupingCollector *self, PyObject *args);
            static int t_TermFirstPassGroupingCollector_init_(t_TermFirstPassGroupingCollector *self, PyObject *args, PyObject *kwds);
            static PyObject *t_TermFirstPassGroupingCollector_setNextReader(t_TermFirstPassGroupingCollector *self, PyObject *args);
            static int t_TermFirstPassGroupingCollector_set__nextReader(t_TermFirstPassGroupingCollector *self, PyObject *arg, void *data);
            static PyObject *t_TermFirstPassGroupingCollector_get__parameters_(t_TermFirstPassGroupingCollector *self, void *data);
            static PyGetSetDef t_TermFirstPassGroupingCollector__fields_[] = {
              DECLARE_SET_FIELD(t_TermFirstPassGroupingCollector, nextReader),
              DECLARE_GET_FIELD(t_TermFirstPassGroupingCollector, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_TermFirstPassGroupingCollector__methods_[] = {
              DECLARE_METHOD(t_TermFirstPassGroupingCollector, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermFirstPassGroupingCollector, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermFirstPassGroupingCollector, of_, METH_VARARGS),
              DECLARE_METHOD(t_TermFirstPassGroupingCollector, setNextReader, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TermFirstPassGroupingCollector, t_TermFirstPassGroupingCollector, ::org::apache::lucene::search::grouping::AbstractFirstPassGroupingCollector, TermFirstPassGroupingCollector, t_TermFirstPassGroupingCollector_init_, 0, 0, t_TermFirstPassGroupingCollector__fields_, 0, 0);
            PyObject *t_TermFirstPassGroupingCollector::wrap_Object(const TermFirstPassGroupingCollector& object, PyTypeObject *p0)
            {
              PyObject *obj = t_TermFirstPassGroupingCollector::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_TermFirstPassGroupingCollector *self = (t_TermFirstPassGroupingCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_TermFirstPassGroupingCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_TermFirstPassGroupingCollector::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_TermFirstPassGroupingCollector *self = (t_TermFirstPassGroupingCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_TermFirstPassGroupingCollector::install(PyObject *module)
            {
              installType(&PY_TYPE(TermFirstPassGroupingCollector), module, "TermFirstPassGroupingCollector", 0);
            }

            void t_TermFirstPassGroupingCollector::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TermFirstPassGroupingCollector).tp_dict, "class_", make_descriptor(TermFirstPassGroupingCollector::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TermFirstPassGroupingCollector).tp_dict, "wrapfn_", make_descriptor(t_TermFirstPassGroupingCollector::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TermFirstPassGroupingCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TermFirstPassGroupingCollector_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TermFirstPassGroupingCollector::initializeClass, 1)))
                return NULL;
              return t_TermFirstPassGroupingCollector::wrap_Object(TermFirstPassGroupingCollector(((t_TermFirstPassGroupingCollector *) arg)->object.this$));
            }
            static PyObject *t_TermFirstPassGroupingCollector_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TermFirstPassGroupingCollector::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_TermFirstPassGroupingCollector_of_(t_TermFirstPassGroupingCollector *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static int t_TermFirstPassGroupingCollector_init_(t_TermFirstPassGroupingCollector *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::Sort a1((jobject) NULL);
              jint a2;
              TermFirstPassGroupingCollector object((jobject) NULL);

              if (!parseArgs(args, "skI", ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = TermFirstPassGroupingCollector(a0, a1, a2));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::util::PY_TYPE(BytesRef);
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_TermFirstPassGroupingCollector_setNextReader(t_TermFirstPassGroupingCollector *self, PyObject *args)
            {
              ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setNextReader(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(TermFirstPassGroupingCollector), (PyObject *) self, "setNextReader", args, 2);
            }
            static PyObject *t_TermFirstPassGroupingCollector_get__parameters_(t_TermFirstPassGroupingCollector *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }

            static int t_TermFirstPassGroupingCollector_set__nextReader(t_TermFirstPassGroupingCollector *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
                {
                  INT_CALL(self->object.setNextReader(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene42/Lucene42FieldInfosFormat.h"
#include "org/apache/lucene/codecs/FieldInfosReader.h"
#include "org/apache/lucene/codecs/FieldInfosWriter.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene42 {

          ::java::lang::Class *Lucene42FieldInfosFormat::class$ = NULL;
          jmethodID *Lucene42FieldInfosFormat::mids$ = NULL;
          bool Lucene42FieldInfosFormat::live$ = false;

          jclass Lucene42FieldInfosFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene42/Lucene42FieldInfosFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getFieldInfosReader_6ecd5494] = env->getMethodID(cls, "getFieldInfosReader", "()Lorg/apache/lucene/codecs/FieldInfosReader;");
              mids$[mid_getFieldInfosWriter_211ffa60] = env->getMethodID(cls, "getFieldInfosWriter", "()Lorg/apache/lucene/codecs/FieldInfosWriter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene42FieldInfosFormat::Lucene42FieldInfosFormat() : ::org::apache::lucene::codecs::FieldInfosFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::FieldInfosReader Lucene42FieldInfosFormat::getFieldInfosReader() const
          {
            return ::org::apache::lucene::codecs::FieldInfosReader(env->callObjectMethod(this$, mids$[mid_getFieldInfosReader_6ecd5494]));
          }

          ::org::apache::lucene::codecs::FieldInfosWriter Lucene42FieldInfosFormat::getFieldInfosWriter() const
          {
            return ::org::apache::lucene::codecs::FieldInfosWriter(env->callObjectMethod(this$, mids$[mid_getFieldInfosWriter_211ffa60]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene42 {
          static PyObject *t_Lucene42FieldInfosFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene42FieldInfosFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene42FieldInfosFormat_init_(t_Lucene42FieldInfosFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene42FieldInfosFormat_getFieldInfosReader(t_Lucene42FieldInfosFormat *self, PyObject *args);
          static PyObject *t_Lucene42FieldInfosFormat_getFieldInfosWriter(t_Lucene42FieldInfosFormat *self, PyObject *args);
          static PyObject *t_Lucene42FieldInfosFormat_get__fieldInfosReader(t_Lucene42FieldInfosFormat *self, void *data);
          static PyObject *t_Lucene42FieldInfosFormat_get__fieldInfosWriter(t_Lucene42FieldInfosFormat *self, void *data);
          static PyGetSetDef t_Lucene42FieldInfosFormat__fields_[] = {
            DECLARE_GET_FIELD(t_Lucene42FieldInfosFormat, fieldInfosReader),
            DECLARE_GET_FIELD(t_Lucene42FieldInfosFormat, fieldInfosWriter),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lucene42FieldInfosFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene42FieldInfosFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene42FieldInfosFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene42FieldInfosFormat, getFieldInfosReader, METH_VARARGS),
            DECLARE_METHOD(t_Lucene42FieldInfosFormat, getFieldInfosWriter, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene42FieldInfosFormat, t_Lucene42FieldInfosFormat, ::org::apache::lucene::codecs::FieldInfosFormat, Lucene42FieldInfosFormat, t_Lucene42FieldInfosFormat_init_, 0, 0, t_Lucene42FieldInfosFormat__fields_, 0, 0);

          void t_Lucene42FieldInfosFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene42FieldInfosFormat), module, "Lucene42FieldInfosFormat", 0);
          }

          void t_Lucene42FieldInfosFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene42FieldInfosFormat).tp_dict, "class_", make_descriptor(Lucene42FieldInfosFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene42FieldInfosFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene42FieldInfosFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene42FieldInfosFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene42FieldInfosFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene42FieldInfosFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene42FieldInfosFormat::wrap_Object(Lucene42FieldInfosFormat(((t_Lucene42FieldInfosFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene42FieldInfosFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene42FieldInfosFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene42FieldInfosFormat_init_(t_Lucene42FieldInfosFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene42FieldInfosFormat object((jobject) NULL);

            INT_CALL(object = Lucene42FieldInfosFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene42FieldInfosFormat_getFieldInfosReader(t_Lucene42FieldInfosFormat *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosReader result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getFieldInfosReader());
              return ::org::apache::lucene::codecs::t_FieldInfosReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene42FieldInfosFormat), (PyObject *) self, "getFieldInfosReader", args, 2);
          }

          static PyObject *t_Lucene42FieldInfosFormat_getFieldInfosWriter(t_Lucene42FieldInfosFormat *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosWriter result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getFieldInfosWriter());
              return ::org::apache::lucene::codecs::t_FieldInfosWriter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene42FieldInfosFormat), (PyObject *) self, "getFieldInfosWriter", args, 2);
          }

          static PyObject *t_Lucene42FieldInfosFormat_get__fieldInfosReader(t_Lucene42FieldInfosFormat *self, void *data)
          {
            ::org::apache::lucene::codecs::FieldInfosReader value((jobject) NULL);
            OBJ_CALL(value = self->object.getFieldInfosReader());
            return ::org::apache::lucene::codecs::t_FieldInfosReader::wrap_Object(value);
          }

          static PyObject *t_Lucene42FieldInfosFormat_get__fieldInfosWriter(t_Lucene42FieldInfosFormat *self, void *data)
          {
            ::org::apache::lucene::codecs::FieldInfosWriter value((jobject) NULL);
            OBJ_CALL(value = self->object.getFieldInfosWriter());
            return ::org::apache::lucene::codecs::t_FieldInfosWriter::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/BaseCompositeReader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/Fields.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/StoredFieldVisitor.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *BaseCompositeReader::class$ = NULL;
        jmethodID *BaseCompositeReader::mids$ = NULL;
        bool BaseCompositeReader::live$ = false;

        jclass BaseCompositeReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/BaseCompositeReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_docFreq_7eca6a9e] = env->getMethodID(cls, "docFreq", "(Lorg/apache/lucene/index/Term;)I");
            mids$[mid_document_a2ea3ebe] = env->getMethodID(cls, "document", "(ILorg/apache/lucene/index/StoredFieldVisitor;)V");
            mids$[mid_getDocCount_5fdc3f57] = env->getMethodID(cls, "getDocCount", "(Ljava/lang/String;)I");
            mids$[mid_getSumDocFreq_5fdc3f54] = env->getMethodID(cls, "getSumDocFreq", "(Ljava/lang/String;)J");
            mids$[mid_getSumTotalTermFreq_5fdc3f54] = env->getMethodID(cls, "getSumTotalTermFreq", "(Ljava/lang/String;)J");
            mids$[mid_getTermVectors_ef1c9c73] = env->getMethodID(cls, "getTermVectors", "(I)Lorg/apache/lucene/index/Fields;");
            mids$[mid_maxDoc_54c6a179] = env->getMethodID(cls, "maxDoc", "()I");
            mids$[mid_numDocs_54c6a179] = env->getMethodID(cls, "numDocs", "()I");
            mids$[mid_totalTermFreq_7eca6a9d] = env->getMethodID(cls, "totalTermFreq", "(Lorg/apache/lucene/index/Term;)J");
            mids$[mid_readerIndex_39c7bd23] = env->getMethodID(cls, "readerIndex", "(I)I");
            mids$[mid_getSequentialSubReaders_87851566] = env->getMethodID(cls, "getSequentialSubReaders", "()Ljava/util/List;");
            mids$[mid_readerBase_39c7bd23] = env->getMethodID(cls, "readerBase", "(I)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint BaseCompositeReader::docFreq(const ::org::apache::lucene::index::Term & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_docFreq_7eca6a9e], a0.this$);
        }

        void BaseCompositeReader::document(jint a0, const ::org::apache::lucene::index::StoredFieldVisitor & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_document_a2ea3ebe], a0, a1.this$);
        }

        jint BaseCompositeReader::getDocCount(const ::java::lang::String & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getDocCount_5fdc3f57], a0.this$);
        }

        jlong BaseCompositeReader::getSumDocFreq(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_getSumDocFreq_5fdc3f54], a0.this$);
        }

        jlong BaseCompositeReader::getSumTotalTermFreq(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_getSumTotalTermFreq_5fdc3f54], a0.this$);
        }

        ::org::apache::lucene::index::Fields BaseCompositeReader::getTermVectors(jint a0) const
        {
          return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_getTermVectors_ef1c9c73], a0));
        }

        jint BaseCompositeReader::maxDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_maxDoc_54c6a179]);
        }

        jint BaseCompositeReader::numDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_numDocs_54c6a179]);
        }

        jlong BaseCompositeReader::totalTermFreq(const ::org::apache::lucene::index::Term & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_totalTermFreq_7eca6a9d], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_BaseCompositeReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BaseCompositeReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BaseCompositeReader_of_(t_BaseCompositeReader *self, PyObject *args);
        static PyObject *t_BaseCompositeReader_docFreq(t_BaseCompositeReader *self, PyObject *args);
        static PyObject *t_BaseCompositeReader_document(t_BaseCompositeReader *self, PyObject *args);
        static PyObject *t_BaseCompositeReader_getDocCount(t_BaseCompositeReader *self, PyObject *args);
        static PyObject *t_BaseCompositeReader_getSumDocFreq(t_BaseCompositeReader *self, PyObject *args);
        static PyObject *t_BaseCompositeReader_getSumTotalTermFreq(t_BaseCompositeReader *self, PyObject *args);
        static PyObject *t_BaseCompositeReader_getTermVectors(t_BaseCompositeReader *self, PyObject *args);
        static PyObject *t_BaseCompositeReader_maxDoc(t_BaseCompositeReader *self, PyObject *args);
        static PyObject *t_BaseCompositeReader_numDocs(t_BaseCompositeReader *self, PyObject *args);
        static PyObject *t_BaseCompositeReader_totalTermFreq(t_BaseCompositeReader *self, PyObject *args);
        static PyObject *t_BaseCompositeReader_get__parameters_(t_BaseCompositeReader *self, void *data);
        static PyGetSetDef t_BaseCompositeReader__fields_[] = {
          DECLARE_GET_FIELD(t_BaseCompositeReader, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BaseCompositeReader__methods_[] = {
          DECLARE_METHOD(t_BaseCompositeReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BaseCompositeReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BaseCompositeReader, of_, METH_VARARGS),
          DECLARE_METHOD(t_BaseCompositeReader, docFreq, METH_VARARGS),
          DECLARE_METHOD(t_BaseCompositeReader, document, METH_VARARGS),
          DECLARE_METHOD(t_BaseCompositeReader, getDocCount, METH_VARARGS),
          DECLARE_METHOD(t_BaseCompositeReader, getSumDocFreq, METH_VARARGS),
          DECLARE_METHOD(t_BaseCompositeReader, getSumTotalTermFreq, METH_VARARGS),
          DECLARE_METHOD(t_BaseCompositeReader, getTermVectors, METH_VARARGS),
          DECLARE_METHOD(t_BaseCompositeReader, maxDoc, METH_VARARGS),
          DECLARE_METHOD(t_BaseCompositeReader, numDocs, METH_VARARGS),
          DECLARE_METHOD(t_BaseCompositeReader, totalTermFreq, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BaseCompositeReader, t_BaseCompositeReader, ::org::apache::lucene::index::CompositeReader, BaseCompositeReader, abstract_init, 0, 0, t_BaseCompositeReader__fields_, 0, 0);
        PyObject *t_BaseCompositeReader::wrap_Object(const BaseCompositeReader& object, PyTypeObject *p0)
        {
          PyObject *obj = t_BaseCompositeReader::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_BaseCompositeReader *self = (t_BaseCompositeReader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_BaseCompositeReader::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_BaseCompositeReader::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_BaseCompositeReader *self = (t_BaseCompositeReader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_BaseCompositeReader::install(PyObject *module)
        {
          installType(&PY_TYPE(BaseCompositeReader), module, "BaseCompositeReader", 0);
        }

        void t_BaseCompositeReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BaseCompositeReader).tp_dict, "class_", make_descriptor(BaseCompositeReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BaseCompositeReader).tp_dict, "wrapfn_", make_descriptor(t_BaseCompositeReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BaseCompositeReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BaseCompositeReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BaseCompositeReader::initializeClass, 1)))
            return NULL;
          return t_BaseCompositeReader::wrap_Object(BaseCompositeReader(((t_BaseCompositeReader *) arg)->object.this$));
        }
        static PyObject *t_BaseCompositeReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BaseCompositeReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BaseCompositeReader_of_(t_BaseCompositeReader *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_BaseCompositeReader_docFreq(t_BaseCompositeReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.docFreq(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(BaseCompositeReader), (PyObject *) self, "docFreq", args, 2);
        }

        static PyObject *t_BaseCompositeReader_document(t_BaseCompositeReader *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::index::StoredFieldVisitor a1((jobject) NULL);

          if (!parseArgs(args, "Ik", ::org::apache::lucene::index::StoredFieldVisitor::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.document(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(BaseCompositeReader), (PyObject *) self, "document", args, 2);
        }

        static PyObject *t_BaseCompositeReader_getDocCount(t_BaseCompositeReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getDocCount(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(BaseCompositeReader), (PyObject *) self, "getDocCount", args, 2);
        }

        static PyObject *t_BaseCompositeReader_getSumDocFreq(t_BaseCompositeReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSumDocFreq(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(BaseCompositeReader), (PyObject *) self, "getSumDocFreq", args, 2);
        }

        static PyObject *t_BaseCompositeReader_getSumTotalTermFreq(t_BaseCompositeReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSumTotalTermFreq(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(BaseCompositeReader), (PyObject *) self, "getSumTotalTermFreq", args, 2);
        }

        static PyObject *t_BaseCompositeReader_getTermVectors(t_BaseCompositeReader *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::index::Fields result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.getTermVectors(a0));
            return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(BaseCompositeReader), (PyObject *) self, "getTermVectors", args, 2);
        }

        static PyObject *t_BaseCompositeReader_maxDoc(t_BaseCompositeReader *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.maxDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(BaseCompositeReader), (PyObject *) self, "maxDoc", args, 2);
        }

        static PyObject *t_BaseCompositeReader_numDocs(t_BaseCompositeReader *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.numDocs());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(BaseCompositeReader), (PyObject *) self, "numDocs", args, 2);
        }

        static PyObject *t_BaseCompositeReader_totalTermFreq(t_BaseCompositeReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.totalTermFreq(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(BaseCompositeReader), (PyObject *) self, "totalTermFreq", args, 2);
        }
        static PyObject *t_BaseCompositeReader_get__parameters_(t_BaseCompositeReader *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CompositeReader.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/CompositeReaderContext.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CompositeReader::class$ = NULL;
        jmethodID *CompositeReader::mids$ = NULL;
        bool CompositeReader::live$ = false;

        jclass CompositeReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CompositeReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getContext_00eb2977] = env->getMethodID(cls, "getContext", "()Lorg/apache/lucene/index/CompositeReaderContext;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_getSequentialSubReaders_87851566] = env->getMethodID(cls, "getSequentialSubReaders", "()Ljava/util/List;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::CompositeReaderContext CompositeReader::getContext() const
        {
          return ::org::apache::lucene::index::CompositeReaderContext(env->callObjectMethod(this$, mids$[mid_getContext_00eb2977]));
        }

        ::java::lang::String CompositeReader::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CompositeReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CompositeReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CompositeReader_getContext(t_CompositeReader *self, PyObject *args);
        static PyObject *t_CompositeReader_toString(t_CompositeReader *self, PyObject *args);
        static PyObject *t_CompositeReader_get__context(t_CompositeReader *self, void *data);
        static PyGetSetDef t_CompositeReader__fields_[] = {
          DECLARE_GET_FIELD(t_CompositeReader, context),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CompositeReader__methods_[] = {
          DECLARE_METHOD(t_CompositeReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CompositeReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CompositeReader, getContext, METH_VARARGS),
          DECLARE_METHOD(t_CompositeReader, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CompositeReader, t_CompositeReader, ::org::apache::lucene::index::IndexReader, CompositeReader, abstract_init, 0, 0, t_CompositeReader__fields_, 0, 0);

        void t_CompositeReader::install(PyObject *module)
        {
          installType(&PY_TYPE(CompositeReader), module, "CompositeReader", 0);
        }

        void t_CompositeReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CompositeReader).tp_dict, "class_", make_descriptor(CompositeReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CompositeReader).tp_dict, "wrapfn_", make_descriptor(t_CompositeReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CompositeReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CompositeReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CompositeReader::initializeClass, 1)))
            return NULL;
          return t_CompositeReader::wrap_Object(CompositeReader(((t_CompositeReader *) arg)->object.this$));
        }
        static PyObject *t_CompositeReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CompositeReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CompositeReader_getContext(t_CompositeReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::CompositeReaderContext result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getContext());
            return ::org::apache::lucene::index::t_CompositeReaderContext::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(CompositeReader), (PyObject *) self, "getContext", args, 2);
        }

        static PyObject *t_CompositeReader_toString(t_CompositeReader *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(CompositeReader), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_CompositeReader_get__context(t_CompositeReader *self, void *data)
        {
          ::org::apache::lucene::index::CompositeReaderContext value((jobject) NULL);
          OBJ_CALL(value = self->object.getContext());
          return ::org::apache::lucene::index::t_CompositeReaderContext::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ga/IrishLowerCaseFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ga {

          ::java::lang::Class *IrishLowerCaseFilterFactory::class$ = NULL;
          jmethodID *IrishLowerCaseFilterFactory::mids$ = NULL;
          bool IrishLowerCaseFilterFactory::live$ = false;

          jclass IrishLowerCaseFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ga/IrishLowerCaseFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IrishLowerCaseFilterFactory::IrishLowerCaseFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream IrishLowerCaseFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory IrishLowerCaseFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ga {
          static PyObject *t_IrishLowerCaseFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IrishLowerCaseFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IrishLowerCaseFilterFactory_init_(t_IrishLowerCaseFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IrishLowerCaseFilterFactory_create(t_IrishLowerCaseFilterFactory *self, PyObject *args);
          static PyObject *t_IrishLowerCaseFilterFactory_getMultiTermComponent(t_IrishLowerCaseFilterFactory *self);
          static PyObject *t_IrishLowerCaseFilterFactory_get__multiTermComponent(t_IrishLowerCaseFilterFactory *self, void *data);
          static PyGetSetDef t_IrishLowerCaseFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_IrishLowerCaseFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_IrishLowerCaseFilterFactory__methods_[] = {
            DECLARE_METHOD(t_IrishLowerCaseFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IrishLowerCaseFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IrishLowerCaseFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_IrishLowerCaseFilterFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IrishLowerCaseFilterFactory, t_IrishLowerCaseFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, IrishLowerCaseFilterFactory, t_IrishLowerCaseFilterFactory_init_, 0, 0, t_IrishLowerCaseFilterFactory__fields_, 0, 0);

          void t_IrishLowerCaseFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(IrishLowerCaseFilterFactory), module, "IrishLowerCaseFilterFactory", 0);
          }

          void t_IrishLowerCaseFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IrishLowerCaseFilterFactory).tp_dict, "class_", make_descriptor(IrishLowerCaseFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IrishLowerCaseFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_IrishLowerCaseFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IrishLowerCaseFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IrishLowerCaseFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IrishLowerCaseFilterFactory::initializeClass, 1)))
              return NULL;
            return t_IrishLowerCaseFilterFactory::wrap_Object(IrishLowerCaseFilterFactory(((t_IrishLowerCaseFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_IrishLowerCaseFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IrishLowerCaseFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IrishLowerCaseFilterFactory_init_(t_IrishLowerCaseFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            IrishLowerCaseFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = IrishLowerCaseFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IrishLowerCaseFilterFactory_create(t_IrishLowerCaseFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IrishLowerCaseFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_IrishLowerCaseFilterFactory_getMultiTermComponent(t_IrishLowerCaseFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_IrishLowerCaseFilterFactory_get__multiTermComponent(t_IrishLowerCaseFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/GroupQueryNodeProcessor.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *GroupQueryNodeProcessor::class$ = NULL;
              jmethodID *GroupQueryNodeProcessor::mids$ = NULL;
              bool GroupQueryNodeProcessor::live$ = false;

              jclass GroupQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/GroupQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_getQueryConfigHandler_3636d8c3] = env->getMethodID(cls, "getQueryConfigHandler", "()Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;");
                  mids$[mid_process_6705aed7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setQueryConfigHandler_0b1f7132] = env->getMethodID(cls, "setQueryConfigHandler", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              GroupQueryNodeProcessor::GroupQueryNodeProcessor() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler GroupQueryNodeProcessor::getQueryConfigHandler() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler(env->callObjectMethod(this$, mids$[mid_getQueryConfigHandler_3636d8c3]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode GroupQueryNodeProcessor::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_6705aed7], a0.this$));
              }

              void GroupQueryNodeProcessor::setQueryConfigHandler(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setQueryConfigHandler_0b1f7132], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_GroupQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_GroupQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_GroupQueryNodeProcessor_init_(t_GroupQueryNodeProcessor *self, PyObject *args, PyObject *kwds);
              static PyObject *t_GroupQueryNodeProcessor_getQueryConfigHandler(t_GroupQueryNodeProcessor *self);
              static PyObject *t_GroupQueryNodeProcessor_process(t_GroupQueryNodeProcessor *self, PyObject *arg);
              static PyObject *t_GroupQueryNodeProcessor_setQueryConfigHandler(t_GroupQueryNodeProcessor *self, PyObject *arg);
              static PyObject *t_GroupQueryNodeProcessor_get__queryConfigHandler(t_GroupQueryNodeProcessor *self, void *data);
              static int t_GroupQueryNodeProcessor_set__queryConfigHandler(t_GroupQueryNodeProcessor *self, PyObject *arg, void *data);
              static PyGetSetDef t_GroupQueryNodeProcessor__fields_[] = {
                DECLARE_GETSET_FIELD(t_GroupQueryNodeProcessor, queryConfigHandler),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_GroupQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_GroupQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_GroupQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_GroupQueryNodeProcessor, getQueryConfigHandler, METH_NOARGS),
                DECLARE_METHOD(t_GroupQueryNodeProcessor, process, METH_O),
                DECLARE_METHOD(t_GroupQueryNodeProcessor, setQueryConfigHandler, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(GroupQueryNodeProcessor, t_GroupQueryNodeProcessor, ::java::lang::Object, GroupQueryNodeProcessor, t_GroupQueryNodeProcessor_init_, 0, 0, t_GroupQueryNodeProcessor__fields_, 0, 0);

              void t_GroupQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(GroupQueryNodeProcessor), module, "GroupQueryNodeProcessor", 0);
              }

              void t_GroupQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(GroupQueryNodeProcessor).tp_dict, "class_", make_descriptor(GroupQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(GroupQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_GroupQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(GroupQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_GroupQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, GroupQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_GroupQueryNodeProcessor::wrap_Object(GroupQueryNodeProcessor(((t_GroupQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_GroupQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, GroupQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_GroupQueryNodeProcessor_init_(t_GroupQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                GroupQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = GroupQueryNodeProcessor());
                self->object = object;

                return 0;
              }

              static PyObject *t_GroupQueryNodeProcessor_getQueryConfigHandler(t_GroupQueryNodeProcessor *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler result((jobject) NULL);
                OBJ_CALL(result = self->object.getQueryConfigHandler());
                return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(result);
              }

              static PyObject *t_GroupQueryNodeProcessor_process(t_GroupQueryNodeProcessor *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "process", arg);
                return NULL;
              }

              static PyObject *t_GroupQueryNodeProcessor_setQueryConfigHandler(t_GroupQueryNodeProcessor *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.setQueryConfigHandler(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setQueryConfigHandler", arg);
                return NULL;
              }

              static PyObject *t_GroupQueryNodeProcessor_get__queryConfigHandler(t_GroupQueryNodeProcessor *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
                OBJ_CALL(value = self->object.getQueryConfigHandler());
                return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(value);
              }
              static int t_GroupQueryNodeProcessor_set__queryConfigHandler(t_GroupQueryNodeProcessor *self, PyObject *arg, void *data)
              {
                {
                  ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
                  if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &value))
                  {
                    INT_CALL(self->object.setQueryConfigHandler(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "queryConfigHandler", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene49/Lucene49NormsFormat.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/DocValuesConsumer.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene49 {

          ::java::lang::Class *Lucene49NormsFormat::class$ = NULL;
          jmethodID *Lucene49NormsFormat::mids$ = NULL;
          bool Lucene49NormsFormat::live$ = false;

          jclass Lucene49NormsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene49/Lucene49NormsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_normsConsumer_025deb44] = env->getMethodID(cls, "normsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/DocValuesConsumer;");
              mids$[mid_normsProducer_9b0d4e4a] = env->getMethodID(cls, "normsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/DocValuesProducer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene49NormsFormat::Lucene49NormsFormat() : ::org::apache::lucene::codecs::NormsFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::DocValuesConsumer Lucene49NormsFormat::normsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesConsumer(env->callObjectMethod(this$, mids$[mid_normsConsumer_025deb44], a0.this$));
          }

          ::org::apache::lucene::codecs::DocValuesProducer Lucene49NormsFormat::normsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesProducer(env->callObjectMethod(this$, mids$[mid_normsProducer_9b0d4e4a], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene49 {
          static PyObject *t_Lucene49NormsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene49NormsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene49NormsFormat_init_(t_Lucene49NormsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene49NormsFormat_normsConsumer(t_Lucene49NormsFormat *self, PyObject *args);
          static PyObject *t_Lucene49NormsFormat_normsProducer(t_Lucene49NormsFormat *self, PyObject *args);

          static PyMethodDef t_Lucene49NormsFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene49NormsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene49NormsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene49NormsFormat, normsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_Lucene49NormsFormat, normsProducer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene49NormsFormat, t_Lucene49NormsFormat, ::org::apache::lucene::codecs::NormsFormat, Lucene49NormsFormat, t_Lucene49NormsFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene49NormsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene49NormsFormat), module, "Lucene49NormsFormat", 0);
          }

          void t_Lucene49NormsFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene49NormsFormat).tp_dict, "class_", make_descriptor(Lucene49NormsFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene49NormsFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene49NormsFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene49NormsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene49NormsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene49NormsFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene49NormsFormat::wrap_Object(Lucene49NormsFormat(((t_Lucene49NormsFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene49NormsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene49NormsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene49NormsFormat_init_(t_Lucene49NormsFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene49NormsFormat object((jobject) NULL);

            INT_CALL(object = Lucene49NormsFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene49NormsFormat_normsConsumer(t_Lucene49NormsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.normsConsumer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesConsumer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene49NormsFormat), (PyObject *) self, "normsConsumer", args, 2);
          }

          static PyObject *t_Lucene49NormsFormat_normsProducer(t_Lucene49NormsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.normsProducer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesProducer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene49NormsFormat), (PyObject *) self, "normsProducer", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/RAMDirectory.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *RAMDirectory::class$ = NULL;
        jmethodID *RAMDirectory::mids$ = NULL;
        bool RAMDirectory::live$ = false;

        jclass RAMDirectory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/RAMDirectory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_7b526946] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/store/IOContext;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_createOutput_5ad5358d] = env->getMethodID(cls, "createOutput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_deleteFile_5fdc3f48] = env->getMethodID(cls, "deleteFile", "(Ljava/lang/String;)V");
            mids$[mid_fileExists_5fdc3f44] = env->getMethodID(cls, "fileExists", "(Ljava/lang/String;)Z");
            mids$[mid_fileLength_5fdc3f54] = env->getMethodID(cls, "fileLength", "(Ljava/lang/String;)J");
            mids$[mid_getLockID_14c7b5c5] = env->getMethodID(cls, "getLockID", "()Ljava/lang/String;");
            mids$[mid_listAll_2e6d5245] = env->getMethodID(cls, "listAll", "()[Ljava/lang/String;");
            mids$[mid_openInput_3e1b5375] = env->getMethodID(cls, "openInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_sync_9bfb370d] = env->getMethodID(cls, "sync", "(Ljava/util/Collection;)V");
            mids$[mid_newRAMFile_a5af5448] = env->getMethodID(cls, "newRAMFile", "()Lorg/apache/lucene/store/RAMFile;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RAMDirectory::RAMDirectory() : ::org::apache::lucene::store::BaseDirectory(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        RAMDirectory::RAMDirectory(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::store::IOContext & a1) : ::org::apache::lucene::store::BaseDirectory(env->newObject(initializeClass, &mids$, mid_init$_7b526946, a0.this$, a1.this$)) {}

        void RAMDirectory::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        ::org::apache::lucene::store::IndexOutput RAMDirectory::createOutput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexOutput(env->callObjectMethod(this$, mids$[mid_createOutput_5ad5358d], a0.this$, a1.this$));
        }

        void RAMDirectory::deleteFile(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_deleteFile_5fdc3f48], a0.this$);
        }

        jboolean RAMDirectory::fileExists(const ::java::lang::String & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_fileExists_5fdc3f44], a0.this$);
        }

        jlong RAMDirectory::fileLength(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_fileLength_5fdc3f54], a0.this$);
        }

        ::java::lang::String RAMDirectory::getLockID() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLockID_14c7b5c5]));
        }

        JArray< ::java::lang::String > RAMDirectory::listAll() const
        {
          return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_listAll_2e6d5245]));
        }

        ::org::apache::lucene::store::IndexInput RAMDirectory::openInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_openInput_3e1b5375], a0.this$, a1.this$));
        }

        jlong RAMDirectory::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }

        void RAMDirectory::sync(const ::java::util::Collection & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_sync_9bfb370d], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_RAMDirectory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RAMDirectory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RAMDirectory_init_(t_RAMDirectory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RAMDirectory_close(t_RAMDirectory *self, PyObject *args);
        static PyObject *t_RAMDirectory_createOutput(t_RAMDirectory *self, PyObject *args);
        static PyObject *t_RAMDirectory_deleteFile(t_RAMDirectory *self, PyObject *args);
        static PyObject *t_RAMDirectory_fileExists(t_RAMDirectory *self, PyObject *args);
        static PyObject *t_RAMDirectory_fileLength(t_RAMDirectory *self, PyObject *args);
        static PyObject *t_RAMDirectory_getLockID(t_RAMDirectory *self, PyObject *args);
        static PyObject *t_RAMDirectory_listAll(t_RAMDirectory *self, PyObject *args);
        static PyObject *t_RAMDirectory_openInput(t_RAMDirectory *self, PyObject *args);
        static PyObject *t_RAMDirectory_ramBytesUsed(t_RAMDirectory *self);
        static PyObject *t_RAMDirectory_sync(t_RAMDirectory *self, PyObject *args);
        static PyObject *t_RAMDirectory_get__lockID(t_RAMDirectory *self, void *data);
        static PyGetSetDef t_RAMDirectory__fields_[] = {
          DECLARE_GET_FIELD(t_RAMDirectory, lockID),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RAMDirectory__methods_[] = {
          DECLARE_METHOD(t_RAMDirectory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RAMDirectory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RAMDirectory, close, METH_VARARGS),
          DECLARE_METHOD(t_RAMDirectory, createOutput, METH_VARARGS),
          DECLARE_METHOD(t_RAMDirectory, deleteFile, METH_VARARGS),
          DECLARE_METHOD(t_RAMDirectory, fileExists, METH_VARARGS),
          DECLARE_METHOD(t_RAMDirectory, fileLength, METH_VARARGS),
          DECLARE_METHOD(t_RAMDirectory, getLockID, METH_VARARGS),
          DECLARE_METHOD(t_RAMDirectory, listAll, METH_VARARGS),
          DECLARE_METHOD(t_RAMDirectory, openInput, METH_VARARGS),
          DECLARE_METHOD(t_RAMDirectory, ramBytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_RAMDirectory, sync, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RAMDirectory, t_RAMDirectory, ::org::apache::lucene::store::BaseDirectory, RAMDirectory, t_RAMDirectory_init_, 0, 0, t_RAMDirectory__fields_, 0, 0);

        void t_RAMDirectory::install(PyObject *module)
        {
          installType(&PY_TYPE(RAMDirectory), module, "RAMDirectory", 0);
        }

        void t_RAMDirectory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RAMDirectory).tp_dict, "class_", make_descriptor(RAMDirectory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RAMDirectory).tp_dict, "wrapfn_", make_descriptor(t_RAMDirectory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RAMDirectory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RAMDirectory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RAMDirectory::initializeClass, 1)))
            return NULL;
          return t_RAMDirectory::wrap_Object(RAMDirectory(((t_RAMDirectory *) arg)->object.this$));
        }
        static PyObject *t_RAMDirectory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RAMDirectory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RAMDirectory_init_(t_RAMDirectory *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              RAMDirectory object((jobject) NULL);

              INT_CALL(object = RAMDirectory());
              self->object = object;
              break;
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::org::apache::lucene::store::IOContext a1((jobject) NULL);
              RAMDirectory object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
              {
                INT_CALL(object = RAMDirectory(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_RAMDirectory_close(t_RAMDirectory *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(RAMDirectory), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_RAMDirectory_createOutput(t_RAMDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexOutput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.createOutput(a0, a1));
            return ::org::apache::lucene::store::t_IndexOutput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(RAMDirectory), (PyObject *) self, "createOutput", args, 2);
        }

        static PyObject *t_RAMDirectory_deleteFile(t_RAMDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.deleteFile(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(RAMDirectory), (PyObject *) self, "deleteFile", args, 2);
        }

        static PyObject *t_RAMDirectory_fileExists(t_RAMDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileExists(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(RAMDirectory), (PyObject *) self, "fileExists", args, 2);
        }

        static PyObject *t_RAMDirectory_fileLength(t_RAMDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileLength(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(RAMDirectory), (PyObject *) self, "fileLength", args, 2);
        }

        static PyObject *t_RAMDirectory_getLockID(t_RAMDirectory *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getLockID());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(RAMDirectory), (PyObject *) self, "getLockID", args, 2);
        }

        static PyObject *t_RAMDirectory_listAll(t_RAMDirectory *self, PyObject *args)
        {
          JArray< ::java::lang::String > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.listAll());
            return JArray<jstring>(result.this$).wrap();
          }

          return callSuper(&PY_TYPE(RAMDirectory), (PyObject *) self, "listAll", args, 2);
        }

        static PyObject *t_RAMDirectory_openInput(t_RAMDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.openInput(a0, a1));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(RAMDirectory), (PyObject *) self, "openInput", args, 2);
        }

        static PyObject *t_RAMDirectory_ramBytesUsed(t_RAMDirectory *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_RAMDirectory_sync(t_RAMDirectory *self, PyObject *args)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(self->object.sync(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(RAMDirectory), (PyObject *) self, "sync", args, 2);
        }

        static PyObject *t_RAMDirectory_get__lockID(t_RAMDirectory *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getLockID());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/CompoundFileDirectory$FileEntry.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *CompoundFileDirectory$FileEntry::class$ = NULL;
        jmethodID *CompoundFileDirectory$FileEntry::mids$ = NULL;
        bool CompoundFileDirectory$FileEntry::live$ = false;

        jclass CompoundFileDirectory$FileEntry::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/CompoundFileDirectory$FileEntry");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CompoundFileDirectory$FileEntry::CompoundFileDirectory$FileEntry() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_CompoundFileDirectory$FileEntry_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CompoundFileDirectory$FileEntry_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CompoundFileDirectory$FileEntry_init_(t_CompoundFileDirectory$FileEntry *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_CompoundFileDirectory$FileEntry__methods_[] = {
          DECLARE_METHOD(t_CompoundFileDirectory$FileEntry, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CompoundFileDirectory$FileEntry, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CompoundFileDirectory$FileEntry, t_CompoundFileDirectory$FileEntry, ::java::lang::Object, CompoundFileDirectory$FileEntry, t_CompoundFileDirectory$FileEntry_init_, 0, 0, 0, 0, 0);

        void t_CompoundFileDirectory$FileEntry::install(PyObject *module)
        {
          installType(&PY_TYPE(CompoundFileDirectory$FileEntry), module, "CompoundFileDirectory$FileEntry", 0);
        }

        void t_CompoundFileDirectory$FileEntry::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CompoundFileDirectory$FileEntry).tp_dict, "class_", make_descriptor(CompoundFileDirectory$FileEntry::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CompoundFileDirectory$FileEntry).tp_dict, "wrapfn_", make_descriptor(t_CompoundFileDirectory$FileEntry::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CompoundFileDirectory$FileEntry).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CompoundFileDirectory$FileEntry_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CompoundFileDirectory$FileEntry::initializeClass, 1)))
            return NULL;
          return t_CompoundFileDirectory$FileEntry::wrap_Object(CompoundFileDirectory$FileEntry(((t_CompoundFileDirectory$FileEntry *) arg)->object.this$));
        }
        static PyObject *t_CompoundFileDirectory$FileEntry_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CompoundFileDirectory$FileEntry::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CompoundFileDirectory$FileEntry_init_(t_CompoundFileDirectory$FileEntry *self, PyObject *args, PyObject *kwds)
        {
          CompoundFileDirectory$FileEntry object((jobject) NULL);

          INT_CALL(object = CompoundFileDirectory$FileEntry());
          self->object = object;

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupPriorityQueue.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupResult.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *Lookup$LookupPriorityQueue::class$ = NULL;
          jmethodID *Lookup$LookupPriorityQueue::mids$ = NULL;
          bool Lookup$LookupPriorityQueue::live$ = false;

          jclass Lookup$LookupPriorityQueue::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/Lookup$LookupPriorityQueue");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_getResults_95554974] = env->getMethodID(cls, "getResults", "()[Lorg/apache/lucene/search/suggest/Lookup$LookupResult;");
              mids$[mid_lessThan_4deadb0a] = env->getMethodID(cls, "lessThan", "(Lorg/apache/lucene/search/suggest/Lookup$LookupResult;Lorg/apache/lucene/search/suggest/Lookup$LookupResult;)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lookup$LookupPriorityQueue::Lookup$LookupPriorityQueue(jint a0) : ::org::apache::lucene::util::PriorityQueue(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          JArray< ::org::apache::lucene::search::suggest::Lookup$LookupResult > Lookup$LookupPriorityQueue::getResults() const
          {
            return JArray< ::org::apache::lucene::search::suggest::Lookup$LookupResult >(env->callObjectMethod(this$, mids$[mid_getResults_95554974]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_Lookup$LookupPriorityQueue_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lookup$LookupPriorityQueue_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lookup$LookupPriorityQueue_of_(t_Lookup$LookupPriorityQueue *self, PyObject *args);
          static int t_Lookup$LookupPriorityQueue_init_(t_Lookup$LookupPriorityQueue *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lookup$LookupPriorityQueue_getResults(t_Lookup$LookupPriorityQueue *self);
          static PyObject *t_Lookup$LookupPriorityQueue_get__results(t_Lookup$LookupPriorityQueue *self, void *data);
          static PyObject *t_Lookup$LookupPriorityQueue_get__parameters_(t_Lookup$LookupPriorityQueue *self, void *data);
          static PyGetSetDef t_Lookup$LookupPriorityQueue__fields_[] = {
            DECLARE_GET_FIELD(t_Lookup$LookupPriorityQueue, results),
            DECLARE_GET_FIELD(t_Lookup$LookupPriorityQueue, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lookup$LookupPriorityQueue__methods_[] = {
            DECLARE_METHOD(t_Lookup$LookupPriorityQueue, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lookup$LookupPriorityQueue, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lookup$LookupPriorityQueue, of_, METH_VARARGS),
            DECLARE_METHOD(t_Lookup$LookupPriorityQueue, getResults, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lookup$LookupPriorityQueue, t_Lookup$LookupPriorityQueue, ::org::apache::lucene::util::PriorityQueue, Lookup$LookupPriorityQueue, t_Lookup$LookupPriorityQueue_init_, 0, 0, t_Lookup$LookupPriorityQueue__fields_, 0, 0);
          PyObject *t_Lookup$LookupPriorityQueue::wrap_Object(const Lookup$LookupPriorityQueue& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Lookup$LookupPriorityQueue::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Lookup$LookupPriorityQueue *self = (t_Lookup$LookupPriorityQueue *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_Lookup$LookupPriorityQueue::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Lookup$LookupPriorityQueue::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Lookup$LookupPriorityQueue *self = (t_Lookup$LookupPriorityQueue *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_Lookup$LookupPriorityQueue::install(PyObject *module)
          {
            installType(&PY_TYPE(Lookup$LookupPriorityQueue), module, "Lookup$LookupPriorityQueue", 0);
          }

          void t_Lookup$LookupPriorityQueue::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lookup$LookupPriorityQueue).tp_dict, "class_", make_descriptor(Lookup$LookupPriorityQueue::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lookup$LookupPriorityQueue).tp_dict, "wrapfn_", make_descriptor(t_Lookup$LookupPriorityQueue::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lookup$LookupPriorityQueue).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lookup$LookupPriorityQueue_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lookup$LookupPriorityQueue::initializeClass, 1)))
              return NULL;
            return t_Lookup$LookupPriorityQueue::wrap_Object(Lookup$LookupPriorityQueue(((t_Lookup$LookupPriorityQueue *) arg)->object.this$));
          }
          static PyObject *t_Lookup$LookupPriorityQueue_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lookup$LookupPriorityQueue::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Lookup$LookupPriorityQueue_of_(t_Lookup$LookupPriorityQueue *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_Lookup$LookupPriorityQueue_init_(t_Lookup$LookupPriorityQueue *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            Lookup$LookupPriorityQueue object((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              INT_CALL(object = Lookup$LookupPriorityQueue(a0));
              self->object = object;
              self->parameters[0] = &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lookup$LookupPriorityQueue_getResults(t_Lookup$LookupPriorityQueue *self)
          {
            JArray< ::org::apache::lucene::search::suggest::Lookup$LookupResult > result((jobject) NULL);
            OBJ_CALL(result = self->object.getResults());
            return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::suggest::t_Lookup$LookupResult::wrap_jobject);
          }
          static PyObject *t_Lookup$LookupPriorityQueue_get__parameters_(t_Lookup$LookupPriorityQueue *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_Lookup$LookupPriorityQueue_get__results(t_Lookup$LookupPriorityQueue *self, void *data)
          {
            JArray< ::org::apache::lucene::search::suggest::Lookup$LookupResult > value((jobject) NULL);
            OBJ_CALL(value = self->object.getResults());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::suggest::t_Lookup$LookupResult::wrap_jobject);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FilterDirectoryReader$SubReaderWrapper.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FilterDirectoryReader$SubReaderWrapper::class$ = NULL;
        jmethodID *FilterDirectoryReader$SubReaderWrapper::mids$ = NULL;
        bool FilterDirectoryReader$SubReaderWrapper::live$ = false;

        jclass FilterDirectoryReader$SubReaderWrapper::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FilterDirectoryReader$SubReaderWrapper");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_wrap_3b1ad795] = env->getMethodID(cls, "wrap", "(Lorg/apache/lucene/index/AtomicReader;)Lorg/apache/lucene/index/AtomicReader;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterDirectoryReader$SubReaderWrapper::FilterDirectoryReader$SubReaderWrapper() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::index::AtomicReader FilterDirectoryReader$SubReaderWrapper::wrap(const ::org::apache::lucene::index::AtomicReader & a0) const
        {
          return ::org::apache::lucene::index::AtomicReader(env->callObjectMethod(this$, mids$[mid_wrap_3b1ad795], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FilterDirectoryReader$SubReaderWrapper_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterDirectoryReader$SubReaderWrapper_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterDirectoryReader$SubReaderWrapper_of_(t_FilterDirectoryReader$SubReaderWrapper *self, PyObject *args);
        static int t_FilterDirectoryReader$SubReaderWrapper_init_(t_FilterDirectoryReader$SubReaderWrapper *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterDirectoryReader$SubReaderWrapper_wrap(t_FilterDirectoryReader$SubReaderWrapper *self, PyObject *arg);
        static PyObject *t_FilterDirectoryReader$SubReaderWrapper_get__parameters_(t_FilterDirectoryReader$SubReaderWrapper *self, void *data);
        static PyGetSetDef t_FilterDirectoryReader$SubReaderWrapper__fields_[] = {
          DECLARE_GET_FIELD(t_FilterDirectoryReader$SubReaderWrapper, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FilterDirectoryReader$SubReaderWrapper__methods_[] = {
          DECLARE_METHOD(t_FilterDirectoryReader$SubReaderWrapper, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterDirectoryReader$SubReaderWrapper, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterDirectoryReader$SubReaderWrapper, of_, METH_VARARGS),
          DECLARE_METHOD(t_FilterDirectoryReader$SubReaderWrapper, wrap, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilterDirectoryReader$SubReaderWrapper, t_FilterDirectoryReader$SubReaderWrapper, ::java::lang::Object, FilterDirectoryReader$SubReaderWrapper, t_FilterDirectoryReader$SubReaderWrapper_init_, 0, 0, t_FilterDirectoryReader$SubReaderWrapper__fields_, 0, 0);
        PyObject *t_FilterDirectoryReader$SubReaderWrapper::wrap_Object(const FilterDirectoryReader$SubReaderWrapper& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FilterDirectoryReader$SubReaderWrapper::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FilterDirectoryReader$SubReaderWrapper *self = (t_FilterDirectoryReader$SubReaderWrapper *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FilterDirectoryReader$SubReaderWrapper::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FilterDirectoryReader$SubReaderWrapper::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FilterDirectoryReader$SubReaderWrapper *self = (t_FilterDirectoryReader$SubReaderWrapper *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FilterDirectoryReader$SubReaderWrapper::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterDirectoryReader$SubReaderWrapper), module, "FilterDirectoryReader$SubReaderWrapper", 0);
        }

        void t_FilterDirectoryReader$SubReaderWrapper::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilterDirectoryReader$SubReaderWrapper).tp_dict, "class_", make_descriptor(FilterDirectoryReader$SubReaderWrapper::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilterDirectoryReader$SubReaderWrapper).tp_dict, "wrapfn_", make_descriptor(t_FilterDirectoryReader$SubReaderWrapper::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilterDirectoryReader$SubReaderWrapper).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterDirectoryReader$SubReaderWrapper_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterDirectoryReader$SubReaderWrapper::initializeClass, 1)))
            return NULL;
          return t_FilterDirectoryReader$SubReaderWrapper::wrap_Object(FilterDirectoryReader$SubReaderWrapper(((t_FilterDirectoryReader$SubReaderWrapper *) arg)->object.this$));
        }
        static PyObject *t_FilterDirectoryReader$SubReaderWrapper_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterDirectoryReader$SubReaderWrapper::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FilterDirectoryReader$SubReaderWrapper_of_(t_FilterDirectoryReader$SubReaderWrapper *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_FilterDirectoryReader$SubReaderWrapper_init_(t_FilterDirectoryReader$SubReaderWrapper *self, PyObject *args, PyObject *kwds)
        {
          FilterDirectoryReader$SubReaderWrapper object((jobject) NULL);

          INT_CALL(object = FilterDirectoryReader$SubReaderWrapper());
          self->object = object;
          self->parameters[0] = &::org::apache::lucene::index::PY_TYPE(AtomicReader);

          return 0;
        }

        static PyObject *t_FilterDirectoryReader$SubReaderWrapper_wrap(t_FilterDirectoryReader$SubReaderWrapper *self, PyObject *arg)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::org::apache::lucene::index::AtomicReader result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.wrap(a0));
            return ::org::apache::lucene::index::t_AtomicReader::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "wrap", arg);
          return NULL;
        }
        static PyObject *t_FilterDirectoryReader$SubReaderWrapper_get__parameters_(t_FilterDirectoryReader$SubReaderWrapper *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/es/SpanishLightStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace es {

          ::java::lang::Class *SpanishLightStemFilter::class$ = NULL;
          jmethodID *SpanishLightStemFilter::mids$ = NULL;
          bool SpanishLightStemFilter::live$ = false;

          jclass SpanishLightStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/es/SpanishLightStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanishLightStemFilter::SpanishLightStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean SpanishLightStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace es {
          static PyObject *t_SpanishLightStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanishLightStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanishLightStemFilter_init_(t_SpanishLightStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanishLightStemFilter_incrementToken(t_SpanishLightStemFilter *self, PyObject *args);

          static PyMethodDef t_SpanishLightStemFilter__methods_[] = {
            DECLARE_METHOD(t_SpanishLightStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanishLightStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanishLightStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanishLightStemFilter, t_SpanishLightStemFilter, ::org::apache::lucene::analysis::TokenFilter, SpanishLightStemFilter, t_SpanishLightStemFilter_init_, 0, 0, 0, 0, 0);

          void t_SpanishLightStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanishLightStemFilter), module, "SpanishLightStemFilter", 0);
          }

          void t_SpanishLightStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanishLightStemFilter).tp_dict, "class_", make_descriptor(SpanishLightStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanishLightStemFilter).tp_dict, "wrapfn_", make_descriptor(t_SpanishLightStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanishLightStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanishLightStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanishLightStemFilter::initializeClass, 1)))
              return NULL;
            return t_SpanishLightStemFilter::wrap_Object(SpanishLightStemFilter(((t_SpanishLightStemFilter *) arg)->object.this$));
          }
          static PyObject *t_SpanishLightStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanishLightStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanishLightStemFilter_init_(t_SpanishLightStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            SpanishLightStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = SpanishLightStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanishLightStemFilter_incrementToken(t_SpanishLightStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SpanishLightStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/hyphenation/TernaryTree$Iterator.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/util/Enumeration.h"
#include "org/apache/lucene/analysis/compound/hyphenation/TernaryTree.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {

            ::java::lang::Class *TernaryTree$Iterator::class$ = NULL;
            jmethodID *TernaryTree$Iterator::mids$ = NULL;
            bool TernaryTree$Iterator::live$ = false;

            jclass TernaryTree$Iterator::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/hyphenation/TernaryTree$Iterator");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_fe795a01] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/compound/hyphenation/TernaryTree;)V");
                mids$[mid_getValue_54c6a173] = env->getMethodID(cls, "getValue", "()C");
                mids$[mid_hasMoreElements_54c6a16a] = env->getMethodID(cls, "hasMoreElements", "()Z");
                mids$[mid_nextElement_14c7b5c5] = env->getMethodID(cls, "nextElement", "()Ljava/lang/String;");
                mids$[mid_rewind_54c6a166] = env->getMethodID(cls, "rewind", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TernaryTree$Iterator::TernaryTree$Iterator(const ::org::apache::lucene::analysis::compound::hyphenation::TernaryTree & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_fe795a01, a0.this$)) {}

            jchar TernaryTree$Iterator::getValue() const
            {
              return env->callCharMethod(this$, mids$[mid_getValue_54c6a173]);
            }

            jboolean TernaryTree$Iterator::hasMoreElements() const
            {
              return env->callBooleanMethod(this$, mids$[mid_hasMoreElements_54c6a16a]);
            }

            ::java::lang::String TernaryTree$Iterator::nextElement() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_nextElement_14c7b5c5]));
            }

            void TernaryTree$Iterator::rewind() const
            {
              env->callVoidMethod(this$, mids$[mid_rewind_54c6a166]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {
            static PyObject *t_TernaryTree$Iterator_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TernaryTree$Iterator_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TernaryTree$Iterator_init_(t_TernaryTree$Iterator *self, PyObject *args, PyObject *kwds);
            static PyObject *t_TernaryTree$Iterator_getValue(t_TernaryTree$Iterator *self);
            static PyObject *t_TernaryTree$Iterator_hasMoreElements(t_TernaryTree$Iterator *self);
            static PyObject *t_TernaryTree$Iterator_nextElement(t_TernaryTree$Iterator *self);
            static PyObject *t_TernaryTree$Iterator_rewind(t_TernaryTree$Iterator *self);
            static PyObject *t_TernaryTree$Iterator_get__value(t_TernaryTree$Iterator *self, void *data);
            static PyGetSetDef t_TernaryTree$Iterator__fields_[] = {
              DECLARE_GET_FIELD(t_TernaryTree$Iterator, value),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_TernaryTree$Iterator__methods_[] = {
              DECLARE_METHOD(t_TernaryTree$Iterator, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TernaryTree$Iterator, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TernaryTree$Iterator, getValue, METH_NOARGS),
              DECLARE_METHOD(t_TernaryTree$Iterator, hasMoreElements, METH_NOARGS),
              DECLARE_METHOD(t_TernaryTree$Iterator, nextElement, METH_NOARGS),
              DECLARE_METHOD(t_TernaryTree$Iterator, rewind, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TernaryTree$Iterator, t_TernaryTree$Iterator, ::java::lang::Object, TernaryTree$Iterator, t_TernaryTree$Iterator_init_, PyObject_SelfIter, ((PyObject *(*)(::java::util::t_Enumeration *)) get_enumeration_next< ::java::util::t_Enumeration,::java::lang::t_String >), t_TernaryTree$Iterator__fields_, 0, 0);

            void t_TernaryTree$Iterator::install(PyObject *module)
            {
              installType(&PY_TYPE(TernaryTree$Iterator), module, "TernaryTree$Iterator", 0);
            }

            void t_TernaryTree$Iterator::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TernaryTree$Iterator).tp_dict, "class_", make_descriptor(TernaryTree$Iterator::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TernaryTree$Iterator).tp_dict, "wrapfn_", make_descriptor(t_TernaryTree$Iterator::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TernaryTree$Iterator).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TernaryTree$Iterator_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TernaryTree$Iterator::initializeClass, 1)))
                return NULL;
              return t_TernaryTree$Iterator::wrap_Object(TernaryTree$Iterator(((t_TernaryTree$Iterator *) arg)->object.this$));
            }
            static PyObject *t_TernaryTree$Iterator_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TernaryTree$Iterator::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TernaryTree$Iterator_init_(t_TernaryTree$Iterator *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::analysis::compound::hyphenation::TernaryTree a0((jobject) NULL);
              TernaryTree$Iterator object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::analysis::compound::hyphenation::TernaryTree::initializeClass, &a0))
              {
                INT_CALL(object = TernaryTree$Iterator(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_TernaryTree$Iterator_getValue(t_TernaryTree$Iterator *self)
            {
              jchar result;
              OBJ_CALL(result = self->object.getValue());
              return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            static PyObject *t_TernaryTree$Iterator_hasMoreElements(t_TernaryTree$Iterator *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.hasMoreElements());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_TernaryTree$Iterator_nextElement(t_TernaryTree$Iterator *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.nextElement());
              return j2p(result);
            }

            static PyObject *t_TernaryTree$Iterator_rewind(t_TernaryTree$Iterator *self)
            {
              OBJ_CALL(self->object.rewind());
              Py_RETURN_NONE;
            }

            static PyObject *t_TernaryTree$Iterator_get__value(t_TernaryTree$Iterator *self, void *data)
            {
              jchar value;
              OBJ_CALL(value = self->object.getValue());
              return PyUnicode_FromUnicode((Py_UNICODE *) &value, 1);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/LongValues.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *LongValues::class$ = NULL;
        jmethodID *LongValues::mids$ = NULL;
        bool LongValues::live$ = false;
        LongValues *LongValues::IDENTITY = NULL;

        jclass LongValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/LongValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_get_0ee6df33] = env->getMethodID(cls, "get", "(J)J");
            mids$[mid_get_39c7bd20] = env->getMethodID(cls, "get", "(I)J");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            IDENTITY = new LongValues(env->getStaticObjectField(cls, "IDENTITY", "Lorg/apache/lucene/util/LongValues;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LongValues::LongValues() : ::org::apache::lucene::index::NumericDocValues(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jlong LongValues::get(jlong a0) const
        {
          return env->callLongMethod(this$, mids$[mid_get_0ee6df33], a0);
        }

        jlong LongValues::get(jint a0) const
        {
          return env->callLongMethod(this$, mids$[mid_get_39c7bd20], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_LongValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LongValues_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LongValues_init_(t_LongValues *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LongValues_get(t_LongValues *self, PyObject *args);

        static PyMethodDef t_LongValues__methods_[] = {
          DECLARE_METHOD(t_LongValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongValues, get, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LongValues, t_LongValues, ::org::apache::lucene::index::NumericDocValues, LongValues, t_LongValues_init_, 0, 0, 0, 0, 0);

        void t_LongValues::install(PyObject *module)
        {
          installType(&PY_TYPE(LongValues), module, "LongValues", 0);
        }

        void t_LongValues::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LongValues).tp_dict, "class_", make_descriptor(LongValues::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LongValues).tp_dict, "wrapfn_", make_descriptor(t_LongValues::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LongValues).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(LongValues::initializeClass);
          PyDict_SetItemString(PY_TYPE(LongValues).tp_dict, "IDENTITY", make_descriptor(t_LongValues::wrap_Object(*LongValues::IDENTITY)));
        }

        static PyObject *t_LongValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LongValues::initializeClass, 1)))
            return NULL;
          return t_LongValues::wrap_Object(LongValues(((t_LongValues *) arg)->object.this$));
        }
        static PyObject *t_LongValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LongValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LongValues_init_(t_LongValues *self, PyObject *args, PyObject *kwds)
        {
          LongValues object((jobject) NULL);

          INT_CALL(object = LongValues());
          self->object = object;

          return 0;
        }

        static PyObject *t_LongValues_get(t_LongValues *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;
              jlong result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              jint a0;
              jlong result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          return callSuper(&PY_TYPE(LongValues), (PyObject *) self, "get", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/LockReleaseFailedException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *LockReleaseFailedException::class$ = NULL;
        jmethodID *LockReleaseFailedException::mids$ = NULL;
        bool LockReleaseFailedException::live$ = false;

        jclass LockReleaseFailedException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/LockReleaseFailedException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LockReleaseFailedException::LockReleaseFailedException(const ::java::lang::String & a0) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_LockReleaseFailedException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LockReleaseFailedException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LockReleaseFailedException_init_(t_LockReleaseFailedException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_LockReleaseFailedException__methods_[] = {
          DECLARE_METHOD(t_LockReleaseFailedException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LockReleaseFailedException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LockReleaseFailedException, t_LockReleaseFailedException, ::java::io::IOException, LockReleaseFailedException, t_LockReleaseFailedException_init_, 0, 0, 0, 0, 0);

        void t_LockReleaseFailedException::install(PyObject *module)
        {
          installType(&PY_TYPE(LockReleaseFailedException), module, "LockReleaseFailedException", 0);
        }

        void t_LockReleaseFailedException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LockReleaseFailedException).tp_dict, "class_", make_descriptor(LockReleaseFailedException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LockReleaseFailedException).tp_dict, "wrapfn_", make_descriptor(t_LockReleaseFailedException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LockReleaseFailedException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LockReleaseFailedException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LockReleaseFailedException::initializeClass, 1)))
            return NULL;
          return t_LockReleaseFailedException::wrap_Object(LockReleaseFailedException(((t_LockReleaseFailedException *) arg)->object.this$));
        }
        static PyObject *t_LockReleaseFailedException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LockReleaseFailedException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LockReleaseFailedException_init_(t_LockReleaseFailedException *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          LockReleaseFailedException object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = LockReleaseFailedException(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
